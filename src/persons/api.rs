use std::sync::{Arc, RwLock};
use rocket::serde::json::Json;
use rocket::State;
use crate::data_storage::{DataStorage, ProjectStorage};
use crate::projects::api::{ApiError, ApiResult};
use crate::projects::Person;
use crate::session::session_guard::Session;
use crate::settings::Settings;

/// POST /api/persons/
/// Create a new person
#[post("/api/persons", data = "<person>")]
pub fn create_person(_session: Session, settings: &State<Settings>, data_storage: &State<Arc<DataStorage>>, person: Json<Person>) -> Json<ApiResult<Person>> {
    let mut person = person.into_inner();
    let data_storage = Arc::clone(data_storage);

    // Check if api request contains a person id, if so return an error as the id is generated by the server
    match person.id{
        Some(_) => {
            eprintln!("Person already has an id");
            return ApiResult::new_error(ApiError::BadRequest("Person is not supposed to have an id".to_string()));
        },
        None => {
            person.id = Some(uuid::Uuid::new_v4());
        },
    }

    if let Some(ref mut gnd) = person.gnd{
        if let None = gnd.id{
            gnd.id = Some(uuid::Uuid::new_v4());
        }else{
            eprintln!("Persons gnd already has a id");
            return ApiResult::new_error(ApiError::BadRequest("GND is not supposed to have an id".to_string()));
        }
    };

    if let Some(ref mut orcid) = person.orcid{
        if let None = orcid.id{
            orcid.id = Some(uuid::Uuid::new_v4());
        }else{
            eprintln!("Persons orcid already has a id");
            return ApiResult::new_error(ApiError::BadRequest("ORCID is not supposed to have an id".to_string()));
        }
    };

    if let Some(ref mut ror) = person.ror{
        if let None = ror.id{
            ror.id = Some(uuid::Uuid::new_v4());
        }else{
            eprintln!("Persons ror already has a id");
            return ApiResult::new_error(ApiError::BadRequest("ROR is not supposed to have an id".to_string()));
        }
    };

    // Insert into data storage
    data_storage.data.write().unwrap().persons.insert(person.id.unwrap(), Arc::new(RwLock::new(person.clone())));

    ApiResult::new_data(person)
}

/// PUT /api/persons/<id>
/// Update specified person
#[put("/api/persons/<id>", data = "<person>")]
pub fn update_person(_session: Session, settings: &State<Settings>, data_storage: &State<Arc<DataStorage>>, person: Json<Person>, id: &str) -> Json<ApiResult<Person>> {
    let mut person = person.into_inner();
    let data_storage = Arc::clone(data_storage);

    // Check if id in url matches id in body
    match person.id{
        Some(ref person_id) => {
            let id = match uuid::Uuid::parse_str(id) {
                Ok(id) => id,
                Err(e) => {
                    eprintln!("Couldn't parse person id: {}", e);
                    return ApiResult::new_error(ApiError::BadRequest("Couldn't parse person id".to_string()));
                },
            };

            if *person_id != id{
                eprintln!("Person id in url doesn't match person id in body");
                return ApiResult::new_error(ApiError::BadRequest("Person id in url doesn't match person id in body. ID change is not allowed".to_string()));
            }
        },
        None => {
            eprintln!("Person doesn't have an id");
            return ApiResult::new_error(ApiError::BadRequest("Person doesn't have an id".to_string()));
        },
    }

    // Insert into data storage
    data_storage.data.write().unwrap().persons.insert(person.id.unwrap(), Arc::new(RwLock::new(person.clone())));

    ApiResult::new_data(person)
}

// GET /api/persons/<id>
/// Get a person by id
#[get("/api/persons/<id>")]
pub fn get_person(_session: Session, settings: &State<Settings>, data_storage: &State<Arc<DataStorage>>, id: String) -> Json<ApiResult<Person>> {
    let data_storage = Arc::clone(data_storage);
    let id = match uuid::Uuid::parse_str(&id) {
        Ok(id) => id,
        Err(e) => {
            eprintln!("Couldn't parse person id: {}", e);
            return ApiResult::new_error(ApiError::BadRequest("Couldn't parse person id".to_string()));
        },
    };

    // Get person from data storage
    let person = match data_storage.data.read().unwrap().persons.get(&id){
        Some(person) => person.read().unwrap().clone(),
        None => {
            return ApiResult::new_error(ApiError::NotFound);
        },
    };

    ApiResult::new_data(person)
}

/// GET /api/persons?q=<query>
/// Search for persons
///
/// Arguments
/// * `query` - Query string as [`String`] - search for persons with first name, last name, orcid, gnd, or ror. Case Insensitive
/// * `limit` - Limit of results as [`Option<u16>`] - optional, default is 10
///
/// Returns
/// * `Json<ApiResult<Vec<Person>>>` - Api Result with Json List of persons matching the query
#[get("/api/persons?<query>&<limit>")]
pub fn search_persons(_session: Session, settings: &State<Settings>, data_storage: &State<Arc<DataStorage>>, query: String, limit: Option<usize>) -> Json<ApiResult<Vec<Person>>> {
    let data_storage = Arc::clone(data_storage);

    let query = query.to_lowercase();

    // Set limit to 10 if not given
    let limit = match limit{
        Some(limit) => limit,
        None => 10,
    };

    // Get all persons from data storage
    let persons : Vec<Person> = data_storage.data.read().unwrap().persons.values().map(|person| person.read().unwrap().clone()).collect();

    let mut result : Vec<Person> = Vec::new();

    let mut iter = persons.into_iter();

    // Filter persons by query
    while let Some(person) = iter.next(){
        if result.len() >= limit{
            break;
        }
        if let Some(first_names) = &person.first_names{
            if first_names.to_lowercase().contains(&query){
                result.push(person);
                continue;
            }
        }
        if person.last_names.to_lowercase().contains(&query){
            result.push(person);
            continue;
        }
        if let Some(orcid) = &person.orcid{
            if orcid.value.to_lowercase().contains(&query){
                result.push(person);
                continue;
            }
        }
        if let Some(gnd) = &person.gnd{
            if gnd.value.to_lowercase().contains(&query){
                result.push(person);
                continue;
            }
        }
        if let Some(ror) = &person.ror{
            if ror.value.to_lowercase().contains(&query){
                result.push(person);
                continue;
            }
        }
    }

    ApiResult::new_data(result)
}