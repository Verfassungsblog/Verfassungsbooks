/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var t,e,i,s,n={371:function(t){!function(){"use strict";try{if(typeof document<"u"){var t=document.createElement("style");t.appendChild(document.createTextNode(".cdx-quote-icon svg{transform:rotate(180deg)}.cdx-quote{margin:0}.cdx-quote__text{min-height:158px;margin-bottom:10px}.cdx-quote [contentEditable=true][data-placeholder]:before{position:absolute;content:attr(data-placeholder);color:#707684;font-weight:400;opacity:0}.cdx-quote [contentEditable=true][data-placeholder]:empty:before{opacity:1}.cdx-quote [contentEditable=true][data-placeholder]:empty:focus:before{opacity:0}.cdx-quote-settings{display:flex}.cdx-quote-settings .cdx-settings-button{width:50%}")),document.head.appendChild(t)}}catch(t){console.error("vite-plugin-css-injected-by-js",t)}}(),t.exports=function(){"use strict";class t{static get isReadOnlySupported(){return!0}static get toolbox(){return{icon:'<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 10.8182L9 10.8182C8.80222 10.8182 8.60888 10.7649 8.44443 10.665C8.27998 10.5651 8.15181 10.4231 8.07612 10.257C8.00043 10.0909 7.98063 9.90808 8.01922 9.73174C8.0578 9.55539 8.15304 9.39341 8.29289 9.26627C8.43275 9.13913 8.61093 9.05255 8.80491 9.01747C8.99889 8.98239 9.19996 9.00039 9.38268 9.0692C9.56541 9.13801 9.72159 9.25453 9.83147 9.40403C9.94135 9.55353 10 9.72929 10 9.90909L10 12.1818C10 12.664 9.78929 13.1265 9.41421 13.4675C9.03914 13.8084 8.53043 14 8 14"/><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 10.8182L15 10.8182C14.8022 10.8182 14.6089 10.7649 14.4444 10.665C14.28 10.5651 14.1518 10.4231 14.0761 10.257C14.0004 10.0909 13.9806 9.90808 14.0192 9.73174C14.0578 9.55539 14.153 9.39341 14.2929 9.26627C14.4327 9.13913 14.6109 9.05255 14.8049 9.01747C14.9989 8.98239 15.2 9.00039 15.3827 9.0692C15.5654 9.13801 15.7216 9.25453 15.8315 9.40403C15.9414 9.55353 16 9.72929 16 9.90909L16 12.1818C16 12.664 15.7893 13.1265 15.4142 13.4675C15.0391 13.8084 14.5304 14 14 14"/></svg>',title:"Quote"}}static get contentless(){return!0}static get enableLineBreaks(){return!0}static get DEFAULT_QUOTE_PLACEHOLDER(){return"Enter a quote"}static get DEFAULT_CAPTION_PLACEHOLDER(){return"Enter a caption"}static get ALIGNMENTS(){return{left:"left",center:"center"}}static get DEFAULT_ALIGNMENT(){return t.ALIGNMENTS.left}static get conversionConfig(){return{import:"text",export:function(t){return t.caption?`${t.text} — ${t.caption}`:t.text}}}get CSS(){return{baseClass:this.api.styles.block,wrapper:"cdx-quote",text:"cdx-quote__text",input:this.api.styles.input,caption:"cdx-quote__caption"}}get settings(){return[{name:"left",icon:'<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M17 7L5 7"/><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M17 17H5"/><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M13 12L5 12"/></svg>'},{name:"center",icon:'<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M18 7L6 7"/><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M18 17H6"/><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M16 12L8 12"/></svg>'}]}constructor({data:e,config:i,api:s,readOnly:n}){const{ALIGNMENTS:o,DEFAULT_ALIGNMENT:r}=t;this.api=s,this.readOnly=n,this.quotePlaceholder=i.quotePlaceholder||t.DEFAULT_QUOTE_PLACEHOLDER,this.captionPlaceholder=i.captionPlaceholder||t.DEFAULT_CAPTION_PLACEHOLDER,this.data={text:e.text||"",caption:e.caption||"",alignment:Object.values(o).includes(e.alignment)&&e.alignment||i.defaultAlignment||r}}render(){const t=this._make("blockquote",[this.CSS.baseClass,this.CSS.wrapper]),e=this._make("div",[this.CSS.input,this.CSS.text],{contentEditable:!this.readOnly,innerHTML:this.data.text}),i=this._make("div",[this.CSS.input,this.CSS.caption],{contentEditable:!this.readOnly,innerHTML:this.data.caption});return e.dataset.placeholder=this.quotePlaceholder,i.dataset.placeholder=this.captionPlaceholder,t.appendChild(e),t.appendChild(i),t}save(t){const e=t.querySelector(`.${this.CSS.text}`),i=t.querySelector(`.${this.CSS.caption}`);return Object.assign(this.data,{text:e.innerHTML,caption:i.innerHTML})}static get sanitize(){return{text:{br:!0},caption:{br:!0},alignment:{}}}renderSettings(){const t=t=>t[0].toUpperCase()+t.substr(1);return this.settings.map((e=>({icon:e.icon,label:this.api.i18n.t(`Align ${t(e.name)}`),onActivate:()=>this._toggleTune(e.name),isActive:this.data.alignment===e.name,closeOnActivate:!0})))}_toggleTune(t){this.data.alignment=t}_make(t,e=null,i={}){const s=document.createElement(t);Array.isArray(e)?s.classList.add(...e):e&&s.classList.add(e);for(const t in i)s[t]=i[t];return s}}return t}()},176:t=>{var e;self,e=()=>(()=>{var t={757:(t,e,i)=>{t.exports=i(666)},666:t=>{var e=function(t){"use strict";var e,i=Object.prototype,s=i.hasOwnProperty,n="function"==typeof Symbol?Symbol:{},o=n.iterator||"@@iterator",r=n.asyncIterator||"@@asyncIterator",a=n.toStringTag||"@@toStringTag";function l(t,e,i){return Object.defineProperty(t,e,{value:i,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{l({},"")}catch(t){l=function(t,e,i){return t[e]=i}}function c(t,e,i,s){var n=e&&e.prototype instanceof f?e:f,o=Object.create(n.prototype),r=new _(s||[]);return o._invoke=function(t,e,i){var s=h;return function(n,o){if(s===p)throw new Error("Generator is already running");if(s===g){if("throw"===n)throw o;return I()}for(i.method=n,i.arg=o;;){var r=i.delegate;if(r){var a=A(r,i);if(a){if(a===m)continue;return a}}if("next"===i.method)i.sent=i._sent=i.arg;else if("throw"===i.method){if(s===h)throw s=g,i.arg;i.dispatchException(i.arg)}else"return"===i.method&&i.abrupt("return",i.arg);s=p;var l=d(t,e,i);if("normal"===l.type){if(s=i.done?g:u,l.arg===m)continue;return{value:l.arg,done:i.done}}"throw"===l.type&&(s=g,i.method="throw",i.arg=l.arg)}}}(t,i,r),o}function d(t,e,i){try{return{type:"normal",arg:t.call(e,i)}}catch(t){return{type:"throw",arg:t}}}t.wrap=c;var h="suspendedStart",u="suspendedYield",p="executing",g="completed",m={};function f(){}function b(){}function v(){}var y={};l(y,o,(function(){return this}));var w=Object.getPrototypeOf,k=w&&w(w(M([])));k&&k!==i&&s.call(k,o)&&(y=k);var x=v.prototype=f.prototype=Object.create(y);function E(t){["next","throw","return"].forEach((function(e){l(t,e,(function(t){return this._invoke(e,t)}))}))}function C(t,e){function i(n,o,r,a){var l=d(t[n],t,o);if("throw"!==l.type){var c=l.arg,h=c.value;return h&&"object"==typeof h&&s.call(h,"__await")?e.resolve(h.__await).then((function(t){i("next",t,r,a)}),(function(t){i("throw",t,r,a)})):e.resolve(h).then((function(t){c.value=t,r(c)}),(function(t){return i("throw",t,r,a)}))}a(l.arg)}var n;this._invoke=function(t,s){function o(){return new e((function(e,n){i(t,s,e,n)}))}return n=n?n.then(o,o):o()}}function A(t,i){var s=t.iterator[i.method];if(s===e){if(i.delegate=null,"throw"===i.method){if(t.iterator.return&&(i.method="return",i.arg=e,A(t,i),"throw"===i.method))return m;i.method="throw",i.arg=new TypeError("The iterator does not provide a 'throw' method")}return m}var n=d(s,t.iterator,i.arg);if("throw"===n.type)return i.method="throw",i.arg=n.arg,i.delegate=null,m;var o=n.arg;return o?o.done?(i[t.resultName]=o.value,i.next=t.nextLoc,"return"!==i.method&&(i.method="next",i.arg=e),i.delegate=null,m):o:(i.method="throw",i.arg=new TypeError("iterator result is not an object"),i.delegate=null,m)}function S(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function T(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function _(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(S,this),this.reset(!0)}function M(t){if(t){var i=t[o];if(i)return i.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var n=-1,r=function i(){for(;++n<t.length;)if(s.call(t,n))return i.value=t[n],i.done=!1,i;return i.value=e,i.done=!0,i};return r.next=r}}return{next:I}}function I(){return{value:e,done:!0}}return b.prototype=v,l(x,"constructor",v),l(v,"constructor",b),b.displayName=l(v,a,"GeneratorFunction"),t.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===b||"GeneratorFunction"===(e.displayName||e.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,v):(t.__proto__=v,l(t,a,"GeneratorFunction")),t.prototype=Object.create(x),t},t.awrap=function(t){return{__await:t}},E(C.prototype),l(C.prototype,r,(function(){return this})),t.AsyncIterator=C,t.async=function(e,i,s,n,o){void 0===o&&(o=Promise);var r=new C(c(e,i,s,n),o);return t.isGeneratorFunction(i)?r:r.next().then((function(t){return t.done?t.value:r.next()}))},E(x),l(x,a,"Generator"),l(x,o,(function(){return this})),l(x,"toString",(function(){return"[object Generator]"})),t.keys=function(t){var e=[];for(var i in t)e.push(i);return e.reverse(),function i(){for(;e.length;){var s=e.pop();if(s in t)return i.value=s,i.done=!1,i}return i.done=!0,i}},t.values=M,_.prototype={constructor:_,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(T),!t)for(var i in this)"t"===i.charAt(0)&&s.call(this,i)&&!isNaN(+i.slice(1))&&(this[i]=e)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var i=this;function n(s,n){return a.type="throw",a.arg=t,i.next=s,n&&(i.method="next",i.arg=e),!!n}for(var o=this.tryEntries.length-1;o>=0;--o){var r=this.tryEntries[o],a=r.completion;if("root"===r.tryLoc)return n("end");if(r.tryLoc<=this.prev){var l=s.call(r,"catchLoc"),c=s.call(r,"finallyLoc");if(l&&c){if(this.prev<r.catchLoc)return n(r.catchLoc,!0);if(this.prev<r.finallyLoc)return n(r.finallyLoc)}else if(l){if(this.prev<r.catchLoc)return n(r.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<r.finallyLoc)return n(r.finallyLoc)}}}},abrupt:function(t,e){for(var i=this.tryEntries.length-1;i>=0;--i){var n=this.tryEntries[i];if(n.tryLoc<=this.prev&&s.call(n,"finallyLoc")&&this.prev<n.finallyLoc){var o=n;break}}o&&("break"===t||"continue"===t)&&o.tryLoc<=e&&e<=o.finallyLoc&&(o=null);var r=o?o.completion:{};return r.type=t,r.arg=e,o?(this.method="next",this.next=o.finallyLoc,m):this.complete(r)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),m},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var i=this.tryEntries[e];if(i.finallyLoc===t)return this.complete(i.completion,i.afterLoc),T(i),m}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var i=this.tryEntries[e];if(i.tryLoc===t){var s=i.completion;if("throw"===s.type){var n=s.arg;T(i)}return n}}throw new Error("illegal catch attempt")},delegateYield:function(t,i,s){return this.delegate={iterator:M(t),resultName:i,nextLoc:s},"next"===this.method&&(this.arg=e),m}},t}(t.exports);try{regeneratorRuntime=e}catch(t){"object"==typeof globalThis?globalThis.regeneratorRuntime=e:Function("r","regeneratorRuntime = r")(e)}},571:function(t,e){var i,s;i=function(t){"use strict";var e=function(){function t(t,e){for(var i=0;i<e.length;i++){var s=e[i];s.enumerable=s.enumerable||!1,s.configurable=!0,"value"in s&&(s.writable=!0),Object.defineProperty(t,s.key,s)}}return function(e,i,s){return i&&t(e.prototype,i),s&&t(e,s),e}}(),i=function(){function t(e){(function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")})(this,t),this.target=e,this.isContentEditable=e&&e.contentEditable}return e(t,[{key:"getPos",value:function(){if(document.activeElement!==this.target)return-1;if(this.isContentEditable){this.target.focus();var t=document.getSelection().getRangeAt(0),e=t.cloneRange();return e.selectNodeContents(this.target),e.setEnd(t.endContainer,t.endOffset),e.toString().length}return this.target.selectionStart}},{key:"setPos",value:function(t){if(this.isContentEditable){if(t>=0){var e=window.getSelection(),i=this.createRange(this.target,{count:t});i&&(i.collapse(!1),e.removeAllRanges(),e.addRange(i))}}else this.target.setSelectionRange(t,t)}},{key:"createRange",value:function(t,e,i){if(i||((i=document.createRange()).selectNode(t),i.setStart(t,0)),0===e.count)i.setEnd(t,e.count);else if(t&&e.count>0)if(t.nodeType===Node.TEXT_NODE)t.textContent.length<e.count?e.count-=t.textContent.length:(i.setEnd(t,e.count),e.count=0);else for(var s=0;s<t.childNodes.length&&(i=this.createRange(t.childNodes[s],e,i),0!==e.count);s++);return i}}]),t}();t.exports=i},void 0===(s=i.apply(e,[t]))||(t.exports=s)},334:(t,e,i)=>{t.exports=i(571)}},e={};function i(s){var n=e[s];if(void 0!==n)return n.exports;var o=e[s]={exports:{}};return t[s].call(o.exports,o,o.exports,i),o.exports}i.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return i.d(e,{a:e}),e},i.d=(t,e)=>{for(var s in e)i.o(e,s)&&!i.o(t,s)&&Object.defineProperty(t,s,{enumerable:!0,get:e[s]})},i.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e);var s={};return(()=>{"use strict";function t(t,e,i,s,n,o,r){try{var a=t[o](r),l=a.value}catch(t){return void i(t)}a.done?e(l):Promise.resolve(l).then(s,n)}function e(e){return function(){var i=this,s=arguments;return new Promise((function(n,o){var r=e.apply(i,s);function a(e){t(r,n,o,a,l,"next",e)}function l(e){t(r,n,o,a,l,"throw",e)}a(void 0)}))}}function n(t,e,i){return e in t?Object.defineProperty(t,e,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[e]=i,t}function o(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function r(t,e){for(var i=0;i<e.length;i++){var s=e[i];s.enumerable=s.enumerable||!1,s.configurable=!0,"value"in s&&(s.writable=!0),Object.defineProperty(t,s.key,s)}}function a(t,e,i){return e&&r(t.prototype,e),i&&r(t,i),Object.defineProperty(t,"prototype",{writable:!1}),t}i.d(s,{default:()=>m});var l=i(757),c=i.n(l),d=i(334),h=i.n(d),u=function(){function t(e,i,s){o(this,t),this.holder=i,this.observer=null,this.debounceTimer=s,this.mutationDebouncer=this.debounce((function(){e()}),this.debounceTimer)}return a(t,[{key:"setMutationObserver",value:function(){var t=this,e=this.holder.querySelector(".codex-editor__redactor");this.observer=new MutationObserver((function(e){t.mutationHandler(e)})),this.observer.observe(e,{childList:!0,attributes:!0,subtree:!0,characterData:!0,characterDataOldValue:!0})}},{key:"mutationHandler",value:function(t){var e=this,i=!1;t.forEach((function(t){switch(t.type){case"childList":t.target===e.holder?e.onDestroy():i=!0;break;case"characterData":i=!0;break;case"attributes":t.target.classList.contains("ce-block")||t.target.classList.contains("tc-toolbox")||(i=!0)}})),i&&this.mutationDebouncer()}},{key:"debounce",value:function(t,e){var i,s=this;return function(){for(var n=arguments.length,o=new Array(n),r=0;r<n;r++)o[r]=arguments[r];var a=s;clearTimeout(i),i=setTimeout((function(){return t.apply(a,o)}),e)}}},{key:"onDestroy",value:function(){var t=new CustomEvent("destroy");document.dispatchEvent(t),this.observer.disconnect()}}]),t}();function p(t,e){var i=Object.keys(t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(t);e&&(s=s.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),i.push.apply(i,s)}return i}function g(t){for(var e=1;e<arguments.length;e++){var i=null!=arguments[e]?arguments[e]:{};e%2?p(Object(i),!0).forEach((function(e){n(t,e,i[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(i)):p(Object(i)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(i,e))}))}return t}var m=function(){function t(e){var i=this,s=e.editor,n=e.config,r=void 0===n?{}:n,a=e.onUpdate,l=e.maxLength;o(this,t);var c={maxLength:30,onUpdate:function(){},config:{debounceTimer:200,shortcuts:{undo:["CMD+Z"],redo:["CMD+Y","CMD+SHIFT+Z"]}}},d=s.blocks,h=s.caret,p=s.configuration,m=p.holder,f=p.defaultBlock,b=c.config.shortcuts,v=r.shortcuts,y=g(g({},b),v),w=Array.isArray(y.undo)?y.undo:[y.undo],k=Array.isArray(y.redo)?y.redo:[y.redo],x=c.config.debounceTimer,E=r.debounceTimer,C=void 0===E?x:E;this.holder="string"==typeof m?document.getElementById(m):m,this.editor=s,this.defaultBlock=f,this.blocks=d,this.caret=h,this.shouldSaveHistory=!0,this.readOnly=p.readOnly,this.maxLength=l||c.maxLength,this.onUpdate=a||c.onUpdate,this.config={debounceTimer:C,shortcuts:{undo:w,redo:k}},new u((function(){return i.registerChange()}),this.holder,this.config.debounceTimer).setMutationObserver(),this.setEventListeners(),this.initialItem=null,this.clear()}var i,s,n;return a(t,[{key:"truncate",value:function(t,e){for(;t.length>e;)t.shift()}},{key:"initialize",value:function(t){var e="blocks"in t?t.blocks:t,i={index:e.length-1,state:e};this.stack[0]=i,this.initialItem=i}},{key:"clear",value:function(){this.stack=this.initialItem?[this.initialItem]:[{index:0,state:[{type:this.defaultBlock,data:{}}]}],this.position=0,this.onUpdate()}},{key:"setReadOnly",value:function(){var t=this.holder.querySelector(".ce-toolbox");this.readOnly=!t}},{key:"registerChange",value:function(){var t=this;this.setReadOnly(),this.readOnly||(this.editor&&this.editor.save&&this.shouldSaveHistory&&this.editor.save().then((function(e){t.editorDidUpdate(e.blocks)&&t.save(e.blocks)})),this.shouldSaveHistory=!0)}},{key:"editorDidUpdate",value:function(t){var e=this.stack[this.position].state;return!!t.length&&(t.length!==e.length||JSON.stringify(e)!==JSON.stringify(t))}},{key:"save",value:function(t){this.position>=this.maxLength&&this.truncate(this.stack,this.maxLength),this.position=Math.min(this.position,this.stack.length-1),this.stack=this.stack.slice(0,this.position+1);var e=this.blocks.getCurrentBlockIndex(),i=this.blocks.getBlocksCount(),s=e;t[e]||(s-=i-t.length);var n=!t[s]||"paragraph"!==t[s].type&&"header"!==t[s].type?null:this.getCaretIndex(e);this.stack.push({index:s,state:t,caretIndex:n}),this.position+=1,this.onUpdate()}},{key:"getCaretIndex",value:function(t){var e=this.holder.getElementsByClassName("ce-block__content");return new(h())(e[t].firstChild).getPos()}},{key:"insertDeletedBlock",value:function(t,e,i){for(var s=0;s<t.length;s+=1)if(!e[s]||t[s].id!==e[s].id){this.blocks.insert(t[s].type,t[s].data,{},s,!0),this.caret.setToBlock(i,"end");break}}},{key:"blockWasDropped",value:function(t,e){return t.length===e.length&&t.some((function(t,i){return t.id!==e[i].id}))}},{key:"blockWasSkipped",value:function(t,e,i,s){return t<e&&i.length!==s.length}},{key:"contentChangedInNoFocusBlock",value:function(t,e){return t!==e}},{key:"blockWasDeleted",value:function(t,e){return t.length>e.length}},{key:"undo",value:(n=e(c().mark((function t(){var e,i,s,n,o,r,a,l,d,h,u;return c().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(!this.canUndo()){t.next=43;break}if(e=this.stack[this.position],i=e.index,s=e.state,this.position-=1,this.shouldSaveHistory=!1,n=this.stack[this.position].index,o=this.stack[this.position],r=o.state,a=o.caretIndex,this.onUpdate(),l=this.blocks.getBlocksCount(),r[n]||(n-=1,this.stack[this.position].index=n),!this.blockWasDeleted(r,s)){t.next=13;break}this.insertDeletedBlock(r,s,n),t.next=38;break;case 13:if(!this.blockWasSkipped(n,i,r,s)){t.next=19;break}return t.next=16,this.blocks.delete(i);case 16:this.caret.setToBlock(n,"end"),t.next=38;break;case 19:if(!(l>r.length)){t.next=27;break}return t.next=22,this.blocks.render({blocks:r});case 22:return t.next=24,this.editor.blocks.insert(this.defaultBlock,{});case 24:this.setCaretIndex(n,a),t.next=38;break;case 27:if(!this.blockWasDropped(r,s)){t.next=33;break}return t.next=30,this.blocks.render({blocks:r});case 30:this.caret.setToBlock(n,"end"),t.next=38;break;case 33:if(!this.contentChangedInNoFocusBlock(n,i)){t.next=38;break}return d=this.blocks.getBlockByIndex(i),h=d.id,t.next=37,this.blocks.update(h,r[i].data);case 37:this.setCaretIndex(n,a);case 38:if(!(u=this.blocks.getBlockByIndex(n))){t.next=43;break}return t.next=42,this.blocks.update(u.id,r[n].data);case 42:this.setCaretIndex(n,a);case 43:case"end":return t.stop()}}),t,this)}))),function(){return n.apply(this,arguments)})},{key:"setCaretIndex",value:function(t,e){if(e&&-1!==e){var i=this.holder.getElementsByClassName("ce-block__content"),s=new(h())(i[t].firstChild);setTimeout((function(){return s.setPos(e)}),50)}else this.caret.setToBlock(t,"end")}},{key:"insertBlock",value:(s=e(c().mark((function t(e,i){return c().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,this.blocks.insert(e[i].type,e[i].data,{},i,!0);case 2:case"end":return t.stop()}}),t,this)}))),function(t,e){return s.apply(this,arguments)})},{key:"insertSkippedBlocks",value:function(t,e){for(var i=t;i<e.length;i+=1)this.insertBlock(e,i)}},{key:"redo",value:(i=e(c().mark((function t(){var e,i,s,n,o,r,a,l;return c().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(!this.canRedo()){t.next=26;break}if(this.position+=1,this.shouldSaveHistory=!1,e=this.stack[this.position],i=e.index,s=e.state,n=e.caretIndex,o=this.stack[this.position-1],r=o.index,a=o.state,!this.blockWasDeleted(a,s)){t.next=11;break}return t.next=8,this.blocks.delete();case 8:this.caret.setToBlock(i,"end"),t.next=20;break;case 11:if(!this.blockWasSkipped(r,i,s,a)){t.next=16;break}this.insertSkippedBlocks(a.length,s),this.caret.setToBlock(i,"end"),t.next=20;break;case 16:if(!this.blockWasDropped(s,a)||1===this.position){t.next=20;break}return t.next=19,this.blocks.render({blocks:s});case 19:this.caret.setToBlock(i,"end");case 20:if(this.onUpdate(),!(l=this.blocks.getBlockByIndex(i))){t.next=26;break}return t.next=25,this.blocks.update(l.id,s[i].data);case 25:this.setCaretIndex(i,n);case 26:case"end":return t.stop()}}),t,this)}))),function(){return i.apply(this,arguments)})},{key:"canUndo",value:function(){return!this.readOnly&&this.position>0}},{key:"canRedo",value:function(){return!this.readOnly&&this.position<this.count()}},{key:"count",value:function(){return this.stack.length-1}},{key:"parseKeys",value:function(t){var e={CMD:/(Mac)/i.test(navigator.platform)?"metaKey":"ctrlKey",ALT:"altKey",SHIFT:"shiftKey"},i=t.slice(0,-1).map((function(t){return e[t]})),s=i.includes("shiftKey")&&2===t.length?t[t.length-1].toUpperCase():t[t.length-1].toLowerCase();return i.push(s),i}},{key:"setEventListeners",value:function(){var t=this,e=this.holder,i=this.config.shortcuts,s=i.undo,n=i.redo,o=s.map((function(t){return t.replace(/ /g,"").split("+")})),r=n.map((function(t){return t.replace(/ /g,"").split("+")})),a=o.map((function(e){return t.parseKeys(e)})),l=r.map((function(e){return t.parseKeys(e)})),c=function(t,e){return e.reduce((function(e,i){return e||function(t,e){return 3===e.length&&t[e[0]]&&t[e[1]]&&t.key.toLowerCase()===e[2]}(t,i)}),!1)},d=function(t,e,i){return!(!function(t,e){return e.reduce((function(e,i){return e||function(t,e){return 2===e.length&&t[e[0]]&&t.key.toLowerCase()===e[1]}(t,i)}),!1)}(t,e)||c(t,i))||!!c(t,e)},h=function(e){d(e,a,l)&&(e.preventDefault(),t.undo())},u=function(e){d(e,l,a)&&(e.preventDefault(),t.redo())};e.addEventListener("keydown",h),e.addEventListener("keydown",u),e.addEventListener("destroy",(function(){e.removeEventListener("keydown",h),e.removeEventListener("keydown",u)}))}}],[{key:"isReadOnlySupported",get:function(){return!0}}]),t}()})(),s.default})(),t.exports=e()},552:(t,e,i)=>{"use strict";i.d(e,{G:()=>s});var s=function(){function t(t){var e=t.api;this.button=null,this.state=!1,this.api=e}return Object.defineProperty(t,"isInline",{get:function(){return!0},enumerable:!1,configurable:!0}),t.prototype.render=function(){return this.button=document.createElement("button"),this.button.type="button",this.button.textContent="CSS",this.button.classList.add("ce-inline-tool"),this.button},t.prototype.show_create_dialog=function(t){var e=this;if(!(document.getElementsByClassName("custom-style-tool-settings").length>0)){var i=document.getElementsByClassName("ce-inline-toolbar")[0];i.insertAdjacentHTML("afterend","<div class='custom-style-tool-settings'><label>Classes:</label><input class='cdx-input' id='custom-style-tool-settings-classes' type='text' placeholder='example-class1 my-class2'><label>Inline Style (CSS):</label><textarea class='cdx-input' id='custom-style-tool-settings-inline-style' placeholder='background-color: gray;'></textarea><div style='display: flex; justify-content: space-between'><button id='custom-style-abort' class='btn btn-sm btn-secondary mt-1'>Cancel</button><button id='custom-style-save' class='btn btn-sm btn-primary mt-1'>Save</button></div></div>");var s=i.parentElement.querySelector(".custom-style-tool-settings");s.style.left=i.style.left;var n=parseInt(i.style.top,10);s.style.top=n+40+"px",document.getElementById("custom-style-abort").addEventListener("click",(function(){s.remove()})),document.getElementById("custom-style-save").addEventListener("click",(function(){var i=document.getElementById("custom-style-tool-settings-classes").value,n=document.getElementById("custom-style-tool-settings-inline-style").value,o=document.createElement("customstyle");o.setAttribute("inline-style",n),o.setAttribute("classes",i);var r=t.extractContents();o.appendChild(r),t.insertNode(o),s.remove(),e.api.selection.expandToTag(o)}))}},t.prototype.show_change_dialog=function(t){if(!(document.getElementsByClassName("custom-style-tool-settings").length>0)){var e=this.api.selection.findParentTag("CUSTOMSTYLE"),i=document.getElementsByClassName("ce-inline-toolbar")[0],s="<div class='custom-style-tool-settings'><label>Classes:</label><input class='cdx-input' id='custom-style-tool-settings-classes' type='text' placeholder='example-class1 my-class2' value="+e.getAttribute("classes")+"><label>Inline Style (CSS):</label><textarea class='cdx-input' id='custom-style-tool-settings-inline-style' placeholder='background-color: gray;'>"+e.getAttribute("inline-style")+"</textarea><div style='display: flex; justify-content: space-between'><button id='custom-style-abort' class='btn btn-sm btn-secondary mt-1'>Cancel</button><button id='custom-style-delete' class='btn btn-sm btn-danger'>Delete</button><button id='custom-style-save' class='btn btn-sm btn-primary mt-1'>Save</button></div></div>";i.insertAdjacentHTML("afterend",s);var n=i.parentElement.querySelector(".custom-style-tool-settings");n.style.left=i.style.left;var o=parseInt(i.style.top,10);n.style.top=o+40+"px",document.getElementById("custom-style-abort").addEventListener("click",(function(){n.remove()})),document.getElementById("custom-style-save").addEventListener("click",(function(){e.setAttribute("classes",document.getElementById("custom-style-tool-settings-classes").value),e.setAttribute("inline-style",document.getElementById("custom-style-tool-settings-inline-style").value),n.remove()})),document.getElementById("custom-style-delete").addEventListener("click",(function(){var i=t.extractContents();e.remove(),t.insertNode(i),n.remove()}))}},t.prototype.surround=function(t){this.state?this.show_change_dialog(t):this.show_create_dialog(t)},t.prototype.checkState=function(t){var e=t.anchorNode;if(e){var i=e instanceof Element?e:e.parentElement;this.state=!!i.closest("customstyle")}},Object.defineProperty(t,"sanitize",{get:function(){return{customstyle:function(t){return t.getAttribute("inline-style").trim().length>0||t.getAttribute("classes").trim().length>0}}},enumerable:!1,configurable:!0}),t}()},320:(t,e,i)=>{"use strict";i.d(e,{W:()=>s});var s=function(){function t(e){e.data;var i=e.api;this.button=null,this.state=!1,this.api=i,t.add_all_show_note_settings_listeners()}return Object.defineProperty(t,"isInline",{get:function(){return!0},enumerable:!1,configurable:!0}),t.add_all_show_note_settings_listeners=function(){for(var t=document.getElementsByClassName("note"),e=0;e<t.length;e++)t[e].addEventListener("click",this.show_note_settings_editor)},t.show_note_settings_editor=function(t){for(var e=this,i=0,s=document.getElementsByClassName("note-settings");i<s.length;i++)s[i].remove();var n=t.target;console.log("Got clicked by:"),console.log(n);var o=n.getAttribute("note-type"),r=n.getAttribute("note-content"),a=document.getElementsByClassName("ce-inline-toolbar")[0],l="<div class='note-settings'><label>Modify Note:</label><select id='note-type' class='form-select form-select-sm'>";l+="footnote"===o?"<option value='footnote' selected>Footnote</option><option value='endnote'>Endnote</option>":"<option value='footnote'>Footnote</option><option value='endnote' selected>Endnote</option>",l+="</select><textarea id='note-content' class='form-control form-control-sm mt-1'>"+r+"</textarea><div style='display: flex; justify-content: space-between'><button id='note-delete' class='btn btn-sm btn-danger mt-1'>Delete Note</button><button id='note-abort' class='btn btn-sm btn-secondary mt-1'>Cancel</button><button id='note-save' class='btn btn-sm btn-primary mt-1'>Save</button></div></div>",a.insertAdjacentHTML("afterend",l);var c=a.parentElement.querySelector(".note-settings");c.style.left=a.style.left;var d=parseInt(a.style.top,10);c.style.top=d+40+"px",document.getElementById("note-save").addEventListener("click",(function(){var t=document.getElementById("note-type").value,e=document.getElementById("note-content").value;n.setAttribute("note-type",t),n.setAttribute("note-content",e),n.innerHTML="footnote"===t?"F":"E",c.remove()})),document.getElementById("note-abort").addEventListener("click",(function(){c.remove()})),document.getElementById("note-delete").addEventListener("click",(function(){return t=e,i=void 0,o=function(){return function(t,e){var i,s,n,o,r={label:0,sent:function(){if(1&n[0])throw n[1];return n[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(a){return function(l){return function(a){if(i)throw new TypeError("Generator is already executing.");for(;o&&(o=0,a[0]&&(r=0)),r;)try{if(i=1,s&&(n=2&a[0]?s.return:a[0]?s.throw||((n=s.return)&&n.call(s),0):s.next)&&!(n=n.call(s,a[1])).done)return n;switch(s=0,n&&(a=[2&a[0],n.value]),a[0]){case 0:case 1:n=a;break;case 4:return r.label++,{value:a[1],done:!1};case 5:r.label++,s=a[1],a=[0];continue;case 7:a=r.ops.pop(),r.trys.pop();continue;default:if(!((n=(n=r.trys).length>0&&n[n.length-1])||6!==a[0]&&2!==a[0])){r=0;continue}if(3===a[0]&&(!n||a[1]>n[0]&&a[1]<n[3])){r.label=a[1];break}if(6===a[0]&&r.label<n[1]){r.label=n[1],n=a;break}if(n&&r.label<n[2]){r.label=n[2],r.ops.push(a);break}n[2]&&r.ops.pop(),r.trys.pop();continue}a=e.call(t,r)}catch(t){a=[6,t],s=0}finally{i=n=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,l])}}}(this,(function(t){return n.remove(),c.remove(),[2]}))},new((s=void 0)||(s=Promise))((function(e,n){function r(t){try{l(o.next(t))}catch(t){n(t)}}function a(t){try{l(o.throw(t))}catch(t){n(t)}}function l(t){var i;t.done?e(t.value):(i=t.value,i instanceof s?i:new s((function(t){t(i)}))).then(r,a)}l((o=o.apply(t,i||[])).next())}));var t,i,s,o}))},t.prototype.render=function(){return this.button=document.createElement("button"),this.button.type="button",this.button.textContent="Note",this.button.classList.add("ce-inline-tool"),this.button},t.prototype.show_note_settings=function(e){if(!(document.getElementsByClassName("note-settings").length>0)){var i=document.getElementsByClassName("ce-inline-toolbar")[0];i.insertAdjacentHTML("afterend","<div class='note-settings'><label>Add new Note:</label><select id='note-type' class='form-select form-select-sm'><option value='footnote'>Footnote</option><option value='endnote'>Endnote</option></select><textarea id='note-content' class='form-control form-control-sm mt-1'></textarea><div style='display: flex; justify-content: space-between'><button id='note-abort' class='btn btn-sm btn-secondary mt-1'>Cancel</button><button id='note-save' class='btn btn-sm btn-primary mt-1'>Save</button></div></div>");var s=i.parentElement.querySelector(".note-settings");s.style.left=i.style.left;var n=parseInt(i.style.top,10);s.style.top=n+40+"px",document.getElementById("note-save").addEventListener("click",(function(){var i=document.getElementById("note-type").value,n=document.getElementById("note-content").value,o=document.createElement("span");o.setAttribute("note-type",i),o.setAttribute("note-content",n),o.innerHTML="footnote"===i?"F":"E",o.classList.add("note"),o.addEventListener("click",t.show_note_settings_editor),e.collapse(!1),e.insertNode(o),s.remove()})),document.getElementById("note-abort").addEventListener("click",(function(){s.remove()}))}},t.prototype.surround=function(t){this.state||this.show_note_settings(t)},t.prototype.checkState=function(t){var e=t.anchorNode;if(e){var i=e instanceof Element?e:e.parentElement;this.state=!!i.closest(".note")}},Object.defineProperty(t,"sanitize",{get:function(){return{span:function(t){return!!t.classList.contains("note")&&!(!t.getAttribute("note-type")||!t.getAttribute("note-content"))&&{"note-type":t.getAttribute("note-type"),"note-content":t.getAttribute("note-content"),class:"note"}}}},enumerable:!1,configurable:!0}),t}()},428:(t,e,i)=>{"use strict";i.a(t,(async(t,s)=>{try{i.d(e,{M:()=>d});var n=i(624),o=i(600),r=t([n]);n=(r.then?(await r)():r)[0];var a=function(t,e,i,s){return new(i||(i=Promise))((function(n,o){function r(t){try{l(s.next(t))}catch(t){o(t)}}function a(t){try{l(s.throw(t))}catch(t){o(t)}}function l(t){var e;t.done?n(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(r,a)}l((s=s.apply(t,e||[])).next())}))},l=function(t,e){var i,s,n,o,r={label:0,sent:function(){if(1&n[0])throw n[1];return n[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(a){return function(l){return function(a){if(i)throw new TypeError("Generator is already executing.");for(;o&&(o=0,a[0]&&(r=0)),r;)try{if(i=1,s&&(n=2&a[0]?s.return:a[0]?s.throw||((n=s.return)&&n.call(s),0):s.next)&&!(n=n.call(s,a[1])).done)return n;switch(s=0,n&&(a=[2&a[0],n.value]),a[0]){case 0:case 1:n=a;break;case 4:return r.label++,{value:a[1],done:!1};case 5:r.label++,s=a[1],a=[0];continue;case 7:a=r.ops.pop(),r.trys.pop();continue;default:if(!((n=(n=r.trys).length>0&&n[n.length-1])||6!==a[0]&&2!==a[0])){r=0;continue}if(3===a[0]&&(!n||a[1]>n[0]&&a[1]<n[3])){r.label=a[1];break}if(6===a[0]&&r.label<n[1]){r.label=n[1],n=a;break}if(n&&r.label<n[2]){r.label=n[2],r.ops.push(a);break}n[2]&&r.ops.pop(),r.trys.pop();continue}a=e.call(t,r)}catch(t){a=[6,t],s=0}finally{i=n=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,l])}}},c=null;function d(){return a(this,void 0,void 0,(function(){var t,e;return l(this,(function(i){switch(i.label){case 0:return null!==c?[2]:(t=globalThis.project_id,document.getElementById("editor-render-preview").classList.remove("hide"),[4,(0,o.iM)(t)]);case 1:return e=i.sent().data,console.log("Rendering id is: ",e),c=setTimeout(h,250,e),[2]}}))}))}function h(t){return a(this,void 0,void 0,(function(){var e;return l(this,(function(i){switch(i.label){case 0:return[4,(0,o.Og)(t)];case 1:return e=i.sent(),console.log(e),"Queued"===e.data?console.log("Rendering is still queued"):"Preparing"===e.data?console.log("Rendering is being prepared"):"Running"===e.data?console.log("Rendering is running"):"Finished"===e.data?console.log("Rendering finished"):e.data.hasOwnProperty("Failed")&&(console.log("Rendering failed"),console.log(e.data)),"Finished"===e.data||e.data.hasOwnProperty("Failed")?[3,2]:(c=setTimeout(h,200,t),[3,4]);case 2:return c=null,[4,u(t)];case 3:i.sent(),i.label=4;case 4:return[2]}}))}))}function u(t){return a(this,void 0,void 0,(function(){function e(t,e){return a(this,void 0,void 0,(function(){var i,s;return l(this,(function(n){switch(n.label){case 0:return[4,c.getPage(t)];case 1:return i=n.sent(),s=i.getViewport({scale:o}),e.height=s.height,e.width=s.width,i.render({canvasContext:e.getContext("2d"),viewport:s}),[2]}}))}))}var i,s,o,r,c,d,h;return l(this,(function(a){switch(a.label){case 0:return i="/download/renderings/"+t,(s=document.getElementById("editor_download_pdf_btn")).classList.remove("hide"),s.href=i,o=1,(r=document.getElementById("test")).innerHTML="",[4,n.gb(i).promise];case 1:c=a.sent(),d=1,a.label=2;case 2:return d<=c.numPages?((h=document.createElement("canvas")).classList.add("pdf-page"),r.appendChild(h),[4,e(d,h)]):[3,5];case 3:a.sent(),a.label=4;case 4:return d++,[3,2];case 5:return[2]}}))}))}n.eE.workerSrc="/js/pdf.worker.mjs",s()}catch(p){s(p)}}))},600:(t,e,i)=>{"use strict";i.d(e,{Iz:()=>r,Og:()=>l,SQ:()=>o,iM:()=>a});var s=function(t,e,i,s){return new(i||(i=Promise))((function(n,o){function r(t){try{l(s.next(t))}catch(t){o(t)}}function a(t){try{l(s.throw(t))}catch(t){o(t)}}function l(t){var e;t.done?n(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(r,a)}l((s=s.apply(t,e||[])).next())}))},n=function(t,e){var i,s,n,o,r={label:0,sent:function(){if(1&n[0])throw n[1];return n[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(a){return function(l){return function(a){if(i)throw new TypeError("Generator is already executing.");for(;o&&(o=0,a[0]&&(r=0)),r;)try{if(i=1,s&&(n=2&a[0]?s.return:a[0]?s.throw||((n=s.return)&&n.call(s),0):s.next)&&!(n=n.call(s,a[1])).done)return n;switch(s=0,n&&(a=[2&a[0],n.value]),a[0]){case 0:case 1:n=a;break;case 4:return r.label++,{value:a[1],done:!1};case 5:r.label++,s=a[1],a=[0];continue;case 7:a=r.ops.pop(),r.trys.pop();continue;default:if(!((n=(n=r.trys).length>0&&n[n.length-1])||6!==a[0]&&2!==a[0])){r=0;continue}if(3===a[0]&&(!n||a[1]>n[0]&&a[1]<n[3])){r.label=a[1];break}if(6===a[0]&&r.label<n[1]){r.label=n[1],n=a;break}if(n&&r.label<n[2]){r.label=n[2],r.ops.push(a);break}n[2]&&r.ops.pop(),r.trys.pop();continue}a=e.call(t,r)}catch(t){a=[6,t],s=0}finally{i=n=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,l])}}};function o(t,e,i){return s(this,void 0,void 0,(function(){var s,o;return n(this,(function(n){switch(n.label){case 0:return[4,fetch("/api/projects/"+t+"/sections/"+e+"/content_blocks/",{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(i)})];case 1:if((s=n.sent()).ok)return[3,2];throw new Error("Failed to update content block: ".concat(s.status));case 2:return[4,s.json()];case 3:if((o=n.sent()).hasOwnProperty("error"))throw console.error(o.error),new Error("Failed to save content blocks: ".concat(o.error));return[2,o];case 4:return[2]}}))}))}function r(t,e){return s(this,void 0,void 0,(function(){var i,s;return n(this,(function(n){switch(n.label){case 0:return[4,fetch("/api/projects/"+t+"/sections/"+e+"/content_blocks/",{method:"GET",headers:{"Content-Type":"application/json"}})];case 1:if((i=n.sent()).ok)return[3,2];throw new Error("Failed to get content blocks: ".concat(i.status));case 2:return[4,i.json()];case 3:if((s=n.sent()).hasOwnProperty("error"))throw new Error("Failed to get content blocks: ".concat(s.error));return[2,s];case 4:return[2]}}))}))}function a(t){return s(this,void 0,void 0,(function(){var e,i;return n(this,(function(s){switch(s.label){case 0:return[4,fetch("/api/projects/"+t+"/render",{method:"POST",headers:{"Content-Type":"application/json"}})];case 1:if((e=s.sent()).ok)return[3,2];throw new Error("Failed to render project: ".concat(e.status));case 2:return[4,e.json()];case 3:if((i=s.sent()).hasOwnProperty("error"))throw new Error("Failed to render project: ".concat(i.error));return[2,i];case 4:return[2]}}))}))}function l(t){return s(this,void 0,void 0,(function(){var e,i;return n(this,(function(s){switch(s.label){case 0:return[4,fetch("/api/renderings/"+t+"/status",{method:"GET",headers:{"Content-Type":"application/json"}})];case 1:if((e=s.sent()).ok)return[3,2];throw new Error("Failed to render project: ".concat(e.status));case 2:return[4,e.json()];case 3:if((i=s.sent()).hasOwnProperty("error"))throw new Error("Failed to render project: ".concat(i.error));return[2,i];case 4:return[2]}}))}))}},316:(t,e,i)=>{"use strict";i.a(t,(async(t,e)=>{try{var s=i(756),n=i(776),o=i(676),r=i(320),a=i(744),l=i(600),c=i(812),d=i(428),h=i(552),u=t([d]);d=(u.then?(await u)():u)[0];var p=function(t,e,i,s){return new(i||(i=Promise))((function(n,o){function r(t){try{l(s.next(t))}catch(t){o(t)}}function a(t){try{l(s.throw(t))}catch(t){o(t)}}function l(t){var e;t.done?n(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(r,a)}l((s=s.apply(t,e||[])).next())}))},g=function(t,e){var i,s,n,o,r={label:0,sent:function(){if(1&n[0])throw n[1];return n[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(a){return function(l){return function(a){if(i)throw new TypeError("Generator is already executing.");for(;o&&(o=0,a[0]&&(r=0)),r;)try{if(i=1,s&&(n=2&a[0]?s.return:a[0]?s.throw||((n=s.return)&&n.call(s),0):s.next)&&!(n=n.call(s,a[1])).done)return n;switch(s=0,n&&(a=[2&a[0],n.value]),a[0]){case 0:case 1:n=a;break;case 4:return r.label++,{value:a[1],done:!1};case 5:r.label++,s=a[1],a=[0];continue;case 7:a=r.ops.pop(),r.trys.pop();continue;default:if(!((n=(n=r.trys).length>0&&n[n.length-1])||6!==a[0]&&2!==a[0])){r=0;continue}if(3===a[0]&&(!n||a[1]>n[0]&&a[1]<n[3])){r.label=a[1];break}if(6===a[0]&&r.label<n[1]){r.label=n[1],n=a;break}if(n&&r.label<n[2]){r.label=n[2],r.ops.push(a);break}n[2]&&r.ops.pop(),r.trys.pop();continue}a=e.call(t,r)}catch(t){a=[6,t],s=0}finally{i=n=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,l])}}},m=i(371),f=i(176),b=null,v=null;function y(){return p(this,void 0,void 0,(function(){var t,e,i;return g(this,(function(u){switch(u.label){case 0:t=!0,document.getElementById("editor_render_project_btn").addEventListener("click",d.M),u.label=1;case 1:return u.trys.push([1,4,,5]),[4,l.Iz(globalThis.project_id,globalThis.section_path)];case 2:return e=u.sent().data,console.log(e),[4,(v=new s.c({holder:"section_content_blocks_inner",tools:{header:n.c,raw:o.c,list:{class:a.c,inlineToolbar:!0,config:{defaultStyle:"unordered"}},note:r.W,quote:m,custom_style_tool:h.G},data:{blocks:e},onChange:function(e,i){t?t=!1:w()},onReady:function(){new f({editor:v}).initialize({blocks:e})}})).isReady];case 3:return u.sent(),document.getElementById("section_content_blocks_inner").addEventListener("input",k),r.W.add_all_show_note_settings_listeners(),[3,5];case 4:return i=u.sent(),console.error(i),c.Y_("Couldn't load content.","danger"),[3,5];case 5:return[2]}}))}))}function w(){return p(this,void 0,void 0,(function(){var t,e;return g(this,(function(i){switch(i.label){case 0:return[4,v.save()];case 1:t=i.sent(),console.log(t),i.label=2;case 2:return i.trys.push([2,4,,5]),[4,l.SQ(globalThis.project_id,globalThis.section_path,t.blocks)];case 3:return i.sent(),c.Y_("Saved Changes.","success"),[3,5];case 4:return e=i.sent(),console.error(e),c.Y_("Couldn't save content.","danger"),[3,5];case 5:return[2]}}))}))}function k(){b&&clearTimeout(b),b=setTimeout((function(){return p(this,void 0,void 0,(function(){return g(this,(function(t){switch(t.label){case 0:return[4,w()];case 1:return t.sent(),[2]}}))}))}),500)}window.addEventListener("load",(function(){return p(this,void 0,void 0,(function(){return g(this,(function(t){return window.show_new_editor=function(){y()},[2]}))}))})),e()}catch(x){e(x)}}))},812:(t,e,i)=>{"use strict";function s(t,e){void 0===e&&(e="danger|warning|success|info|primary|secondary|light|dark");var i=Math.floor(1e8*Math.random()),s=Handlebars.templates.alert_tmpl({message:t,type:e,id:i});document.body.insertAdjacentHTML("afterbegin",s);var n=document.getElementById("alert_"+i);n.getElementsByClassName("alert-close")[0].addEventListener("click",(function(){n.remove()})),setTimeout((function(){null!==n&&n.remove()}),5e3)}i.d(e,{Y_:()=>s})},756:(t,e,i)=>{"use strict";function s(t){return t&&t.__esModule&&Object.prototype.hasOwnProperty.call(t,"default")?t.default:t}function n(){}i.d(e,{c:()=>Ce}),typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"&&self,Object.assign(n,{default:n,register:n,revert:function(){},__esModule:!0}),Element.prototype.matches||(Element.prototype.matches=Element.prototype.matchesSelector||Element.prototype.mozMatchesSelector||Element.prototype.msMatchesSelector||Element.prototype.oMatchesSelector||Element.prototype.webkitMatchesSelector||function(t){const e=(this.document||this.ownerDocument).querySelectorAll(t);let i=e.length;for(;--i>=0&&e.item(i)!==this;);return i>-1}),Element.prototype.closest||(Element.prototype.closest=function(t){let e=this;if(!document.documentElement.contains(e))return null;do{if(e.matches(t))return e;e=e.parentElement||e.parentNode}while(null!==e);return null}),Element.prototype.prepend||(Element.prototype.prepend=function(t){const e=document.createDocumentFragment();Array.isArray(t)||(t=[t]),t.forEach((t=>{const i=t instanceof Node;e.appendChild(i?t:document.createTextNode(t))})),this.insertBefore(e,this.firstChild)}),Element.prototype.scrollIntoViewIfNeeded||(Element.prototype.scrollIntoViewIfNeeded=function(t){t=0===arguments.length||!!t;const e=this.parentNode,i=window.getComputedStyle(e,null),s=parseInt(i.getPropertyValue("border-top-width")),n=parseInt(i.getPropertyValue("border-left-width")),o=this.offsetTop-e.offsetTop<e.scrollTop,r=this.offsetTop-e.offsetTop+this.clientHeight-s>e.scrollTop+e.clientHeight,a=this.offsetLeft-e.offsetLeft<e.scrollLeft,l=this.offsetLeft-e.offsetLeft+this.clientWidth-n>e.scrollLeft+e.clientWidth,c=o&&!r;(o||r)&&t&&(e.scrollTop=this.offsetTop-e.offsetTop-e.clientHeight/2-s+this.clientHeight/2),(a||l)&&t&&(e.scrollLeft=this.offsetLeft-e.offsetLeft-e.clientWidth/2-n+this.clientWidth/2),(o||r||a||l)&&!t&&this.scrollIntoView(c)}),window.requestIdleCallback=window.requestIdleCallback||function(t){const e=Date.now();return setTimeout((function(){t({didTimeout:!1,timeRemaining:function(){return Math.max(0,50-(Date.now()-e))}})}),1)},window.cancelIdleCallback=window.cancelIdleCallback||function(t){clearTimeout(t)};var o=(t=>(t.VERBOSE="VERBOSE",t.INFO="INFO",t.WARN="WARN",t.ERROR="ERROR",t))(o||{});const r=13,a=38,l=40;function c(t,e,i="log",s,n="color: inherit"){if(!("console"in window)||!window.console[i])return;const o=["info","log","warn","error"].includes(i),r=[];switch(c.logLevel){case"ERROR":if("error"!==i)return;break;case"WARN":if(!["error","warn"].includes(i))return;break;case"INFO":if(!o||t)return}s&&r.push(s);const a="Editor.js 2.29.0";t&&(o?(r.unshift("line-height: 1em;\n            color: #006FEA;\n            display: inline-block;\n            font-size: 11px;\n            line-height: 1em;\n            background-color: #fff;\n            padding: 4px 9px;\n            border-radius: 30px;\n            border: 1px solid rgba(56, 138, 229, 0.16);\n            margin: 4px 5px 4px 0;",n),e=`%c${a}%c ${e}`):e=`( ${a} )${e}`);try{o?s?console[i](`${e} %o`,...r):console[i](e,...r):console[i](e)}catch{}}c.logLevel="VERBOSE";const d=c.bind(window,!1),h=c.bind(window,!0);function u(t){return Object.prototype.toString.call(t).match(/\s([a-zA-Z]+)/)[1].toLowerCase()}function p(t){return"function"===u(t)||"asyncfunction"===u(t)}function g(t){return"object"===u(t)}function m(t){return"string"===u(t)}function f(t){return"number"===u(t)}function b(t){return"undefined"===u(t)}function v(t){return!t||0===Object.keys(t).length&&t.constructor===Object}function y(t){return t>47&&t<58||32===t||13===t||229===t||t>64&&t<91||t>95&&t<112||t>185&&t<193||t>218&&t<223}function w(t){return Array.prototype.slice.call(t)}function k(t,e){return function(){const i=this,s=arguments;window.setTimeout((()=>t.apply(i,s)),e)}}function x(t,e,i){let s;return(...n)=>{const o=this,r=i&&!s;window.clearTimeout(s),s=window.setTimeout((()=>{s=null,i||t.apply(o,n)}),e),r&&t.apply(o,n)}}function E(t,e,i=void 0){let s,n,o,r=null,a=0;i||(i={});const l=function(){a=!1===i.leading?0:Date.now(),r=null,o=t.apply(s,n),r||(s=n=null)};return function(){const c=Date.now();!a&&!1===i.leading&&(a=c);const d=e-(c-a);return s=this,n=arguments,d<=0||d>e?(r&&(clearTimeout(r),r=null),a=c,o=t.apply(s,n),r||(s=n=null)):!r&&!1!==i.trailing&&(r=setTimeout(l,d)),o}}function C(t){return t[0].toUpperCase()+t.slice(1)}function A(t,...e){if(!e.length)return t;const i=e.shift();if(g(t)&&g(i))for(const e in i)g(i[e])?(t[e]||Object.assign(t,{[e]:{}}),A(t[e],i[e])):Object.assign(t,{[e]:i[e]});return A(t,...e)}function S(t){const e=function(){const t={win:!1,mac:!1,x11:!1,linux:!1},e=Object.keys(t).find((t=>-1!==window.navigator.appVersion.toLowerCase().indexOf(t)));return e&&(t[e]=!0),t}();return t=t.replace(/shift/gi,"⇧").replace(/backspace/gi,"⌫").replace(/enter/gi,"⏎").replace(/up/gi,"↑").replace(/left/gi,"→").replace(/down/gi,"↓").replace(/right/gi,"←").replace(/escape/gi,"⎋").replace(/insert/gi,"Ins").replace(/delete/gi,"␡").replace(/\+/gi," + "),e.mac?t.replace(/ctrl|cmd/gi,"⌘").replace(/alt/gi,"⌥"):t.replace(/cmd/gi,"Ctrl").replace(/windows/gi,"WIN")}function T(){return((t=21)=>crypto.getRandomValues(new Uint8Array(t)).reduce(((t,e)=>t+((e&=63)<36?e.toString(36):e<62?(e-26).toString(36).toUpperCase():e>62?"-":"_")),""))(10)}function _(t,e,i){t&&h(`«${e}» is deprecated and will be removed in the next major release. Please use the «${i}» instead.`,"warn")}function M(t,e,i){const s=i.value?"value":"get",n=i[s],o=`#${e}Cache`;if(i[s]=function(...t){return void 0===this[o]&&(this[o]=n.apply(this,...t)),this[o]},"get"===s&&i.set){const e=i.set;i.set=function(i){delete t[o],e.apply(this,i)}}return i}function I(){return window.matchMedia("(max-width: 650px)").matches}const B=typeof window<"u"&&window.navigator&&window.navigator.platform&&(/iP(ad|hone|od)/.test(window.navigator.platform)||"MacIntel"===window.navigator.platform&&window.navigator.maxTouchPoints>1);class L{static isSingleTag(t){return t.tagName&&["AREA","BASE","BR","COL","COMMAND","EMBED","HR","IMG","INPUT","KEYGEN","LINK","META","PARAM","SOURCE","TRACK","WBR"].includes(t.tagName)}static isLineBreakTag(t){return t&&t.tagName&&["BR","WBR"].includes(t.tagName)}static make(t,e=null,i={}){const s=document.createElement(t);Array.isArray(e)?s.classList.add(...e):e&&s.classList.add(e);for(const t in i)Object.prototype.hasOwnProperty.call(i,t)&&(s[t]=i[t]);return s}static text(t){return document.createTextNode(t)}static append(t,e){Array.isArray(e)?e.forEach((e=>t.appendChild(e))):t.appendChild(e)}static prepend(t,e){Array.isArray(e)?(e=e.reverse()).forEach((e=>t.prepend(e))):t.prepend(e)}static swap(t,e){const i=document.createElement("div"),s=t.parentNode;s.insertBefore(i,t),s.insertBefore(t,e),s.insertBefore(e,i),s.removeChild(i)}static find(t=document,e){return t.querySelector(e)}static get(t){return document.getElementById(t)}static findAll(t=document,e){return t.querySelectorAll(e)}static get allInputsSelector(){return"[contenteditable=true], textarea, input:not([type]), "+["text","password","email","number","search","tel","url"].map((t=>`input[type="${t}"]`)).join(", ")}static findAllInputs(t){return w(t.querySelectorAll(L.allInputsSelector)).reduce(((t,e)=>L.isNativeInput(e)||L.containsOnlyInlineElements(e)?[...t,e]:[...t,...L.getDeepestBlockElements(e)]),[])}static getDeepestNode(t,e=!1){const i=e?"lastChild":"firstChild",s=e?"previousSibling":"nextSibling";if(t&&t.nodeType===Node.ELEMENT_NODE&&t[i]){let n=t[i];if(L.isSingleTag(n)&&!L.isNativeInput(n)&&!L.isLineBreakTag(n))if(n[s])n=n[s];else{if(!n.parentNode[s])return n.parentNode;n=n.parentNode[s]}return this.getDeepestNode(n,e)}return t}static isElement(t){return!f(t)&&t&&t.nodeType&&t.nodeType===Node.ELEMENT_NODE}static isFragment(t){return!f(t)&&t&&t.nodeType&&t.nodeType===Node.DOCUMENT_FRAGMENT_NODE}static isContentEditable(t){return"true"===t.contentEditable}static isNativeInput(t){return!(!t||!t.tagName)&&["INPUT","TEXTAREA"].includes(t.tagName)}static canSetCaret(t){let e=!0;if(L.isNativeInput(t))switch(t.type){case"file":case"checkbox":case"radio":case"hidden":case"submit":case"button":case"image":case"reset":e=!1}else e=L.isContentEditable(t);return e}static isNodeEmpty(t,e){let i;return!(this.isSingleTag(t)&&!this.isLineBreakTag(t))&&(i=this.isElement(t)&&this.isNativeInput(t)?t.value:t.textContent.replace("​",""),e&&(i=i.replace(new RegExp(e,"g"),"")),0===i.trim().length)}static isLeaf(t){return!!t&&0===t.childNodes.length}static isEmpty(t,e){t.normalize();const i=[t];for(;i.length>0;)if(t=i.shift()){if(this.isLeaf(t)&&!this.isNodeEmpty(t,e))return!1;t.childNodes&&i.push(...Array.from(t.childNodes))}return!0}static isHTMLString(t){const e=L.make("div");return e.innerHTML=t,e.childElementCount>0}static getContentLength(t){return L.isNativeInput(t)?t.value.length:t.nodeType===Node.TEXT_NODE?t.length:t.textContent.length}static get blockElements(){return["address","article","aside","blockquote","canvas","div","dl","dt","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","header","hgroup","hr","li","main","nav","noscript","ol","output","p","pre","ruby","section","table","tbody","thead","tr","tfoot","ul","video"]}static containsOnlyInlineElements(t){let e;m(t)?(e=document.createElement("div"),e.innerHTML=t):e=t;const i=t=>!L.blockElements.includes(t.tagName.toLowerCase())&&Array.from(t.children).every(i);return Array.from(e.children).every(i)}static getDeepestBlockElements(t){return L.containsOnlyInlineElements(t)?[t]:Array.from(t.children).reduce(((t,e)=>[...t,...L.getDeepestBlockElements(e)]),[])}static getHolder(t){return m(t)?document.getElementById(t):t}static isAnchor(t){return"a"===t.tagName.toLowerCase()}static offset(t){const e=t.getBoundingClientRect(),i=window.pageXOffset||document.documentElement.scrollLeft,s=window.pageYOffset||document.documentElement.scrollTop,n=e.top+s,o=e.left+i;return{top:n,left:o,bottom:n+e.height,right:o+e.width}}}const P={ui:{blockTunes:{toggler:{"Click to tune":"","or drag to move":""}},inlineToolbar:{converter:{"Convert to":""}},toolbar:{toolbox:{Add:""}},popover:{Filter:"","Nothing found":""}},toolNames:{Text:"",Link:"",Bold:"",Italic:""},tools:{link:{"Add a link":""},stub:{"The block can not be displayed correctly.":""}},blockTunes:{delete:{Delete:"","Click to delete":""},moveUp:{"Move up":""},moveDown:{"Move down":""}}},R=class{static ui(t,e){return R._t(t,e)}static t(t,e){return R._t(t,e)}static setDictionary(t){R.currentDictionary=t}static _t(t,e){const i=R.getNamespace(t);return i&&i[e]?i[e]:e}static getNamespace(t){return t.split(".").reduce(((t,e)=>t&&Object.keys(t).length?t[e]:{}),R.currentDictionary)}};let D=R;D.currentDictionary=P;class O extends Error{}class F{constructor(){this.subscribers={}}on(t,e){t in this.subscribers||(this.subscribers[t]=[]),this.subscribers[t].push(e)}once(t,e){t in this.subscribers||(this.subscribers[t]=[]);const i=s=>{const n=e(s),o=this.subscribers[t].indexOf(i);return-1!==o&&this.subscribers[t].splice(o,1),n};this.subscribers[t].push(i)}emit(t,e){v(this.subscribers)||!this.subscribers[t]||this.subscribers[t].reduce(((t,e)=>{const i=e(t);return void 0!==i?i:t}),e)}off(t,e){if(void 0!==this.subscribers[t]){for(let i=0;i<this.subscribers[t].length;i++)if(this.subscribers[t][i]===e){delete this.subscribers[t][i];break}}else console.warn(`EventDispatcher .off(): there is no subscribers for event "${t.toString()}". Probably, .off() called before .on()`)}destroy(){this.subscribers={}}}function N(t){Object.setPrototypeOf(this,{get id(){return t.id},get name(){return t.name},get config(){return t.config},get holder(){return t.holder},get isEmpty(){return t.isEmpty},get selected(){return t.selected},set stretched(e){t.stretched=e},get stretched(){return t.stretched},get focusable(){return t.focusable},call:(e,i)=>t.call(e,i),save:()=>t.save(),validate:e=>t.validate(e),dispatchChange(){t.dispatchChange()}})}class H{constructor(){this.allListeners=[]}on(t,e,i,s=!1){const n=function(t=""){return`${t}${Math.floor(1e8*Math.random()).toString(16)}`}("l"),o={id:n,element:t,eventType:e,handler:i,options:s};if(!this.findOne(t,e,i))return this.allListeners.push(o),t.addEventListener(e,i,s),n}off(t,e,i,s){const n=this.findAll(t,e,i);n.forEach(((t,e)=>{const i=this.allListeners.indexOf(n[e]);i>-1&&(this.allListeners.splice(i,1),t.element.removeEventListener(t.eventType,t.handler,t.options))}))}offById(t){const e=this.findById(t);e&&e.element.removeEventListener(e.eventType,e.handler,e.options)}findOne(t,e,i){const s=this.findAll(t,e,i);return s.length>0?s[0]:null}findAll(t,e,i){let s;const n=t?this.findByEventTarget(t):[];return s=t&&e&&i?n.filter((t=>t.eventType===e&&t.handler===i)):t&&e?n.filter((t=>t.eventType===e)):n,s}removeAll(){this.allListeners.map((t=>{t.element.removeEventListener(t.eventType,t.handler,t.options)})),this.allListeners=[]}destroy(){this.removeAll()}findByEventTarget(t){return this.allListeners.filter((e=>{if(e.element===t)return e}))}findByType(t){return this.allListeners.filter((e=>{if(e.eventType===t)return e}))}findByHandler(t){return this.allListeners.filter((e=>{if(e.handler===t)return e}))}findById(t){return this.allListeners.find((e=>e.id===t))}}class z{constructor({config:t,eventsDispatcher:e}){if(this.nodes={},this.listeners=new H,this.readOnlyMutableListeners={on:(t,e,i,s=!1)=>{this.mutableListenerIds.push(this.listeners.on(t,e,i,s))},clearAll:()=>{for(const t of this.mutableListenerIds)this.listeners.offById(t);this.mutableListenerIds=[]}},this.mutableListenerIds=[],new.target===z)throw new TypeError("Constructors for abstract class Module are not allowed.");this.config=t,this.eventsDispatcher=e}set state(t){this.Editor=t}removeAllNodes(){for(const t in this.nodes){const e=this.nodes[t];e instanceof HTMLElement&&e.remove()}}get isRtl(){return"rtl"===this.config.i18n.direction}}class U{constructor(){this.instance=null,this.selection=null,this.savedSelectionRange=null,this.isFakeBackgroundEnabled=!1,this.commandBackground="backColor",this.commandRemoveFormat="removeFormat"}static get CSS(){return{editorWrapper:"codex-editor",editorZone:"codex-editor__redactor"}}static get anchorNode(){const t=window.getSelection();return t?t.anchorNode:null}static get anchorElement(){const t=window.getSelection();if(!t)return null;const e=t.anchorNode;return e?L.isElement(e)?e:e.parentElement:null}static get anchorOffset(){const t=window.getSelection();return t?t.anchorOffset:null}static get isCollapsed(){const t=window.getSelection();return t?t.isCollapsed:null}static get isAtEditor(){return this.isSelectionAtEditor(U.get())}static isSelectionAtEditor(t){if(!t)return!1;let e=t.anchorNode||t.focusNode;e&&e.nodeType===Node.TEXT_NODE&&(e=e.parentNode);let i=null;return e&&e instanceof Element&&(i=e.closest(`.${U.CSS.editorZone}`)),!!i&&i.nodeType===Node.ELEMENT_NODE}static isRangeAtEditor(t){if(!t)return;let e=t.startContainer;e&&e.nodeType===Node.TEXT_NODE&&(e=e.parentNode);let i=null;return e&&e instanceof Element&&(i=e.closest(`.${U.CSS.editorZone}`)),!!i&&i.nodeType===Node.ELEMENT_NODE}static get isSelectionExists(){return!!U.get().anchorNode}static get range(){return this.getRangeFromSelection(this.get())}static getRangeFromSelection(t){return t&&t.rangeCount?t.getRangeAt(0):null}static get rect(){let t,e=document.selection,i={x:0,y:0,width:0,height:0};if(e&&"Control"!==e.type)return t=e.createRange(),i.x=t.boundingLeft,i.y=t.boundingTop,i.width=t.boundingWidth,i.height=t.boundingHeight,i;if(!window.getSelection)return d("Method window.getSelection is not supported","warn"),i;if(e=window.getSelection(),null===e.rangeCount||isNaN(e.rangeCount))return d("Method SelectionUtils.rangeCount is not supported","warn"),i;if(0===e.rangeCount)return i;if(t=e.getRangeAt(0).cloneRange(),t.getBoundingClientRect&&(i=t.getBoundingClientRect()),0===i.x&&0===i.y){const e=document.createElement("span");if(e.getBoundingClientRect){e.appendChild(document.createTextNode("​")),t.insertNode(e),i=e.getBoundingClientRect();const s=e.parentNode;s.removeChild(e),s.normalize()}}return i}static get text(){return window.getSelection?window.getSelection().toString():""}static get(){return window.getSelection()}static setCursor(t,e=0){const i=document.createRange(),s=window.getSelection();return L.isNativeInput(t)?L.canSetCaret(t)?(t.focus(),t.selectionStart=t.selectionEnd=e,t.getBoundingClientRect()):void 0:(i.setStart(t,e),i.setEnd(t,e),s.removeAllRanges(),s.addRange(i),i.getBoundingClientRect())}static isRangeInsideContainer(t){const e=U.range;return null!==e&&t.contains(e.startContainer)}static addFakeCursor(){const t=U.range;if(null===t)return;const e=L.make("span","codex-editor__fake-cursor");e.dataset.mutationFree="true",t.collapse(),t.insertNode(e)}static isFakeCursorInsideContainer(t){return null!==L.find(t,".codex-editor__fake-cursor")}static removeFakeCursor(t=document.body){const e=L.find(t,".codex-editor__fake-cursor");e&&e.remove()}removeFakeBackground(){this.isFakeBackgroundEnabled&&(this.isFakeBackgroundEnabled=!1,document.execCommand(this.commandRemoveFormat))}setFakeBackground(){document.execCommand(this.commandBackground,!1,"#a8d6ff"),this.isFakeBackgroundEnabled=!0}save(){this.savedSelectionRange=U.range}restore(){if(!this.savedSelectionRange)return;const t=window.getSelection();t.removeAllRanges(),t.addRange(this.savedSelectionRange)}clearSaved(){this.savedSelectionRange=null}collapseToEnd(){const t=window.getSelection(),e=document.createRange();e.selectNodeContents(t.focusNode),e.collapse(!1),t.removeAllRanges(),t.addRange(e)}findParentTag(t,e,i=10){const s=window.getSelection();let n=null;return s&&s.anchorNode&&s.focusNode?([s.anchorNode,s.focusNode].forEach((s=>{let o=i;for(;o>0&&s.parentNode&&(s.tagName!==t||(n=s,e&&s.classList&&!s.classList.contains(e)&&(n=null),!n));)s=s.parentNode,o--})),n):null}expandToTag(t){const e=window.getSelection();e.removeAllRanges();const i=document.createRange();i.selectNodeContents(t),e.addRange(i)}}const j="redactor dom changed",$="block changed",W="fake cursor is about to be toggled",V="fake cursor have been set";function q(t,e){return t.mergeable&&t.name===e.name}var G=(t=>(t.APPEND_CALLBACK="appendCallback",t.RENDERED="rendered",t.MOVED="moved",t.UPDATED="updated",t.REMOVED="removed",t.ON_PASTE="onPaste",t))(G||{});class K extends F{constructor({id:t=T(),data:e,tool:i,api:s,readOnly:n,tunesData:o},r){super(),this.cachedInputs=[],this.toolRenderedElement=null,this.tunesInstances=new Map,this.defaultTunesInstances=new Map,this.unavailableTunesData={},this.inputIndex=0,this.editorEventBus=null,this.handleFocus=()=>{this.dropInputsCache(),this.updateCurrentInput()},this.didMutated=(t=void 0)=>{const e=void 0===t,i=t instanceof InputEvent;let s;!e&&!i&&this.detectToolRootChange(t),s=!(!e&&!i&&t.length>0&&t.every((t=>{const{addedNodes:e,removedNodes:i,target:s}=t;return[...Array.from(e),...Array.from(i),s].some((t=>(L.isElement(t)||(t=t.parentElement),t&&null!==t.closest('[data-mutation-free="true"]'))))}))),s&&(this.dropInputsCache(),this.updateCurrentInput(),this.call("updated"),this.emit("didMutated",this))},this.name=i.name,this.id=t,this.settings=i.settings,this.config=i.settings.config||{},this.api=s,this.editorEventBus=r||null,this.blockAPI=new N(this),this.tool=i,this.toolInstance=i.create(e,this.blockAPI,n),this.tunes=i.tunes,this.composeTunes(o),this.holder=this.compose(),window.requestIdleCallback((()=>{this.watchBlockMutations(),this.addInputEvents()}))}static get CSS(){return{wrapper:"ce-block",wrapperStretched:"ce-block--stretched",content:"ce-block__content",selected:"ce-block--selected",dropTarget:"ce-block--drop-target"}}get inputs(){if(0!==this.cachedInputs.length)return this.cachedInputs;const t=L.findAllInputs(this.holder);return this.inputIndex>t.length-1&&(this.inputIndex=t.length-1),this.cachedInputs=t,t}get currentInput(){return this.inputs[this.inputIndex]}set currentInput(t){const e=this.inputs.findIndex((e=>e===t||e.contains(t)));-1!==e&&(this.inputIndex=e)}get firstInput(){return this.inputs[0]}get lastInput(){const t=this.inputs;return t[t.length-1]}get nextInput(){return this.inputs[this.inputIndex+1]}get previousInput(){return this.inputs[this.inputIndex-1]}get data(){return this.save().then((t=>t&&!v(t.data)?t.data:{}))}get sanitize(){return this.tool.sanitizeConfig}get mergeable(){return p(this.toolInstance.merge)}get focusable(){return 0!==this.inputs.length}get isEmpty(){const t=L.isEmpty(this.pluginsContent,"/"),e=!this.hasMedia;return t&&e}get hasMedia(){return!!this.holder.querySelector(["img","iframe","video","audio","source","input","textarea","twitterwidget"].join(","))}set selected(t){var e,i;this.holder.classList.toggle(K.CSS.selected,t);const s=!0===t&&U.isRangeInsideContainer(this.holder),n=!1===t&&U.isFakeCursorInsideContainer(this.holder);(s||n)&&(null==(e=this.editorEventBus)||e.emit(W,{state:t}),s?U.addFakeCursor():U.removeFakeCursor(this.holder),null==(i=this.editorEventBus)||i.emit(V,{state:t}))}get selected(){return this.holder.classList.contains(K.CSS.selected)}set stretched(t){this.holder.classList.toggle(K.CSS.wrapperStretched,t)}get stretched(){return this.holder.classList.contains(K.CSS.wrapperStretched)}set dropTarget(t){this.holder.classList.toggle(K.CSS.dropTarget,t)}get pluginsContent(){return this.toolRenderedElement}call(t,e){if(p(this.toolInstance[t])){"appendCallback"===t&&d("`appendCallback` hook is deprecated and will be removed in the next major release. Use `rendered` hook instead","warn");try{this.toolInstance[t].call(this.toolInstance,e)}catch(e){d(`Error during '${t}' call: ${e.message}`,"error")}}}async mergeWith(t){await this.toolInstance.merge(t)}async save(){const t=await this.toolInstance.save(this.pluginsContent),e=this.unavailableTunesData;[...this.tunesInstances.entries(),...this.defaultTunesInstances.entries()].forEach((([t,i])=>{if(p(i.save))try{e[t]=i.save()}catch(t){d(`Tune ${i.constructor.name} save method throws an Error %o`,"warn",t)}}));const i=window.performance.now();let s;return Promise.resolve(t).then((t=>(s=window.performance.now(),{id:this.id,tool:this.name,data:t,tunes:e,time:s-i}))).catch((t=>{d(`Saving process for ${this.name} tool failed due to the ${t}`,"log","red")}))}async validate(t){let e=!0;return this.toolInstance.validate instanceof Function&&(e=await this.toolInstance.validate(t)),e}getTunes(){const t=document.createElement("div"),e=[];return["function"==typeof this.toolInstance.renderSettings?this.toolInstance.renderSettings():[],[...this.tunesInstances.values(),...this.defaultTunesInstances.values()].map((t=>t.render()))].flat().forEach((i=>{L.isElement(i)?t.appendChild(i):Array.isArray(i)?e.push(...i):e.push(i)})),[e,t]}updateCurrentInput(){this.currentInput=L.isNativeInput(document.activeElement)||!U.anchorNode?document.activeElement:U.anchorNode}dispatchChange(){this.didMutated()}destroy(){this.unwatchBlockMutations(),this.removeInputEvents(),super.destroy(),p(this.toolInstance.destroy)&&this.toolInstance.destroy()}async getActiveToolboxEntry(){const t=this.tool.toolbox;if(1===t.length)return Promise.resolve(this.tool.toolbox[0]);const e=await this.data;return t.find((t=>Object.entries(t.data).some((([t,i])=>e[t]&&function(t,e){const i=Array.isArray(t)||g(t),s=Array.isArray(e)||g(e);return i||s?JSON.stringify(t)===JSON.stringify(e):t===e}(e[t],i)))))}async exportDataAsString(){return function(t,e){const i=null==e?void 0:e.export;return p(i)?i(t):m(i)?t[i]:(void 0!==i&&d("Conversion «export» property must be a string or function. String means key of saved data object to export. Function should export processed string to export."),"")}(await this.data,this.tool.conversionConfig)}compose(){const t=L.make("div",K.CSS.wrapper),e=L.make("div",K.CSS.content),i=this.toolInstance.render();t.dataset.id=this.id,this.toolRenderedElement=i,e.appendChild(this.toolRenderedElement);let s=e;return[...this.tunesInstances.values(),...this.defaultTunesInstances.values()].forEach((t=>{if(p(t.wrap))try{s=t.wrap(s)}catch(e){d(`Tune ${t.constructor.name} wrap method throws an Error %o`,"warn",e)}})),t.appendChild(s),t}composeTunes(t){Array.from(this.tunes.values()).forEach((e=>{(e.isInternal?this.defaultTunesInstances:this.tunesInstances).set(e.name,e.create(t[e.name],this.blockAPI))})),Object.entries(t).forEach((([t,e])=>{this.tunesInstances.has(t)||(this.unavailableTunesData[t]=e)}))}addInputEvents(){this.inputs.forEach((t=>{t.addEventListener("focus",this.handleFocus),L.isNativeInput(t)&&t.addEventListener("input",this.didMutated)}))}removeInputEvents(){this.inputs.forEach((t=>{t.removeEventListener("focus",this.handleFocus),L.isNativeInput(t)&&t.removeEventListener("input",this.didMutated)}))}watchBlockMutations(){var t;this.redactorDomChangedCallback=t=>{const{mutations:e}=t;e.some((t=>function(t,e){const{type:i,target:s,addedNodes:n,removedNodes:o}=t;if(s===e)return!0;if(["characterData","attributes"].includes(i)){const t=s.nodeType===Node.TEXT_NODE?s.parentNode:s;return e.contains(t)}const r=Array.from(n).some((t=>e.contains(t))),a=Array.from(o).some((t=>e.contains(t)));return r||a}(t,this.toolRenderedElement)))&&this.didMutated(e)},null==(t=this.editorEventBus)||t.on(j,this.redactorDomChangedCallback)}unwatchBlockMutations(){var t;null==(t=this.editorEventBus)||t.off(j,this.redactorDomChangedCallback)}detectToolRootChange(t){t.forEach((t=>{if(Array.from(t.removedNodes).includes(this.toolRenderedElement)){const e=t.addedNodes[t.addedNodes.length-1];this.toolRenderedElement=e}}))}dropInputsCache(){this.cachedInputs=[]}}class X extends z{static getNamespace(t){return t.isTune()?`blockTunes.${t.name}`:`tools.${t.name}`}get methods(){return{t:()=>{h("I18n.t() method can be accessed only from Tools","warn")}}}getMethodsForTool(t){return Object.assign(this.methods,{t:e=>D.t(X.getNamespace(t),e)})}}var Y={},J={get exports(){return Y},set exports(t){Y=t}};window,J.exports=function(t){var e={};function i(s){if(e[s])return e[s].exports;var n=e[s]={i:s,l:!1,exports:{}};return t[s].call(n.exports,n,n.exports,i),n.l=!0,n.exports}return i.m=t,i.c=e,i.d=function(t,e,s){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:s})},i.r=function(t){typeof Symbol<"u"&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e||4&e&&"object"==typeof t&&t&&t.__esModule)return t;var s=Object.create(null);if(i.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var n in t)i.d(s,n,function(e){return t[e]}.bind(null,n));return s},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="/",i(i.s=0)}([function(t,e,i){var s,n;i(1),t.exports=(s=i(6),"cdx-notify--bounce-in",n=null,{show:function(t){if(t.message){!function(){if(n)return!0;n=s.getWrapper(),document.body.appendChild(n)}();var e=null,i=t.time||8e3;switch(t.type){case"confirm":e=s.confirm(t);break;case"prompt":e=s.prompt(t);break;default:e=s.alert(t),window.setTimeout((function(){e.remove()}),i)}n.appendChild(e),e.classList.add("cdx-notify--bounce-in")}}})},function(t,e,i){var s=i(2);"string"==typeof s&&(s=[[t.i,s,""]]);i(4)(s,{hmr:!0,transform:void 0,insertInto:void 0}),s.locals&&(t.exports=s.locals)},function(t,e,i){(t.exports=i(3)(!1)).push([t.i,'.cdx-notify--error{background:#fffbfb!important}.cdx-notify--error::before{background:#fb5d5d!important}.cdx-notify__input{max-width:130px;padding:5px 10px;background:#f7f7f7;border:0;border-radius:3px;font-size:13px;color:#656b7c;outline:0}.cdx-notify__input:-ms-input-placeholder{color:#656b7c}.cdx-notify__input::placeholder{color:#656b7c}.cdx-notify__input:focus:-ms-input-placeholder{color:rgba(101,107,124,.3)}.cdx-notify__input:focus::placeholder{color:rgba(101,107,124,.3)}.cdx-notify__button{border:none;border-radius:3px;font-size:13px;padding:5px 10px;cursor:pointer}.cdx-notify__button:last-child{margin-left:10px}.cdx-notify__button--cancel{background:#f2f5f7;box-shadow:0 2px 1px 0 rgba(16,19,29,0);color:#656b7c}.cdx-notify__button--cancel:hover{background:#eee}.cdx-notify__button--confirm{background:#34c992;box-shadow:0 1px 1px 0 rgba(18,49,35,.05);color:#fff}.cdx-notify__button--confirm:hover{background:#33b082}.cdx-notify__btns-wrapper{display:-ms-flexbox;display:flex;-ms-flex-flow:row nowrap;flex-flow:row nowrap;margin-top:5px}.cdx-notify__cross{position:absolute;top:5px;right:5px;width:10px;height:10px;padding:5px;opacity:.54;cursor:pointer}.cdx-notify__cross::after,.cdx-notify__cross::before{content:\'\';position:absolute;left:9px;top:5px;height:12px;width:2px;background:#575d67}.cdx-notify__cross::before{transform:rotate(-45deg)}.cdx-notify__cross::after{transform:rotate(45deg)}.cdx-notify__cross:hover{opacity:1}.cdx-notifies{position:fixed;z-index:2;bottom:20px;left:20px;font-family:-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,Oxygen,Ubuntu,Cantarell,"Fira Sans","Droid Sans","Helvetica Neue",sans-serif}.cdx-notify{position:relative;width:220px;margin-top:15px;padding:13px 16px;background:#fff;box-shadow:0 11px 17px 0 rgba(23,32,61,.13);border-radius:5px;font-size:14px;line-height:1.4em;word-wrap:break-word}.cdx-notify::before{content:\'\';position:absolute;display:block;top:0;left:0;width:3px;height:calc(100% - 6px);margin:3px;border-radius:5px;background:0 0}@keyframes bounceIn{0%{opacity:0;transform:scale(.3)}50%{opacity:1;transform:scale(1.05)}70%{transform:scale(.9)}100%{transform:scale(1)}}.cdx-notify--bounce-in{animation-name:bounceIn;animation-duration:.6s;animation-iteration-count:1}.cdx-notify--success{background:#fafffe!important}.cdx-notify--success::before{background:#41ffb1!important}',""])},function(t,e){t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var i=function(t,e){var i,s=t[1]||"",n=t[3];if(!n)return s;if(e&&"function"==typeof btoa){var o=(i=n,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(i))))+" */"),r=n.sources.map((function(t){return"/*# sourceURL="+n.sourceRoot+t+" */"}));return[s].concat(r).concat([o]).join("\n")}return[s].join("\n")}(e,t);return e[2]?"@media "+e[2]+"{"+i+"}":i})).join("")},e.i=function(t,i){"string"==typeof t&&(t=[[null,t,""]]);for(var s={},n=0;n<this.length;n++){var o=this[n][0];"number"==typeof o&&(s[o]=!0)}for(n=0;n<t.length;n++){var r=t[n];"number"==typeof r[0]&&s[r[0]]||(i&&!r[2]?r[2]=i:i&&(r[2]="("+r[2]+") and ("+i+")"),e.push(r))}},e}},function(t,e,i){var s,n,o,r={},a=(s=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===n&&(n=s.apply(this,arguments)),n}),l=(o={},function(t){if("function"==typeof t)return t();if(void 0===o[t]){var e=function(t){return document.querySelector(t)}.call(this,t);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch{e=null}o[t]=e}return o[t]}),c=null,d=0,h=[],u=i(5);function p(t,e){for(var i=0;i<t.length;i++){var s=t[i],n=r[s.id];if(n){n.refs++;for(var o=0;o<n.parts.length;o++)n.parts[o](s.parts[o]);for(;o<s.parts.length;o++)n.parts.push(y(s.parts[o],e))}else{var a=[];for(o=0;o<s.parts.length;o++)a.push(y(s.parts[o],e));r[s.id]={id:s.id,refs:1,parts:a}}}}function g(t,e){for(var i=[],s={},n=0;n<t.length;n++){var o=t[n],r=e.base?o[0]+e.base:o[0],a={css:o[1],media:o[2],sourceMap:o[3]};s[r]?s[r].parts.push(a):i.push(s[r]={id:r,parts:[a]})}return i}function m(t,e){var i=l(t.insertInto);if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var s=h[h.length-1];if("top"===t.insertAt)s?s.nextSibling?i.insertBefore(e,s.nextSibling):i.appendChild(e):i.insertBefore(e,i.firstChild),h.push(e);else if("bottom"===t.insertAt)i.appendChild(e);else{if("object"!=typeof t.insertAt||!t.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var n=l(t.insertInto+" "+t.insertAt.before);i.insertBefore(e,n)}}function f(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t);var e=h.indexOf(t);e>=0&&h.splice(e,1)}function b(t){var e=document.createElement("style");return void 0===t.attrs.type&&(t.attrs.type="text/css"),v(e,t.attrs),m(t,e),e}function v(t,e){Object.keys(e).forEach((function(i){t.setAttribute(i,e[i])}))}function y(t,e){var i,s,n,o,r,a;if(e.transform&&t.css){if(!(o=e.transform(t.css)))return function(){};t.css=o}if(e.singleton){var l=d++;i=c||(c=b(e)),s=x.bind(null,i,l,!1),n=x.bind(null,i,l,!0)}else t.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(r=e,a=document.createElement("link"),void 0===r.attrs.type&&(r.attrs.type="text/css"),r.attrs.rel="stylesheet",v(a,r.attrs),m(r,a),s=function(t,e,i){var s=i.css,n=i.sourceMap,o=void 0===e.convertToAbsoluteUrls&&n;(e.convertToAbsoluteUrls||o)&&(s=u(s)),n&&(s+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(n))))+" */");var r=new Blob([s],{type:"text/css"}),a=t.href;t.href=URL.createObjectURL(r),a&&URL.revokeObjectURL(a)}.bind(null,i=a,e),n=function(){f(i),i.href&&URL.revokeObjectURL(i.href)}):(i=b(e),s=function(t,e){var i=e.css,s=e.media;if(s&&t.setAttribute("media",s),t.styleSheet)t.styleSheet.cssText=i;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(i))}}.bind(null,i),n=function(){f(i)});return s(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;s(t=e)}else n()}}t.exports=function(t,e){if(typeof DEBUG<"u"&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(e=e||{}).attrs="object"==typeof e.attrs?e.attrs:{},e.singleton||"boolean"==typeof e.singleton||(e.singleton=a()),e.insertInto||(e.insertInto="head"),e.insertAt||(e.insertAt="bottom");var i=g(t,e);return p(i,e),function(t){for(var s=[],n=0;n<i.length;n++){var o=i[n];(a=r[o.id]).refs--,s.push(a)}for(t&&p(g(t,e),e),n=0;n<s.length;n++){var a;if(0===(a=s[n]).refs){for(var l=0;l<a.parts.length;l++)a.parts[l]();delete r[a.id]}}}};var w,k=(w=[],function(t,e){return w[t]=e,w.filter(Boolean).join("\n")});function x(t,e,i,s){var n=i?"":s.css;if(t.styleSheet)t.styleSheet.cssText=k(e,n);else{var o=document.createTextNode(n),r=t.childNodes;r[e]&&t.removeChild(r[e]),r.length?t.insertBefore(o,r[e]):t.appendChild(o)}}},function(t,e){t.exports=function(t){var e=typeof window<"u"&&window.location;if(!e)throw new Error("fixUrls requires window.location");if(!t||"string"!=typeof t)return t;var i=e.protocol+"//"+e.host,s=i+e.pathname.replace(/\/[^\/]*$/,"/");return t.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,(function(t,e){var n,o=e.trim().replace(/^"(.*)"$/,(function(t,e){return e})).replace(/^'(.*)'$/,(function(t,e){return e}));return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(o)?t:(n=0===o.indexOf("//")?o:0===o.indexOf("/")?i+o:s+o.replace(/^\.\//,""),"url("+JSON.stringify(n)+")")}))}},function(t,e,i){var s,n,o,r,a,l;t.exports=("cdx-notifies",s="cdx-notify",n="cdx-notify__cross",o="cdx-notify__button--confirm","cdx-notify__button--cancel","cdx-notify__input",r="cdx-notify__button",a="cdx-notify__btns-wrapper",{alert:l=function(t){var e=document.createElement("DIV"),i=document.createElement("DIV"),o=t.message,r=t.style;return e.classList.add(s),r&&e.classList.add(s+"--"+r),e.innerHTML=o,i.classList.add(n),i.addEventListener("click",e.remove.bind(e)),e.appendChild(i),e},confirm:function(t){var e=l(t),i=document.createElement("div"),s=document.createElement("button"),c=document.createElement("button"),d=e.querySelector("."+n),h=t.cancelHandler,u=t.okHandler;return i.classList.add(a),s.innerHTML=t.okText||"Confirm",c.innerHTML=t.cancelText||"Cancel",s.classList.add(r),c.classList.add(r),s.classList.add(o),c.classList.add("cdx-notify__button--cancel"),h&&"function"==typeof h&&(c.addEventListener("click",h),d.addEventListener("click",h)),u&&"function"==typeof u&&s.addEventListener("click",u),s.addEventListener("click",e.remove.bind(e)),c.addEventListener("click",e.remove.bind(e)),i.appendChild(s),i.appendChild(c),e.appendChild(i),e},prompt:function(t){var e=l(t),i=document.createElement("div"),s=document.createElement("button"),c=document.createElement("input"),d=e.querySelector("."+n),h=t.cancelHandler,u=t.okHandler;return i.classList.add(a),s.innerHTML=t.okText||"Ok",s.classList.add(r),s.classList.add(o),c.classList.add("cdx-notify__input"),t.placeholder&&c.setAttribute("placeholder",t.placeholder),t.default&&(c.value=t.default),t.inputType&&(c.type=t.inputType),h&&"function"==typeof h&&d.addEventListener("click",h),u&&"function"==typeof u&&s.addEventListener("click",(function(){u(c.value)})),s.addEventListener("click",e.remove.bind(e)),i.appendChild(c),i.appendChild(s),e.appendChild(i),e},getWrapper:function(){var t=document.createElement("DIV");return t.classList.add("cdx-notifies"),t}})}]);const Q=s(Y);class Z{show(t){Q.show(t)}}var tt={},et={get exports(){return tt},set exports(t){tt=t}};et.exports=function(){function t(t){var e=t.tags;if(!Object.keys(e).map((function(t){return typeof e[t]})).every((function(t){return"object"===t||"boolean"===t||"function"===t})))throw new Error("The configuration was invalid");this.config=t}var e=["P","LI","TD","TH","DIV","H1","H2","H3","H4","H5","H6","PRE"];function i(t){return-1!==e.indexOf(t.nodeName)}var s=["A","B","STRONG","I","EM","SUB","SUP","U","STRIKE"];function n(t){return-1!==s.indexOf(t.nodeName)}function o(t,e,i){return"function"==typeof t.tags[e]?t.tags[e](i):t.tags[e]}function r(t,e){return typeof e>"u"||"boolean"==typeof e&&!e}function a(t,e,i){var s=t.name.toLowerCase();return!0!==e&&("function"==typeof e[s]?!e[s](t.value,i):typeof e[s]>"u"||!1===e[s]||"string"==typeof e[s]&&e[s]!==t.value)}return t.prototype.clean=function(t){const e=document.implementation.createHTMLDocument(),i=e.createElement("div");return i.innerHTML=t,this._sanitize(e,i),i.innerHTML},t.prototype._sanitize=function(t,e){var s=function(t,e){return t.createTreeWalker(e,NodeFilter.SHOW_TEXT|NodeFilter.SHOW_ELEMENT|NodeFilter.SHOW_COMMENT,null,!1)}(t,e),l=s.firstChild();if(l)do{if(l.nodeType!==Node.TEXT_NODE){if(l.nodeType===Node.COMMENT_NODE){e.removeChild(l),this._sanitize(t,e);break}var c,d=n(l);d&&(c=Array.prototype.some.call(l.childNodes,i));var h=!!e.parentNode,u=i(e)&&i(l)&&h,p=l.nodeName.toLowerCase(),g=o(this.config,p,l);if(d&&c||r(0,g)||!this.config.keepNestedBlockElements&&u){if("SCRIPT"!==l.nodeName&&"STYLE"!==l.nodeName)for(;l.childNodes.length>0;)e.insertBefore(l.childNodes[0],l);e.removeChild(l),this._sanitize(t,e);break}for(var m=0;m<l.attributes.length;m+=1){var f=l.attributes[m];a(f,g,l)&&(l.removeAttribute(f.name),m-=1)}this._sanitize(t,l)}else if(""===l.data.trim()&&(l.previousElementSibling&&i(l.previousElementSibling)||l.nextElementSibling&&i(l.nextElementSibling))){e.removeChild(l),this._sanitize(t,e);break}}while(l=s.nextSibling())},t}();const it=tt;function st(t,e){return t.map((t=>{const i=p(e)?e(t.tool):e;return v(i)||(t.data=ot(t.data,i)),t}))}function nt(t,e={}){return new it({tags:e}).clean(t)}function ot(t,e){return Array.isArray(t)?function(t,e){return t.map((t=>ot(t,e)))}(t,e):g(t)?function(t,e){const i={};for(const s in t){if(!Object.prototype.hasOwnProperty.call(t,s))continue;const n=t[s],o=rt(e[s])?e[s]:e;i[s]=ot(n,o)}return i}(t,e):m(t)?function(t,e){return g(e)?nt(t,e):!1===e?nt(t,{}):t}(t,e):t}function rt(t){return g(t)||function(t){return"boolean"===u(t)}(t)||p(t)}var at={},lt={get exports(){return at},set exports(t){at=t}};!function(t,e){window,t.exports=function(t){var e={};function i(s){if(e[s])return e[s].exports;var n=e[s]={i:s,l:!1,exports:{}};return t[s].call(n.exports,n,n.exports,i),n.l=!0,n.exports}return i.m=t,i.c=e,i.d=function(t,e,s){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:s})},i.r=function(t){typeof Symbol<"u"&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e||4&e&&"object"==typeof t&&t&&t.__esModule)return t;var s=Object.create(null);if(i.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var n in t)i.d(s,n,function(e){return t[e]}.bind(null,n));return s},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=0)}([function(t,e,i){t.exports=i(1)},function(t,e,i){i.r(e),i.d(e,"default",(function(){return s}));class s{constructor(){this.nodes={wrapper:null,content:null},this.showed=!1,this.offsetTop=10,this.offsetLeft=10,this.offsetRight=10,this.hidingDelay=0,this.handleWindowScroll=()=>{this.showed&&this.hide(!0)},this.loadStyles(),this.prepare(),window.addEventListener("scroll",this.handleWindowScroll,{passive:!0})}get CSS(){return{tooltip:"ct",tooltipContent:"ct__content",tooltipShown:"ct--shown",placement:{left:"ct--left",bottom:"ct--bottom",right:"ct--right",top:"ct--top"}}}show(t,e,i){this.nodes.wrapper||this.prepare(),this.hidingTimeout&&clearTimeout(this.hidingTimeout);const s=Object.assign({placement:"bottom",marginTop:0,marginLeft:0,marginRight:0,marginBottom:0,delay:70,hidingDelay:0},i);if(s.hidingDelay&&(this.hidingDelay=s.hidingDelay),this.nodes.content.innerHTML="","string"==typeof e)this.nodes.content.appendChild(document.createTextNode(e));else{if(!(e instanceof Node))throw Error("[CodeX Tooltip] Wrong type of «content» passed. It should be an instance of Node or String. But "+typeof e+" given.");this.nodes.content.appendChild(e)}switch(this.nodes.wrapper.classList.remove(...Object.values(this.CSS.placement)),s.placement){case"top":this.placeTop(t,s);break;case"left":this.placeLeft(t,s);break;case"right":this.placeRight(t,s);break;default:this.placeBottom(t,s)}s&&s.delay?this.showingTimeout=setTimeout((()=>{this.nodes.wrapper.classList.add(this.CSS.tooltipShown),this.showed=!0}),s.delay):(this.nodes.wrapper.classList.add(this.CSS.tooltipShown),this.showed=!0)}hide(t=!1){if(this.hidingDelay&&!t)return this.hidingTimeout&&clearTimeout(this.hidingTimeout),void(this.hidingTimeout=setTimeout((()=>{this.hide(!0)}),this.hidingDelay));this.nodes.wrapper.classList.remove(this.CSS.tooltipShown),this.showed=!1,this.showingTimeout&&clearTimeout(this.showingTimeout)}onHover(t,e,i){t.addEventListener("mouseenter",(()=>{this.show(t,e,i)})),t.addEventListener("mouseleave",(()=>{this.hide()}))}destroy(){this.nodes.wrapper.remove(),window.removeEventListener("scroll",this.handleWindowScroll)}prepare(){this.nodes.wrapper=this.make("div",this.CSS.tooltip),this.nodes.content=this.make("div",this.CSS.tooltipContent),this.append(this.nodes.wrapper,this.nodes.content),this.append(document.body,this.nodes.wrapper)}loadStyles(){const t="codex-tooltips-style";if(document.getElementById(t))return;const e=i(2),s=this.make("style",null,{textContent:e.toString(),id:t});this.prepend(document.head,s)}placeBottom(t,e){const i=t.getBoundingClientRect(),s=i.left+t.clientWidth/2-this.nodes.wrapper.offsetWidth/2,n=i.bottom+window.pageYOffset+this.offsetTop+e.marginTop;this.applyPlacement("bottom",s,n)}placeTop(t,e){const i=t.getBoundingClientRect(),s=i.left+t.clientWidth/2-this.nodes.wrapper.offsetWidth/2,n=i.top+window.pageYOffset-this.nodes.wrapper.clientHeight-this.offsetTop;this.applyPlacement("top",s,n)}placeLeft(t,e){const i=t.getBoundingClientRect(),s=i.left-this.nodes.wrapper.offsetWidth-this.offsetLeft-e.marginLeft,n=i.top+window.pageYOffset+t.clientHeight/2-this.nodes.wrapper.offsetHeight/2;this.applyPlacement("left",s,n)}placeRight(t,e){const i=t.getBoundingClientRect(),s=i.right+this.offsetRight+e.marginRight,n=i.top+window.pageYOffset+t.clientHeight/2-this.nodes.wrapper.offsetHeight/2;this.applyPlacement("right",s,n)}applyPlacement(t,e,i){this.nodes.wrapper.classList.add(this.CSS.placement[t]),this.nodes.wrapper.style.left=e+"px",this.nodes.wrapper.style.top=i+"px"}make(t,e=null,i={}){const s=document.createElement(t);Array.isArray(e)?s.classList.add(...e):e&&s.classList.add(e);for(const t in i)i.hasOwnProperty(t)&&(s[t]=i[t]);return s}append(t,e){Array.isArray(e)?e.forEach((e=>t.appendChild(e))):t.appendChild(e)}prepend(t,e){Array.isArray(e)?(e=e.reverse()).forEach((e=>t.prepend(e))):t.prepend(e)}}},function(t,e){t.exports='.ct{z-index:999;opacity:0;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;pointer-events:none;-webkit-transition:opacity 50ms ease-in,-webkit-transform 70ms cubic-bezier(.215,.61,.355,1);transition:opacity 50ms ease-in,-webkit-transform 70ms cubic-bezier(.215,.61,.355,1);transition:opacity 50ms ease-in,transform 70ms cubic-bezier(.215,.61,.355,1);transition:opacity 50ms ease-in,transform 70ms cubic-bezier(.215,.61,.355,1),-webkit-transform 70ms cubic-bezier(.215,.61,.355,1);will-change:opacity,top,left;-webkit-box-shadow:0 8px 12px 0 rgba(29,32,43,.17),0 4px 5px -3px rgba(5,6,12,.49);box-shadow:0 8px 12px 0 rgba(29,32,43,.17),0 4px 5px -3px rgba(5,6,12,.49);border-radius:9px}.ct,.ct:before{position:absolute;top:0;left:0}.ct:before{content:"";bottom:0;right:0;background-color:#1d202b;z-index:-1;border-radius:4px}@supports(-webkit-mask-box-image:url("")){.ct:before{border-radius:0;-webkit-mask-box-image:url(\'data:image/svg+xml;charset=utf-8,<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24"><path d="M10.71 0h2.58c3.02 0 4.64.42 6.1 1.2a8.18 8.18 0 013.4 3.4C23.6 6.07 24 7.7 24 10.71v2.58c0 3.02-.42 4.64-1.2 6.1a8.18 8.18 0 01-3.4 3.4c-1.47.8-3.1 1.21-6.11 1.21H10.7c-3.02 0-4.64-.42-6.1-1.2a8.18 8.18 0 01-3.4-3.4C.4 17.93 0 16.3 0 13.29V10.7c0-3.02.42-4.64 1.2-6.1a8.18 8.18 0 013.4-3.4C6.07.4 7.7 0 10.71 0z"/></svg>\') 48% 41% 37.9% 53.3%}}@media (--mobile){.ct{display:none}}.ct__content{padding:6px 10px;color:#cdd1e0;font-size:12px;text-align:center;letter-spacing:.02em;line-height:1em}.ct:after{content:"";width:8px;height:8px;position:absolute;background-color:#1d202b;z-index:-1}.ct--bottom{-webkit-transform:translateY(5px);transform:translateY(5px)}.ct--bottom:after{top:-3px;left:50%;-webkit-transform:translateX(-50%) rotate(-45deg);transform:translateX(-50%) rotate(-45deg)}.ct--top{-webkit-transform:translateY(-5px);transform:translateY(-5px)}.ct--top:after{top:auto;bottom:-3px;left:50%;-webkit-transform:translateX(-50%) rotate(-45deg);transform:translateX(-50%) rotate(-45deg)}.ct--left{-webkit-transform:translateX(-5px);transform:translateX(-5px)}.ct--left:after{top:50%;left:auto;right:0;-webkit-transform:translate(41.6%,-50%) rotate(-45deg);transform:translate(41.6%,-50%) rotate(-45deg)}.ct--right{-webkit-transform:translateX(5px);transform:translateX(5px)}.ct--right:after{top:50%;left:0;-webkit-transform:translate(-41.6%,-50%) rotate(-45deg);transform:translate(-41.6%,-50%) rotate(-45deg)}.ct--shown{opacity:1;-webkit-transform:none;transform:none}'}]).default}(lt);const ct=s(at);let dt=null;function ht(){dt||(dt=new ct)}function ut(t=!1){ht(),null==dt||dt.hide(t)}function pt(t,e,i){ht(),null==dt||dt.onHover(t,e,i)}const gt=function t(e,i){const s={};return Object.entries(e).forEach((([e,n])=>{if(g(n)){const o=i?`${i}.${e}`:e;Object.values(n).every((t=>m(t)))?s[e]=o:s[e]=t(n,o)}else s[e]=n})),s}(P),mt='<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M7 10L11.8586 14.8586C11.9367 14.9367 12.0633 14.9367 12.1414 14.8586L17 10"/></svg>',ft='<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M7.69998 12.6L7.67896 12.62C6.53993 13.7048 6.52012 15.5155 7.63516 16.625V16.625C8.72293 17.7073 10.4799 17.7102 11.5712 16.6314L13.0263 15.193C14.0703 14.1609 14.2141 12.525 13.3662 11.3266L13.22 11.12"/><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M16.22 11.12L16.3564 10.9805C17.2895 10.0265 17.3478 8.5207 16.4914 7.49733V7.49733C15.5691 6.39509 13.9269 6.25143 12.8271 7.17675L11.3901 8.38588C10.0935 9.47674 9.95706 11.4241 11.0888 12.6852L11.12 12.72"/></svg>';class bt{constructor(t){this.nodes={root:null,icon:null},this.confirmationState=null,this.removeSpecialFocusBehavior=()=>{this.nodes.root.classList.remove(bt.CSS.noFocus)},this.removeSpecialHoverBehavior=()=>{this.nodes.root.classList.remove(bt.CSS.noHover)},this.onErrorAnimationEnd=()=>{this.nodes.icon.classList.remove(bt.CSS.wobbleAnimation),this.nodes.icon.removeEventListener("animationend",this.onErrorAnimationEnd)},this.params=t,this.nodes.root=this.make(t)}get isDisabled(){return this.params.isDisabled}get toggle(){return this.params.toggle}get title(){return this.params.title}get closeOnActivate(){return this.params.closeOnActivate}get isConfirmationStateEnabled(){return null!==this.confirmationState}get isFocused(){return this.nodes.root.classList.contains(bt.CSS.focused)}static get CSS(){return{container:"ce-popover-item",title:"ce-popover-item__title",secondaryTitle:"ce-popover-item__secondary-title",icon:"ce-popover-item__icon",active:"ce-popover-item--active",disabled:"ce-popover-item--disabled",focused:"ce-popover-item--focused",hidden:"ce-popover-item--hidden",confirmationState:"ce-popover-item--confirmation",noHover:"ce-popover-item--no-hover",noFocus:"ce-popover-item--no-focus",wobbleAnimation:"wobble"}}getElement(){return this.nodes.root}handleClick(){this.isConfirmationStateEnabled?this.activateOrEnableConfirmationMode(this.confirmationState):this.activateOrEnableConfirmationMode(this.params)}toggleActive(t){this.nodes.root.classList.toggle(bt.CSS.active,t)}toggleHidden(t){this.nodes.root.classList.toggle(bt.CSS.hidden,t)}reset(){this.isConfirmationStateEnabled&&this.disableConfirmationMode()}onFocus(){this.disableSpecialHoverAndFocusBehavior()}make(t){const e=L.make("div",bt.CSS.container);return t.name&&(e.dataset.itemName=t.name),this.nodes.icon=L.make("div",bt.CSS.icon,{innerHTML:t.icon||'<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><circle cx="12" cy="12" r="4" stroke="currentColor" stroke-width="2"/></svg>'}),e.appendChild(this.nodes.icon),e.appendChild(L.make("div",bt.CSS.title,{innerHTML:t.title||""})),t.secondaryLabel&&e.appendChild(L.make("div",bt.CSS.secondaryTitle,{textContent:t.secondaryLabel})),t.isActive&&e.classList.add(bt.CSS.active),t.isDisabled&&e.classList.add(bt.CSS.disabled),e}enableConfirmationMode(t){const e={...this.params,...t,confirmation:t.confirmation},i=this.make(e);this.nodes.root.innerHTML=i.innerHTML,this.nodes.root.classList.add(bt.CSS.confirmationState),this.confirmationState=t,this.enableSpecialHoverAndFocusBehavior()}disableConfirmationMode(){const t=this.make(this.params);this.nodes.root.innerHTML=t.innerHTML,this.nodes.root.classList.remove(bt.CSS.confirmationState),this.confirmationState=null,this.disableSpecialHoverAndFocusBehavior()}enableSpecialHoverAndFocusBehavior(){this.nodes.root.classList.add(bt.CSS.noHover),this.nodes.root.classList.add(bt.CSS.noFocus),this.nodes.root.addEventListener("mouseleave",this.removeSpecialHoverBehavior,{once:!0})}disableSpecialHoverAndFocusBehavior(){this.removeSpecialFocusBehavior(),this.removeSpecialHoverBehavior(),this.nodes.root.removeEventListener("mouseleave",this.removeSpecialHoverBehavior)}activateOrEnableConfirmationMode(t){if(void 0===t.confirmation)try{t.onActivate(t),this.disableConfirmationMode()}catch{this.animateError()}else this.enableConfirmationMode(t.confirmation)}animateError(){this.nodes.icon.classList.contains(bt.CSS.wobbleAnimation)||(this.nodes.icon.classList.add(bt.CSS.wobbleAnimation),this.nodes.icon.addEventListener("animationend",this.onErrorAnimationEnd))}}const vt=class{constructor(t,e){this.cursor=-1,this.items=[],this.items=t||[],this.focusedCssClass=e}get currentItem(){return-1===this.cursor?null:this.items[this.cursor]}setCursor(t){t<this.items.length&&t>=-1&&(this.dropCursor(),this.cursor=t,this.items[this.cursor].classList.add(this.focusedCssClass))}setItems(t){this.items=t}next(){this.cursor=this.leafNodesAndReturnIndex(vt.directions.RIGHT)}previous(){this.cursor=this.leafNodesAndReturnIndex(vt.directions.LEFT)}dropCursor(){-1!==this.cursor&&(this.items[this.cursor].classList.remove(this.focusedCssClass),this.cursor=-1)}leafNodesAndReturnIndex(t){if(0===this.items.length)return this.cursor;let e=this.cursor;return-1===e?e=t===vt.directions.RIGHT?-1:0:this.items[e].classList.remove(this.focusedCssClass),e=t===vt.directions.RIGHT?(e+1)%this.items.length:(this.items.length+e-1)%this.items.length,L.canSetCaret(this.items[e])&&k((()=>U.setCursor(this.items[e])),50)(),this.items[e].classList.add(this.focusedCssClass),e}};let yt=vt;yt.directions={RIGHT:"right",LEFT:"left"};class wt{constructor(t){this.iterator=null,this.activated=!1,this.flipCallbacks=[],this.onKeyDown=t=>{if(this.isEventReadyForHandling(t))switch(wt.usedKeys.includes(t.keyCode)&&t.preventDefault(),t.keyCode){case 9:this.handleTabPress(t);break;case 37:case a:this.flipLeft();break;case 39:case l:this.flipRight();break;case r:this.handleEnterPress(t)}},this.iterator=new yt(t.items,t.focusedItemClass),this.activateCallback=t.activateCallback,this.allowedKeys=t.allowedKeys||wt.usedKeys}get isActivated(){return this.activated}static get usedKeys(){return[9,37,39,r,a,l]}activate(t,e){this.activated=!0,t&&this.iterator.setItems(t),void 0!==e&&this.iterator.setCursor(e),document.addEventListener("keydown",this.onKeyDown,!0)}deactivate(){this.activated=!1,this.dropCursor(),document.removeEventListener("keydown",this.onKeyDown)}focusFirst(){this.dropCursor(),this.flipRight()}flipLeft(){this.iterator.previous(),this.flipCallback()}flipRight(){this.iterator.next(),this.flipCallback()}hasFocus(){return!!this.iterator.currentItem}onFlip(t){this.flipCallbacks.push(t)}removeOnFlip(t){this.flipCallbacks=this.flipCallbacks.filter((e=>e!==t))}dropCursor(){this.iterator.dropCursor()}isEventReadyForHandling(t){return this.activated&&this.allowedKeys.includes(t.keyCode)}handleTabPress(t){switch(t.shiftKey?yt.directions.LEFT:yt.directions.RIGHT){case yt.directions.RIGHT:this.flipRight();break;case yt.directions.LEFT:this.flipLeft()}}handleEnterPress(t){this.activated&&(this.iterator.currentItem&&(t.stopPropagation(),t.preventDefault(),this.iterator.currentItem.click()),p(this.activateCallback)&&this.activateCallback(this.iterator.currentItem))}flipCallback(){this.iterator.currentItem&&this.iterator.currentItem.scrollIntoViewIfNeeded(),this.flipCallbacks.forEach((t=>t()))}}class kt{static get CSS(){return{wrapper:"cdx-search-field",icon:"cdx-search-field__icon",input:"cdx-search-field__input"}}constructor({items:t,onSearch:e,placeholder:i}){this.listeners=new H,this.items=t,this.onSearch=e,this.render(i)}getElement(){return this.wrapper}focus(){this.input.focus()}clear(){this.input.value="",this.searchQuery="",this.onSearch("",this.foundItems)}destroy(){this.listeners.removeAll()}render(t){this.wrapper=L.make("div",kt.CSS.wrapper);const e=L.make("div",kt.CSS.icon,{innerHTML:'<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><circle cx="10.5" cy="10.5" r="5.5" stroke="currentColor" stroke-width="2"/><line x1="15.4142" x2="19" y1="15" y2="18.5858" stroke="currentColor" stroke-linecap="round" stroke-width="2"/></svg>'});this.input=L.make("input",kt.CSS.input,{placeholder:t,tabIndex:-1}),this.wrapper.appendChild(e),this.wrapper.appendChild(this.input),this.listeners.on(this.input,"input",(()=>{this.searchQuery=this.input.value,this.onSearch(this.searchQuery,this.foundItems)}))}get foundItems(){return this.items.filter((t=>this.checkItem(t)))}checkItem(t){var e;const i=(null==(e=t.title)?void 0:e.toLowerCase())||"",s=this.searchQuery.toLowerCase();return i.includes(s)}}const xt=class{lock(){B?this.lockHard():document.body.classList.add(xt.CSS.scrollLocked)}unlock(){B?this.unlockHard():document.body.classList.remove(xt.CSS.scrollLocked)}lockHard(){this.scrollPosition=window.pageYOffset,document.documentElement.style.setProperty("--window-scroll-offset",`${this.scrollPosition}px`),document.body.classList.add(xt.CSS.scrollLockedHard)}unlockHard(){document.body.classList.remove(xt.CSS.scrollLockedHard),null!==this.scrollPosition&&window.scrollTo(0,this.scrollPosition),this.scrollPosition=null}};let Et=xt;Et.CSS={scrollLocked:"ce-scroll-locked",scrollLockedHard:"ce-scroll-locked--hard"};var Ct=Object.defineProperty,At=Object.getOwnPropertyDescriptor,St=(t=>(t.Close="close",t))(St||{});const Tt=class extends F{constructor(t){super(),this.scopeElement=document.body,this.listeners=new H,this.scrollLocker=new Et,this.nodes={wrapper:null,popover:null,nothingFoundMessage:null,customContent:null,items:null,overlay:null},this.messages={nothingFound:"Nothing found",search:"Search"},this.onFlip=()=>{this.items.find((t=>t.isFocused)).onFocus()},this.items=t.items.map((t=>new bt(t))),void 0!==t.scopeElement&&(this.scopeElement=t.scopeElement),t.messages&&(this.messages={...this.messages,...t.messages}),t.customContentFlippableItems&&(this.customContentFlippableItems=t.customContentFlippableItems),this.make(),t.customContent&&this.addCustomContent(t.customContent),t.searchable&&this.addSearch(),this.initializeFlipper()}static get CSS(){return{popover:"ce-popover",popoverOpenTop:"ce-popover--open-top",popoverOpened:"ce-popover--opened",search:"ce-popover__search",nothingFoundMessage:"ce-popover__nothing-found-message",nothingFoundMessageDisplayed:"ce-popover__nothing-found-message--displayed",customContent:"ce-popover__custom-content",customContentHidden:"ce-popover__custom-content--hidden",items:"ce-popover__items",overlay:"ce-popover__overlay",overlayHidden:"ce-popover__overlay--hidden"}}getElement(){return this.nodes.wrapper}hasFocus(){return this.flipper.hasFocus()}show(){this.shouldOpenBottom||(this.nodes.popover.style.setProperty("--popover-height",this.height+"px"),this.nodes.popover.classList.add(Tt.CSS.popoverOpenTop)),this.nodes.overlay.classList.remove(Tt.CSS.overlayHidden),this.nodes.popover.classList.add(Tt.CSS.popoverOpened),this.flipper.activate(this.flippableElements),void 0!==this.search&&requestAnimationFrame((()=>{var t;null==(t=this.search)||t.focus()})),I()&&this.scrollLocker.lock()}hide(){this.nodes.popover.classList.remove(Tt.CSS.popoverOpened),this.nodes.popover.classList.remove(Tt.CSS.popoverOpenTop),this.nodes.overlay.classList.add(Tt.CSS.overlayHidden),this.flipper.deactivate(),this.items.forEach((t=>t.reset())),void 0!==this.search&&this.search.clear(),I()&&this.scrollLocker.unlock(),this.emit("close")}destroy(){this.flipper.deactivate(),this.listeners.removeAll(),I()&&this.scrollLocker.unlock()}make(){this.nodes.popover=L.make("div",[Tt.CSS.popover]),this.nodes.nothingFoundMessage=L.make("div",[Tt.CSS.nothingFoundMessage],{textContent:this.messages.nothingFound}),this.nodes.popover.appendChild(this.nodes.nothingFoundMessage),this.nodes.items=L.make("div",[Tt.CSS.items]),this.items.forEach((t=>{this.nodes.items.appendChild(t.getElement())})),this.nodes.popover.appendChild(this.nodes.items),this.listeners.on(this.nodes.popover,"click",(t=>{const e=this.getTargetItem(t);void 0!==e&&this.handleItemClick(e)})),this.nodes.wrapper=L.make("div"),this.nodes.overlay=L.make("div",[Tt.CSS.overlay,Tt.CSS.overlayHidden]),this.listeners.on(this.nodes.overlay,"click",(()=>{this.hide()})),this.nodes.wrapper.appendChild(this.nodes.overlay),this.nodes.wrapper.appendChild(this.nodes.popover)}addSearch(){this.search=new kt({items:this.items,placeholder:this.messages.search,onSearch:(t,e)=>{this.items.forEach((t=>{const i=!e.includes(t);t.toggleHidden(i)})),this.toggleNothingFoundMessage(0===e.length),this.toggleCustomContent(""!==t);const i=""===t?this.flippableElements:e.map((t=>t.getElement()));this.flipper.isActivated&&(this.flipper.deactivate(),this.flipper.activate(i))}});const t=this.search.getElement();t.classList.add(Tt.CSS.search),this.nodes.popover.insertBefore(t,this.nodes.popover.firstChild)}addCustomContent(t){this.nodes.customContent=t,this.nodes.customContent.classList.add(Tt.CSS.customContent),this.nodes.popover.insertBefore(t,this.nodes.popover.firstChild)}getTargetItem(t){return this.items.find((e=>t.composedPath().includes(e.getElement())))}handleItemClick(t){t.isDisabled||(this.items.filter((e=>e!==t)).forEach((t=>t.reset())),t.handleClick(),this.toggleItemActivenessIfNeeded(t),t.closeOnActivate&&this.hide())}initializeFlipper(){this.flipper=new wt({items:this.flippableElements,focusedItemClass:bt.CSS.focused,allowedKeys:[9,a,l,r]}),this.flipper.onFlip(this.onFlip)}get flippableElements(){const t=this.items.map((t=>t.getElement()));return(this.customContentFlippableItems||[]).concat(t)}get height(){let t=0;if(null===this.nodes.popover)return t;const e=this.nodes.popover.cloneNode(!0);return e.style.visibility="hidden",e.style.position="absolute",e.style.top="-1000px",e.classList.add(Tt.CSS.popoverOpened),document.body.appendChild(e),t=e.offsetHeight,e.remove(),t}get shouldOpenBottom(){const t=this.nodes.popover.getBoundingClientRect(),e=this.scopeElement.getBoundingClientRect(),i=this.height,s=t.top+i,n=t.top-i,o=Math.min(window.innerHeight,e.bottom);return n<e.top||s<=o}toggleNothingFoundMessage(t){this.nodes.nothingFoundMessage.classList.toggle(Tt.CSS.nothingFoundMessageDisplayed,t)}toggleCustomContent(t){var e;null==(e=this.nodes.customContent)||e.classList.toggle(Tt.CSS.customContentHidden,t)}toggleItemActivenessIfNeeded(t){if(!0===t.toggle&&t.toggleActive(),"string"==typeof t.toggle){const e=this.items.filter((e=>e.toggle===t.toggle));if(1===e.length)return void t.toggleActive();e.forEach((e=>{e.toggleActive(e===t)}))}}};let _t=Tt;((t,e,i,s)=>{for(var n,o=At(e,i),r=t.length-1;r>=0;r--)(n=t[r])&&(o=n(e,i,o)||o);o&&Ct(e,i,o)})([M],_t.prototype,"height");class Mt extends z{constructor(){super(...arguments),this.opened=!1,this.tools=[],this.flipper=null,this.togglingCallback=null}static get CSS(){return{conversionToolbarWrapper:"ce-conversion-toolbar",conversionToolbarShowed:"ce-conversion-toolbar--showed",conversionToolbarTools:"ce-conversion-toolbar__tools",conversionToolbarLabel:"ce-conversion-toolbar__label",conversionTool:"ce-conversion-tool",conversionToolHidden:"ce-conversion-tool--hidden",conversionToolIcon:"ce-conversion-tool__icon",conversionToolSecondaryLabel:"ce-conversion-tool__secondary-label",conversionToolFocused:"ce-conversion-tool--focused",conversionToolActive:"ce-conversion-tool--active"}}make(){this.nodes.wrapper=L.make("div",[Mt.CSS.conversionToolbarWrapper,...this.isRtl?[this.Editor.UI.CSS.editorRtlFix]:[]]),this.nodes.tools=L.make("div",Mt.CSS.conversionToolbarTools);const t=L.make("div",Mt.CSS.conversionToolbarLabel,{textContent:D.ui(gt.ui.inlineToolbar.converter,"Convert to")});return this.addTools(),this.enableFlipper(),L.append(this.nodes.wrapper,t),L.append(this.nodes.wrapper,this.nodes.tools),this.nodes.wrapper}destroy(){this.flipper&&(this.flipper.deactivate(),this.flipper=null),this.removeAllNodes()}toggle(t){this.opened?this.close():this.open(),p(t)&&(this.togglingCallback=t)}open(){this.filterTools(),this.opened=!0,this.nodes.wrapper.classList.add(Mt.CSS.conversionToolbarShowed),window.requestAnimationFrame((()=>{this.flipper.activate(this.tools.map((t=>t.button)).filter((t=>!t.classList.contains(Mt.CSS.conversionToolHidden)))),this.flipper.focusFirst(),p(this.togglingCallback)&&this.togglingCallback(!0)}))}close(){this.opened=!1,this.flipper.deactivate(),this.nodes.wrapper.classList.remove(Mt.CSS.conversionToolbarShowed),p(this.togglingCallback)&&this.togglingCallback(!1)}hasTools(){return 1!==this.tools.length||this.tools[0].name!==this.config.defaultBlock}async replaceWithBlock(t,e){const{BlockManager:i,BlockSelection:s,InlineToolbar:n,Caret:o}=this.Editor;i.convert(this.Editor.BlockManager.currentBlock,t,e),s.clearSelection(),this.close(),n.close(),window.requestAnimationFrame((()=>{o.setToBlock(this.Editor.BlockManager.currentBlock,o.positions.END)}))}addTools(){const t=this.Editor.Tools.blockTools;Array.from(t.entries()).forEach((([t,e])=>{var i;const s=e.conversionConfig;!s||!s.import||null==(i=e.toolbox)||i.forEach((e=>this.addToolIfValid(t,e)))}))}addToolIfValid(t,e){v(e)||!e.icon||this.addTool(t,e)}addTool(t,e){var i;const s=L.make("div",[Mt.CSS.conversionTool]),n=L.make("div",[Mt.CSS.conversionToolIcon]);s.dataset.tool=t,n.innerHTML=e.icon,L.append(s,n),L.append(s,L.text(D.t(gt.toolNames,e.title||C(t))));const o=null==(i=this.Editor.Tools.blockTools.get(t))?void 0:i.shortcut;if(o){const t=L.make("span",Mt.CSS.conversionToolSecondaryLabel,{innerText:S(o)});L.append(s,t)}L.append(this.nodes.tools,s),this.tools.push({name:t,button:s,toolboxItem:e}),this.listeners.on(s,"click",(async()=>{await this.replaceWithBlock(t,e.data)}))}async filterTools(){const{currentBlock:t}=this.Editor.BlockManager,e=await t.getActiveToolboxEntry();this.tools.forEach((i=>{let s=!1;if(e){const n=function(t,e){return t.icon===e.icon&&t.title===e.title}(e,i.toolboxItem);s=i.button.dataset.tool===t.name&&n}i.button.hidden=s,i.button.classList.toggle(Mt.CSS.conversionToolHidden,s)}))}enableFlipper(){this.flipper=new wt({focusedItemClass:Mt.CSS.conversionToolFocused})}}var It={},Bt={get exports(){return It},set exports(t){It=t}};!function(t,e){window,t.exports=function(t){var e={};function i(s){if(e[s])return e[s].exports;var n=e[s]={i:s,l:!1,exports:{}};return t[s].call(n.exports,n,n.exports,i),n.l=!0,n.exports}return i.m=t,i.c=e,i.d=function(t,e,s){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:s})},i.r=function(t){typeof Symbol<"u"&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e||4&e&&"object"==typeof t&&t&&t.__esModule)return t;var s=Object.create(null);if(i.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var n in t)i.d(s,n,function(e){return t[e]}.bind(null,n));return s},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=0)}([function(t,e,i){function s(t,e){for(var i=0;i<e.length;i++){var s=e[i];s.enumerable=s.enumerable||!1,s.configurable=!0,"value"in s&&(s.writable=!0),Object.defineProperty(t,s.key,s)}}function n(t,e,i){return e&&s(t.prototype,e),i&&s(t,i),t}i.r(e);var o=function(){function t(e){var i=this;(function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")})(this,t),this.commands={},this.keys={},this.name=e.name,this.parseShortcutName(e.name),this.element=e.on,this.callback=e.callback,this.executeShortcut=function(t){i.execute(t)},this.element.addEventListener("keydown",this.executeShortcut,!1)}return n(t,null,[{key:"supportedCommands",get:function(){return{SHIFT:["SHIFT"],CMD:["CMD","CONTROL","COMMAND","WINDOWS","CTRL"],ALT:["ALT","OPTION"]}}},{key:"keyCodes",get:function(){return{0:48,1:49,2:50,3:51,4:52,5:53,6:54,7:55,8:56,9:57,A:65,B:66,C:67,D:68,E:69,F:70,G:71,H:72,I:73,J:74,K:75,L:76,M:77,N:78,O:79,P:80,Q:81,R:82,S:83,T:84,U:85,V:86,W:87,X:88,Y:89,Z:90,BACKSPACE:8,ENTER:13,ESCAPE:27,LEFT:37,UP:38,RIGHT:39,DOWN:40,INSERT:45,DELETE:46,".":190}}}]),n(t,[{key:"parseShortcutName",value:function(e){e=e.split("+");for(var i=0;i<e.length;i++){e[i]=e[i].toUpperCase();var s=!1;for(var n in t.supportedCommands)if(t.supportedCommands[n].includes(e[i])){s=this.commands[n]=!0;break}s||(this.keys[e[i]]=!0)}for(var o in t.supportedCommands)this.commands[o]||(this.commands[o]=!1)}},{key:"execute",value:function(e){var i,s={CMD:e.ctrlKey||e.metaKey,SHIFT:e.shiftKey,ALT:e.altKey},n=!0;for(i in this.commands)this.commands[i]!==s[i]&&(n=!1);var o,r=!0;for(o in this.keys)r=r&&e.keyCode===t.keyCodes[o];n&&r&&this.callback(e)}},{key:"remove",value:function(){this.element.removeEventListener("keydown",this.executeShortcut)}}]),t}();e.default=o}]).default}(Bt);const Lt=s(It),Pt=new class{constructor(){this.registeredShortcuts=new Map}add(t){if(this.findShortcut(t.on,t.name))throw Error(`Shortcut ${t.name} is already registered for ${t.on}. Please remove it before add a new handler.`);const e=new Lt({name:t.name,on:t.on,callback:t.handler}),i=this.registeredShortcuts.get(t.on)||[];this.registeredShortcuts.set(t.on,[...i,e])}remove(t,e){const i=this.findShortcut(t,e);if(!i)return;i.remove();const s=this.registeredShortcuts.get(t);this.registeredShortcuts.set(t,s.filter((t=>t!==i)))}findShortcut(t,e){return(this.registeredShortcuts.get(t)||[]).find((({name:t})=>t===e))}};var Rt=Object.defineProperty,Dt=Object.getOwnPropertyDescriptor,Ot=(t,e,i,s)=>{for(var n,o=s>1?void 0:s?Dt(e,i):e,r=t.length-1;r>=0;r--)(n=t[r])&&(o=(s?n(e,i,o):n(o))||o);return s&&o&&Rt(e,i,o),o},Ft=(t=>(t.Opened="toolbox-opened",t.Closed="toolbox-closed",t.BlockAdded="toolbox-block-added",t))(Ft||{});const Nt=class extends F{constructor({api:t,tools:e,i18nLabels:i}){super(),this.opened=!1,this.nodes={toolbox:null},this.onPopoverClose=()=>{this.opened=!1,this.emit("toolbox-closed")},this.api=t,this.tools=e,this.i18nLabels=i}get isEmpty(){return 0===this.toolsToBeDisplayed.length}static get CSS(){return{toolbox:"ce-toolbox"}}make(){return this.popover=new _t({scopeElement:this.api.ui.nodes.redactor,searchable:!0,messages:{nothingFound:this.i18nLabels.nothingFound,search:this.i18nLabels.filter},items:this.toolboxItemsToBeDisplayed}),this.popover.on(St.Close,this.onPopoverClose),this.enableShortcuts(),this.nodes.toolbox=this.popover.getElement(),this.nodes.toolbox.classList.add(Nt.CSS.toolbox),this.nodes.toolbox}hasFocus(){var t;return null==(t=this.popover)?void 0:t.hasFocus()}destroy(){var t;super.destroy(),this.nodes&&this.nodes.toolbox&&(this.nodes.toolbox.remove(),this.nodes.toolbox=null),this.removeAllShortcuts(),null==(t=this.popover)||t.off(St.Close,this.onPopoverClose)}toolButtonActivated(t,e){this.insertNewBlock(t,e)}open(){var t;this.isEmpty||(null==(t=this.popover)||t.show(),this.opened=!0,this.emit("toolbox-opened"))}close(){var t;null==(t=this.popover)||t.hide(),this.opened=!1,this.emit("toolbox-closed")}toggle(){this.opened?this.close():this.open()}get toolsToBeDisplayed(){const t=[];return this.tools.forEach((e=>{e.toolbox&&t.push(e)})),t}get toolboxItemsToBeDisplayed(){const t=(t,e)=>({icon:t.icon,title:D.t(gt.toolNames,t.title||C(e.name)),name:e.name,onActivate:()=>{this.toolButtonActivated(e.name,t.data)},secondaryLabel:e.shortcut?S(e.shortcut):""});return this.toolsToBeDisplayed.reduce(((e,i)=>(Array.isArray(i.toolbox)?i.toolbox.forEach((s=>{e.push(t(s,i))})):void 0!==i.toolbox&&e.push(t(i.toolbox,i)),e)),[])}enableShortcuts(){this.toolsToBeDisplayed.forEach((t=>{const e=t.shortcut;e&&this.enableShortcutForTool(t.name,e)}))}enableShortcutForTool(t,e){Pt.add({name:e,on:this.api.ui.nodes.redactor,handler:e=>{e.preventDefault();const i=this.api.blocks.getCurrentBlockIndex(),s=this.api.blocks.getBlockByIndex(i);if(s)try{return this.api.blocks.convert(s.id,t),void window.requestAnimationFrame((()=>{this.api.caret.setToBlock(i,"end")}))}catch{}this.insertNewBlock(t)}})}removeAllShortcuts(){this.toolsToBeDisplayed.forEach((t=>{const e=t.shortcut;e&&Pt.remove(this.api.ui.nodes.redactor,e)}))}async insertNewBlock(t,e){const i=this.api.blocks.getCurrentBlockIndex(),s=this.api.blocks.getBlockByIndex(i);if(!s)return;const n=s.isEmpty?i:i+1;let o;if(e){const i=await this.api.blocks.composeBlockData(t);o=Object.assign(i,e)}const r=this.api.blocks.insert(t,o,void 0,n,void 0,s.isEmpty);r.call(G.APPEND_CALLBACK),this.api.caret.setToBlock(n),this.emit("toolbox-block-added",{block:r}),this.api.toolbar.close()}};let Ht=Nt;Ot([M],Ht.prototype,"toolsToBeDisplayed",1),Ot([M],Ht.prototype,"toolboxItemsToBeDisplayed",1);const zt="block hovered";var Ut=(t=>(t[t.Block=0]="Block",t[t.Inline=1]="Inline",t[t.Tune=2]="Tune",t))(Ut||{}),jt=(t=>(t.Shortcut="shortcut",t.Toolbox="toolbox",t.EnabledInlineTools="inlineToolbar",t.EnabledBlockTunes="tunes",t.Config="config",t))(jt||{}),$t=(t=>(t.Shortcut="shortcut",t.SanitizeConfig="sanitize",t))($t||{}),Wt=(t=>(t.IsEnabledLineBreaks="enableLineBreaks",t.Toolbox="toolbox",t.ConversionConfig="conversionConfig",t.IsReadOnlySupported="isReadOnlySupported",t.PasteConfig="pasteConfig",t))(Wt||{}),Vt=(t=>(t.IsInline="isInline",t.Title="title",t))(Vt||{}),qt=(t=>(t.IsTune="isTune",t))(qt||{});class Gt{constructor({name:t,constructable:e,config:i,api:s,isDefault:n,isInternal:o=!1,defaultPlaceholder:r}){this.api=s,this.name=t,this.constructable=e,this.config=i,this.isDefault=n,this.isInternal=o,this.defaultPlaceholder=r}get settings(){const t=this.config.config||{};return this.isDefault&&!("placeholder"in t)&&this.defaultPlaceholder&&(t.placeholder=this.defaultPlaceholder),t}reset(){if(p(this.constructable.reset))return this.constructable.reset()}prepare(){if(p(this.constructable.prepare))return this.constructable.prepare({toolName:this.name,config:this.settings})}get shortcut(){const t=this.constructable.shortcut;return this.config.shortcut||t}get sanitizeConfig(){return this.constructable.sanitize||{}}isInline(){return 1===this.type}isBlock(){return 0===this.type}isTune(){return 2===this.type}}class Kt{constructor(t){this.blocks=[],this.workingArea=t}get length(){return this.blocks.length}get array(){return this.blocks}get nodes(){return w(this.workingArea.children)}static set(t,e,i){return isNaN(Number(e))?(Reflect.set(t,e,i),!0):(t.insert(+e,i),!0)}static get(t,e){return isNaN(Number(e))?Reflect.get(t,e):t.get(+e)}push(t){this.blocks.push(t),this.insertToDOM(t)}swap(t,e){const i=this.blocks[e];L.swap(this.blocks[t].holder,i.holder),this.blocks[e]=this.blocks[t],this.blocks[t]=i}move(t,e){const i=this.blocks.splice(e,1)[0],s=t-1,n=Math.max(0,s),o=this.blocks[n];t>0?this.insertToDOM(i,"afterend",o):this.insertToDOM(i,"beforebegin",o),this.blocks.splice(t,0,i);const r=this.composeBlockEvent("move",{fromIndex:e,toIndex:t});i.call(G.MOVED,r)}insert(t,e,i=!1){if(!this.length)return void this.push(e);t>this.length&&(t=this.length),i&&(this.blocks[t].holder.remove(),this.blocks[t].call(G.REMOVED));const s=i?1:0;if(this.blocks.splice(t,s,e),t>0){const i=this.blocks[t-1];this.insertToDOM(e,"afterend",i)}else{const i=this.blocks[t+1];i?this.insertToDOM(e,"beforebegin",i):this.insertToDOM(e)}}replace(t,e){if(void 0===this.blocks[t])throw Error("Incorrect index");this.blocks[t].holder.replaceWith(e.holder),this.blocks[t]=e}insertMany(t,e){const i=new DocumentFragment;for(const e of t)i.appendChild(e.holder);if(this.length>0){if(e>0){const t=Math.min(e-1,this.length-1);this.blocks[t].holder.after(i)}else 0===e&&this.workingArea.prepend(i);this.blocks.splice(e,0,...t)}else this.blocks.push(...t),this.workingArea.appendChild(i);t.forEach((t=>t.call(G.RENDERED)))}remove(t){isNaN(t)&&(t=this.length-1),this.blocks[t].holder.remove(),this.blocks[t].call(G.REMOVED),this.blocks.splice(t,1)}removeAll(){this.workingArea.innerHTML="",this.blocks.forEach((t=>t.call(G.REMOVED))),this.blocks.length=0}insertAfter(t,e){const i=this.blocks.indexOf(t);this.insert(i+1,e)}get(t){return this.blocks[t]}indexOf(t){return this.blocks.indexOf(t)}insertToDOM(t,e,i){e?i.holder.insertAdjacentElement(e,t.holder):this.workingArea.appendChild(t.holder),t.call(G.RENDERED)}composeBlockEvent(t,e){return new CustomEvent(t,{detail:e})}}const Xt="block-removed",Yt="block-added",Jt="block-changed";class Qt{constructor(){this.completed=Promise.resolve()}add(t){return new Promise(((e,i)=>{this.completed=this.completed.then(t).then(e).catch(i)}))}}class Zt extends z{get positions(){return{START:"start",END:"end",DEFAULT:"default"}}static get CSS(){return{shadowCaret:"cdx-shadow-caret"}}get isAtStart(){const{currentBlock:t}=this.Editor.BlockManager;if(!t.focusable)return!0;const e=U.get(),i=L.getDeepestNode(t.currentInput);let s=e.focusNode;if(L.isNativeInput(i))return 0===i.selectionEnd;if(!e.anchorNode)return!1;let n=s.textContent.search(/\S/);-1===n&&(n=0);let o=e.focusOffset;return s.nodeType!==Node.TEXT_NODE&&s.childNodes.length&&(s.childNodes[o]?(s=s.childNodes[o],o=0):(s=s.childNodes[o-1],o=s.textContent.length)),!(!L.isLineBreakTag(i)&&!L.isEmpty(i)||!this.getHigherLevelSiblings(s,"left").every((t=>{const e=L.isLineBreakTag(t),i=1===t.children.length&&L.isLineBreakTag(t.children[0]),s=e||i;return L.isEmpty(t)&&!s}))||o!==n)||null===i||s===i&&o<=n}get isAtEnd(){const{currentBlock:t}=this.Editor.BlockManager;if(!t.focusable)return!0;const e=U.get();let i=e.focusNode;const s=L.getDeepestNode(t.currentInput,!0);if(L.isNativeInput(s))return s.selectionEnd===s.value.length;if(!e.focusNode)return!1;let n=e.focusOffset;if(i.nodeType!==Node.TEXT_NODE&&i.childNodes.length&&(i.childNodes[n-1]?(i=i.childNodes[n-1],n=i.textContent.length):(i=i.childNodes[0],n=0)),L.isLineBreakTag(s)||L.isEmpty(s)){const t=this.getHigherLevelSiblings(i,"right");if(t.every(((e,i)=>i===t.length-1&&L.isLineBreakTag(e)||L.isEmpty(e)&&!L.isLineBreakTag(e)))&&n===i.textContent.length)return!0}const o=s.textContent.replace(/\s+$/,"");return i===s&&n>=o.length}setToBlock(t,e=this.positions.DEFAULT,i=0){var s;const{BlockManager:n,BlockSelection:o}=this.Editor;if(o.clearSelection(),!t.focusable)return null==(s=window.getSelection())||s.removeAllRanges(),o.selectBlock(t),void(n.currentBlock=t);let r;switch(e){case this.positions.START:r=t.firstInput;break;case this.positions.END:r=t.lastInput;break;default:r=t.currentInput}if(!r)return;const a=L.getDeepestNode(r,e===this.positions.END),l=L.getContentLength(a);switch(!0){case e===this.positions.START:i=0;break;case e===this.positions.END:case i>l:i=l}this.set(a,i),n.setCurrentBlockByChildNode(t.holder),n.currentBlock.currentInput=r}setToInput(t,e=this.positions.DEFAULT,i=0){const{currentBlock:s}=this.Editor.BlockManager,n=L.getDeepestNode(t);switch(e){case this.positions.START:this.set(n,0);break;case this.positions.END:this.set(n,L.getContentLength(n));break;default:i&&this.set(n,i)}s.currentInput=t}set(t,e=0){const{top:i,bottom:s}=U.setCursor(t,e),{innerHeight:n}=window;i<0?window.scrollBy(0,i-30):s>n&&window.scrollBy(0,s-n+30)}setToTheLastBlock(){const t=this.Editor.BlockManager.lastBlock;if(t)if(t.tool.isDefault&&t.isEmpty)this.setToBlock(t);else{const t=this.Editor.BlockManager.insertAtEnd();this.setToBlock(t)}}extractFragmentFromCaretPosition(){const t=U.get();if(t.rangeCount){const e=t.getRangeAt(0),i=this.Editor.BlockManager.currentBlock.currentInput;if(e.deleteContents(),i){if(L.isNativeInput(i)){const t=i,e=document.createDocumentFragment(),s=t.value.substring(0,t.selectionStart),n=t.value.substring(t.selectionStart);return e.textContent=n,t.value=s,e}{const t=e.cloneRange();return t.selectNodeContents(i),t.setStart(e.endContainer,e.endOffset),t.extractContents()}}}}navigateNext(t=!1){const{BlockManager:e}=this.Editor,{currentBlock:i,nextBlock:s}=e,{nextInput:n}=i,o=this.isAtEnd;let r=s;const a=t||o;if(n&&a)return this.setToInput(n,this.positions.START),!0;if(null===r){if(i.tool.isDefault||!a)return!1;r=e.insertAtEnd()}return!!a&&(this.setToBlock(r,this.positions.START),!0)}navigatePrevious(t=!1){const{currentBlock:e,previousBlock:i}=this.Editor.BlockManager;if(!e)return!1;const{previousInput:s}=e,n=t||this.isAtStart;return s&&n?(this.setToInput(s,this.positions.END),!0):!(null===i||!n||(this.setToBlock(i,this.positions.END),0))}createShadow(t){const e=document.createElement("span");e.classList.add(Zt.CSS.shadowCaret),t.insertAdjacentElement("beforeend",e)}restoreCaret(t){const e=t.querySelector(`.${Zt.CSS.shadowCaret}`);if(!e)return;(new U).expandToTag(e);const i=document.createRange();i.selectNode(e),i.extractContents()}insertContentAtCaretPosition(t){const e=document.createDocumentFragment(),i=document.createElement("div"),s=U.get(),n=U.range;i.innerHTML=t,Array.from(i.childNodes).forEach((t=>e.appendChild(t))),0===e.childNodes.length&&e.appendChild(new Text);const o=e.lastChild;n.deleteContents(),n.insertNode(e);const r=document.createRange(),a=o.nodeType===Node.TEXT_NODE?o:o.firstChild;null!==a&&null!==a.textContent&&r.setStart(a,a.textContent.length),s.removeAllRanges(),s.addRange(r)}getHigherLevelSiblings(t,e){let i=t;const s=[];for(;i.parentNode&&"true"!==i.parentNode.contentEditable;)i=i.parentNode;const n="left"===e?"previousSibling":"nextSibling";for(;i[n];)i=i[n],s.push(i);return s}}const te=class extends z{constructor(){super(...arguments),this.MIME_TYPE="application/x-editor-js",this.toolsTags={},this.tagsByTool={},this.toolsPatterns=[],this.toolsFiles={},this.exceptionList=[],this.processTool=t=>{try{const e=t.create({},{},!1);if(!1===t.pasteConfig)return void this.exceptionList.push(t.name);if(!p(e.onPaste))return;this.getTagsConfig(t),this.getFilesConfig(t),this.getPatternsConfig(t)}catch(e){d(`Paste handling for «${t.name}» Tool hasn't been set up because of the error`,"warn",e)}},this.handlePasteEvent=async t=>{const{BlockManager:e,Toolbar:i}=this.Editor,s=e.setCurrentBlockByChildNode(t.target);!s||this.isNativeBehaviour(t.target)&&!t.clipboardData.types.includes("Files")||s&&this.exceptionList.includes(s.name)||(t.preventDefault(),this.processDataTransfer(t.clipboardData),i.close())}}async prepare(){this.processTools()}toggleReadOnly(t){t?this.unsetCallback():this.setCallback()}async processDataTransfer(t,e=!1){const{Tools:i}=this.Editor,s=t.types;if((s.includes?s.includes("Files"):s.contains("Files"))&&!v(this.toolsFiles))return void await this.processFiles(t.files);const n=t.getData(this.MIME_TYPE),o=t.getData("text/plain");let r=t.getData("text/html");if(n)try{return void this.insertEditorJSData(JSON.parse(n))}catch{}e&&o.trim()&&r.trim()&&(r="<p>"+(r.trim()?r:o)+"</p>");const a=Object.keys(this.toolsTags).reduce(((t,e)=>(t[e.toLowerCase()]=this.toolsTags[e].sanitizationConfig??{},t)),{}),l=nt(r,Object.assign({},a,i.getAllInlineToolsSanitizeConfig(),{br:{}}));l.trim()&&l.trim()!==o&&L.isHTMLString(l)?await this.processText(l,!0):await this.processText(o)}async processText(t,e=!1){const{Caret:i,BlockManager:s}=this.Editor,n=e?this.processHTML(t):this.processPlain(t);if(!n.length)return;if(1===n.length)return void(n[0].isBlock?this.processSingleBlock(n.pop()):this.processInlinePaste(n.pop()));const o=s.currentBlock&&s.currentBlock.tool.isDefault&&s.currentBlock.isEmpty;n.map((async(t,e)=>this.insertBlock(t,0===e&&o))),s.currentBlock&&i.setToBlock(s.currentBlock,i.positions.END)}setCallback(){this.listeners.on(this.Editor.UI.nodes.holder,"paste",this.handlePasteEvent)}unsetCallback(){this.listeners.off(this.Editor.UI.nodes.holder,"paste",this.handlePasteEvent)}processTools(){const t=this.Editor.Tools.blockTools;Array.from(t.values()).forEach(this.processTool)}collectTagNames(t){return m(t)?[t]:g(t)?Object.keys(t):[]}getTagsConfig(t){if(!1===t.pasteConfig)return;const e=t.pasteConfig.tags||[],i=[];e.forEach((e=>{const s=this.collectTagNames(e);i.push(...s),s.forEach((i=>{if(Object.prototype.hasOwnProperty.call(this.toolsTags,i))return void d(`Paste handler for «${t.name}» Tool on «${i}» tag is skipped because it is already used by «${this.toolsTags[i].tool.name}» Tool.`,"warn");const s=g(e)?e[i]:null;this.toolsTags[i.toUpperCase()]={tool:t,sanitizationConfig:s}}))})),this.tagsByTool[t.name]=i.map((t=>t.toUpperCase()))}getFilesConfig(t){if(!1===t.pasteConfig)return;const{files:e={}}=t.pasteConfig;let{extensions:i,mimeTypes:s}=e;!i&&!s||(i&&!Array.isArray(i)&&(d(`«extensions» property of the onDrop config for «${t.name}» Tool should be an array`),i=[]),s&&!Array.isArray(s)&&(d(`«mimeTypes» property of the onDrop config for «${t.name}» Tool should be an array`),s=[]),s&&(s=s.filter((e=>!!function(t){return/^[-\w]+\/([-+\w]+|\*)$/.test(t)}(e)||(d(`MIME type value «${e}» for the «${t.name}» Tool is not a valid MIME type`,"warn"),!1)))),this.toolsFiles[t.name]={extensions:i||[],mimeTypes:s||[]})}getPatternsConfig(t){!1===t.pasteConfig||!t.pasteConfig.patterns||v(t.pasteConfig.patterns)||Object.entries(t.pasteConfig.patterns).forEach((([e,i])=>{i instanceof RegExp||d(`Pattern ${i} for «${t.name}» Tool is skipped because it should be a Regexp instance.`,"warn"),this.toolsPatterns.push({key:e,pattern:i,tool:t})}))}isNativeBehaviour(t){return L.isNativeInput(t)}async processFiles(t){const{BlockManager:e}=this.Editor;let i;i=await Promise.all(Array.from(t).map((t=>this.processFile(t)))),i=i.filter((t=>!!t));const s=e.currentBlock.tool.isDefault&&e.currentBlock.isEmpty;i.forEach(((t,i)=>{e.paste(t.type,t.event,0===i&&s)}))}async processFile(t){const e=function(t){return t.name.split(".").pop()}(t),i=Object.entries(this.toolsFiles).find((([i,{mimeTypes:s,extensions:n}])=>{const[o,r]=t.type.split("/"),a=n.find((t=>t.toLowerCase()===e.toLowerCase())),l=s.find((t=>{const[e,i]=t.split("/");return e===o&&(i===r||"*"===i)}));return!!a||!!l}));if(!i)return;const[s]=i;return{event:this.composePasteEvent("file",{file:t}),type:s}}processHTML(t){const{Tools:e}=this.Editor,i=L.make("DIV");return i.innerHTML=t,this.getNodes(i).map((t=>{let i,s=e.defaultTool,n=!1;switch(t.nodeType){case Node.DOCUMENT_FRAGMENT_NODE:i=L.make("div"),i.appendChild(t);break;case Node.ELEMENT_NODE:i=t,n=!0,this.toolsTags[i.tagName]&&(s=this.toolsTags[i.tagName].tool)}const{tags:o}=s.pasteConfig||{tags:[]},r=o.reduce(((t,e)=>(this.collectTagNames(e).forEach((i=>{const s=g(e)?e[i]:null;t[i.toLowerCase()]=s||{}})),t)),{}),a=Object.assign({},r,s.baseSanitizeConfig);if("table"===i.tagName.toLowerCase()){const t=nt(i.outerHTML,a);i=L.make("div",void 0,{innerHTML:t}).firstChild}else i.innerHTML=nt(i.innerHTML,a);const l=this.composePasteEvent("tag",{data:i});return{content:i,isBlock:n,tool:s.name,event:l}})).filter((t=>{const e=L.isEmpty(t.content),i=L.isSingleTag(t.content);return!e||i}))}processPlain(t){const{defaultBlock:e}=this.config;if(!t)return[];const i=e;return t.split(/\r?\n/).filter((t=>t.trim())).map((t=>{const e=L.make("div");e.textContent=t;const s=this.composePasteEvent("tag",{data:e});return{content:e,tool:i,isBlock:!1,event:s}}))}async processSingleBlock(t){const{Caret:e,BlockManager:i}=this.Editor,{currentBlock:s}=i;s&&t.tool===s.name&&L.containsOnlyInlineElements(t.content.innerHTML)?e.insertContentAtCaretPosition(t.content.innerHTML):this.insertBlock(t,(null==s?void 0:s.tool.isDefault)&&s.isEmpty)}async processInlinePaste(t){const{BlockManager:e,Caret:i}=this.Editor,{content:s}=t;if(e.currentBlock&&e.currentBlock.tool.isDefault&&s.textContent.length<te.PATTERN_PROCESSING_MAX_LENGTH){const t=await this.processPattern(s.textContent);if(t){const s=e.currentBlock&&e.currentBlock.tool.isDefault&&e.currentBlock.isEmpty,n=e.paste(t.tool,t.event,s);return void i.setToBlock(n,i.positions.END)}}if(e.currentBlock&&e.currentBlock.currentInput){const t=e.currentBlock.tool.baseSanitizeConfig;document.execCommand("insertHTML",!1,nt(s.innerHTML,t))}else this.insertBlock(t)}async processPattern(t){const e=this.toolsPatterns.find((e=>{const i=e.pattern.exec(t);return!!i&&t===i.shift()}));return e?{event:this.composePasteEvent("pattern",{key:e.key,data:t}),tool:e.tool.name}:void 0}insertBlock(t,e=!1){const{BlockManager:i,Caret:s}=this.Editor,{currentBlock:n}=i;let o;if(e&&n&&n.isEmpty)return o=i.paste(t.tool,t.event,!0),void s.setToBlock(o,s.positions.END);o=i.paste(t.tool,t.event),s.setToBlock(o,s.positions.END)}insertEditorJSData(t){const{BlockManager:e,Caret:i,Tools:s}=this.Editor;st(t,(t=>s.blockTools.get(t).sanitizeConfig)).forEach((({tool:t,data:s},n)=>{let o=!1;0===n&&(o=e.currentBlock&&e.currentBlock.tool.isDefault&&e.currentBlock.isEmpty);const r=e.insert({tool:t,data:s,replace:o});i.setToBlock(r,i.positions.END)}))}processElementNode(t,e,i){const s=Object.keys(this.toolsTags),n=t,{tool:o}=this.toolsTags[n.tagName]||{},r=this.tagsByTool[null==o?void 0:o.name]||[],a=s.includes(n.tagName),l=L.blockElements.includes(n.tagName.toLowerCase()),c=Array.from(n.children).some((({tagName:t})=>s.includes(t)&&!r.includes(t))),d=Array.from(n.children).some((({tagName:t})=>L.blockElements.includes(t.toLowerCase())));return l||a||c?a&&!c||l&&!d&&!c?[...e,i,n]:void 0:(i.appendChild(n),[...e,i])}getNodes(t){const e=Array.from(t.childNodes);let i;const s=(t,e)=>{if(L.isEmpty(e)&&!L.isSingleTag(e))return t;const n=t[t.length-1];let o=new DocumentFragment;switch(n&&L.isFragment(n)&&(o=t.pop()),e.nodeType){case Node.ELEMENT_NODE:if(i=this.processElementNode(e,t,o),i)return i;break;case Node.TEXT_NODE:return o.appendChild(e),[...t,o];default:return[...t,o]}return[...t,...Array.from(e.childNodes).reduce(s,[])]};return e.reduce(s,[])}composePasteEvent(t,e){return new CustomEvent(t,{detail:e})}};let ee=te;ee.PATTERN_PROCESSING_MAX_LENGTH=450;class ie extends z{constructor(){super(...arguments),this.isRectSelectionActivated=!1,this.SCROLL_SPEED=3,this.HEIGHT_OF_SCROLL_ZONE=40,this.BOTTOM_SCROLL_ZONE=1,this.TOP_SCROLL_ZONE=2,this.MAIN_MOUSE_BUTTON=0,this.mousedown=!1,this.isScrolling=!1,this.inScrollZone=null,this.startX=0,this.startY=0,this.mouseX=0,this.mouseY=0,this.stackOfSelected=[],this.listenerIds=[]}static get CSS(){return{overlay:"codex-editor-overlay",overlayContainer:"codex-editor-overlay__container",rect:"codex-editor-overlay__rectangle",topScrollZone:"codex-editor-overlay__scroll-zone--top",bottomScrollZone:"codex-editor-overlay__scroll-zone--bottom"}}prepare(){this.enableModuleBindings()}startSelection(t,e){const i=document.elementFromPoint(t-window.pageXOffset,e-window.pageYOffset);i.closest(`.${this.Editor.Toolbar.CSS.toolbar}`)||(this.Editor.BlockSelection.allBlocksSelected=!1,this.clearSelection(),this.stackOfSelected=[]);const s=[`.${K.CSS.content}`,`.${this.Editor.Toolbar.CSS.toolbar}`,`.${this.Editor.InlineToolbar.CSS.inlineToolbar}`],n=i.closest("."+this.Editor.UI.CSS.editorWrapper),o=s.some((t=>!!i.closest(t)));!n||o||(this.mousedown=!0,this.startX=t,this.startY=e)}endSelection(){this.mousedown=!1,this.startX=0,this.startY=0,this.overlayRectangle.style.display="none"}isRectActivated(){return this.isRectSelectionActivated}clearSelection(){this.isRectSelectionActivated=!1}enableModuleBindings(){const{container:t}=this.genHTML();this.listeners.on(t,"mousedown",(t=>{this.processMouseDown(t)}),!1),this.listeners.on(document.body,"mousemove",E((t=>{this.processMouseMove(t)}),10),{passive:!0}),this.listeners.on(document.body,"mouseleave",(()=>{this.processMouseLeave()})),this.listeners.on(window,"scroll",E((t=>{this.processScroll(t)}),10),{passive:!0}),this.listeners.on(document.body,"mouseup",(()=>{this.processMouseUp()}),!1)}processMouseDown(t){t.button===this.MAIN_MOUSE_BUTTON&&(null!==t.target.closest(L.allInputsSelector)||this.startSelection(t.pageX,t.pageY))}processMouseMove(t){this.changingRectangle(t),this.scrollByZones(t.clientY)}processMouseLeave(){this.clearSelection(),this.endSelection()}processScroll(t){this.changingRectangle(t)}processMouseUp(){this.clearSelection(),this.endSelection()}scrollByZones(t){this.inScrollZone=null,t<=this.HEIGHT_OF_SCROLL_ZONE&&(this.inScrollZone=this.TOP_SCROLL_ZONE),document.documentElement.clientHeight-t<=this.HEIGHT_OF_SCROLL_ZONE&&(this.inScrollZone=this.BOTTOM_SCROLL_ZONE),this.inScrollZone?this.isScrolling||(this.scrollVertical(this.inScrollZone===this.TOP_SCROLL_ZONE?-this.SCROLL_SPEED:this.SCROLL_SPEED),this.isScrolling=!0):this.isScrolling=!1}genHTML(){const{UI:t}=this.Editor,e=t.nodes.holder.querySelector("."+t.CSS.editorWrapper),i=L.make("div",ie.CSS.overlay,{}),s=L.make("div",ie.CSS.overlayContainer,{}),n=L.make("div",ie.CSS.rect,{});return s.appendChild(n),i.appendChild(s),e.appendChild(i),this.overlayRectangle=n,{container:e,overlay:i}}scrollVertical(t){if(!this.inScrollZone||!this.mousedown)return;const e=window.pageYOffset;window.scrollBy(0,t),this.mouseY+=window.pageYOffset-e,setTimeout((()=>{this.scrollVertical(t)}),0)}changingRectangle(t){if(!this.mousedown)return;void 0!==t.pageY&&(this.mouseX=t.pageX,this.mouseY=t.pageY);const{rightPos:e,leftPos:i,index:s}=this.genInfoForMouseSelection(),n=this.startX>e&&this.mouseX>e,o=this.startX<i&&this.mouseX<i;this.rectCrossesBlocks=!(n||o),this.isRectSelectionActivated||(this.rectCrossesBlocks=!1,this.isRectSelectionActivated=!0,this.shrinkRectangleToPoint(),this.overlayRectangle.style.display="block"),this.updateRectangleSize(),this.Editor.Toolbar.close(),void 0!==s&&(this.trySelectNextBlock(s),this.inverseSelection(),U.get().removeAllRanges())}shrinkRectangleToPoint(){this.overlayRectangle.style.left=this.startX-window.pageXOffset+"px",this.overlayRectangle.style.top=this.startY-window.pageYOffset+"px",this.overlayRectangle.style.bottom=`calc(100% - ${this.startY-window.pageYOffset}px`,this.overlayRectangle.style.right=`calc(100% - ${this.startX-window.pageXOffset}px`}inverseSelection(){const t=this.Editor.BlockManager.getBlockByIndex(this.stackOfSelected[0]).selected;if(this.rectCrossesBlocks&&!t)for(const t of this.stackOfSelected)this.Editor.BlockSelection.selectBlockByIndex(t);if(!this.rectCrossesBlocks&&t)for(const t of this.stackOfSelected)this.Editor.BlockSelection.unSelectBlockByIndex(t)}updateRectangleSize(){this.mouseY>=this.startY?(this.overlayRectangle.style.top=this.startY-window.pageYOffset+"px",this.overlayRectangle.style.bottom=`calc(100% - ${this.mouseY-window.pageYOffset}px`):(this.overlayRectangle.style.bottom=`calc(100% - ${this.startY-window.pageYOffset}px`,this.overlayRectangle.style.top=this.mouseY-window.pageYOffset+"px"),this.mouseX>=this.startX?(this.overlayRectangle.style.left=this.startX-window.pageXOffset+"px",this.overlayRectangle.style.right=`calc(100% - ${this.mouseX-window.pageXOffset}px`):(this.overlayRectangle.style.right=`calc(100% - ${this.startX-window.pageXOffset}px`,this.overlayRectangle.style.left=this.mouseX-window.pageXOffset+"px")}genInfoForMouseSelection(){const t=document.body.offsetWidth/2,e=this.mouseY-window.pageYOffset,i=document.elementFromPoint(t,e),s=this.Editor.BlockManager.getBlockByChildNode(i);let n;void 0!==s&&(n=this.Editor.BlockManager.blocks.findIndex((t=>t.holder===s.holder)));const o=this.Editor.BlockManager.lastBlock.holder.querySelector("."+K.CSS.content),r=Number.parseInt(window.getComputedStyle(o).width,10)/2;return{index:n,leftPos:t-r,rightPos:t+r}}addBlockInSelection(t){this.rectCrossesBlocks&&this.Editor.BlockSelection.selectBlockByIndex(t),this.stackOfSelected.push(t)}trySelectNextBlock(t){const e=this.stackOfSelected[this.stackOfSelected.length-1]===t,i=this.stackOfSelected.length;if(e)return;const s=this.stackOfSelected[i-1]-this.stackOfSelected[i-2]>0;let n=0;i>1&&(n=s?1:-1);const o=t>this.stackOfSelected[i-1]&&1===n,r=t<this.stackOfSelected[i-1]&&-1===n,a=!(o||r||0===n);if(!a&&(t>this.stackOfSelected[i-1]||void 0===this.stackOfSelected[i-1])){let e=this.stackOfSelected[i-1]+1||t;for(;e<=t;e++)this.addBlockInSelection(e);return}if(!a&&t<this.stackOfSelected[i-1]){for(let e=this.stackOfSelected[i-1]-1;e>=t;e--)this.addBlockInSelection(e);return}if(!a)return;let l,c=i-1;for(l=t>this.stackOfSelected[i-1]?()=>t>this.stackOfSelected[c]:()=>t<this.stackOfSelected[c];l();)this.rectCrossesBlocks&&this.Editor.BlockSelection.unSelectBlockByIndex(this.stackOfSelected[c]),this.stackOfSelected.pop(),c--}}!function(){try{if(typeof document<"u"){var t=document.createElement("style");t.appendChild(document.createTextNode(".ce-paragraph{line-height:1.6em;outline:none}.ce-paragraph[data-placeholder]:empty:before{content:attr(data-placeholder);color:#707684;font-weight:400;opacity:0}.codex-editor--empty .ce-block:first-child .ce-paragraph[data-placeholder]:empty:before{opacity:1}.codex-editor--toolbox-opened .ce-block:first-child .ce-paragraph[data-placeholder]:empty:before,.codex-editor--empty .ce-block:first-child .ce-paragraph[data-placeholder]:empty:focus:before{opacity:0}.ce-paragraph p:first-of-type{margin-top:0}.ce-paragraph p:last-of-type{margin-bottom:0}")),document.head.appendChild(t)}}catch(t){console.error("vite-plugin-css-injected-by-js",t)}}();class se{static get DEFAULT_PLACEHOLDER(){return""}constructor({data:t,config:e,api:i,readOnly:s}){this.api=i,this.readOnly=s,this._CSS={block:this.api.styles.block,wrapper:"ce-paragraph"},this.readOnly||(this.onKeyUp=this.onKeyUp.bind(this)),this._placeholder=e.placeholder?e.placeholder:se.DEFAULT_PLACEHOLDER,this._data={},this._element=null,this._preserveBlank=void 0!==e.preserveBlank&&e.preserveBlank,this.data=t}onKeyUp(t){if("Backspace"!==t.code&&"Delete"!==t.code)return;const{textContent:e}=this._element;""===e&&(this._element.innerHTML="")}drawView(){const t=document.createElement("DIV");return t.classList.add(this._CSS.wrapper,this._CSS.block),t.contentEditable=!1,t.dataset.placeholder=this.api.i18n.t(this._placeholder),this._data.text&&(t.innerHTML=this._data.text),this.readOnly||(t.contentEditable=!0,t.addEventListener("keyup",this.onKeyUp)),t}render(){return this._element=this.drawView(),this._element}merge(t){const e={text:this.data.text+t.text};this.data=e}validate(t){return!(""===t.text.trim()&&!this._preserveBlank)}save(t){return{text:t.innerHTML}}onPaste(t){const e={text:t.detail.data.innerHTML};this.data=e}static get conversionConfig(){return{export:"text",import:"text"}}static get sanitize(){return{text:{br:!0}}}static get isReadOnlySupported(){return!0}get data(){if(null!==this._element){const t=this._element.innerHTML;this._data.text=t}return this._data}set data(t){this._data=t||{},null!==this._element&&this.hydrate()}hydrate(){window.requestAnimationFrame((()=>{this._element.innerHTML=this._data.text||""}))}static get pasteConfig(){return{tags:["P"]}}static get toolbox(){return{icon:'<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M8 9V7.2C8 7.08954 8.08954 7 8.2 7L12 7M16 9V7.2C16 7.08954 15.9105 7 15.8 7L12 7M12 7L12 17M12 17H10M12 17H14"/></svg>',title:"Text"}}}class ne{constructor(){this.commandName="bold",this.CSS={button:"ce-inline-tool",buttonActive:"ce-inline-tool--active",buttonModifier:"ce-inline-tool--bold"},this.nodes={button:void 0}}static get sanitize(){return{b:{}}}render(){return this.nodes.button=document.createElement("button"),this.nodes.button.type="button",this.nodes.button.classList.add(this.CSS.button,this.CSS.buttonModifier),this.nodes.button.innerHTML='<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M9 12L9 7.1C9 7.04477 9.04477 7 9.1 7H10.4C11.5 7 14 7.1 14 9.5C14 9.5 14 12 11 12M9 12V16.8C9 16.9105 9.08954 17 9.2 17H12.5C14 17 15 16 15 14.5C15 11.7046 11 12 11 12M9 12H11"/></svg>',this.nodes.button}surround(){document.execCommand(this.commandName)}checkState(){const t=document.queryCommandState(this.commandName);return this.nodes.button.classList.toggle(this.CSS.buttonActive,t),t}get shortcut(){return"CMD+B"}}ne.isInline=!0,ne.title="Bold";class oe{constructor(){this.commandName="italic",this.CSS={button:"ce-inline-tool",buttonActive:"ce-inline-tool--active",buttonModifier:"ce-inline-tool--italic"},this.nodes={button:null}}static get sanitize(){return{i:{}}}render(){return this.nodes.button=document.createElement("button"),this.nodes.button.type="button",this.nodes.button.classList.add(this.CSS.button,this.CSS.buttonModifier),this.nodes.button.innerHTML='<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M13.34 10C12.4223 12.7337 11 17 11 17"/><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M14.21 7H14.2"/></svg>',this.nodes.button}surround(){document.execCommand(this.commandName)}checkState(){const t=document.queryCommandState(this.commandName);return this.nodes.button.classList.toggle(this.CSS.buttonActive,t),t}get shortcut(){return"CMD+I"}}oe.isInline=!0,oe.title="Italic";class re{constructor({api:t}){this.commandLink="createLink",this.commandUnlink="unlink",this.ENTER_KEY=13,this.CSS={button:"ce-inline-tool",buttonActive:"ce-inline-tool--active",buttonModifier:"ce-inline-tool--link",buttonUnlink:"ce-inline-tool--unlink",input:"ce-inline-tool-input",inputShowed:"ce-inline-tool-input--showed"},this.nodes={button:null,input:null},this.inputOpened=!1,this.toolbar=t.toolbar,this.inlineToolbar=t.inlineToolbar,this.notifier=t.notifier,this.i18n=t.i18n,this.selection=new U}static get sanitize(){return{a:{href:!0,target:"_blank",rel:"nofollow"}}}render(){return this.nodes.button=document.createElement("button"),this.nodes.button.type="button",this.nodes.button.classList.add(this.CSS.button,this.CSS.buttonModifier),this.nodes.button.innerHTML=ft,this.nodes.button}renderActions(){return this.nodes.input=document.createElement("input"),this.nodes.input.placeholder=this.i18n.t("Add a link"),this.nodes.input.classList.add(this.CSS.input),this.nodes.input.addEventListener("keydown",(t=>{t.keyCode===this.ENTER_KEY&&this.enterPressed(t)})),this.nodes.input}surround(t){if(t){this.inputOpened?(this.selection.restore(),this.selection.removeFakeBackground()):(this.selection.setFakeBackground(),this.selection.save());const t=this.selection.findParentTag("A");if(t)return this.selection.expandToTag(t),this.unlink(),this.closeActions(),this.checkState(),void this.toolbar.close()}this.toggleActions()}checkState(){const t=this.selection.findParentTag("A");if(t){this.nodes.button.innerHTML='<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M15.7795 11.5C15.7795 11.5 16.053 11.1962 16.5497 10.6722C17.4442 9.72856 17.4701 8.2475 16.5781 7.30145V7.30145C15.6482 6.31522 14.0873 6.29227 13.1288 7.25073L11.8796 8.49999"/><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M8.24517 12.3883C8.24517 12.3883 7.97171 12.6922 7.47504 13.2161C6.58051 14.1598 6.55467 15.6408 7.44666 16.5869V16.5869C8.37653 17.5731 9.93744 17.5961 10.8959 16.6376L12.1452 15.3883"/><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M17.7802 15.1032L16.597 14.9422C16.0109 14.8624 15.4841 15.3059 15.4627 15.8969L15.4199 17.0818"/><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M6.39064 9.03238L7.58432 9.06668C8.17551 9.08366 8.6522 8.58665 8.61056 7.99669L8.5271 6.81397"/><line x1="12.1142" x2="11.7" y1="12.2" y2="11.7858" stroke="currentColor" stroke-linecap="round" stroke-width="2"/></svg>',this.nodes.button.classList.add(this.CSS.buttonUnlink),this.nodes.button.classList.add(this.CSS.buttonActive),this.openActions();const e=t.getAttribute("href");this.nodes.input.value="null"!==e?e:"",this.selection.save()}else this.nodes.button.innerHTML=ft,this.nodes.button.classList.remove(this.CSS.buttonUnlink),this.nodes.button.classList.remove(this.CSS.buttonActive);return!!t}clear(){this.closeActions()}get shortcut(){return"CMD+K"}toggleActions(){this.inputOpened?this.closeActions(!1):this.openActions(!0)}openActions(t=!1){this.nodes.input.classList.add(this.CSS.inputShowed),t&&this.nodes.input.focus(),this.inputOpened=!0}closeActions(t=!0){if(this.selection.isFakeBackgroundEnabled){const t=new U;t.save(),this.selection.restore(),this.selection.removeFakeBackground(),t.restore()}this.nodes.input.classList.remove(this.CSS.inputShowed),this.nodes.input.value="",t&&this.selection.clearSaved(),this.inputOpened=!1}enterPressed(t){let e=this.nodes.input.value||"";return e.trim()?this.validateURL(e)?(e=this.prepareLink(e),this.selection.restore(),this.selection.removeFakeBackground(),this.insertLink(e),t.preventDefault(),t.stopPropagation(),t.stopImmediatePropagation(),this.selection.collapseToEnd(),void this.inlineToolbar.close()):(this.notifier.show({message:"Pasted link is not valid.",style:"error"}),void d("Incorrect Link pasted","warn",e)):(this.selection.restore(),this.unlink(),t.preventDefault(),void this.closeActions())}validateURL(t){return!/\s/.test(t)}prepareLink(t){return t=t.trim(),this.addProtocol(t)}addProtocol(t){if(/^(\w+):(\/\/)?/.test(t))return t;const e=/^\/[^/\s]/.test(t),i="#"===t.substring(0,1),s=/^\/\/[^/\s]/.test(t);return!e&&!i&&!s&&(t="http://"+t),t}insertLink(t){const e=this.selection.findParentTag("A");e&&this.selection.expandToTag(e),document.execCommand(this.commandLink,!1,t)}unlink(){document.execCommand(this.commandUnlink)}}re.isInline=!0,re.title="Link";class ae{constructor({data:t,api:e}){this.CSS={wrapper:"ce-stub",info:"ce-stub__info",title:"ce-stub__title",subtitle:"ce-stub__subtitle"},this.api=e,this.title=t.title||this.api.i18n.t("Error"),this.subtitle=this.api.i18n.t("The block can not be displayed correctly."),this.savedData=t.savedData,this.wrapper=this.make()}render(){return this.wrapper}save(){return this.savedData}make(){const t=L.make("div",this.CSS.wrapper),e=L.make("div",this.CSS.info),i=L.make("div",this.CSS.title,{textContent:this.title}),s=L.make("div",this.CSS.subtitle,{textContent:this.subtitle});return t.innerHTML='<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><rect width="14" height="14" x="5" y="5" stroke="currentColor" stroke-width="2" rx="4"/><line x1="12" x2="12" y1="9" y2="12" stroke="currentColor" stroke-linecap="round" stroke-width="2"/><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M12 15.02V15.01"/></svg>',e.appendChild(i),e.appendChild(s),t.appendChild(e),t}}ae.isReadOnlySupported=!0;class le extends Gt{constructor(){super(...arguments),this.type=Ut.Inline}get title(){return this.constructable[Vt.Title]}create(){return new this.constructable({api:this.api.getMethodsForTool(this),config:this.settings})}}class ce extends Gt{constructor(){super(...arguments),this.type=Ut.Tune}create(t,e){return new this.constructable({api:this.api.getMethodsForTool(this),config:this.settings,block:e,data:t})}}class de extends Map{get blockTools(){const t=Array.from(this.entries()).filter((([,t])=>t.isBlock()));return new de(t)}get inlineTools(){const t=Array.from(this.entries()).filter((([,t])=>t.isInline()));return new de(t)}get blockTunes(){const t=Array.from(this.entries()).filter((([,t])=>t.isTune()));return new de(t)}get internalTools(){const t=Array.from(this.entries()).filter((([,t])=>t.isInternal));return new de(t)}get externalTools(){const t=Array.from(this.entries()).filter((([,t])=>!t.isInternal));return new de(t)}}var he=Object.defineProperty,ue=Object.getOwnPropertyDescriptor,pe=(t,e,i,s)=>{for(var n,o=s>1?void 0:s?ue(e,i):e,r=t.length-1;r>=0;r--)(n=t[r])&&(o=(s?n(e,i,o):n(o))||o);return s&&o&&he(e,i,o),o};class ge extends Gt{constructor(){super(...arguments),this.type=Ut.Block,this.inlineTools=new de,this.tunes=new de}create(t,e,i){return new this.constructable({data:t,block:e,readOnly:i,api:this.api.getMethodsForTool(this),config:this.settings})}get isReadOnlySupported(){return!0===this.constructable[Wt.IsReadOnlySupported]}get isLineBreaksEnabled(){return this.constructable[Wt.IsEnabledLineBreaks]}get toolbox(){const t=this.constructable[Wt.Toolbox],e=this.config[jt.Toolbox];if(!v(t)&&!1!==e)return e?Array.isArray(t)?Array.isArray(e)?e.map(((e,i)=>{const s=t[i];return s?{...s,...e}:e})):[e]:Array.isArray(e)?e:[{...t,...e}]:Array.isArray(t)?t:[t]}get conversionConfig(){return this.constructable[Wt.ConversionConfig]}get enabledInlineTools(){return this.config[jt.EnabledInlineTools]||!1}get enabledBlockTunes(){return this.config[jt.EnabledBlockTunes]}get pasteConfig(){return this.constructable[Wt.PasteConfig]??{}}get sanitizeConfig(){const t=super.sanitizeConfig,e=this.baseSanitizeConfig;if(v(t))return e;const i={};for(const s in t)if(Object.prototype.hasOwnProperty.call(t,s)){const n=t[s];g(n)?i[s]=Object.assign({},e,n):i[s]=n}return i}get baseSanitizeConfig(){const t={};return Array.from(this.inlineTools.values()).forEach((e=>Object.assign(t,e.sanitizeConfig))),Array.from(this.tunes.values()).forEach((e=>Object.assign(t,e.sanitizeConfig))),t}}pe([M],ge.prototype,"sanitizeConfig",1),pe([M],ge.prototype,"baseSanitizeConfig",1);class me{constructor(t,e,i){this.api=i,this.config=t,this.editorConfig=e}get(t){const{class:e,isInternal:i=!1,...s}=this.config[t];return new(this.getConstructor(e))({name:t,constructable:e,config:s,api:this.api,isDefault:t===this.editorConfig.defaultBlock,defaultPlaceholder:this.editorConfig.placeholder,isInternal:i})}getConstructor(t){switch(!0){case t[Vt.IsInline]:return le;case t[qt.IsTune]:return ce;default:return ge}}}class fe{constructor({api:t}){this.CSS={animation:"wobble"},this.api=t}render(){return{icon:mt,title:this.api.i18n.t("Move down"),onActivate:()=>this.handleClick(),name:"move-down"}}handleClick(){const t=this.api.blocks.getCurrentBlockIndex(),e=this.api.blocks.getBlockByIndex(t+1);if(!e)throw new Error("Unable to move Block down since it is already the last");const i=e.holder,s=i.getBoundingClientRect();let n=Math.abs(window.innerHeight-i.offsetHeight);s.top<window.innerHeight&&(n=window.scrollY+i.offsetHeight),window.scrollTo(0,n),this.api.blocks.move(t+1),this.api.toolbar.toggleBlockSettings(!0)}}fe.isTune=!0;class be{constructor({api:t}){this.api=t}render(){return{icon:'<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M8 8L12 12M12 12L16 16M12 12L16 8M12 12L8 16"/></svg>',title:this.api.i18n.t("Delete"),name:"delete",confirmation:{title:this.api.i18n.t("Click to delete"),onActivate:()=>this.handleClick()}}}handleClick(){this.api.blocks.delete()}}be.isTune=!0;class ve{constructor({api:t}){this.CSS={animation:"wobble"},this.api=t}render(){return{icon:'<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M7 15L11.8586 10.1414C11.9367 10.0633 12.0633 10.0633 12.1414 10.1414L17 15"/></svg>',title:this.api.i18n.t("Move up"),onActivate:()=>this.handleClick(),name:"move-up"}}handleClick(){const t=this.api.blocks.getCurrentBlockIndex(),e=this.api.blocks.getBlockByIndex(t),i=this.api.blocks.getBlockByIndex(t-1);if(0===t||!e||!i)throw new Error("Unable to move Block up since it is already the first");const s=e.holder,n=i.holder,o=s.getBoundingClientRect(),r=n.getBoundingClientRect();let a;a=r.top>0?Math.abs(o.top)-Math.abs(r.top):Math.abs(o.top)+r.height,window.scrollBy(0,-1*a),this.api.blocks.move(t-1),this.api.toolbar.toggleBlockSettings(!0)}}ve.isTune=!0;var ye=Object.defineProperty,we=Object.getOwnPropertyDescriptor;class ke extends z{constructor(){super(...arguments),this.stubTool="stub",this.toolsAvailable=new de,this.toolsUnavailable=new de}get available(){return this.toolsAvailable}get unavailable(){return this.toolsUnavailable}get inlineTools(){return this.available.inlineTools}get blockTools(){return this.available.blockTools}get blockTunes(){return this.available.blockTunes}get defaultTool(){return this.blockTools.get(this.config.defaultBlock)}get internal(){return this.available.internalTools}async prepare(){if(this.validateTools(),this.config.tools=A({},this.internalTools,this.config.tools),!Object.prototype.hasOwnProperty.call(this.config,"tools")||0===Object.keys(this.config.tools).length)throw Error("Can't start without tools");const t=this.prepareConfig();this.factory=new me(t,this.config,this.Editor.API);const e=this.getListOfPrepareFunctions(t);if(0===e.length)return Promise.resolve();await async function(t,e=(()=>{}),i=(()=>{})){return t.reduce((async(t,s)=>(await t,async function(t,e,i){try{await t.function(t.data),await e(b(t.data)?{}:t.data)}catch{i(b(t.data)?{}:t.data)}}(s,e,i))),Promise.resolve())}(e,(t=>{this.toolPrepareMethodSuccess(t)}),(t=>{this.toolPrepareMethodFallback(t)})),this.prepareBlockTools()}getAllInlineToolsSanitizeConfig(){const t={};return Array.from(this.inlineTools.values()).forEach((e=>{Object.assign(t,e.sanitizeConfig)})),t}destroy(){Object.values(this.available).forEach((async t=>{p(t.reset)&&await t.reset()}))}get internalTools(){return{bold:{class:ne,isInternal:!0},italic:{class:oe,isInternal:!0},link:{class:re,isInternal:!0},paragraph:{class:se,inlineToolbar:!0,isInternal:!0},stub:{class:ae,isInternal:!0},moveUp:{class:ve,isInternal:!0},delete:{class:be,isInternal:!0},moveDown:{class:fe,isInternal:!0}}}toolPrepareMethodSuccess(t){const e=this.factory.get(t.toolName);if(e.isInline()){const t=["render","surround","checkState"].filter((t=>!e.create()[t]));if(t.length)return d(`Incorrect Inline Tool: ${e.name}. Some of required methods is not implemented %o`,"warn",t),void this.toolsUnavailable.set(e.name,e)}this.toolsAvailable.set(e.name,e)}toolPrepareMethodFallback(t){this.toolsUnavailable.set(t.toolName,this.factory.get(t.toolName))}getListOfPrepareFunctions(t){const e=[];return Object.entries(t).forEach((([t,i])=>{e.push({function:p(i.class.prepare)?i.class.prepare:()=>{},data:{toolName:t,config:i.config}})})),e}prepareBlockTools(){Array.from(this.blockTools.values()).forEach((t=>{this.assignInlineToolsToBlockTool(t),this.assignBlockTunesToBlockTool(t)}))}assignInlineToolsToBlockTool(t){if(!1!==this.config.inlineToolbar){if(!0===t.enabledInlineTools)return void(t.inlineTools=new de(Array.isArray(this.config.inlineToolbar)?this.config.inlineToolbar.map((t=>[t,this.inlineTools.get(t)])):Array.from(this.inlineTools.entries())));Array.isArray(t.enabledInlineTools)&&(t.inlineTools=new de(t.enabledInlineTools.map((t=>[t,this.inlineTools.get(t)]))))}}assignBlockTunesToBlockTool(t){if(!1!==t.enabledBlockTunes){if(Array.isArray(t.enabledBlockTunes)){const e=new de(t.enabledBlockTunes.map((t=>[t,this.blockTunes.get(t)])));return void(t.tunes=new de([...e,...this.blockTunes.internalTools]))}if(Array.isArray(this.config.tunes)){const e=new de(this.config.tunes.map((t=>[t,this.blockTunes.get(t)])));return void(t.tunes=new de([...e,...this.blockTunes.internalTools]))}t.tunes=this.blockTunes.internalTools}}validateTools(){for(const t in this.config.tools)if(Object.prototype.hasOwnProperty.call(this.config.tools,t)){if(t in this.internalTools)return;const e=this.config.tools[t];if(!p(e)&&!p(e.class))throw Error(`Tool «${t}» must be a constructor function or an object with function in the «class» property`)}}prepareConfig(){const t={};for(const e in this.config.tools)g(this.config.tools[e])?t[e]=this.config.tools[e]:t[e]={class:this.config.tools[e]};return t}}((t,e,i,s)=>{for(var n,o=we(e,i),r=t.length-1;r>=0;r--)(n=t[r])&&(o=n(e,i,o)||o);o&&ye(e,i,o)})([M],ke.prototype,"getAllInlineToolsSanitizeConfig");const xe={BlocksAPI:class extends z{constructor(){super(...arguments),this.insert=(t=this.config.defaultBlock,e={},i={},s,n,o,r)=>new N(this.Editor.BlockManager.insert({id:r,tool:t,data:e,index:s,needToFocus:n,replace:o})),this.composeBlockData=async t=>{const e=this.Editor.Tools.blockTools.get(t);return new K({tool:e,api:this.Editor.API,readOnly:!0,data:{},tunesData:{}}).data},this.update=async(t,e)=>{const{BlockManager:i}=this.Editor,s=i.getBlockById(t);if(void 0===s)throw new Error(`Block with id "${t}" not found`);return new N(await i.update(s,e))},this.convert=(t,e,i)=>{var s,n;const{BlockManager:o,Tools:r}=this.Editor,a=o.getBlockById(t);if(!a)throw new Error(`Block with id "${t}" not found`);const l=r.blockTools.get(a.name),c=r.blockTools.get(e);if(!c)throw new Error(`Block Tool with type "${e}" not found`);const d=void 0!==(null==(s=null==l?void 0:l.conversionConfig)?void 0:s.export),h=void 0!==(null==(n=c.conversionConfig)?void 0:n.import);if(!d||!h){const t=[!d&&C(a.name),!h&&C(e)].filter(Boolean).join(" and ");throw new Error(`Conversion from "${a.name}" to "${e}" is not possible. ${t} tool(s) should provide a "conversionConfig"`)}o.convert(a,e,i)},this.insertMany=(t,e=this.Editor.BlockManager.blocks.length-1)=>{this.validateIndex(e);const i=t.map((({id:t,type:e,data:i})=>this.Editor.BlockManager.composeBlock({id:t,tool:e||this.config.defaultBlock,data:i})));return this.Editor.BlockManager.insertMany(i,e),i.map((t=>new N(t)))}}get methods(){return{clear:()=>this.clear(),render:t=>this.render(t),renderFromHTML:t=>this.renderFromHTML(t),delete:t=>this.delete(t),swap:(t,e)=>this.swap(t,e),move:(t,e)=>this.move(t,e),getBlockByIndex:t=>this.getBlockByIndex(t),getById:t=>this.getById(t),getCurrentBlockIndex:()=>this.getCurrentBlockIndex(),getBlockIndex:t=>this.getBlockIndex(t),getBlocksCount:()=>this.getBlocksCount(),stretchBlock:(t,e=!0)=>this.stretchBlock(t,e),insertNewBlock:()=>this.insertNewBlock(),insert:this.insert,insertMany:this.insertMany,update:this.update,composeBlockData:this.composeBlockData,convert:this.convert}}getBlocksCount(){return this.Editor.BlockManager.blocks.length}getCurrentBlockIndex(){return this.Editor.BlockManager.currentBlockIndex}getBlockIndex(t){const e=this.Editor.BlockManager.getBlockById(t);if(e)return this.Editor.BlockManager.getBlockIndex(e);h("There is no block with id `"+t+"`","warn")}getBlockByIndex(t){const e=this.Editor.BlockManager.getBlockByIndex(t);if(void 0!==e)return new N(e);h("There is no block at index `"+t+"`","warn")}getById(t){const e=this.Editor.BlockManager.getBlockById(t);return void 0===e?(h("There is no block with id `"+t+"`","warn"),null):new N(e)}swap(t,e){d("`blocks.swap()` method is deprecated and will be removed in the next major release. Use `block.move()` method instead","info"),this.Editor.BlockManager.swap(t,e)}move(t,e){this.Editor.BlockManager.move(t,e)}delete(t=this.Editor.BlockManager.currentBlockIndex){try{const e=this.Editor.BlockManager.getBlockByIndex(t);this.Editor.BlockManager.removeBlock(e)}catch(t){return void h(t,"warn")}0===this.Editor.BlockManager.blocks.length&&this.Editor.BlockManager.insert(),this.Editor.BlockManager.currentBlock&&this.Editor.Caret.setToBlock(this.Editor.BlockManager.currentBlock,this.Editor.Caret.positions.END),this.Editor.Toolbar.close()}async clear(){await this.Editor.BlockManager.clear(!0),this.Editor.InlineToolbar.close()}async render(t){if(void 0===t||void 0===t.blocks)throw new Error("Incorrect data passed to the render() method");this.Editor.ModificationsObserver.disable(),await this.Editor.BlockManager.clear(),await this.Editor.Renderer.render(t.blocks),this.Editor.ModificationsObserver.enable()}renderFromHTML(t){return this.Editor.BlockManager.clear(),this.Editor.Paste.processText(t,!0)}stretchBlock(t,e=!0){_(!0,"blocks.stretchBlock()","BlockAPI");const i=this.Editor.BlockManager.getBlockByIndex(t);i&&(i.stretched=e)}insertNewBlock(){d("Method blocks.insertNewBlock() is deprecated and it will be removed in the next major release. Use blocks.insert() instead.","warn"),this.insert()}validateIndex(t){if("number"!=typeof t)throw new Error("Index should be a number");if(t<0)throw new Error("Index should be greater than or equal to 0");if(null===t)throw new Error("Index should be greater than or equal to 0")}},CaretAPI:class extends z{constructor(){super(...arguments),this.setToFirstBlock=(t=this.Editor.Caret.positions.DEFAULT,e=0)=>!!this.Editor.BlockManager.firstBlock&&(this.Editor.Caret.setToBlock(this.Editor.BlockManager.firstBlock,t,e),!0),this.setToLastBlock=(t=this.Editor.Caret.positions.DEFAULT,e=0)=>!!this.Editor.BlockManager.lastBlock&&(this.Editor.Caret.setToBlock(this.Editor.BlockManager.lastBlock,t,e),!0),this.setToPreviousBlock=(t=this.Editor.Caret.positions.DEFAULT,e=0)=>!!this.Editor.BlockManager.previousBlock&&(this.Editor.Caret.setToBlock(this.Editor.BlockManager.previousBlock,t,e),!0),this.setToNextBlock=(t=this.Editor.Caret.positions.DEFAULT,e=0)=>!!this.Editor.BlockManager.nextBlock&&(this.Editor.Caret.setToBlock(this.Editor.BlockManager.nextBlock,t,e),!0),this.setToBlock=(t,e=this.Editor.Caret.positions.DEFAULT,i=0)=>!!this.Editor.BlockManager.blocks[t]&&(this.Editor.Caret.setToBlock(this.Editor.BlockManager.blocks[t],e,i),!0),this.focus=(t=!1)=>t?this.setToLastBlock(this.Editor.Caret.positions.END):this.setToFirstBlock(this.Editor.Caret.positions.START)}get methods(){return{setToFirstBlock:this.setToFirstBlock,setToLastBlock:this.setToLastBlock,setToPreviousBlock:this.setToPreviousBlock,setToNextBlock:this.setToNextBlock,setToBlock:this.setToBlock,focus:this.focus}}},EventsAPI:class extends z{get methods(){return{emit:(t,e)=>this.emit(t,e),off:(t,e)=>this.off(t,e),on:(t,e)=>this.on(t,e)}}on(t,e){this.eventsDispatcher.on(t,e)}emit(t,e){this.eventsDispatcher.emit(t,e)}off(t,e){this.eventsDispatcher.off(t,e)}},I18nAPI:X,API:class extends z{get methods(){return{blocks:this.Editor.BlocksAPI.methods,caret:this.Editor.CaretAPI.methods,events:this.Editor.EventsAPI.methods,listeners:this.Editor.ListenersAPI.methods,notifier:this.Editor.NotifierAPI.methods,sanitizer:this.Editor.SanitizerAPI.methods,saver:this.Editor.SaverAPI.methods,selection:this.Editor.SelectionAPI.methods,styles:this.Editor.StylesAPI.classes,toolbar:this.Editor.ToolbarAPI.methods,inlineToolbar:this.Editor.InlineToolbarAPI.methods,tooltip:this.Editor.TooltipAPI.methods,i18n:this.Editor.I18nAPI.methods,readOnly:this.Editor.ReadOnlyAPI.methods,ui:this.Editor.UiAPI.methods}}getMethodsForTool(t){return Object.assign(this.methods,{i18n:this.Editor.I18nAPI.getMethodsForTool(t)})}},InlineToolbarAPI:class extends z{get methods(){return{close:()=>this.close(),open:()=>this.open()}}open(){this.Editor.InlineToolbar.tryToShow()}close(){this.Editor.InlineToolbar.close()}},ListenersAPI:class extends z{get methods(){return{on:(t,e,i,s)=>this.on(t,e,i,s),off:(t,e,i,s)=>this.off(t,e,i,s),offById:t=>this.offById(t)}}on(t,e,i,s){return this.listeners.on(t,e,i,s)}off(t,e,i,s){this.listeners.off(t,e,i,s)}offById(t){this.listeners.offById(t)}},NotifierAPI:class extends z{constructor({config:t,eventsDispatcher:e}){super({config:t,eventsDispatcher:e}),this.notifier=new Z}get methods(){return{show:t=>this.show(t)}}show(t){return this.notifier.show(t)}},ReadOnlyAPI:class extends z{get methods(){const t=()=>this.isEnabled;return{toggle:t=>this.toggle(t),get isEnabled(){return t()}}}toggle(t){return this.Editor.ReadOnly.toggle(t)}get isEnabled(){return this.Editor.ReadOnly.isEnabled}},SanitizerAPI:class extends z{get methods(){return{clean:(t,e)=>this.clean(t,e)}}clean(t,e){return nt(t,e)}},SaverAPI:class extends z{get methods(){return{save:()=>this.save()}}save(){const t="Editor's content can not be saved in read-only mode";return this.Editor.ReadOnly.isEnabled?(h(t,"warn"),Promise.reject(new Error(t))):this.Editor.Saver.save()}},SelectionAPI:class extends z{get methods(){return{findParentTag:(t,e)=>this.findParentTag(t,e),expandToTag:t=>this.expandToTag(t)}}findParentTag(t,e){return(new U).findParentTag(t,e)}expandToTag(t){(new U).expandToTag(t)}},StylesAPI:class extends z{get classes(){return{block:"cdx-block",inlineToolButton:"ce-inline-tool",inlineToolButtonActive:"ce-inline-tool--active",input:"cdx-input",loader:"cdx-loader",button:"cdx-button",settingsButton:"cdx-settings-button",settingsButtonActive:"cdx-settings-button--active"}}},ToolbarAPI:class extends z{get methods(){return{close:()=>this.close(),open:()=>this.open(),toggleBlockSettings:t=>this.toggleBlockSettings(t),toggleToolbox:t=>this.toggleToolbox(t)}}open(){this.Editor.Toolbar.moveAndOpen()}close(){this.Editor.Toolbar.close()}toggleBlockSettings(t){-1!==this.Editor.BlockManager.currentBlockIndex?t??!this.Editor.BlockSettings.opened?(this.Editor.Toolbar.moveAndOpen(),this.Editor.BlockSettings.open()):this.Editor.BlockSettings.close():h("Could't toggle the Toolbar because there is no block selected ","warn")}toggleToolbox(t){-1!==this.Editor.BlockManager.currentBlockIndex?t??!this.Editor.Toolbar.toolbox.opened?(this.Editor.Toolbar.moveAndOpen(),this.Editor.Toolbar.toolbox.open()):this.Editor.Toolbar.toolbox.close():h("Could't toggle the Toolbox because there is no block selected ","warn")}},TooltipAPI:class extends z{constructor({config:t,eventsDispatcher:e}){super({config:t,eventsDispatcher:e})}get methods(){return{show:(t,e,i)=>this.show(t,e,i),hide:()=>this.hide(),onHover:(t,e,i)=>this.onHover(t,e,i)}}show(t,e,i){!function(t,e,i){ht(),null==dt||dt.show(t,e,i)}(t,e,i)}hide(){ut()}onHover(t,e,i){pt(t,e,i)}},UiAPI:class extends z{get methods(){return{nodes:this.editorNodes}}get editorNodes(){return{wrapper:this.Editor.UI.nodes.wrapper,redactor:this.Editor.UI.nodes.redactor}}},BlockSettings:class extends z{constructor(){super(...arguments),this.opened=!1,this.selection=new U,this.onPopoverClose=()=>{this.close()}}get events(){return{opened:"block-settings-opened",closed:"block-settings-closed"}}get CSS(){return{settings:"ce-settings"}}get flipper(){var t;return null==(t=this.popover)?void 0:t.flipper}make(){this.nodes.wrapper=L.make("div",[this.CSS.settings])}destroy(){this.removeAllNodes()}open(t=this.Editor.BlockManager.currentBlock){this.opened=!0,this.selection.save(),this.Editor.BlockSelection.selectBlock(t),this.Editor.BlockSelection.clearCache();const[e,i]=t.getTunes();this.eventsDispatcher.emit(this.events.opened),this.popover=new _t({searchable:!0,items:e.map((t=>this.resolveTuneAliases(t))),customContent:i,customContentFlippableItems:this.getControls(i),scopeElement:this.Editor.API.methods.ui.nodes.redactor,messages:{nothingFound:D.ui(gt.ui.popover,"Nothing found"),search:D.ui(gt.ui.popover,"Filter")}}),this.popover.on(St.Close,this.onPopoverClose),this.nodes.wrapper.append(this.popover.getElement()),this.popover.show()}getElement(){return this.nodes.wrapper}close(){this.opened&&(this.opened=!1,U.isAtEditor||this.selection.restore(),this.selection.clearSaved(),!this.Editor.CrossBlockSelection.isCrossBlockSelectionStarted&&this.Editor.BlockManager.currentBlock&&this.Editor.BlockSelection.unselectBlock(this.Editor.BlockManager.currentBlock),this.eventsDispatcher.emit(this.events.closed),this.popover&&(this.popover.off(St.Close,this.onPopoverClose),this.popover.destroy(),this.popover.getElement().remove(),this.popover=null))}getControls(t){const{StylesAPI:e}=this.Editor,i=t.querySelectorAll(`.${e.classes.settingsButton}, ${L.allInputsSelector}`);return Array.from(i)}resolveTuneAliases(t){const e=function(t,e){const i={};return Object.keys(t).forEach((s=>{const n=e[s];void 0!==n?i[n]=t[s]:i[s]=t[s]})),i}(t,{label:"title"});return t.confirmation&&(e.confirmation=this.resolveTuneAliases(t.confirmation)),e}},ConversionToolbar:Mt,Toolbar:class extends z{constructor({config:t,eventsDispatcher:e}){super({config:t,eventsDispatcher:e}),this.toolboxInstance=null}get CSS(){return{toolbar:"ce-toolbar",content:"ce-toolbar__content",actions:"ce-toolbar__actions",actionsOpened:"ce-toolbar__actions--opened",toolbarOpened:"ce-toolbar--opened",openedToolboxHolderModifier:"codex-editor--toolbox-opened",plusButton:"ce-toolbar__plus",plusButtonShortcut:"ce-toolbar__plus-shortcut",settingsToggler:"ce-toolbar__settings-btn",settingsTogglerHidden:"ce-toolbar__settings-btn--hidden"}}get opened(){return this.nodes.wrapper.classList.contains(this.CSS.toolbarOpened)}get toolbox(){var t;return{opened:null==(t=this.toolboxInstance)?void 0:t.opened,close:()=>{var t;null==(t=this.toolboxInstance)||t.close()},open:()=>{null!==this.toolboxInstance?(this.Editor.BlockManager.currentBlock=this.hoveredBlock,this.toolboxInstance.open()):d("toolbox.open() called before initialization is finished","warn")},toggle:()=>{null!==this.toolboxInstance?this.toolboxInstance.toggle():d("toolbox.toggle() called before initialization is finished","warn")},hasFocus:()=>{var t;return null==(t=this.toolboxInstance)?void 0:t.hasFocus()}}}get blockActions(){return{hide:()=>{this.nodes.actions.classList.remove(this.CSS.actionsOpened)},show:()=>{this.nodes.actions.classList.add(this.CSS.actionsOpened)}}}get blockTunesToggler(){return{hide:()=>this.nodes.settingsToggler.classList.add(this.CSS.settingsTogglerHidden),show:()=>this.nodes.settingsToggler.classList.remove(this.CSS.settingsTogglerHidden)}}toggleReadOnly(t){t?(this.destroy(),this.Editor.BlockSettings.destroy(),this.disableModuleBindings()):window.requestIdleCallback((()=>{this.drawUI(),this.enableModuleBindings()}),{timeout:2e3})}moveAndOpen(t=this.Editor.BlockManager.currentBlock){if(null===this.toolboxInstance)return void d("Can't open Toolbar since Editor initialization is not finished yet","warn");if(this.toolboxInstance.opened&&this.toolboxInstance.close(),this.Editor.BlockSettings.opened&&this.Editor.BlockSettings.close(),!t)return;this.hoveredBlock=t;const e=t.holder,{isMobile:i}=this.Editor.UI,s=t.pluginsContent,n=window.getComputedStyle(s),o=parseInt(n.paddingTop,10),r=e.offsetHeight;let a;a=i?e.offsetTop+r:e.offsetTop+o,this.nodes.wrapper.style.top=`${Math.floor(a)}px`,1===this.Editor.BlockManager.blocks.length&&t.isEmpty?this.blockTunesToggler.hide():this.blockTunesToggler.show(),this.open()}close(){var t,e;this.Editor.ReadOnly.isEnabled||(null==(t=this.nodes.wrapper)||t.classList.remove(this.CSS.toolbarOpened),this.blockActions.hide(),null==(e=this.toolboxInstance)||e.close(),this.Editor.BlockSettings.close(),this.reset())}reset(){this.nodes.wrapper.style.top="unset"}open(t=!0){this.nodes.wrapper.classList.add(this.CSS.toolbarOpened),t?this.blockActions.show():this.blockActions.hide()}make(){this.nodes.wrapper=L.make("div",this.CSS.toolbar),["content","actions"].forEach((t=>{this.nodes[t]=L.make("div",this.CSS[t])})),L.append(this.nodes.wrapper,this.nodes.content),L.append(this.nodes.content,this.nodes.actions),this.nodes.plusButton=L.make("div",this.CSS.plusButton,{innerHTML:'<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M12 7V12M12 17V12M17 12H12M12 12H7"/></svg>'}),L.append(this.nodes.actions,this.nodes.plusButton),this.readOnlyMutableListeners.on(this.nodes.plusButton,"click",(()=>{ut(!0),this.plusButtonClicked()}),!1);const t=L.make("div");t.appendChild(document.createTextNode(D.ui(gt.ui.toolbar.toolbox,"Add"))),t.appendChild(L.make("div",this.CSS.plusButtonShortcut,{textContent:"/"})),pt(this.nodes.plusButton,t,{hidingDelay:400}),this.nodes.settingsToggler=L.make("span",this.CSS.settingsToggler,{innerHTML:'<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><path stroke="currentColor" stroke-linecap="round" stroke-width="2.6" d="M9.40999 7.29999H9.4"/><path stroke="currentColor" stroke-linecap="round" stroke-width="2.6" d="M14.6 7.29999H14.59"/><path stroke="currentColor" stroke-linecap="round" stroke-width="2.6" d="M9.30999 12H9.3"/><path stroke="currentColor" stroke-linecap="round" stroke-width="2.6" d="M14.6 12H14.59"/><path stroke="currentColor" stroke-linecap="round" stroke-width="2.6" d="M9.40999 16.7H9.4"/><path stroke="currentColor" stroke-linecap="round" stroke-width="2.6" d="M14.6 16.7H14.59"/></svg>'}),L.append(this.nodes.actions,this.nodes.settingsToggler);const e=L.make("div"),i=L.text(D.ui(gt.ui.blockTunes.toggler,"Click to tune"));e.appendChild(i),e.appendChild(L.make("div",this.CSS.plusButtonShortcut,{textContent:S("CMD + /")})),pt(this.nodes.settingsToggler,e,{hidingDelay:400}),L.append(this.nodes.actions,this.makeToolbox()),L.append(this.nodes.actions,this.Editor.BlockSettings.getElement()),L.append(this.Editor.UI.nodes.wrapper,this.nodes.wrapper)}makeToolbox(){return this.toolboxInstance=new Ht({api:this.Editor.API.methods,tools:this.Editor.Tools.blockTools,i18nLabels:{filter:D.ui(gt.ui.popover,"Filter"),nothingFound:D.ui(gt.ui.popover,"Nothing found")}}),this.toolboxInstance.on(Ft.Opened,(()=>{this.Editor.UI.nodes.wrapper.classList.add(this.CSS.openedToolboxHolderModifier)})),this.toolboxInstance.on(Ft.Closed,(()=>{this.Editor.UI.nodes.wrapper.classList.remove(this.CSS.openedToolboxHolderModifier)})),this.toolboxInstance.on(Ft.BlockAdded,(({block:t})=>{const{BlockManager:e,Caret:i}=this.Editor,s=e.getBlockById(t.id);0===s.inputs.length&&(s===e.lastBlock?(e.insertAtEnd(),i.setToBlock(e.lastBlock)):i.setToBlock(e.nextBlock))})),this.toolboxInstance.make()}plusButtonClicked(){var t;this.Editor.BlockManager.currentBlock=this.hoveredBlock,null==(t=this.toolboxInstance)||t.toggle()}enableModuleBindings(){this.readOnlyMutableListeners.on(this.nodes.settingsToggler,"mousedown",(t=>{var e;t.stopPropagation(),this.settingsTogglerClicked(),null!=(e=this.toolboxInstance)&&e.opened&&this.toolboxInstance.close(),ut(!0)}),!0),I()||this.eventsDispatcher.on(zt,(t=>{var e;this.Editor.BlockSettings.opened||null!=(e=this.toolboxInstance)&&e.opened||this.moveAndOpen(t.block)}))}disableModuleBindings(){this.readOnlyMutableListeners.clearAll()}settingsTogglerClicked(){this.Editor.BlockManager.currentBlock=this.hoveredBlock,this.Editor.BlockSettings.opened?this.Editor.BlockSettings.close():this.Editor.BlockSettings.open(this.hoveredBlock)}drawUI(){this.Editor.BlockSettings.make(),this.make()}destroy(){this.removeAllNodes(),this.toolboxInstance&&this.toolboxInstance.destroy()}},InlineToolbar:class extends z{constructor({config:t,eventsDispatcher:e}){super({config:t,eventsDispatcher:e}),this.CSS={inlineToolbar:"ce-inline-toolbar",inlineToolbarShowed:"ce-inline-toolbar--showed",inlineToolbarLeftOriented:"ce-inline-toolbar--left-oriented",inlineToolbarRightOriented:"ce-inline-toolbar--right-oriented",inlineToolbarShortcut:"ce-inline-toolbar__shortcut",buttonsWrapper:"ce-inline-toolbar__buttons",actionsWrapper:"ce-inline-toolbar__actions",inlineToolButton:"ce-inline-tool",inputField:"cdx-input",focusedButton:"ce-inline-tool--focused",conversionToggler:"ce-inline-toolbar__dropdown",conversionTogglerArrow:"ce-inline-toolbar__dropdown-arrow",conversionTogglerHidden:"ce-inline-toolbar__dropdown--hidden",conversionTogglerContent:"ce-inline-toolbar__dropdown-content",togglerAndButtonsWrapper:"ce-inline-toolbar__toggler-and-button-wrapper"},this.opened=!1,this.toolbarVerticalMargin=I()?20:6,this.buttonsList=null,this.width=0,this.flipper=null}toggleReadOnly(t){t?(this.destroy(),this.Editor.ConversionToolbar.destroy()):window.requestIdleCallback((()=>{this.make()}),{timeout:2e3})}async tryToShow(t=!1,e=!0){t&&this.close(),this.allowedToShow()&&(await this.addToolsFiltered(e),this.move(),this.open(e),this.Editor.Toolbar.close())}close(){this.opened&&(this.Editor.ReadOnly.isEnabled||(this.nodes.wrapper.classList.remove(this.CSS.inlineToolbarShowed),Array.from(this.toolsInstances.entries()).forEach((([t,e])=>{const i=this.getToolShortcut(t);i&&Pt.remove(this.Editor.UI.nodes.redactor,i),p(e.clear)&&e.clear()})),this.reset(),this.opened=!1,this.flipper.deactivate(),this.Editor.ConversionToolbar.close()))}containsNode(t){return void 0!==this.nodes.wrapper&&this.nodes.wrapper.contains(t)}destroy(){this.flipper&&(this.flipper.deactivate(),this.flipper=null),this.removeAllNodes()}make(){this.nodes.wrapper=L.make("div",[this.CSS.inlineToolbar,...this.isRtl?[this.Editor.UI.CSS.editorRtlFix]:[]]),this.nodes.togglerAndButtonsWrapper=L.make("div",this.CSS.togglerAndButtonsWrapper),this.nodes.buttons=L.make("div",this.CSS.buttonsWrapper),this.nodes.actions=L.make("div",this.CSS.actionsWrapper),this.listeners.on(this.nodes.wrapper,"mousedown",(t=>{t.target.closest(`.${this.CSS.actionsWrapper}`)||t.preventDefault()})),L.append(this.nodes.wrapper,[this.nodes.togglerAndButtonsWrapper,this.nodes.actions]),L.append(this.Editor.UI.nodes.wrapper,this.nodes.wrapper),this.addConversionToggler(),L.append(this.nodes.togglerAndButtonsWrapper,this.nodes.buttons),this.prepareConversionToolbar(),window.requestAnimationFrame((()=>{this.recalculateWidth()})),this.enableFlipper()}open(){if(this.opened)return;this.nodes.wrapper.classList.add(this.CSS.inlineToolbarShowed),this.buttonsList=this.nodes.buttons.querySelectorAll(`.${this.CSS.inlineToolButton}`),this.opened=!0;let t=Array.from(this.buttonsList);t.unshift(this.nodes.conversionToggler),t=t.filter((t=>!t.hidden)),this.flipper.activate(t)}move(){const t=U.rect,e=this.Editor.UI.nodes.wrapper.getBoundingClientRect(),i={x:t.x-e.x,y:t.y+t.height-e.top+this.toolbarVerticalMargin};i.x+this.width+e.x>this.Editor.UI.contentRect.right&&(i.x=this.Editor.UI.contentRect.right-this.width-e.x),this.nodes.wrapper.style.left=Math.floor(i.x)+"px",this.nodes.wrapper.style.top=Math.floor(i.y)+"px"}reset(){this.nodes.wrapper.classList.remove(this.CSS.inlineToolbarLeftOriented,this.CSS.inlineToolbarRightOriented),this.nodes.wrapper.style.left="0",this.nodes.wrapper.style.top="0"}allowedToShow(){const t=U.get(),e=U.text;if(!t||!t.anchorNode||t.isCollapsed||e.length<1)return!1;const i=L.isElement(t.anchorNode)?t.anchorNode:t.anchorNode.parentElement;if(t&&["IMG","INPUT"].includes(i.tagName)||null===i.closest('[contenteditable="true"]'))return!1;const s=this.Editor.BlockManager.getBlock(t.anchorNode);return!!s&&0!==s.tool.inlineTools.size}recalculateWidth(){this.width=this.nodes.wrapper.offsetWidth}addConversionToggler(){this.nodes.conversionToggler=L.make("div",this.CSS.conversionToggler),this.nodes.conversionTogglerContent=L.make("div",this.CSS.conversionTogglerContent);const t=L.make("div",this.CSS.conversionTogglerArrow,{innerHTML:mt});this.nodes.conversionToggler.appendChild(this.nodes.conversionTogglerContent),this.nodes.conversionToggler.appendChild(t),this.nodes.togglerAndButtonsWrapper.appendChild(this.nodes.conversionToggler),this.listeners.on(this.nodes.conversionToggler,"click",(()=>{this.Editor.ConversionToolbar.toggle((t=>{!t&&this.opened?this.flipper.activate():this.opened&&this.flipper.deactivate()}))})),!1===I()&&pt(this.nodes.conversionToggler,D.ui(gt.ui.inlineToolbar.converter,"Convert to"),{placement:"top",hidingDelay:100})}async setConversionTogglerContent(){const{BlockManager:t}=this.Editor,{currentBlock:e}=t,i=e.name,s=e.tool.conversionConfig,n=s&&s.export;this.nodes.conversionToggler.hidden=!n,this.nodes.conversionToggler.classList.toggle(this.CSS.conversionTogglerHidden,!n);const o=await e.getActiveToolboxEntry()||{};this.nodes.conversionTogglerContent.innerHTML=o.icon||o.title||C(i)}prepareConversionToolbar(){const t=this.Editor.ConversionToolbar.make();L.append(this.nodes.wrapper,t)}async addToolsFiltered(t=!0){const e=U.get(),i=this.Editor.BlockManager.getBlock(e.anchorNode);this.nodes.buttons.innerHTML="",this.nodes.actions.innerHTML="",this.toolsInstances=new Map,Array.from(i.tool.inlineTools.values()).forEach((t=>{this.addTool(t)})),t&&this.Editor.ConversionToolbar.hasTools()?await this.setConversionTogglerContent():this.nodes.conversionToggler.hidden=!0,this.recalculateWidth()}addTool(t){const e=t.create(),i=e.render();if(!i)return void d("Render method must return an instance of Node","warn",t.name);if(i.dataset.tool=t.name,this.nodes.buttons.appendChild(i),this.toolsInstances.set(t.name,e),p(e.renderActions)){const t=e.renderActions();this.nodes.actions.appendChild(t)}this.listeners.on(i,"click",(t=>{this.toolClicked(e),t.preventDefault()}));const s=this.getToolShortcut(t.name);if(s)try{this.enableShortcuts(e,s)}catch{}const n=L.make("div"),o=D.t(gt.toolNames,t.title||C(t.name));n.appendChild(L.text(o)),s&&n.appendChild(L.make("div",this.CSS.inlineToolbarShortcut,{textContent:S(s)})),!1===I()&&pt(i,n,{placement:"top",hidingDelay:100}),e.checkState(U.get())}getToolShortcut(t){const{Tools:e}=this.Editor,i=e.inlineTools.get(t),s=e.internal.inlineTools;return Array.from(s.keys()).includes(t)?this.inlineTools[t][$t.Shortcut]:i.shortcut}enableShortcuts(t,e){Pt.add({name:e,handler:e=>{const{currentBlock:i}=this.Editor.BlockManager;i&&i.tool.enabledInlineTools&&(e.preventDefault(),this.toolClicked(t))},on:this.Editor.UI.nodes.redactor})}toolClicked(t){const e=U.range;t.surround(e),this.checkToolsState(),void 0!==t.renderActions&&this.flipper.deactivate()}checkToolsState(){this.toolsInstances.forEach((t=>{t.checkState(U.get())}))}get inlineTools(){const t={};return Array.from(this.Editor.Tools.inlineTools.entries()).forEach((([e,i])=>{t[e]=i.create()})),t}enableFlipper(){this.flipper=new wt({focusedItemClass:this.CSS.focusedButton,allowedKeys:[r,9]})}},BlockEvents:class extends z{keydown(t){switch(this.beforeKeydownProcessing(t),t.keyCode){case 8:this.backspace(t);break;case 46:this.delete(t);break;case r:this.enter(t);break;case l:case 39:this.arrowRightAndDown(t);break;case a:case 37:this.arrowLeftAndUp(t);break;case 9:this.tabPressed(t);break;case 191:t.ctrlKey||t.metaKey?this.commandSlashPressed():this.slashPressed()}}beforeKeydownProcessing(t){this.needToolbarClosing(t)&&y(t.keyCode)&&(this.Editor.Toolbar.close(),this.Editor.ConversionToolbar.close(),t.ctrlKey||t.metaKey||t.altKey||t.shiftKey||this.Editor.BlockSelection.clearSelection(t))}keyup(t){t.shiftKey||this.Editor.UI.checkEmptiness()}dragOver(t){this.Editor.BlockManager.getBlockByChildNode(t.target).dropTarget=!0}dragLeave(t){this.Editor.BlockManager.getBlockByChildNode(t.target).dropTarget=!1}handleCommandC(t){const{BlockSelection:e}=this.Editor;e.anyBlockSelected&&e.copySelectedBlocks(t)}handleCommandX(t){const{BlockSelection:e,BlockManager:i,Caret:s}=this.Editor;e.anyBlockSelected&&e.copySelectedBlocks(t).then((()=>{const n=i.removeSelectedBlocks(),o=i.insertDefaultBlockAtIndex(n,!0);s.setToBlock(o,s.positions.START),e.clearSelection(t)}))}tabPressed(t){const{InlineToolbar:e,ConversionToolbar:i,Caret:s}=this.Editor;i.opened||e.opened||(t.shiftKey?s.navigatePrevious(!0):s.navigateNext(!0))&&t.preventDefault()}commandSlashPressed(){this.Editor.BlockSelection.selectedBlocks.length>1||this.activateBlockSettings()}slashPressed(){this.Editor.BlockManager.currentBlock.isEmpty&&this.activateToolbox()}enter(t){const{BlockManager:e,UI:i}=this.Editor;if(e.currentBlock.tool.isLineBreaksEnabled||i.someToolbarOpened&&i.someFlipperButtonFocused||t.shiftKey)return;let s=this.Editor.BlockManager.currentBlock;this.Editor.Caret.isAtStart&&!this.Editor.BlockManager.currentBlock.hasMedia?this.Editor.BlockManager.insertDefaultBlockAtIndex(this.Editor.BlockManager.currentBlockIndex):s=this.Editor.Caret.isAtEnd?this.Editor.BlockManager.insertDefaultBlockAtIndex(this.Editor.BlockManager.currentBlockIndex+1):this.Editor.BlockManager.split(),this.Editor.Caret.setToBlock(s),this.Editor.Toolbar.moveAndOpen(s),t.preventDefault()}backspace(t){const{BlockManager:e,Caret:i}=this.Editor,{currentBlock:s,previousBlock:n}=e;if(U.isCollapsed&&i.isAtStart)if(t.preventDefault(),this.Editor.Toolbar.close(),s.currentInput===s.firstInput){if(null!==n)if(n.isEmpty)e.removeBlock(n);else if(s.isEmpty){e.removeBlock(s);const t=e.currentBlock;i.setToBlock(t,i.positions.END)}else q(s,n)?this.mergeBlocks(n,s):i.setToBlock(n,i.positions.END)}else i.navigatePrevious()}delete(t){const{BlockManager:e,Caret:i}=this.Editor,{currentBlock:s,nextBlock:n}=e;if(U.isCollapsed&&i.isAtEnd)if(t.preventDefault(),this.Editor.Toolbar.close(),s.currentInput===s.lastInput){if(null!==n){if(!n.isEmpty)return s.isEmpty?(e.removeBlock(s),void i.setToBlock(n,i.positions.START)):void(q(s,n)?this.mergeBlocks(s,n):i.setToBlock(n,i.positions.START));e.removeBlock(n)}}else i.navigateNext()}mergeBlocks(t,e){const{BlockManager:i,Caret:s,Toolbar:n}=this.Editor;s.createShadow(t.pluginsContent),i.mergeBlocks(t,e).then((()=>{window.requestAnimationFrame((()=>{s.restoreCaret(t.pluginsContent),t.pluginsContent.normalize(),n.close()}))}))}arrowRightAndDown(t){const e=wt.usedKeys.includes(t.keyCode)&&(!t.shiftKey||9===t.keyCode);if(this.Editor.UI.someToolbarOpened&&e)return;this.Editor.Toolbar.close();const i=this.Editor.Caret.isAtEnd||this.Editor.BlockSelection.anyBlockSelected;t.shiftKey&&t.keyCode===l&&i?this.Editor.CrossBlockSelection.toggleBlockSelectedState():(t.keyCode===l||39===t.keyCode&&!this.isRtl?this.Editor.Caret.navigateNext():this.Editor.Caret.navigatePrevious())?t.preventDefault():(k((()=>{this.Editor.BlockManager.currentBlock&&this.Editor.BlockManager.currentBlock.updateCurrentInput()}),20)(),this.Editor.BlockSelection.clearSelection(t))}arrowLeftAndUp(t){if(this.Editor.UI.someToolbarOpened){if(wt.usedKeys.includes(t.keyCode)&&(!t.shiftKey||9===t.keyCode))return;this.Editor.UI.closeAllToolbars()}this.Editor.Toolbar.close();const e=this.Editor.Caret.isAtStart||this.Editor.BlockSelection.anyBlockSelected;t.shiftKey&&t.keyCode===a&&e?this.Editor.CrossBlockSelection.toggleBlockSelectedState(!1):(t.keyCode===a||37===t.keyCode&&!this.isRtl?this.Editor.Caret.navigatePrevious():this.Editor.Caret.navigateNext())?t.preventDefault():(k((()=>{this.Editor.BlockManager.currentBlock&&this.Editor.BlockManager.currentBlock.updateCurrentInput()}),20)(),this.Editor.BlockSelection.clearSelection(t))}needToolbarClosing(t){const e=t.keyCode===r&&this.Editor.Toolbar.toolbox.opened,i=t.keyCode===r&&this.Editor.BlockSettings.opened,s=t.keyCode===r&&this.Editor.InlineToolbar.opened,n=t.keyCode===r&&this.Editor.ConversionToolbar.opened,o=9===t.keyCode;return!(t.shiftKey||o||e||i||s||n)}activateToolbox(){this.Editor.Toolbar.opened||this.Editor.Toolbar.moveAndOpen(),this.Editor.Toolbar.toolbox.open()}activateBlockSettings(){this.Editor.Toolbar.opened||this.Editor.Toolbar.moveAndOpen(),this.Editor.BlockSettings.opened||this.Editor.BlockSettings.open()}},BlockManager:class extends z{constructor(){super(...arguments),this._currentBlockIndex=-1,this._blocks=null}get currentBlockIndex(){return this._currentBlockIndex}set currentBlockIndex(t){this._currentBlockIndex=t}get firstBlock(){return this._blocks[0]}get lastBlock(){return this._blocks[this._blocks.length-1]}get currentBlock(){return this._blocks[this.currentBlockIndex]}set currentBlock(t){this.currentBlockIndex=this.getBlockIndex(t)}get nextBlock(){return this.currentBlockIndex===this._blocks.length-1?null:this._blocks[this.currentBlockIndex+1]}get nextContentfulBlock(){return this.blocks.slice(this.currentBlockIndex+1).find((t=>!!t.inputs.length))}get previousContentfulBlock(){return this.blocks.slice(0,this.currentBlockIndex).reverse().find((t=>!!t.inputs.length))}get previousBlock(){return 0===this.currentBlockIndex?null:this._blocks[this.currentBlockIndex-1]}get blocks(){return this._blocks.array}get isEditorEmpty(){return this.blocks.every((t=>t.isEmpty))}prepare(){const t=new Kt(this.Editor.UI.nodes.redactor);this._blocks=new Proxy(t,{set:Kt.set,get:Kt.get}),this.listeners.on(document,"copy",(t=>this.Editor.BlockEvents.handleCommandC(t)))}toggleReadOnly(t){t?this.disableModuleBindings():this.enableModuleBindings()}composeBlock({tool:t,data:e={},id:i,tunes:s={}}){const n=this.Editor.ReadOnly.isEnabled,o=this.Editor.Tools.blockTools.get(t),r=new K({id:i,data:e,tool:o,api:this.Editor.API,readOnly:n,tunesData:s},this.eventsDispatcher);return n||window.requestIdleCallback((()=>{this.bindBlockEvents(r)}),{timeout:2e3}),r}insert({id:t,tool:e=this.config.defaultBlock,data:i={},index:s,needToFocus:n=!0,replace:o=!1,tunes:r={}}={}){let a=s;void 0===a&&(a=this.currentBlockIndex+(o?0:1));const l=this.composeBlock({id:t,tool:e,data:i,tunes:r});return o&&this.blockDidMutated(Xt,this.getBlockByIndex(a),{index:a}),this._blocks.insert(a,l,o),this.blockDidMutated(Yt,l,{index:a}),n?this.currentBlockIndex=a:a<=this.currentBlockIndex&&this.currentBlockIndex++,l}insertMany(t,e=0){this._blocks.insertMany(t,e)}async update(t,e){const i=await t.data,s=this.composeBlock({id:t.id,tool:t.name,data:Object.assign({},i,e),tunes:t.tunes}),n=this.getBlockIndex(t);return this._blocks.replace(n,s),this.blockDidMutated(Jt,s,{index:n}),s}replace(t,e,i){const s=this.getBlockIndex(t);this.insert({tool:e,data:i,index:s,replace:!0})}paste(t,e,i=!1){const s=this.insert({tool:t,replace:i});try{window.requestIdleCallback((()=>{s.call(G.ON_PASTE,e)}))}catch(e){d(`${t}: onPaste callback call is failed`,"error",e)}return s}insertDefaultBlockAtIndex(t,e=!1){const i=this.composeBlock({tool:this.config.defaultBlock});return this._blocks[t]=i,this.blockDidMutated(Yt,i,{index:t}),e?this.currentBlockIndex=t:t<=this.currentBlockIndex&&this.currentBlockIndex++,i}insertAtEnd(){return this.currentBlockIndex=this.blocks.length-1,this.insert()}async mergeBlocks(t,e){const i=await e.data;v(i)||await t.mergeWith(i),this.removeBlock(e),this.currentBlockIndex=this._blocks.indexOf(t)}removeBlock(t,e=!0){return new Promise((i=>{const s=this._blocks.indexOf(t);if(!this.validateIndex(s))throw new Error("Can't find a Block to remove");t.destroy(),this._blocks.remove(s),this.blockDidMutated(Xt,t,{index:s}),this.currentBlockIndex>=s&&this.currentBlockIndex--,this.blocks.length?0===s&&(this.currentBlockIndex=0):(this.currentBlockIndex=-1,e&&this.insert()),i()}))}removeSelectedBlocks(){let t;for(let e=this.blocks.length-1;e>=0;e--)this.blocks[e].selected&&(this.removeBlock(this.blocks[e]),t=e);return t}removeAllBlocks(){for(let t=this.blocks.length-1;t>=0;t--)this._blocks.remove(t);this.currentBlockIndex=-1,this.insert(),this.currentBlock.firstInput.focus()}split(){const t=this.Editor.Caret.extractFragmentFromCaretPosition(),e=L.make("div");e.appendChild(t);const i={text:L.isEmpty(e)?"":e.innerHTML};return this.insert({data:i})}getBlockByIndex(t){return-1===t&&(t=this._blocks.length-1),this._blocks[t]}getBlockIndex(t){return this._blocks.indexOf(t)}getBlockById(t){return this._blocks.array.find((e=>e.id===t))}getBlock(t){L.isElement(t)||(t=t.parentNode);const e=this._blocks.nodes,i=t.closest(`.${K.CSS.wrapper}`),s=e.indexOf(i);if(s>=0)return this._blocks[s]}setCurrentBlockByChildNode(t){L.isElement(t)||(t=t.parentNode);const e=t.closest(`.${K.CSS.wrapper}`);if(!e)return;const i=e.closest(`.${this.Editor.UI.CSS.editorWrapper}`);return null!=i&&i.isEqualNode(this.Editor.UI.nodes.wrapper)?(this.currentBlockIndex=this._blocks.nodes.indexOf(e),this.currentBlock.updateCurrentInput(),this.currentBlock):void 0}getBlockByChildNode(t){if(!(t&&t instanceof Node))return;L.isElement(t)||(t=t.parentNode);const e=t.closest(`.${K.CSS.wrapper}`);return this.blocks.find((t=>t.holder===e))}swap(t,e){this._blocks.swap(t,e),this.currentBlockIndex=e}move(t,e=this.currentBlockIndex){isNaN(t)||isNaN(e)?d("Warning during 'move' call: incorrect indices provided.","warn"):this.validateIndex(t)&&this.validateIndex(e)?(this._blocks.move(t,e),this.currentBlockIndex=t,this.blockDidMutated("block-moved",this.currentBlock,{fromIndex:e,toIndex:t})):d("Warning during 'move' call: indices cannot be lower than 0 or greater than the amount of blocks.","warn")}async convert(t,e,i){if(!await t.save())throw new Error("Could not convert Block. Failed to extract original Block data.");const s=this.Editor.Tools.blockTools.get(e);if(!s)throw new Error(`Could not convert Block. Tool «${e}» not found.`);let n=function(t,e){const i=null==e?void 0:e.import;return p(i)?i(t):m(i)?{[i]:t}:(void 0!==i&&d("Conversion «import» property must be a string or function. String means key of tool data to import. Function accepts a imported string and return composed tool data."),{})}(nt(await t.exportDataAsString(),s.sanitizeConfig),s.conversionConfig);i&&(n=Object.assign(n,i)),this.replace(t,s.name,n)}dropPointer(){this.currentBlockIndex=-1}async clear(t=!1){const e=new Qt;this.blocks.forEach((t=>{e.add((async()=>{await this.removeBlock(t,!1)}))})),await e.completed,this.dropPointer(),t&&this.insert(),this.Editor.UI.checkEmptiness()}async destroy(){await Promise.all(this.blocks.map((t=>t.destroy())))}bindBlockEvents(t){const{BlockEvents:e}=this.Editor;this.readOnlyMutableListeners.on(t.holder,"keydown",(t=>{e.keydown(t)})),this.readOnlyMutableListeners.on(t.holder,"keyup",(t=>{e.keyup(t)})),this.readOnlyMutableListeners.on(t.holder,"dragover",(t=>{e.dragOver(t)})),this.readOnlyMutableListeners.on(t.holder,"dragleave",(t=>{e.dragLeave(t)})),t.on("didMutated",(t=>this.blockDidMutated(Jt,t,{index:this.getBlockIndex(t)})))}disableModuleBindings(){this.readOnlyMutableListeners.clearAll()}enableModuleBindings(){this.readOnlyMutableListeners.on(document,"cut",(t=>this.Editor.BlockEvents.handleCommandX(t))),this.blocks.forEach((t=>{this.bindBlockEvents(t)}))}validateIndex(t){return!(t<0||t>=this._blocks.length)}blockDidMutated(t,e,i){const s=new CustomEvent(t,{detail:{target:new N(e),...i}});return this.eventsDispatcher.emit($,{event:s}),e}},BlockSelection:class extends z{constructor(){super(...arguments),this.anyBlockSelectedCache=null,this.needToSelectAll=!1,this.nativeInputSelected=!1,this.readyToBlockSelection=!1}get sanitizerConfig(){return{p:{},h1:{},h2:{},h3:{},h4:{},h5:{},h6:{},ol:{},ul:{},li:{},br:!0,img:{src:!0,width:!0,height:!0},a:{href:!0},b:{},i:{},u:{}}}get allBlocksSelected(){const{BlockManager:t}=this.Editor;return t.blocks.every((t=>!0===t.selected))}set allBlocksSelected(t){const{BlockManager:e}=this.Editor;e.blocks.forEach((e=>{e.selected=t})),this.clearCache()}get anyBlockSelected(){const{BlockManager:t}=this.Editor;return null===this.anyBlockSelectedCache&&(this.anyBlockSelectedCache=t.blocks.some((t=>!0===t.selected))),this.anyBlockSelectedCache}get selectedBlocks(){return this.Editor.BlockManager.blocks.filter((t=>t.selected))}prepare(){this.selection=new U,Pt.add({name:"CMD+A",handler:t=>{const{BlockManager:e,ReadOnly:i}=this.Editor;if(i.isEnabled)return t.preventDefault(),void this.selectAllBlocks();e.currentBlock&&this.handleCommandA(t)},on:this.Editor.UI.nodes.redactor})}toggleReadOnly(){U.get().removeAllRanges(),this.allBlocksSelected=!1}unSelectBlockByIndex(t){const{BlockManager:e}=this.Editor;let i;i=isNaN(t)?e.currentBlock:e.getBlockByIndex(t),i.selected=!1,this.clearCache()}clearSelection(t,e=!1){const{BlockManager:i,Caret:s,RectangleSelection:n}=this.Editor;this.needToSelectAll=!1,this.nativeInputSelected=!1,this.readyToBlockSelection=!1;const o=t&&t instanceof KeyboardEvent,r=o&&y(t.keyCode);if(this.anyBlockSelected&&o&&r&&!U.isSelectionExists){const e=i.removeSelectedBlocks();i.insertDefaultBlockAtIndex(e,!0),s.setToBlock(i.currentBlock),k((()=>{const e=t.key;s.insertContentAtCaretPosition(e.length>1?"":e)}),20)()}this.Editor.CrossBlockSelection.clear(t),this.anyBlockSelected&&!n.isRectActivated()?(e&&this.selection.restore(),this.allBlocksSelected=!1):this.Editor.RectangleSelection.clearSelection()}copySelectedBlocks(t){t.preventDefault();const e=L.make("div");this.selectedBlocks.forEach((t=>{const i=nt(t.holder.innerHTML,this.sanitizerConfig),s=L.make("p");s.innerHTML=i,e.appendChild(s)}));const i=Array.from(e.childNodes).map((t=>t.textContent)).join("\n\n"),s=e.innerHTML;return t.clipboardData.setData("text/plain",i),t.clipboardData.setData("text/html",s),Promise.all(this.selectedBlocks.map((t=>t.save()))).then((e=>{try{t.clipboardData.setData(this.Editor.Paste.MIME_TYPE,JSON.stringify(e))}catch{}}))}selectBlockByIndex(t){const{BlockManager:e}=this.Editor,i=e.getBlockByIndex(t);void 0!==i&&this.selectBlock(i)}selectBlock(t){this.selection.save(),U.get().removeAllRanges(),t.selected=!0,this.clearCache(),this.Editor.InlineToolbar.close()}unselectBlock(t){t.selected=!1,this.clearCache()}clearCache(){this.anyBlockSelectedCache=null}destroy(){Pt.remove(this.Editor.UI.nodes.redactor,"CMD+A")}handleCommandA(t){if(this.Editor.RectangleSelection.clearSelection(),L.isNativeInput(t.target)&&!this.readyToBlockSelection)return void(this.readyToBlockSelection=!0);const e=this.Editor.BlockManager.getBlock(t.target),i=e.inputs;i.length>1&&!this.readyToBlockSelection?this.readyToBlockSelection=!0:1!==i.length||this.needToSelectAll?this.needToSelectAll?(t.preventDefault(),this.selectAllBlocks(),this.needToSelectAll=!1,this.readyToBlockSelection=!1,this.Editor.ConversionToolbar.close()):this.readyToBlockSelection&&(t.preventDefault(),this.selectBlock(e),this.needToSelectAll=!0):this.needToSelectAll=!0}selectAllBlocks(){this.selection.save(),U.get().removeAllRanges(),this.allBlocksSelected=!0,this.Editor.InlineToolbar.close()}},Caret:Zt,CrossBlockSelection:class extends z{constructor(){super(...arguments),this.onMouseUp=()=>{this.listeners.off(document,"mouseover",this.onMouseOver),this.listeners.off(document,"mouseup",this.onMouseUp)},this.onMouseOver=t=>{const{BlockManager:e,BlockSelection:i}=this.Editor;if(null===t.relatedTarget&&null===t.target)return;const s=e.getBlockByChildNode(t.relatedTarget)||this.lastSelectedBlock,n=e.getBlockByChildNode(t.target);if(s&&n&&n!==s){if(s===this.firstSelectedBlock)return U.get().removeAllRanges(),s.selected=!0,n.selected=!0,void i.clearCache();if(n===this.firstSelectedBlock)return s.selected=!1,n.selected=!1,void i.clearCache();this.Editor.InlineToolbar.close(),this.toggleBlocksSelectedState(s,n),this.lastSelectedBlock=n}}}async prepare(){this.listeners.on(document,"mousedown",(t=>{this.enableCrossBlockSelection(t)}))}watchSelection(t){if(0!==t.button)return;const{BlockManager:e}=this.Editor;this.firstSelectedBlock=e.getBlock(t.target),this.lastSelectedBlock=this.firstSelectedBlock,this.listeners.on(document,"mouseover",this.onMouseOver),this.listeners.on(document,"mouseup",this.onMouseUp)}get isCrossBlockSelectionStarted(){return!!this.firstSelectedBlock&&!!this.lastSelectedBlock}toggleBlockSelectedState(t=!0){const{BlockManager:e,BlockSelection:i}=this.Editor;this.lastSelectedBlock||(this.lastSelectedBlock=this.firstSelectedBlock=e.currentBlock),this.firstSelectedBlock===this.lastSelectedBlock&&(this.firstSelectedBlock.selected=!0,i.clearCache(),U.get().removeAllRanges());const s=e.blocks.indexOf(this.lastSelectedBlock)+(t?1:-1),n=e.blocks[s];n&&(this.lastSelectedBlock.selected!==n.selected?(n.selected=!0,i.clearCache()):(this.lastSelectedBlock.selected=!1,i.clearCache()),this.lastSelectedBlock=n,this.Editor.InlineToolbar.close(),n.holder.scrollIntoView({block:"nearest"}))}clear(t){const{BlockManager:e,BlockSelection:i,Caret:s}=this.Editor,n=e.blocks.indexOf(this.firstSelectedBlock),o=e.blocks.indexOf(this.lastSelectedBlock);if(i.anyBlockSelected&&n>-1&&o>-1&&t&&t instanceof KeyboardEvent)switch(t.keyCode){case l:case 39:s.setToBlock(e.blocks[Math.max(n,o)],s.positions.END);break;case a:case 37:s.setToBlock(e.blocks[Math.min(n,o)],s.positions.START);break;default:s.setToBlock(e.blocks[Math.max(n,o)],s.positions.END)}this.firstSelectedBlock=this.lastSelectedBlock=null}enableCrossBlockSelection(t){const{UI:e}=this.Editor;U.isCollapsed||this.Editor.BlockSelection.clearSelection(t),e.nodes.redactor.contains(t.target)?this.watchSelection(t):this.Editor.BlockSelection.clearSelection(t)}toggleBlocksSelectedState(t,e){const{BlockManager:i,BlockSelection:s}=this.Editor,n=i.blocks.indexOf(t),o=i.blocks.indexOf(e),r=t.selected!==e.selected;for(let a=Math.min(n,o);a<=Math.max(n,o);a++){const n=i.blocks[a];n!==this.firstSelectedBlock&&n!==(r?t:e)&&(i.blocks[a].selected=!i.blocks[a].selected,s.clearCache())}}},DragNDrop:class extends z{constructor(){super(...arguments),this.isStartedAtEditor=!1}toggleReadOnly(t){t?this.disableModuleBindings():this.enableModuleBindings()}enableModuleBindings(){const{UI:t}=this.Editor;this.readOnlyMutableListeners.on(t.nodes.holder,"drop",(async t=>{await this.processDrop(t)}),!0),this.readOnlyMutableListeners.on(t.nodes.holder,"dragstart",(()=>{this.processDragStart()})),this.readOnlyMutableListeners.on(t.nodes.holder,"dragover",(t=>{this.processDragOver(t)}),!0)}disableModuleBindings(){this.readOnlyMutableListeners.clearAll()}async processDrop(t){const{BlockManager:e,Caret:i,Paste:s}=this.Editor;t.preventDefault(),e.blocks.forEach((t=>{t.dropTarget=!1})),U.isAtEditor&&!U.isCollapsed&&this.isStartedAtEditor&&document.execCommand("delete"),this.isStartedAtEditor=!1;const n=e.setCurrentBlockByChildNode(t.target);if(n)this.Editor.Caret.setToBlock(n,i.positions.END);else{const t=e.setCurrentBlockByChildNode(e.lastBlock.holder);this.Editor.Caret.setToBlock(t,i.positions.END)}await s.processDataTransfer(t.dataTransfer,!0)}processDragStart(){U.isAtEditor&&!U.isCollapsed&&(this.isStartedAtEditor=!0),this.Editor.InlineToolbar.close()}processDragOver(t){t.preventDefault()}},ModificationsObserver:class extends z{constructor({config:t,eventsDispatcher:e}){super({config:t,eventsDispatcher:e}),this.disabled=!1,this.batchingTimeout=null,this.batchingOnChangeQueue=new Map,this.batchTime=400,this.mutationObserver=new MutationObserver((t=>{this.redactorChanged(t)})),this.eventsDispatcher.on($,(t=>{this.particularBlockChanged(t.event)})),this.eventsDispatcher.on(W,(()=>{this.disable()})),this.eventsDispatcher.on(V,(()=>{this.enable()}))}enable(){this.mutationObserver.observe(this.Editor.UI.nodes.redactor,{childList:!0,subtree:!0,characterData:!0,attributes:!0}),this.disabled=!1}disable(){this.mutationObserver.disconnect(),this.disabled=!0}particularBlockChanged(t){this.disabled||!p(this.config.onChange)||(this.batchingOnChangeQueue.set(`block:${t.detail.target.id}:event:${t.type}`,t),this.batchingTimeout&&clearTimeout(this.batchingTimeout),this.batchingTimeout=setTimeout((()=>{let t;t=1===this.batchingOnChangeQueue.size?this.batchingOnChangeQueue.values().next().value:Array.from(this.batchingOnChangeQueue.values()),this.config.onChange&&this.config.onChange(this.Editor.API.methods,t),this.batchingOnChangeQueue.clear()}),this.batchTime))}redactorChanged(t){this.eventsDispatcher.emit(j,{mutations:t})}},Paste:ee,ReadOnly:class extends z{constructor(){super(...arguments),this.toolsDontSupportReadOnly=[],this.readOnlyEnabled=!1}get isEnabled(){return this.readOnlyEnabled}async prepare(){const{Tools:t}=this.Editor,{blockTools:e}=t,i=[];Array.from(e.entries()).forEach((([t,e])=>{e.isReadOnlySupported||i.push(t)})),this.toolsDontSupportReadOnly=i,this.config.readOnly&&i.length>0&&this.throwCriticalError(),this.toggle(this.config.readOnly)}async toggle(t=!this.readOnlyEnabled){t&&this.toolsDontSupportReadOnly.length>0&&this.throwCriticalError();const e=this.readOnlyEnabled;this.readOnlyEnabled=t;for(const e in this.Editor)this.Editor[e].toggleReadOnly&&this.Editor[e].toggleReadOnly(t);if(e===t)return this.readOnlyEnabled;const i=await this.Editor.Saver.save();return await this.Editor.BlockManager.clear(),await this.Editor.Renderer.render(i.blocks),this.readOnlyEnabled}throwCriticalError(){throw new O(`To enable read-only mode all connected tools should support it. Tools ${this.toolsDontSupportReadOnly.join(", ")} don't support read-only mode.`)}},RectangleSelection:ie,Renderer:class extends z{async render(t){return new Promise((e=>{const{Tools:i,BlockManager:s}=this.Editor;if(0===t.length)s.insert();else{const e=t.map((({type:t,data:e,tunes:n,id:o})=>{let r;!1===i.available.has(t)&&(h(`Tool «${t}» is not found. Check 'tools' property at the Editor.js config.`,"warn"),e=this.composeStubDataForTool(t,e,o),t=i.stubTool);try{r=s.composeBlock({id:o,tool:t,data:e,tunes:n})}catch(a){d(`Block «${t}» skipped because of plugins error`,"error",{data:e,error:a}),e=this.composeStubDataForTool(t,e,o),t=i.stubTool,r=s.composeBlock({id:o,tool:t,data:e,tunes:n})}return r}));s.insertMany(e)}window.requestIdleCallback((()=>{e()}),{timeout:2e3})}))}composeStubDataForTool(t,e,i){const{Tools:s}=this.Editor;let n=t;if(s.unavailable.has(t)){const e=s.unavailable.get(t).toolbox;void 0!==e&&void 0!==e[0].title&&(n=e[0].title)}return{savedData:{id:i,type:t,data:e},title:n}}},Saver:class extends z{async save(){const{BlockManager:t,Tools:e}=this.Editor,i=t.blocks,s=[];try{i.forEach((t=>{s.push(this.getSavedData(t))}));const t=await Promise.all(s),n=await st(t,(t=>e.blockTools.get(t).sanitizeConfig));return this.makeOutput(n)}catch(t){h("Saving failed due to the Error %o","error",t)}}async getSavedData(t){const e=await t.save(),i=e&&await t.validate(e.data);return{...e,isValid:i}}makeOutput(t){const e=[];return t.forEach((({id:t,tool:i,data:s,tunes:n,isValid:o})=>{if(!o)return void d(`Block «${i}» skipped because saved data is invalid`);if(i===this.Editor.Tools.stubTool)return void e.push(s);const r={id:t,type:i,data:s,...!v(n)&&{tunes:n}};e.push(r)})),{time:+new Date,blocks:e,version:"2.29.0"}}},Tools:ke,UI:class extends z{constructor(){super(...arguments),this.isMobile=!1,this.contentRectCache=void 0,this.resizeDebouncer=x((()=>{this.windowResize()}),200)}get CSS(){return{editorWrapper:"codex-editor",editorWrapperNarrow:"codex-editor--narrow",editorZone:"codex-editor__redactor",editorZoneHidden:"codex-editor__redactor--hidden",editorEmpty:"codex-editor--empty",editorRtlFix:"codex-editor--rtl"}}get contentRect(){if(this.contentRectCache)return this.contentRectCache;const t=this.nodes.wrapper.querySelector(`.${K.CSS.content}`);return t?(this.contentRectCache=t.getBoundingClientRect(),this.contentRectCache):{width:650,left:0,right:0}}async prepare(){this.checkIsMobile(),this.make(),this.loadStyles()}toggleReadOnly(t){t?this.disableModuleBindings():window.requestIdleCallback((()=>{this.enableModuleBindings()}),{timeout:2e3})}checkEmptiness(){const{BlockManager:t}=this.Editor;this.nodes.wrapper.classList.toggle(this.CSS.editorEmpty,t.isEditorEmpty)}get someToolbarOpened(){const{Toolbar:t,BlockSettings:e,InlineToolbar:i,ConversionToolbar:s}=this.Editor;return e.opened||i.opened||s.opened||t.toolbox.opened}get someFlipperButtonFocused(){return!!this.Editor.Toolbar.toolbox.hasFocus()||Object.entries(this.Editor).filter((([t,e])=>e.flipper instanceof wt)).some((([t,e])=>e.flipper.hasFocus()))}destroy(){this.nodes.holder.innerHTML=""}closeAllToolbars(){const{Toolbar:t,BlockSettings:e,InlineToolbar:i,ConversionToolbar:s}=this.Editor;e.close(),i.close(),s.close(),t.toolbox.close()}checkIsMobile(){this.isMobile=window.innerWidth<650}make(){this.nodes.holder=L.getHolder(this.config.holder),this.nodes.wrapper=L.make("div",[this.CSS.editorWrapper,...this.isRtl?[this.CSS.editorRtlFix]:[]]),this.nodes.redactor=L.make("div",this.CSS.editorZone),this.nodes.holder.offsetWidth<this.contentRect.width&&this.nodes.wrapper.classList.add(this.CSS.editorWrapperNarrow),this.nodes.redactor.style.paddingBottom=this.config.minHeight+"px",this.nodes.wrapper.appendChild(this.nodes.redactor),this.nodes.holder.appendChild(this.nodes.wrapper)}loadStyles(){const t="editor-js-styles";if(L.get(t))return;const e=L.make("style",null,{id:t,textContent:':root{--selectionColor: #e1f2ff;--inlineSelectionColor: #d4ecff;--bg-light: #eff2f5;--grayText: #707684;--color-dark: #1D202B;--color-active-icon: #388AE5;--color-gray-border: rgba(201, 201, 204, .48);--content-width: 650px;--narrow-mode-right-padding: 50px;--toolbox-buttons-size: 26px;--toolbox-buttons-size--mobile: 36px;--icon-size: 20px;--icon-size--mobile: 28px;--block-padding-vertical: .4em;--color-line-gray: #EFF0F1 }.codex-editor{position:relative;-webkit-box-sizing:border-box;box-sizing:border-box;z-index:1}.codex-editor .hide{display:none}.codex-editor__redactor [contenteditable]:empty:after{content:"\\feff"}@media (min-width: 651px){.codex-editor--narrow .codex-editor__redactor{margin-right:50px}}@media (min-width: 651px){.codex-editor--narrow.codex-editor--rtl .codex-editor__redactor{margin-left:50px;margin-right:0}}@media (min-width: 651px){.codex-editor--narrow .ce-toolbar__actions{right:-5px}}.codex-editor-copyable{position:absolute;height:1px;width:1px;top:-400%;opacity:.001}.codex-editor-overlay{position:fixed;top:0px;left:0px;right:0px;bottom:0px;z-index:999;pointer-events:none;overflow:hidden}.codex-editor-overlay__container{position:relative;pointer-events:auto;z-index:0}.codex-editor-overlay__rectangle{position:absolute;pointer-events:none;background-color:#2eaadc33;border:1px solid transparent}.codex-editor svg{max-height:100%}.codex-editor path{stroke:currentColor}.codex-editor ::-moz-selection{background-color:#d4ecff}.codex-editor ::selection{background-color:#d4ecff}.codex-editor--toolbox-opened [contentEditable=true][data-placeholder]:focus:before{opacity:0!important}.ce-scroll-locked{overflow:hidden}.ce-scroll-locked--hard{overflow:hidden;top:calc(-1 * var(--window-scroll-offset));position:fixed;width:100%}.ce-toolbar{position:absolute;left:0;right:0;top:0;-webkit-transition:opacity .1s ease;transition:opacity .1s ease;will-change:opacity,top;display:none}.ce-toolbar--opened{display:block}.ce-toolbar__content{max-width:650px;margin:0 auto;position:relative}.ce-toolbar__plus{color:#1d202b;cursor:pointer;width:26px;height:26px;border-radius:7px;display:-webkit-inline-box;display:-ms-inline-flexbox;display:inline-flex;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-ms-flex-negative:0;flex-shrink:0}@media (max-width: 650px){.ce-toolbar__plus{width:36px;height:36px}}@media (hover: hover){.ce-toolbar__plus:hover{background-color:#eff2f5}}.ce-toolbar__plus--active{background-color:#eff2f5;-webkit-animation:bounceIn .75s 1;animation:bounceIn .75s 1;-webkit-animation-fill-mode:forwards;animation-fill-mode:forwards}.ce-toolbar__plus-shortcut{opacity:.6;word-spacing:-2px;margin-top:5px}@media (max-width: 650px){.ce-toolbar__plus{position:absolute;background-color:#fff;border:1px solid #E8E8EB;-webkit-box-shadow:0 3px 15px -3px rgba(13,20,33,.13);box-shadow:0 3px 15px -3px #0d142121;border-radius:6px;z-index:2;position:static}.ce-toolbar__plus--left-oriented:before{left:15px;margin-left:0}.ce-toolbar__plus--right-oriented:before{left:auto;right:15px;margin-left:0}}.ce-toolbar__actions{position:absolute;right:100%;opacity:0;display:-webkit-box;display:-ms-flexbox;display:flex;padding-right:5px}.ce-toolbar__actions--opened{opacity:1}@media (max-width: 650px){.ce-toolbar__actions{right:auto}}.ce-toolbar__settings-btn{color:#1d202b;width:26px;height:26px;border-radius:7px;display:-webkit-inline-box;display:-ms-inline-flexbox;display:inline-flex;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;margin-left:3px;cursor:pointer;user-select:none}@media (max-width: 650px){.ce-toolbar__settings-btn{width:36px;height:36px}}@media (hover: hover){.ce-toolbar__settings-btn:hover{background-color:#eff2f5}}.ce-toolbar__settings-btn--active{background-color:#eff2f5;-webkit-animation:bounceIn .75s 1;animation:bounceIn .75s 1;-webkit-animation-fill-mode:forwards;animation-fill-mode:forwards}@media (min-width: 651px){.ce-toolbar__settings-btn{width:24px}}.ce-toolbar__settings-btn--hidden{display:none}@media (max-width: 650px){.ce-toolbar__settings-btn{position:absolute;background-color:#fff;border:1px solid #E8E8EB;-webkit-box-shadow:0 3px 15px -3px rgba(13,20,33,.13);box-shadow:0 3px 15px -3px #0d142121;border-radius:6px;z-index:2;position:static}.ce-toolbar__settings-btn--left-oriented:before{left:15px;margin-left:0}.ce-toolbar__settings-btn--right-oriented:before{left:auto;right:15px;margin-left:0}}.ce-toolbar__plus svg,.ce-toolbar__settings-btn svg{width:24px;height:24px}@media (min-width: 651px){.codex-editor--narrow .ce-toolbar__plus{left:5px}}@media (min-width: 651px){.codex-editor--narrow .ce-toolbox .ce-popover{right:0;left:auto;left:initial}}.ce-inline-toolbar{--y-offset: 8px;position:absolute;background-color:#fff;border:1px solid #E8E8EB;-webkit-box-shadow:0 3px 15px -3px rgba(13,20,33,.13);box-shadow:0 3px 15px -3px #0d142121;border-radius:6px;z-index:2;opacity:0;visibility:hidden;-webkit-transition:opacity .25s ease;transition:opacity .25s ease;will-change:opacity,left,top;top:0;left:0;z-index:3}.ce-inline-toolbar--left-oriented:before{left:15px;margin-left:0}.ce-inline-toolbar--right-oriented:before{left:auto;right:15px;margin-left:0}.ce-inline-toolbar--showed{opacity:1;visibility:visible}.ce-inline-toolbar [hidden]{display:none!important}.ce-inline-toolbar__toggler-and-button-wrapper{display:-webkit-box;display:-ms-flexbox;display:flex;width:100%;padding:0 6px}.ce-inline-toolbar__buttons{display:-webkit-box;display:-ms-flexbox;display:flex}.ce-inline-toolbar__dropdown{display:-webkit-box;display:-ms-flexbox;display:flex;padding:6px;margin:0 6px 0 -6px;-webkit-box-align:center;-ms-flex-align:center;align-items:center;cursor:pointer;border-right:1px solid rgba(201,201,204,.48);-webkit-box-sizing:border-box;box-sizing:border-box}@media (hover: hover){.ce-inline-toolbar__dropdown:hover{background:#eff2f5}}.ce-inline-toolbar__dropdown--hidden{display:none}.ce-inline-toolbar__dropdown-content,.ce-inline-toolbar__dropdown-arrow{display:-webkit-box;display:-ms-flexbox;display:flex}.ce-inline-toolbar__dropdown-content svg,.ce-inline-toolbar__dropdown-arrow svg{width:20px;height:20px}.ce-inline-toolbar__shortcut{opacity:.6;word-spacing:-3px;margin-top:3px}.ce-inline-tool{display:-webkit-inline-box;display:-ms-inline-flexbox;display:inline-flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;padding:6px 1px;cursor:pointer;border:0;outline:none;background-color:transparent;vertical-align:bottom;color:inherit;margin:0;border-radius:0;line-height:normal}.ce-inline-tool svg{width:20px;height:20px}@media (max-width: 650px){.ce-inline-tool svg{width:28px;height:28px}}@media (hover: hover){.ce-inline-tool:hover{background-color:#eff2f5}}.ce-inline-tool--active{color:#388ae5}.ce-inline-tool--focused{background:rgba(34,186,255,.08)!important}.ce-inline-tool--focused{-webkit-box-shadow:inset 0 0 0px 1px rgba(7,161,227,.08);box-shadow:inset 0 0 0 1px #07a1e314}.ce-inline-tool--focused-animated{-webkit-animation-name:buttonClicked;animation-name:buttonClicked;-webkit-animation-duration:.25s;animation-duration:.25s}.ce-inline-tool--link .icon--unlink,.ce-inline-tool--unlink .icon--link{display:none}.ce-inline-tool--unlink .icon--unlink{display:inline-block;margin-bottom:-1px}.ce-inline-tool-input{outline:none;border:0;border-radius:0 0 4px 4px;margin:0;font-size:13px;padding:10px;width:100%;-webkit-box-sizing:border-box;box-sizing:border-box;display:none;font-weight:500;border-top:1px solid rgba(201,201,204,.48);-webkit-appearance:none;font-family:inherit}@media (max-width: 650px){.ce-inline-tool-input{font-size:15px;font-weight:500}}.ce-inline-tool-input::-webkit-input-placeholder{color:#707684}.ce-inline-tool-input::-moz-placeholder{color:#707684}.ce-inline-tool-input:-ms-input-placeholder{color:#707684}.ce-inline-tool-input::-ms-input-placeholder{color:#707684}.ce-inline-tool-input::placeholder{color:#707684}.ce-inline-tool-input--showed{display:block}.ce-conversion-toolbar{position:absolute;background-color:#fff;border:1px solid #E8E8EB;-webkit-box-shadow:0 3px 15px -3px rgba(13,20,33,.13);box-shadow:0 3px 15px -3px #0d142121;border-radius:6px;z-index:2;opacity:0;visibility:hidden;will-change:transform,opacity;-webkit-transition:opacity .1s ease,-webkit-transform .1s ease;transition:opacity .1s ease,-webkit-transform .1s ease;transition:transform .1s ease,opacity .1s ease;transition:transform .1s ease,opacity .1s ease,-webkit-transform .1s ease;-webkit-transform:translateY(-8px);transform:translateY(-8px);left:-1px;width:190px;margin-top:5px;-webkit-box-sizing:content-box;box-sizing:content-box}.ce-conversion-toolbar--left-oriented:before{left:15px;margin-left:0}.ce-conversion-toolbar--right-oriented:before{left:auto;right:15px;margin-left:0}.ce-conversion-toolbar--showed{opacity:1;visibility:visible;-webkit-transform:none;transform:none}.ce-conversion-toolbar [hidden]{display:none!important}.ce-conversion-toolbar__buttons{display:-webkit-box;display:-ms-flexbox;display:flex}.ce-conversion-toolbar__label{color:#707684;font-size:11px;font-weight:500;letter-spacing:.33px;padding:10px 10px 5px;text-transform:uppercase}.ce-conversion-tool{display:-webkit-box;display:-ms-flexbox;display:flex;padding:5px 10px;font-size:14px;line-height:20px;font-weight:500;cursor:pointer;-webkit-box-align:center;-ms-flex-align:center;align-items:center}.ce-conversion-tool--hidden{display:none}.ce-conversion-tool--focused{background:rgba(34,186,255,.08)!important}.ce-conversion-tool--focused{-webkit-box-shadow:inset 0 0 0px 1px rgba(7,161,227,.08);box-shadow:inset 0 0 0 1px #07a1e314}.ce-conversion-tool--focused-animated{-webkit-animation-name:buttonClicked;animation-name:buttonClicked;-webkit-animation-duration:.25s;animation-duration:.25s}.ce-conversion-tool:hover{background:#eff2f5}.ce-conversion-tool__icon{display:-webkit-inline-box;display:-ms-inline-flexbox;display:inline-flex;width:26px;height:26px;-webkit-box-shadow:0 0 0 1px rgba(201,201,204,.48);box-shadow:0 0 0 1px #c9c9cc7a;border-radius:5px;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;background:#fff;-webkit-box-sizing:content-box;box-sizing:content-box;-ms-flex-negative:0;flex-shrink:0;margin-right:10px}.ce-conversion-tool__icon svg{width:20px;height:20px}@media (max-width: 650px){.ce-conversion-tool__icon{width:36px;height:36px;border-radius:8px}.ce-conversion-tool__icon svg{width:28px;height:28px}}.ce-conversion-tool--last{margin-right:0!important}.ce-conversion-tool--active{color:#388ae5!important}.ce-conversion-tool--active{-webkit-animation:bounceIn .75s 1;animation:bounceIn .75s 1;-webkit-animation-fill-mode:forwards;animation-fill-mode:forwards}.ce-conversion-tool__secondary-label{color:#707684;font-size:12px;margin-left:auto;white-space:nowrap;letter-spacing:-.1em;padding-right:5px;margin-bottom:-2px;opacity:.6}@media (max-width: 650px){.ce-conversion-tool__secondary-label{display:none}}.ce-settings__button{display:-webkit-inline-box;display:-ms-inline-flexbox;display:inline-flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;padding:6px 1px;border-radius:3px;cursor:pointer;border:0;outline:none;background-color:transparent;vertical-align:bottom;color:inherit;margin:0;line-height:32px}.ce-settings__button svg{width:20px;height:20px}@media (max-width: 650px){.ce-settings__button svg{width:28px;height:28px}}@media (hover: hover){.ce-settings__button:hover{background-color:#eff2f5}}.ce-settings__button--active{color:#388ae5}.ce-settings__button--focused{background:rgba(34,186,255,.08)!important}.ce-settings__button--focused{-webkit-box-shadow:inset 0 0 0px 1px rgba(7,161,227,.08);box-shadow:inset 0 0 0 1px #07a1e314}.ce-settings__button--focused-animated{-webkit-animation-name:buttonClicked;animation-name:buttonClicked;-webkit-animation-duration:.25s;animation-duration:.25s}.ce-settings__button:not(:nth-child(3n+3)){margin-right:3px}.ce-settings__button:nth-child(n+4){margin-top:3px}.ce-settings__button--disabled{cursor:not-allowed!important}.ce-settings__button--disabled{opacity:.3}.ce-settings__button--selected{color:#388ae5}@media (min-width: 651px){.codex-editor--narrow .ce-settings .ce-popover{right:0;left:auto;left:initial}}@-webkit-keyframes fade-in{0%{opacity:0}to{opacity:1}}@keyframes fade-in{0%{opacity:0}to{opacity:1}}.ce-block{-webkit-animation:fade-in .3s ease;animation:fade-in .3s ease;-webkit-animation-fill-mode:none;animation-fill-mode:none;-webkit-animation-fill-mode:initial;animation-fill-mode:initial}.ce-block:first-of-type{margin-top:0}.ce-block--selected .ce-block__content{background:#e1f2ff}.ce-block--selected .ce-block__content [contenteditable]{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.ce-block--selected .ce-block__content img,.ce-block--selected .ce-block__content .ce-stub{opacity:.55}.ce-block--stretched .ce-block__content{max-width:none}.ce-block__content{position:relative;max-width:650px;margin:0 auto;-webkit-transition:background-color .15s ease;transition:background-color .15s ease}.ce-block--drop-target .ce-block__content:before{content:"";position:absolute;top:100%;left:-20px;margin-top:-1px;height:8px;width:8px;border:solid #388AE5;border-width:1px 1px 0 0;-webkit-transform-origin:right;transform-origin:right;-webkit-transform:rotate(45deg);transform:rotate(45deg)}.ce-block--drop-target .ce-block__content:after{content:"";position:absolute;top:100%;height:1px;width:100%;color:#388ae5;background:repeating-linear-gradient(90deg,#388AE5,#388AE5 1px,#fff 1px,#fff 6px)}.ce-block a{cursor:pointer;-webkit-text-decoration:underline;text-decoration:underline}.ce-block b{font-weight:700}.ce-block i{font-style:italic}@-webkit-keyframes bounceIn{0%,20%,40%,60%,80%,to{-webkit-animation-timing-function:cubic-bezier(.215,.61,.355,1);animation-timing-function:cubic-bezier(.215,.61,.355,1)}0%{-webkit-transform:scale3d(.9,.9,.9);transform:scale3d(.9,.9,.9)}20%{-webkit-transform:scale3d(1.03,1.03,1.03);transform:scale3d(1.03,1.03,1.03)}60%{-webkit-transform:scale3d(1,1,1);transform:scaleZ(1)}}@keyframes bounceIn{0%,20%,40%,60%,80%,to{-webkit-animation-timing-function:cubic-bezier(.215,.61,.355,1);animation-timing-function:cubic-bezier(.215,.61,.355,1)}0%{-webkit-transform:scale3d(.9,.9,.9);transform:scale3d(.9,.9,.9)}20%{-webkit-transform:scale3d(1.03,1.03,1.03);transform:scale3d(1.03,1.03,1.03)}60%{-webkit-transform:scale3d(1,1,1);transform:scaleZ(1)}}@-webkit-keyframes selectionBounce{0%,20%,40%,60%,80%,to{-webkit-animation-timing-function:cubic-bezier(.215,.61,.355,1);animation-timing-function:cubic-bezier(.215,.61,.355,1)}50%{-webkit-transform:scale3d(1.01,1.01,1.01);transform:scale3d(1.01,1.01,1.01)}70%{-webkit-transform:scale3d(1,1,1);transform:scaleZ(1)}}@keyframes selectionBounce{0%,20%,40%,60%,80%,to{-webkit-animation-timing-function:cubic-bezier(.215,.61,.355,1);animation-timing-function:cubic-bezier(.215,.61,.355,1)}50%{-webkit-transform:scale3d(1.01,1.01,1.01);transform:scale3d(1.01,1.01,1.01)}70%{-webkit-transform:scale3d(1,1,1);transform:scaleZ(1)}}@-webkit-keyframes buttonClicked{0%,20%,40%,60%,80%,to{-webkit-animation-timing-function:cubic-bezier(.215,.61,.355,1);animation-timing-function:cubic-bezier(.215,.61,.355,1)}0%{-webkit-transform:scale3d(.95,.95,.95);transform:scale3d(.95,.95,.95)}60%{-webkit-transform:scale3d(1.02,1.02,1.02);transform:scale3d(1.02,1.02,1.02)}80%{-webkit-transform:scale3d(1,1,1);transform:scaleZ(1)}}@keyframes buttonClicked{0%,20%,40%,60%,80%,to{-webkit-animation-timing-function:cubic-bezier(.215,.61,.355,1);animation-timing-function:cubic-bezier(.215,.61,.355,1)}0%{-webkit-transform:scale3d(.95,.95,.95);transform:scale3d(.95,.95,.95)}60%{-webkit-transform:scale3d(1.02,1.02,1.02);transform:scale3d(1.02,1.02,1.02)}80%{-webkit-transform:scale3d(1,1,1);transform:scaleZ(1)}}.cdx-block{padding:.4em 0}.cdx-block::-webkit-input-placeholder{line-height:normal!important}.cdx-input{border:1px solid rgba(201,201,204,.48);-webkit-box-shadow:inset 0 1px 2px 0 rgba(35,44,72,.06);box-shadow:inset 0 1px 2px #232c480f;border-radius:3px;padding:10px 12px;outline:none;width:100%;-webkit-box-sizing:border-box;box-sizing:border-box}.cdx-input[data-placeholder]:before{position:static!important}.cdx-input[data-placeholder]:before{display:inline-block;width:0;white-space:nowrap;pointer-events:none}.cdx-settings-button{display:-webkit-inline-box;display:-ms-inline-flexbox;display:inline-flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;padding:6px 1px;border-radius:3px;cursor:pointer;border:0;outline:none;background-color:transparent;vertical-align:bottom;color:inherit;margin:0;min-width:26px;min-height:26px}.cdx-settings-button svg{width:20px;height:20px}@media (max-width: 650px){.cdx-settings-button svg{width:28px;height:28px}}@media (hover: hover){.cdx-settings-button:hover{background-color:#eff2f5}}.cdx-settings-button--focused{background:rgba(34,186,255,.08)!important}.cdx-settings-button--focused{-webkit-box-shadow:inset 0 0 0px 1px rgba(7,161,227,.08);box-shadow:inset 0 0 0 1px #07a1e314}.cdx-settings-button--focused-animated{-webkit-animation-name:buttonClicked;animation-name:buttonClicked;-webkit-animation-duration:.25s;animation-duration:.25s}.cdx-settings-button--active{color:#388ae5}.cdx-settings-button svg{width:auto;height:auto}@media (max-width: 650px){.cdx-settings-button{width:36px;height:36px;border-radius:8px}}.cdx-loader{position:relative;border:1px solid rgba(201,201,204,.48)}.cdx-loader:before{content:"";position:absolute;left:50%;top:50%;width:18px;height:18px;margin:-11px 0 0 -11px;border:2px solid rgba(201,201,204,.48);border-left-color:#388ae5;border-radius:50%;-webkit-animation:cdxRotation 1.2s infinite linear;animation:cdxRotation 1.2s infinite linear}@-webkit-keyframes cdxRotation{0%{-webkit-transform:rotate(0deg);transform:rotate(0)}to{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}@keyframes cdxRotation{0%{-webkit-transform:rotate(0deg);transform:rotate(0)}to{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}.cdx-button{padding:13px;border-radius:3px;border:1px solid rgba(201,201,204,.48);font-size:14.9px;background:#fff;-webkit-box-shadow:0 2px 2px 0 rgba(18,30,57,.04);box-shadow:0 2px 2px #121e390a;color:#707684;text-align:center;cursor:pointer}@media (hover: hover){.cdx-button:hover{background:#FBFCFE;-webkit-box-shadow:0 1px 3px 0 rgba(18,30,57,.08);box-shadow:0 1px 3px #121e3914}}.cdx-button svg{height:20px;margin-right:.2em;margin-top:-2px}.ce-stub{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:12px 18px;margin:10px 0;border-radius:10px;background:#eff2f5;border:1px solid #EFF0F1;color:#707684;font-size:14px}.ce-stub svg{width:20px;height:20px}.ce-stub__info{margin-left:14px}.ce-stub__title{font-weight:500;text-transform:capitalize}.codex-editor.codex-editor--rtl{direction:rtl}.codex-editor.codex-editor--rtl .cdx-list{padding-left:0;padding-right:40px}.codex-editor.codex-editor--rtl .ce-toolbar__plus{right:-26px;left:auto}.codex-editor.codex-editor--rtl .ce-toolbar__actions{right:auto;left:-26px}@media (max-width: 650px){.codex-editor.codex-editor--rtl .ce-toolbar__actions{margin-left:0;margin-right:auto;padding-right:0;padding-left:10px}}.codex-editor.codex-editor--rtl .ce-settings{left:5px;right:auto}.codex-editor.codex-editor--rtl .ce-settings:before{right:auto;left:25px}.codex-editor.codex-editor--rtl .ce-settings__button:not(:nth-child(3n+3)){margin-left:3px;margin-right:0}.codex-editor.codex-editor--rtl .ce-conversion-tool__icon{margin-right:0;margin-left:10px}.codex-editor.codex-editor--rtl .ce-inline-toolbar__dropdown{border-right:0px solid transparent;border-left:1px solid rgba(201,201,204,.48);margin:0 -6px 0 6px}.codex-editor.codex-editor--rtl .ce-inline-toolbar__dropdown .icon--toggler-down{margin-left:0;margin-right:4px}@media (min-width: 651px){.codex-editor--narrow.codex-editor--rtl .ce-toolbar__plus{left:0px;right:5px}}@media (min-width: 651px){.codex-editor--narrow.codex-editor--rtl .ce-toolbar__actions{left:-5px}}.cdx-search-field{--icon-margin-right: 10px;background:rgba(232,232,235,.49);border:1px solid rgba(226,226,229,.2);border-radius:6px;padding:2px;display:grid;grid-template-columns:auto auto 1fr;grid-template-rows:auto}.cdx-search-field__icon{width:26px;height:26px;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;margin-right:var(--icon-margin-right)}.cdx-search-field__icon svg{width:20px;height:20px;color:#707684}.cdx-search-field__input{font-size:14px;outline:none;font-weight:500;font-family:inherit;border:0;background:transparent;margin:0;padding:0;line-height:22px;min-width:calc(100% - 26px - var(--icon-margin-right))}.cdx-search-field__input::-webkit-input-placeholder{color:#707684;font-weight:500}.cdx-search-field__input::-moz-placeholder{color:#707684;font-weight:500}.cdx-search-field__input:-ms-input-placeholder{color:#707684;font-weight:500}.cdx-search-field__input::-ms-input-placeholder{color:#707684;font-weight:500}.cdx-search-field__input::placeholder{color:#707684;font-weight:500}.ce-popover{--border-radius: 6px;--width: 200px;--max-height: 270px;--padding: 6px;--offset-from-target: 8px;--color-border: #e8e8eb;--color-shadow: rgba(13,20,33,.13);--color-background: white;--color-text-primary: black;--color-text-secondary: #707684;--color-border-icon: rgba(201, 201, 204, .48);--color-border-icon-disabled: #EFF0F1;--color-text-icon-active: #388AE5;--color-background-icon-active: rgba(56, 138, 229, .1);--color-background-item-focus: rgba(34, 186, 255, .08);--color-shadow-item-focus: rgba(7, 161, 227, .08);--color-background-item-hover: #eff2f5;--color-background-item-confirm: #E24A4A;--color-background-item-confirm-hover: #CE4343;min-width:var(--width);width:var(--width);max-height:var(--max-height);border-radius:var(--border-radius);overflow:hidden;-webkit-box-sizing:border-box;box-sizing:border-box;-webkit-box-shadow:0 3px 15px -3px var(--color-shadow);box-shadow:0 3px 15px -3px var(--color-shadow);position:absolute;left:0;top:calc(100% + var(--offset-from-target));background:var(--color-background);display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;z-index:4;opacity:0;max-height:0;pointer-events:none;padding:0;border:none}.ce-popover--opened{opacity:1;padding:var(--padding);max-height:var(--max-height);pointer-events:auto;-webkit-animation:panelShowing .1s ease;animation:panelShowing .1s ease;border:1px solid var(--color-border)}@media (max-width: 650px){.ce-popover--opened{-webkit-animation:panelShowingMobile .25s ease;animation:panelShowingMobile .25s ease}}.ce-popover__items{overflow-y:auto;-ms-scroll-chaining:none;overscroll-behavior:contain}@media (max-width: 650px){.ce-popover__overlay{position:fixed;top:0;bottom:0;left:0;right:0;background:#1D202B;z-index:3;opacity:.5;-webkit-transition:opacity .12s ease-in;transition:opacity .12s ease-in;will-change:opacity;visibility:visible}}.ce-popover__overlay--hidden{display:none}.ce-popover--open-top{top:calc(-1 * (var(--offset-from-target) + var(--popover-height)))}@media (max-width: 650px){.ce-popover{--offset: 5px;position:fixed;max-width:none;min-width:calc(100% - var(--offset) * 2);left:var(--offset);right:var(--offset);bottom:calc(var(--offset) + env(safe-area-inset-bottom));top:auto;border-radius:10px}.ce-popover .ce-popover__search{display:none}}.ce-popover__search,.ce-popover__custom-content:not(:empty){margin-bottom:5px}.ce-popover__nothing-found-message{color:#707684;display:none;cursor:default;padding:3px;font-size:14px;line-height:20px;font-weight:500;white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.ce-popover__nothing-found-message--displayed{display:block}.ce-popover__custom-content:not(:empty){padding:4px}@media (min-width: 651px){.ce-popover__custom-content:not(:empty){padding:0}}.ce-popover__custom-content--hidden{display:none}.ce-popover-item{--border-radius: 6px;--icon-size: 20px;--icon-size-mobile: 28px;border-radius:var(--border-radius);display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:3px;color:var(--color-text-primary);-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}@media (max-width: 650px){.ce-popover-item{padding:4px}}.ce-popover-item:not(:last-of-type){margin-bottom:1px}.ce-popover-item__icon{border-radius:5px;width:26px;height:26px;-webkit-box-shadow:0 0 0 1px var(--color-border-icon);box-shadow:0 0 0 1px var(--color-border-icon);background:#fff;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;margin-right:10px}.ce-popover-item__icon svg{width:20px;height:20px}@media (max-width: 650px){.ce-popover-item__icon{width:36px;height:36px;border-radius:8px}.ce-popover-item__icon svg{width:var(--icon-size-mobile);height:var(--icon-size-mobile)}}.ce-popover-item__title{font-size:14px;line-height:20px;font-weight:500;overflow:hidden;white-space:nowrap;text-overflow:ellipsis}@media (max-width: 650px){.ce-popover-item__title{font-size:16px}}.ce-popover-item__secondary-title{color:var(--color-text-secondary);font-size:12px;margin-left:auto;white-space:nowrap;letter-spacing:-.1em;padding-right:5px;margin-bottom:-2px;opacity:.6}@media (max-width: 650px){.ce-popover-item__secondary-title{display:none}}.ce-popover-item--active{background:var(--color-background-icon-active);color:var(--color-text-icon-active)}.ce-popover-item--active .ce-popover-item__icon{-webkit-box-shadow:none;box-shadow:none}.ce-popover-item--disabled{color:var(--color-text-secondary);cursor:default;pointer-events:none}.ce-popover-item--disabled .ce-popover-item__icon{-webkit-box-shadow:0 0 0 1px var(--color-border-icon-disabled);box-shadow:0 0 0 1px var(--color-border-icon-disabled)}.ce-popover-item--focused:not(.ce-popover-item--no-focus){background:var(--color-background-item-focus)!important}.ce-popover-item--focused:not(.ce-popover-item--no-focus){-webkit-box-shadow:inset 0 0 0px 1px var(--color-shadow-item-focus);box-shadow:inset 0 0 0 1px var(--color-shadow-item-focus)}.ce-popover-item--hidden{display:none}@media (hover: hover){.ce-popover-item:hover{cursor:pointer}.ce-popover-item:hover:not(.ce-popover-item--no-hover){background-color:var(--color-background-item-hover)}.ce-popover-item:hover .ce-popover-item__icon{-webkit-box-shadow:none;box-shadow:none}}.ce-popover-item--confirmation{background:var(--color-background-item-confirm)}.ce-popover-item--confirmation .ce-popover-item__icon{color:var(--color-background-item-confirm)}.ce-popover-item--confirmation .ce-popover-item__title{color:#fff}@media (hover: hover){.ce-popover-item--confirmation:not(.ce-popover-item--no-hover):hover{background:var(--color-background-item-confirm-hover)}}.ce-popover-item--confirmation:not(.ce-popover-item--no-focus).ce-popover-item--focused{background:var(--color-background-item-confirm-hover)!important}.ce-popover-item--confirmation .ce-popover-item__icon,.ce-popover-item--active .ce-popover-item__icon,.ce-popover-item--focused .ce-popover-item__icon{-webkit-box-shadow:none;box-shadow:none}@-webkit-keyframes panelShowing{0%{opacity:0;-webkit-transform:translateY(-8px) scale(.9);transform:translateY(-8px) scale(.9)}70%{opacity:1;-webkit-transform:translateY(2px);transform:translateY(2px)}to{-webkit-transform:translateY(0);transform:translateY(0)}}@keyframes panelShowing{0%{opacity:0;-webkit-transform:translateY(-8px) scale(.9);transform:translateY(-8px) scale(.9)}70%{opacity:1;-webkit-transform:translateY(2px);transform:translateY(2px)}to{-webkit-transform:translateY(0);transform:translateY(0)}}@-webkit-keyframes panelShowingMobile{0%{opacity:0;-webkit-transform:translateY(14px) scale(.98);transform:translateY(14px) scale(.98)}70%{opacity:1;-webkit-transform:translateY(-4px);transform:translateY(-4px)}to{-webkit-transform:translateY(0);transform:translateY(0)}}@keyframes panelShowingMobile{0%{opacity:0;-webkit-transform:translateY(14px) scale(.98);transform:translateY(14px) scale(.98)}70%{opacity:1;-webkit-transform:translateY(-4px);transform:translateY(-4px)}to{-webkit-transform:translateY(0);transform:translateY(0)}}.wobble{-webkit-animation-name:wobble;animation-name:wobble;-webkit-animation-duration:.4s;animation-duration:.4s}@-webkit-keyframes wobble{0%{-webkit-transform:translate3d(0,0,0);transform:translateZ(0)}15%{-webkit-transform:translate3d(-9%,0,0);transform:translate3d(-9%,0,0)}30%{-webkit-transform:translate3d(9%,0,0);transform:translate3d(9%,0,0)}45%{-webkit-transform:translate3d(-4%,0,0);transform:translate3d(-4%,0,0)}60%{-webkit-transform:translate3d(4%,0,0);transform:translate3d(4%,0,0)}75%{-webkit-transform:translate3d(-1%,0,0);transform:translate3d(-1%,0,0)}to{-webkit-transform:translate3d(0,0,0);transform:translateZ(0)}}@keyframes wobble{0%{-webkit-transform:translate3d(0,0,0);transform:translateZ(0)}15%{-webkit-transform:translate3d(-9%,0,0);transform:translate3d(-9%,0,0)}30%{-webkit-transform:translate3d(9%,0,0);transform:translate3d(9%,0,0)}45%{-webkit-transform:translate3d(-4%,0,0);transform:translate3d(-4%,0,0)}60%{-webkit-transform:translate3d(4%,0,0);transform:translate3d(4%,0,0)}75%{-webkit-transform:translate3d(-1%,0,0);transform:translate3d(-1%,0,0)}to{-webkit-transform:translate3d(0,0,0);transform:translateZ(0)}}\n'.toString()});this.config.style&&!v(this.config.style)&&this.config.style.nonce&&e.setAttribute("nonce",this.config.style.nonce),L.prepend(document.head,e)}enableModuleBindings(){this.readOnlyMutableListeners.on(this.nodes.redactor,"click",(t=>{this.redactorClicked(t)}),!1),this.readOnlyMutableListeners.on(this.nodes.redactor,"mousedown",(t=>{this.documentTouched(t)}),{capture:!0,passive:!0}),this.readOnlyMutableListeners.on(this.nodes.redactor,"touchstart",(t=>{this.documentTouched(t)}),{capture:!0,passive:!0}),this.readOnlyMutableListeners.on(document,"keydown",(t=>{this.documentKeydown(t)}),!0),this.readOnlyMutableListeners.on(document,"mousedown",(t=>{this.documentClicked(t)}),!0);const t=x((()=>{this.selectionChanged()}),180);this.readOnlyMutableListeners.on(document,"selectionchange",t,!0),this.readOnlyMutableListeners.on(window,"resize",(()=>{this.resizeDebouncer()}),{passive:!0}),this.watchBlockHoveredEvents()}watchBlockHoveredEvents(){let t;this.readOnlyMutableListeners.on(this.nodes.redactor,"mousemove",E((e=>{const i=e.target.closest(".ce-block");this.Editor.BlockSelection.anyBlockSelected||i&&t!==i&&(t=i,this.eventsDispatcher.emit(zt,{block:this.Editor.BlockManager.getBlockByChildNode(i)}))}),20),{passive:!0})}disableModuleBindings(){this.readOnlyMutableListeners.clearAll()}windowResize(){this.contentRectCache=null,this.checkIsMobile()}documentKeydown(t){switch(t.keyCode){case r:this.enterPressed(t);break;case 8:case 46:this.backspacePressed(t);break;case 27:this.escapePressed(t);break;default:this.defaultBehaviour(t)}}defaultBehaviour(t){const{currentBlock:e}=this.Editor.BlockManager,i=t.target.closest(`.${this.CSS.editorWrapper}`),s=t.altKey||t.ctrlKey||t.metaKey||t.shiftKey;void 0===e||null!==i?i||e&&s||(this.Editor.BlockManager.dropPointer(),this.Editor.Toolbar.close()):this.Editor.BlockEvents.keydown(t)}backspacePressed(t){const{BlockManager:e,BlockSelection:i,Caret:s}=this.Editor;if(i.anyBlockSelected&&!U.isSelectionExists){const n=e.removeSelectedBlocks(),o=e.insertDefaultBlockAtIndex(n,!0);s.setToBlock(o,s.positions.START),i.clearSelection(t),t.preventDefault(),t.stopPropagation(),t.stopImmediatePropagation()}}escapePressed(t){this.Editor.BlockSelection.clearSelection(t),this.Editor.Toolbar.toolbox.opened?(this.Editor.Toolbar.toolbox.close(),this.Editor.Caret.setToBlock(this.Editor.BlockManager.currentBlock,this.Editor.Caret.positions.END)):this.Editor.BlockSettings.opened?this.Editor.BlockSettings.close():this.Editor.ConversionToolbar.opened?this.Editor.ConversionToolbar.close():this.Editor.InlineToolbar.opened?this.Editor.InlineToolbar.close():this.Editor.Toolbar.close()}enterPressed(t){const{BlockManager:e,BlockSelection:i}=this.Editor,s=e.currentBlockIndex>=0;if(i.anyBlockSelected&&!U.isSelectionExists)return i.clearSelection(t),t.preventDefault(),t.stopImmediatePropagation(),void t.stopPropagation();if(!this.someToolbarOpened&&s&&"BODY"===t.target.tagName){const t=this.Editor.BlockManager.insert();this.Editor.Caret.setToBlock(t),this.Editor.Toolbar.moveAndOpen(t)}this.Editor.BlockSelection.clearSelection(t)}documentClicked(t){var e,i;if(!t.isTrusted)return;const s=t.target;this.nodes.holder.contains(s)||U.isAtEditor||(this.Editor.BlockManager.dropPointer(),this.Editor.Toolbar.close());const n=null==(e=this.Editor.BlockSettings.nodes.wrapper)?void 0:e.contains(s),o=null==(i=this.Editor.Toolbar.nodes.settingsToggler)?void 0:i.contains(s),r=n||o;if(this.Editor.BlockSettings.opened&&!r){this.Editor.BlockSettings.close();const t=this.Editor.BlockManager.getBlockByChildNode(s);this.Editor.Toolbar.moveAndOpen(t)}this.Editor.BlockSelection.clearSelection(t)}documentTouched(t){let e=t.target;if(e===this.nodes.redactor){const i=t instanceof MouseEvent?t.clientX:t.touches[0].clientX,s=t instanceof MouseEvent?t.clientY:t.touches[0].clientY;e=document.elementFromPoint(i,s)}try{this.Editor.BlockManager.setCurrentBlockByChildNode(e)}catch{this.Editor.RectangleSelection.isRectActivated()||this.Editor.Caret.setToTheLastBlock()}this.Editor.Toolbar.moveAndOpen()}redactorClicked(t){if(!U.isCollapsed)return;const e=t.target,i=t.metaKey||t.ctrlKey;if(L.isAnchor(e)&&i){t.stopImmediatePropagation(),t.stopPropagation();const i=function(t){try{return new URL(t).href}catch{}return"//"===t.substring(0,2)?window.location.protocol+t:window.location.origin+t}(e.getAttribute("href"));!function(t){window.open(t,"_blank")}(i)}else this.processBottomZoneClick(t)}processBottomZoneClick(t){const e=this.Editor.BlockManager.getBlockByIndex(-1),i=L.offset(e.holder).bottom,s=t.pageY,{BlockSelection:n}=this.Editor;if(t.target instanceof Element&&t.target.isEqualNode(this.nodes.redactor)&&!n.anyBlockSelected&&i<s){t.stopImmediatePropagation(),t.stopPropagation();const{BlockManager:e,Caret:i,Toolbar:s}=this.Editor;(!e.lastBlock.tool.isDefault||!e.lastBlock.isEmpty)&&e.insertAtEnd(),i.setToTheLastBlock(),s.moveAndOpen(e.lastBlock)}}selectionChanged(){const{CrossBlockSelection:t,BlockSelection:e}=this.Editor,i=U.anchorElement;if(t.isCrossBlockSelectionStarted&&e.anyBlockSelected&&U.get().removeAllRanges(),!i)return void(U.range||this.Editor.InlineToolbar.close());const s=null===i.closest(`.${K.CSS.content}`);if(s&&(this.Editor.InlineToolbar.containsNode(i)||this.Editor.InlineToolbar.close(),"true"!==i.dataset.inlineToolbar))return;this.Editor.BlockManager.currentBlock||this.Editor.BlockManager.setCurrentBlockByChildNode(i);const n=!0!==s;this.Editor.InlineToolbar.tryToShow(!0,n)}}};class Ee{constructor(t){let e,i;this.moduleInstances={},this.eventsDispatcher=new F,this.isReady=new Promise(((t,s)=>{e=t,i=s})),Promise.resolve().then((async()=>{this.configuration=t,this.validate(),this.init(),await this.start(),await this.render();const{BlockManager:i,Caret:s,UI:n,ModificationsObserver:o}=this.moduleInstances;n.checkEmptiness(),o.enable(),this.configuration.autofocus&&s.setToBlock(i.blocks[0],s.positions.START),e()})).catch((t=>{d(`Editor.js is not ready because of ${t}`,"error"),i(t)}))}set configuration(t){var e,i;g(t)?this.config={...t}:this.config={holder:t},_(!!this.config.holderId,"config.holderId","config.holder"),this.config.holderId&&!this.config.holder&&(this.config.holder=this.config.holderId,this.config.holderId=null),null==this.config.holder&&(this.config.holder="editorjs"),this.config.logLevel||(this.config.logLevel=o.VERBOSE),function(t){c.logLevel=t}(this.config.logLevel),_(!!this.config.initialBlock,"config.initialBlock","config.defaultBlock"),this.config.defaultBlock=this.config.defaultBlock||this.config.initialBlock||"paragraph",this.config.minHeight=void 0!==this.config.minHeight?this.config.minHeight:300;const s={type:this.config.defaultBlock,data:{}};this.config.placeholder=this.config.placeholder||!1,this.config.sanitizer=this.config.sanitizer||{p:!0,b:!0,a:!0},this.config.hideToolbar=!!this.config.hideToolbar&&this.config.hideToolbar,this.config.tools=this.config.tools||{},this.config.i18n=this.config.i18n||{},this.config.data=this.config.data||{blocks:[]},this.config.onReady=this.config.onReady||(()=>{}),this.config.onChange=this.config.onChange||(()=>{}),this.config.inlineToolbar=void 0===this.config.inlineToolbar||this.config.inlineToolbar,(v(this.config.data)||!this.config.data.blocks||0===this.config.data.blocks.length)&&(this.config.data={blocks:[s]}),this.config.readOnly=this.config.readOnly||!1,null!=(e=this.config.i18n)&&e.messages&&D.setDictionary(this.config.i18n.messages),this.config.i18n.direction=(null==(i=this.config.i18n)?void 0:i.direction)||"ltr"}get configuration(){return this.config}validate(){const{holderId:t,holder:e}=this.config;if(t&&e)throw Error("«holderId» and «holder» param can't assign at the same time.");if(m(e)&&!L.get(e))throw Error(`element with ID «${e}» is missing. Pass correct holder's ID.`);if(e&&g(e)&&!L.isElement(e))throw Error("«holder» value must be an Element node")}init(){this.constructModules(),this.configureModules()}async start(){await["Tools","UI","BlockManager","Paste","BlockSelection","RectangleSelection","CrossBlockSelection","ReadOnly"].reduce(((t,e)=>t.then((async()=>{try{await this.moduleInstances[e].prepare()}catch(t){if(t instanceof O)throw new Error(t.message);d(`Module ${e} was skipped because of %o`,"warn",t)}}))),Promise.resolve())}render(){return this.moduleInstances.Renderer.render(this.config.data.blocks)}constructModules(){Object.entries(xe).forEach((([t,e])=>{try{this.moduleInstances[t]=new e({config:this.configuration,eventsDispatcher:this.eventsDispatcher})}catch(e){d("[constructModules]",`Module ${t} skipped because`,"error",e)}}))}configureModules(){for(const t in this.moduleInstances)Object.prototype.hasOwnProperty.call(this.moduleInstances,t)&&(this.moduleInstances[t].state=this.getModulesDiff(t))}getModulesDiff(t){const e={};for(const i in this.moduleInstances)i!==t&&(e[i]=this.moduleInstances[i]);return e}}class Ce{static get version(){return"2.29.0"}constructor(t){let e=()=>{};g(t)&&p(t.onReady)&&(e=t.onReady);const i=new Ee(t);this.isReady=i.isReady.then((()=>{this.exportAPI(i),e()}))}exportAPI(t){["configuration"].forEach((e=>{this[e]=t[e]})),this.destroy=()=>{Object.values(t.moduleInstances).forEach((t=>{p(t.destroy)&&t.destroy(),t.listeners.removeAll()})),null==dt||dt.destroy(),dt=null,t=null;for(const t in this)Object.prototype.hasOwnProperty.call(this,t)&&delete this[t];Object.setPrototypeOf(this,null)},Object.setPrototypeOf(this,t.moduleInstances.API.methods),delete this.exportAPI,Object.entries({blocks:{clear:"clear",render:"render"},caret:{focus:"focus"},events:{on:"on",off:"off",emit:"emit"},saver:{save:"save"}}).forEach((([e,i])=>{Object.entries(i).forEach((([i,s])=>{this[s]=t.moduleInstances.API.methods[e][i]}))}))}}},776:(t,e,i)=>{"use strict";i.d(e,{c:()=>s}),function(){try{if(typeof document<"u"){var t=document.createElement("style");t.appendChild(document.createTextNode(".ce-header{padding:.6em 0 3px;margin:0;line-height:1.25em;outline:none}.ce-header p,.ce-header div{padding:0!important;margin:0!important}.ce-header[contentEditable=true][data-placeholder]:before{position:absolute;content:attr(data-placeholder);color:#707684;font-weight:400;display:none;cursor:text}.ce-header[contentEditable=true][data-placeholder]:empty:before{display:block}.ce-header[contentEditable=true][data-placeholder]:empty:focus:before{display:none}")),document.head.appendChild(t)}}catch(t){console.error("vite-plugin-css-injected-by-js",t)}}();class s{constructor({data:t,config:e,api:i,readOnly:s}){this.api=i,this.readOnly=s,this._CSS={block:this.api.styles.block,wrapper:"ce-header"},this._settings=e,this._data=this.normalizeData(t),this._element=this.getTag()}normalizeData(t){const e={};return"object"!=typeof t&&(t={}),e.text=t.text||"",e.level=parseInt(t.level)||this.defaultLevel.number,e}render(){return this._element}renderSettings(){return this.levels.map((t=>({icon:t.svg,label:this.api.i18n.t(`Heading ${t.number}`),onActivate:()=>this.setLevel(t.number),closeOnActivate:!0,isActive:this.currentLevel.number===t.number})))}setLevel(t){this.data={level:t,text:this.data.text}}merge(t){const e={text:this.data.text+t.text,level:this.data.level};this.data=e}validate(t){return""!==t.text.trim()}save(t){return{text:t.innerHTML,level:this.currentLevel.number}}static get conversionConfig(){return{export:"text",import:"text"}}static get sanitize(){return{level:!1,text:{}}}static get isReadOnlySupported(){return!0}get data(){return this._data.text=this._element.innerHTML,this._data.level=this.currentLevel.number,this._data}set data(t){if(this._data=this.normalizeData(t),void 0!==t.level&&this._element.parentNode){const t=this.getTag();t.innerHTML=this._element.innerHTML,this._element.parentNode.replaceChild(t,this._element),this._element=t}void 0!==t.text&&(this._element.innerHTML=this._data.text||"")}getTag(){const t=document.createElement(this.currentLevel.tag);return t.innerHTML=this._data.text||"",t.classList.add(this._CSS.wrapper),t.contentEditable=this.readOnly?"false":"true",t.dataset.placeholder=this.api.i18n.t(this._settings.placeholder||""),t}get currentLevel(){let t=this.levels.find((t=>t.number===this._data.level));return t||(t=this.defaultLevel),t}get defaultLevel(){if(this._settings.defaultLevel){const t=this.levels.find((t=>t.number===this._settings.defaultLevel));if(t)return t;console.warn("(ง'̀-'́)ง Heading Tool: the default level specified was not found in available levels")}return this.levels[1]}get levels(){const t=[{number:1,tag:"H1",svg:'<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M6 7L6 12M6 17L6 12M6 12L12 12M12 7V12M12 17L12 12"/><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M19 17V10.2135C19 10.1287 18.9011 10.0824 18.836 10.1367L16 12.5"/></svg>'},{number:2,tag:"H2",svg:'<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M6 7L6 12M6 17L6 12M6 12L12 12M12 7V12M12 17L12 12"/><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M16 11C16 10 19 9.5 19 12C19 13.9771 16.0684 13.9997 16.0012 16.8981C15.9999 16.9533 16.0448 17 16.1 17L19.3 17"/></svg>'},{number:3,tag:"H3",svg:'<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M6 7L6 12M6 17L6 12M6 12L12 12M12 7V12M12 17L12 12"/><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M16 11C16 10.5 16.8323 10 17.6 10C18.3677 10 19.5 10.311 19.5 11.5C19.5 12.5315 18.7474 12.9022 18.548 12.9823C18.5378 12.9864 18.5395 13.0047 18.5503 13.0063C18.8115 13.0456 20 13.3065 20 14.8C20 16 19.5 17 17.8 17C17.8 17 16 17 16 16.3"/></svg>'},{number:4,tag:"H4",svg:'<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M6 7L6 12M6 17L6 12M6 12L12 12M12 7V12M12 17L12 12"/><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M18 10L15.2834 14.8511C15.246 14.9178 15.294 15 15.3704 15C16.8489 15 18.7561 15 20.2 15M19 17C19 15.7187 19 14.8813 19 13.6"/></svg>'},{number:5,tag:"H5",svg:'<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M6 7L6 12M6 17L6 12M6 12L12 12M12 7V12M12 17L12 12"/><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M16 15.9C16 15.9 16.3768 17 17.8 17C19.5 17 20 15.6199 20 14.7C20 12.7323 17.6745 12.0486 16.1635 12.9894C16.094 13.0327 16 12.9846 16 12.9027V10.1C16 10.0448 16.0448 10 16.1 10H19.8"/></svg>'},{number:6,tag:"H6",svg:'<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M6 7L6 12M6 17L6 12M6 12L12 12M12 7V12M12 17L12 12"/><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M19.5 10C16.5 10.5 16 13.3285 16 15M16 15V15C16 16.1046 16.8954 17 18 17H18.3246C19.3251 17 20.3191 16.3492 20.2522 15.3509C20.0612 12.4958 16 12.6611 16 15Z"/></svg>'}];return this._settings.levels?t.filter((t=>this._settings.levels.includes(t.number))):t}onPaste(t){const e=t.detail.data;let i=this.defaultLevel.number;switch(e.tagName){case"H1":i=1;break;case"H2":i=2;break;case"H3":i=3;break;case"H4":i=4;break;case"H5":i=5;break;case"H6":i=6}this._settings.levels&&(i=this._settings.levels.reduce(((t,e)=>Math.abs(e-i)<Math.abs(t-i)?e:t))),this.data={level:i,text:e.innerHTML}}static get pasteConfig(){return{tags:["H1","H2","H3","H4","H5","H6"]}}static get toolbox(){return{icon:'<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M9 7L9 12M9 17V12M9 12L15 12M15 7V12M15 17L15 12"/></svg>',title:"Heading"}}}},744:(t,e,i)=>{"use strict";i.d(e,{c:()=>n}),function(){try{if(typeof document<"u"){var t=document.createElement("style");t.appendChild(document.createTextNode(".cdx-list{margin:0;padding-left:40px;outline:none}.cdx-list__item{padding:5.5px 0 5.5px 3px;line-height:1.6em}.cdx-list--unordered{list-style:disc}.cdx-list--ordered{list-style:decimal}.cdx-list-settings{display:flex}.cdx-list-settings .cdx-settings-button{width:50%}")),document.head.appendChild(t)}}catch(t){console.error("vite-plugin-css-injected-by-js",t)}}();const s='<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><line x1="9" x2="19" y1="7" y2="7" stroke="currentColor" stroke-linecap="round" stroke-width="2"/><line x1="9" x2="19" y1="12" y2="12" stroke="currentColor" stroke-linecap="round" stroke-width="2"/><line x1="9" x2="19" y1="17" y2="17" stroke="currentColor" stroke-linecap="round" stroke-width="2"/><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M5.00001 17H4.99002"/><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M5.00001 12H4.99002"/><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M5.00001 7H4.99002"/></svg>';class n{static get isReadOnlySupported(){return!0}static get enableLineBreaks(){return!0}static get toolbox(){return{icon:s,title:"List"}}constructor({data:t,config:e,api:i,readOnly:n}){this._elements={wrapper:null},this.api=i,this.readOnly=n,this.settings=[{name:"unordered",label:this.api.i18n.t("Unordered"),icon:s,default:"unordered"===e.defaultStyle||!1},{name:"ordered",label:this.api.i18n.t("Ordered"),icon:'<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><line x1="12" x2="19" y1="7" y2="7" stroke="currentColor" stroke-linecap="round" stroke-width="2"/><line x1="12" x2="19" y1="12" y2="12" stroke="currentColor" stroke-linecap="round" stroke-width="2"/><line x1="12" x2="19" y1="17" y2="17" stroke="currentColor" stroke-linecap="round" stroke-width="2"/><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M7.79999 14L7.79999 7.2135C7.79999 7.12872 7.7011 7.0824 7.63597 7.13668L4.79999 9.5"/></svg>',default:"ordered"===e.defaultStyle||!0}],this._data={style:this.settings.find((t=>!0===t.default)).name,items:[]},this.data=t}render(){return this._elements.wrapper=this.makeMainTag(this._data.style),this._data.items.length?this._data.items.forEach((t=>{this._elements.wrapper.appendChild(this._make("li",this.CSS.item,{innerHTML:t}))})):this._elements.wrapper.appendChild(this._make("li",this.CSS.item)),this.readOnly||this._elements.wrapper.addEventListener("keydown",(t=>{const[e,i]=[13,8];switch(t.keyCode){case e:this.getOutofList(t);break;case i:this.backspace(t)}}),!1),this._elements.wrapper}save(){return this.data}static get conversionConfig(){return{export:t=>t.items.join(". "),import:t=>({items:[t],style:"unordered"})}}static get sanitize(){return{style:{},items:{br:!0}}}renderSettings(){return this.settings.map((t=>({...t,isActive:this._data.style===t.name,closeOnActivate:!0,onActivate:()=>this.toggleTune(t.name)})))}onPaste(t){const e=t.detail.data;this.data=this.pasteHandler(e)}static get pasteConfig(){return{tags:["OL","UL","LI"]}}makeMainTag(t){const e="ordered"===t?this.CSS.wrapperOrdered:this.CSS.wrapperUnordered,i="ordered"===t?"ol":"ul";return this._make(i,[this.CSS.baseBlock,this.CSS.wrapper,e],{contentEditable:!this.readOnly})}toggleTune(t){const e=this.makeMainTag(t);for(;this._elements.wrapper.hasChildNodes();)e.appendChild(this._elements.wrapper.firstChild);this._elements.wrapper.replaceWith(e),this._elements.wrapper=e,this._data.style=t}get CSS(){return{baseBlock:this.api.styles.block,wrapper:"cdx-list",wrapperOrdered:"cdx-list--ordered",wrapperUnordered:"cdx-list--unordered",item:"cdx-list__item"}}set data(t){t||(t={}),this._data.style=t.style||this.settings.find((t=>!0===t.default)).name,this._data.items=t.items||[];const e=this._elements.wrapper;e&&e.parentNode.replaceChild(this.render(),e)}get data(){this._data.items=[];const t=this._elements.wrapper.querySelectorAll(`.${this.CSS.item}`);for(let e=0;e<t.length;e++)t[e].innerHTML.replace("<br>"," ").trim()&&this._data.items.push(t[e].innerHTML);return this._data}_make(t,e=null,i={}){const s=document.createElement(t);Array.isArray(e)?s.classList.add(...e):e&&s.classList.add(e);for(const t in i)s[t]=i[t];return s}get currentItem(){let t=window.getSelection().anchorNode;return t.nodeType!==Node.ELEMENT_NODE&&(t=t.parentNode),t.closest(`.${this.CSS.item}`)}getOutofList(t){const e=this._elements.wrapper.querySelectorAll("."+this.CSS.item);if(e.length<2)return;const i=e[e.length-1],s=this.currentItem;s===i&&!i.textContent.trim().length&&(s.parentElement.removeChild(s),this.api.blocks.insert(),this.api.caret.setToBlock(this.api.blocks.getCurrentBlockIndex()),t.preventDefault(),t.stopPropagation())}backspace(t){const e=this._elements.wrapper.querySelectorAll("."+this.CSS.item),i=e[0];i&&e.length<2&&!i.innerHTML.replace("<br>"," ").trim()&&t.preventDefault()}selectItem(t){t.preventDefault();const e=window.getSelection(),i=e.anchorNode.parentNode.closest("."+this.CSS.item),s=new Range;s.selectNodeContents(i),e.removeAllRanges(),e.addRange(s)}pasteHandler(t){const{tagName:e}=t;let i;switch(e){case"OL":i="ordered";break;case"UL":case"LI":i="unordered"}const s={style:i,items:[]};if("LI"===e)s.items=[t.innerHTML];else{const e=Array.from(t.querySelectorAll("LI"));s.items=e.map((t=>t.innerHTML)).filter((t=>!!t.trim()))}return s}}},676:(t,e,i)=>{"use strict";i.d(e,{c:()=>s}),function(){try{if(typeof document<"u"){var t=document.createElement("style");t.appendChild(document.createTextNode(".ce-rawtool__textarea{min-height:200px;resize:vertical;border-radius:8px;border:0;background-color:#1e2128;font-family:Menlo,Monaco,Consolas,Courier New,monospace;font-size:12px;line-height:1.6;letter-spacing:-.2px;color:#a1a7b6;overscroll-behavior:contain}")),document.head.appendChild(t)}}catch(t){console.error("vite-plugin-css-injected-by-js",t)}}();class s{static get isReadOnlySupported(){return!0}static get displayInToolbox(){return!0}static get enableLineBreaks(){return!0}static get toolbox(){return{icon:'<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16.6954 5C17.912 5 18.8468 6.07716 18.6755 7.28165L17.426 16.0659C17.3183 16.8229 16.7885 17.4522 16.061 17.6873L12.6151 18.8012C12.2152 18.9304 11.7848 18.9304 11.3849 18.8012L7.93898 17.6873C7.21148 17.4522 6.6817 16.8229 6.57403 16.0659L5.32454 7.28165C5.15322 6.07716 6.088 5 7.30461 5H16.6954Z"/><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 8.4H9L9.42857 11.7939H14.5714L14.3571 13.2788L14.1429 14.7636L12 15.4L9.85714 14.7636L9.77143 14.3394"/></svg>',title:"Raw HTML"}}constructor({data:t,config:e,api:i,readOnly:n}){this.api=i,this.readOnly=n,this.placeholder=e.placeholder||s.DEFAULT_PLACEHOLDER,this.CSS={baseClass:this.api.styles.block,input:this.api.styles.input,wrapper:"ce-rawtool",textarea:"ce-rawtool__textarea"},this.data={html:t.html||""},this.textarea=null,this.resizeDebounce=null}render(){const t=document.createElement("div");return this.textarea=document.createElement("textarea"),t.classList.add(this.CSS.baseClass,this.CSS.wrapper),this.textarea.classList.add(this.CSS.textarea,this.CSS.input),this.textarea.textContent=this.data.html,this.textarea.placeholder=this.placeholder,this.readOnly?this.textarea.disabled=!0:this.textarea.addEventListener("input",(()=>{this.onInput()})),t.appendChild(this.textarea),setTimeout((()=>{this.resize()}),100),t}save(t){return{html:t.querySelector("textarea").value}}static get DEFAULT_PLACEHOLDER(){return"Enter HTML code"}static get sanitize(){return{html:!0}}onInput(){this.resizeDebounce&&clearTimeout(this.resizeDebounce),this.resizeDebounce=setTimeout((()=>{this.resize()}),200)}resize(){this.textarea.style.height="auto",this.textarea.style.height=this.textarea.scrollHeight+"px"}}},624:(t,e,i)=>{"use strict";i.a(t,(async(t,s)=>{try{i.d(e,{eE:()=>a,gb:()=>l});var n={640:(t,e,i)=>{i.d(e,{AnnotationLayer:()=>z,FreeTextAnnotationElement:()=>S,InkAnnotationElement:()=>P,StampAnnotationElement:()=>N});var s=i(266),n=i(473),o=i(780);function r(t){return Math.floor(255*Math.max(0,Math.min(1,t))).toString(16).padStart(2,"0")}function a(t){return Math.max(0,Math.min(255,255*t))}class l{static CMYK_G([t,e,i,s]){return["G",1-Math.min(1,.3*t+.59*i+.11*e+s)]}static G_CMYK([t]){return["CMYK",0,0,0,1-t]}static G_RGB([t]){return["RGB",t,t,t]}static G_rgb([t]){return[t=a(t),t,t]}static G_HTML([t]){const e=r(t);return`#${e}${e}${e}`}static RGB_G([t,e,i]){return["G",.3*t+.59*e+.11*i]}static RGB_rgb(t){return t.map(a)}static RGB_HTML(t){return`#${t.map(r).join("")}`}static T_HTML(){return"#00000000"}static T_rgb(){return[null]}static CMYK_RGB([t,e,i,s]){return["RGB",1-Math.min(1,t+s),1-Math.min(1,i+s),1-Math.min(1,e+s)]}static CMYK_rgb([t,e,i,s]){return[a(1-Math.min(1,t+s)),a(1-Math.min(1,i+s)),a(1-Math.min(1,e+s))]}static CMYK_HTML(t){const e=this.CMYK_RGB(t).slice(1);return this.RGB_HTML(e)}static RGB_CMYK([t,e,i]){const s=1-t,n=1-e,o=1-i;return["CMYK",s,n,o,Math.min(s,n,o)]}}var c=i(160);const d=1e3,h=new WeakSet;function u(t){return{width:t[2]-t[0],height:t[3]-t[1]}}class p{static create(t){switch(t.data.annotationType){case s.AnnotationType.LINK:return new m(t);case s.AnnotationType.TEXT:return new f(t);case s.AnnotationType.WIDGET:switch(t.data.fieldType){case"Tx":return new v(t);case"Btn":return t.data.radioButton?new k(t):t.data.checkBox?new w(t):new x(t);case"Ch":return new E(t);case"Sig":return new y(t)}return new b(t);case s.AnnotationType.POPUP:return new C(t);case s.AnnotationType.FREETEXT:return new S(t);case s.AnnotationType.LINE:return new T(t);case s.AnnotationType.SQUARE:return new _(t);case s.AnnotationType.CIRCLE:return new M(t);case s.AnnotationType.POLYLINE:return new I(t);case s.AnnotationType.CARET:return new L(t);case s.AnnotationType.INK:return new P(t);case s.AnnotationType.POLYGON:return new B(t);case s.AnnotationType.HIGHLIGHT:return new R(t);case s.AnnotationType.UNDERLINE:return new D(t);case s.AnnotationType.SQUIGGLY:return new O(t);case s.AnnotationType.STRIKEOUT:return new F(t);case s.AnnotationType.STAMP:return new N(t);case s.AnnotationType.FILEATTACHMENT:return new H(t);default:return new g(t)}}}class g{#t=!1;constructor(t,{isRenderable:e=!1,ignoreBorder:i=!1,createQuadrilaterals:s=!1}={}){this.isRenderable=e,this.data=t.data,this.layer=t.layer,this.linkService=t.linkService,this.downloadManager=t.downloadManager,this.imageResourcesPath=t.imageResourcesPath,this.renderForms=t.renderForms,this.svgFactory=t.svgFactory,this.annotationStorage=t.annotationStorage,this.enableScripting=t.enableScripting,this.hasJSActions=t.hasJSActions,this._fieldObjects=t.fieldObjects,this.parent=t.parent,e&&(this.container=this._createContainer(i)),s&&this._createQuadrilaterals()}static _hasPopupData({titleObj:t,contentsObj:e,richText:i}){return!!(t?.str||e?.str||i?.str)}get hasPopupData(){return g._hasPopupData(this.data)}_createContainer(t){const{data:e,parent:{page:i,viewport:n}}=this,o=document.createElement("section");o.setAttribute("data-annotation-id",e.id),this instanceof b||(o.tabIndex=d),o.style.zIndex=this.parent.zIndex++,this.data.popupRef&&o.setAttribute("aria-haspopup","dialog"),e.noRotate&&o.classList.add("norotate");const{pageWidth:r,pageHeight:a,pageX:l,pageY:c}=n.rawDims;if(!e.rect||this instanceof C){const{rotation:t}=e;return e.hasOwnCanvas||0===t||this.setRotation(t,o),o}const{width:h,height:p}=u(e.rect),g=s.Util.normalizeRect([e.rect[0],i.view[3]-e.rect[1]+i.view[1],e.rect[2],i.view[3]-e.rect[3]+i.view[1]]);if(!t&&e.borderStyle.width>0){o.style.borderWidth=`${e.borderStyle.width}px`;const t=e.borderStyle.horizontalCornerRadius,i=e.borderStyle.verticalCornerRadius;if(t>0||i>0){const e=`calc(${t}px * var(--scale-factor)) / calc(${i}px * var(--scale-factor))`;o.style.borderRadius=e}else if(this instanceof k){const t=`calc(${h}px * var(--scale-factor)) / calc(${p}px * var(--scale-factor))`;o.style.borderRadius=t}switch(e.borderStyle.style){case s.AnnotationBorderStyleType.SOLID:o.style.borderStyle="solid";break;case s.AnnotationBorderStyleType.DASHED:o.style.borderStyle="dashed";break;case s.AnnotationBorderStyleType.BEVELED:(0,s.warn)("Unimplemented border style: beveled");break;case s.AnnotationBorderStyleType.INSET:(0,s.warn)("Unimplemented border style: inset");break;case s.AnnotationBorderStyleType.UNDERLINE:o.style.borderBottomStyle="solid"}const n=e.borderColor||null;n?(this.#t=!0,o.style.borderColor=s.Util.makeHexColor(0|n[0],0|n[1],0|n[2])):o.style.borderWidth=0}o.style.left=100*(g[0]-l)/r+"%",o.style.top=100*(g[1]-c)/a+"%";const{rotation:m}=e;return e.hasOwnCanvas||0===m?(o.style.width=100*h/r+"%",o.style.height=100*p/a+"%"):this.setRotation(m,o),o}setRotation(t,e=this.container){if(!this.data.rect)return;const{pageWidth:i,pageHeight:s}=this.parent.viewport.rawDims,{width:n,height:o}=u(this.data.rect);let r,a;t%180==0?(r=100*n/i,a=100*o/s):(r=100*o/i,a=100*n/s),e.style.width=`${r}%`,e.style.height=`${a}%`,e.setAttribute("data-main-rotation",(360-t)%360)}get _commonActions(){const t=(t,e,i)=>{const s=i.detail[t],n=s[0],o=s.slice(1);i.target.style[e]=l[`${n}_HTML`](o),this.annotationStorage.setValue(this.data.id,{[e]:l[`${n}_rgb`](o)})};return(0,s.shadow)(this,"_commonActions",{display:t=>{const{display:e}=t.detail,i=e%2==1;this.container.style.visibility=i?"hidden":"visible",this.annotationStorage.setValue(this.data.id,{noView:i,noPrint:1===e||2===e})},print:t=>{this.annotationStorage.setValue(this.data.id,{noPrint:!t.detail.print})},hidden:t=>{const{hidden:e}=t.detail;this.container.style.visibility=e?"hidden":"visible",this.annotationStorage.setValue(this.data.id,{noPrint:e,noView:e})},focus:t=>{setTimeout((()=>t.target.focus({preventScroll:!1})),0)},userName:t=>{t.target.title=t.detail.userName},readonly:t=>{t.target.disabled=t.detail.readonly},required:t=>{this._setRequired(t.target,t.detail.required)},bgColor:e=>{t("bgColor","backgroundColor",e)},fillColor:e=>{t("fillColor","backgroundColor",e)},fgColor:e=>{t("fgColor","color",e)},textColor:e=>{t("textColor","color",e)},borderColor:e=>{t("borderColor","borderColor",e)},strokeColor:e=>{t("strokeColor","borderColor",e)},rotation:t=>{const e=t.detail.rotation;this.setRotation(e),this.annotationStorage.setValue(this.data.id,{rotation:e})}})}_dispatchEventFromSandbox(t,e){const i=this._commonActions;for(const s of Object.keys(e.detail)){const n=t[s]||i[s];n?.(e)}}_setDefaultPropertiesFromJS(t){if(!this.enableScripting)return;const e=this.annotationStorage.getRawValue(this.data.id);if(!e)return;const i=this._commonActions;for(const[s,n]of Object.entries(e)){const o=i[s];o&&(o({detail:{[s]:n},target:t}),delete e[s])}}_createQuadrilaterals(){if(!this.container)return;const{quadPoints:t}=this.data;if(!t)return;const[e,i,s,n]=this.data.rect;if(1===t.length){const[,{x:o,y:r},{x:a,y:l}]=t[0];if(s===o&&n===r&&e===a&&i===l)return}const{style:o}=this.container;let r;if(this.#t){const{borderColor:t,borderWidth:e}=o;o.borderWidth=0,r=["url('data:image/svg+xml;utf8,",'<svg xmlns="http://www.w3.org/2000/svg"',' preserveAspectRatio="none" viewBox="0 0 1 1">',`<g fill="transparent" stroke="${t}" stroke-width="${e}">`],this.container.classList.add("hasBorder")}const a=s-e,l=n-i,{svgFactory:c}=this,d=c.createElement("svg");d.classList.add("quadrilateralsContainer"),d.setAttribute("width",0),d.setAttribute("height",0);const h=c.createElement("defs");d.append(h);const u=c.createElement("clipPath"),p=`clippath_${this.data.id}`;u.setAttribute("id",p),u.setAttribute("clipPathUnits","objectBoundingBox"),h.append(u);for(const[,{x:i,y:s},{x:o,y:d}]of t){const t=c.createElement("rect"),h=(o-e)/a,p=(n-s)/l,g=(i-o)/a,m=(s-d)/l;t.setAttribute("x",h),t.setAttribute("y",p),t.setAttribute("width",g),t.setAttribute("height",m),u.append(t),r?.push(`<rect vector-effect="non-scaling-stroke" x="${h}" y="${p}" width="${g}" height="${m}"/>`)}this.#t&&(r.push("</g></svg>')"),o.backgroundImage=r.join("")),this.container.append(d),this.container.style.clipPath=`url(#${p})`}_createPopup(){const{container:t,data:e}=this;t.setAttribute("aria-haspopup","dialog");const i=new C({data:{color:e.color,titleObj:e.titleObj,modificationDate:e.modificationDate,contentsObj:e.contentsObj,richText:e.richText,parentRect:e.rect,borderStyle:0,id:`popup_${e.id}`,rotation:e.rotation},parent:this.parent,elements:[this]});this.parent.div.append(i.render())}render(){(0,s.unreachable)("Abstract method `AnnotationElement.render` called")}_getElementsByName(t,e=null){const i=[];if(this._fieldObjects){const n=this._fieldObjects[t];if(n)for(const{page:t,id:o,exportValues:r}of n){if(-1===t)continue;if(o===e)continue;const n="string"==typeof r?r:null,a=document.querySelector(`[data-element-id="${o}"]`);!a||h.has(a)?i.push({id:o,exportValue:n,domElement:a}):(0,s.warn)(`_getElementsByName - element not allowed: ${o}`)}return i}for(const s of document.getElementsByName(t)){const{exportValue:t}=s,n=s.getAttribute("data-element-id");n!==e&&h.has(s)&&i.push({id:n,exportValue:t,domElement:s})}return i}show(){this.container&&(this.container.hidden=!1),this.popup?.maybeShow()}hide(){this.container&&(this.container.hidden=!0),this.popup?.forceHide()}getElementsToTriggerPopup(){return this.container}addHighlightArea(){const t=this.getElementsToTriggerPopup();if(Array.isArray(t))for(const e of t)e.classList.add("highlightArea");else t.classList.add("highlightArea")}get _isEditable(){return!1}_editOnDoubleClick(){if(!this._isEditable)return;const{annotationEditorType:t,data:{id:e}}=this;this.container.addEventListener("dblclick",(()=>{this.linkService.eventBus?.dispatch("switchannotationeditormode",{source:this,mode:t,editId:e})}))}}class m extends g{constructor(t,e=null){super(t,{isRenderable:!0,ignoreBorder:!!e?.ignoreBorder,createQuadrilaterals:!0}),this.isTooltipOnly=t.data.isTooltipOnly}render(){const{data:t,linkService:e}=this,i=document.createElement("a");i.setAttribute("data-element-id",t.id);let s=!1;return t.url?(e.addLinkAttributes(i,t.url,t.newWindow),s=!0):t.action?(this._bindNamedAction(i,t.action),s=!0):t.attachment?(this.#e(i,t.attachment,t.attachmentDest),s=!0):t.setOCGState?(this.#i(i,t.setOCGState),s=!0):t.dest?(this._bindLink(i,t.dest),s=!0):(t.actions&&(t.actions.Action||t.actions["Mouse Up"]||t.actions["Mouse Down"])&&this.enableScripting&&this.hasJSActions&&(this._bindJSAction(i,t),s=!0),t.resetForm?(this._bindResetFormAction(i,t.resetForm),s=!0):this.isTooltipOnly&&!s&&(this._bindLink(i,""),s=!0)),this.container.classList.add("linkAnnotation"),s&&this.container.append(i),this.container}#s(){this.container.setAttribute("data-internal-link","")}_bindLink(t,e){t.href=this.linkService.getDestinationHash(e),t.onclick=()=>(e&&this.linkService.goToDestination(e),!1),(e||""===e)&&this.#s()}_bindNamedAction(t,e){t.href=this.linkService.getAnchorUrl(""),t.onclick=()=>(this.linkService.executeNamedAction(e),!1),this.#s()}#e(t,e,i=null){t.href=this.linkService.getAnchorUrl(""),t.onclick=()=>(this.downloadManager?.openOrDownloadData(e.content,e.filename,i),!1),this.#s()}#i(t,e){t.href=this.linkService.getAnchorUrl(""),t.onclick=()=>(this.linkService.executeSetOCGState(e),!1),this.#s()}_bindJSAction(t,e){t.href=this.linkService.getAnchorUrl("");const i=new Map([["Action","onclick"],["Mouse Up","onmouseup"],["Mouse Down","onmousedown"]]);for(const s of Object.keys(e.actions)){const n=i.get(s);n&&(t[n]=()=>(this.linkService.eventBus?.dispatch("dispatcheventinsandbox",{source:this,detail:{id:e.id,name:s}}),!1))}t.onclick||(t.onclick=()=>!1),this.#s()}_bindResetFormAction(t,e){const i=t.onclick;if(i||(t.href=this.linkService.getAnchorUrl("")),this.#s(),!this._fieldObjects)return(0,s.warn)('_bindResetFormAction - "resetForm" action not supported, ensure that the `fieldObjects` parameter is provided.'),void(i||(t.onclick=()=>!1));t.onclick=()=>{i?.();const{fields:t,refs:n,include:o}=e,r=[];if(0!==t.length||0!==n.length){const e=new Set(n);for(const i of t){const t=this._fieldObjects[i]||[];for(const{id:i}of t)e.add(i)}for(const t of Object.values(this._fieldObjects))for(const i of t)e.has(i.id)===o&&r.push(i)}else for(const t of Object.values(this._fieldObjects))r.push(...t);const a=this.annotationStorage,l=[];for(const t of r){const{id:e}=t;switch(l.push(e),t.type){case"text":{const i=t.defaultValue||"";a.setValue(e,{value:i});break}case"checkbox":case"radiobutton":{const i=t.defaultValue===t.exportValues;a.setValue(e,{value:i});break}case"combobox":case"listbox":{const i=t.defaultValue||"";a.setValue(e,{value:i});break}default:continue}const i=document.querySelector(`[data-element-id="${e}"]`);i&&(h.has(i)?i.dispatchEvent(new Event("resetform")):(0,s.warn)(`_bindResetFormAction - element not allowed: ${e}`))}return this.enableScripting&&this.linkService.eventBus?.dispatch("dispatcheventinsandbox",{source:this,detail:{id:"app",ids:l,name:"ResetForm"}}),!1}}}class f extends g{constructor(t){super(t,{isRenderable:!0})}render(){this.container.classList.add("textAnnotation");const t=document.createElement("img");return t.src=this.imageResourcesPath+"annotation-"+this.data.name.toLowerCase()+".svg",t.setAttribute("data-l10n-id","pdfjs-text-annotation-type"),t.setAttribute("data-l10n-args",JSON.stringify({type:this.data.name})),!this.data.popupRef&&this.hasPopupData&&this._createPopup(),this.container.append(t),this.container}}class b extends g{render(){return this.data.alternativeText&&(this.container.title=this.data.alternativeText),this.container}showElementAndHideCanvas(t){this.data.hasOwnCanvas&&("CANVAS"===t.previousSibling?.nodeName&&(t.previousSibling.hidden=!0),t.hidden=!1)}_getKeyModifier(t){return s.FeatureTest.platform.isMac?t.metaKey:t.ctrlKey}_setEventListener(t,e,i,s,n){i.includes("mouse")?t.addEventListener(i,(t=>{this.linkService.eventBus?.dispatch("dispatcheventinsandbox",{source:this,detail:{id:this.data.id,name:s,value:n(t),shift:t.shiftKey,modifier:this._getKeyModifier(t)}})})):t.addEventListener(i,(t=>{if("blur"===i){if(!e.focused||!t.relatedTarget)return;e.focused=!1}else if("focus"===i){if(e.focused)return;e.focused=!0}n&&this.linkService.eventBus?.dispatch("dispatcheventinsandbox",{source:this,detail:{id:this.data.id,name:s,value:n(t)}})}))}_setEventListeners(t,e,i,s){for(const[n,o]of i)("Action"===o||this.data.actions?.[o])&&("Focus"!==o&&"Blur"!==o||(e||={focused:!1}),this._setEventListener(t,e,n,o,s),"Focus"!==o||this.data.actions?.Blur?"Blur"!==o||this.data.actions?.Focus||this._setEventListener(t,e,"focus","Focus",null):this._setEventListener(t,e,"blur","Blur",null))}_setBackgroundColor(t){const e=this.data.backgroundColor||null;t.style.backgroundColor=null===e?"transparent":s.Util.makeHexColor(e[0],e[1],e[2])}_setTextStyle(t){const{fontColor:e}=this.data.defaultAppearanceData,i=this.data.defaultAppearanceData.fontSize||9,n=t.style;let o;const r=t=>Math.round(10*t)/10;if(this.data.multiLine){const t=Math.abs(this.data.rect[3]-this.data.rect[1]-2),e=t/(Math.round(t/(s.LINE_FACTOR*i))||1);o=Math.min(i,r(e/s.LINE_FACTOR))}else{const t=Math.abs(this.data.rect[3]-this.data.rect[1]-2);o=Math.min(i,r(t/s.LINE_FACTOR))}n.fontSize=`calc(${o}px * var(--scale-factor))`,n.color=s.Util.makeHexColor(e[0],e[1],e[2]),null!==this.data.textAlignment&&(n.textAlign=["left","center","right"][this.data.textAlignment])}_setRequired(t,e){e?t.setAttribute("required",!0):t.removeAttribute("required"),t.setAttribute("aria-required",e)}}class v extends b{constructor(t){super(t,{isRenderable:t.renderForms||t.data.hasOwnCanvas||!t.data.hasAppearance&&!!t.data.fieldValue})}setPropertyOnSiblings(t,e,i,s){const n=this.annotationStorage;for(const o of this._getElementsByName(t.name,t.id))o.domElement&&(o.domElement[e]=i),n.setValue(o.id,{[s]:i})}render(){const t=this.annotationStorage,e=this.data.id;this.container.classList.add("textWidgetAnnotation");let i=null;if(this.renderForms){const s=t.getValue(e,{value:this.data.fieldValue});let n=s.value||"";const o=t.getValue(e,{charLimit:this.data.maxLen}).charLimit;o&&n.length>o&&(n=n.slice(0,o));let r=s.formattedValue||this.data.textContent?.join("\n")||null;r&&this.data.comb&&(r=r.replaceAll(/\s+/g,""));const a={userValue:n,formattedValue:r,lastCommittedValue:null,commitKey:1,focused:!1};this.data.multiLine?(i=document.createElement("textarea"),i.textContent=r??n,this.data.doNotScroll&&(i.style.overflowY="hidden")):(i=document.createElement("input"),i.type="text",i.setAttribute("value",r??n),this.data.doNotScroll&&(i.style.overflowX="hidden")),this.data.hasOwnCanvas&&(i.hidden=!0),h.add(i),i.setAttribute("data-element-id",e),i.disabled=this.data.readOnly,i.name=this.data.fieldName,i.tabIndex=d,this._setRequired(i,this.data.required),o&&(i.maxLength=o),i.addEventListener("input",(s=>{t.setValue(e,{value:s.target.value}),this.setPropertyOnSiblings(i,"value",s.target.value,"value"),a.formattedValue=null})),i.addEventListener("resetform",(t=>{const e=this.data.defaultFieldValue??"";i.value=a.userValue=e,a.formattedValue=null}));let l=t=>{const{formattedValue:e}=a;null!=e&&(t.target.value=e),t.target.scrollLeft=0};if(this.enableScripting&&this.hasJSActions){i.addEventListener("focus",(t=>{if(a.focused)return;const{target:e}=t;a.userValue&&(e.value=a.userValue),a.lastCommittedValue=e.value,a.commitKey=1,this.data.actions?.Focus||(a.focused=!0)})),i.addEventListener("updatefromsandbox",(i=>{this.showElementAndHideCanvas(i.target);const s={value(i){a.userValue=i.detail.value??"",t.setValue(e,{value:a.userValue.toString()}),i.target.value=a.userValue},formattedValue(i){const{formattedValue:s}=i.detail;a.formattedValue=s,null!=s&&i.target!==document.activeElement&&(i.target.value=s),t.setValue(e,{formattedValue:s})},selRange(t){t.target.setSelectionRange(...t.detail.selRange)},charLimit:i=>{const{charLimit:s}=i.detail,{target:n}=i;if(0===s)return void n.removeAttribute("maxLength");n.setAttribute("maxLength",s);let o=a.userValue;!o||o.length<=s||(o=o.slice(0,s),n.value=a.userValue=o,t.setValue(e,{value:o}),this.linkService.eventBus?.dispatch("dispatcheventinsandbox",{source:this,detail:{id:e,name:"Keystroke",value:o,willCommit:!0,commitKey:1,selStart:n.selectionStart,selEnd:n.selectionEnd}}))}};this._dispatchEventFromSandbox(s,i)})),i.addEventListener("keydown",(t=>{a.commitKey=1;let i=-1;if("Escape"===t.key?i=0:"Enter"!==t.key||this.data.multiLine?"Tab"===t.key&&(a.commitKey=3):i=2,-1===i)return;const{value:s}=t.target;a.lastCommittedValue!==s&&(a.lastCommittedValue=s,a.userValue=s,this.linkService.eventBus?.dispatch("dispatcheventinsandbox",{source:this,detail:{id:e,name:"Keystroke",value:s,willCommit:!0,commitKey:i,selStart:t.target.selectionStart,selEnd:t.target.selectionEnd}}))}));const s=l;l=null,i.addEventListener("blur",(t=>{if(!a.focused||!t.relatedTarget)return;this.data.actions?.Blur||(a.focused=!1);const{value:i}=t.target;a.userValue=i,a.lastCommittedValue!==i&&this.linkService.eventBus?.dispatch("dispatcheventinsandbox",{source:this,detail:{id:e,name:"Keystroke",value:i,willCommit:!0,commitKey:a.commitKey,selStart:t.target.selectionStart,selEnd:t.target.selectionEnd}}),s(t)})),this.data.actions?.Keystroke&&i.addEventListener("beforeinput",(t=>{a.lastCommittedValue=null;const{data:i,target:s}=t,{value:n,selectionStart:o,selectionEnd:r}=s;let l=o,c=r;switch(t.inputType){case"deleteWordBackward":{const t=n.substring(0,o).match(/\w*[^\w]*$/);t&&(l-=t[0].length);break}case"deleteWordForward":{const t=n.substring(o).match(/^[^\w]*\w*/);t&&(c+=t[0].length);break}case"deleteContentBackward":o===r&&(l-=1);break;case"deleteContentForward":o===r&&(c+=1)}t.preventDefault(),this.linkService.eventBus?.dispatch("dispatcheventinsandbox",{source:this,detail:{id:e,name:"Keystroke",value:n,change:i||"",willCommit:!1,selStart:l,selEnd:c}})})),this._setEventListeners(i,a,[["focus","Focus"],["blur","Blur"],["mousedown","Mouse Down"],["mouseenter","Mouse Enter"],["mouseleave","Mouse Exit"],["mouseup","Mouse Up"]],(t=>t.target.value))}if(l&&i.addEventListener("blur",l),this.data.comb){const t=(this.data.rect[2]-this.data.rect[0])/o;i.classList.add("comb"),i.style.letterSpacing=`calc(${t}px * var(--scale-factor) - 1ch)`}}else i=document.createElement("div"),i.textContent=this.data.fieldValue,i.style.verticalAlign="middle",i.style.display="table-cell",this.data.hasOwnCanvas&&(i.hidden=!0);return this._setTextStyle(i),this._setBackgroundColor(i),this._setDefaultPropertiesFromJS(i),this.container.append(i),this.container}}class y extends b{constructor(t){super(t,{isRenderable:!!t.data.hasOwnCanvas})}}class w extends b{constructor(t){super(t,{isRenderable:t.renderForms})}render(){const t=this.annotationStorage,e=this.data,i=e.id;let s=t.getValue(i,{value:e.exportValue===e.fieldValue}).value;"string"==typeof s&&(s="Off"!==s,t.setValue(i,{value:s})),this.container.classList.add("buttonWidgetAnnotation","checkBox");const n=document.createElement("input");return h.add(n),n.setAttribute("data-element-id",i),n.disabled=e.readOnly,this._setRequired(n,this.data.required),n.type="checkbox",n.name=e.fieldName,s&&n.setAttribute("checked",!0),n.setAttribute("exportValue",e.exportValue),n.tabIndex=d,n.addEventListener("change",(s=>{const{name:n,checked:o}=s.target;for(const s of this._getElementsByName(n,i)){const i=o&&s.exportValue===e.exportValue;s.domElement&&(s.domElement.checked=i),t.setValue(s.id,{value:i})}t.setValue(i,{value:o})})),n.addEventListener("resetform",(t=>{const i=e.defaultFieldValue||"Off";t.target.checked=i===e.exportValue})),this.enableScripting&&this.hasJSActions&&(n.addEventListener("updatefromsandbox",(e=>{const s={value(e){e.target.checked="Off"!==e.detail.value,t.setValue(i,{value:e.target.checked})}};this._dispatchEventFromSandbox(s,e)})),this._setEventListeners(n,null,[["change","Validate"],["change","Action"],["focus","Focus"],["blur","Blur"],["mousedown","Mouse Down"],["mouseenter","Mouse Enter"],["mouseleave","Mouse Exit"],["mouseup","Mouse Up"]],(t=>t.target.checked))),this._setBackgroundColor(n),this._setDefaultPropertiesFromJS(n),this.container.append(n),this.container}}class k extends b{constructor(t){super(t,{isRenderable:t.renderForms})}render(){this.container.classList.add("buttonWidgetAnnotation","radioButton");const t=this.annotationStorage,e=this.data,i=e.id;let s=t.getValue(i,{value:e.fieldValue===e.buttonValue}).value;if("string"==typeof s&&(s=s!==e.buttonValue,t.setValue(i,{value:s})),s)for(const s of this._getElementsByName(e.fieldName,i))t.setValue(s.id,{value:!1});const n=document.createElement("input");if(h.add(n),n.setAttribute("data-element-id",i),n.disabled=e.readOnly,this._setRequired(n,this.data.required),n.type="radio",n.name=e.fieldName,s&&n.setAttribute("checked",!0),n.tabIndex=d,n.addEventListener("change",(e=>{const{name:s,checked:n}=e.target;for(const e of this._getElementsByName(s,i))t.setValue(e.id,{value:!1});t.setValue(i,{value:n})})),n.addEventListener("resetform",(t=>{const i=e.defaultFieldValue;t.target.checked=null!=i&&i===e.buttonValue})),this.enableScripting&&this.hasJSActions){const s=e.buttonValue;n.addEventListener("updatefromsandbox",(e=>{const n={value:e=>{const n=s===e.detail.value;for(const s of this._getElementsByName(e.target.name)){const e=n&&s.id===i;s.domElement&&(s.domElement.checked=e),t.setValue(s.id,{value:e})}}};this._dispatchEventFromSandbox(n,e)})),this._setEventListeners(n,null,[["change","Validate"],["change","Action"],["focus","Focus"],["blur","Blur"],["mousedown","Mouse Down"],["mouseenter","Mouse Enter"],["mouseleave","Mouse Exit"],["mouseup","Mouse Up"]],(t=>t.target.checked))}return this._setBackgroundColor(n),this._setDefaultPropertiesFromJS(n),this.container.append(n),this.container}}class x extends m{constructor(t){super(t,{ignoreBorder:t.data.hasAppearance})}render(){const t=super.render();t.classList.add("buttonWidgetAnnotation","pushButton"),this.data.alternativeText&&(t.title=this.data.alternativeText);const e=t.lastChild;return this.enableScripting&&this.hasJSActions&&e&&(this._setDefaultPropertiesFromJS(e),e.addEventListener("updatefromsandbox",(t=>{this._dispatchEventFromSandbox({},t)}))),t}}class E extends b{constructor(t){super(t,{isRenderable:t.renderForms})}render(){this.container.classList.add("choiceWidgetAnnotation");const t=this.annotationStorage,e=this.data.id,i=t.getValue(e,{value:this.data.fieldValue}),s=document.createElement("select");h.add(s),s.setAttribute("data-element-id",e),s.disabled=this.data.readOnly,this._setRequired(s,this.data.required),s.name=this.data.fieldName,s.tabIndex=d;let n=this.data.combo&&this.data.options.length>0;this.data.combo||(s.size=this.data.options.length,this.data.multiSelect&&(s.multiple=!0)),s.addEventListener("resetform",(t=>{const e=this.data.defaultFieldValue;for(const t of s.options)t.selected=t.value===e}));for(const t of this.data.options){const e=document.createElement("option");e.textContent=t.displayValue,e.value=t.exportValue,i.value.includes(t.exportValue)&&(e.setAttribute("selected",!0),n=!1),s.append(e)}let o=null;if(n){const t=document.createElement("option");t.value=" ",t.setAttribute("hidden",!0),t.setAttribute("selected",!0),s.prepend(t),o=()=>{t.remove(),s.removeEventListener("input",o),o=null},s.addEventListener("input",o)}const r=t=>{const e=t?"value":"textContent",{options:i,multiple:n}=s;return n?Array.prototype.filter.call(i,(t=>t.selected)).map((t=>t[e])):-1===i.selectedIndex?null:i[i.selectedIndex][e]};let a=r(!1);const l=t=>{const e=t.target.options;return Array.prototype.map.call(e,(t=>({displayValue:t.textContent,exportValue:t.value})))};return this.enableScripting&&this.hasJSActions?(s.addEventListener("updatefromsandbox",(i=>{const n={value(i){o?.();const n=i.detail.value,l=new Set(Array.isArray(n)?n:[n]);for(const t of s.options)t.selected=l.has(t.value);t.setValue(e,{value:r(!0)}),a=r(!1)},multipleSelection(t){s.multiple=!0},remove(i){const n=s.options,o=i.detail.remove;n[o].selected=!1,s.remove(o),n.length>0&&-1===Array.prototype.findIndex.call(n,(t=>t.selected))&&(n[0].selected=!0),t.setValue(e,{value:r(!0),items:l(i)}),a=r(!1)},clear(i){for(;0!==s.length;)s.remove(0);t.setValue(e,{value:null,items:[]}),a=r(!1)},insert(i){const{index:n,displayValue:o,exportValue:c}=i.detail.insert,d=s.children[n],h=document.createElement("option");h.textContent=o,h.value=c,d?d.before(h):s.append(h),t.setValue(e,{value:r(!0),items:l(i)}),a=r(!1)},items(i){const{items:n}=i.detail;for(;0!==s.length;)s.remove(0);for(const t of n){const{displayValue:e,exportValue:i}=t,n=document.createElement("option");n.textContent=e,n.value=i,s.append(n)}s.options.length>0&&(s.options[0].selected=!0),t.setValue(e,{value:r(!0),items:l(i)}),a=r(!1)},indices(i){const s=new Set(i.detail.indices);for(const t of i.target.options)t.selected=s.has(t.index);t.setValue(e,{value:r(!0)}),a=r(!1)},editable(t){t.target.disabled=!t.detail.editable}};this._dispatchEventFromSandbox(n,i)})),s.addEventListener("input",(i=>{const s=r(!0);t.setValue(e,{value:s}),i.preventDefault(),this.linkService.eventBus?.dispatch("dispatcheventinsandbox",{source:this,detail:{id:e,name:"Keystroke",value:a,changeEx:s,willCommit:!1,commitKey:1,keyDown:!1}})})),this._setEventListeners(s,null,[["focus","Focus"],["blur","Blur"],["mousedown","Mouse Down"],["mouseenter","Mouse Enter"],["mouseleave","Mouse Exit"],["mouseup","Mouse Up"],["input","Action"],["input","Validate"]],(t=>t.target.value))):s.addEventListener("input",(function(i){t.setValue(e,{value:r(!0)})})),this.data.combo&&this._setTextStyle(s),this._setBackgroundColor(s),this._setDefaultPropertiesFromJS(s),this.container.append(s),this.container}}class C extends g{constructor(t){const{data:e,elements:i}=t;super(t,{isRenderable:g._hasPopupData(e)}),this.elements=i}render(){this.container.classList.add("popupAnnotation");const t=new A({container:this.container,color:this.data.color,titleObj:this.data.titleObj,modificationDate:this.data.modificationDate,contentsObj:this.data.contentsObj,richText:this.data.richText,rect:this.data.rect,parentRect:this.data.parentRect||null,parent:this.parent,elements:this.elements,open:this.data.open}),e=[];for(const i of this.elements)i.popup=t,e.push(i.data.id),i.addHighlightArea();return this.container.setAttribute("aria-controls",e.map((t=>`${s.AnnotationPrefix}${t}`)).join(",")),this.container}}class A{#n=this.#o.bind(this);#r=this.#a.bind(this);#l=this.#c.bind(this);#d=this.#h.bind(this);#u=null;#p=null;#g=null;#m=null;#f=null;#b=null;#v=null;#y=!1;#w=null;#k=null;#x=null;#E=null;#C=!1;constructor({container:t,color:e,elements:i,titleObj:s,modificationDate:o,contentsObj:r,richText:a,parent:l,rect:c,parentRect:d,open:h}){this.#p=t,this.#E=s,this.#g=r,this.#x=a,this.#b=l,this.#u=e,this.#k=c,this.#v=d,this.#f=i,this.#m=n.PDFDateString.toDateObject(o),this.trigger=i.flatMap((t=>t.getElementsToTriggerPopup()));for(const t of this.trigger)t.addEventListener("click",this.#d),t.addEventListener("mouseenter",this.#l),t.addEventListener("mouseleave",this.#r),t.classList.add("popupTriggerArea");for(const t of i)t.container?.addEventListener("keydown",this.#n);this.#p.hidden=!0,h&&this.#h()}render(){if(this.#w)return;const{page:{view:t},viewport:{rawDims:{pageWidth:e,pageHeight:i,pageX:n,pageY:o}}}=this.#b,r=this.#w=document.createElement("div");if(r.className="popup",this.#u){const t=r.style.outlineColor=s.Util.makeHexColor(...this.#u);if(CSS.supports("background-color","color-mix(in srgb, red 30%, white)"))r.style.backgroundColor=`color-mix(in srgb, ${t} 30%, white)`;else{const t=.7;r.style.backgroundColor=s.Util.makeHexColor(...this.#u.map((e=>Math.floor(t*(255-e)+e))))}}const a=document.createElement("span");a.className="header";const l=document.createElement("h1");if(a.append(l),({dir:l.dir,str:l.textContent}=this.#E),r.append(a),this.#m){const t=document.createElement("span");t.classList.add("popupDate"),t.setAttribute("data-l10n-id","pdfjs-annotation-date-string"),t.setAttribute("data-l10n-args",JSON.stringify({date:this.#m.toLocaleDateString(),time:this.#m.toLocaleTimeString()})),a.append(t)}const d=this.#g,h=this.#x;if(!h?.str||d?.str&&d.str!==h.str){const t=this._formatContents(d);r.append(t)}else c.XfaLayer.render({xfaHtml:h.html,intent:"richText",div:r}),r.lastChild.classList.add("richText","popupContent");let u=!!this.#v,p=u?this.#v:this.#k;for(const t of this.#f)if(!p||null!==s.Util.intersect(t.data.rect,p)){p=t.data.rect,u=!0;break}const g=s.Util.normalizeRect([p[0],t[3]-p[1]+t[1],p[2],t[3]-p[3]+t[1]]),m=u?p[2]-p[0]+5:0,f=g[0]+m,b=g[1],{style:v}=this.#p;v.left=100*(f-n)/e+"%",v.top=100*(b-o)/i+"%",this.#p.append(r)}_formatContents({str:t,dir:e}){const i=document.createElement("p");i.classList.add("popupContent"),i.dir=e;const s=t.split(/(?:\r\n?|\n)/);for(let t=0,e=s.length;t<e;++t){const n=s[t];i.append(document.createTextNode(n)),t<e-1&&i.append(document.createElement("br"))}return i}#o(t){t.altKey||t.shiftKey||t.ctrlKey||t.metaKey||("Enter"===t.key||"Escape"===t.key&&this.#y)&&this.#h()}#h(){this.#y=!this.#y,this.#y?(this.#c(),this.#p.addEventListener("click",this.#d),this.#p.addEventListener("keydown",this.#n)):(this.#a(),this.#p.removeEventListener("click",this.#d),this.#p.removeEventListener("keydown",this.#n))}#c(){this.#w||this.render(),this.isVisible?this.#y&&this.#p.classList.add("focused"):(this.#p.hidden=!1,this.#p.style.zIndex=parseInt(this.#p.style.zIndex)+1e3)}#a(){this.#p.classList.remove("focused"),!this.#y&&this.isVisible&&(this.#p.hidden=!0,this.#p.style.zIndex=parseInt(this.#p.style.zIndex)-1e3)}forceHide(){this.#C=this.isVisible,this.#C&&(this.#p.hidden=!0)}maybeShow(){this.#C&&(this.#C=!1,this.#p.hidden=!1)}get isVisible(){return!1===this.#p.hidden}}class S extends g{constructor(t){super(t,{isRenderable:!0,ignoreBorder:!0}),this.textContent=t.data.textContent,this.textPosition=t.data.textPosition,this.annotationEditorType=s.AnnotationEditorType.FREETEXT}render(){if(this.container.classList.add("freeTextAnnotation"),this.textContent){const t=document.createElement("div");t.classList.add("annotationTextContent"),t.setAttribute("role","comment");for(const e of this.textContent){const i=document.createElement("span");i.textContent=e,t.append(i)}this.container.append(t)}return!this.data.popupRef&&this.hasPopupData&&this._createPopup(),this._editOnDoubleClick(),this.container}get _isEditable(){return this.data.hasOwnCanvas}}class T extends g{#A=null;constructor(t){super(t,{isRenderable:!0,ignoreBorder:!0})}render(){this.container.classList.add("lineAnnotation");const t=this.data,{width:e,height:i}=u(t.rect),s=this.svgFactory.create(e,i,!0),n=this.#A=this.svgFactory.createElement("svg:line");return n.setAttribute("x1",t.rect[2]-t.lineCoordinates[0]),n.setAttribute("y1",t.rect[3]-t.lineCoordinates[1]),n.setAttribute("x2",t.rect[2]-t.lineCoordinates[2]),n.setAttribute("y2",t.rect[3]-t.lineCoordinates[3]),n.setAttribute("stroke-width",t.borderStyle.width||1),n.setAttribute("stroke","transparent"),n.setAttribute("fill","transparent"),s.append(n),this.container.append(s),!t.popupRef&&this.hasPopupData&&this._createPopup(),this.container}getElementsToTriggerPopup(){return this.#A}addHighlightArea(){this.container.classList.add("highlightArea")}}class _ extends g{#S=null;constructor(t){super(t,{isRenderable:!0,ignoreBorder:!0})}render(){this.container.classList.add("squareAnnotation");const t=this.data,{width:e,height:i}=u(t.rect),s=this.svgFactory.create(e,i,!0),n=t.borderStyle.width,o=this.#S=this.svgFactory.createElement("svg:rect");return o.setAttribute("x",n/2),o.setAttribute("y",n/2),o.setAttribute("width",e-n),o.setAttribute("height",i-n),o.setAttribute("stroke-width",n||1),o.setAttribute("stroke","transparent"),o.setAttribute("fill","transparent"),s.append(o),this.container.append(s),!t.popupRef&&this.hasPopupData&&this._createPopup(),this.container}getElementsToTriggerPopup(){return this.#S}addHighlightArea(){this.container.classList.add("highlightArea")}}class M extends g{#T=null;constructor(t){super(t,{isRenderable:!0,ignoreBorder:!0})}render(){this.container.classList.add("circleAnnotation");const t=this.data,{width:e,height:i}=u(t.rect),s=this.svgFactory.create(e,i,!0),n=t.borderStyle.width,o=this.#T=this.svgFactory.createElement("svg:ellipse");return o.setAttribute("cx",e/2),o.setAttribute("cy",i/2),o.setAttribute("rx",e/2-n/2),o.setAttribute("ry",i/2-n/2),o.setAttribute("stroke-width",n||1),o.setAttribute("stroke","transparent"),o.setAttribute("fill","transparent"),s.append(o),this.container.append(s),!t.popupRef&&this.hasPopupData&&this._createPopup(),this.container}getElementsToTriggerPopup(){return this.#T}addHighlightArea(){this.container.classList.add("highlightArea")}}class I extends g{#_=null;constructor(t){super(t,{isRenderable:!0,ignoreBorder:!0}),this.containerClassName="polylineAnnotation",this.svgElementName="svg:polyline"}render(){this.container.classList.add(this.containerClassName);const t=this.data,{width:e,height:i}=u(t.rect),s=this.svgFactory.create(e,i,!0);let n=[];for(const e of t.vertices){const i=e.x-t.rect[0],s=t.rect[3]-e.y;n.push(i+","+s)}n=n.join(" ");const o=this.#_=this.svgFactory.createElement(this.svgElementName);return o.setAttribute("points",n),o.setAttribute("stroke-width",t.borderStyle.width||1),o.setAttribute("stroke","transparent"),o.setAttribute("fill","transparent"),s.append(o),this.container.append(s),!t.popupRef&&this.hasPopupData&&this._createPopup(),this.container}getElementsToTriggerPopup(){return this.#_}addHighlightArea(){this.container.classList.add("highlightArea")}}class B extends I{constructor(t){super(t),this.containerClassName="polygonAnnotation",this.svgElementName="svg:polygon"}}class L extends g{constructor(t){super(t,{isRenderable:!0,ignoreBorder:!0})}render(){return this.container.classList.add("caretAnnotation"),!this.data.popupRef&&this.hasPopupData&&this._createPopup(),this.container}}class P extends g{#M=[];constructor(t){super(t,{isRenderable:!0,ignoreBorder:!0}),this.containerClassName="inkAnnotation",this.svgElementName="svg:polyline",this.annotationEditorType=s.AnnotationEditorType.INK}render(){this.container.classList.add(this.containerClassName);const t=this.data,{width:e,height:i}=u(t.rect),s=this.svgFactory.create(e,i,!0);for(const e of t.inkLists){let i=[];for(const s of e){const e=s.x-t.rect[0],n=t.rect[3]-s.y;i.push(`${e},${n}`)}i=i.join(" ");const n=this.svgFactory.createElement(this.svgElementName);this.#M.push(n),n.setAttribute("points",i),n.setAttribute("stroke-width",t.borderStyle.width||1),n.setAttribute("stroke","transparent"),n.setAttribute("fill","transparent"),!t.popupRef&&this.hasPopupData&&this._createPopup(),s.append(n)}return this.container.append(s),this.container}getElementsToTriggerPopup(){return this.#M}addHighlightArea(){this.container.classList.add("highlightArea")}}class R extends g{constructor(t){super(t,{isRenderable:!0,ignoreBorder:!0,createQuadrilaterals:!0})}render(){return!this.data.popupRef&&this.hasPopupData&&this._createPopup(),this.container.classList.add("highlightAnnotation"),this.container}}class D extends g{constructor(t){super(t,{isRenderable:!0,ignoreBorder:!0,createQuadrilaterals:!0})}render(){return!this.data.popupRef&&this.hasPopupData&&this._createPopup(),this.container.classList.add("underlineAnnotation"),this.container}}class O extends g{constructor(t){super(t,{isRenderable:!0,ignoreBorder:!0,createQuadrilaterals:!0})}render(){return!this.data.popupRef&&this.hasPopupData&&this._createPopup(),this.container.classList.add("squigglyAnnotation"),this.container}}class F extends g{constructor(t){super(t,{isRenderable:!0,ignoreBorder:!0,createQuadrilaterals:!0})}render(){return!this.data.popupRef&&this.hasPopupData&&this._createPopup(),this.container.classList.add("strikeoutAnnotation"),this.container}}class N extends g{constructor(t){super(t,{isRenderable:!0,ignoreBorder:!0})}render(){return this.container.classList.add("stampAnnotation"),!this.data.popupRef&&this.hasPopupData&&this._createPopup(),this.container}}class H extends g{#I=null;constructor(t){super(t,{isRenderable:!0});const{filename:e,content:i}=this.data.file;this.filename=(0,n.getFilenameFromUrl)(e,!0),this.content=i,this.linkService.eventBus?.dispatch("fileattachmentannotation",{source:this,filename:e,content:i})}render(){this.container.classList.add("fileAttachmentAnnotation");const{container:t,data:e}=this;let i;e.hasAppearance||0===e.fillAlpha?i=document.createElement("div"):(i=document.createElement("img"),i.src=`${this.imageResourcesPath}annotation-${/paperclip/i.test(e.name)?"paperclip":"pushpin"}.svg`,e.fillAlpha&&e.fillAlpha<1&&(i.style=`filter: opacity(${Math.round(100*e.fillAlpha)}%);`)),i.addEventListener("dblclick",this.#B.bind(this)),this.#I=i;const{isMac:n}=s.FeatureTest.platform;return t.addEventListener("keydown",(t=>{"Enter"===t.key&&(n?t.metaKey:t.ctrlKey)&&this.#B()})),!e.popupRef&&this.hasPopupData?this._createPopup():i.classList.add("popupTriggerArea"),t.append(i),t}getElementsToTriggerPopup(){return this.#I}addHighlightArea(){this.container.classList.add("highlightArea")}#B(){this.downloadManager?.openOrDownloadData(this.content,this.filename)}}class z{#L=null;#P=null;#R=new Map;constructor({div:t,accessibilityManager:e,annotationCanvasMap:i,page:s,viewport:n}){this.div=t,this.#L=e,this.#P=i,this.page=s,this.viewport=n,this.zIndex=0}#D(t,e){const i=t.firstChild||t;i.id=`${s.AnnotationPrefix}${e}`,this.div.append(t),this.#L?.moveElementInDOM(this.div,t,i,!1)}async render(t){const{annotations:e}=t,i=this.div;(0,n.setLayerDimensions)(i,this.viewport);const r=new Map,a={data:null,layer:i,linkService:t.linkService,downloadManager:t.downloadManager,imageResourcesPath:t.imageResourcesPath||"",renderForms:!1!==t.renderForms,svgFactory:new n.DOMSVGFactory,annotationStorage:t.annotationStorage||new o.AnnotationStorage,enableScripting:!0===t.enableScripting,hasJSActions:t.hasJSActions,fieldObjects:t.fieldObjects,parent:this,elements:null};for(const t of e){if(t.noHTML)continue;const e=t.annotationType===s.AnnotationType.POPUP;if(e){const e=r.get(t.id);if(!e)continue;a.elements=e}else{const{width:e,height:i}=u(t.rect);if(e<=0||i<=0)continue}a.data=t;const i=p.create(a);if(!i.isRenderable)continue;if(!e&&t.popupRef){const e=r.get(t.popupRef);e?e.push(i):r.set(t.popupRef,[i])}i.annotationEditorType>0&&this.#R.set(i.data.id,i);const n=i.render();t.hidden&&(n.style.visibility="hidden"),this.#D(n,t.id)}this.#O()}update({viewport:t}){const e=this.div;this.viewport=t,(0,n.setLayerDimensions)(e,{rotation:t.rotation}),this.#O(),e.hidden=!1}#O(){if(!this.#P)return;const t=this.div;for(const[e,i]of this.#P){const s=t.querySelector(`[data-annotation-id="${e}"]`);if(!s)continue;const{firstChild:n}=s;n?"CANVAS"===n.nodeName?n.replaceWith(i):n.before(i):s.append(i)}this.#P.clear()}getEditableAnnotations(){return Array.from(this.#R.values())}getEditableAnnotation(t){return this.#R.get(t)}}},780:(t,e,i)=>{i.d(e,{AnnotationStorage:()=>a,PrintAnnotationStorage:()=>l,SerializableEmpty:()=>r});var s=i(266),n=i(115),o=i(825);const r=Object.freeze({map:null,hash:"",transfer:void 0});class a{#F=!1;#N=new Map;constructor(){this.onSetModified=null,this.onResetModified=null,this.onAnnotationEditor=null}getValue(t,e){const i=this.#N.get(t);return void 0===i?e:Object.assign(e,i)}getRawValue(t){return this.#N.get(t)}remove(t){if(this.#N.delete(t),0===this.#N.size&&this.resetModified(),"function"==typeof this.onAnnotationEditor){for(const t of this.#N.values())if(t instanceof n.AnnotationEditor)return;this.onAnnotationEditor(null)}}setValue(t,e){const i=this.#N.get(t);let s=!1;if(void 0!==i)for(const[t,n]of Object.entries(e))i[t]!==n&&(s=!0,i[t]=n);else s=!0,this.#N.set(t,e);s&&this.#H(),e instanceof n.AnnotationEditor&&"function"==typeof this.onAnnotationEditor&&this.onAnnotationEditor(e.constructor._type)}has(t){return this.#N.has(t)}getAll(){return this.#N.size>0?(0,s.objectFromMap)(this.#N):null}setAll(t){for(const[e,i]of Object.entries(t))this.setValue(e,i)}get size(){return this.#N.size}#H(){this.#F||(this.#F=!0,"function"==typeof this.onSetModified&&this.onSetModified())}resetModified(){this.#F&&(this.#F=!1,"function"==typeof this.onResetModified&&this.onResetModified())}get print(){return new l(this)}get serializable(){if(0===this.#N.size)return r;const t=new Map,e=new o.MurmurHash3_64,i=[],s=Object.create(null);let a=!1;for(const[i,o]of this.#N){const r=o instanceof n.AnnotationEditor?o.serialize(!1,s):o;r&&(t.set(i,r),e.update(`${i}:${JSON.stringify(r)}`),a||=!!r.bitmap)}if(a)for(const e of t.values())e.bitmap&&i.push(e.bitmap);return t.size>0?{map:t,hash:e.hexdigest(),transfer:i}:r}}class l extends a{#z;constructor(t){super();const{map:e,hash:i,transfer:s}=t.serializable,n=structuredClone(e,s?{transfer:s}:null);this.#z={map:n,hash:i,transfer:s}}get print(){(0,s.unreachable)("Should not call PrintAnnotationStorage.print")}get serializable(){return this.#z}}},406:(t,e,i)=>{i.a(t,(async(t,s)=>{try{i.d(e,{PDFDataRangeTransport:()=>L,PDFWorker:()=>F,build:()=>$,getDocument:()=>T,version:()=>j});var n=i(266),o=i(780),r=i(473),a=i(742),l=i(738),c=i(250),d=i(368),h=i(694),u=i(472),p=i(890),g=i(92),m=i(171),f=i(474),b=i(498),v=i(521),y=t([l,b]);[l,b]=y.then?(await y)():y;const w=65536,k=100,x=5e3,E=n.isNodeJS?l.NodeCanvasFactory:r.DOMCanvasFactory,C=n.isNodeJS?l.NodeCMapReaderFactory:r.DOMCMapReaderFactory,A=n.isNodeJS?l.NodeFilterFactory:r.DOMFilterFactory,S=n.isNodeJS?l.NodeStandardFontDataFactory:r.DOMStandardFontDataFactory;function T(t){if("string"==typeof t||t instanceof URL?t={url:t}:(0,n.isArrayBuffer)(t)&&(t={data:t}),"object"!=typeof t)throw new Error("Invalid parameter in getDocument, need parameter object.");if(!t.url&&!t.data&&!t.range)throw new Error("Invalid parameter object: need either .data, .range or .url");const e=new B,{docId:i}=e,s=t.url?M(t.url):null,o=t.data?I(t.data):null,a=t.httpHeaders||null,l=!0===t.withCredentials,c=t.password??null,u=t.range instanceof L?t.range:null,p=Number.isInteger(t.rangeChunkSize)&&t.rangeChunkSize>0?t.rangeChunkSize:w;let v=t.worker instanceof F?t.worker:null;const y=t.verbosity,k="string"!=typeof t.docBaseUrl||(0,r.isDataScheme)(t.docBaseUrl)?null:t.docBaseUrl,x="string"==typeof t.cMapUrl?t.cMapUrl:null,T=!1!==t.cMapPacked,P=t.CMapReaderFactory||C,R="string"==typeof t.standardFontDataUrl?t.standardFontDataUrl:null,D=t.StandardFontDataFactory||S,O=!0!==t.stopAtErrors,H=Number.isInteger(t.maxImageSize)&&t.maxImageSize>-1?t.maxImageSize:-1,z=!1!==t.isEvalSupported,U="boolean"==typeof t.isOffscreenCanvasSupported?t.isOffscreenCanvasSupported:!n.isNodeJS,j=Number.isInteger(t.canvasMaxAreaInBytes)?t.canvasMaxAreaInBytes:-1,$="boolean"==typeof t.disableFontFace?t.disableFontFace:n.isNodeJS,W=!0===t.fontExtraProperties,V=!0===t.enableXfa,q=t.ownerDocument||globalThis.document,G=!0===t.disableRange,K=!0===t.disableStream,X=!0===t.disableAutoFetch,Y=!0===t.pdfBug,J=u?u.length:t.length??NaN,Q="boolean"==typeof t.useSystemFonts?t.useSystemFonts:!n.isNodeJS&&!$,Z="boolean"==typeof t.useWorkerFetch?t.useWorkerFetch:P===r.DOMCMapReaderFactory&&D===r.DOMStandardFontDataFactory&&x&&R&&(0,r.isValidFetchUrl)(x,document.baseURI)&&(0,r.isValidFetchUrl)(R,document.baseURI),tt=t.canvasFactory||new E({ownerDocument:q}),et=t.filterFactory||new A({docId:i,ownerDocument:q});(0,n.setVerbosityLevel)(y);const it={canvasFactory:tt,filterFactory:et};if(Z||(it.cMapReaderFactory=new P({baseUrl:x,isCompressed:T}),it.standardFontDataFactory=new D({baseUrl:R})),!v){const t={verbosity:y,port:d.GlobalWorkerOptions.workerPort};v=t.port?F.fromPort(t):new F(t),e._worker=v}const st={docId:i,apiVersion:"4.0.379",data:o,password:c,disableAutoFetch:X,rangeChunkSize:p,length:J,docBaseUrl:k,enableXfa:V,evaluatorOptions:{maxImageSize:H,disableFontFace:$,ignoreErrors:O,isEvalSupported:z,isOffscreenCanvasSupported:U,canvasMaxAreaInBytes:j,fontExtraProperties:W,useSystemFonts:Q,cMapUrl:Z?x:null,standardFontDataUrl:Z?R:null}},nt={ignoreErrors:O,isEvalSupported:z,disableFontFace:$,fontExtraProperties:W,enableXfa:V,ownerDocument:q,disableAutoFetch:X,pdfBug:Y,styleElement:null};return v.promise.then((function(){if(e.destroyed)throw new Error("Loading aborted");const t=_(v,st),c=new Promise((function(t){let e;var i;u?e=new g.PDFDataTransportStream({length:J,initialData:u.initialData,progressiveDone:u.progressiveDone,contentDispositionFilename:u.contentDispositionFilename,disableRange:G,disableStream:K},u):o||(i={url:s,length:J,httpHeaders:a,withCredentials:l,rangeChunkSize:p,disableRange:G,disableStream:K},e=n.isNodeJS?new b.PDFNodeStream(i):(0,r.isValidFetchUrl)(i.url)?new m.PDFFetchStream(i):new f.PDFNetworkStream(i)),t(e)}));return Promise.all([t,c]).then((function([t,s]){if(e.destroyed)throw new Error("Loading aborted");const n=new h.MessageHandler(i,t,v.port),o=new N(n,e,s,nt,it);e._transport=o,n.send("Ready",null)}))})).catch(e._capability.reject),e}async function _(t,e){if(t.destroyed)throw new Error("Worker was destroyed");const i=await t.messageHandler.sendWithPromise("GetDocRequest",e,e.data?[e.data.buffer]:null);if(t.destroyed)throw new Error("Worker was destroyed");return i}function M(t){if(t instanceof URL)return t.href;try{return new URL(t,window.location).href}catch{if(n.isNodeJS&&"string"==typeof t)return t}throw new Error("Invalid PDF url data: either string or URL-object is expected in the url property.")}function I(t){if(n.isNodeJS&&"undefined"!=typeof Buffer&&t instanceof Buffer)throw new Error("Please provide binary data as `Uint8Array`, rather than `Buffer`.");if(t instanceof Uint8Array&&t.byteLength===t.buffer.byteLength)return t;if("string"==typeof t)return(0,n.stringToBytes)(t);if("object"==typeof t&&!isNaN(t?.length)||(0,n.isArrayBuffer)(t))return new Uint8Array(t);throw new Error("Invalid PDF binary data: either TypedArray, string, or array-like object is expected in the data property.")}class B{static#U=0;constructor(){this._capability=new n.PromiseCapability,this._transport=null,this._worker=null,this.docId="d"+B.#U++,this.destroyed=!1,this.onPassword=null,this.onProgress=null}get promise(){return this._capability.promise}async destroy(){this.destroyed=!0;try{this._worker?.port&&(this._worker._pendingDestroy=!0),await(this._transport?.destroy())}catch(t){throw this._worker?.port&&delete this._worker._pendingDestroy,t}this._transport=null,this._worker&&(this._worker.destroy(),this._worker=null)}}class L{constructor(t,e,i=!1,s=null){this.length=t,this.initialData=e,this.progressiveDone=i,this.contentDispositionFilename=s,this._rangeListeners=[],this._progressListeners=[],this._progressiveReadListeners=[],this._progressiveDoneListeners=[],this._readyCapability=new n.PromiseCapability}addRangeListener(t){this._rangeListeners.push(t)}addProgressListener(t){this._progressListeners.push(t)}addProgressiveReadListener(t){this._progressiveReadListeners.push(t)}addProgressiveDoneListener(t){this._progressiveDoneListeners.push(t)}onDataRange(t,e){for(const i of this._rangeListeners)i(t,e)}onDataProgress(t,e){this._readyCapability.promise.then((()=>{for(const i of this._progressListeners)i(t,e)}))}onDataProgressiveRead(t){this._readyCapability.promise.then((()=>{for(const e of this._progressiveReadListeners)e(t)}))}onDataProgressiveDone(){this._readyCapability.promise.then((()=>{for(const t of this._progressiveDoneListeners)t()}))}transportReady(){this._readyCapability.resolve()}requestDataRange(t,e){(0,n.unreachable)("Abstract method PDFDataRangeTransport.requestDataRange")}abort(){}}class P{constructor(t,e){this._pdfInfo=t,this._transport=e}get annotationStorage(){return this._transport.annotationStorage}get filterFactory(){return this._transport.filterFactory}get numPages(){return this._pdfInfo.numPages}get fingerprints(){return this._pdfInfo.fingerprints}get isPureXfa(){return(0,n.shadow)(this,"isPureXfa",!!this._transport._htmlForXfa)}get allXfaHtml(){return this._transport._htmlForXfa}getPage(t){return this._transport.getPage(t)}getPageIndex(t){return this._transport.getPageIndex(t)}getDestinations(){return this._transport.getDestinations()}getDestination(t){return this._transport.getDestination(t)}getPageLabels(){return this._transport.getPageLabels()}getPageLayout(){return this._transport.getPageLayout()}getPageMode(){return this._transport.getPageMode()}getViewerPreferences(){return this._transport.getViewerPreferences()}getOpenAction(){return this._transport.getOpenAction()}getAttachments(){return this._transport.getAttachments()}getJSActions(){return this._transport.getDocJSActions()}getOutline(){return this._transport.getOutline()}getOptionalContentConfig(){return this._transport.getOptionalContentConfig()}getPermissions(){return this._transport.getPermissions()}getMetadata(){return this._transport.getMetadata()}getMarkInfo(){return this._transport.getMarkInfo()}getData(){return this._transport.getData()}saveDocument(){return this._transport.saveDocument()}getDownloadInfo(){return this._transport.downloadInfoCapability.promise}cleanup(t=!1){return this._transport.startCleanup(t||this.isPureXfa)}destroy(){return this.loadingTask.destroy()}get loadingParams(){return this._transport.loadingParams}get loadingTask(){return this._transport.loadingTask}getFieldObjects(){return this._transport.getFieldObjects()}hasJSActions(){return this._transport.hasJSActions()}getCalculationOrderIds(){return this._transport.getCalculationOrderIds()}}class R{#j=null;#$=!1;constructor(t,e,i,s=!1){this._pageIndex=t,this._pageInfo=e,this._transport=i,this._stats=s?new r.StatTimer:null,this._pdfBug=s,this.commonObjs=i.commonObjs,this.objs=new H,this._maybeCleanupAfterRender=!1,this._intentStates=new Map,this.destroyed=!1}get pageNumber(){return this._pageIndex+1}get rotate(){return this._pageInfo.rotate}get ref(){return this._pageInfo.ref}get userUnit(){return this._pageInfo.userUnit}get view(){return this._pageInfo.view}getViewport({scale:t,rotation:e=this.rotate,offsetX:i=0,offsetY:s=0,dontFlip:n=!1}={}){return new r.PageViewport({viewBox:this.view,scale:t,rotation:e,offsetX:i,offsetY:s,dontFlip:n})}getAnnotations({intent:t="display"}={}){const e=this._transport.getRenderingIntent(t);return this._transport.getAnnotations(this._pageIndex,e.renderingIntent)}getJSActions(){return this._transport.getPageJSActions(this._pageIndex)}get filterFactory(){return this._transport.filterFactory}get isPureXfa(){return(0,n.shadow)(this,"isPureXfa",!!this._transport._htmlForXfa)}async getXfa(){return this._transport._htmlForXfa?.children[this._pageIndex]||null}render({canvasContext:t,viewport:e,intent:i="display",annotationMode:s=n.AnnotationMode.ENABLE,transform:o=null,background:r=null,optionalContentConfigPromise:a=null,annotationCanvasMap:l=null,pageColors:c=null,printAnnotationStorage:d=null}){this._stats?.time("Overall");const h=this._transport.getRenderingIntent(i,s,d);this.#$=!1,this.#W(),a||(a=this._transport.getOptionalContentConfig());let u=this._intentStates.get(h.cacheKey);u||(u=Object.create(null),this._intentStates.set(h.cacheKey,u)),u.streamReaderCancelTimeout&&(clearTimeout(u.streamReaderCancelTimeout),u.streamReaderCancelTimeout=null);const p=!!(h.renderingIntent&n.RenderingIntentFlag.PRINT);u.displayReadyCapability||(u.displayReadyCapability=new n.PromiseCapability,u.operatorList={fnArray:[],argsArray:[],lastChunk:!1,separateAnnots:null},this._stats?.time("Page Request"),this._pumpOperatorList(h));const g=t=>{u.renderTasks.delete(m),(this._maybeCleanupAfterRender||p)&&(this.#$=!0),this.#V(!p),t?(m.capability.reject(t),this._abortOperatorList({intentState:u,reason:t instanceof Error?t:new Error(t)})):m.capability.resolve(),this._stats?.timeEnd("Rendering"),this._stats?.timeEnd("Overall")},m=new U({callback:g,params:{canvasContext:t,viewport:e,transform:o,background:r},objs:this.objs,commonObjs:this.commonObjs,annotationCanvasMap:l,operatorList:u.operatorList,pageIndex:this._pageIndex,canvasFactory:this._transport.canvasFactory,filterFactory:this._transport.filterFactory,useRequestAnimationFrame:!p,pdfBug:this._pdfBug,pageColors:c});(u.renderTasks||=new Set).add(m);const f=m.task;return Promise.all([u.displayReadyCapability.promise,a]).then((([t,e])=>{this.destroyed?g():(this._stats?.time("Rendering"),m.initializeGraphics({transparency:t,optionalContentConfig:e}),m.operatorListChanged())})).catch(g),f}getOperatorList({intent:t="display",annotationMode:e=n.AnnotationMode.ENABLE,printAnnotationStorage:i=null}={}){const s=this._transport.getRenderingIntent(t,e,i,!0);let o,r=this._intentStates.get(s.cacheKey);return r||(r=Object.create(null),this._intentStates.set(s.cacheKey,r)),r.opListReadCapability||(o=Object.create(null),o.operatorListChanged=function(){r.operatorList.lastChunk&&(r.opListReadCapability.resolve(r.operatorList),r.renderTasks.delete(o))},r.opListReadCapability=new n.PromiseCapability,(r.renderTasks||=new Set).add(o),r.operatorList={fnArray:[],argsArray:[],lastChunk:!1,separateAnnots:null},this._stats?.time("Page Request"),this._pumpOperatorList(s)),r.opListReadCapability.promise}streamTextContent({includeMarkedContent:t=!1,disableNormalization:e=!1}={}){return this._transport.messageHandler.sendWithStream("GetTextContent",{pageIndex:this._pageIndex,includeMarkedContent:!0===t,disableNormalization:!0===e},{highWaterMark:100,size:t=>t.items.length})}getTextContent(t={}){if(this._transport._htmlForXfa)return this.getXfa().then((t=>v.XfaText.textContent(t)));const e=this.streamTextContent(t);return new Promise((function(t,i){const s=e.getReader(),n={items:[],styles:Object.create(null)};!function e(){s.read().then((function({value:i,done:s}){s?t(n):(Object.assign(n.styles,i.styles),n.items.push(...i.items),e())}),i)}()}))}getStructTree(){return this._transport.getStructTree(this._pageIndex)}_destroy(){this.destroyed=!0;const t=[];for(const e of this._intentStates.values())if(this._abortOperatorList({intentState:e,reason:new Error("Page was destroyed."),force:!0}),!e.opListReadCapability)for(const i of e.renderTasks)t.push(i.completed),i.cancel();return this.objs.clear(),this.#$=!1,this.#W(),Promise.all(t)}cleanup(t=!1){this.#$=!0;const e=this.#V(!1);return t&&e&&(this._stats&&=new r.StatTimer),e}#V(t=!1){if(this.#W(),!this.#$||this.destroyed)return!1;if(t)return this.#j=setTimeout((()=>{this.#j=null,this.#V(!1)}),x),!1;for(const{renderTasks:t,operatorList:e}of this._intentStates.values())if(t.size>0||!e.lastChunk)return!1;return this._intentStates.clear(),this.objs.clear(),this.#$=!1,!0}#W(){this.#j&&(clearTimeout(this.#j),this.#j=null)}_startRenderPage(t,e){const i=this._intentStates.get(e);i&&(this._stats?.timeEnd("Page Request"),i.displayReadyCapability?.resolve(t))}_renderPageChunk(t,e){for(let i=0,s=t.length;i<s;i++)e.operatorList.fnArray.push(t.fnArray[i]),e.operatorList.argsArray.push(t.argsArray[i]);e.operatorList.lastChunk=t.lastChunk,e.operatorList.separateAnnots=t.separateAnnots;for(const t of e.renderTasks)t.operatorListChanged();t.lastChunk&&this.#V(!0)}_pumpOperatorList({renderingIntent:t,cacheKey:e,annotationStorageSerializable:i}){const{map:s,transfer:n}=i,o=this._transport.messageHandler.sendWithStream("GetOperatorList",{pageIndex:this._pageIndex,intent:t,cacheKey:e,annotationStorage:s},n).getReader(),r=this._intentStates.get(e);r.streamReader=o;const a=()=>{o.read().then((({value:t,done:e})=>{e?r.streamReader=null:this._transport.destroyed||(this._renderPageChunk(t,r),a())}),(t=>{if(r.streamReader=null,!this._transport.destroyed){if(r.operatorList){r.operatorList.lastChunk=!0;for(const t of r.renderTasks)t.operatorListChanged();this.#V(!0)}if(r.displayReadyCapability)r.displayReadyCapability.reject(t);else{if(!r.opListReadCapability)throw t;r.opListReadCapability.reject(t)}}}))};a()}_abortOperatorList({intentState:t,reason:e,force:i=!1}){if(t.streamReader){if(t.streamReaderCancelTimeout&&(clearTimeout(t.streamReaderCancelTimeout),t.streamReaderCancelTimeout=null),!i){if(t.renderTasks.size>0)return;if(e instanceof r.RenderingCancelledException){let i=k;return e.extraDelay>0&&e.extraDelay<1e3&&(i+=e.extraDelay),void(t.streamReaderCancelTimeout=setTimeout((()=>{t.streamReaderCancelTimeout=null,this._abortOperatorList({intentState:t,reason:e,force:!0})}),i))}}if(t.streamReader.cancel(new n.AbortException(e.message)).catch((()=>{})),t.streamReader=null,!this._transport.destroyed){for(const[e,i]of this._intentStates)if(i===t){this._intentStates.delete(e);break}this.cleanup()}}}get stats(){return this._stats}}class D{#q=new Set;#G=Promise.resolve();postMessage(t,e){const i={data:structuredClone(t,e?{transfer:e}:null)};this.#G.then((()=>{for(const t of this.#q)t.call(this,i)}))}addEventListener(t,e){this.#q.add(e)}removeEventListener(t,e){this.#q.delete(e)}terminate(){this.#q.clear()}}const O={isWorkerDisabled:!1,fakeWorkerId:0};n.isNodeJS&&(O.isWorkerDisabled=!0,d.GlobalWorkerOptions.workerSrc||="./pdf.worker.mjs"),O.isSameOrigin=function(t,e){let i;try{if(i=new URL(t),!i.origin||"null"===i.origin)return!1}catch{return!1}const s=new URL(e,i);return i.origin===s.origin},O.createCDNWrapper=function(t){const e=`await import("${t}");`;return URL.createObjectURL(new Blob([e],{type:"text/javascript"}))};class F{static#K;constructor({name:t=null,port:e=null,verbosity:i=(0,n.getVerbosityLevel)()}={}){if(this.name=t,this.destroyed=!1,this.verbosity=i,this._readyCapability=new n.PromiseCapability,this._port=null,this._webWorker=null,this._messageHandler=null,e){if(F.#K?.has(e))throw new Error("Cannot use more than one PDFWorker per port.");return(F.#K||=new WeakMap).set(e,this),void this._initializeFromPort(e)}this._initialize()}get promise(){return this._readyCapability.promise}get port(){return this._port}get messageHandler(){return this._messageHandler}_initializeFromPort(t){this._port=t,this._messageHandler=new h.MessageHandler("main","worker",t),this._messageHandler.on("ready",(function(){})),this._readyCapability.resolve(),this._messageHandler.send("configure",{verbosity:this.verbosity})}_initialize(){if(!O.isWorkerDisabled&&!F.#X){let{workerSrc:t}=F;try{O.isSameOrigin(window.location.href,t)||(t=O.createCDNWrapper(new URL(t,window.location).href));const e=new Worker(t,{type:"module"}),i=new h.MessageHandler("main","worker",e),s=()=>{e.removeEventListener("error",n),i.destroy(),e.terminate(),this.destroyed?this._readyCapability.reject(new Error("Worker was destroyed")):this._setupFakeWorker()},n=()=>{this._webWorker||s()};e.addEventListener("error",n),i.on("test",(t=>{e.removeEventListener("error",n),this.destroyed?s():t?(this._messageHandler=i,this._port=e,this._webWorker=e,this._readyCapability.resolve(),i.send("configure",{verbosity:this.verbosity})):(this._setupFakeWorker(),i.destroy(),e.terminate())})),i.on("ready",(t=>{if(e.removeEventListener("error",n),this.destroyed)s();else try{o()}catch{this._setupFakeWorker()}}));const o=()=>{const t=new Uint8Array;i.send("test",t,[t.buffer])};return void o()}catch{(0,n.info)("The worker has been disabled.")}}this._setupFakeWorker()}_setupFakeWorker(){O.isWorkerDisabled||((0,n.warn)("Setting up fake worker."),O.isWorkerDisabled=!0),F._setupFakeWorkerGlobal.then((t=>{if(this.destroyed)return void this._readyCapability.reject(new Error("Worker was destroyed"));const e=new D;this._port=e;const i="fake"+O.fakeWorkerId++,s=new h.MessageHandler(i+"_worker",i,e);t.setup(s,e);const n=new h.MessageHandler(i,i+"_worker",e);this._messageHandler=n,this._readyCapability.resolve(),n.send("configure",{verbosity:this.verbosity})})).catch((t=>{this._readyCapability.reject(new Error(`Setting up fake worker failed: "${t.message}".`))}))}destroy(){this.destroyed=!0,this._webWorker&&(this._webWorker.terminate(),this._webWorker=null),F.#K?.delete(this._port),this._port=null,this._messageHandler&&(this._messageHandler.destroy(),this._messageHandler=null)}static fromPort(t){if(!t?.port)throw new Error("PDFWorker.fromPort - invalid method signature.");const e=this.#K?.get(t.port);if(e){if(e._pendingDestroy)throw new Error("PDFWorker.fromPort - the worker is being destroyed.\nPlease remember to await `PDFDocumentLoadingTask.destroy()`-calls.");return e}return new F(t)}static get workerSrc(){if(d.GlobalWorkerOptions.workerSrc)return d.GlobalWorkerOptions.workerSrc;throw new Error('No "GlobalWorkerOptions.workerSrc" specified.')}static get#X(){try{return globalThis.pdfjsWorker?.WorkerMessageHandler||null}catch{return null}}static get _setupFakeWorkerGlobal(){return(0,n.shadow)(this,"_setupFakeWorkerGlobal",(async()=>this.#X?this.#X:(await import(this.workerSrc)).WorkerMessageHandler)())}}class N{#Y=new Map;#J=new Map;#Q=new Map;#Z=null;constructor(t,e,i,s,o){this.messageHandler=t,this.loadingTask=e,this.commonObjs=new H,this.fontLoader=new a.FontLoader({ownerDocument:s.ownerDocument,styleElement:s.styleElement}),this._params=s,this.canvasFactory=o.canvasFactory,this.filterFactory=o.filterFactory,this.cMapReaderFactory=o.cMapReaderFactory,this.standardFontDataFactory=o.standardFontDataFactory,this.destroyed=!1,this.destroyCapability=null,this._networkStream=i,this._fullReader=null,this._lastProgress=null,this.downloadInfoCapability=new n.PromiseCapability,this.setupMessageHandler()}#tt(t,e=null){const i=this.#Y.get(t);if(i)return i;const s=this.messageHandler.sendWithPromise(t,e);return this.#Y.set(t,s),s}get annotationStorage(){return(0,n.shadow)(this,"annotationStorage",new o.AnnotationStorage)}getRenderingIntent(t,e=n.AnnotationMode.ENABLE,i=null,s=!1){let r=n.RenderingIntentFlag.DISPLAY,a=o.SerializableEmpty;switch(t){case"any":r=n.RenderingIntentFlag.ANY;break;case"display":break;case"print":r=n.RenderingIntentFlag.PRINT;break;default:(0,n.warn)(`getRenderingIntent - invalid intent: ${t}`)}switch(e){case n.AnnotationMode.DISABLE:r+=n.RenderingIntentFlag.ANNOTATIONS_DISABLE;break;case n.AnnotationMode.ENABLE:break;case n.AnnotationMode.ENABLE_FORMS:r+=n.RenderingIntentFlag.ANNOTATIONS_FORMS;break;case n.AnnotationMode.ENABLE_STORAGE:r+=n.RenderingIntentFlag.ANNOTATIONS_STORAGE,a=(r&n.RenderingIntentFlag.PRINT&&i instanceof o.PrintAnnotationStorage?i:this.annotationStorage).serializable;break;default:(0,n.warn)(`getRenderingIntent - invalid annotationMode: ${e}`)}return s&&(r+=n.RenderingIntentFlag.OPLIST),{renderingIntent:r,cacheKey:`${r}_${a.hash}`,annotationStorageSerializable:a}}destroy(){if(this.destroyCapability)return this.destroyCapability.promise;this.destroyed=!0,this.destroyCapability=new n.PromiseCapability,this.#Z?.reject(new Error("Worker was destroyed during onPassword callback"));const t=[];for(const e of this.#J.values())t.push(e._destroy());this.#J.clear(),this.#Q.clear(),this.hasOwnProperty("annotationStorage")&&this.annotationStorage.resetModified();const e=this.messageHandler.sendWithPromise("Terminate",null);return t.push(e),Promise.all(t).then((()=>{this.commonObjs.clear(),this.fontLoader.clear(),this.#Y.clear(),this.filterFactory.destroy(),this._networkStream?.cancelAllRequests(new n.AbortException("Worker was terminated.")),this.messageHandler&&(this.messageHandler.destroy(),this.messageHandler=null),this.destroyCapability.resolve()}),this.destroyCapability.reject),this.destroyCapability.promise}setupMessageHandler(){const{messageHandler:t,loadingTask:e}=this;t.on("GetReader",((t,e)=>{(0,n.assert)(this._networkStream,"GetReader - no `IPDFStream` instance available."),this._fullReader=this._networkStream.getFullReader(),this._fullReader.onProgress=t=>{this._lastProgress={loaded:t.loaded,total:t.total}},e.onPull=()=>{this._fullReader.read().then((function({value:t,done:i}){i?e.close():((0,n.assert)(t instanceof ArrayBuffer,"GetReader - expected an ArrayBuffer."),e.enqueue(new Uint8Array(t),1,[t]))})).catch((t=>{e.error(t)}))},e.onCancel=t=>{this._fullReader.cancel(t),e.ready.catch((t=>{if(!this.destroyed)throw t}))}})),t.on("ReaderHeadersReady",(t=>{const i=new n.PromiseCapability,s=this._fullReader;return s.headersReady.then((()=>{s.isStreamingSupported&&s.isRangeSupported||(this._lastProgress&&e.onProgress?.(this._lastProgress),s.onProgress=t=>{e.onProgress?.({loaded:t.loaded,total:t.total})}),i.resolve({isStreamingSupported:s.isStreamingSupported,isRangeSupported:s.isRangeSupported,contentLength:s.contentLength})}),i.reject),i.promise})),t.on("GetRangeReader",((t,e)=>{(0,n.assert)(this._networkStream,"GetRangeReader - no `IPDFStream` instance available.");const i=this._networkStream.getRangeReader(t.begin,t.end);i?(e.onPull=()=>{i.read().then((function({value:t,done:i}){i?e.close():((0,n.assert)(t instanceof ArrayBuffer,"GetRangeReader - expected an ArrayBuffer."),e.enqueue(new Uint8Array(t),1,[t]))})).catch((t=>{e.error(t)}))},e.onCancel=t=>{i.cancel(t),e.ready.catch((t=>{if(!this.destroyed)throw t}))}):e.close()})),t.on("GetDoc",(({pdfInfo:t})=>{this._numPages=t.numPages,this._htmlForXfa=t.htmlForXfa,delete t.htmlForXfa,e._capability.resolve(new P(t,this))})),t.on("DocException",(function(t){let i;switch(t.name){case"PasswordException":i=new n.PasswordException(t.message,t.code);break;case"InvalidPDFException":i=new n.InvalidPDFException(t.message);break;case"MissingPDFException":i=new n.MissingPDFException(t.message);break;case"UnexpectedResponseException":i=new n.UnexpectedResponseException(t.message,t.status);break;case"UnknownErrorException":i=new n.UnknownErrorException(t.message,t.details);break;default:(0,n.unreachable)("DocException - expected a valid Error.")}e._capability.reject(i)})),t.on("PasswordRequest",(t=>{if(this.#Z=new n.PromiseCapability,e.onPassword){const i=t=>{t instanceof Error?this.#Z.reject(t):this.#Z.resolve({password:t})};try{e.onPassword(i,t.code)}catch(t){this.#Z.reject(t)}}else this.#Z.reject(new n.PasswordException(t.message,t.code));return this.#Z.promise})),t.on("DataLoaded",(t=>{e.onProgress?.({loaded:t.length,total:t.length}),this.downloadInfoCapability.resolve(t)})),t.on("StartRenderPage",(t=>{this.destroyed||this.#J.get(t.pageIndex)._startRenderPage(t.transparency,t.cacheKey)})),t.on("commonobj",(([e,i,s])=>{if(this.destroyed)return null;if(this.commonObjs.has(e))return null;switch(i){case"Font":const o=this._params;if("error"in s){const t=s.error;(0,n.warn)(`Error during font loading: ${t}`),this.commonObjs.resolve(e,t);break}const r=o.pdfBug&&globalThis.FontInspector?.enabled?(t,e)=>globalThis.FontInspector.fontAdded(t,e):null,l=new a.FontFaceObject(s,{isEvalSupported:o.isEvalSupported,disableFontFace:o.disableFontFace,ignoreErrors:o.ignoreErrors,inspectFont:r});this.fontLoader.bind(l).catch((i=>t.sendWithPromise("FontFallback",{id:e}))).finally((()=>{!o.fontExtraProperties&&l.data&&(l.data=null),this.commonObjs.resolve(e,l)}));break;case"CopyLocalImage":const{imageRef:c}=s;(0,n.assert)(c,"The imageRef must be defined.");for(const t of this.#J.values())for(const[,i]of t.objs)if(i.ref===c)return i.dataLen?(this.commonObjs.resolve(e,structuredClone(i)),i.dataLen):null;break;case"FontPath":case"Image":case"Pattern":this.commonObjs.resolve(e,s);break;default:throw new Error(`Got unknown common object type ${i}`)}return null})),t.on("obj",(([t,e,i,s])=>{if(this.destroyed)return;const o=this.#J.get(e);if(!o.objs.has(t))if(0!==o._intentStates.size)switch(i){case"Image":o.objs.resolve(t,s),s?.dataLen>n.MAX_IMAGE_SIZE_TO_CACHE&&(o._maybeCleanupAfterRender=!0);break;case"Pattern":o.objs.resolve(t,s);break;default:throw new Error(`Got unknown object type ${i}`)}else s?.bitmap?.close()})),t.on("DocProgress",(t=>{this.destroyed||e.onProgress?.({loaded:t.loaded,total:t.total})})),t.on("FetchBuiltInCMap",(t=>this.destroyed?Promise.reject(new Error("Worker was destroyed.")):this.cMapReaderFactory?this.cMapReaderFactory.fetch(t):Promise.reject(new Error("CMapReaderFactory not initialized, see the `useWorkerFetch` parameter.")))),t.on("FetchStandardFontData",(t=>this.destroyed?Promise.reject(new Error("Worker was destroyed.")):this.standardFontDataFactory?this.standardFontDataFactory.fetch(t):Promise.reject(new Error("StandardFontDataFactory not initialized, see the `useWorkerFetch` parameter."))))}getData(){return this.messageHandler.sendWithPromise("GetData",null)}saveDocument(){this.annotationStorage.size<=0&&(0,n.warn)("saveDocument called while `annotationStorage` is empty, please use the getData-method instead.");const{map:t,transfer:e}=this.annotationStorage.serializable;return this.messageHandler.sendWithPromise("SaveDocument",{isPureXfa:!!this._htmlForXfa,numPages:this._numPages,annotationStorage:t,filename:this._fullReader?.filename??null},e).finally((()=>{this.annotationStorage.resetModified()}))}getPage(t){if(!Number.isInteger(t)||t<=0||t>this._numPages)return Promise.reject(new Error("Invalid page request."));const e=t-1,i=this.#Q.get(e);if(i)return i;const s=this.messageHandler.sendWithPromise("GetPage",{pageIndex:e}).then((t=>{if(this.destroyed)throw new Error("Transport destroyed");const i=new R(e,t,this,this._params.pdfBug);return this.#J.set(e,i),i}));return this.#Q.set(e,s),s}getPageIndex(t){return"object"!=typeof t||null===t||!Number.isInteger(t.num)||t.num<0||!Number.isInteger(t.gen)||t.gen<0?Promise.reject(new Error("Invalid pageIndex request.")):this.messageHandler.sendWithPromise("GetPageIndex",{num:t.num,gen:t.gen})}getAnnotations(t,e){return this.messageHandler.sendWithPromise("GetAnnotations",{pageIndex:t,intent:e})}getFieldObjects(){return this.#tt("GetFieldObjects")}hasJSActions(){return this.#tt("HasJSActions")}getCalculationOrderIds(){return this.messageHandler.sendWithPromise("GetCalculationOrderIds",null)}getDestinations(){return this.messageHandler.sendWithPromise("GetDestinations",null)}getDestination(t){return"string"!=typeof t?Promise.reject(new Error("Invalid destination request.")):this.messageHandler.sendWithPromise("GetDestination",{id:t})}getPageLabels(){return this.messageHandler.sendWithPromise("GetPageLabels",null)}getPageLayout(){return this.messageHandler.sendWithPromise("GetPageLayout",null)}getPageMode(){return this.messageHandler.sendWithPromise("GetPageMode",null)}getViewerPreferences(){return this.messageHandler.sendWithPromise("GetViewerPreferences",null)}getOpenAction(){return this.messageHandler.sendWithPromise("GetOpenAction",null)}getAttachments(){return this.messageHandler.sendWithPromise("GetAttachments",null)}getDocJSActions(){return this.#tt("GetDocJSActions")}getPageJSActions(t){return this.messageHandler.sendWithPromise("GetPageJSActions",{pageIndex:t})}getStructTree(t){return this.messageHandler.sendWithPromise("GetStructTree",{pageIndex:t})}getOutline(){return this.messageHandler.sendWithPromise("GetOutline",null)}getOptionalContentConfig(){return this.messageHandler.sendWithPromise("GetOptionalContentConfig",null).then((t=>new p.OptionalContentConfig(t)))}getPermissions(){return this.messageHandler.sendWithPromise("GetPermissions",null)}getMetadata(){const t="GetMetadata",e=this.#Y.get(t);if(e)return e;const i=this.messageHandler.sendWithPromise(t,null).then((t=>({info:t[0],metadata:t[1]?new u.Metadata(t[1]):null,contentDispositionFilename:this._fullReader?.filename??null,contentLength:this._fullReader?.contentLength??null})));return this.#Y.set(t,i),i}getMarkInfo(){return this.messageHandler.sendWithPromise("GetMarkInfo",null)}async startCleanup(t=!1){if(!this.destroyed){await this.messageHandler.sendWithPromise("Cleanup",null);for(const t of this.#J.values())if(!t.cleanup())throw new Error(`startCleanup: Page ${t.pageNumber} is currently rendering.`);this.commonObjs.clear(),t||this.fontLoader.clear(),this.#Y.clear(),this.filterFactory.destroy(!0)}}get loadingParams(){const{disableAutoFetch:t,enableXfa:e}=this._params;return(0,n.shadow)(this,"loadingParams",{disableAutoFetch:t,enableXfa:e})}}class H{#et=Object.create(null);#it(t){return this.#et[t]||={capability:new n.PromiseCapability,data:null}}get(t,e=null){if(e){const i=this.#it(t);return i.capability.promise.then((()=>e(i.data))),null}const i=this.#et[t];if(!i?.capability.settled)throw new Error(`Requesting object that isn't resolved yet ${t}.`);return i.data}has(t){const e=this.#et[t];return e?.capability.settled??!1}resolve(t,e=null){const i=this.#it(t);i.data=e,i.capability.resolve()}clear(){for(const t in this.#et){const{data:e}=this.#et[t];e?.bitmap?.close()}this.#et=Object.create(null)}*[Symbol.iterator](){for(const t in this.#et){const{capability:e,data:i}=this.#et[t];e.settled&&(yield[t,i])}}}class z{#st=null;constructor(t){this.#st=t,this.onContinue=null}get promise(){return this.#st.capability.promise}cancel(t=0){this.#st.cancel(null,t)}get separateAnnots(){const{separateAnnots:t}=this.#st.operatorList;if(!t)return!1;const{annotationCanvasMap:e}=this.#st;return t.form||t.canvas&&e?.size>0}}class U{static#nt=new WeakSet;constructor({callback:t,params:e,objs:i,commonObjs:s,annotationCanvasMap:o,operatorList:r,pageIndex:a,canvasFactory:l,filterFactory:c,useRequestAnimationFrame:d=!1,pdfBug:h=!1,pageColors:u=null}){this.callback=t,this.params=e,this.objs=i,this.commonObjs=s,this.annotationCanvasMap=o,this.operatorListIdx=null,this.operatorList=r,this._pageIndex=a,this.canvasFactory=l,this.filterFactory=c,this._pdfBug=h,this.pageColors=u,this.running=!1,this.graphicsReadyCallback=null,this.graphicsReady=!1,this._useRequestAnimationFrame=!0===d&&"undefined"!=typeof window,this.cancelled=!1,this.capability=new n.PromiseCapability,this.task=new z(this),this._cancelBound=this.cancel.bind(this),this._continueBound=this._continue.bind(this),this._scheduleNextBound=this._scheduleNext.bind(this),this._nextBound=this._next.bind(this),this._canvas=e.canvasContext.canvas}get completed(){return this.capability.promise.catch((function(){}))}initializeGraphics({transparency:t=!1,optionalContentConfig:e}){if(this.cancelled)return;if(this._canvas){if(U.#nt.has(this._canvas))throw new Error("Cannot use the same canvas during multiple render() operations. Use different canvas or ensure previous operations were cancelled or completed.");U.#nt.add(this._canvas)}this._pdfBug&&globalThis.StepperManager?.enabled&&(this.stepper=globalThis.StepperManager.create(this._pageIndex),this.stepper.init(this.operatorList),this.stepper.nextBreakPoint=this.stepper.getNextBreakPoint());const{canvasContext:i,viewport:s,transform:n,background:o}=this.params;this.gfx=new c.CanvasGraphics(i,this.commonObjs,this.objs,this.canvasFactory,this.filterFactory,{optionalContentConfig:e},this.annotationCanvasMap,this.pageColors),this.gfx.beginDrawing({transform:n,viewport:s,transparency:t,background:o}),this.operatorListIdx=0,this.graphicsReady=!0,this.graphicsReadyCallback?.()}cancel(t=null,e=0){this.running=!1,this.cancelled=!0,this.gfx?.endDrawing(),U.#nt.delete(this._canvas),this.callback(t||new r.RenderingCancelledException(`Rendering cancelled, page ${this._pageIndex+1}`,e))}operatorListChanged(){this.graphicsReady?(this.stepper?.updateOperatorList(this.operatorList),this.running||this._continue()):this.graphicsReadyCallback||=this._continueBound}_continue(){this.running=!0,this.cancelled||(this.task.onContinue?this.task.onContinue(this._scheduleNextBound):this._scheduleNext())}_scheduleNext(){this._useRequestAnimationFrame?window.requestAnimationFrame((()=>{this._nextBound().catch(this._cancelBound)})):Promise.resolve().then(this._nextBound).catch(this._cancelBound)}async _next(){this.cancelled||(this.operatorListIdx=this.gfx.executeOperatorList(this.operatorList,this.operatorListIdx,this._continueBound,this.stepper),this.operatorListIdx===this.operatorList.argsArray.length&&(this.running=!1,this.operatorList.lastChunk&&(this.gfx.endDrawing(),U.#nt.delete(this._canvas),this.callback())))}}const j="4.0.379",$="9e14d04fd";s()}catch(W){s(W)}}))},822:(t,e,i)=>{i.d(e,{BaseCMapReaderFactory:()=>r,BaseCanvasFactory:()=>o,BaseFilterFactory:()=>n,BaseSVGFactory:()=>l,BaseStandardFontDataFactory:()=>a});var s=i(266);class n{constructor(){this.constructor===n&&(0,s.unreachable)("Cannot initialize BaseFilterFactory.")}addFilter(t){return"none"}addHCMFilter(t,e){return"none"}addHighlightHCMFilter(t,e,i,s){return"none"}destroy(t=!1){}}class o{constructor(){this.constructor===o&&(0,s.unreachable)("Cannot initialize BaseCanvasFactory.")}create(t,e){if(t<=0||e<=0)throw new Error("Invalid canvas size");const i=this._createCanvas(t,e);return{canvas:i,context:i.getContext("2d")}}reset(t,e,i){if(!t.canvas)throw new Error("Canvas is not specified");if(e<=0||i<=0)throw new Error("Invalid canvas size");t.canvas.width=e,t.canvas.height=i}destroy(t){if(!t.canvas)throw new Error("Canvas is not specified");t.canvas.width=0,t.canvas.height=0,t.canvas=null,t.context=null}_createCanvas(t,e){(0,s.unreachable)("Abstract method `_createCanvas` called.")}}class r{constructor({baseUrl:t=null,isCompressed:e=!0}){this.constructor===r&&(0,s.unreachable)("Cannot initialize BaseCMapReaderFactory."),this.baseUrl=t,this.isCompressed=e}async fetch({name:t}){if(!this.baseUrl)throw new Error('The CMap "baseUrl" parameter must be specified, ensure that the "cMapUrl" and "cMapPacked" API parameters are provided.');if(!t)throw new Error("CMap name must be specified.");const e=this.baseUrl+t+(this.isCompressed?".bcmap":""),i=this.isCompressed?s.CMapCompressionType.BINARY:s.CMapCompressionType.NONE;return this._fetchData(e,i).catch((t=>{throw new Error(`Unable to load ${this.isCompressed?"binary ":""}CMap at: ${e}`)}))}_fetchData(t,e){(0,s.unreachable)("Abstract method `_fetchData` called.")}}class a{constructor({baseUrl:t=null}){this.constructor===a&&(0,s.unreachable)("Cannot initialize BaseStandardFontDataFactory."),this.baseUrl=t}async fetch({filename:t}){if(!this.baseUrl)throw new Error('The standard font "baseUrl" parameter must be specified, ensure that the "standardFontDataUrl" API parameter is provided.');if(!t)throw new Error("Font filename must be specified.");const e=`${this.baseUrl}${t}`;return this._fetchData(e).catch((t=>{throw new Error(`Unable to load font data at: ${e}`)}))}_fetchData(t){(0,s.unreachable)("Abstract method `_fetchData` called.")}}class l{constructor(){this.constructor===l&&(0,s.unreachable)("Cannot initialize BaseSVGFactory.")}create(t,e,i=!1){if(t<=0||e<=0)throw new Error("Invalid SVG dimensions");const s=this._createSVG("svg:svg");return s.setAttribute("version","1.1"),i||(s.setAttribute("width",`${t}px`),s.setAttribute("height",`${e}px`)),s.setAttribute("preserveAspectRatio","none"),s.setAttribute("viewBox",`0 0 ${t} ${e}`),s}createElement(t){if("string"!=typeof t)throw new Error("Invalid SVG element type");return this._createSVG(t)}_createSVG(t){(0,s.unreachable)("Abstract method `_createSVG` called.")}}},250:(t,e,i)=>{i.d(e,{CanvasGraphics:()=>R});var s=i(266),n=i(473);const o="Fill",r="Stroke",a="Shading";function l(t,e){if(!e)return;const i=e[2]-e[0],s=e[3]-e[1],n=new Path2D;n.rect(e[0],e[1],i,s),t.clip(n)}class c{constructor(){this.constructor===c&&(0,s.unreachable)("Cannot initialize BaseShadingPattern.")}getPattern(){(0,s.unreachable)("Abstract method `getPattern` called.")}}class d extends c{constructor(t){super(),this._type=t[1],this._bbox=t[2],this._colorStops=t[3],this._p0=t[4],this._p1=t[5],this._r0=t[6],this._r1=t[7],this.matrix=null}_createGradient(t){let e;"axial"===this._type?e=t.createLinearGradient(this._p0[0],this._p0[1],this._p1[0],this._p1[1]):"radial"===this._type&&(e=t.createRadialGradient(this._p0[0],this._p0[1],this._r0,this._p1[0],this._p1[1],this._r1));for(const t of this._colorStops)e.addColorStop(t[0],t[1]);return e}getPattern(t,e,i,a){let c;if(a===r||a===o){const o=e.current.getClippedPathBoundingBox(a,(0,n.getCurrentTransform)(t))||[0,0,0,0],r=Math.ceil(o[2]-o[0])||1,d=Math.ceil(o[3]-o[1])||1,h=e.cachedCanvases.getCanvas("pattern",r,d,!0),u=h.context;u.clearRect(0,0,u.canvas.width,u.canvas.height),u.beginPath(),u.rect(0,0,u.canvas.width,u.canvas.height),u.translate(-o[0],-o[1]),i=s.Util.transform(i,[1,0,0,1,o[0],o[1]]),u.transform(...e.baseTransform),this.matrix&&u.transform(...this.matrix),l(u,this._bbox),u.fillStyle=this._createGradient(u),u.fill(),c=t.createPattern(h.canvas,"no-repeat");const p=new DOMMatrix(i);c.setTransform(p)}else l(t,this._bbox),c=this._createGradient(t);return c}}function h(t,e,i,s,n,o,r,a){const l=e.coords,c=e.colors,d=t.data,h=4*t.width;let u;l[i+1]>l[s+1]&&(u=i,i=s,s=u,u=o,o=r,r=u),l[s+1]>l[n+1]&&(u=s,s=n,n=u,u=r,r=a,a=u),l[i+1]>l[s+1]&&(u=i,i=s,s=u,u=o,o=r,r=u);const p=(l[i]+e.offsetX)*e.scaleX,g=(l[i+1]+e.offsetY)*e.scaleY,m=(l[s]+e.offsetX)*e.scaleX,f=(l[s+1]+e.offsetY)*e.scaleY,b=(l[n]+e.offsetX)*e.scaleX,v=(l[n+1]+e.offsetY)*e.scaleY;if(g>=v)return;const y=c[o],w=c[o+1],k=c[o+2],x=c[r],E=c[r+1],C=c[r+2],A=c[a],S=c[a+1],T=c[a+2],_=Math.round(g),M=Math.round(v);let I,B,L,P,R,D,O,F;for(let t=_;t<=M;t++){if(t<f){const e=t<g?0:(g-t)/(g-f);I=p-(p-m)*e,B=y-(y-x)*e,L=w-(w-E)*e,P=k-(k-C)*e}else{let e;e=t>v?1:f===v?0:(f-t)/(f-v),I=m-(m-b)*e,B=x-(x-A)*e,L=E-(E-S)*e,P=C-(C-T)*e}let e;e=t<g?0:t>v?1:(g-t)/(g-v),R=p-(p-b)*e,D=y-(y-A)*e,O=w-(w-S)*e,F=k-(k-T)*e;const i=Math.round(Math.min(I,R)),s=Math.round(Math.max(I,R));let n=h*t+4*i;for(let t=i;t<=s;t++)e=(I-t)/(I-R),e<0?e=0:e>1&&(e=1),d[n++]=B-(B-D)*e|0,d[n++]=L-(L-O)*e|0,d[n++]=P-(P-F)*e|0,d[n++]=255}}function u(t,e,i){const s=e.coords,n=e.colors;let o,r;switch(e.type){case"lattice":const a=e.verticesPerRow,l=Math.floor(s.length/a)-1,c=a-1;for(o=0;o<l;o++){let e=o*a;for(let o=0;o<c;o++,e++)h(t,i,s[e],s[e+1],s[e+a],n[e],n[e+1],n[e+a]),h(t,i,s[e+a+1],s[e+1],s[e+a],n[e+a+1],n[e+1],n[e+a])}break;case"triangles":for(o=0,r=s.length;o<r;o+=3)h(t,i,s[o],s[o+1],s[o+2],n[o],n[o+1],n[o+2]);break;default:throw new Error("illegal figure")}}class p extends c{constructor(t){super(),this._coords=t[2],this._colors=t[3],this._figures=t[4],this._bounds=t[5],this._bbox=t[7],this._background=t[8],this.matrix=null}_createMeshCanvas(t,e,i){const s=Math.floor(this._bounds[0]),n=Math.floor(this._bounds[1]),o=Math.ceil(this._bounds[2])-s,r=Math.ceil(this._bounds[3])-n,a=Math.min(Math.ceil(Math.abs(o*t[0]*1.1)),3e3),l=Math.min(Math.ceil(Math.abs(r*t[1]*1.1)),3e3),c=o/a,d=r/l,h={coords:this._coords,colors:this._colors,offsetX:-s,offsetY:-n,scaleX:1/c,scaleY:1/d},p=a+4,g=l+4,m=i.getCanvas("mesh",p,g,!1),f=m.context,b=f.createImageData(a,l);if(e){const t=b.data;for(let i=0,s=t.length;i<s;i+=4)t[i]=e[0],t[i+1]=e[1],t[i+2]=e[2],t[i+3]=255}for(const t of this._figures)u(b,t,h);return f.putImageData(b,2,2),{canvas:m.canvas,offsetX:s-2*c,offsetY:n-2*d,scaleX:c,scaleY:d}}getPattern(t,e,i,o){let r;if(l(t,this._bbox),o===a)r=s.Util.singularValueDecompose2dScale((0,n.getCurrentTransform)(t));else if(r=s.Util.singularValueDecompose2dScale(e.baseTransform),this.matrix){const t=s.Util.singularValueDecompose2dScale(this.matrix);r=[r[0]*t[0],r[1]*t[1]]}const c=this._createMeshCanvas(r,o===a?null:this._background,e.cachedCanvases);return o!==a&&(t.setTransform(...e.baseTransform),this.matrix&&t.transform(...this.matrix)),t.translate(c.offsetX,c.offsetY),t.scale(c.scaleX,c.scaleY),t.createPattern(c.canvas,"no-repeat")}}class g extends c{getPattern(){return"hotpink"}}class m{static MAX_PATTERN_SIZE=3e3;constructor(t,e,i,s,n){this.operatorList=t[2],this.matrix=t[3]||[1,0,0,1,0,0],this.bbox=t[4],this.xstep=t[5],this.ystep=t[6],this.paintType=t[7],this.tilingType=t[8],this.color=e,this.ctx=i,this.canvasGraphicsFactory=s,this.baseTransform=n}createPatternCanvas(t){const e=this.operatorList,i=this.bbox,o=this.xstep,r=this.ystep,a=this.paintType,l=this.tilingType,c=this.color,d=this.canvasGraphicsFactory;(0,s.info)("TilingType: "+l);const h=i[0],u=i[1],p=i[2],g=i[3],m=s.Util.singularValueDecompose2dScale(this.matrix),f=s.Util.singularValueDecompose2dScale(this.baseTransform),b=[m[0]*f[0],m[1]*f[1]],v=this.getSizeAndScale(o,this.ctx.canvas.width,b[0]),y=this.getSizeAndScale(r,this.ctx.canvas.height,b[1]),w=t.cachedCanvases.getCanvas("pattern",v.size,y.size,!0),k=w.context,x=d.createCanvasGraphics(k);x.groupLevel=t.groupLevel,this.setFillAndStrokeStyleToContext(x,a,c);let E=h,C=u,A=p,S=g;return h<0&&(E=0,A+=Math.abs(h)),u<0&&(C=0,S+=Math.abs(u)),k.translate(-v.scale*E,-y.scale*C),x.transform(v.scale,0,0,y.scale,0,0),k.save(),this.clipBbox(x,E,C,A,S),x.baseTransform=(0,n.getCurrentTransform)(x.ctx),x.executeOperatorList(e),x.endDrawing(),{canvas:w.canvas,scaleX:v.scale,scaleY:y.scale,offsetX:E,offsetY:C}}getSizeAndScale(t,e,i){t=Math.abs(t);const s=Math.max(m.MAX_PATTERN_SIZE,e);let n=Math.ceil(t*i);return n>=s?n=s:i=n/t,{scale:i,size:n}}clipBbox(t,e,i,s,o){const r=s-e,a=o-i;t.ctx.rect(e,i,r,a),t.current.updateRectMinMax((0,n.getCurrentTransform)(t.ctx),[e,i,s,o]),t.clip(),t.endPath()}setFillAndStrokeStyleToContext(t,e,i){const n=t.ctx,o=t.current;switch(e){case 1:const t=this.ctx;n.fillStyle=t.fillStyle,n.strokeStyle=t.strokeStyle,o.fillColor=t.fillStyle,o.strokeColor=t.strokeStyle;break;case 2:const r=s.Util.makeHexColor(i[0],i[1],i[2]);n.fillStyle=r,n.strokeStyle=r,o.fillColor=r,o.strokeColor=r;break;default:throw new s.FormatError(`Unsupported paint type: ${e}`)}}getPattern(t,e,i,n){let o=i;n!==a&&(o=s.Util.transform(o,e.baseTransform),this.matrix&&(o=s.Util.transform(o,this.matrix)));const r=this.createPatternCanvas(e);let l=new DOMMatrix(o);l=l.translate(r.offsetX,r.offsetY),l=l.scale(1/r.scaleX,1/r.scaleY);const c=t.createPattern(r.canvas,"repeat");return c.setTransform(l),c}}function f({src:t,srcPos:e=0,dest:i,width:n,height:o,nonBlackColor:r=4294967295,inverseDecode:a=!1}){const l=s.FeatureTest.isLittleEndian?4278190080:255,[c,d]=a?[r,l]:[l,r],h=n>>3,u=7&n,p=t.length;i=new Uint32Array(i.buffer);let g=0;for(let s=0;s<o;s++){for(const s=e+h;e<s;e++){const s=e<p?t[e]:255;i[g++]=128&s?d:c,i[g++]=64&s?d:c,i[g++]=32&s?d:c,i[g++]=16&s?d:c,i[g++]=8&s?d:c,i[g++]=4&s?d:c,i[g++]=2&s?d:c,i[g++]=1&s?d:c}if(0===u)continue;const s=e<p?t[e++]:255;for(let t=0;t<u;t++)i[g++]=s&1<<7-t?d:c}return{srcPos:e,destPos:g}}const b=4096,v=16;class y{constructor(t){this.canvasFactory=t,this.cache=Object.create(null)}getCanvas(t,e,i){let s;return void 0!==this.cache[t]?(s=this.cache[t],this.canvasFactory.reset(s,e,i)):(s=this.canvasFactory.create(e,i),this.cache[t]=s),s}delete(t){delete this.cache[t]}clear(){for(const t in this.cache){const e=this.cache[t];this.canvasFactory.destroy(e),delete this.cache[t]}}}function w(t,e,i,s,o,r,a,l,c,d){const[h,u,p,g,m,f]=(0,n.getCurrentTransform)(t);if(0===u&&0===p){const n=a*h+m,b=Math.round(n),v=l*g+f,y=Math.round(v),w=(a+c)*h+m,k=Math.abs(Math.round(w)-b)||1,x=(l+d)*g+f,E=Math.abs(Math.round(x)-y)||1;return t.setTransform(Math.sign(h),0,0,Math.sign(g),b,y),t.drawImage(e,i,s,o,r,0,0,k,E),t.setTransform(h,u,p,g,m,f),[k,E]}if(0===h&&0===g){const n=l*p+m,b=Math.round(n),v=a*u+f,y=Math.round(v),w=(l+d)*p+m,k=Math.abs(Math.round(w)-b)||1,x=(a+c)*u+f,E=Math.abs(Math.round(x)-y)||1;return t.setTransform(0,Math.sign(u),Math.sign(p),0,b,y),t.drawImage(e,i,s,o,r,0,0,E,k),t.setTransform(h,u,p,g,m,f),[E,k]}return t.drawImage(e,i,s,o,r,a,l,c,d),[Math.hypot(h,u)*c,Math.hypot(p,g)*d]}class k{constructor(t,e){this.alphaIsShape=!1,this.fontSize=0,this.fontSizeScale=1,this.textMatrix=s.IDENTITY_MATRIX,this.textMatrixScale=1,this.fontMatrix=s.FONT_IDENTITY_MATRIX,this.leading=0,this.x=0,this.y=0,this.lineX=0,this.lineY=0,this.charSpacing=0,this.wordSpacing=0,this.textHScale=1,this.textRenderingMode=s.TextRenderingMode.FILL,this.textRise=0,this.fillColor="#000000",this.strokeColor="#000000",this.patternFill=!1,this.fillAlpha=1,this.strokeAlpha=1,this.lineWidth=1,this.activeSMask=null,this.transferMaps="none",this.startNewPathAndClipBox([0,0,t,e])}clone(){const t=Object.create(this);return t.clipBox=this.clipBox.slice(),t}setCurrentPoint(t,e){this.x=t,this.y=e}updatePathMinMax(t,e,i){[e,i]=s.Util.applyTransform([e,i],t),this.minX=Math.min(this.minX,e),this.minY=Math.min(this.minY,i),this.maxX=Math.max(this.maxX,e),this.maxY=Math.max(this.maxY,i)}updateRectMinMax(t,e){const i=s.Util.applyTransform(e,t),n=s.Util.applyTransform(e.slice(2),t),o=s.Util.applyTransform([e[0],e[3]],t),r=s.Util.applyTransform([e[2],e[1]],t);this.minX=Math.min(this.minX,i[0],n[0],o[0],r[0]),this.minY=Math.min(this.minY,i[1],n[1],o[1],r[1]),this.maxX=Math.max(this.maxX,i[0],n[0],o[0],r[0]),this.maxY=Math.max(this.maxY,i[1],n[1],o[1],r[1])}updateScalingPathMinMax(t,e){s.Util.scaleMinMax(t,e),this.minX=Math.min(this.minX,e[0]),this.maxX=Math.max(this.maxX,e[1]),this.minY=Math.min(this.minY,e[2]),this.maxY=Math.max(this.maxY,e[3])}updateCurvePathMinMax(t,e,i,n,o,r,a,l,c,d){const h=s.Util.bezierBoundingBox(e,i,n,o,r,a,l,c);if(d)return d[0]=Math.min(d[0],h[0],h[2]),d[1]=Math.max(d[1],h[0],h[2]),d[2]=Math.min(d[2],h[1],h[3]),void(d[3]=Math.max(d[3],h[1],h[3]));this.updateRectMinMax(t,h)}getPathBoundingBox(t=o,e=null){const i=[this.minX,this.minY,this.maxX,this.maxY];if(t===r){e||(0,s.unreachable)("Stroke bounding box must include transform.");const t=s.Util.singularValueDecompose2dScale(e),n=t[0]*this.lineWidth/2,o=t[1]*this.lineWidth/2;i[0]-=n,i[1]-=o,i[2]+=n,i[3]+=o}return i}updateClipFromPath(){const t=s.Util.intersect(this.clipBox,this.getPathBoundingBox());this.startNewPathAndClipBox(t||[0,0,0,0])}isEmptyClip(){return this.minX===1/0}startNewPathAndClipBox(t){this.clipBox=t,this.minX=1/0,this.minY=1/0,this.maxX=0,this.maxY=0}getClippedPathBoundingBox(t=o,e=null){return s.Util.intersect(this.clipBox,this.getPathBoundingBox(t,e))}}function x(t,e){if("undefined"!=typeof ImageData&&e instanceof ImageData)return void t.putImageData(e,0,0);const i=e.height,n=e.width,o=i%v,r=(i-o)/v,a=0===o?r:r+1,l=t.createImageData(n,v);let c,d=0;const h=e.data,u=l.data;let p,g,m,f;if(e.kind===s.ImageKind.GRAYSCALE_1BPP){const e=h.byteLength,i=new Uint32Array(u.buffer,0,u.byteLength>>2),f=i.length,b=n+7>>3,y=4294967295,w=s.FeatureTest.isLittleEndian?4278190080:255;for(p=0;p<a;p++){for(m=p<r?v:o,c=0,g=0;g<m;g++){const t=e-d;let s=0;const o=t>b?n:8*t-7,r=-8&o;let a=0,l=0;for(;s<r;s+=8)l=h[d++],i[c++]=128&l?y:w,i[c++]=64&l?y:w,i[c++]=32&l?y:w,i[c++]=16&l?y:w,i[c++]=8&l?y:w,i[c++]=4&l?y:w,i[c++]=2&l?y:w,i[c++]=1&l?y:w;for(;s<o;s++)0===a&&(l=h[d++],a=128),i[c++]=l&a?y:w,a>>=1}for(;c<f;)i[c++]=0;t.putImageData(l,0,p*v)}}else if(e.kind===s.ImageKind.RGBA_32BPP){for(g=0,f=n*v*4,p=0;p<r;p++)u.set(h.subarray(d,d+f)),d+=f,t.putImageData(l,0,g),g+=v;p<a&&(f=n*o*4,u.set(h.subarray(d,d+f)),t.putImageData(l,0,g))}else{if(e.kind!==s.ImageKind.RGB_24BPP)throw new Error(`bad image kind: ${e.kind}`);for(m=v,f=n*m,p=0;p<a;p++){for(p>=r&&(m=o,f=n*m),c=0,g=f;g--;)u[c++]=h[d++],u[c++]=h[d++],u[c++]=h[d++],u[c++]=255;t.putImageData(l,0,p*v)}}}function E(t,e){if(e.bitmap)return void t.drawImage(e.bitmap,0,0);const i=e.height,s=e.width,n=i%v,o=(i-n)/v,r=0===n?o:o+1,a=t.createImageData(s,v);let l=0;const c=e.data,d=a.data;for(let e=0;e<r;e++){const i=e<o?v:n;({srcPos:l}=f({src:c,srcPos:l,dest:d,width:s,height:i,nonBlackColor:0})),t.putImageData(a,0,e*v)}}function C(t,e){const i=["strokeStyle","fillStyle","fillRule","globalAlpha","lineWidth","lineCap","lineJoin","miterLimit","globalCompositeOperation","font","filter"];for(const s of i)void 0!==t[s]&&(e[s]=t[s]);void 0!==t.setLineDash&&(e.setLineDash(t.getLineDash()),e.lineDashOffset=t.lineDashOffset)}function A(t){if(t.strokeStyle=t.fillStyle="#000000",t.fillRule="nonzero",t.globalAlpha=1,t.lineWidth=1,t.lineCap="butt",t.lineJoin="miter",t.miterLimit=10,t.globalCompositeOperation="source-over",t.font="10px sans-serif",void 0!==t.setLineDash&&(t.setLineDash([]),t.lineDashOffset=0),!s.isNodeJS){const{filter:e}=t;"none"!==e&&""!==e&&(t.filter="none")}}function S(t,e,i,s){const n=t.length;for(let o=3;o<n;o+=4){const n=t[o];if(0===n)t[o-3]=e,t[o-2]=i,t[o-1]=s;else if(n<255){const r=255-n;t[o-3]=t[o-3]*n+e*r>>8,t[o-2]=t[o-2]*n+i*r>>8,t[o-1]=t[o-1]*n+s*r>>8}}}function T(t,e,i){const s=t.length;for(let n=3;n<s;n+=4){const s=i?i[t[n]]:t[n];e[n]=e[n]*s*.00392156862745098|0}}function _(t,e,i){const s=t.length;for(let n=3;n<s;n+=4){const s=77*t[n-3]+152*t[n-2]+28*t[n-1];e[n]=i?e[n]*i[s>>8]>>8:e[n]*s>>16}}function M(t,e){const i=s.Util.singularValueDecompose2dScale(t);i[0]=Math.fround(i[0]),i[1]=Math.fround(i[1]);const o=Math.fround((globalThis.devicePixelRatio||1)*n.PixelsPerInch.PDF_TO_CSS_UNITS);return void 0!==e?e:i[0]<=o||i[1]<=o}const I=["butt","round","square"],B=["miter","round","bevel"],L={},P={};class R{constructor(t,e,i,s,n,{optionalContentConfig:o,markedContentStack:r=null},a,l){this.ctx=t,this.current=new k(this.ctx.canvas.width,this.ctx.canvas.height),this.stateStack=[],this.pendingClip=null,this.pendingEOFill=!1,this.res=null,this.xobjs=null,this.commonObjs=e,this.objs=i,this.canvasFactory=s,this.filterFactory=n,this.groupStack=[],this.processingType3=null,this.baseTransform=null,this.baseTransformStack=[],this.groupLevel=0,this.smaskStack=[],this.smaskCounter=0,this.tempSMask=null,this.suspendedCtx=null,this.contentVisible=!0,this.markedContentStack=r||[],this.optionalContentConfig=o,this.cachedCanvases=new y(this.canvasFactory),this.cachedPatterns=new Map,this.annotationCanvasMap=a,this.viewportScale=1,this.outputScaleX=1,this.outputScaleY=1,this.pageColors=l,this._cachedScaleForStroking=[-1,0],this._cachedGetSinglePixelWidth=null,this._cachedBitmapsMap=new Map}getObject(t,e=null){return"string"==typeof t?t.startsWith("g_")?this.commonObjs.get(t):this.objs.get(t):e}beginDrawing({transform:t,viewport:e,transparency:i=!1,background:s=null}){const o=this.ctx.canvas.width,r=this.ctx.canvas.height,a=this.ctx.fillStyle;if(this.ctx.fillStyle=s||"#ffffff",this.ctx.fillRect(0,0,o,r),this.ctx.fillStyle=a,i){const t=this.cachedCanvases.getCanvas("transparent",o,r);this.compositeCtx=this.ctx,this.transparentCanvas=t.canvas,this.ctx=t.context,this.ctx.save(),this.ctx.transform(...(0,n.getCurrentTransform)(this.compositeCtx))}this.ctx.save(),A(this.ctx),t&&(this.ctx.transform(...t),this.outputScaleX=t[0],this.outputScaleY=t[0]),this.ctx.transform(...e.transform),this.viewportScale=e.scale,this.baseTransform=(0,n.getCurrentTransform)(this.ctx)}executeOperatorList(t,e,i,n){const o=t.argsArray,r=t.fnArray;let a=e||0;const l=o.length;if(l===a)return a;const c=l-a>10&&"function"==typeof i,d=c?Date.now()+15:0;let h=0;const u=this.commonObjs,p=this.objs;let g;for(;;){if(void 0!==n&&a===n.nextBreakPoint)return n.breakIt(a,i),a;if(g=r[a],g!==s.OPS.dependency)this[g].apply(this,o[a]);else for(const t of o[a]){const e=t.startsWith("g_")?u:p;if(!e.has(t))return e.get(t,i),a}if(a++,a===l)return a;if(c&&++h>10){if(Date.now()>d)return i(),a;h=0}}}#ot(){for(;this.stateStack.length||this.inSMaskMode;)this.restore();this.ctx.restore(),this.transparentCanvas&&(this.ctx=this.compositeCtx,this.ctx.save(),this.ctx.setTransform(1,0,0,1,0,0),this.ctx.drawImage(this.transparentCanvas,0,0),this.ctx.restore(),this.transparentCanvas=null)}endDrawing(){this.#ot(),this.cachedCanvases.clear(),this.cachedPatterns.clear();for(const t of this._cachedBitmapsMap.values()){for(const e of t.values())"undefined"!=typeof HTMLCanvasElement&&e instanceof HTMLCanvasElement&&(e.width=e.height=0);t.clear()}this._cachedBitmapsMap.clear(),this.#rt()}#rt(){if(this.pageColors){const t=this.filterFactory.addHCMFilter(this.pageColors.foreground,this.pageColors.background);if("none"!==t){const e=this.ctx.filter;this.ctx.filter=t,this.ctx.drawImage(this.ctx.canvas,0,0),this.ctx.filter=e}}}_scaleImage(t,e){const i=t.width,s=t.height;let n,o,r=Math.max(Math.hypot(e[0],e[1]),1),a=Math.max(Math.hypot(e[2],e[3]),1),l=i,c=s,d="prescale1";for(;r>2&&l>1||a>2&&c>1;){let e=l,i=c;r>2&&l>1&&(e=l>=16384?Math.floor(l/2)-1||1:Math.ceil(l/2),r/=l/e),a>2&&c>1&&(i=c>=16384?Math.floor(c/2)-1||1:Math.ceil(c)/2,a/=c/i),n=this.cachedCanvases.getCanvas(d,e,i),o=n.context,o.clearRect(0,0,e,i),o.drawImage(t,0,0,l,c,0,0,e,i),t=n.canvas,l=e,c=i,d="prescale1"===d?"prescale2":"prescale1"}return{img:t,paintWidth:l,paintHeight:c}}_createMaskCanvas(t){const e=this.ctx,{width:i,height:r}=t,a=this.current.fillColor,l=this.current.patternFill,c=(0,n.getCurrentTransform)(e);let d,h,u,p;if((t.bitmap||t.data)&&t.count>1){const e=t.bitmap||t.data.buffer;h=JSON.stringify(l?c:[c.slice(0,4),a]),d=this._cachedBitmapsMap.get(e),d||(d=new Map,this._cachedBitmapsMap.set(e,d));const i=d.get(h);if(i&&!l)return{canvas:i,offsetX:Math.round(Math.min(c[0],c[2])+c[4]),offsetY:Math.round(Math.min(c[1],c[3])+c[5])};u=i}u||(p=this.cachedCanvases.getCanvas("maskCanvas",i,r),E(p.context,t));let g=s.Util.transform(c,[1/i,0,0,-1/r,0,0]);g=s.Util.transform(g,[1,0,0,1,0,-r]);const[m,f,b,v]=s.Util.getAxialAlignedBoundingBox([0,0,i,r],g),y=Math.round(b-m)||1,k=Math.round(v-f)||1,x=this.cachedCanvases.getCanvas("fillCanvas",y,k),C=x.context,A=m,S=f;C.translate(-A,-S),C.transform(...g),u||(u=this._scaleImage(p.canvas,(0,n.getCurrentTransformInverse)(C)),u=u.img,d&&l&&d.set(h,u)),C.imageSmoothingEnabled=M((0,n.getCurrentTransform)(C),t.interpolate),w(C,u,0,0,u.width,u.height,0,0,i,r),C.globalCompositeOperation="source-in";const T=s.Util.transform((0,n.getCurrentTransformInverse)(C),[1,0,0,1,-A,-S]);return C.fillStyle=l?a.getPattern(e,this,T,o):a,C.fillRect(0,0,i,r),d&&!l&&(this.cachedCanvases.delete("fillCanvas"),d.set(h,x.canvas)),{canvas:x.canvas,offsetX:Math.round(A),offsetY:Math.round(S)}}setLineWidth(t){t!==this.current.lineWidth&&(this._cachedScaleForStroking[0]=-1),this.current.lineWidth=t,this.ctx.lineWidth=t}setLineCap(t){this.ctx.lineCap=I[t]}setLineJoin(t){this.ctx.lineJoin=B[t]}setMiterLimit(t){this.ctx.miterLimit=t}setDash(t,e){const i=this.ctx;void 0!==i.setLineDash&&(i.setLineDash(t),i.lineDashOffset=e)}setRenderingIntent(t){}setFlatness(t){}setGState(t){for(const[e,i]of t)switch(e){case"LW":this.setLineWidth(i);break;case"LC":this.setLineCap(i);break;case"LJ":this.setLineJoin(i);break;case"ML":this.setMiterLimit(i);break;case"D":this.setDash(i[0],i[1]);break;case"RI":this.setRenderingIntent(i);break;case"FL":this.setFlatness(i);break;case"Font":this.setFont(i[0],i[1]);break;case"CA":this.current.strokeAlpha=i;break;case"ca":this.current.fillAlpha=i,this.ctx.globalAlpha=i;break;case"BM":this.ctx.globalCompositeOperation=i;break;case"SMask":this.current.activeSMask=i?this.tempSMask:null,this.tempSMask=null,this.checkSMaskState();break;case"TR":this.ctx.filter=this.current.transferMaps=this.filterFactory.addFilter(i)}}get inSMaskMode(){return!!this.suspendedCtx}checkSMaskState(){const t=this.inSMaskMode;this.current.activeSMask&&!t?this.beginSMaskMode():!this.current.activeSMask&&t&&this.endSMaskMode()}beginSMaskMode(){if(this.inSMaskMode)throw new Error("beginSMaskMode called while already in smask mode");const t=this.ctx.canvas.width,e=this.ctx.canvas.height,i="smaskGroupAt"+this.groupLevel,s=this.cachedCanvases.getCanvas(i,t,e);this.suspendedCtx=this.ctx,this.ctx=s.context;const o=this.ctx;o.setTransform(...(0,n.getCurrentTransform)(this.suspendedCtx)),C(this.suspendedCtx,o),function(t,e){if(t._removeMirroring)throw new Error("Context is already forwarding operations.");t.__originalSave=t.save,t.__originalRestore=t.restore,t.__originalRotate=t.rotate,t.__originalScale=t.scale,t.__originalTranslate=t.translate,t.__originalTransform=t.transform,t.__originalSetTransform=t.setTransform,t.__originalResetTransform=t.resetTransform,t.__originalClip=t.clip,t.__originalMoveTo=t.moveTo,t.__originalLineTo=t.lineTo,t.__originalBezierCurveTo=t.bezierCurveTo,t.__originalRect=t.rect,t.__originalClosePath=t.closePath,t.__originalBeginPath=t.beginPath,t._removeMirroring=()=>{t.save=t.__originalSave,t.restore=t.__originalRestore,t.rotate=t.__originalRotate,t.scale=t.__originalScale,t.translate=t.__originalTranslate,t.transform=t.__originalTransform,t.setTransform=t.__originalSetTransform,t.resetTransform=t.__originalResetTransform,t.clip=t.__originalClip,t.moveTo=t.__originalMoveTo,t.lineTo=t.__originalLineTo,t.bezierCurveTo=t.__originalBezierCurveTo,t.rect=t.__originalRect,t.closePath=t.__originalClosePath,t.beginPath=t.__originalBeginPath,delete t._removeMirroring},t.save=function(){e.save(),this.__originalSave()},t.restore=function(){e.restore(),this.__originalRestore()},t.translate=function(t,i){e.translate(t,i),this.__originalTranslate(t,i)},t.scale=function(t,i){e.scale(t,i),this.__originalScale(t,i)},t.transform=function(t,i,s,n,o,r){e.transform(t,i,s,n,o,r),this.__originalTransform(t,i,s,n,o,r)},t.setTransform=function(t,i,s,n,o,r){e.setTransform(t,i,s,n,o,r),this.__originalSetTransform(t,i,s,n,o,r)},t.resetTransform=function(){e.resetTransform(),this.__originalResetTransform()},t.rotate=function(t){e.rotate(t),this.__originalRotate(t)},t.clip=function(t){e.clip(t),this.__originalClip(t)},t.moveTo=function(t,i){e.moveTo(t,i),this.__originalMoveTo(t,i)},t.lineTo=function(t,i){e.lineTo(t,i),this.__originalLineTo(t,i)},t.bezierCurveTo=function(t,i,s,n,o,r){e.bezierCurveTo(t,i,s,n,o,r),this.__originalBezierCurveTo(t,i,s,n,o,r)},t.rect=function(t,i,s,n){e.rect(t,i,s,n),this.__originalRect(t,i,s,n)},t.closePath=function(){e.closePath(),this.__originalClosePath()},t.beginPath=function(){e.beginPath(),this.__originalBeginPath()}}(o,this.suspendedCtx),this.setGState([["BM","source-over"],["ca",1],["CA",1]])}endSMaskMode(){if(!this.inSMaskMode)throw new Error("endSMaskMode called while not in smask mode");this.ctx._removeMirroring(),C(this.ctx,this.suspendedCtx),this.ctx=this.suspendedCtx,this.suspendedCtx=null}compose(t){if(!this.current.activeSMask)return;t?(t[0]=Math.floor(t[0]),t[1]=Math.floor(t[1]),t[2]=Math.ceil(t[2]),t[3]=Math.ceil(t[3])):t=[0,0,this.ctx.canvas.width,this.ctx.canvas.height];const e=this.current.activeSMask;(function(t,e,i,s){const n=s[0],o=s[1],r=s[2]-n,a=s[3]-o;0!==r&&0!==a&&(function(t,e,i,s,n,o,r,a,l,c,d){const h=!!o,u=h?o[0]:0,p=h?o[1]:0,g=h?o[2]:0,m="Luminosity"===n?_:T,f=Math.min(s,Math.ceil(1048576/i));for(let n=0;n<s;n+=f){const o=Math.min(f,s-n),b=t.getImageData(a-c,n+(l-d),i,o),v=e.getImageData(a,n+l,i,o);h&&S(b.data,u,p,g),m(b.data,v.data,r),e.putImageData(v,a,n+l)}}(e.context,i,r,a,e.subtype,e.backdrop,e.transferMap,n,o,e.offsetX,e.offsetY),t.save(),t.globalAlpha=1,t.globalCompositeOperation="source-over",t.setTransform(1,0,0,1,0,0),t.drawImage(i.canvas,0,0),t.restore())})(this.suspendedCtx,e,this.ctx,t),this.ctx.save(),this.ctx.setTransform(1,0,0,1,0,0),this.ctx.clearRect(0,0,this.ctx.canvas.width,this.ctx.canvas.height),this.ctx.restore()}save(){this.inSMaskMode?(C(this.ctx,this.suspendedCtx),this.suspendedCtx.save()):this.ctx.save();const t=this.current;this.stateStack.push(t),this.current=t.clone()}restore(){0===this.stateStack.length&&this.inSMaskMode&&this.endSMaskMode(),0!==this.stateStack.length&&(this.current=this.stateStack.pop(),this.inSMaskMode?(this.suspendedCtx.restore(),C(this.suspendedCtx,this.ctx)):this.ctx.restore(),this.checkSMaskState(),this.pendingClip=null,this._cachedScaleForStroking[0]=-1,this._cachedGetSinglePixelWidth=null)}transform(t,e,i,s,n,o){this.ctx.transform(t,e,i,s,n,o),this._cachedScaleForStroking[0]=-1,this._cachedGetSinglePixelWidth=null}constructPath(t,e,i){const o=this.ctx,r=this.current;let a,l,c=r.x,d=r.y;const h=(0,n.getCurrentTransform)(o),u=0===h[0]&&0===h[3]||0===h[1]&&0===h[2],p=u?i.slice(0):null;for(let i=0,n=0,g=t.length;i<g;i++)switch(0|t[i]){case s.OPS.rectangle:c=e[n++],d=e[n++];const t=e[n++],i=e[n++],g=c+t,m=d+i;o.moveTo(c,d),0===t||0===i?o.lineTo(g,m):(o.lineTo(g,d),o.lineTo(g,m),o.lineTo(c,m)),u||r.updateRectMinMax(h,[c,d,g,m]),o.closePath();break;case s.OPS.moveTo:c=e[n++],d=e[n++],o.moveTo(c,d),u||r.updatePathMinMax(h,c,d);break;case s.OPS.lineTo:c=e[n++],d=e[n++],o.lineTo(c,d),u||r.updatePathMinMax(h,c,d);break;case s.OPS.curveTo:a=c,l=d,c=e[n+4],d=e[n+5],o.bezierCurveTo(e[n],e[n+1],e[n+2],e[n+3],c,d),r.updateCurvePathMinMax(h,a,l,e[n],e[n+1],e[n+2],e[n+3],c,d,p),n+=6;break;case s.OPS.curveTo2:a=c,l=d,o.bezierCurveTo(c,d,e[n],e[n+1],e[n+2],e[n+3]),r.updateCurvePathMinMax(h,a,l,c,d,e[n],e[n+1],e[n+2],e[n+3],p),c=e[n+2],d=e[n+3],n+=4;break;case s.OPS.curveTo3:a=c,l=d,c=e[n+2],d=e[n+3],o.bezierCurveTo(e[n],e[n+1],c,d,c,d),r.updateCurvePathMinMax(h,a,l,e[n],e[n+1],c,d,c,d,p),n+=4;break;case s.OPS.closePath:o.closePath()}u&&r.updateScalingPathMinMax(h,p),r.setCurrentPoint(c,d)}closePath(){this.ctx.closePath()}stroke(t=!0){const e=this.ctx,i=this.current.strokeColor;e.globalAlpha=this.current.strokeAlpha,this.contentVisible&&("object"==typeof i&&i?.getPattern?(e.save(),e.strokeStyle=i.getPattern(e,this,(0,n.getCurrentTransformInverse)(e),r),this.rescaleAndStroke(!1),e.restore()):this.rescaleAndStroke(!0)),t&&this.consumePath(this.current.getClippedPathBoundingBox()),e.globalAlpha=this.current.fillAlpha}closeStroke(){this.closePath(),this.stroke()}fill(t=!0){const e=this.ctx,i=this.current.fillColor;let s=!1;this.current.patternFill&&(e.save(),e.fillStyle=i.getPattern(e,this,(0,n.getCurrentTransformInverse)(e),o),s=!0);const r=this.current.getClippedPathBoundingBox();this.contentVisible&&null!==r&&(this.pendingEOFill?(e.fill("evenodd"),this.pendingEOFill=!1):e.fill()),s&&e.restore(),t&&this.consumePath(r)}eoFill(){this.pendingEOFill=!0,this.fill()}fillStroke(){this.fill(!1),this.stroke(!1),this.consumePath()}eoFillStroke(){this.pendingEOFill=!0,this.fillStroke()}closeFillStroke(){this.closePath(),this.fillStroke()}closeEOFillStroke(){this.pendingEOFill=!0,this.closePath(),this.fillStroke()}endPath(){this.consumePath()}clip(){this.pendingClip=L}eoClip(){this.pendingClip=P}beginText(){this.current.textMatrix=s.IDENTITY_MATRIX,this.current.textMatrixScale=1,this.current.x=this.current.lineX=0,this.current.y=this.current.lineY=0}endText(){const t=this.pendingTextPaths,e=this.ctx;if(void 0!==t){e.save(),e.beginPath();for(const i of t)e.setTransform(...i.transform),e.translate(i.x,i.y),i.addToPath(e,i.fontSize);e.restore(),e.clip(),e.beginPath(),delete this.pendingTextPaths}else e.beginPath()}setCharSpacing(t){this.current.charSpacing=t}setWordSpacing(t){this.current.wordSpacing=t}setHScale(t){this.current.textHScale=t/100}setLeading(t){this.current.leading=-t}setFont(t,e){const i=this.commonObjs.get(t),n=this.current;if(!i)throw new Error(`Can't find font for ${t}`);if(n.fontMatrix=i.fontMatrix||s.FONT_IDENTITY_MATRIX,0!==n.fontMatrix[0]&&0!==n.fontMatrix[3]||(0,s.warn)("Invalid font matrix for font "+t),e<0?(e=-e,n.fontDirection=-1):n.fontDirection=1,this.current.font=i,this.current.fontSize=e,i.isType3Font)return;const o=i.loadedName||"sans-serif",r=i.systemFontInfo?.css||`"${o}", ${i.fallbackName}`;let a="normal";i.black?a="900":i.bold&&(a="bold");const l=i.italic?"italic":"normal";let c=e;e<16?c=16:e>100&&(c=100),this.current.fontSizeScale=e/c,this.ctx.font=`${l} ${a} ${c}px ${r}`}setTextRenderingMode(t){this.current.textRenderingMode=t}setTextRise(t){this.current.textRise=t}moveText(t,e){this.current.x=this.current.lineX+=t,this.current.y=this.current.lineY+=e}setLeadingMoveText(t,e){this.setLeading(-e),this.moveText(t,e)}setTextMatrix(t,e,i,s,n,o){this.current.textMatrix=[t,e,i,s,n,o],this.current.textMatrixScale=Math.hypot(t,e),this.current.x=this.current.lineX=0,this.current.y=this.current.lineY=0}nextLine(){this.moveText(0,this.current.leading)}paintChar(t,e,i,o){const r=this.ctx,a=this.current,l=a.font,c=a.textRenderingMode,d=a.fontSize/a.fontSizeScale,h=c&s.TextRenderingMode.FILL_STROKE_MASK,u=!!(c&s.TextRenderingMode.ADD_TO_PATH_FLAG),p=a.patternFill&&!l.missingFile;let g;(l.disableFontFace||u||p)&&(g=l.getPathGenerator(this.commonObjs,t)),l.disableFontFace||p?(r.save(),r.translate(e,i),r.beginPath(),g(r,d),o&&r.setTransform(...o),h!==s.TextRenderingMode.FILL&&h!==s.TextRenderingMode.FILL_STROKE||r.fill(),h!==s.TextRenderingMode.STROKE&&h!==s.TextRenderingMode.FILL_STROKE||r.stroke(),r.restore()):(h!==s.TextRenderingMode.FILL&&h!==s.TextRenderingMode.FILL_STROKE||r.fillText(t,e,i),h!==s.TextRenderingMode.STROKE&&h!==s.TextRenderingMode.FILL_STROKE||r.strokeText(t,e,i)),u&&(this.pendingTextPaths||=[]).push({transform:(0,n.getCurrentTransform)(r),x:e,y:i,fontSize:d,addToPath:g})}get isFontSubpixelAAEnabled(){const{context:t}=this.cachedCanvases.getCanvas("isFontSubpixelAAEnabled",10,10);t.scale(1.5,1),t.fillText("I",0,10);const e=t.getImageData(0,0,10,10).data;let i=!1;for(let t=3;t<e.length;t+=4)if(e[t]>0&&e[t]<255){i=!0;break}return(0,s.shadow)(this,"isFontSubpixelAAEnabled",i)}showText(t){const e=this.current,i=e.font;if(i.isType3Font)return this.showType3Text(t);const r=e.fontSize;if(0===r)return;const a=this.ctx,l=e.fontSizeScale,c=e.charSpacing,d=e.wordSpacing,h=e.fontDirection,u=e.textHScale*h,p=t.length,g=i.vertical,m=g?1:-1,f=i.defaultVMetrics,b=r*e.fontMatrix[0],v=e.textRenderingMode===s.TextRenderingMode.FILL&&!i.disableFontFace&&!e.patternFill;let y;if(a.save(),a.transform(...e.textMatrix),a.translate(e.x,e.y+e.textRise),h>0?a.scale(u,-1):a.scale(u,1),e.patternFill){a.save();const t=e.fillColor.getPattern(a,this,(0,n.getCurrentTransformInverse)(a),o);y=(0,n.getCurrentTransform)(a),a.restore(),a.fillStyle=t}let w=e.lineWidth;const k=e.textMatrixScale;if(0===k||0===w){const t=e.textRenderingMode&s.TextRenderingMode.FILL_STROKE_MASK;t!==s.TextRenderingMode.STROKE&&t!==s.TextRenderingMode.FILL_STROKE||(w=this.getSinglePixelWidth())}else w/=k;if(1!==l&&(a.scale(l,l),w/=l),a.lineWidth=w,i.isInvalidPDFjsFont){const i=[];let s=0;for(const e of t)i.push(e.unicode),s+=e.width;return a.fillText(i.join(""),0,0),e.x+=s*b*u,a.restore(),void this.compose()}let x,E=0;for(x=0;x<p;++x){const e=t[x];if("number"==typeof e){E+=m*e*r/1e3;continue}let s=!1;const n=(e.isSpace?d:0)+c,o=e.fontChar,u=e.accent;let p,w,k=e.width;if(g){const t=e.vmetric||f,i=-(e.vmetric?t[1]:.5*k)*b,s=t[2]*b;k=t?-t[0]:k,p=i/l,w=(E+s)/l}else p=E/l,w=0;if(i.remeasure&&k>0){const t=1e3*a.measureText(o).width/r*l;if(k<t&&this.isFontSubpixelAAEnabled){const e=k/t;s=!0,a.save(),a.scale(e,1),p/=e}else k!==t&&(p+=(k-t)/2e3*r/l)}if(this.contentVisible&&(e.isInFont||i.missingFile))if(v&&!u)a.fillText(o,p,w);else if(this.paintChar(o,p,w,y),u){const t=p+r*u.offset.x/l,e=w-r*u.offset.y/l;this.paintChar(u.fontChar,t,e,y)}E+=g?k*b-n*h:k*b+n*h,s&&a.restore()}g?e.y-=E:e.x+=E*u,a.restore(),this.compose()}showType3Text(t){const e=this.ctx,i=this.current,n=i.font,o=i.fontSize,r=i.fontDirection,a=n.vertical?1:-1,l=i.charSpacing,c=i.wordSpacing,d=i.textHScale*r,h=i.fontMatrix||s.FONT_IDENTITY_MATRIX,u=t.length;let p,g,m,f;if(i.textRenderingMode!==s.TextRenderingMode.INVISIBLE&&0!==o){for(this._cachedScaleForStroking[0]=-1,this._cachedGetSinglePixelWidth=null,e.save(),e.transform(...i.textMatrix),e.translate(i.x,i.y),e.scale(d,r),p=0;p<u;++p){if(g=t[p],"number"==typeof g){f=a*g*o/1e3,this.ctx.translate(f,0),i.x+=f*d;continue}const r=(g.isSpace?c:0)+l,u=n.charProcOperatorList[g.operatorListId];u?(this.contentVisible&&(this.processingType3=g,this.save(),e.scale(o,o),e.transform(...h),this.executeOperatorList(u),this.restore()),m=s.Util.applyTransform([g.width,0],h)[0]*o+r,e.translate(m,0),i.x+=m*d):(0,s.warn)(`Type3 character "${g.operatorListId}" is not available.`)}e.restore(),this.processingType3=null}}setCharWidth(t,e){}setCharWidthAndBounds(t,e,i,s,n,o){this.ctx.rect(i,s,n-i,o-s),this.ctx.clip(),this.endPath()}getColorN_Pattern(t){let e;if("TilingPattern"===t[0]){const i=t[1],s=this.baseTransform||(0,n.getCurrentTransform)(this.ctx),o={createCanvasGraphics:t=>new R(t,this.commonObjs,this.objs,this.canvasFactory,this.filterFactory,{optionalContentConfig:this.optionalContentConfig,markedContentStack:this.markedContentStack})};e=new m(t,i,this.ctx,o,s)}else e=this._getPattern(t[1],t[2]);return e}setStrokeColorN(){this.current.strokeColor=this.getColorN_Pattern(arguments)}setFillColorN(){this.current.fillColor=this.getColorN_Pattern(arguments),this.current.patternFill=!0}setStrokeRGBColor(t,e,i){const n=s.Util.makeHexColor(t,e,i);this.ctx.strokeStyle=n,this.current.strokeColor=n}setFillRGBColor(t,e,i){const n=s.Util.makeHexColor(t,e,i);this.ctx.fillStyle=n,this.current.fillColor=n,this.current.patternFill=!1}_getPattern(t,e=null){let i;return this.cachedPatterns.has(t)?i=this.cachedPatterns.get(t):(i=function(t){switch(t[0]){case"RadialAxial":return new d(t);case"Mesh":return new p(t);case"Dummy":return new g}throw new Error(`Unknown IR type: ${t[0]}`)}(this.getObject(t)),this.cachedPatterns.set(t,i)),e&&(i.matrix=e),i}shadingFill(t){if(!this.contentVisible)return;const e=this.ctx;this.save();const i=this._getPattern(t);e.fillStyle=i.getPattern(e,this,(0,n.getCurrentTransformInverse)(e),a);const o=(0,n.getCurrentTransformInverse)(e);if(o){const{width:t,height:i}=e.canvas,[n,r,a,l]=s.Util.getAxialAlignedBoundingBox([0,0,t,i],o);this.ctx.fillRect(n,r,a-n,l-r)}else this.ctx.fillRect(-1e10,-1e10,2e10,2e10);this.compose(this.current.getClippedPathBoundingBox()),this.restore()}beginInlineImage(){(0,s.unreachable)("Should not call beginInlineImage")}beginImageData(){(0,s.unreachable)("Should not call beginImageData")}paintFormXObjectBegin(t,e){if(this.contentVisible&&(this.save(),this.baseTransformStack.push(this.baseTransform),Array.isArray(t)&&6===t.length&&this.transform(...t),this.baseTransform=(0,n.getCurrentTransform)(this.ctx),e)){const t=e[2]-e[0],i=e[3]-e[1];this.ctx.rect(e[0],e[1],t,i),this.current.updateRectMinMax((0,n.getCurrentTransform)(this.ctx),e),this.clip(),this.endPath()}}paintFormXObjectEnd(){this.contentVisible&&(this.restore(),this.baseTransform=this.baseTransformStack.pop())}beginGroup(t){if(!this.contentVisible)return;this.save(),this.inSMaskMode&&(this.endSMaskMode(),this.current.activeSMask=null);const e=this.ctx;t.isolated||(0,s.info)("TODO: Support non-isolated groups."),t.knockout&&(0,s.warn)("Knockout groups not supported.");const i=(0,n.getCurrentTransform)(e);if(t.matrix&&e.transform(...t.matrix),!t.bbox)throw new Error("Bounding box is required.");let o=s.Util.getAxialAlignedBoundingBox(t.bbox,(0,n.getCurrentTransform)(e));const r=[0,0,e.canvas.width,e.canvas.height];o=s.Util.intersect(o,r)||[0,0,0,0];const a=Math.floor(o[0]),l=Math.floor(o[1]);let c=Math.max(Math.ceil(o[2])-a,1),d=Math.max(Math.ceil(o[3])-l,1),h=1,u=1;c>b&&(h=c/b,c=b),d>b&&(u=d/b,d=b),this.current.startNewPathAndClipBox([0,0,c,d]);let p="groupAt"+this.groupLevel;t.smask&&(p+="_smask_"+this.smaskCounter++%2);const g=this.cachedCanvases.getCanvas(p,c,d),m=g.context;m.scale(1/h,1/u),m.translate(-a,-l),m.transform(...i),t.smask?this.smaskStack.push({canvas:g.canvas,context:m,offsetX:a,offsetY:l,scaleX:h,scaleY:u,subtype:t.smask.subtype,backdrop:t.smask.backdrop,transferMap:t.smask.transferMap||null,startTransformInverse:null}):(e.setTransform(1,0,0,1,0,0),e.translate(a,l),e.scale(h,u),e.save()),C(e,m),this.ctx=m,this.setGState([["BM","source-over"],["ca",1],["CA",1]]),this.groupStack.push(e),this.groupLevel++}endGroup(t){if(!this.contentVisible)return;this.groupLevel--;const e=this.ctx,i=this.groupStack.pop();if(this.ctx=i,this.ctx.imageSmoothingEnabled=!1,t.smask)this.tempSMask=this.smaskStack.pop(),this.restore();else{this.ctx.restore();const t=(0,n.getCurrentTransform)(this.ctx);this.restore(),this.ctx.save(),this.ctx.setTransform(...t);const i=s.Util.getAxialAlignedBoundingBox([0,0,e.canvas.width,e.canvas.height],t);this.ctx.drawImage(e.canvas,0,0),this.ctx.restore(),this.compose(i)}}beginAnnotation(t,e,i,o,r){if(this.#ot(),A(this.ctx),this.ctx.save(),this.save(),this.baseTransform&&this.ctx.setTransform(...this.baseTransform),Array.isArray(e)&&4===e.length){const o=e[2]-e[0],a=e[3]-e[1];if(r&&this.annotationCanvasMap){(i=i.slice())[4]-=e[0],i[5]-=e[1],(e=e.slice())[0]=e[1]=0,e[2]=o,e[3]=a;const[r,l]=s.Util.singularValueDecompose2dScale((0,n.getCurrentTransform)(this.ctx)),{viewportScale:c}=this,d=Math.ceil(o*this.outputScaleX*c),h=Math.ceil(a*this.outputScaleY*c);this.annotationCanvas=this.canvasFactory.create(d,h);const{canvas:u,context:p}=this.annotationCanvas;this.annotationCanvasMap.set(t,u),this.annotationCanvas.savedCtx=this.ctx,this.ctx=p,this.ctx.save(),this.ctx.setTransform(r,0,0,-l,0,a*l),A(this.ctx)}else A(this.ctx),this.ctx.rect(e[0],e[1],o,a),this.ctx.clip(),this.endPath()}this.current=new k(this.ctx.canvas.width,this.ctx.canvas.height),this.transform(...i),this.transform(...o)}endAnnotation(){this.annotationCanvas&&(this.ctx.restore(),this.#rt(),this.ctx=this.annotationCanvas.savedCtx,delete this.annotationCanvas.savedCtx,delete this.annotationCanvas)}paintImageMaskXObject(t){if(!this.contentVisible)return;const e=t.count;(t=this.getObject(t.data,t)).count=e;const i=this.ctx,s=this.processingType3;if(s&&(void 0===s.compiled&&(s.compiled=function(t){const{width:e,height:i}=t;if(e>1e3||i>1e3)return null;const s=new Uint8Array([0,2,4,0,1,0,5,4,8,10,0,8,0,2,1,0]),n=e+1;let o,r,a,l=new Uint8Array(n*(i+1));const c=e+7&-8;let d=new Uint8Array(c*i),h=0;for(const e of t.data){let t=128;for(;t>0;)d[h++]=e&t?0:255,t>>=1}let u=0;for(h=0,0!==d[h]&&(l[0]=1,++u),r=1;r<e;r++)d[h]!==d[h+1]&&(l[r]=d[h]?2:1,++u),h++;for(0!==d[h]&&(l[r]=2,++u),o=1;o<i;o++){h=o*c,a=o*n,d[h-c]!==d[h]&&(l[a]=d[h]?1:8,++u);let t=(d[h]?4:0)+(d[h-c]?8:0);for(r=1;r<e;r++)t=(t>>2)+(d[h+1]?4:0)+(d[h-c+1]?8:0),s[t]&&(l[a+r]=s[t],++u),h++;if(d[h-c]!==d[h]&&(l[a+r]=d[h]?2:4,++u),u>1e3)return null}for(h=c*(i-1),a=o*n,0!==d[h]&&(l[a]=8,++u),r=1;r<e;r++)d[h]!==d[h+1]&&(l[a+r]=d[h]?4:8,++u),h++;if(0!==d[h]&&(l[a+r]=4,++u),u>1e3)return null;const p=new Int32Array([0,n,-1,0,-n,0,0,0,1]),g=new Path2D;for(o=0;u&&o<=i;o++){let t=o*n;const i=t+e;for(;t<i&&!l[t];)t++;if(t===i)continue;g.moveTo(t%n,o);const s=t;let r=l[t];do{const e=p[r];do{t+=e}while(!l[t]);const i=l[t];5!==i&&10!==i?(r=i,l[t]=0):(r=i&51*r>>4,l[t]&=r>>2|r<<2),g.lineTo(t%n,t/n|0),l[t]||--u}while(s!==t);--o}return d=null,l=null,function(t){t.save(),t.scale(1/e,-1/i),t.translate(0,-i),t.fill(g),t.beginPath(),t.restore()}}(t)),s.compiled))return void s.compiled(i);const n=this._createMaskCanvas(t),o=n.canvas;i.save(),i.setTransform(1,0,0,1,0,0),i.drawImage(o,n.offsetX,n.offsetY),i.restore(),this.compose()}paintImageMaskXObjectRepeat(t,e,i=0,o=0,r,a){if(!this.contentVisible)return;t=this.getObject(t.data,t);const l=this.ctx;l.save();const c=(0,n.getCurrentTransform)(l);l.transform(e,i,o,r,0,0);const d=this._createMaskCanvas(t);l.setTransform(1,0,0,1,d.offsetX-c[4],d.offsetY-c[5]);for(let t=0,n=a.length;t<n;t+=2){const n=s.Util.transform(c,[e,i,o,r,a[t],a[t+1]]),[h,u]=s.Util.applyTransform([0,0],n);l.drawImage(d.canvas,h,u)}l.restore(),this.compose()}paintImageMaskXObjectGroup(t){if(!this.contentVisible)return;const e=this.ctx,i=this.current.fillColor,s=this.current.patternFill;for(const r of t){const{data:t,width:a,height:l,transform:c}=r,d=this.cachedCanvases.getCanvas("maskCanvas",a,l),h=d.context;h.save(),E(h,this.getObject(t,r)),h.globalCompositeOperation="source-in",h.fillStyle=s?i.getPattern(h,this,(0,n.getCurrentTransformInverse)(e),o):i,h.fillRect(0,0,a,l),h.restore(),e.save(),e.transform(...c),e.scale(1,-1),w(e,d.canvas,0,0,a,l,0,-1,1,1),e.restore()}this.compose()}paintImageXObject(t){if(!this.contentVisible)return;const e=this.getObject(t);e?this.paintInlineImageXObject(e):(0,s.warn)("Dependent image isn't ready yet")}paintImageXObjectRepeat(t,e,i,n){if(!this.contentVisible)return;const o=this.getObject(t);if(!o)return void(0,s.warn)("Dependent image isn't ready yet");const r=o.width,a=o.height,l=[];for(let t=0,s=n.length;t<s;t+=2)l.push({transform:[e,0,0,i,n[t],n[t+1]],x:0,y:0,w:r,h:a});this.paintInlineImageXObjectGroup(o,l)}applyTransferMapsToCanvas(t){return"none"!==this.current.transferMaps&&(t.filter=this.current.transferMaps,t.drawImage(t.canvas,0,0),t.filter="none"),t.canvas}applyTransferMapsToBitmap(t){if("none"===this.current.transferMaps)return t.bitmap;const{bitmap:e,width:i,height:s}=t,n=this.cachedCanvases.getCanvas("inlineImage",i,s),o=n.context;return o.filter=this.current.transferMaps,o.drawImage(e,0,0),o.filter="none",n.canvas}paintInlineImageXObject(t){if(!this.contentVisible)return;const e=t.width,i=t.height,o=this.ctx;if(this.save(),!s.isNodeJS){const{filter:t}=o;"none"!==t&&""!==t&&(o.filter="none")}let r;if(o.scale(1/e,-1/i),t.bitmap)r=this.applyTransferMapsToBitmap(t);else if("function"==typeof HTMLElement&&t instanceof HTMLElement||!t.data)r=t;else{const s=this.cachedCanvases.getCanvas("inlineImage",e,i).context;x(s,t),r=this.applyTransferMapsToCanvas(s)}const a=this._scaleImage(r,(0,n.getCurrentTransformInverse)(o));o.imageSmoothingEnabled=M((0,n.getCurrentTransform)(o),t.interpolate),w(o,a.img,0,0,a.paintWidth,a.paintHeight,0,-i,e,i),this.compose(),this.restore()}paintInlineImageXObjectGroup(t,e){if(!this.contentVisible)return;const i=this.ctx;let s;if(t.bitmap)s=t.bitmap;else{const e=t.width,i=t.height,n=this.cachedCanvases.getCanvas("inlineImage",e,i).context;x(n,t),s=this.applyTransferMapsToCanvas(n)}for(const t of e)i.save(),i.transform(...t.transform),i.scale(1,-1),w(i,s,t.x,t.y,t.w,t.h,0,-1,1,1),i.restore();this.compose()}paintSolidColorImageMask(){this.contentVisible&&(this.ctx.fillRect(0,0,1,1),this.compose())}markPoint(t){}markPointProps(t,e){}beginMarkedContent(t){this.markedContentStack.push({visible:!0})}beginMarkedContentProps(t,e){"OC"===t?this.markedContentStack.push({visible:this.optionalContentConfig.isVisible(e)}):this.markedContentStack.push({visible:!0}),this.contentVisible=this.isContentVisible()}endMarkedContent(){this.markedContentStack.pop(),this.contentVisible=this.isContentVisible()}beginCompat(){}endCompat(){}consumePath(t){const e=this.current.isEmptyClip();this.pendingClip&&this.current.updateClipFromPath(),this.pendingClip||this.compose(t);const i=this.ctx;this.pendingClip&&(e||(this.pendingClip===P?i.clip("evenodd"):i.clip()),this.pendingClip=null),this.current.startNewPathAndClipBox(this.current.clipBox),i.beginPath()}getSinglePixelWidth(){if(!this._cachedGetSinglePixelWidth){const t=(0,n.getCurrentTransform)(this.ctx);if(0===t[1]&&0===t[2])this._cachedGetSinglePixelWidth=1/Math.min(Math.abs(t[0]),Math.abs(t[3]));else{const e=Math.abs(t[0]*t[3]-t[2]*t[1]),i=Math.hypot(t[0],t[2]),s=Math.hypot(t[1],t[3]);this._cachedGetSinglePixelWidth=Math.max(i,s)/e}}return this._cachedGetSinglePixelWidth}getScaleForStroking(){if(-1===this._cachedScaleForStroking[0]){const{lineWidth:t}=this.current,{a:e,b:i,c:s,d:n}=this.ctx.getTransform();let o,r;if(0===i&&0===s){const i=Math.abs(e),s=Math.abs(n);if(i===s)if(0===t)o=r=1/i;else{const e=i*t;o=r=e<1?1/e:1}else if(0===t)o=1/i,r=1/s;else{const e=i*t,n=s*t;o=e<1?1/e:1,r=n<1?1/n:1}}else{const a=Math.abs(e*n-i*s),l=Math.hypot(e,i),c=Math.hypot(s,n);if(0===t)o=c/a,r=l/a;else{const e=t*a;o=c>e?c/e:1,r=l>e?l/e:1}}this._cachedScaleForStroking[0]=o,this._cachedScaleForStroking[1]=r}return this._cachedScaleForStroking}rescaleAndStroke(t){const{ctx:e}=this,{lineWidth:i}=this.current,[s,n]=this.getScaleForStroking();if(e.lineWidth=i||1,1===s&&1===n)return void e.stroke();const o=e.getLineDash();if(t&&e.save(),e.scale(s,n),o.length>0){const t=Math.max(s,n);e.setLineDash(o.map((e=>e/t))),e.lineDashOffset/=t}e.stroke(),t&&e.restore()}isContentVisible(){for(let t=this.markedContentStack.length-1;t>=0;t--)if(!this.markedContentStack[t].visible)return!1;return!0}}for(const t in s.OPS)void 0!==R.prototype[t]&&(R.prototype[s.OPS[t]]=R.prototype[t])},473:(t,e,i)=>{i.d(e,{DOMCMapReaderFactory:()=>d,DOMCanvasFactory:()=>l,DOMFilterFactory:()=>a,DOMSVGFactory:()=>u,DOMStandardFontDataFactory:()=>h,PDFDateString:()=>E,PageViewport:()=>p,PixelsPerInch:()=>r,RenderingCancelledException:()=>g,StatTimer:()=>y,fetchData:()=>c,getColorValues:()=>S,getCurrentTransform:()=>T,getCurrentTransformInverse:()=>_,getFilenameFromUrl:()=>b,getPdfFilenameFromUrl:()=>v,getRGB:()=>A,getXfaPageViewport:()=>C,isDataScheme:()=>m,isPdfFile:()=>f,isValidFetchUrl:()=>w,noContextMenu:()=>k,setLayerDimensions:()=>M});var s=i(822),n=i(266);const o="http://www.w3.org/2000/svg";class r{static CSS=96;static PDF=72;static PDF_TO_CSS_UNITS=this.CSS/this.PDF}class a extends s.BaseFilterFactory{#at;#lt;#U;#ct;#dt;#ht;#ut;#pt;#gt;#mt;#ft=0;constructor({docId:t,ownerDocument:e=globalThis.document}={}){super(),this.#U=t,this.#ct=e}get#bt(){return this.#at||=new Map}get#vt(){if(!this.#lt){const t=this.#ct.createElement("div"),{style:e}=t;e.visibility="hidden",e.contain="strict",e.width=e.height=0,e.position="absolute",e.top=e.left=0,e.zIndex=-1;const i=this.#ct.createElementNS(o,"svg");i.setAttribute("width",0),i.setAttribute("height",0),this.#lt=this.#ct.createElementNS(o,"defs"),t.append(i),i.append(this.#lt),this.#ct.body.append(t)}return this.#lt}addFilter(t){if(!t)return"none";let e,i,s,n,o=this.#bt.get(t);if(o)return o;if(1===t.length){const o=t[0],r=new Array(256);for(let t=0;t<256;t++)r[t]=o[t]/255;n=e=i=s=r.join(",")}else{const[o,r,a]=t,l=new Array(256),c=new Array(256),d=new Array(256);for(let t=0;t<256;t++)l[t]=o[t]/255,c[t]=r[t]/255,d[t]=a[t]/255;e=l.join(","),i=c.join(","),s=d.join(","),n=`${e}${i}${s}`}if(o=this.#bt.get(n),o)return this.#bt.set(t,o),o;const r=`g_${this.#U}_transfer_map_${this.#ft++}`,a=`url(#${r})`;this.#bt.set(t,a),this.#bt.set(n,a);const l=this.#yt(r);return this.#wt(e,i,s,l),a}addHCMFilter(t,e){const i=`${t}-${e}`;if(this.#ht===i)return this.#ut;if(this.#ht=i,this.#ut="none",this.#dt?.remove(),!t||!e)return this.#ut;const s=this.#kt(t);t=n.Util.makeHexColor(...s);const o=this.#kt(e);if(e=n.Util.makeHexColor(...o),this.#vt.style.color="","#000000"===t&&"#ffffff"===e||t===e)return this.#ut;const r=new Array(256);for(let t=0;t<=255;t++){const e=t/255;r[t]=e<=.03928?e/12.92:((e+.055)/1.055)**2.4}const a=r.join(","),l=`g_${this.#U}_hcm_filter`,c=this.#pt=this.#yt(l);this.#wt(a,a,a,c),this.#xt(c);const d=(t,e)=>{const i=s[t]/255,n=o[t]/255,r=new Array(e+1);for(let t=0;t<=e;t++)r[t]=i+t/e*(n-i);return r.join(",")};return this.#wt(d(0,5),d(1,5),d(2,5),c),this.#ut=`url(#${l})`,this.#ut}addHighlightHCMFilter(t,e,i,s){const n=`${t}-${e}-${i}-${s}`;if(this.#gt===n)return this.#mt;if(this.#gt=n,this.#mt="none",this.#pt?.remove(),!t||!e)return this.#mt;const[o,r]=[t,e].map(this.#kt.bind(this));let a=Math.round(.2126*o[0]+.7152*o[1]+.0722*o[2]),l=Math.round(.2126*r[0]+.7152*r[1]+.0722*r[2]),[c,d]=[i,s].map(this.#kt.bind(this));l<a&&([a,l,c,d]=[l,a,d,c]),this.#vt.style.color="";const h=(t,e,i)=>{const s=new Array(256),n=(l-a)/i,o=t/255,r=(e-t)/(255*i);let c=0;for(let t=0;t<=i;t++){const e=Math.round(a+t*n),i=o+t*r;for(let t=c;t<=e;t++)s[t]=i;c=e+1}for(let t=c;t<256;t++)s[t]=s[c-1];return s.join(",")},u=`g_${this.#U}_hcm_highlight_filter`,p=this.#pt=this.#yt(u);return this.#xt(p),this.#wt(h(c[0],d[0],5),h(c[1],d[1],5),h(c[2],d[2],5),p),this.#mt=`url(#${u})`,this.#mt}destroy(t=!1){t&&(this.#ut||this.#mt)||(this.#lt&&(this.#lt.parentNode.parentNode.remove(),this.#lt=null),this.#at&&(this.#at.clear(),this.#at=null),this.#ft=0)}#xt(t){const e=this.#ct.createElementNS(o,"feColorMatrix");e.setAttribute("type","matrix"),e.setAttribute("values","0.2126 0.7152 0.0722 0 0 0.2126 0.7152 0.0722 0 0 0.2126 0.7152 0.0722 0 0 0 0 0 1 0"),t.append(e)}#yt(t){const e=this.#ct.createElementNS(o,"filter");return e.setAttribute("color-interpolation-filters","sRGB"),e.setAttribute("id",t),this.#vt.append(e),e}#Et(t,e,i){const s=this.#ct.createElementNS(o,e);s.setAttribute("type","discrete"),s.setAttribute("tableValues",i),t.append(s)}#wt(t,e,i,s){const n=this.#ct.createElementNS(o,"feComponentTransfer");s.append(n),this.#Et(n,"feFuncR",t),this.#Et(n,"feFuncG",e),this.#Et(n,"feFuncB",i)}#kt(t){return this.#vt.style.color=t,A(getComputedStyle(this.#vt).getPropertyValue("color"))}}class l extends s.BaseCanvasFactory{constructor({ownerDocument:t=globalThis.document}={}){super(),this._document=t}_createCanvas(t,e){const i=this._document.createElement("canvas");return i.width=t,i.height=e,i}}async function c(t,e="text"){if(w(t,document.baseURI)){const i=await fetch(t);if(!i.ok)throw new Error(i.statusText);switch(e){case"arraybuffer":return i.arrayBuffer();case"blob":return i.blob();case"json":return i.json()}return i.text()}return new Promise(((i,s)=>{const n=new XMLHttpRequest;n.open("GET",t,!0),n.responseType=e,n.onreadystatechange=()=>{if(n.readyState===XMLHttpRequest.DONE){if(200===n.status||0===n.status){let t;switch(e){case"arraybuffer":case"blob":case"json":t=n.response;break;default:t=n.responseText}if(t)return void i(t)}s(new Error(n.statusText))}},n.send(null)}))}class d extends s.BaseCMapReaderFactory{_fetchData(t,e){return c(t,this.isCompressed?"arraybuffer":"text").then((t=>({cMapData:t instanceof ArrayBuffer?new Uint8Array(t):(0,n.stringToBytes)(t),compressionType:e})))}}class h extends s.BaseStandardFontDataFactory{_fetchData(t){return c(t,"arraybuffer").then((t=>new Uint8Array(t)))}}class u extends s.BaseSVGFactory{_createSVG(t){return document.createElementNS(o,t)}}class p{constructor({viewBox:t,scale:e,rotation:i,offsetX:s=0,offsetY:n=0,dontFlip:o=!1}){this.viewBox=t,this.scale=e,this.rotation=i,this.offsetX=s,this.offsetY=n;const r=(t[2]+t[0])/2,a=(t[3]+t[1])/2;let l,c,d,h,u,p,g,m;switch((i%=360)<0&&(i+=360),i){case 180:l=-1,c=0,d=0,h=1;break;case 90:l=0,c=1,d=1,h=0;break;case 270:l=0,c=-1,d=-1,h=0;break;case 0:l=1,c=0,d=0,h=-1;break;default:throw new Error("PageViewport: Invalid rotation, must be a multiple of 90 degrees.")}o&&(d=-d,h=-h),0===l?(u=Math.abs(a-t[1])*e+s,p=Math.abs(r-t[0])*e+n,g=(t[3]-t[1])*e,m=(t[2]-t[0])*e):(u=Math.abs(r-t[0])*e+s,p=Math.abs(a-t[1])*e+n,g=(t[2]-t[0])*e,m=(t[3]-t[1])*e),this.transform=[l*e,c*e,d*e,h*e,u-l*e*r-d*e*a,p-c*e*r-h*e*a],this.width=g,this.height=m}get rawDims(){const{viewBox:t}=this;return(0,n.shadow)(this,"rawDims",{pageWidth:t[2]-t[0],pageHeight:t[3]-t[1],pageX:t[0],pageY:t[1]})}clone({scale:t=this.scale,rotation:e=this.rotation,offsetX:i=this.offsetX,offsetY:s=this.offsetY,dontFlip:n=!1}={}){return new p({viewBox:this.viewBox.slice(),scale:t,rotation:e,offsetX:i,offsetY:s,dontFlip:n})}convertToViewportPoint(t,e){return n.Util.applyTransform([t,e],this.transform)}convertToViewportRectangle(t){const e=n.Util.applyTransform([t[0],t[1]],this.transform),i=n.Util.applyTransform([t[2],t[3]],this.transform);return[e[0],e[1],i[0],i[1]]}convertToPdfPoint(t,e){return n.Util.applyInverseTransform([t,e],this.transform)}}class g extends n.BaseException{constructor(t,e=0){super(t,"RenderingCancelledException"),this.extraDelay=e}}function m(t){const e=t.length;let i=0;for(;i<e&&""===t[i].trim();)i++;return"data:"===t.substring(i,i+5).toLowerCase()}function f(t){return"string"==typeof t&&/\.pdf$/i.test(t)}function b(t,e=!1){return e||([t]=t.split(/[#?]/,1)),t.substring(t.lastIndexOf("/")+1)}function v(t,e="document.pdf"){if("string"!=typeof t)return e;if(m(t))return(0,n.warn)('getPdfFilenameFromUrl: ignore "data:"-URL for performance reasons.'),e;const i=/[^/?#=]+\.pdf\b(?!.*\.pdf\b)/i,s=/^(?:(?:[^:]+:)?\/\/[^/]+)?([^?#]*)(\?[^#]*)?(#.*)?$/.exec(t);let o=i.exec(s[1])||i.exec(s[2])||i.exec(s[3]);if(o&&(o=o[0],o.includes("%")))try{o=i.exec(decodeURIComponent(o))[0]}catch{}return o||e}class y{started=Object.create(null);times=[];time(t){t in this.started&&(0,n.warn)(`Timer is already running for ${t}`),this.started[t]=Date.now()}timeEnd(t){t in this.started||(0,n.warn)(`Timer has not been started for ${t}`),this.times.push({name:t,start:this.started[t],end:Date.now()}),delete this.started[t]}toString(){const t=[];let e=0;for(const{name:t}of this.times)e=Math.max(t.length,e);for(const{name:i,start:s,end:n}of this.times)t.push(`${i.padEnd(e)} ${n-s}ms\n`);return t.join("")}}function w(t,e){try{const{protocol:i}=e?new URL(t,e):new URL(t);return"http:"===i||"https:"===i}catch{return!1}}function k(t){t.preventDefault()}let x;class E{static toDateObject(t){if(!t||"string"!=typeof t)return null;x||=new RegExp("^D:(\\d{4})(\\d{2})?(\\d{2})?(\\d{2})?(\\d{2})?(\\d{2})?([Z|+|-])?(\\d{2})?'?(\\d{2})?'?");const e=x.exec(t);if(!e)return null;const i=parseInt(e[1],10);let s=parseInt(e[2],10);s=s>=1&&s<=12?s-1:0;let n=parseInt(e[3],10);n=n>=1&&n<=31?n:1;let o=parseInt(e[4],10);o=o>=0&&o<=23?o:0;let r=parseInt(e[5],10);r=r>=0&&r<=59?r:0;let a=parseInt(e[6],10);a=a>=0&&a<=59?a:0;const l=e[7]||"Z";let c=parseInt(e[8],10);c=c>=0&&c<=23?c:0;let d=parseInt(e[9],10)||0;return d=d>=0&&d<=59?d:0,"-"===l?(o+=c,r+=d):"+"===l&&(o-=c,r-=d),new Date(Date.UTC(i,s,n,o,r,a))}}function C(t,{scale:e=1,rotation:i=0}){const{width:s,height:n}=t.attributes.style,o=[0,0,parseInt(s),parseInt(n)];return new p({viewBox:o,scale:e,rotation:i})}function A(t){if(t.startsWith("#")){const e=parseInt(t.slice(1),16);return[(16711680&e)>>16,(65280&e)>>8,255&e]}return t.startsWith("rgb(")?t.slice(4,-1).split(",").map((t=>parseInt(t))):t.startsWith("rgba(")?t.slice(5,-1).split(",").map((t=>parseInt(t))).slice(0,3):((0,n.warn)(`Not a valid color format: "${t}"`),[0,0,0])}function S(t){const e=document.createElement("span");e.style.visibility="hidden",document.body.append(e);for(const i of t.keys()){e.style.color=i;const s=window.getComputedStyle(e).color;t.set(i,A(s))}e.remove()}function T(t){const{a:e,b:i,c:s,d:n,e:o,f:r}=t.getTransform();return[e,i,s,n,o,r]}function _(t){const{a:e,b:i,c:s,d:n,e:o,f:r}=t.getTransform().invertSelf();return[e,i,s,n,o,r]}function M(t,e,i=!1,s=!0){if(e instanceof p){const{pageWidth:s,pageHeight:o}=e.rawDims,{style:r}=t,a=n.FeatureTest.isCSSRoundSupported,l=`var(--scale-factor) * ${s}px`,c=`var(--scale-factor) * ${o}px`,d=a?`round(${l}, 1px)`:`calc(${l})`,h=a?`round(${c}, 1px)`:`calc(${c})`;i&&e.rotation%180!=0?(r.width=h,r.height=d):(r.width=d,r.height=h)}s&&t.setAttribute("data-main-rotation",e.rotation)}},423:(t,e,i)=>{i.d(e,{DrawLayer:()=>o});var s=i(473),n=i(266);class o{#b=null;#ft=0;#Ct=new Map;constructor({pageIndex:t}){this.pageIndex=t}setParent(t){if(this.#b){if(this.#b!==t){if(this.#Ct.size>0)for(const e of this.#Ct.values())e.remove(),t.append(e);this.#b=t}}else this.#b=t}static get _svgFactory(){return(0,n.shadow)(this,"_svgFactory",new s.DOMSVGFactory)}static#At(t,{x:e,y:i,width:s,height:n}){const{style:o}=t;o.top=100*i+"%",o.left=100*e+"%",o.width=100*s+"%",o.height=100*n+"%"}#St(t){const e=o._svgFactory.create(1,1,!0);return this.#b.append(e),o.#At(e,t),e}highlight({outlines:t,box:e},i,s){const n=this.#ft++,r=this.#St(e);r.classList.add("highlight");const a=o._svgFactory.createElement("defs");r.append(a);const l=o._svgFactory.createElement("path");a.append(l);const c=`path_p${this.pageIndex}_${n}`;l.setAttribute("id",c),l.setAttribute("d",o.#Tt(t));const d=o._svgFactory.createElement("clipPath");a.append(d);const h=`clip_${c}`;d.setAttribute("id",h),d.setAttribute("clipPathUnits","objectBoundingBox");const u=o._svgFactory.createElement("use");d.append(u),u.setAttribute("href",`#${c}`),u.classList.add("clip");const p=o._svgFactory.createElement("use");return r.append(p),r.setAttribute("fill",i),r.setAttribute("fill-opacity",s),p.setAttribute("href",`#${c}`),this.#Ct.set(n,r),{id:n,clipPathId:`url(#${h})`}}highlightOutline({outlines:t,box:e}){const i=this.#ft++,s=this.#St(e);s.classList.add("highlightOutline");const n=o._svgFactory.createElement("defs");s.append(n);const r=o._svgFactory.createElement("path");n.append(r);const a=`path_p${this.pageIndex}_${i}`;r.setAttribute("id",a),r.setAttribute("d",o.#Tt(t)),r.setAttribute("vector-effect","non-scaling-stroke");const l=o._svgFactory.createElement("use");s.append(l),l.setAttribute("href",`#${a}`);const c=l.cloneNode();return s.append(c),l.classList.add("mainOutline"),c.classList.add("secondaryOutline"),this.#Ct.set(i,s),i}static#Tt(t){const e=[];for(const i of t){let[t,s]=i;e.push(`M${t} ${s}`);for(let n=2;n<i.length;n+=2){const o=i[n],r=i[n+1];o===t?(e.push(`V${r}`),s=r):r===s&&(e.push(`H${o}`),t=o)}e.push("Z")}return e.join(" ")}updateBox(t,e){o.#At(this.#Ct.get(t),e)}rotate(t,e){this.#Ct.get(t).setAttribute("data-main-rotation",e)}changeColor(t,e){this.#Ct.get(t).setAttribute("fill",e)}changeOpacity(t,e){this.#Ct.get(t).setAttribute("fill-opacity",e)}addClass(t,e){this.#Ct.get(t).classList.add(e)}removeClass(t,e){this.#Ct.get(t).classList.remove(e)}remove(t){null!==this.#b&&(this.#Ct.get(t).remove(),this.#Ct.delete(t))}destroy(){this.#b=null;for(const t of this.#Ct.values())t.remove();this.#Ct.clear()}}},629:(t,e,i)=>{i.d(e,{AnnotationEditorLayer:()=>g});var s=i(266),n=i(115),o=i(812),r=i(640);class a extends n.AnnotationEditor{#_t=this.editorDivBlur.bind(this);#Mt=this.editorDivFocus.bind(this);#It=this.editorDivInput.bind(this);#Bt=this.editorDivKeydown.bind(this);#u;#Lt="";#Pt=`${this.id}-editor`;#Rt;#Dt=null;static _freeTextDefaultContent="";static _internalPadding=0;static _defaultColor=null;static _defaultFontSize=10;static get _keyboardManager(){const t=a.prototype,e=t=>t.isEmpty(),i=o.AnnotationEditorUIManager.TRANSLATE_SMALL,n=o.AnnotationEditorUIManager.TRANSLATE_BIG;return(0,s.shadow)(this,"_keyboardManager",new o.KeyboardManager([[["ctrl+s","mac+meta+s","ctrl+p","mac+meta+p"],t.commitOrRemove,{bubbles:!0}],[["ctrl+Enter","mac+meta+Enter","Escape","mac+Escape"],t.commitOrRemove],[["ArrowLeft","mac+ArrowLeft"],t._translateEmpty,{args:[-i,0],checker:e}],[["ctrl+ArrowLeft","mac+shift+ArrowLeft"],t._translateEmpty,{args:[-n,0],checker:e}],[["ArrowRight","mac+ArrowRight"],t._translateEmpty,{args:[i,0],checker:e}],[["ctrl+ArrowRight","mac+shift+ArrowRight"],t._translateEmpty,{args:[n,0],checker:e}],[["ArrowUp","mac+ArrowUp"],t._translateEmpty,{args:[0,-i],checker:e}],[["ctrl+ArrowUp","mac+shift+ArrowUp"],t._translateEmpty,{args:[0,-n],checker:e}],[["ArrowDown","mac+ArrowDown"],t._translateEmpty,{args:[0,i],checker:e}],[["ctrl+ArrowDown","mac+shift+ArrowDown"],t._translateEmpty,{args:[0,n],checker:e}]]))}static _type="freetext";static _editorType=s.AnnotationEditorType.FREETEXT;constructor(t){super({...t,name:"freeTextEditor"}),this.#u=t.color||a._defaultColor||n.AnnotationEditor._defaultLineColor,this.#Rt=t.fontSize||a._defaultFontSize}static initialize(t){n.AnnotationEditor.initialize(t,{strings:["pdfjs-free-text-default-content"]});const e=getComputedStyle(document.documentElement);this._internalPadding=parseFloat(e.getPropertyValue("--freetext-padding"))}static updateDefaultParams(t,e){switch(t){case s.AnnotationEditorParamsType.FREETEXT_SIZE:a._defaultFontSize=e;break;case s.AnnotationEditorParamsType.FREETEXT_COLOR:a._defaultColor=e}}updateParams(t,e){switch(t){case s.AnnotationEditorParamsType.FREETEXT_SIZE:this.#Ot(e);break;case s.AnnotationEditorParamsType.FREETEXT_COLOR:this.#Ft(e)}}static get defaultPropertiesToUpdate(){return[[s.AnnotationEditorParamsType.FREETEXT_SIZE,a._defaultFontSize],[s.AnnotationEditorParamsType.FREETEXT_COLOR,a._defaultColor||n.AnnotationEditor._defaultLineColor]]}get propertiesToUpdate(){return[[s.AnnotationEditorParamsType.FREETEXT_SIZE,this.#Rt],[s.AnnotationEditorParamsType.FREETEXT_COLOR,this.#u]]}#Ot(t){const e=t=>{this.editorDiv.style.fontSize=`calc(${t}px * var(--scale-factor))`,this.translate(0,-(t-this.#Rt)*this.parentScale),this.#Rt=t,this.#Nt()},i=this.#Rt;this.addCommands({cmd:()=>{e(t)},undo:()=>{e(i)},mustExec:!0,type:s.AnnotationEditorParamsType.FREETEXT_SIZE,overwriteIfSameType:!0,keepUndo:!0})}#Ft(t){const e=this.#u;this.addCommands({cmd:()=>{this.#u=this.editorDiv.style.color=t},undo:()=>{this.#u=this.editorDiv.style.color=e},mustExec:!0,type:s.AnnotationEditorParamsType.FREETEXT_COLOR,overwriteIfSameType:!0,keepUndo:!0})}_translateEmpty(t,e){this._uiManager.translateSelectedEditors(t,e,!0)}getInitialTranslation(){const t=this.parentScale;return[-a._internalPadding*t,-(a._internalPadding+this.#Rt)*t]}rebuild(){this.parent&&(super.rebuild(),null!==this.div&&(this.isAttachedToDOM||this.parent.add(this)))}enableEditMode(){this.isInEditMode()||(this.parent.setEditingState(!1),this.parent.updateToolbar(s.AnnotationEditorType.FREETEXT),super.enableEditMode(),this.overlayDiv.classList.remove("enabled"),this.editorDiv.contentEditable=!0,this._isDraggable=!1,this.div.removeAttribute("aria-activedescendant"),this.editorDiv.addEventListener("keydown",this.#Bt),this.editorDiv.addEventListener("focus",this.#Mt),this.editorDiv.addEventListener("blur",this.#_t),this.editorDiv.addEventListener("input",this.#It))}disableEditMode(){this.isInEditMode()&&(this.parent.setEditingState(!0),super.disableEditMode(),this.overlayDiv.classList.add("enabled"),this.editorDiv.contentEditable=!1,this.div.setAttribute("aria-activedescendant",this.#Pt),this._isDraggable=!0,this.editorDiv.removeEventListener("keydown",this.#Bt),this.editorDiv.removeEventListener("focus",this.#Mt),this.editorDiv.removeEventListener("blur",this.#_t),this.editorDiv.removeEventListener("input",this.#It),this.div.focus({preventScroll:!0}),this.isEditing=!1,this.parent.div.classList.add("freetextEditing"))}focusin(t){this._focusEventsAllowed&&(super.focusin(t),t.target!==this.editorDiv&&this.editorDiv.focus())}onceAdded(){this.width?this.#Ht():(this.enableEditMode(),this.editorDiv.focus(),this._initialOptions?.isCentered&&this.center(),this._initialOptions=null)}isEmpty(){return!this.editorDiv||""===this.editorDiv.innerText.trim()}remove(){this.isEditing=!1,this.parent&&(this.parent.setEditingState(!0),this.parent.div.classList.add("freetextEditing")),super.remove()}#zt(){const t=this.editorDiv.getElementsByTagName("div");if(0===t.length)return this.editorDiv.innerText;const e=[];for(const i of t)e.push(i.innerText.replace(/\r\n?|\n/,""));return e.join("\n")}#Nt(){const[t,e]=this.parentDimensions;let i;if(this.isAttachedToDOM)i=this.div.getBoundingClientRect();else{const{currentLayer:t,div:e}=this,s=e.style.display;e.style.display="hidden",t.div.append(this.div),i=e.getBoundingClientRect(),e.remove(),e.style.display=s}this.rotation%180==this.parentRotation%180?(this.width=i.width/t,this.height=i.height/e):(this.width=i.height/t,this.height=i.width/e),this.fixAndSetPosition()}commit(){if(!this.isInEditMode())return;super.commit(),this.disableEditMode();const t=this.#Lt,e=this.#Lt=this.#zt().trimEnd();if(t===e)return;const i=t=>{this.#Lt=t,t?(this.#Ut(),this._uiManager.rebuild(this),this.#Nt()):this.remove()};this.addCommands({cmd:()=>{i(e)},undo:()=>{i(t)},mustExec:!1}),this.#Nt()}shouldGetKeyboardEvents(){return this.isInEditMode()}enterInEditMode(){this.enableEditMode(),this.editorDiv.focus()}dblclick(t){this.enterInEditMode()}keydown(t){t.target===this.div&&"Enter"===t.key&&(this.enterInEditMode(),t.preventDefault())}editorDivKeydown(t){a._keyboardManager.exec(this,t)}editorDivFocus(t){this.isEditing=!0}editorDivBlur(t){this.isEditing=!1}editorDivInput(t){this.parent.div.classList.toggle("freetextEditing",this.isEmpty())}disableEditing(){this.editorDiv.setAttribute("role","comment"),this.editorDiv.removeAttribute("aria-multiline")}enableEditing(){this.editorDiv.setAttribute("role","textbox"),this.editorDiv.setAttribute("aria-multiline",!0)}render(){if(this.div)return this.div;let t,e;this.width&&(t=this.x,e=this.y),super.render(),this.editorDiv=document.createElement("div"),this.editorDiv.className="internal",this.editorDiv.setAttribute("id",this.#Pt),this.editorDiv.setAttribute("data-l10n-id","pdfjs-free-text"),this.enableEditing(),n.AnnotationEditor._l10nPromise.get("pdfjs-free-text-default-content").then((t=>this.editorDiv?.setAttribute("default-content",t))),this.editorDiv.contentEditable=!0;const{style:i}=this.editorDiv;if(i.fontSize=`calc(${this.#Rt}px * var(--scale-factor))`,i.color=this.#u,this.div.append(this.editorDiv),this.overlayDiv=document.createElement("div"),this.overlayDiv.classList.add("overlay","enabled"),this.div.append(this.overlayDiv),(0,o.bindEvents)(this,this.div,["dblclick","keydown"]),this.width){const[i,s]=this.parentDimensions;if(this.annotationElementId){const{position:n}=this.#Dt;let[o,r]=this.getInitialTranslation();[o,r]=this.pageTranslationToScreen(o,r);const[a,l]=this.pageDimensions,[c,d]=this.pageTranslation;let h,u;switch(this.rotation){case 0:h=t+(n[0]-c)/a,u=e+this.height-(n[1]-d)/l;break;case 90:h=t+(n[0]-c)/a,u=e-(n[1]-d)/l,[o,r]=[r,-o];break;case 180:h=t-this.width+(n[0]-c)/a,u=e-(n[1]-d)/l,[o,r]=[-o,-r];break;case 270:h=t+(n[0]-c-this.height*l)/a,u=e+(n[1]-d-this.width*a)/l,[o,r]=[-r,o]}this.setAt(h*i,u*s,o,r)}else this.setAt(t*i,e*s,this.width*i,this.height*s);this.#Ut(),this._isDraggable=!0,this.editorDiv.contentEditable=!1}else this._isDraggable=!1,this.editorDiv.contentEditable=!0;return this.div}#Ut(){if(this.editorDiv.replaceChildren(),this.#Lt)for(const t of this.#Lt.split("\n")){const e=document.createElement("div");e.append(t?document.createTextNode(t):document.createElement("br")),this.editorDiv.append(e)}}get contentDiv(){return this.editorDiv}static deserialize(t,e,i){let n=null;if(t instanceof r.FreeTextAnnotationElement){const{data:{defaultAppearanceData:{fontSize:e,fontColor:i},rect:o,rotation:r,id:a},textContent:l,textPosition:c,parent:{page:{pageNumber:d}}}=t;if(!l||0===l.length)return null;n=t={annotationType:s.AnnotationEditorType.FREETEXT,color:Array.from(i),fontSize:e,value:l.join("\n"),position:c,pageIndex:d-1,rect:o,rotation:r,id:a,deleted:!1}}const o=super.deserialize(t,e,i);return o.#Rt=t.fontSize,o.#u=s.Util.makeHexColor(...t.color),o.#Lt=t.value,o.annotationElementId=t.id||null,o.#Dt=n,o}serialize(t=!1){if(this.isEmpty())return null;if(this.deleted)return{pageIndex:this.pageIndex,id:this.annotationElementId,deleted:!0};const e=a._internalPadding*this.parentScale,i=this.getRect(e,e),o=n.AnnotationEditor._colorManager.convert(this.isAttachedToDOM?getComputedStyle(this.editorDiv).color:this.#u),r={annotationType:s.AnnotationEditorType.FREETEXT,color:o,fontSize:this.#Rt,value:this.#Lt,pageIndex:this.pageIndex,rect:i,rotation:this.rotation,structTreeParentId:this._structTreeParentId};return t?r:this.annotationElementId&&!this.#jt(r)?null:(r.id=this.annotationElementId,r)}#jt(t){const{value:e,fontSize:i,color:s,rect:n,pageIndex:o}=this.#Dt;return t.value!==e||t.fontSize!==i||t.rect.some(((t,e)=>Math.abs(t-n[e])>=1))||t.color.some(((t,e)=>t!==s[e]))||t.pageIndex!==o}#Ht(t=!1){if(!this.annotationElementId)return;if(this.#Nt(),!t&&(0===this.width||0===this.height))return void setTimeout((()=>this.#Ht(!0)),0);const e=a._internalPadding*this.parentScale;this.#Dt.rect=this.getRect(e,e)}}var l=i(97),c=i(405);class d extends n.AnnotationEditor{#$t;#Wt=null;#Vt=null;#qt=null;#Gt=null;#Kt=null;#ft=null;#Xt=null;#Yt;#Jt=null;static _defaultColor=null;static _defaultOpacity=1;static _l10nPromise;static _type="highlight";static _editorType=s.AnnotationEditorType.HIGHLIGHT;constructor(t){super({...t,name:"highlightEditor"}),d._defaultColor||=this._uiManager.highlightColors?.values().next().value||"#fff066",this.color=t.color||d._defaultColor,this.#Yt=t.opacity||d._defaultOpacity,this.#$t=t.boxes||null,this._isDraggable=!1,this.#Qt(),this.#Zt(),this.rotate(this.rotation)}#Qt(){const t=new c.Outliner(this.#$t,.001);this.#Kt=t.getOutlines(),({x:this.x,y:this.y,width:this.width,height:this.height}=this.#Kt.box);const e=new c.Outliner(this.#$t,.0025,.001,"ltr"===this._uiManager.direction);this.#qt=e.getOutlines();const{lastPoint:i}=this.#qt.box;this.#Xt=[(i[0]-this.x)/this.width,(i[1]-this.y)/this.height]}static initialize(t){n.AnnotationEditor.initialize(t)}static updateDefaultParams(t,e){t===s.AnnotationEditorParamsType.HIGHLIGHT_DEFAULT_COLOR&&(d._defaultColor=e)}get toolbarPosition(){return this.#Xt}updateParams(t,e){t===s.AnnotationEditorParamsType.HIGHLIGHT_COLOR&&this.#Ft(e)}static get defaultPropertiesToUpdate(){return[[s.AnnotationEditorParamsType.HIGHLIGHT_DEFAULT_COLOR,d._defaultColor]]}get propertiesToUpdate(){return[[s.AnnotationEditorParamsType.HIGHLIGHT_COLOR,this.color||d._defaultColor]]}#Ft(t){const e=this.color;this.addCommands({cmd:()=>{this.color=t,this.parent.drawLayer.changeColor(this.#ft,t),this.#Vt?.updateColor(t)},undo:()=>{this.color=e,this.parent.drawLayer.changeColor(this.#ft,e),this.#Vt?.updateColor(e)},mustExec:!0,type:s.AnnotationEditorParamsType.HIGHLIGHT_COLOR,overwriteIfSameType:!0,keepUndo:!0})}async addEditToolbar(){const t=await super.addEditToolbar();return t?(this._uiManager.highlightColors&&(this.#Vt=new l.ColorPicker({editor:this}),t.addColorPicker(this.#Vt)),t):null}disableEditing(){super.disableEditing(),this.div.classList.toggle("disabled",!0)}enableEditing(){super.enableEditing(),this.div.classList.toggle("disabled",!1)}fixAndSetPosition(){return super.fixAndSetPosition(0)}getRect(t,e){return super.getRect(t,e,0)}onceAdded(){this.parent.addUndoableEditor(this),this.div.focus()}remove(){super.remove(),this.#te()}rebuild(){this.parent&&(super.rebuild(),null!==this.div&&(this.#Zt(),this.isAttachedToDOM||this.parent.add(this)))}setParent(t){let e=!1;this.parent&&!t?this.#te():t&&(this.#Zt(t),e=!this.parent&&this.div?.classList.contains("selectedEditor")),super.setParent(t),e&&this.select()}#te(){null!==this.#ft&&this.parent&&(this.parent.drawLayer.remove(this.#ft),this.#ft=null,this.parent.drawLayer.remove(this.#Jt),this.#Jt=null)}#Zt(t=this.parent){null===this.#ft&&(({id:this.#ft,clipPathId:this.#Wt}=t.drawLayer.highlight(this.#Kt,this.color,this.#Yt)),this.#Gt&&(this.#Gt.style.clipPath=this.#Wt),this.#Jt=t.drawLayer.highlightOutline(this.#qt))}static#ee({x:t,y:e,width:i,height:s},n){switch(n){case 90:return{x:1-e-s,y:t,width:s,height:i};case 180:return{x:1-t-i,y:1-e-s,width:i,height:s};case 270:return{x:e,y:1-t-i,width:s,height:i}}return{x:t,y:e,width:i,height:s}}rotate(t){const{drawLayer:e}=this.parent;e.rotate(this.#ft,t),e.rotate(this.#Jt,t),e.updateBox(this.#ft,d.#ee(this,t)),e.updateBox(this.#Jt,d.#ee(this.#qt.box,t))}render(){if(this.div)return this.div;const t=super.render(),e=this.#Gt=document.createElement("div");t.append(e),e.className="internal",e.style.clipPath=this.#Wt;const[i,s]=this.parentDimensions;return this.setDims(this.width*i,this.height*s),(0,o.bindEvents)(this,this.#Gt,["pointerover","pointerleave"]),this.enableEditing(),t}pointerover(){this.parent.drawLayer.addClass(this.#Jt,"hovered")}pointerleave(){this.parent.drawLayer.removeClass(this.#Jt,"hovered")}select(){super.select(),this.parent?.drawLayer.removeClass(this.#Jt,"hovered"),this.parent?.drawLayer.addClass(this.#Jt,"selected")}unselect(){super.unselect(),this.parent?.drawLayer.removeClass(this.#Jt,"selected")}#ie(){const[t,e]=this.pageDimensions,i=this.#$t,s=new Array(8*i.length);let n=0;for(const{x:o,y:r,width:a,height:l}of i){const i=o*t,c=(1-r-l)*e;s[n]=s[n+4]=i,s[n+1]=s[n+3]=c,s[n+2]=s[n+6]=i+a*t,s[n+5]=s[n+7]=c+l*e,n+=8}return s}#se(){const[t,e]=this.pageDimensions,i=this.width*t,s=this.height*e,n=this.x*t,o=(1-this.y-this.height)*e,r=[];for(const t of this.#Kt.outlines){const e=new Array(t.length);for(let r=0;r<t.length;r+=2)e[r]=n+t[r]*i,e[r+1]=o+(1-t[r+1])*s;r.push(e)}return r}static deserialize(t,e,i){const n=super.deserialize(t,e,i),{rect:o,color:r,quadPoints:a}=t;n.color=s.Util.makeHexColor(...r),n.#Yt=t.opacity;const[l,c]=n.pageDimensions;n.width=(o[2]-o[0])/l,n.height=(o[3]-o[1])/c;const d=n.#$t=[];for(let t=0;t<a.length;t+=8)d.push({x:a[4]/l,y:1-a[t+5]/c,width:(a[t+2]-a[t])/l,height:(a[t+5]-a[t+1])/c});return n.#Qt(),n}serialize(t=!1){if(this.isEmpty()||t)return null;const e=this.getRect(0,0),i=n.AnnotationEditor._colorManager.convert(this.color);return{annotationType:s.AnnotationEditorType.HIGHLIGHT,color:i,opacity:this.#Yt,quadPoints:this.#ie(),outlines:this.#se(),pageIndex:this.pageIndex,rect:e,rotation:0,structTreeParentId:this._structTreeParentId}}static canCreateNewEmptyEditor(){return!1}}var h=i(473);class u extends n.AnnotationEditor{#ne=0;#oe=0;#re=this.canvasPointermove.bind(this);#ae=this.canvasPointerleave.bind(this);#le=this.canvasPointerup.bind(this);#ce=this.canvasPointerdown.bind(this);#de=null;#he=new Path2D;#ue=!1;#pe=!1;#ge=!1;#me=null;#fe=0;#be=0;#ve=null;static _defaultColor=null;static _defaultOpacity=1;static _defaultThickness=1;static _type="ink";static _editorType=s.AnnotationEditorType.INK;constructor(t){super({...t,name:"inkEditor"}),this.color=t.color||null,this.thickness=t.thickness||null,this.opacity=t.opacity||null,this.paths=[],this.bezierPath2D=[],this.allRawPaths=[],this.currentPath=[],this.scaleFactor=1,this.translationX=this.translationY=0,this.x=0,this.y=0,this._willKeepAspectRatio=!0}static initialize(t){n.AnnotationEditor.initialize(t)}static updateDefaultParams(t,e){switch(t){case s.AnnotationEditorParamsType.INK_THICKNESS:u._defaultThickness=e;break;case s.AnnotationEditorParamsType.INK_COLOR:u._defaultColor=e;break;case s.AnnotationEditorParamsType.INK_OPACITY:u._defaultOpacity=e/100}}updateParams(t,e){switch(t){case s.AnnotationEditorParamsType.INK_THICKNESS:this.#ye(e);break;case s.AnnotationEditorParamsType.INK_COLOR:this.#Ft(e);break;case s.AnnotationEditorParamsType.INK_OPACITY:this.#we(e)}}static get defaultPropertiesToUpdate(){return[[s.AnnotationEditorParamsType.INK_THICKNESS,u._defaultThickness],[s.AnnotationEditorParamsType.INK_COLOR,u._defaultColor||n.AnnotationEditor._defaultLineColor],[s.AnnotationEditorParamsType.INK_OPACITY,Math.round(100*u._defaultOpacity)]]}get propertiesToUpdate(){return[[s.AnnotationEditorParamsType.INK_THICKNESS,this.thickness||u._defaultThickness],[s.AnnotationEditorParamsType.INK_COLOR,this.color||u._defaultColor||n.AnnotationEditor._defaultLineColor],[s.AnnotationEditorParamsType.INK_OPACITY,Math.round(100*(this.opacity??u._defaultOpacity))]]}#ye(t){const e=this.thickness;this.addCommands({cmd:()=>{this.thickness=t,this.#ke()},undo:()=>{this.thickness=e,this.#ke()},mustExec:!0,type:s.AnnotationEditorParamsType.INK_THICKNESS,overwriteIfSameType:!0,keepUndo:!0})}#Ft(t){const e=this.color;this.addCommands({cmd:()=>{this.color=t,this.#xe()},undo:()=>{this.color=e,this.#xe()},mustExec:!0,type:s.AnnotationEditorParamsType.INK_COLOR,overwriteIfSameType:!0,keepUndo:!0})}#we(t){t/=100;const e=this.opacity;this.addCommands({cmd:()=>{this.opacity=t,this.#xe()},undo:()=>{this.opacity=e,this.#xe()},mustExec:!0,type:s.AnnotationEditorParamsType.INK_OPACITY,overwriteIfSameType:!0,keepUndo:!0})}rebuild(){this.parent&&(super.rebuild(),null!==this.div&&(this.canvas||(this.#Ee(),this.#Ce()),this.isAttachedToDOM||(this.parent.add(this),this.#Ae()),this.#ke()))}remove(){null!==this.canvas&&(this.isEmpty()||this.commit(),this.canvas.width=this.canvas.height=0,this.canvas.remove(),this.canvas=null,this.#de&&(clearTimeout(this.#de),this.#de=null),this.#me.disconnect(),this.#me=null,super.remove())}setParent(t){!this.parent&&t?this._uiManager.removeShouldRescale(this):this.parent&&null===t&&this._uiManager.addShouldRescale(this),super.setParent(t)}onScaleChanging(){const[t,e]=this.parentDimensions,i=this.width*t,s=this.height*e;this.setDimensions(i,s)}enableEditMode(){this.#ue||null===this.canvas||(super.enableEditMode(),this._isDraggable=!1,this.canvas.addEventListener("pointerdown",this.#ce))}disableEditMode(){this.isInEditMode()&&null!==this.canvas&&(super.disableEditMode(),this._isDraggable=!this.isEmpty(),this.div.classList.remove("editing"),this.canvas.removeEventListener("pointerdown",this.#ce))}onceAdded(){this._isDraggable=!this.isEmpty()}isEmpty(){return 0===this.paths.length||1===this.paths.length&&0===this.paths[0].length}#Se(){const{parentRotation:t,parentDimensions:[e,i]}=this;switch(t){case 90:return[0,i,i,e];case 180:return[e,i,e,i];case 270:return[e,0,i,e];default:return[0,0,e,i]}}#Te(){const{ctx:t,color:e,opacity:i,thickness:s,parentScale:n,scaleFactor:r}=this;t.lineWidth=s*n/r,t.lineCap="round",t.lineJoin="round",t.miterLimit=10,t.strokeStyle=`${e}${(0,o.opacityToHex)(i)}`}#_e(t,e){this.canvas.addEventListener("contextmenu",h.noContextMenu),this.canvas.addEventListener("pointerleave",this.#ae),this.canvas.addEventListener("pointermove",this.#re),this.canvas.addEventListener("pointerup",this.#le),this.canvas.removeEventListener("pointerdown",this.#ce),this.isEditing=!0,this.#ge||(this.#ge=!0,this.#Ae(),this.thickness||=u._defaultThickness,this.color||=u._defaultColor||n.AnnotationEditor._defaultLineColor,this.opacity??=u._defaultOpacity),this.currentPath.push([t,e]),this.#pe=!1,this.#Te(),this.#ve=()=>{this.#Me(),this.#ve&&window.requestAnimationFrame(this.#ve)},window.requestAnimationFrame(this.#ve)}#Ie(t,e){const[i,s]=this.currentPath.at(-1);if(this.currentPath.length>1&&t===i&&e===s)return;const n=this.currentPath;let o=this.#he;if(n.push([t,e]),this.#pe=!0,n.length<=2)return o.moveTo(...n[0]),void o.lineTo(t,e);3===n.length&&(this.#he=o=new Path2D,o.moveTo(...n[0])),this.#Be(o,...n.at(-3),...n.at(-2),t,e)}#Le(){if(0===this.currentPath.length)return;const t=this.currentPath.at(-1);this.#he.lineTo(...t)}#Pe(t,e){let i;if(this.#ve=null,t=Math.min(Math.max(t,0),this.canvas.width),e=Math.min(Math.max(e,0),this.canvas.height),this.#Ie(t,e),this.#Le(),1!==this.currentPath.length)i=this.#Re();else{const s=[t,e];i=[[s,s.slice(),s.slice(),s]]}const s=this.#he,n=this.currentPath;this.currentPath=[],this.#he=new Path2D,this.addCommands({cmd:()=>{this.allRawPaths.push(n),this.paths.push(i),this.bezierPath2D.push(s),this.rebuild()},undo:()=>{this.allRawPaths.pop(),this.paths.pop(),this.bezierPath2D.pop(),0===this.paths.length?this.remove():(this.canvas||(this.#Ee(),this.#Ce()),this.#ke())},mustExec:!0})}#Me(){if(!this.#pe)return;this.#pe=!1;Math.ceil(this.thickness*this.parentScale);const t=this.currentPath.slice(-3),e=t.map((t=>t[0])),i=t.map((t=>t[1])),{ctx:s}=(Math.min(...e),Math.max(...e),Math.min(...i),Math.max(...i),this);s.save(),s.clearRect(0,0,this.canvas.width,this.canvas.height);for(const t of this.bezierPath2D)s.stroke(t);s.stroke(this.#he),s.restore()}#Be(t,e,i,s,n,o,r){const a=(e+s)/2,l=(i+n)/2,c=(s+o)/2,d=(n+r)/2;t.bezierCurveTo(a+2*(s-a)/3,l+2*(n-l)/3,c+2*(s-c)/3,d+2*(n-d)/3,c,d)}#Re(){const t=this.currentPath;if(t.length<=2)return[[t[0],t[0],t.at(-1),t.at(-1)]];const e=[];let i,[s,n]=t[0];for(i=1;i<t.length-2;i++){const[o,r]=t[i],[a,l]=t[i+1],c=(o+a)/2,d=(r+l)/2,h=[s+2*(o-s)/3,n+2*(r-n)/3],u=[c+2*(o-c)/3,d+2*(r-d)/3];e.push([[s,n],h,u,[c,d]]),[s,n]=[c,d]}const[o,r]=t[i],[a,l]=t[i+1],c=[s+2*(o-s)/3,n+2*(r-n)/3],d=[a+2*(o-a)/3,l+2*(r-l)/3];return e.push([[s,n],c,d,[a,l]]),e}#xe(){if(this.isEmpty())return void this.#De();this.#Te();const{canvas:t,ctx:e}=this;e.setTransform(1,0,0,1,0,0),e.clearRect(0,0,t.width,t.height),this.#De();for(const t of this.bezierPath2D)e.stroke(t)}commit(){this.#ue||(super.commit(),this.isEditing=!1,this.disableEditMode(),this.setInForeground(),this.#ue=!0,this.div.classList.add("disabled"),this.#ke(!0),this.select(),this.parent.addInkEditorIfNeeded(!0),this.moveInDOM(),this.div.focus({preventScroll:!0}))}focusin(t){this._focusEventsAllowed&&(super.focusin(t),this.enableEditMode())}canvasPointerdown(t){0===t.button&&this.isInEditMode()&&!this.#ue&&(this.setInForeground(),t.preventDefault(),this.div.contains(document.activeElement)||this.div.focus({preventScroll:!0}),this.#_e(t.offsetX,t.offsetY))}canvasPointermove(t){t.preventDefault(),this.#Ie(t.offsetX,t.offsetY)}canvasPointerup(t){t.preventDefault(),this.#Oe(t)}canvasPointerleave(t){this.#Oe(t)}#Oe(t){this.canvas.removeEventListener("pointerleave",this.#ae),this.canvas.removeEventListener("pointermove",this.#re),this.canvas.removeEventListener("pointerup",this.#le),this.canvas.addEventListener("pointerdown",this.#ce),this.#de&&clearTimeout(this.#de),this.#de=setTimeout((()=>{this.#de=null,this.canvas.removeEventListener("contextmenu",h.noContextMenu)}),10),this.#Pe(t.offsetX,t.offsetY),this.addToAnnotationStorage(),this.setInBackground()}#Ee(){this.canvas=document.createElement("canvas"),this.canvas.width=this.canvas.height=0,this.canvas.className="inkEditorCanvas",this.canvas.setAttribute("data-l10n-id","pdfjs-ink-canvas"),this.div.append(this.canvas),this.ctx=this.canvas.getContext("2d")}#Ce(){this.#me=new ResizeObserver((t=>{const e=t[0].contentRect;e.width&&e.height&&this.setDimensions(e.width,e.height)})),this.#me.observe(this.div)}get isResizable(){return!this.isEmpty()&&this.#ue}render(){if(this.div)return this.div;let t,e;this.width&&(t=this.x,e=this.y),super.render(),this.div.setAttribute("data-l10n-id","pdfjs-ink");const[i,s,n,o]=this.#Se();if(this.setAt(i,s,0,0),this.setDims(n,o),this.#Ee(),this.width){const[i,s]=this.parentDimensions;this.setAspectRatio(this.width*i,this.height*s),this.setAt(t*i,e*s,this.width*i,this.height*s),this.#ge=!0,this.#Ae(),this.setDims(this.width*i,this.height*s),this.#xe(),this.div.classList.add("disabled")}else this.div.classList.add("editing"),this.enableEditMode();return this.#Ce(),this.div}#Ae(){if(!this.#ge)return;const[t,e]=this.parentDimensions;this.canvas.width=Math.ceil(this.width*t),this.canvas.height=Math.ceil(this.height*e),this.#De()}setDimensions(t,e){const i=Math.round(t),s=Math.round(e);if(this.#fe===i&&this.#be===s)return;this.#fe=i,this.#be=s,this.canvas.style.visibility="hidden";const[n,o]=this.parentDimensions;this.width=t/n,this.height=e/o,this.fixAndSetPosition(),this.#ue&&this.#Fe(t,e),this.#Ae(),this.#xe(),this.canvas.style.visibility="visible",this.fixDims()}#Fe(t,e){const i=this.#Ne(),s=(t-i)/this.#oe,n=(e-i)/this.#ne;this.scaleFactor=Math.min(s,n)}#De(){const t=this.#Ne()/2;this.ctx.setTransform(this.scaleFactor,0,0,this.scaleFactor,this.translationX*this.scaleFactor+t,this.translationY*this.scaleFactor+t)}static#He(t){const e=new Path2D;for(let i=0,s=t.length;i<s;i++){const[s,n,o,r]=t[i];0===i&&e.moveTo(...s),e.bezierCurveTo(n[0],n[1],o[0],o[1],r[0],r[1])}return e}static#ze(t,e,i){const[s,n,o,r]=e;switch(i){case 0:for(let e=0,i=t.length;e<i;e+=2)t[e]+=s,t[e+1]=r-t[e+1];break;case 90:for(let e=0,i=t.length;e<i;e+=2){const i=t[e];t[e]=t[e+1]+s,t[e+1]=i+n}break;case 180:for(let e=0,i=t.length;e<i;e+=2)t[e]=o-t[e],t[e+1]+=n;break;case 270:for(let e=0,i=t.length;e<i;e+=2){const i=t[e];t[e]=o-t[e+1],t[e+1]=r-i}break;default:throw new Error("Invalid rotation")}return t}static#Ue(t,e,i){const[s,n,o,r]=e;switch(i){case 0:for(let e=0,i=t.length;e<i;e+=2)t[e]-=s,t[e+1]=r-t[e+1];break;case 90:for(let e=0,i=t.length;e<i;e+=2){const i=t[e];t[e]=t[e+1]-n,t[e+1]=i-s}break;case 180:for(let e=0,i=t.length;e<i;e+=2)t[e]=o-t[e],t[e+1]-=n;break;case 270:for(let e=0,i=t.length;e<i;e+=2){const i=t[e];t[e]=r-t[e+1],t[e+1]=o-i}break;default:throw new Error("Invalid rotation")}return t}#je(t,e,i,s){const n=[],o=this.thickness/2,r=t*e+o,a=t*i+o;for(const e of this.paths){const i=[],o=[];for(let s=0,n=e.length;s<n;s++){const[l,c,d,h]=e[s],u=t*l[0]+r,p=t*l[1]+a,g=t*c[0]+r,m=t*c[1]+a,f=t*d[0]+r,b=t*d[1]+a,v=t*h[0]+r,y=t*h[1]+a;0===s&&(i.push(u,p),o.push(u,p)),i.push(g,m,f,b,v,y),o.push(g,m),s===n-1&&o.push(v,y)}n.push({bezier:u.#ze(i,s,this.rotation),points:u.#ze(o,s,this.rotation)})}return n}#$e(){let t=1/0,e=-1/0,i=1/0,n=-1/0;for(const o of this.paths)for(const[r,a,l,c]of o){const o=s.Util.bezierBoundingBox(...r,...a,...l,...c);t=Math.min(t,o[0]),i=Math.min(i,o[1]),e=Math.max(e,o[2]),n=Math.max(n,o[3])}return[t,i,e,n]}#Ne(){return this.#ue?Math.ceil(this.thickness*this.parentScale):0}#ke(t=!1){if(this.isEmpty())return;if(!this.#ue)return void this.#xe();const e=this.#$e(),i=this.#Ne();this.#oe=Math.max(n.AnnotationEditor.MIN_SIZE,e[2]-e[0]),this.#ne=Math.max(n.AnnotationEditor.MIN_SIZE,e[3]-e[1]);const s=Math.ceil(i+this.#oe*this.scaleFactor),o=Math.ceil(i+this.#ne*this.scaleFactor),[r,a]=this.parentDimensions;this.width=s/r,this.height=o/a,this.setAspectRatio(s,o);const l=this.translationX,c=this.translationY;this.translationX=-e[0],this.translationY=-e[1],this.#Ae(),this.#xe(),this.#fe=s,this.#be=o,this.setDims(s,o);const d=t?i/this.scaleFactor/2:0;this.translate(l-this.translationX-d,c-this.translationY-d)}static deserialize(t,e,i){if(t instanceof r.InkAnnotationElement)return null;const o=super.deserialize(t,e,i);o.thickness=t.thickness,o.color=s.Util.makeHexColor(...t.color),o.opacity=t.opacity;const[a,l]=o.pageDimensions,c=o.width*a,d=o.height*l,h=o.parentScale,p=t.thickness/2;o.#ue=!0,o.#fe=Math.round(c),o.#be=Math.round(d);const{paths:g,rect:m,rotation:f}=t;for(let{bezier:t}of g){t=u.#Ue(t,m,f);const e=[];o.paths.push(e);let i=h*(t[0]-p),s=h*(t[1]-p);for(let n=2,o=t.length;n<o;n+=6){const o=h*(t[n]-p),r=h*(t[n+1]-p),a=h*(t[n+2]-p),l=h*(t[n+3]-p),c=h*(t[n+4]-p),d=h*(t[n+5]-p);e.push([[i,s],[o,r],[a,l],[c,d]]),i=c,s=d}const n=this.#He(e);o.bezierPath2D.push(n)}const b=o.#$e();return o.#oe=Math.max(n.AnnotationEditor.MIN_SIZE,b[2]-b[0]),o.#ne=Math.max(n.AnnotationEditor.MIN_SIZE,b[3]-b[1]),o.#Fe(c,d),o}serialize(){if(this.isEmpty())return null;const t=this.getRect(0,0),e=n.AnnotationEditor._colorManager.convert(this.ctx.strokeStyle);return{annotationType:s.AnnotationEditorType.INK,color:e,thickness:this.thickness,opacity:this.opacity,paths:this.#je(this.scaleFactor/this.parentScale,this.translationX,this.translationY,t),pageIndex:this.pageIndex,rect:t,rotation:this.rotation,structTreeParentId:this._structTreeParentId}}}class p extends n.AnnotationEditor{#We=null;#Ve=null;#qe=null;#Ge=null;#Ke=null;#Xe="";#Ye=null;#me=null;#Je=null;#Qe=!1;#Ze=!1;static _type="stamp";static _editorType=s.AnnotationEditorType.STAMP;constructor(t){super({...t,name:"stampEditor"}),this.#Ge=t.bitmapUrl,this.#Ke=t.bitmapFile}static initialize(t){n.AnnotationEditor.initialize(t)}static get supportedTypes(){return(0,s.shadow)(this,"supportedTypes",["apng","avif","bmp","gif","jpeg","png","svg+xml","webp","x-icon"].map((t=>`image/${t}`)))}static get supportedTypesStr(){return(0,s.shadow)(this,"supportedTypesStr",this.supportedTypes.join(","))}static isHandlingMimeForPasting(t){return this.supportedTypes.includes(t)}static paste(t,e){e.pasteEditor(s.AnnotationEditorType.STAMP,{bitmapFile:t.getAsFile()})}#ti(t,e=!1){t?(this.#We=t.bitmap,e||(this.#Ve=t.id,this.#Qe=t.isSvg),t.file&&(this.#Xe=t.file.name),this.#Ee()):this.remove()}#ei(){this.#qe=null,this._uiManager.enableWaiting(!1),this.#Ye&&this.div.focus()}#ii(){if(this.#Ve)return this._uiManager.enableWaiting(!0),void this._uiManager.imageManager.getFromId(this.#Ve).then((t=>this.#ti(t,!0))).finally((()=>this.#ei()));if(this.#Ge){const t=this.#Ge;return this.#Ge=null,this._uiManager.enableWaiting(!0),void(this.#qe=this._uiManager.imageManager.getFromUrl(t).then((t=>this.#ti(t))).finally((()=>this.#ei())))}if(this.#Ke){const t=this.#Ke;return this.#Ke=null,this._uiManager.enableWaiting(!0),void(this.#qe=this._uiManager.imageManager.getFromFile(t).then((t=>this.#ti(t))).finally((()=>this.#ei())))}const t=document.createElement("input");t.type="file",t.accept=p.supportedTypesStr,this.#qe=new Promise((e=>{t.addEventListener("change",(async()=>{if(t.files&&0!==t.files.length){this._uiManager.enableWaiting(!0);const e=await this._uiManager.imageManager.getFromFile(t.files[0]);this.#ti(e)}else this.remove();e()})),t.addEventListener("cancel",(()=>{this.remove(),e()}))})).finally((()=>this.#ei())),t.click()}remove(){this.#Ve&&(this.#We=null,this._uiManager.imageManager.deleteId(this.#Ve),this.#Ye?.remove(),this.#Ye=null,this.#me?.disconnect(),this.#me=null,this.#Je&&(clearTimeout(this.#Je),this.#Je=null)),super.remove()}rebuild(){this.parent?(super.rebuild(),null!==this.div&&(this.#Ve&&this.#ii(),this.isAttachedToDOM||this.parent.add(this))):this.#Ve&&this.#ii()}onceAdded(){this._isDraggable=!0,this.div.focus()}isEmpty(){return!(this.#qe||this.#We||this.#Ge||this.#Ke)}get isResizable(){return!0}render(){if(this.div)return this.div;let t,e;if(this.width&&(t=this.x,e=this.y),super.render(),this.div.hidden=!0,this.#We?this.#Ee():this.#ii(),this.width){const[i,s]=this.parentDimensions;this.setAt(t*i,e*s,this.width*i,this.height*s)}return this.div}#Ee(){const{div:t}=this;let{width:e,height:i}=this.#We;const[s,n]=this.pageDimensions,o=.75;if(this.width)e=this.width*s,i=this.height*n;else if(e>o*s||i>o*n){const t=Math.min(o*s/e,o*n/i);e*=t,i*=t}const[r,a]=this.parentDimensions;this.setDims(e*r/s,i*a/n),this._uiManager.enableWaiting(!1);const l=this.#Ye=document.createElement("canvas");t.append(l),t.hidden=!1,this.#si(e,i),this.#Ce(),this.#Ze||(this.parent.addUndoableEditor(this),this.#Ze=!0),this._uiManager._eventBus.dispatch("reporttelemetry",{source:this,details:{type:"editing",subtype:this.editorType,data:{action:"inserted_image"}}}),this.addAltTextButton(),this.#Xe&&l.setAttribute("aria-label",this.#Xe)}#ni(t,e){const[i,s]=this.parentDimensions;this.width=t/i,this.height=e/s,this.setDims(t,e),this._initialOptions?.isCentered?this.center():this.fixAndSetPosition(),this._initialOptions=null,null!==this.#Je&&clearTimeout(this.#Je),this.#Je=setTimeout((()=>{this.#Je=null,this.#si(t,e)}),200)}#oi(t,e){const{width:i,height:s}=this.#We;let n=i,o=s,r=this.#We;for(;n>2*t||o>2*e;){const i=n,s=o;n>2*t&&(n=n>=16384?Math.floor(n/2)-1:Math.ceil(n/2)),o>2*e&&(o=o>=16384?Math.floor(o/2)-1:Math.ceil(o/2));const a=new OffscreenCanvas(n,o);a.getContext("2d").drawImage(r,0,0,i,s,0,0,n,o),r=a.transferToImageBitmap()}return r}#si(t,e){t=Math.ceil(t),e=Math.ceil(e);const i=this.#Ye;if(!i||i.width===t&&i.height===e)return;i.width=t,i.height=e;const s=this.#Qe?this.#We:this.#oi(t,e),n=i.getContext("2d");n.filter=this._uiManager.hcmFilter,n.drawImage(s,0,0,s.width,s.height,0,0,t,e)}getImageForAltText(){return this.#Ye}#ri(t){if(t){if(this.#Qe){const t=this._uiManager.imageManager.getSvgUrl(this.#Ve);if(t)return t}const t=document.createElement("canvas");return({width:t.width,height:t.height}=this.#We),t.getContext("2d").drawImage(this.#We,0,0),t.toDataURL()}if(this.#Qe){const[t,e]=this.pageDimensions,i=Math.round(this.width*t*h.PixelsPerInch.PDF_TO_CSS_UNITS),s=Math.round(this.height*e*h.PixelsPerInch.PDF_TO_CSS_UNITS),n=new OffscreenCanvas(i,s);return n.getContext("2d").drawImage(this.#We,0,0,this.#We.width,this.#We.height,0,0,i,s),n.transferToImageBitmap()}return structuredClone(this.#We)}#Ce(){this.#me=new ResizeObserver((t=>{const e=t[0].contentRect;e.width&&e.height&&this.#ni(e.width,e.height)})),this.#me.observe(this.div)}static deserialize(t,e,i){if(t instanceof r.StampAnnotationElement)return null;const s=super.deserialize(t,e,i),{rect:n,bitmapUrl:o,bitmapId:a,isSvg:l,accessibilityData:c}=t;a&&i.imageManager.isValidId(a)?s.#Ve=a:s.#Ge=o,s.#Qe=l;const[d,h]=s.pageDimensions;return s.width=(n[2]-n[0])/d,s.height=(n[3]-n[1])/h,c&&(s.altTextData=c),s}serialize(t=!1,e=null){if(this.isEmpty())return null;const i={annotationType:s.AnnotationEditorType.STAMP,bitmapId:this.#Ve,pageIndex:this.pageIndex,rect:this.getRect(0,0),rotation:this.rotation,isSvg:this.#Qe,structTreeParentId:this._structTreeParentId};if(t)return i.bitmapUrl=this.#ri(!0),i.accessibilityData=this.altTextData,i;const{decorative:n,altText:o}=this.altTextData;if(!n&&o&&(i.accessibilityData={type:"Figure",alt:o}),null===e)return i;e.stamps||=new Map;const r=this.#Qe?(i.rect[2]-i.rect[0])*(i.rect[3]-i.rect[1]):null;if(e.stamps.has(this.#Ve)){if(this.#Qe){const t=e.stamps.get(this.#Ve);r>t.area&&(t.area=r,t.serialized.bitmap.close(),t.serialized.bitmap=this.#ri(!1))}}else e.stamps.set(this.#Ve,{area:r,serialized:i}),i.bitmap=this.#ri(!1);return i}}class g{#L;#ai=!1;#li=null;#ci=this.pointerup.bind(this);#di=this.pointerUpAfterSelection.bind(this);#hi=this.pointerdown.bind(this);#ui=null;#pi=this.selectionStart.bind(this);#gi=new Map;#mi=!1;#fi=!1;#bi=!1;#vi=null;#yi;static _initialized=!1;static#wi=new Map([a,u,p,d].map((t=>[t._editorType,t])));constructor({uiManager:t,pageIndex:e,div:i,accessibilityManager:s,annotationLayer:n,drawLayer:o,textLayer:r,viewport:a,l10n:l}){const c=[...g.#wi.values()];if(!g._initialized){g._initialized=!0;for(const t of c)t.initialize(l)}t.registerEditorTypes(c),this.#yi=t,this.pageIndex=e,this.div=i,this.#L=s,this.#li=n,this.viewport=a,this.#vi=r,this.drawLayer=o,this.#yi.addLayer(this)}get isEmpty(){return 0===this.#gi.size}updateToolbar(t){this.#yi.updateToolbar(t)}updateMode(t=this.#yi.getMode()){switch(this.#ki(),t){case s.AnnotationEditorType.NONE:this.disableTextSelection(),this.togglePointerEvents(!1),this.disableClick();break;case s.AnnotationEditorType.INK:this.addInkEditorIfNeeded(!1),this.disableTextSelection(),this.togglePointerEvents(!0),this.disableClick();break;case s.AnnotationEditorType.HIGHLIGHT:this.enableTextSelection(),this.togglePointerEvents(!1),this.disableClick();break;default:this.disableTextSelection(),this.togglePointerEvents(!0),this.enableClick()}if(t!==s.AnnotationEditorType.NONE){const{classList:e}=this.div;for(const i of g.#wi.values())e.toggle(`${i._type}Editing`,t===i._editorType);this.div.hidden=!1}}addInkEditorIfNeeded(t){if(this.#yi.getMode()===s.AnnotationEditorType.INK){if(!t)for(const t of this.#gi.values())if(t.isEmpty())return void t.setInBackground();this.#xi({offsetX:0,offsetY:0},!1).setInBackground()}}setEditingState(t){this.#yi.setEditingState(t)}addCommands(t){this.#yi.addCommands(t)}togglePointerEvents(t=!1){this.div.classList.toggle("disabled",!t)}enable(){this.togglePointerEvents(!0);const t=new Set;for(const e of this.#gi.values())e.enableEditing(),e.annotationElementId&&t.add(e.annotationElementId);if(!this.#li)return;const e=this.#li.getEditableAnnotations();for(const i of e){if(i.hide(),this.#yi.isDeletedAnnotationElement(i.data.id))continue;if(t.has(i.data.id))continue;const e=this.deserialize(i);e&&(this.addOrRebuild(e),e.enableEditing())}}disable(){this.#bi=!0,this.togglePointerEvents(!1);const t=new Set;for(const e of this.#gi.values())e.disableEditing(),e.annotationElementId&&null===e.serialize()?(this.getEditableAnnotation(e.annotationElementId)?.show(),e.remove()):t.add(e.annotationElementId);if(this.#li){const e=this.#li.getEditableAnnotations();for(const i of e){const{id:e}=i.data;t.has(e)||this.#yi.isDeletedAnnotationElement(e)||i.show()}}this.#ki(),this.isEmpty&&(this.div.hidden=!0);const{classList:e}=this.div;for(const t of g.#wi.values())e.remove(`${t._type}Editing`);this.disableTextSelection(),this.#bi=!1}getEditableAnnotation(t){return this.#li?.getEditableAnnotation(t)||null}setActiveEditor(t){this.#yi.getActive()!==t&&this.#yi.setActiveEditor(t)}enableTextSelection(){this.#vi?.div&&document.addEventListener("selectstart",this.#pi)}disableTextSelection(){this.#vi?.div&&document.removeEventListener("selectstart",this.#pi)}enableClick(){this.div.addEventListener("pointerdown",this.#hi),this.div.addEventListener("pointerup",this.#ci)}disableClick(){this.div.removeEventListener("pointerdown",this.#hi),this.div.removeEventListener("pointerup",this.#ci)}attach(t){this.#gi.set(t.id,t);const{annotationElementId:e}=t;e&&this.#yi.isDeletedAnnotationElement(e)&&this.#yi.removeDeletedAnnotationElement(t)}detach(t){this.#gi.delete(t.id),this.#L?.removePointerInTextLayer(t.contentDiv),!this.#bi&&t.annotationElementId&&this.#yi.addDeletedAnnotationElement(t)}remove(t){this.detach(t),this.#yi.removeEditor(t),t.div.remove(),t.isAttachedToDOM=!1,this.#fi||this.addInkEditorIfNeeded(!1)}changeParent(t){t.parent!==this&&(t.annotationElementId&&(this.#yi.addDeletedAnnotationElement(t.annotationElementId),n.AnnotationEditor.deleteAnnotationElement(t),t.annotationElementId=null),this.attach(t),t.parent?.detach(t),t.setParent(this),t.div&&t.isAttachedToDOM&&(t.div.remove(),this.div.append(t.div)))}add(t){if(this.changeParent(t),this.#yi.addEditor(t),this.attach(t),!t.isAttachedToDOM){const e=t.render();this.div.append(e),t.isAttachedToDOM=!0}t.fixAndSetPosition(),t.onceAdded(),this.#yi.addToAnnotationStorage(t)}moveEditorInDOM(t){if(!t.isAttachedToDOM)return;const{activeElement:e}=document;t.div.contains(e)&&!this.#ui&&(t._focusEventsAllowed=!1,this.#ui=setTimeout((()=>{this.#ui=null,t.div.contains(document.activeElement)?t._focusEventsAllowed=!0:(t.div.addEventListener("focusin",(()=>{t._focusEventsAllowed=!0}),{once:!0}),e.focus())}),0)),t._structTreeParentId=this.#L?.moveElementInDOM(this.div,t.div,t.contentDiv,!0)}addOrRebuild(t){t.needsToBeRebuilt()?(t.parent||=this,t.rebuild()):this.add(t)}addUndoableEditor(t){this.addCommands({cmd:()=>t._uiManager.rebuild(t),undo:()=>{t.remove()},mustExec:!1})}getNextId(){return this.#yi.getId()}get#Ei(){return g.#wi.get(this.#yi.getMode())}#Ci(t){const e=this.#Ei;return e?new e.prototype.constructor(t):null}canCreateNewEmptyEditor(){return this.#Ei?.canCreateNewEmptyEditor()}pasteEditor(t,e){this.#yi.updateToolbar(t),this.#yi.updateMode(t);const{offsetX:i,offsetY:s}=this.#Ai(),n=this.getNextId(),o=this.#Ci({parent:this,id:n,x:i,y:s,uiManager:this.#yi,isCentered:!0,...e});o&&this.add(o)}deserialize(t){return g.#wi.get(t.annotationType??t.annotationEditorType)?.deserialize(t,this,this.#yi)||null}#xi(t,e,i={}){const s=this.getNextId(),n=this.#Ci({parent:this,id:s,x:t.offsetX,y:t.offsetY,uiManager:this.#yi,isCentered:e,...i});return n&&this.add(n),n}#Ai(){const{x:t,y:e,width:i,height:s}=this.div.getBoundingClientRect(),n=Math.max(0,t),o=Math.max(0,e),r=(n+Math.min(window.innerWidth,t+i))/2-t,a=(o+Math.min(window.innerHeight,e+s))/2-e,[l,c]=this.viewport.rotation%180==0?[r,a]:[a,r];return{offsetX:l,offsetY:c}}addNewEditor(){this.#xi(this.#Ai(),!0)}setSelected(t){this.#yi.setSelected(t)}toggleSelected(t){this.#yi.toggleSelected(t)}isSelected(t){return this.#yi.isSelected(t)}unselect(t){this.#yi.unselect(t)}selectionStart(t){this.#vi?.div.addEventListener("pointerup",this.#di,{once:!0})}pointerUpAfterSelection(t){const e=document.getSelection();if(0===e.rangeCount)return;const i=e.getRangeAt(0);if(i.collapsed)return;if(!this.#vi?.div.contains(i.commonAncestorContainer))return;const{x:s,y:n,width:o,height:r}=this.#vi.div.getBoundingClientRect(),a=i.getClientRects();let l;switch(this.viewport.rotation){case 90:l=(t,e,i,a)=>({x:(e-n)/r,y:1-(t+i-s)/o,width:a/r,height:i/o});break;case 180:l=(t,e,i,a)=>({x:1-(t+i-s)/o,y:1-(e+a-n)/r,width:i/o,height:a/r});break;case 270:l=(t,e,i,a)=>({x:1-(e+a-n)/r,y:(t-s)/o,width:a/r,height:i/o});break;default:l=(t,e,i,a)=>({x:(t-s)/o,y:(e-n)/r,width:i/o,height:a/r})}const c=[];for(const{x:t,y:e,width:i,height:s}of a)0!==i&&0!==s&&c.push(l(t,e,i,s));0!==c.length&&this.#xi(t,!1,{boxes:c}),e.empty()}pointerup(t){const{isMac:e}=s.FeatureTest.platform;0!==t.button||t.ctrlKey&&e||t.target===this.div&&this.#mi&&(this.#mi=!1,this.#ai?this.#yi.getMode()!==s.AnnotationEditorType.STAMP?this.#xi(t,!1):this.#yi.unselectAll():this.#ai=!0)}pointerdown(t){if(this.#yi.getMode()===s.AnnotationEditorType.HIGHLIGHT&&this.enableTextSelection(),this.#mi)return void(this.#mi=!1);const{isMac:e}=s.FeatureTest.platform;if(0!==t.button||t.ctrlKey&&e)return;if(t.target!==this.div)return;this.#mi=!0;const i=this.#yi.getActive();this.#ai=!i||i.isEmpty()}findNewParent(t,e,i){const s=this.#yi.findParent(e,i);return null!==s&&s!==this&&(s.changeParent(t),!0)}destroy(){this.#yi.getActive()?.parent===this&&(this.#yi.commitOrRemove(),this.#yi.setActiveEditor(null)),this.#ui&&(clearTimeout(this.#ui),this.#ui=null);for(const t of this.#gi.values())this.#L?.removePointerInTextLayer(t.contentDiv),t.setParent(null),t.isAttachedToDOM=!1,t.div.remove();this.div=null,this.#gi.clear(),this.#yi.removeLayer(this)}#ki(){this.#fi=!0;for(const t of this.#gi.values())t.isEmpty()&&t.remove();this.#fi=!1}render({viewport:t}){this.viewport=t,(0,h.setLayerDimensions)(this.div,t);for(const t of this.#yi.getEditors(this.pageIndex))this.add(t);this.updateMode()}update({viewport:t}){this.#yi.commitOrRemove();const e=this.viewport.rotation,i=t.rotation;if(this.viewport=t,(0,h.setLayerDimensions)(this.div,{rotation:i}),e!==i)for(const t of this.#gi.values())t.rotate(i);this.updateMode()}get pageDimensions(){const{pageWidth:t,pageHeight:e}=this.viewport.rawDims;return[t,e]}}},97:(t,e,i)=>{i.d(e,{ColorPicker:()=>r});var s=i(266),n=i(812),o=i(473);class r{#n=this.#o.bind(this);#Si=null;#Ti=null;#_i;#Mi=null;#Ii=!1;#Bi=!1;#Li;#yi=null;static get _keyboardManager(){return(0,s.shadow)(this,"_keyboardManager",new n.KeyboardManager([[["Escape","mac+Escape"],r.prototype._hideDropdownFromKeyboard],[[" ","mac+ "],r.prototype._colorSelectFromKeyboard],[["ArrowDown","ArrowRight","mac+ArrowDown","mac+ArrowRight"],r.prototype._moveToNext],[["ArrowUp","ArrowLeft","mac+ArrowUp","mac+ArrowLeft"],r.prototype._moveToPrevious],[["Home","mac+Home"],r.prototype._moveToBeginning],[["End","mac+End"],r.prototype._moveToEnd]]))}constructor({editor:t=null,uiManager:e=null}){this.#Bi=!t,this.#yi=t?._uiManager||e,this.#Li=this.#yi._eventBus,this.#_i=t?.color||this.#yi?.highlightColors.values().next().value||"#FFFF98"}renderButton(){const t=this.#Si=document.createElement("button");t.className="colorPicker",t.tabIndex="0",t.setAttribute("data-l10n-id","pdfjs-editor-colorpicker-button"),t.setAttribute("aria-haspopup",!0),t.addEventListener("click",this.#Pi.bind(this));const e=this.#Ti=document.createElement("span");return e.className="swatch",e.style.backgroundColor=this.#_i,t.append(e),t}renderMainDropdown(){const t=this.#Mi=this.#Ri(s.AnnotationEditorParamsType.HIGHLIGHT_DEFAULT_COLOR);return t.setAttribute("aria-orientation","horizontal"),t.setAttribute("aria-labelledby","highlightColorPickerLabel"),t}#Ri(t){const e=document.createElement("div");e.addEventListener("contextmenu",o.noContextMenu),e.className="dropdown",e.role="listbox",e.setAttribute("aria-multiselectable",!1),e.setAttribute("aria-orientation","vertical"),e.setAttribute("data-l10n-id","pdfjs-editor-colorpicker-dropdown");for(const[i,s]of this.#yi.highlightColors){const n=document.createElement("button");n.tabIndex="0",n.role="option",n.setAttribute("data-color",s),n.title=i,n.setAttribute("data-l10n-id",`pdfjs-editor-colorpicker-${i}`);const o=document.createElement("span");n.append(o),o.className="swatch",o.style.backgroundColor=s,n.setAttribute("aria-selected",s===this.#_i),n.addEventListener("click",this.#Di.bind(this,t,s)),e.append(n)}return e.addEventListener("keydown",this.#n),e}#Di(t,e,i){i.stopPropagation(),this.#Li.dispatch("switchannotationeditorparams",{source:this,type:t,value:e})}_colorSelectFromKeyboard(t){const e=t.target.getAttribute("data-color");e&&this.#Di(e,t)}_moveToNext(t){t.target!==this.#Si?t.target.nextSibling?.focus():this.#Mi.firstChild?.focus()}_moveToPrevious(t){t.target.previousSibling?.focus()}_moveToBeginning(){this.#Mi.firstChild?.focus()}_moveToEnd(){this.#Mi.lastChild?.focus()}#o(t){r._keyboardManager.exec(this,t)}#Pi(t){if(this.#Mi&&!this.#Mi.classList.contains("hidden"))return void this.hideDropdown();if(this.#Si.addEventListener("keydown",this.#n),this.#Ii=0===t.detail,this.#Mi)return void this.#Mi.classList.remove("hidden");const e=this.#Mi=this.#Ri(s.AnnotationEditorParamsType.HIGHLIGHT_COLOR);this.#Si.append(e)}hideDropdown(){this.#Mi?.classList.add("hidden")}_hideDropdownFromKeyboard(){this.#Bi||!this.#Mi||this.#Mi.classList.contains("hidden")||(this.hideDropdown(),this.#Si.removeEventListener("keydown",this.#n),this.#Si.focus({preventScroll:!0,focusVisible:this.#Ii}))}updateColor(t){if(this.#Ti&&(this.#Ti.style.backgroundColor=t),!this.#Mi)return;const e=this.#yi.highlightColors.values();for(const i of this.#Mi.children)i.setAttribute("aria-selected",e.next().value===t)}destroy(){this.#Si?.remove(),this.#Si=null,this.#Ti=null,this.#Mi?.remove(),this.#Mi=null}}},115:(t,e,i)=>{i.d(e,{AnnotationEditor:()=>l});var s=i(812),n=i(266),o=i(473);class r{#Oi="";#Fi=!1;#Ni=null;#Hi=null;#zi=null;#Ui=!1;#ji=null;static _l10nPromise=null;constructor(t){this.#ji=t}static initialize(t){r._l10nPromise||=t}async render(){const t=this.#Ni=document.createElement("button");t.className="altText";const e=await r._l10nPromise.get("pdfjs-editor-alt-text-button-label");t.textContent=e,t.setAttribute("aria-label",e),t.tabIndex="0",t.addEventListener("contextmenu",o.noContextMenu),t.addEventListener("pointerdown",(t=>t.stopPropagation()));const i=t=>{t.preventDefault(),this.#ji._uiManager.editAltText(this.#ji)};return t.addEventListener("click",i,{capture:!0}),t.addEventListener("keydown",(e=>{e.target===t&&"Enter"===e.key&&(this.#Ui=!0,i(e))})),await this.#$i(),t}finish(){this.#Ni&&(this.#Ni.focus({focusVisible:this.#Ui}),this.#Ui=!1)}get data(){return{altText:this.#Oi,decorative:this.#Fi}}set data({altText:t,decorative:e}){this.#Oi===t&&this.#Fi===e||(this.#Oi=t,this.#Fi=e,this.#$i())}toggle(t=!1){this.#Ni&&(!t&&this.#zi&&(clearTimeout(this.#zi),this.#zi=null),this.#Ni.disabled=!t)}destroy(){this.#Ni?.remove(),this.#Ni=null,this.#Hi=null}async#$i(){const t=this.#Ni;if(!t)return;if(!this.#Oi&&!this.#Fi)return t.classList.remove("done"),void this.#Hi?.remove();t.classList.add("done"),r._l10nPromise.get("pdfjs-editor-alt-text-edit-button-label").then((e=>{t.setAttribute("aria-label",e)}));let e=this.#Hi;if(!e){this.#Hi=e=document.createElement("span"),e.className="tooltip",e.setAttribute("role","tooltip");const i=e.id=`alt-text-tooltip-${this.#ji.id}`;t.setAttribute("aria-describedby",i);const s=100;t.addEventListener("mouseenter",(()=>{this.#zi=setTimeout((()=>{this.#zi=null,this.#Hi.classList.add("show"),this.#ji._uiManager._eventBus.dispatch("reporttelemetry",{source:this,details:{type:"editing",subtype:this.#ji.editorType,data:{action:"alt_text_tooltip"}}})}),s)})),t.addEventListener("mouseleave",(()=>{this.#zi&&(clearTimeout(this.#zi),this.#zi=null),this.#Hi?.classList.remove("show")}))}e.innerText=this.#Fi?await r._l10nPromise.get("pdfjs-editor-alt-text-decorative-tooltip"):this.#Oi,e.parentNode||t.append(e);const i=this.#ji.getImageForAltText();i?.setAttribute("aria-describedby",e.id)}}class a{#Wi=null;#Vt=null;#ji;#Vi=null;constructor(t){this.#ji=t}render(){const t=this.#Wi=document.createElement("div");t.className="editToolbar",t.addEventListener("contextmenu",o.noContextMenu),t.addEventListener("pointerdown",a.#qi);const e=this.#Vi=document.createElement("div");e.className="buttons",t.append(e);const i=this.#ji.toolbarPosition;if(i){const{style:e}=t,s="ltr"===this.#ji._uiManager.direction?1-i[0]:i[0];e.insetInlineEnd=100*s+"%",e.top=`calc(${100*i[1]}% + var(--editor-toolbar-vert-offset))`}return this.#Gi(),t}static#qi(t){t.stopPropagation()}#Ki(t){this.#ji._focusEventsAllowed=!1,t.preventDefault(),t.stopPropagation()}#Xi(t){this.#ji._focusEventsAllowed=!0,t.preventDefault(),t.stopPropagation()}#Yi(t){t.addEventListener("focusin",this.#Ki.bind(this),{capture:!0}),t.addEventListener("focusout",this.#Xi.bind(this),{capture:!0}),t.addEventListener("contextmenu",o.noContextMenu)}hide(){this.#Wi.classList.add("hidden"),this.#Vt?.hideDropdown()}show(){this.#Wi.classList.remove("hidden")}#Gi(){const t=document.createElement("button");t.className="delete",t.tabIndex=0,t.setAttribute("data-l10n-id",`pdfjs-editor-remove-${this.#ji.editorType}-button`),this.#Yi(t),t.addEventListener("click",(t=>{this.#ji._uiManager.delete()})),this.#Vi.append(t)}get#Ji(){const t=document.createElement("div");return t.className="divider",t}addAltTextButton(t){this.#Yi(t),this.#Vi.prepend(t,this.#Ji)}addColorPicker(t){this.#Vt=t;const e=t.renderButton();this.#Yi(e),this.#Vi.prepend(e,this.#Ji)}remove(){this.#Wi.remove(),this.#Vt?.destroy(),this.#Vt=null}}class l{#Qi=null;#Oi=null;#Zi=!1;#ts=null;#es=null;#is=this.focusin.bind(this);#ss=this.focusout.bind(this);#ns=null;#os="";#rs=!1;#as=!1;#ls=!1;#cs=!1;#ds=null;_initialOptions=Object.create(null);_uiManager=null;_focusEventsAllowed=!0;_l10nPromise=null;#hs=!1;#us=l._zIndex++;static _borderLineWidth=-1;static _colorManager=new s.ColorManager;static _zIndex=1;static get _resizerKeyboardManager(){const t=l.prototype._resizeWithKeyboard,e=s.AnnotationEditorUIManager.TRANSLATE_SMALL,i=s.AnnotationEditorUIManager.TRANSLATE_BIG;return(0,n.shadow)(this,"_resizerKeyboardManager",new s.KeyboardManager([[["ArrowLeft","mac+ArrowLeft"],t,{args:[-e,0]}],[["ctrl+ArrowLeft","mac+shift+ArrowLeft"],t,{args:[-i,0]}],[["ArrowRight","mac+ArrowRight"],t,{args:[e,0]}],[["ctrl+ArrowRight","mac+shift+ArrowRight"],t,{args:[i,0]}],[["ArrowUp","mac+ArrowUp"],t,{args:[0,-e]}],[["ctrl+ArrowUp","mac+shift+ArrowUp"],t,{args:[0,-i]}],[["ArrowDown","mac+ArrowDown"],t,{args:[0,e]}],[["ctrl+ArrowDown","mac+shift+ArrowDown"],t,{args:[0,i]}],[["Escape","mac+Escape"],l.prototype._stopResizingWithKeyboard]]))}constructor(t){this.constructor===l&&(0,n.unreachable)("Cannot initialize AnnotationEditor."),this.parent=t.parent,this.id=t.id,this.width=this.height=null,this.pageIndex=t.parent.pageIndex,this.name=t.name,this.div=null,this._uiManager=t.uiManager,this.annotationElementId=null,this._willKeepAspectRatio=!1,this._initialOptions.isCentered=t.isCentered,this._structTreeParentId=null;const{rotation:e,rawDims:{pageWidth:i,pageHeight:s,pageX:o,pageY:r}}=this.parent.viewport;this.rotation=e,this.pageRotation=(360+e-this._uiManager.viewParameters.rotation)%360,this.pageDimensions=[i,s],this.pageTranslation=[o,r];const[a,c]=this.parentDimensions;this.x=t.x/a,this.y=t.y/c,this.isAttachedToDOM=!1,this.deleted=!1}get editorType(){return Object.getPrototypeOf(this).constructor._type}static get _defaultLineColor(){return(0,n.shadow)(this,"_defaultLineColor",this._colorManager.getHexCode("CanvasText"))}static deleteAnnotationElement(t){const e=new c({id:t.parent.getNextId(),parent:t.parent,uiManager:t._uiManager});e.annotationElementId=t.annotationElementId,e.deleted=!0,e._uiManager.addToAnnotationStorage(e)}static initialize(t,e=null){if(l._l10nPromise||=new Map(["pdfjs-editor-alt-text-button-label","pdfjs-editor-alt-text-edit-button-label","pdfjs-editor-alt-text-decorative-tooltip","pdfjs-editor-resizer-label-topLeft","pdfjs-editor-resizer-label-topMiddle","pdfjs-editor-resizer-label-topRight","pdfjs-editor-resizer-label-middleRight","pdfjs-editor-resizer-label-bottomRight","pdfjs-editor-resizer-label-bottomMiddle","pdfjs-editor-resizer-label-bottomLeft","pdfjs-editor-resizer-label-middleLeft"].map((e=>[e,t.get(e.replaceAll(/([A-Z])/g,(t=>`-${t.toLowerCase()}`)))]))),e?.strings)for(const i of e.strings)l._l10nPromise.set(i,t.get(i));if(-1!==l._borderLineWidth)return;const i=getComputedStyle(document.documentElement);l._borderLineWidth=parseFloat(i.getPropertyValue("--outline-width"))||0}static updateDefaultParams(t,e){}static get defaultPropertiesToUpdate(){return[]}static isHandlingMimeForPasting(t){return!1}static paste(t,e){(0,n.unreachable)("Not implemented")}get propertiesToUpdate(){return[]}get _isDraggable(){return this.#hs}set _isDraggable(t){this.#hs=t,this.div?.classList.toggle("draggable",t)}get isEnterHandled(){return!0}center(){const[t,e]=this.pageDimensions;switch(this.parentRotation){case 90:this.x-=this.height*e/(2*t),this.y+=this.width*t/(2*e);break;case 180:this.x+=this.width/2,this.y+=this.height/2;break;case 270:this.x+=this.height*e/(2*t),this.y-=this.width*t/(2*e);break;default:this.x-=this.width/2,this.y-=this.height/2}this.fixAndSetPosition()}addCommands(t){this._uiManager.addCommands(t)}get currentLayer(){return this._uiManager.currentLayer}setInBackground(){this.div.style.zIndex=0}setInForeground(){this.div.style.zIndex=this.#us}setParent(t){null!==t?(this.pageIndex=t.pageIndex,this.pageDimensions=t.pageDimensions):this.#ps(),this.parent=t}focusin(t){this._focusEventsAllowed&&(this.#rs?this.#rs=!1:this.parent.setSelected(this))}focusout(t){if(!this._focusEventsAllowed)return;if(!this.isAttachedToDOM)return;const e=t.relatedTarget;e?.closest(`#${this.id}`)||(t.preventDefault(),this.parent?.isMultipleSelection||this.commitOrRemove())}commitOrRemove(){this.isEmpty()?this.remove():this.commit()}commit(){this.addToAnnotationStorage()}addToAnnotationStorage(){this._uiManager.addToAnnotationStorage(this)}setAt(t,e,i,s){const[n,o]=this.parentDimensions;[i,s]=this.screenToPageTranslation(i,s),this.x=(t+i)/n,this.y=(e+s)/o,this.fixAndSetPosition()}#gs([t,e],i,s){[i,s]=this.screenToPageTranslation(i,s),this.x+=i/t,this.y+=s/e,this.fixAndSetPosition()}translate(t,e){this.#gs(this.parentDimensions,t,e)}translateInPage(t,e){this.#gs(this.pageDimensions,t,e),this.div.scrollIntoView({block:"nearest"})}drag(t,e){const[i,s]=this.parentDimensions;if(this.x+=t/i,this.y+=e/s,this.parent&&(this.x<0||this.x>1||this.y<0||this.y>1)){const{x:t,y:e}=this.div.getBoundingClientRect();this.parent.findNewParent(this,t,e)&&(this.x-=Math.floor(this.x),this.y-=Math.floor(this.y))}let{x:n,y:o}=this;const[r,a]=this.#ms();n+=r,o+=a,this.div.style.left=`${(100*n).toFixed(2)}%`,this.div.style.top=`${(100*o).toFixed(2)}%`,this.div.scrollIntoView({block:"nearest"})}#ms(){const[t,e]=this.parentDimensions,{_borderLineWidth:i}=l,s=i/t,n=i/e;switch(this.rotation){case 90:return[-s,n];case 180:return[s,n];case 270:return[s,-n];default:return[-s,-n]}}fixAndSetPosition(t=this.rotation){const[e,i]=this.pageDimensions;let{x:s,y:n,width:o,height:r}=this;switch(o*=e,r*=i,s*=e,n*=i,t){case 0:s=Math.max(0,Math.min(e-o,s)),n=Math.max(0,Math.min(i-r,n));break;case 90:s=Math.max(0,Math.min(e-r,s)),n=Math.min(i,Math.max(o,n));break;case 180:s=Math.min(e,Math.max(o,s)),n=Math.min(i,Math.max(r,n));break;case 270:s=Math.min(e,Math.max(r,s)),n=Math.max(0,Math.min(i-o,n))}this.x=s/=e,this.y=n/=i;const[a,l]=this.#ms();s+=a,n+=l;const{style:c}=this.div;c.left=`${(100*s).toFixed(2)}%`,c.top=`${(100*n).toFixed(2)}%`,this.moveInDOM()}static#fs(t,e,i){switch(i){case 90:return[e,-t];case 180:return[-t,-e];case 270:return[-e,t];default:return[t,e]}}screenToPageTranslation(t,e){return l.#fs(t,e,this.parentRotation)}pageTranslationToScreen(t,e){return l.#fs(t,e,360-this.parentRotation)}#bs(t){switch(t){case 90:{const[t,e]=this.pageDimensions;return[0,-t/e,e/t,0]}case 180:return[-1,0,0,-1];case 270:{const[t,e]=this.pageDimensions;return[0,t/e,-e/t,0]}default:return[1,0,0,1]}}get parentScale(){return this._uiManager.viewParameters.realScale}get parentRotation(){return(this._uiManager.viewParameters.rotation+this.pageRotation)%360}get parentDimensions(){const{parentScale:t,pageDimensions:[e,i]}=this,s=e*t,o=i*t;return n.FeatureTest.isCSSRoundSupported?[Math.round(s),Math.round(o)]:[s,o]}setDims(t,e){const[i,s]=this.parentDimensions;this.div.style.width=`${(100*t/i).toFixed(2)}%`,this.#Zi||(this.div.style.height=`${(100*e/s).toFixed(2)}%`)}fixDims(){const{style:t}=this.div,{height:e,width:i}=t,s=i.endsWith("%"),n=!this.#Zi&&e.endsWith("%");if(s&&n)return;const[o,r]=this.parentDimensions;s||(t.width=`${(100*parseFloat(i)/o).toFixed(2)}%`),this.#Zi||n||(t.height=`${(100*parseFloat(e)/r).toFixed(2)}%`)}getInitialTranslation(){return[0,0]}#vs(){if(this.#ts)return;this.#ts=document.createElement("div"),this.#ts.classList.add("resizers");const t=this._willKeepAspectRatio?["topLeft","topRight","bottomRight","bottomLeft"]:["topLeft","topMiddle","topRight","middleRight","bottomRight","bottomMiddle","bottomLeft","middleLeft"];for(const e of t){const t=document.createElement("div");this.#ts.append(t),t.classList.add("resizer",e),t.setAttribute("data-resizer-name",e),t.addEventListener("pointerdown",this.#ys.bind(this,e)),t.addEventListener("contextmenu",o.noContextMenu),t.tabIndex=-1}this.div.prepend(this.#ts)}#ys(t,e){e.preventDefault();const{isMac:i}=n.FeatureTest.platform;if(0!==e.button||e.ctrlKey&&i)return;this.#Oi?.toggle(!1);const s=this.#ws.bind(this,t),o=this._isDraggable;this._isDraggable=!1;const r={passive:!0,capture:!0};this.parent.togglePointerEvents(!1),window.addEventListener("pointermove",s,r);const a=this.x,l=this.y,c=this.width,d=this.height,h=this.parent.div.style.cursor,u=this.div.style.cursor;this.div.style.cursor=this.parent.div.style.cursor=window.getComputedStyle(e.target).cursor;const p=()=>{this.parent.togglePointerEvents(!0),this.#Oi?.toggle(!0),this._isDraggable=o,window.removeEventListener("pointerup",p),window.removeEventListener("blur",p),window.removeEventListener("pointermove",s,r),this.parent.div.style.cursor=h,this.div.style.cursor=u,this.#ks(a,l,c,d)};window.addEventListener("pointerup",p),window.addEventListener("blur",p)}#ks(t,e,i,s){const n=this.x,o=this.y,r=this.width,a=this.height;n===t&&o===e&&r===i&&a===s||this.addCommands({cmd:()=>{this.width=r,this.height=a,this.x=n,this.y=o;const[t,e]=this.parentDimensions;this.setDims(t*r,e*a),this.fixAndSetPosition()},undo:()=>{this.width=i,this.height=s,this.x=t,this.y=e;const[n,o]=this.parentDimensions;this.setDims(n*i,o*s),this.fixAndSetPosition()},mustExec:!0})}#ws(t,e){const[i,s]=this.parentDimensions,n=this.x,o=this.y,r=this.width,a=this.height,c=l.MIN_SIZE/i,d=l.MIN_SIZE/s,h=t=>Math.round(1e4*t)/1e4,u=this.#bs(this.rotation),p=(t,e)=>[u[0]*t+u[2]*e,u[1]*t+u[3]*e],g=this.#bs(360-this.rotation);let m,f,b=!1,v=!1;switch(t){case"topLeft":b=!0,m=(t,e)=>[0,0],f=(t,e)=>[t,e];break;case"topMiddle":m=(t,e)=>[t/2,0],f=(t,e)=>[t/2,e];break;case"topRight":b=!0,m=(t,e)=>[t,0],f=(t,e)=>[0,e];break;case"middleRight":v=!0,m=(t,e)=>[t,e/2],f=(t,e)=>[0,e/2];break;case"bottomRight":b=!0,m=(t,e)=>[t,e],f=(t,e)=>[0,0];break;case"bottomMiddle":m=(t,e)=>[t/2,e],f=(t,e)=>[t/2,0];break;case"bottomLeft":b=!0,m=(t,e)=>[0,e],f=(t,e)=>[t,0];break;case"middleLeft":v=!0,m=(t,e)=>[0,e/2],f=(t,e)=>[t,e/2]}const y=m(r,a),w=f(r,a);let k=p(...w);const x=h(n+k[0]),E=h(o+k[1]);let C=1,A=1,[S,T]=this.screenToPageTranslation(e.movementX,e.movementY);var _,M;if([S,T]=(_=S/i,M=T/s,[g[0]*_+g[2]*M,g[1]*_+g[3]*M]),b){const t=Math.hypot(r,a);C=A=Math.max(Math.min(Math.hypot(w[0]-y[0]-S,w[1]-y[1]-T)/t,1/r,1/a),c/r,d/a)}else v?C=Math.max(c,Math.min(1,Math.abs(w[0]-y[0]-S)))/r:A=Math.max(d,Math.min(1,Math.abs(w[1]-y[1]-T)))/a;const I=h(r*C),B=h(a*A);k=p(...f(I,B));const L=x-k[0],P=E-k[1];this.width=I,this.height=B,this.x=L,this.y=P,this.setDims(i*I,s*B),this.fixAndSetPosition()}altTextFinish(){this.#Oi?.finish()}async addEditToolbar(){return this.#ns||this.#ls||(this.#ns=new a(this),this.div.append(this.#ns.render()),this.#Oi&&this.#ns.addAltTextButton(await this.#Oi.render())),this.#ns}removeEditToolbar(){this.#ns&&(this.#ns.remove(),this.#ns=null,this.#Oi?.destroy())}getClientDimensions(){return this.div.getBoundingClientRect()}async addAltTextButton(){this.#Oi||(r.initialize(l._l10nPromise),this.#Oi=new r(this),await this.addEditToolbar())}get altTextData(){return this.#Oi?.data}set altTextData(t){this.#Oi&&(this.#Oi.data=t)}render(){this.div=document.createElement("div"),this.div.setAttribute("data-editor-rotation",(360-this.rotation)%360),this.div.className=this.name,this.div.setAttribute("id",this.id),this.div.setAttribute("tabIndex",0),this.setInForeground(),this.div.addEventListener("focusin",this.#is),this.div.addEventListener("focusout",this.#ss);const[t,e]=this.parentDimensions;this.parentRotation%180!=0&&(this.div.style.maxWidth=`${(100*e/t).toFixed(2)}%`,this.div.style.maxHeight=`${(100*t/e).toFixed(2)}%`);const[i,n]=this.getInitialTranslation();return this.translate(i,n),(0,s.bindEvents)(this,this.div,["pointerdown"]),this.div}pointerdown(t){const{isMac:e}=n.FeatureTest.platform;0!==t.button||t.ctrlKey&&e?t.preventDefault():(this.#rs=!0,this._isDraggable?this.#xs(t):this.#Es(t))}#Es(t){const{isMac:e}=n.FeatureTest.platform;t.ctrlKey&&!e||t.shiftKey||t.metaKey&&e?this.parent.toggleSelected(this):this.parent.setSelected(this)}#xs(t){const e=this._uiManager.isSelected(this);let i,s;this._uiManager.setUpDragSession(),e&&(i={passive:!0,capture:!0},s=t=>{const[e,i]=this.screenToPageTranslation(t.movementX,t.movementY);this._uiManager.dragSelectedEditors(e,i)},window.addEventListener("pointermove",s,i));const n=()=>{window.removeEventListener("pointerup",n),window.removeEventListener("blur",n),e&&window.removeEventListener("pointermove",s,i),this.#rs=!1,this._uiManager.endDragSession()||this.#Es(t)};window.addEventListener("pointerup",n),window.addEventListener("blur",n)}moveInDOM(){this.#ds&&clearTimeout(this.#ds),this.#ds=setTimeout((()=>{this.#ds=null,this.parent?.moveEditorInDOM(this)}),0)}_setParentAndPosition(t,e,i){t.changeParent(this),this.x=e,this.y=i,this.fixAndSetPosition()}getRect(t,e,i=this.rotation){const s=this.parentScale,[n,o]=this.pageDimensions,[r,a]=this.pageTranslation,l=t/s,c=e/s,d=this.x*n,h=this.y*o,u=this.width*n,p=this.height*o;switch(i){case 0:return[d+l+r,o-h-c-p+a,d+l+u+r,o-h-c+a];case 90:return[d+c+r,o-h+l+a,d+c+p+r,o-h+l+u+a];case 180:return[d-l-u+r,o-h+c+a,d-l+r,o-h+c+p+a];case 270:return[d-c-p+r,o-h-l-u+a,d-c+r,o-h-l+a];default:throw new Error("Invalid rotation")}}getRectInCurrentCoords(t,e){const[i,s,n,o]=t,r=n-i,a=o-s;switch(this.rotation){case 0:return[i,e-o,r,a];case 90:return[i,e-s,a,r];case 180:return[n,e-s,r,a];case 270:return[n,e-o,a,r];default:throw new Error("Invalid rotation")}}onceAdded(){}isEmpty(){return!1}enableEditMode(){this.#ls=!0}disableEditMode(){this.#ls=!1}isInEditMode(){return this.#ls}shouldGetKeyboardEvents(){return this.#cs}needsToBeRebuilt(){return this.div&&!this.isAttachedToDOM}rebuild(){this.div?.addEventListener("focusin",this.#is),this.div?.addEventListener("focusout",this.#ss)}rotate(t){}serialize(t=!1,e=null){(0,n.unreachable)("An editor must be serializable")}static deserialize(t,e,i){const s=new this.prototype.constructor({parent:e,id:e.getNextId(),uiManager:i});s.rotation=t.rotation;const[n,o]=s.pageDimensions,[r,a,l,c]=s.getRectInCurrentCoords(t.rect,o);return s.x=r/n,s.y=a/o,s.width=l/n,s.height=c/o,s}remove(){this.div.removeEventListener("focusin",this.#is),this.div.removeEventListener("focusout",this.#ss),this.isEmpty()||this.commit(),this.parent?this.parent.remove(this):this._uiManager.removeEditor(this),this.#ds&&(clearTimeout(this.#ds),this.#ds=null),this.#ps(),this.removeEditToolbar()}get isResizable(){return!1}makeResizable(){this.isResizable&&(this.#vs(),this.#ts.classList.remove("hidden"),(0,s.bindEvents)(this,this.div,["keydown"]))}get toolbarPosition(){return null}keydown(t){if(!this.isResizable||t.target!==this.div||"Enter"!==t.key)return;this._uiManager.setSelected(this),this.#es={savedX:this.x,savedY:this.y,savedWidth:this.width,savedHeight:this.height};const e=this.#ts.children;if(!this.#Qi){this.#Qi=Array.from(e);const t=this.#Cs.bind(this),i=this.#As.bind(this);for(const e of this.#Qi){const s=e.getAttribute("data-resizer-name");e.setAttribute("role","spinbutton"),e.addEventListener("keydown",t),e.addEventListener("blur",i),e.addEventListener("focus",this.#Ss.bind(this,s)),l._l10nPromise.get(`pdfjs-editor-resizer-label-${s}`).then((t=>e.setAttribute("aria-label",t)))}}const i=this.#Qi[0];let s=0;for(const t of e){if(t===i)break;s++}const n=(360-this.rotation+this.parentRotation)%360/90*(this.#Qi.length/4);if(n!==s){if(n<s)for(let t=0;t<s-n;t++)this.#ts.append(this.#ts.firstChild);else if(n>s)for(let t=0;t<n-s;t++)this.#ts.firstChild.before(this.#ts.lastChild);let t=0;for(const i of e){const e=this.#Qi[t++].getAttribute("data-resizer-name");l._l10nPromise.get(`pdfjs-editor-resizer-label-${e}`).then((t=>i.setAttribute("aria-label",t)))}}this.#Ts(0),this.#cs=!0,this.#ts.firstChild.focus({focusVisible:!0}),t.preventDefault(),t.stopImmediatePropagation()}#Cs(t){l._resizerKeyboardManager.exec(this,t)}#As(t){this.#cs&&t.relatedTarget?.parentNode!==this.#ts&&this.#ps()}#Ss(t){this.#os=this.#cs?t:""}#Ts(t){if(this.#Qi)for(const e of this.#Qi)e.tabIndex=t}_resizeWithKeyboard(t,e){this.#cs&&this.#ws(this.#os,{movementX:t,movementY:e})}#ps(){if(this.#cs=!1,this.#Ts(-1),this.#es){const{savedX:t,savedY:e,savedWidth:i,savedHeight:s}=this.#es;this.#ks(t,e,i,s),this.#es=null}}_stopResizingWithKeyboard(){this.#ps(),this.div.focus()}select(){this.makeResizable(),this.div?.classList.add("selectedEditor"),this.#ns?this.#ns?.show():this.addEditToolbar().then((()=>{this.div?.classList.contains("selectedEditor")&&this.#ns?.show()}))}unselect(){this.#ts?.classList.add("hidden"),this.div?.classList.remove("selectedEditor"),this.div?.contains(document.activeElement)&&this._uiManager.currentLayer.div.focus(),this.#ns?.hide()}updateParams(t,e){}disableEditing(){}enableEditing(){}enterInEditMode(){}getImageForAltText(){return null}get contentDiv(){return this.div}get isEditing(){return this.#as}set isEditing(t){this.#as=t,this.parent&&(t?(this.parent.setSelected(this),this.parent.setActiveEditor(this)):this.parent.setActiveEditor(null))}setAspectRatio(t,e){this.#Zi=!0;const i=t/e,{style:s}=this.div;s.aspectRatio=i,s.height="auto"}static get MIN_SIZE(){return 16}static canCreateNewEmptyEditor(){return!0}}class c extends l{constructor(t){super(t),this.annotationElementId=t.annotationElementId,this.deleted=!0}serialize(){return{id:this.annotationElementId,deleted:!0,pageIndex:this.pageIndex}}}},405:(t,e,i)=>{i.d(e,{Outliner:()=>s});class s{#_s;#Ms=[];#Is=[];constructor(t,e=0,i=0,s=!0){let n=1/0,o=-1/0,r=1/0,a=-1/0;const l=10**-4;for(const{x:i,y:s,width:c,height:d}of t){const t=Math.floor((i-e)/l)*l,h=Math.ceil((i+c+e)/l)*l,u=Math.floor((s-e)/l)*l,p=Math.ceil((s+d+e)/l)*l,g=[t,u,p,!0],m=[h,u,p,!1];this.#Ms.push(g,m),n=Math.min(n,t),o=Math.max(o,h),r=Math.min(r,u),a=Math.max(a,p)}const c=o-n+2*i,d=a-r+2*i,h=n-i,u=r-i,p=this.#Ms.at(s?-1:-2),g=[p[0],p[2]];for(const t of this.#Ms){const[e,i,s]=t;t[0]=(e-h)/c,t[1]=(i-u)/d,t[2]=(s-u)/d}this.#_s={x:h,y:u,width:c,height:d,lastPoint:g}}getOutlines(){this.#Ms.sort(((t,e)=>t[0]-e[0]||t[1]-e[1]||t[2]-e[2]));const t=[];for(const e of this.#Ms)e[3]?(t.push(...this.#Bs(e)),this.#Ls(e)):(this.#Ps(e),t.push(...this.#Bs(e)));return this.#Rs(t)}#Rs(t){const e=[],i=new Set;for(const i of t){const[t,s,n]=i;e.push([t,s,i],[t,n,i])}e.sort(((t,e)=>t[1]-e[1]||t[0]-e[0]));for(let t=0,s=e.length;t<s;t+=2){const s=e[t][2],n=e[t+1][2];s.push(n),n.push(s),i.add(s),i.add(n)}const s=[];let n;for(;i.size>0;){const t=i.values().next().value;let[e,o,r,a,l]=t;i.delete(t);let c=e,d=o;for(n=[e,r],s.push(n);;){let t;if(i.has(a))t=a;else{if(!i.has(l))break;t=l}i.delete(t),[e,o,r,a,l]=t,c!==e&&(n.push(c,d,e,d===o?o:r),c=e),d=d===o?r:o}n.push(c,d)}return{outlines:s,box:this.#_s}}#Ds(t){const e=this.#Is;let i=0,s=e.length-1;for(;i<=s;){const n=i+s>>1,o=e[n][0];if(o===t)return n;o<t?i=n+1:s=n-1}return s+1}#Ls([,t,e]){const i=this.#Ds(t);this.#Is.splice(i,0,[t,e])}#Ps([,t,e]){const i=this.#Ds(t);for(let s=i;s<this.#Is.length;s++){const[i,n]=this.#Is[s];if(i!==t)break;if(i===t&&n===e)return void this.#Is.splice(s,1)}for(let s=i-1;s>=0;s--){const[i,n]=this.#Is[s];if(i!==t)break;if(i===t&&n===e)return void this.#Is.splice(s,1)}}#Bs(t){const[e,i,s]=t,n=[[e,i,s]],o=this.#Ds(s);for(let t=0;t<o;t++){const[i,s]=this.#Is[t];for(let t=0,o=n.length;t<o;t++){const[,r,a]=n[t];if(!(s<=r||a<=i))if(r>=i)if(a>s)n[t][1]=s;else{if(1===o)return[];n.splice(t,1),t--,o--}else n[t][2]=i,a>s&&n.push([e,s,a])}}return n}}},812:(t,e,i)=>{i.d(e,{AnnotationEditorUIManager:()=>u,ColorManager:()=>h,KeyboardManager:()=>d,bindEvents:()=>o,opacityToHex:()=>r});var s=i(266),n=i(473);function o(t,e,i){for(const s of i)e.addEventListener(s,t[s].bind(t))}function r(t){return Math.round(Math.min(255,Math.max(1,255*t))).toString(16).padStart(2,"0")}class a{#ft=0;getId(){return`${s.AnnotationEditorPrefix}${this.#ft++}`}}class l{#Os=(0,s.getUuid)();#ft=0;#bt=null;static get _isSVGFittingCanvas(){const t=new OffscreenCanvas(1,3).getContext("2d"),e=new Image;e.src='data:image/svg+xml;charset=UTF-8,<svg viewBox="0 0 1 1" width="1" height="1" xmlns="http://www.w3.org/2000/svg"><rect width="1" height="1" style="fill:red;"/></svg>';const i=e.decode().then((()=>(t.drawImage(e,0,0,1,1,0,0,1,3),0===new Uint32Array(t.getImageData(0,0,1,1).data.buffer)[0])));return(0,s.shadow)(this,"_isSVGFittingCanvas",i)}async#Fs(t,e){this.#bt||=new Map;let i=this.#bt.get(t);if(null===i)return null;if(i?.bitmap)return i.refCounter+=1,i;try{let t;if(i||={bitmap:null,id:`image_${this.#Os}_${this.#ft++}`,refCounter:0,isSvg:!1},"string"==typeof e?(i.url=e,t=await(0,n.fetchData)(e,"blob")):t=i.file=e,"image/svg+xml"===t.type){const e=l._isSVGFittingCanvas,s=new FileReader,n=new Image,o=new Promise(((t,o)=>{n.onload=()=>{i.bitmap=n,i.isSvg=!0,t()},s.onload=async()=>{const t=i.svgUrl=s.result;n.src=await e?`${t}#svgView(preserveAspectRatio(none))`:t},n.onerror=s.onerror=o}));s.readAsDataURL(t),await o}else i.bitmap=await createImageBitmap(t);i.refCounter=1}catch(t){console.error(t),i=null}return this.#bt.set(t,i),i&&this.#bt.set(i.id,i),i}async getFromFile(t){const{lastModified:e,name:i,size:s,type:n}=t;return this.#Fs(`${e}_${i}_${s}_${n}`,t)}async getFromUrl(t){return this.#Fs(t,t)}async getFromId(t){this.#bt||=new Map;const e=this.#bt.get(t);return e?e.bitmap?(e.refCounter+=1,e):e.file?this.getFromFile(e.file):this.getFromUrl(e.url):null}getSvgUrl(t){const e=this.#bt.get(t);return e?.isSvg?e.svgUrl:null}deleteId(t){this.#bt||=new Map;const e=this.#bt.get(t);e&&(e.refCounter-=1,0===e.refCounter&&(e.bitmap=null))}isValidId(t){return t.startsWith(`image_${this.#Os}_`)}}class c{#Ns=[];#Hs=!1;#zs;#Us=-1;constructor(t=128){this.#zs=t}add({cmd:t,undo:e,mustExec:i,type:s=NaN,overwriteIfSameType:n=!1,keepUndo:o=!1}){if(i&&t(),this.#Hs)return;const r={cmd:t,undo:e,type:s};if(-1===this.#Us)return this.#Ns.length>0&&(this.#Ns.length=0),this.#Us=0,void this.#Ns.push(r);if(n&&this.#Ns[this.#Us].type===s)return o&&(r.undo=this.#Ns[this.#Us].undo),void(this.#Ns[this.#Us]=r);const a=this.#Us+1;a===this.#zs?this.#Ns.splice(0,1):(this.#Us=a,a<this.#Ns.length&&this.#Ns.splice(a)),this.#Ns.push(r)}undo(){-1!==this.#Us&&(this.#Hs=!0,this.#Ns[this.#Us].undo(),this.#Hs=!1,this.#Us-=1)}redo(){this.#Us<this.#Ns.length-1&&(this.#Us+=1,this.#Hs=!0,this.#Ns[this.#Us].cmd(),this.#Hs=!1)}hasSomethingToUndo(){return-1!==this.#Us}hasSomethingToRedo(){return this.#Us<this.#Ns.length-1}destroy(){this.#Ns=null}}class d{constructor(t){this.buffer=[],this.callbacks=new Map,this.allKeys=new Set;const{isMac:e}=s.FeatureTest.platform;for(const[i,s,n={}]of t)for(const t of i){const i=t.startsWith("mac+");e&&i?(this.callbacks.set(t.slice(4),{callback:s,options:n}),this.allKeys.add(t.split("+").at(-1))):e||i||(this.callbacks.set(t,{callback:s,options:n}),this.allKeys.add(t.split("+").at(-1)))}}#js(t){t.altKey&&this.buffer.push("alt"),t.ctrlKey&&this.buffer.push("ctrl"),t.metaKey&&this.buffer.push("meta"),t.shiftKey&&this.buffer.push("shift"),this.buffer.push(t.key);const e=this.buffer.join("+");return this.buffer.length=0,e}exec(t,e){if(!this.allKeys.has(e.key))return;const i=this.callbacks.get(this.#js(e));if(!i)return;const{callback:s,options:{bubbles:n=!1,args:o=[],checker:r=null}}=i;r&&!r(t,e)||(s.bind(t,...o,e)(),n||(e.stopPropagation(),e.preventDefault()))}}class h{static _colorsMapping=new Map([["CanvasText",[0,0,0]],["Canvas",[255,255,255]]]);get _colors(){const t=new Map([["CanvasText",null],["Canvas",null]]);return(0,n.getColorValues)(t),(0,s.shadow)(this,"_colors",t)}convert(t){const e=(0,n.getRGB)(t);if(!window.matchMedia("(forced-colors: active)").matches)return e;for(const[t,i]of this._colors)if(i.every(((t,i)=>t===e[i])))return h._colorsMapping.get(t);return e}getHexCode(t){const e=this._colors.get(t);return e?s.Util.makeHexColor(...e):t}}class u{#$s=null;#Ws=new Map;#Vs=new Map;#qs=null;#Gs=null;#Ks=new c;#Xs=0;#Ys=new Set;#Js=null;#wi=null;#Qs=new Set;#Zs=null;#tn=null;#en=null;#in=new a;#sn=!1;#nn=!1;#on=null;#rn=null;#an=s.AnnotationEditorType.NONE;#ln=new Set;#cn=null;#dn=this.blur.bind(this);#hn=this.focus.bind(this);#un=this.copy.bind(this);#pn=this.cut.bind(this);#gn=this.paste.bind(this);#mn=this.keydown.bind(this);#fn=this.onEditingAction.bind(this);#bn=this.onPageChanging.bind(this);#vn=this.onScaleChanging.bind(this);#yn=this.onRotationChanging.bind(this);#wn={isEditing:!1,isEmpty:!0,hasSomethingToUndo:!1,hasSomethingToRedo:!1,hasSelectedEditor:!1};#kn=[0,0];#xn=null;#p=null;#En=null;static TRANSLATE_SMALL=1;static TRANSLATE_BIG=10;static get _keyboardManager(){const t=u.prototype,e=t=>t.#p.contains(document.activeElement)&&"BUTTON"!==document.activeElement.tagName&&t.hasSomethingToControl(),i=(t,{target:e})=>{if(e instanceof HTMLInputElement){const{type:t}=e;return"text"!==t&&"number"!==t}return!0},n=this.TRANSLATE_SMALL,o=this.TRANSLATE_BIG;return(0,s.shadow)(this,"_keyboardManager",new d([[["ctrl+a","mac+meta+a"],t.selectAll,{checker:i}],[["ctrl+z","mac+meta+z"],t.undo,{checker:i}],[["ctrl+y","ctrl+shift+z","mac+meta+shift+z","ctrl+shift+Z","mac+meta+shift+Z"],t.redo,{checker:i}],[["Backspace","alt+Backspace","ctrl+Backspace","shift+Backspace","mac+Backspace","mac+alt+Backspace","mac+ctrl+Backspace","Delete","ctrl+Delete","shift+Delete","mac+Delete"],t.delete,{checker:i}],[["Enter","mac+Enter"],t.addNewEditorFromKeyboard,{checker:(t,{target:e})=>!(e instanceof HTMLButtonElement)&&t.#p.contains(e)&&!t.isEnterHandled}],[[" ","mac+ "],t.addNewEditorFromKeyboard,{checker:t=>t.#p.contains(document.activeElement)}],[["Escape","mac+Escape"],t.unselectAll],[["ArrowLeft","mac+ArrowLeft"],t.translateSelectedEditors,{args:[-n,0],checker:e}],[["ctrl+ArrowLeft","mac+shift+ArrowLeft"],t.translateSelectedEditors,{args:[-o,0],checker:e}],[["ArrowRight","mac+ArrowRight"],t.translateSelectedEditors,{args:[n,0],checker:e}],[["ctrl+ArrowRight","mac+shift+ArrowRight"],t.translateSelectedEditors,{args:[o,0],checker:e}],[["ArrowUp","mac+ArrowUp"],t.translateSelectedEditors,{args:[0,-n],checker:e}],[["ctrl+ArrowUp","mac+shift+ArrowUp"],t.translateSelectedEditors,{args:[0,-o],checker:e}],[["ArrowDown","mac+ArrowDown"],t.translateSelectedEditors,{args:[0,n],checker:e}],[["ctrl+ArrowDown","mac+shift+ArrowDown"],t.translateSelectedEditors,{args:[0,o],checker:e}]]))}constructor(t,e,i,s,o,r,a){this.#p=t,this.#En=e,this.#qs=i,this._eventBus=s,this._eventBus._on("editingaction",this.#fn),this._eventBus._on("pagechanging",this.#bn),this._eventBus._on("scalechanging",this.#vn),this._eventBus._on("rotationchanging",this.#yn),this.#Gs=o.annotationStorage,this.#Zs=o.filterFactory,this.#cn=r,this.#en=a||null,this.viewParameters={realScale:n.PixelsPerInch.PDF_TO_CSS_UNITS,rotation:0}}destroy(){this.#Cn(),this.#An(),this._eventBus._off("editingaction",this.#fn),this._eventBus._off("pagechanging",this.#bn),this._eventBus._off("scalechanging",this.#vn),this._eventBus._off("rotationchanging",this.#yn);for(const t of this.#Vs.values())t.destroy();this.#Vs.clear(),this.#Ws.clear(),this.#Qs.clear(),this.#$s=null,this.#ln.clear(),this.#Ks.destroy(),this.#qs?.destroy(),this.#tn&&(clearTimeout(this.#tn),this.#tn=null),this.#xn&&(clearTimeout(this.#xn),this.#xn=null)}get hcmFilter(){return(0,s.shadow)(this,"hcmFilter",this.#cn?this.#Zs.addHCMFilter(this.#cn.foreground,this.#cn.background):"none")}get direction(){return(0,s.shadow)(this,"direction",getComputedStyle(this.#p).direction)}get highlightColors(){return(0,s.shadow)(this,"highlightColors",this.#en?new Map(this.#en.split(",").map((t=>t.split("=").map((t=>t.trim()))))):null)}setMainHighlightColorPicker(t){this.#rn=t}editAltText(t){this.#qs?.editAltText(this,t)}onPageChanging({pageNumber:t}){this.#Xs=t-1}focusMainContainer(){this.#p.focus()}findParent(t,e){for(const i of this.#Vs.values()){const{x:s,y:n,width:o,height:r}=i.div.getBoundingClientRect();if(t>=s&&t<=s+o&&e>=n&&e<=n+r)return i}return null}disableUserSelect(t=!1){this.#En.classList.toggle("noUserSelect",t)}addShouldRescale(t){this.#Qs.add(t)}removeShouldRescale(t){this.#Qs.delete(t)}onScaleChanging({scale:t}){this.commitOrRemove(),this.viewParameters.realScale=t*n.PixelsPerInch.PDF_TO_CSS_UNITS;for(const t of this.#Qs)t.onScaleChanging()}onRotationChanging({pagesRotation:t}){this.commitOrRemove(),this.viewParameters.rotation=t}addToAnnotationStorage(t){t.isEmpty()||!this.#Gs||this.#Gs.has(t.id)||this.#Gs.setValue(t.id,t)}#Sn(){window.addEventListener("focus",this.#hn),window.addEventListener("blur",this.#dn)}#An(){window.removeEventListener("focus",this.#hn),window.removeEventListener("blur",this.#dn)}blur(){if(!this.hasSelection)return;const{activeElement:t}=document;for(const e of this.#ln)if(e.div.contains(t)){this.#on=[e,t],e._focusEventsAllowed=!1;break}}focus(){if(!this.#on)return;const[t,e]=this.#on;this.#on=null,e.addEventListener("focusin",(()=>{t._focusEventsAllowed=!0}),{once:!0}),e.focus()}#Tn(){window.addEventListener("keydown",this.#mn)}#Cn(){window.removeEventListener("keydown",this.#mn)}#_n(){document.addEventListener("copy",this.#un),document.addEventListener("cut",this.#pn),document.addEventListener("paste",this.#gn)}#Mn(){document.removeEventListener("copy",this.#un),document.removeEventListener("cut",this.#pn),document.removeEventListener("paste",this.#gn)}addEditListeners(){this.#Tn(),this.#_n()}removeEditListeners(){this.#Cn(),this.#Mn()}copy(t){if(t.preventDefault(),this.#$s?.commitOrRemove(),!this.hasSelection)return;const e=[];for(const t of this.#ln){const i=t.serialize(!0);i&&e.push(i)}0!==e.length&&t.clipboardData.setData("application/pdfjs",JSON.stringify(e))}cut(t){this.copy(t),this.delete()}paste(t){t.preventDefault();const{clipboardData:e}=t;for(const t of e.items)for(const e of this.#wi)if(e.isHandlingMimeForPasting(t.type))return void e.paste(t,this.currentLayer);let i=e.getData("application/pdfjs");if(!i)return;try{i=JSON.parse(i)}catch(t){return void(0,s.warn)(`paste: "${t.message}".`)}if(!Array.isArray(i))return;this.unselectAll();const n=this.currentLayer;try{const t=[];for(const e of i){const i=n.deserialize(e);if(!i)return;t.push(i)}const e=()=>{for(const e of t)this.#In(e);this.#Bn(t)},s=()=>{for(const e of t)e.remove()};this.addCommands({cmd:e,undo:s,mustExec:!0})}catch(t){(0,s.warn)(`paste: "${t.message}".`)}}keydown(t){this.isEditorHandlingKeyboard||u._keyboardManager.exec(this,t)}onEditingAction(t){["undo","redo","delete","selectAll"].includes(t.name)&&this[t.name]()}#Ln(t){Object.entries(t).some((([t,e])=>this.#wn[t]!==e))&&this._eventBus.dispatch("annotationeditorstateschanged",{source:this,details:Object.assign(this.#wn,t)})}#Pn(t){this._eventBus.dispatch("annotationeditorparamschanged",{source:this,details:t})}setEditingState(t){t?(this.#Sn(),this.#Tn(),this.#_n(),this.#Ln({isEditing:this.#an!==s.AnnotationEditorType.NONE,isEmpty:this.#Rn(),hasSomethingToUndo:this.#Ks.hasSomethingToUndo(),hasSomethingToRedo:this.#Ks.hasSomethingToRedo(),hasSelectedEditor:!1})):(this.#An(),this.#Cn(),this.#Mn(),this.#Ln({isEditing:!1}),this.disableUserSelect(!1))}registerEditorTypes(t){if(!this.#wi){this.#wi=t;for(const t of this.#wi)this.#Pn(t.defaultPropertiesToUpdate)}}getId(){return this.#in.getId()}get currentLayer(){return this.#Vs.get(this.#Xs)}getLayer(t){return this.#Vs.get(t)}get currentPageIndex(){return this.#Xs}addLayer(t){this.#Vs.set(t.pageIndex,t),this.#sn?t.enable():t.disable()}removeLayer(t){this.#Vs.delete(t.pageIndex)}updateMode(t,e=null,i=!1){if(this.#an!==t){if(this.#an=t,t===s.AnnotationEditorType.NONE)return this.setEditingState(!1),void this.#Dn();this.setEditingState(!0),this.#On(),this.unselectAll();for(const e of this.#Vs.values())e.updateMode(t);if(e||!i){if(e)for(const t of this.#Ws.values())if(t.annotationElementId===e){this.setSelected(t),t.enterInEditMode();break}}else this.addNewEditorFromKeyboard()}}addNewEditorFromKeyboard(){this.currentLayer.canCreateNewEmptyEditor()&&this.currentLayer.addNewEditor()}updateToolbar(t){t!==this.#an&&this._eventBus.dispatch("switchannotationeditormode",{source:this,mode:t})}updateParams(t,e){if(this.#wi){switch(t){case s.AnnotationEditorParamsType.CREATE:return void this.currentLayer.addNewEditor();case s.AnnotationEditorParamsType.HIGHLIGHT_DEFAULT_COLOR:this.#rn?.updateColor(e)}for(const i of this.#ln)i.updateParams(t,e);for(const i of this.#wi)i.updateDefaultParams(t,e)}}enableWaiting(t=!1){if(this.#nn!==t){this.#nn=t;for(const e of this.#Vs.values())t?e.disableClick():e.enableClick(),e.div.classList.toggle("waiting",t)}}#On(){if(!this.#sn){this.#sn=!0;for(const t of this.#Vs.values())t.enable()}}#Dn(){if(this.unselectAll(),this.#sn){this.#sn=!1;for(const t of this.#Vs.values())t.disable()}}getEditors(t){const e=[];for(const i of this.#Ws.values())i.pageIndex===t&&e.push(i);return e}getEditor(t){return this.#Ws.get(t)}addEditor(t){this.#Ws.set(t.id,t)}removeEditor(t){t.div.contains(document.activeElement)&&(this.#tn&&clearTimeout(this.#tn),this.#tn=setTimeout((()=>{this.focusMainContainer(),this.#tn=null}),0)),this.#Ws.delete(t.id),this.unselect(t),t.annotationElementId&&this.#Ys.has(t.annotationElementId)||this.#Gs?.remove(t.id)}addDeletedAnnotationElement(t){this.#Ys.add(t.annotationElementId),t.deleted=!0}isDeletedAnnotationElement(t){return this.#Ys.has(t)}removeDeletedAnnotationElement(t){this.#Ys.delete(t.annotationElementId),t.deleted=!1}#In(t){const e=this.#Vs.get(t.pageIndex);e?e.addOrRebuild(t):this.addEditor(t)}setActiveEditor(t){this.#$s!==t&&(this.#$s=t,t&&this.#Pn(t.propertiesToUpdate))}toggleSelected(t){if(this.#ln.has(t))return this.#ln.delete(t),t.unselect(),void this.#Ln({hasSelectedEditor:this.hasSelection});this.#ln.add(t),t.select(),this.#Pn(t.propertiesToUpdate),this.#Ln({hasSelectedEditor:!0})}setSelected(t){for(const e of this.#ln)e!==t&&e.unselect();this.#ln.clear(),this.#ln.add(t),t.select(),this.#Pn(t.propertiesToUpdate),this.#Ln({hasSelectedEditor:!0})}isSelected(t){return this.#ln.has(t)}get firstSelectedEditor(){return this.#ln.values().next().value}unselect(t){t.unselect(),this.#ln.delete(t),this.#Ln({hasSelectedEditor:this.hasSelection})}get hasSelection(){return 0!==this.#ln.size}get isEnterHandled(){return 1===this.#ln.size&&this.firstSelectedEditor.isEnterHandled}undo(){this.#Ks.undo(),this.#Ln({hasSomethingToUndo:this.#Ks.hasSomethingToUndo(),hasSomethingToRedo:!0,isEmpty:this.#Rn()})}redo(){this.#Ks.redo(),this.#Ln({hasSomethingToUndo:!0,hasSomethingToRedo:this.#Ks.hasSomethingToRedo(),isEmpty:this.#Rn()})}addCommands(t){this.#Ks.add(t),this.#Ln({hasSomethingToUndo:!0,hasSomethingToRedo:!1,isEmpty:this.#Rn()})}#Rn(){if(0===this.#Ws.size)return!0;if(1===this.#Ws.size)for(const t of this.#Ws.values())return t.isEmpty();return!1}delete(){if(this.commitOrRemove(),!this.hasSelection)return;const t=[...this.#ln];this.addCommands({cmd:()=>{for(const e of t)e.remove()},undo:()=>{for(const e of t)this.#In(e)},mustExec:!0})}commitOrRemove(){this.#$s?.commitOrRemove()}hasSomethingToControl(){return this.#$s||this.hasSelection}#Bn(t){this.#ln.clear();for(const e of t)e.isEmpty()||(this.#ln.add(e),e.select());this.#Ln({hasSelectedEditor:!0})}selectAll(){for(const t of this.#ln)t.commit();this.#Bn(this.#Ws.values())}unselectAll(){if((!this.#$s||(this.#$s.commitOrRemove(),this.#an===s.AnnotationEditorType.NONE))&&this.hasSelection){for(const t of this.#ln)t.unselect();this.#ln.clear(),this.#Ln({hasSelectedEditor:!1})}}translateSelectedEditors(t,e,i=!1){if(i||this.commitOrRemove(),!this.hasSelection)return;this.#kn[0]+=t,this.#kn[1]+=e;const[s,n]=this.#kn,o=[...this.#ln];this.#xn&&clearTimeout(this.#xn),this.#xn=setTimeout((()=>{this.#xn=null,this.#kn[0]=this.#kn[1]=0,this.addCommands({cmd:()=>{for(const t of o)this.#Ws.has(t.id)&&t.translateInPage(s,n)},undo:()=>{for(const t of o)this.#Ws.has(t.id)&&t.translateInPage(-s,-n)},mustExec:!1})}),1e3);for(const i of o)i.translateInPage(t,e)}setUpDragSession(){if(this.hasSelection){this.disableUserSelect(!0),this.#Js=new Map;for(const t of this.#ln)this.#Js.set(t,{savedX:t.x,savedY:t.y,savedPageIndex:t.pageIndex,newX:0,newY:0,newPageIndex:-1})}}endDragSession(){if(!this.#Js)return!1;this.disableUserSelect(!1);const t=this.#Js;this.#Js=null;let e=!1;for(const[{x:i,y:s,pageIndex:n},o]of t)o.newX=i,o.newY=s,o.newPageIndex=n,e||=i!==o.savedX||s!==o.savedY||n!==o.savedPageIndex;if(!e)return!1;const i=(t,e,i,s)=>{if(this.#Ws.has(t.id)){const n=this.#Vs.get(s);n?t._setParentAndPosition(n,e,i):(t.pageIndex=s,t.x=e,t.y=i)}};return this.addCommands({cmd:()=>{for(const[e,{newX:s,newY:n,newPageIndex:o}]of t)i(e,s,n,o)},undo:()=>{for(const[e,{savedX:s,savedY:n,savedPageIndex:o}]of t)i(e,s,n,o)},mustExec:!0}),!0}dragSelectedEditors(t,e){if(this.#Js)for(const i of this.#Js.keys())i.drag(t,e)}rebuild(t){if(null===t.parent){const e=this.getLayer(t.pageIndex);e?(e.changeParent(t),e.addOrRebuild(t)):(this.addEditor(t),this.addToAnnotationStorage(t),t.rebuild())}else t.parent.addOrRebuild(t)}get isEditorHandlingKeyboard(){return this.getActive()?.shouldGetKeyboardEvents()||1===this.#ln.size&&this.firstSelectedEditor.shouldGetKeyboardEvents()}isActive(t){return this.#$s===t}getActive(){return this.#$s}getMode(){return this.#an}get imageManager(){return(0,s.shadow)(this,"imageManager",new l)}}},171:(t,e,i)=>{i.d(e,{PDFFetchStream:()=>l});var s=i(266),n=i(253);function o(t,e,i){return{method:"GET",headers:t,signal:i.signal,mode:"cors",credentials:e?"include":"same-origin",redirect:"follow"}}function r(t){const e=new Headers;for(const i in t){const s=t[i];void 0!==s&&e.append(i,s)}return e}function a(t){return t instanceof Uint8Array?t.buffer:t instanceof ArrayBuffer?t:((0,s.warn)(`getArrayBuffer - unexpected data format: ${t}`),new Uint8Array(t).buffer)}class l{constructor(t){this.source=t,this.isHttp=/^https?:/i.test(t.url),this.httpHeaders=this.isHttp&&t.httpHeaders||{},this._fullRequestReader=null,this._rangeRequestReaders=[]}get _progressiveDataLength(){return this._fullRequestReader?._loaded??0}getFullReader(){return(0,s.assert)(!this._fullRequestReader,"PDFFetchStream.getFullReader can only be called once."),this._fullRequestReader=new c(this),this._fullRequestReader}getRangeReader(t,e){if(e<=this._progressiveDataLength)return null;const i=new d(this,t,e);return this._rangeRequestReaders.push(i),i}cancelAllRequests(t){this._fullRequestReader?.cancel(t);for(const e of this._rangeRequestReaders.slice(0))e.cancel(t)}}class c{constructor(t){this._stream=t,this._reader=null,this._loaded=0,this._filename=null;const e=t.source;this._withCredentials=e.withCredentials||!1,this._contentLength=e.length,this._headersCapability=new s.PromiseCapability,this._disableRange=e.disableRange||!1,this._rangeChunkSize=e.rangeChunkSize,this._rangeChunkSize||this._disableRange||(this._disableRange=!0),this._abortController=new AbortController,this._isStreamingSupported=!e.disableStream,this._isRangeSupported=!e.disableRange,this._headers=r(this._stream.httpHeaders);const i=e.url;fetch(i,o(this._headers,this._withCredentials,this._abortController)).then((t=>{if(!(0,n.validateResponseStatus)(t.status))throw(0,n.createResponseStatusError)(t.status,i);this._reader=t.body.getReader(),this._headersCapability.resolve();const e=e=>t.headers.get(e),{allowRangeRequests:o,suggestedLength:r}=(0,n.validateRangeRequestCapabilities)({getResponseHeader:e,isHttp:this._stream.isHttp,rangeChunkSize:this._rangeChunkSize,disableRange:this._disableRange});this._isRangeSupported=o,this._contentLength=r||this._contentLength,this._filename=(0,n.extractFilenameFromHeader)(e),!this._isStreamingSupported&&this._isRangeSupported&&this.cancel(new s.AbortException("Streaming is disabled."))})).catch(this._headersCapability.reject),this.onProgress=null}get headersReady(){return this._headersCapability.promise}get filename(){return this._filename}get contentLength(){return this._contentLength}get isRangeSupported(){return this._isRangeSupported}get isStreamingSupported(){return this._isStreamingSupported}async read(){await this._headersCapability.promise;const{value:t,done:e}=await this._reader.read();return e?{value:t,done:e}:(this._loaded+=t.byteLength,this.onProgress?.({loaded:this._loaded,total:this._contentLength}),{value:a(t),done:!1})}cancel(t){this._reader?.cancel(t),this._abortController.abort()}}class d{constructor(t,e,i){this._stream=t,this._reader=null,this._loaded=0;const a=t.source;this._withCredentials=a.withCredentials||!1,this._readCapability=new s.PromiseCapability,this._isStreamingSupported=!a.disableStream,this._abortController=new AbortController,this._headers=r(this._stream.httpHeaders),this._headers.append("Range",`bytes=${e}-${i-1}`);const l=a.url;fetch(l,o(this._headers,this._withCredentials,this._abortController)).then((t=>{if(!(0,n.validateResponseStatus)(t.status))throw(0,n.createResponseStatusError)(t.status,l);this._readCapability.resolve(),this._reader=t.body.getReader()})).catch(this._readCapability.reject),this.onProgress=null}get isStreamingSupported(){return this._isStreamingSupported}async read(){await this._readCapability.promise;const{value:t,done:e}=await this._reader.read();return e?{value:t,done:e}:(this._loaded+=t.byteLength,this.onProgress?.({loaded:this._loaded}),{value:a(t),done:!1})}cancel(t){this._reader?.cancel(t),this._abortController.abort()}}},742:(t,e,i)=>{i.d(e,{FontFaceObject:()=>o,FontLoader:()=>n});var s=i(266);class n{#Fn=new Set;constructor({ownerDocument:t=globalThis.document,styleElement:e=null}){this._document=t,this.nativeFontFaces=new Set,this.styleElement=null,this.loadingRequests=[],this.loadTestFontId=0}addNativeFontFace(t){this.nativeFontFaces.add(t),this._document.fonts.add(t)}removeNativeFontFace(t){this.nativeFontFaces.delete(t),this._document.fonts.delete(t)}insertRule(t){this.styleElement||(this.styleElement=this._document.createElement("style"),this._document.documentElement.getElementsByTagName("head")[0].append(this.styleElement));const e=this.styleElement.sheet;e.insertRule(t,e.cssRules.length)}clear(){for(const t of this.nativeFontFaces)this._document.fonts.delete(t);this.nativeFontFaces.clear(),this.#Fn.clear(),this.styleElement&&(this.styleElement.remove(),this.styleElement=null)}async loadSystemFont({systemFontInfo:t,_inspectFont:e}){if(t&&!this.#Fn.has(t.loadedName))if((0,s.assert)(!this.disableFontFace,"loadSystemFont shouldn't be called when `disableFontFace` is set."),this.isFontLoadingAPISupported){const{loadedName:i,src:n,style:o}=t,r=new FontFace(i,n,o);this.addNativeFontFace(r);try{await r.load(),this.#Fn.add(i),e?.(t)}catch{(0,s.warn)(`Cannot load system font: ${t.baseFontName}, installing it could help to improve PDF rendering.`),this.removeNativeFontFace(r)}}else(0,s.unreachable)("Not implemented: loadSystemFont without the Font Loading API.")}async bind(t){if(t.attached||t.missingFile&&!t.systemFontInfo)return;if(t.attached=!0,t.systemFontInfo)return void await this.loadSystemFont(t);if(this.isFontLoadingAPISupported){const e=t.createNativeFontFace();if(e){this.addNativeFontFace(e);try{await e.loaded}catch(i){throw(0,s.warn)(`Failed to load font '${e.family}': '${i}'.`),t.disableFontFace=!0,i}}return}const e=t.createFontFaceRule();if(e){if(this.insertRule(e),this.isSyncFontLoadingSupported)return;await new Promise((e=>{const i=this._queueLoadingCallback(e);this._prepareFontLoadEvent(t,i)}))}}get isFontLoadingAPISupported(){const t=!!this._document?.fonts;return(0,s.shadow)(this,"isFontLoadingAPISupported",t)}get isSyncFontLoadingSupported(){let t=!1;return(s.isNodeJS||"undefined"!=typeof navigator&&"string"==typeof navigator?.userAgent&&/Mozilla\/5.0.*?rv:\d+.*? Gecko/.test(navigator.userAgent))&&(t=!0),(0,s.shadow)(this,"isSyncFontLoadingSupported",t)}_queueLoadingCallback(t){const{loadingRequests:e}=this,i={done:!1,complete:function(){for((0,s.assert)(!i.done,"completeRequest() cannot be called twice."),i.done=!0;e.length>0&&e[0].done;){const t=e.shift();setTimeout(t.callback,0)}},callback:t};return e.push(i),i}get _loadTestFont(){const t=atob("T1RUTwALAIAAAwAwQ0ZGIDHtZg4AAAOYAAAAgUZGVE1lkzZwAAAEHAAAABxHREVGABQAFQAABDgAAAAeT1MvMlYNYwkAAAEgAAAAYGNtYXABDQLUAAACNAAAAUJoZWFk/xVFDQAAALwAAAA2aGhlYQdkA+oAAAD0AAAAJGhtdHgD6AAAAAAEWAAAAAZtYXhwAAJQAAAAARgAAAAGbmFtZVjmdH4AAAGAAAAAsXBvc3T/hgAzAAADeAAAACAAAQAAAAEAALZRFsRfDzz1AAsD6AAAAADOBOTLAAAAAM4KHDwAAAAAA+gDIQAAAAgAAgAAAAAAAAABAAADIQAAAFoD6AAAAAAD6AABAAAAAAAAAAAAAAAAAAAAAQAAUAAAAgAAAAQD6AH0AAUAAAKKArwAAACMAooCvAAAAeAAMQECAAACAAYJAAAAAAAAAAAAAQAAAAAAAAAAAAAAAFBmRWQAwAAuAC4DIP84AFoDIQAAAAAAAQAAAAAAAAAAACAAIAABAAAADgCuAAEAAAAAAAAAAQAAAAEAAAAAAAEAAQAAAAEAAAAAAAIAAQAAAAEAAAAAAAMAAQAAAAEAAAAAAAQAAQAAAAEAAAAAAAUAAQAAAAEAAAAAAAYAAQAAAAMAAQQJAAAAAgABAAMAAQQJAAEAAgABAAMAAQQJAAIAAgABAAMAAQQJAAMAAgABAAMAAQQJAAQAAgABAAMAAQQJAAUAAgABAAMAAQQJAAYAAgABWABYAAAAAAAAAwAAAAMAAAAcAAEAAAAAADwAAwABAAAAHAAEACAAAAAEAAQAAQAAAC7//wAAAC7////TAAEAAAAAAAABBgAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAD/gwAyAAAAAQAAAAAAAAAAAAAAAAAAAAABAAQEAAEBAQJYAAEBASH4DwD4GwHEAvgcA/gXBIwMAYuL+nz5tQXkD5j3CBLnEQACAQEBIVhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYAAABAQAADwACAQEEE/t3Dov6fAH6fAT+fPp8+nwHDosMCvm1Cvm1DAz6fBQAAAAAAAABAAAAAMmJbzEAAAAAzgTjFQAAAADOBOQpAAEAAAAAAAAADAAUAAQAAAABAAAAAgABAAAAAAAAAAAD6AAAAAAAAA==");return(0,s.shadow)(this,"_loadTestFont",t)}_prepareFontLoadEvent(t,e){function i(t,e){return t.charCodeAt(e)<<24|t.charCodeAt(e+1)<<16|t.charCodeAt(e+2)<<8|255&t.charCodeAt(e+3)}function n(t,e,i,s){return t.substring(0,e)+s+t.substring(e+i)}let o,r;const a=this._document.createElement("canvas");a.width=1,a.height=1;const l=a.getContext("2d");let c=0;const d=`lt${Date.now()}${this.loadTestFontId++}`;let h=this._loadTestFont;h=n(h,976,d.length,d);const u=1482184792;let p=i(h,16);for(o=0,r=d.length-3;o<r;o+=4)p=p-u+i(d,o)|0;o<d.length&&(p=p-u+i(d+"XXX",o)|0),h=n(h,16,4,(0,s.string32)(p));const g=`@font-face {font-family:"${d}";src:url(data:font/opentype;base64,${btoa(h)});}`;this.insertRule(g);const m=this._document.createElement("div");m.style.visibility="hidden",m.style.width=m.style.height="10px",m.style.position="absolute",m.style.top=m.style.left="0px";for(const e of[t.loadedName,d]){const t=this._document.createElement("span");t.textContent="Hi",t.style.fontFamily=e,m.append(t)}this._document.body.append(m),function t(e,i){if(++c>30)return(0,s.warn)("Load test font never loaded."),void i();l.font="30px "+e,l.fillText(".",0,20),l.getImageData(0,0,1,1).data[3]>0?i():setTimeout(t.bind(null,e,i))}(d,(()=>{m.remove(),e.complete()}))}}class o{constructor(t,{isEvalSupported:e=!0,disableFontFace:i=!1,ignoreErrors:s=!1,inspectFont:n=null}){this.compiledGlyphs=Object.create(null);for(const e in t)this[e]=t[e];this.isEvalSupported=!1!==e,this.disableFontFace=!0===i,this.ignoreErrors=!0===s,this._inspectFont=n}createNativeFontFace(){if(!this.data||this.disableFontFace)return null;let t;if(this.cssFontInfo){const e={weight:this.cssFontInfo.fontWeight};this.cssFontInfo.italicAngle&&(e.style=`oblique ${this.cssFontInfo.italicAngle}deg`),t=new FontFace(this.cssFontInfo.fontFamily,this.data,e)}else t=new FontFace(this.loadedName,this.data,{});return this._inspectFont?.(this),t}createFontFaceRule(){if(!this.data||this.disableFontFace)return null;const t=(0,s.bytesToString)(this.data),e=`url(data:${this.mimetype};base64,${btoa(t)});`;let i;if(this.cssFontInfo){let t=`font-weight: ${this.cssFontInfo.fontWeight};`;this.cssFontInfo.italicAngle&&(t+=`font-style: oblique ${this.cssFontInfo.italicAngle}deg;`),i=`@font-face {font-family:"${this.cssFontInfo.fontFamily}";${t}src:${e}}`}else i=`@font-face {font-family:"${this.loadedName}";src:${e}}`;return this._inspectFont?.(this,e),i}getPathGenerator(t,e){if(void 0!==this.compiledGlyphs[e])return this.compiledGlyphs[e];let i;try{i=t.get(this.loadedName+"_path_"+e)}catch(t){if(!this.ignoreErrors)throw t;return(0,s.warn)(`getPathGenerator - ignoring character: "${t}".`),this.compiledGlyphs[e]=function(t,e){}}if(this.isEvalSupported&&s.FeatureTest.isEvalSupported){const t=[];for(const e of i){const i=void 0!==e.args?e.args.join(","):"";t.push("c.",e.cmd,"(",i,");\n")}return this.compiledGlyphs[e]=new Function("c","size",t.join(""))}return this.compiledGlyphs[e]=function(t,e){for(const s of i)"scale"===s.cmd&&(s.args=[e,-e]),t[s.cmd].apply(t,s.args)}}}},472:(t,e,i)=>{i.d(e,{Metadata:()=>n});var s=i(266);class n{#Nn;#Hn;constructor({parsedData:t,rawData:e}){this.#Nn=t,this.#Hn=e}getRaw(){return this.#Hn}get(t){return this.#Nn.get(t)??null}getAll(){return(0,s.objectFromMap)(this.#Nn)}has(t){return this.#Nn.has(t)}}},474:(t,e,i)=>{i.d(e,{PDFNetworkStream:()=>r});var s=i(266),n=i(253);class o{constructor(t,e={}){this.url=t,this.isHttp=/^https?:/i.test(t),this.httpHeaders=this.isHttp&&e.httpHeaders||Object.create(null),this.withCredentials=e.withCredentials||!1,this.currXhrId=0,this.pendingRequests=Object.create(null)}requestRange(t,e,i){const s={begin:t,end:e};for(const t in i)s[t]=i[t];return this.request(s)}requestFull(t){return this.request(t)}request(t){const e=new XMLHttpRequest,i=this.currXhrId++,s=this.pendingRequests[i]={xhr:e};e.open("GET",this.url),e.withCredentials=this.withCredentials;for(const t in this.httpHeaders){const i=this.httpHeaders[t];void 0!==i&&e.setRequestHeader(t,i)}return this.isHttp&&"begin"in t&&"end"in t?(e.setRequestHeader("Range",`bytes=${t.begin}-${t.end-1}`),s.expectedStatus=206):s.expectedStatus=200,e.responseType="arraybuffer",t.onError&&(e.onerror=function(i){t.onError(e.status)}),e.onreadystatechange=this.onStateChange.bind(this,i),e.onprogress=this.onProgress.bind(this,i),s.onHeadersReceived=t.onHeadersReceived,s.onDone=t.onDone,s.onError=t.onError,s.onProgress=t.onProgress,e.send(null),i}onProgress(t,e){const i=this.pendingRequests[t];i&&i.onProgress?.(e)}onStateChange(t,e){const i=this.pendingRequests[t];if(!i)return;const n=i.xhr;if(n.readyState>=2&&i.onHeadersReceived&&(i.onHeadersReceived(),delete i.onHeadersReceived),4!==n.readyState)return;if(!(t in this.pendingRequests))return;if(delete this.pendingRequests[t],0===n.status&&this.isHttp)return void i.onError?.(n.status);const o=n.status||200;if((200!==o||206!==i.expectedStatus)&&o!==i.expectedStatus)return void i.onError?.(n.status);const r=function(t){const e=t.response;return"string"!=typeof e?e:(0,s.stringToBytes)(e).buffer}(n);if(206===o){const t=n.getResponseHeader("Content-Range"),e=/bytes (\d+)-(\d+)\/(\d+)/.exec(t);i.onDone({begin:parseInt(e[1],10),chunk:r})}else r?i.onDone({begin:0,chunk:r}):i.onError?.(n.status)}getRequestXhr(t){return this.pendingRequests[t].xhr}isPendingRequest(t){return t in this.pendingRequests}abortRequest(t){const e=this.pendingRequests[t].xhr;delete this.pendingRequests[t],e.abort()}}class r{constructor(t){this._source=t,this._manager=new o(t.url,{httpHeaders:t.httpHeaders,withCredentials:t.withCredentials}),this._rangeChunkSize=t.rangeChunkSize,this._fullRequestReader=null,this._rangeRequestReaders=[]}_onRangeRequestReaderClosed(t){const e=this._rangeRequestReaders.indexOf(t);e>=0&&this._rangeRequestReaders.splice(e,1)}getFullReader(){return(0,s.assert)(!this._fullRequestReader,"PDFNetworkStream.getFullReader can only be called once."),this._fullRequestReader=new a(this._manager,this._source),this._fullRequestReader}getRangeReader(t,e){const i=new l(this._manager,t,e);return i.onClosed=this._onRangeRequestReaderClosed.bind(this),this._rangeRequestReaders.push(i),i}cancelAllRequests(t){this._fullRequestReader?.cancel(t);for(const e of this._rangeRequestReaders.slice(0))e.cancel(t)}}class a{constructor(t,e){this._manager=t;const i={onHeadersReceived:this._onHeadersReceived.bind(this),onDone:this._onDone.bind(this),onError:this._onError.bind(this),onProgress:this._onProgress.bind(this)};this._url=e.url,this._fullRequestId=t.requestFull(i),this._headersReceivedCapability=new s.PromiseCapability,this._disableRange=e.disableRange||!1,this._contentLength=e.length,this._rangeChunkSize=e.rangeChunkSize,this._rangeChunkSize||this._disableRange||(this._disableRange=!0),this._isStreamingSupported=!1,this._isRangeSupported=!1,this._cachedChunks=[],this._requests=[],this._done=!1,this._storedError=void 0,this._filename=null,this.onProgress=null}_onHeadersReceived(){const t=this._fullRequestId,e=this._manager.getRequestXhr(t),i=t=>e.getResponseHeader(t),{allowRangeRequests:s,suggestedLength:o}=(0,n.validateRangeRequestCapabilities)({getResponseHeader:i,isHttp:this._manager.isHttp,rangeChunkSize:this._rangeChunkSize,disableRange:this._disableRange});s&&(this._isRangeSupported=!0),this._contentLength=o||this._contentLength,this._filename=(0,n.extractFilenameFromHeader)(i),this._isRangeSupported&&this._manager.abortRequest(t),this._headersReceivedCapability.resolve()}_onDone(t){if(t&&(this._requests.length>0?this._requests.shift().resolve({value:t.chunk,done:!1}):this._cachedChunks.push(t.chunk)),this._done=!0,!(this._cachedChunks.length>0)){for(const t of this._requests)t.resolve({value:void 0,done:!0});this._requests.length=0}}_onError(t){this._storedError=(0,n.createResponseStatusError)(t,this._url),this._headersReceivedCapability.reject(this._storedError);for(const t of this._requests)t.reject(this._storedError);this._requests.length=0,this._cachedChunks.length=0}_onProgress(t){this.onProgress?.({loaded:t.loaded,total:t.lengthComputable?t.total:this._contentLength})}get filename(){return this._filename}get isRangeSupported(){return this._isRangeSupported}get isStreamingSupported(){return this._isStreamingSupported}get contentLength(){return this._contentLength}get headersReady(){return this._headersReceivedCapability.promise}async read(){if(this._storedError)throw this._storedError;if(this._cachedChunks.length>0)return{value:this._cachedChunks.shift(),done:!1};if(this._done)return{value:void 0,done:!0};const t=new s.PromiseCapability;return this._requests.push(t),t.promise}cancel(t){this._done=!0,this._headersReceivedCapability.reject(t);for(const t of this._requests)t.resolve({value:void 0,done:!0});this._requests.length=0,this._manager.isPendingRequest(this._fullRequestId)&&this._manager.abortRequest(this._fullRequestId),this._fullRequestReader=null}}class l{constructor(t,e,i){this._manager=t;const s={onDone:this._onDone.bind(this),onError:this._onError.bind(this),onProgress:this._onProgress.bind(this)};this._url=t.url,this._requestId=t.requestRange(e,i,s),this._requests=[],this._queuedChunk=null,this._done=!1,this._storedError=void 0,this.onProgress=null,this.onClosed=null}_close(){this.onClosed?.(this)}_onDone(t){const e=t.chunk;this._requests.length>0?this._requests.shift().resolve({value:e,done:!1}):this._queuedChunk=e,this._done=!0;for(const t of this._requests)t.resolve({value:void 0,done:!0});this._requests.length=0,this._close()}_onError(t){this._storedError=(0,n.createResponseStatusError)(t,this._url);for(const t of this._requests)t.reject(this._storedError);this._requests.length=0,this._queuedChunk=null}_onProgress(t){this.isStreamingSupported||this.onProgress?.({loaded:t.loaded})}get isStreamingSupported(){return!1}async read(){if(this._storedError)throw this._storedError;if(null!==this._queuedChunk){const t=this._queuedChunk;return this._queuedChunk=null,{value:t,done:!1}}if(this._done)return{value:void 0,done:!0};const t=new s.PromiseCapability;return this._requests.push(t),t.promise}cancel(t){this._done=!0;for(const t of this._requests)t.resolve({value:void 0,done:!0});this._requests.length=0,this._manager.isPendingRequest(this._requestId)&&this._manager.abortRequest(this._requestId),this._close()}}},253:(t,e,i)=>{i.d(e,{createResponseStatusError:()=>a,extractFilenameFromHeader:()=>r,validateRangeRequestCapabilities:()=>o,validateResponseStatus:()=>l});var s=i(266),n=i(473);function o({getResponseHeader:t,isHttp:e,rangeChunkSize:i,disableRange:s}){const n={allowRangeRequests:!1,suggestedLength:void 0},o=parseInt(t("Content-Length"),10);return Number.isInteger(o)?(n.suggestedLength=o,o<=2*i||s||!e||"bytes"!==t("Accept-Ranges")||"identity"!==(t("Content-Encoding")||"identity")||(n.allowRangeRequests=!0),n):n}function r(t){const e=t("Content-Disposition");if(e){let t=function(t){let e=!0,i=n("filename\\*","i").exec(t);if(i){i=i[1];let t=a(i);return t=unescape(t),t=l(t),t=c(t),r(t)}if(i=function(t){const e=[];let i;const s=n("filename\\*((?!0\\d)\\d+)(\\*?)","ig");for(;null!==(i=s.exec(t));){let[,t,s,n]=i;if(t=parseInt(t,10),t in e){if(0===t)break}else e[t]=[s,n]}const o=[];for(let t=0;t<e.length&&t in e;++t){let[i,s]=e[t];s=a(s),i&&(s=unescape(s),0===t&&(s=l(s))),o.push(s)}return o.join("")}(t),i)return r(c(i));if(i=n("filename","i").exec(t),i){i=i[1];let t=a(i);return t=c(t),r(t)}function n(t,e){return new RegExp("(?:^|;)\\s*"+t+'\\s*=\\s*([^";\\s][^;\\s]*|"(?:[^"\\\\]|\\\\"?)+"?)',e)}function o(t,i){if(t){if(!/^[\x00-\xFF]+$/.test(i))return i;try{const n=new TextDecoder(t,{fatal:!0}),o=(0,s.stringToBytes)(i);i=n.decode(o),e=!1}catch{}}return i}function r(t){return e&&/[\x80-\xff]/.test(t)&&(t=o("utf-8",t),e&&(t=o("iso-8859-1",t))),t}function a(t){if(t.startsWith('"')){const e=t.slice(1).split('\\"');for(let t=0;t<e.length;++t){const i=e[t].indexOf('"');-1!==i&&(e[t]=e[t].slice(0,i),e.length=t+1),e[t]=e[t].replaceAll(/\\(.)/g,"$1")}t=e.join('"')}return t}function l(t){const e=t.indexOf("'");return-1===e?t:o(t.slice(0,e),t.slice(e+1).replace(/^[^']*'/,""))}function c(t){return!t.startsWith("=?")||/[\x00-\x19\x80-\xff]/.test(t)?t:t.replaceAll(/=\?([\w-]*)\?([QqBb])\?((?:[^?]|\?(?!=))*)\?=/g,(function(t,e,i,s){if("q"===i||"Q"===i)return o(e,s=(s=s.replaceAll("_"," ")).replaceAll(/=([0-9a-fA-F]{2})/g,(function(t,e){return String.fromCharCode(parseInt(e,16))})));try{s=atob(s)}catch{}return o(e,s)}))}return""}(e);if(t.includes("%"))try{t=decodeURIComponent(t)}catch{}if((0,n.isPdfFile)(t))return t}return null}function a(t,e){return 404===t||0===t&&e.startsWith("file:")?new s.MissingPDFException('Missing PDF "'+e+'".'):new s.UnexpectedResponseException(`Unexpected server response (${t}) while retrieving PDF "${e}".`,t)}function l(t){return 200===t||206===t}},498:(t,e,i)=>{i.a(t,(async(t,s)=>{try{i.d(e,{PDFNodeStream:()=>u});var n=i(266),o=i(253);let r,a,l,c;n.isNodeJS&&(r=await import("fs"),a=await import("http"),l=await import("https"),c=await import("url"));const d=/^file:\/\/\/[a-zA-Z]:\//;function h(t){const e=c.parse(t);return"file:"===e.protocol||e.host?e:/^[a-z]:[/\\]/i.test(t)?c.parse(`file:///${t}`):(e.host||(e.protocol="file:"),e)}class u{constructor(t){this.source=t,this.url=h(t.url),this.isHttp="http:"===this.url.protocol||"https:"===this.url.protocol,this.isFsUrl="file:"===this.url.protocol,this.httpHeaders=this.isHttp&&t.httpHeaders||{},this._fullRequestReader=null,this._rangeRequestReaders=[]}get _progressiveDataLength(){return this._fullRequestReader?._loaded??0}getFullReader(){return(0,n.assert)(!this._fullRequestReader,"PDFNodeStream.getFullReader can only be called once."),this._fullRequestReader=this.isFsUrl?new v(this):new f(this),this._fullRequestReader}getRangeReader(t,e){if(e<=this._progressiveDataLength)return null;const i=this.isFsUrl?new y(this,t,e):new b(this,t,e);return this._rangeRequestReaders.push(i),i}cancelAllRequests(t){this._fullRequestReader?.cancel(t);for(const e of this._rangeRequestReaders.slice(0))e.cancel(t)}}class p{constructor(t){this._url=t.url,this._done=!1,this._storedError=null,this.onProgress=null;const e=t.source;this._contentLength=e.length,this._loaded=0,this._filename=null,this._disableRange=e.disableRange||!1,this._rangeChunkSize=e.rangeChunkSize,this._rangeChunkSize||this._disableRange||(this._disableRange=!0),this._isStreamingSupported=!e.disableStream,this._isRangeSupported=!e.disableRange,this._readableStream=null,this._readCapability=new n.PromiseCapability,this._headersCapability=new n.PromiseCapability}get headersReady(){return this._headersCapability.promise}get filename(){return this._filename}get contentLength(){return this._contentLength}get isRangeSupported(){return this._isRangeSupported}get isStreamingSupported(){return this._isStreamingSupported}async read(){if(await this._readCapability.promise,this._done)return{value:void 0,done:!0};if(this._storedError)throw this._storedError;const t=this._readableStream.read();return null===t?(this._readCapability=new n.PromiseCapability,this.read()):(this._loaded+=t.length,this.onProgress?.({loaded:this._loaded,total:this._contentLength}),{value:new Uint8Array(t).buffer,done:!1})}cancel(t){this._readableStream?this._readableStream.destroy(t):this._error(t)}_error(t){this._storedError=t,this._readCapability.resolve()}_setReadableStream(t){this._readableStream=t,t.on("readable",(()=>{this._readCapability.resolve()})),t.on("end",(()=>{t.destroy(),this._done=!0,this._readCapability.resolve()})),t.on("error",(t=>{this._error(t)})),!this._isStreamingSupported&&this._isRangeSupported&&this._error(new n.AbortException("streaming is disabled")),this._storedError&&this._readableStream.destroy(this._storedError)}}class g{constructor(t){this._url=t.url,this._done=!1,this._storedError=null,this.onProgress=null,this._loaded=0,this._readableStream=null,this._readCapability=new n.PromiseCapability;const e=t.source;this._isStreamingSupported=!e.disableStream}get isStreamingSupported(){return this._isStreamingSupported}async read(){if(await this._readCapability.promise,this._done)return{value:void 0,done:!0};if(this._storedError)throw this._storedError;const t=this._readableStream.read();return null===t?(this._readCapability=new n.PromiseCapability,this.read()):(this._loaded+=t.length,this.onProgress?.({loaded:this._loaded}),{value:new Uint8Array(t).buffer,done:!1})}cancel(t){this._readableStream?this._readableStream.destroy(t):this._error(t)}_error(t){this._storedError=t,this._readCapability.resolve()}_setReadableStream(t){this._readableStream=t,t.on("readable",(()=>{this._readCapability.resolve()})),t.on("end",(()=>{t.destroy(),this._done=!0,this._readCapability.resolve()})),t.on("error",(t=>{this._error(t)})),this._storedError&&this._readableStream.destroy(this._storedError)}}function m(t,e){return{protocol:t.protocol,auth:t.auth,host:t.hostname,port:t.port,path:t.path,method:"GET",headers:e}}class f extends p{constructor(t){super(t);const e=e=>{if(404===e.statusCode){const t=new n.MissingPDFException(`Missing PDF "${this._url}".`);return this._storedError=t,void this._headersCapability.reject(t)}this._headersCapability.resolve(),this._setReadableStream(e);const i=t=>this._readableStream.headers[t.toLowerCase()],{allowRangeRequests:s,suggestedLength:r}=(0,o.validateRangeRequestCapabilities)({getResponseHeader:i,isHttp:t.isHttp,rangeChunkSize:this._rangeChunkSize,disableRange:this._disableRange});this._isRangeSupported=s,this._contentLength=r||this._contentLength,this._filename=(0,o.extractFilenameFromHeader)(i)};this._request=null,"http:"===this._url.protocol?this._request=a.request(m(this._url,t.httpHeaders),e):this._request=l.request(m(this._url,t.httpHeaders),e),this._request.on("error",(t=>{this._storedError=t,this._headersCapability.reject(t)})),this._request.end()}}class b extends g{constructor(t,e,i){super(t),this._httpHeaders={};for(const e in t.httpHeaders){const i=t.httpHeaders[e];void 0!==i&&(this._httpHeaders[e]=i)}this._httpHeaders.Range=`bytes=${e}-${i-1}`;const s=t=>{if(404!==t.statusCode)this._setReadableStream(t);else{const t=new n.MissingPDFException(`Missing PDF "${this._url}".`);this._storedError=t}};this._request=null,"http:"===this._url.protocol?this._request=a.request(m(this._url,this._httpHeaders),s):this._request=l.request(m(this._url,this._httpHeaders),s),this._request.on("error",(t=>{this._storedError=t})),this._request.end()}}class v extends p{constructor(t){super(t);let e=decodeURIComponent(this._url.path);d.test(this._url.href)&&(e=e.replace(/^\//,"")),r.lstat(e,((t,i)=>{if(t)return"ENOENT"===t.code&&(t=new n.MissingPDFException(`Missing PDF "${e}".`)),this._storedError=t,void this._headersCapability.reject(t);this._contentLength=i.size,this._setReadableStream(r.createReadStream(e)),this._headersCapability.resolve()}))}}class y extends g{constructor(t,e,i){super(t);let s=decodeURIComponent(this._url.path);d.test(this._url.href)&&(s=s.replace(/^\//,"")),this._setReadableStream(r.createReadStream(s,{start:e,end:i-1}))}}s()}catch(w){s(w)}}),1)},738:(t,e,i)=>{i.a(t,(async(t,s)=>{try{i.d(e,{NodeCMapReaderFactory:()=>d,NodeCanvasFactory:()=>c,NodeFilterFactory:()=>l,NodeStandardFontDataFactory:()=>h});var n=i(822);let t,o,r;if(i(266).isNodeJS){t=await import("fs");try{o=await import("canvas")}catch{}try{r=await import("path2d-polyfill")}catch{}}const a=function(e){return new Promise(((i,s)=>{t.readFile(e,((t,e)=>{!t&&e?i(new Uint8Array(e)):s(new Error(t))}))}))};class l extends n.BaseFilterFactory{}class c extends n.BaseCanvasFactory{_createCanvas(t,e){return o.createCanvas(t,e)}}class d extends n.BaseCMapReaderFactory{_fetchData(t,e){return a(t).then((t=>({cMapData:t,compressionType:e})))}}class h extends n.BaseStandardFontDataFactory{_fetchData(t){return a(t)}}s()}catch(t){s(t)}}),1)},890:(t,e,i)=>{i.d(e,{OptionalContentConfig:()=>a});var s=i(266),n=i(825);const o=Symbol("INTERNAL");class r{#zn=!0;constructor(t,e){this.name=t,this.intent=e}get visible(){return this.#zn}_setVisible(t,e){t!==o&&(0,s.unreachable)("Internal method `_setVisible` called."),this.#zn=e}}class a{#Un=null;#jn=new Map;#$n=null;#Wn=null;constructor(t){if(this.name=null,this.creator=null,null!==t){this.name=t.name,this.creator=t.creator,this.#Wn=t.order;for(const e of t.groups)this.#jn.set(e.id,new r(e.name,e.intent));if("OFF"===t.baseState)for(const t of this.#jn.values())t._setVisible(o,!1);for(const e of t.on)this.#jn.get(e)._setVisible(o,!0);for(const e of t.off)this.#jn.get(e)._setVisible(o,!1);this.#$n=this.getHash()}}#Vn(t){const e=t.length;if(e<2)return!0;const i=t[0];for(let n=1;n<e;n++){const e=t[n];let o;if(Array.isArray(e))o=this.#Vn(e);else{if(!this.#jn.has(e))return(0,s.warn)(`Optional content group not found: ${e}`),!0;o=this.#jn.get(e).visible}switch(i){case"And":if(!o)return!1;break;case"Or":if(o)return!0;break;case"Not":return!o;default:return!0}}return"And"===i}isVisible(t){if(0===this.#jn.size)return!0;if(!t)return(0,s.warn)("Optional content group not defined."),!0;if("OCG"===t.type)return this.#jn.has(t.id)?this.#jn.get(t.id).visible:((0,s.warn)(`Optional content group not found: ${t.id}`),!0);if("OCMD"===t.type){if(t.expression)return this.#Vn(t.expression);if(!t.policy||"AnyOn"===t.policy){for(const e of t.ids){if(!this.#jn.has(e))return(0,s.warn)(`Optional content group not found: ${e}`),!0;if(this.#jn.get(e).visible)return!0}return!1}if("AllOn"===t.policy){for(const e of t.ids){if(!this.#jn.has(e))return(0,s.warn)(`Optional content group not found: ${e}`),!0;if(!this.#jn.get(e).visible)return!1}return!0}if("AnyOff"===t.policy){for(const e of t.ids){if(!this.#jn.has(e))return(0,s.warn)(`Optional content group not found: ${e}`),!0;if(!this.#jn.get(e).visible)return!0}return!1}if("AllOff"===t.policy){for(const e of t.ids){if(!this.#jn.has(e))return(0,s.warn)(`Optional content group not found: ${e}`),!0;if(this.#jn.get(e).visible)return!1}return!0}return(0,s.warn)(`Unknown optional content policy ${t.policy}.`),!0}return(0,s.warn)(`Unknown group type ${t.type}.`),!0}setVisibility(t,e=!0){this.#jn.has(t)?(this.#jn.get(t)._setVisible(o,!!e),this.#Un=null):(0,s.warn)(`Optional content group not found: ${t}`)}get hasInitialVisibility(){return null===this.#$n||this.getHash()===this.#$n}getOrder(){return this.#jn.size?this.#Wn?this.#Wn.slice():[...this.#jn.keys()]:null}getGroups(){return this.#jn.size>0?(0,s.objectFromMap)(this.#jn):null}getGroup(t){return this.#jn.get(t)||null}getHash(){if(null!==this.#Un)return this.#Un;const t=new n.MurmurHash3_64;for(const[e,i]of this.#jn)t.update(`${e}:${i.visible}`);return this.#Un=t.hexdigest()}}},739:(t,e,i)=>{i.d(e,{renderTextLayer:()=>h,updateTextLayer:()=>u});var s=i(266),n=i(473);const o=30,r=new Map;function a(t,e){let i;if(e&&s.FeatureTest.isOffscreenCanvasSupported)i=new OffscreenCanvas(t,t).getContext("2d",{alpha:!1});else{const e=document.createElement("canvas");e.width=e.height=t,i=e.getContext("2d",{alpha:!1})}return i}function l(t,e,i){const n=document.createElement("span"),l={angle:0,canvasWidth:0,hasText:""!==e.str,hasEOL:e.hasEOL,fontSize:0};t._textDivs.push(n);const c=s.Util.transform(t._transform,e.transform);let d=Math.atan2(c[1],c[0]);const h=i[e.fontName];h.vertical&&(d+=Math.PI/2);const u=t._fontInspectorEnabled&&h.fontSubstitution||h.fontFamily,p=Math.hypot(c[2],c[3]),g=p*function(t,e){const i=r.get(t);if(i)return i;const s=a(o,e);s.font=`30px ${t}`;const n=s.measureText("");let l=n.fontBoundingBoxAscent,c=Math.abs(n.fontBoundingBoxDescent);if(l){const e=l/(l+c);return r.set(t,e),s.canvas.width=s.canvas.height=0,e}s.strokeStyle="red",s.clearRect(0,0,o,o),s.strokeText("g",0,0);let d=s.getImageData(0,0,o,o).data;c=0;for(let t=d.length-1-3;t>=0;t-=4)if(d[t]>0){c=Math.ceil(t/4/o);break}s.clearRect(0,0,o,o),s.strokeText("A",0,o),d=s.getImageData(0,0,o,o).data,l=0;for(let t=0,e=d.length;t<e;t+=4)if(d[t]>0){l=o-Math.floor(t/4/o);break}if(s.canvas.width=s.canvas.height=0,l){const e=l/(l+c);return r.set(t,e),e}return r.set(t,.8),.8}(u,t._isOffscreenCanvasSupported);let m,f;0===d?(m=c[4],f=c[5]-g):(m=c[4]+g*Math.sin(d),f=c[5]-g*Math.cos(d));const b="calc(var(--scale-factor)*",v=n.style;t._container===t._rootContainer?(v.left=`${(100*m/t._pageWidth).toFixed(2)}%`,v.top=`${(100*f/t._pageHeight).toFixed(2)}%`):(v.left=`${b}${m.toFixed(2)}px)`,v.top=`${b}${f.toFixed(2)}px)`),v.fontSize=`${b}${p.toFixed(2)}px)`,v.fontFamily=u,l.fontSize=p,n.setAttribute("role","presentation"),n.textContent=e.str,n.dir=e.dir,t._fontInspectorEnabled&&(n.dataset.fontName=h.fontSubstitutionLoadedName||e.fontName),0!==d&&(l.angle=d*(180/Math.PI));let y=!1;if(e.str.length>1)y=!0;else if(" "!==e.str&&e.transform[0]!==e.transform[3]){const t=Math.abs(e.transform[0]),i=Math.abs(e.transform[3]);t!==i&&Math.max(t,i)/Math.min(t,i)>1.5&&(y=!0)}y&&(l.canvasWidth=h.vertical?e.height:e.width),t._textDivProperties.set(n,l),t._isReadableStream&&t._layoutText(n)}function c(t){const{div:e,scale:i,properties:s,ctx:n,prevFontSize:o,prevFontFamily:r}=t,{style:a}=e;let l="";if(0!==s.canvasWidth&&s.hasText){const{fontFamily:c}=a,{canvasWidth:d,fontSize:h}=s;o===h&&r===c||(n.font=`${h*i}px ${c}`,t.prevFontSize=h,t.prevFontFamily=c);const{width:u}=n.measureText(e.textContent);u>0&&(l=`scaleX(${d*i/u})`)}0!==s.angle&&(l=`rotate(${s.angle}deg) ${l}`),l.length>0&&(a.transform=l)}class d{constructor({textContentSource:t,container:e,viewport:i,textDivs:o,textDivProperties:r,textContentItemsStr:l,isOffscreenCanvasSupported:c}){this._textContentSource=t,this._isReadableStream=t instanceof ReadableStream,this._container=this._rootContainer=e,this._textDivs=o||[],this._textContentItemsStr=l||[],this._isOffscreenCanvasSupported=c,this._fontInspectorEnabled=!!globalThis.FontInspector?.enabled,this._reader=null,this._textDivProperties=r||new WeakMap,this._canceled=!1,this._capability=new s.PromiseCapability,this._layoutTextParams={prevFontSize:null,prevFontFamily:null,div:null,scale:i.scale*(globalThis.devicePixelRatio||1),properties:null,ctx:a(0,c)};const{pageWidth:d,pageHeight:h,pageX:u,pageY:p}=i.rawDims;this._transform=[1,0,0,-1,-u,p+h],this._pageWidth=d,this._pageHeight=h,(0,n.setLayerDimensions)(e,i),this._capability.promise.finally((()=>{this._layoutTextParams=null})).catch((()=>{}))}get promise(){return this._capability.promise}cancel(){this._canceled=!0,this._reader&&(this._reader.cancel(new s.AbortException("TextLayer task cancelled.")).catch((()=>{})),this._reader=null),this._capability.reject(new s.AbortException("TextLayer task cancelled."))}_processItems(t,e){for(const i of t)if(void 0!==i.str)this._textContentItemsStr.push(i.str),l(this,i,e);else if("beginMarkedContentProps"===i.type||"beginMarkedContent"===i.type){const t=this._container;this._container=document.createElement("span"),this._container.classList.add("markedContent"),null!==i.id&&this._container.setAttribute("id",`${i.id}`),t.append(this._container)}else"endMarkedContent"===i.type&&(this._container=this._container.parentNode)}_layoutText(t){const e=this._layoutTextParams.properties=this._textDivProperties.get(t);if(this._layoutTextParams.div=t,c(this._layoutTextParams),e.hasText&&this._container.append(t),e.hasEOL){const t=document.createElement("br");t.setAttribute("role","presentation"),this._container.append(t)}}_render(){const t=new s.PromiseCapability;let e=Object.create(null);if(this._isReadableStream){const i=()=>{this._reader.read().then((({value:s,done:n})=>{n?t.resolve():(Object.assign(e,s.styles),this._processItems(s.items,e),i())}),t.reject)};this._reader=this._textContentSource.getReader(),i()}else{if(!this._textContentSource)throw new Error('No "textContentSource" parameter specified.');{const{items:e,styles:i}=this._textContentSource;this._processItems(e,i),t.resolve()}}t.promise.then((()=>{e=null,function(t){if(t._canceled)return;const e=t._textDivs,i=t._capability;if(e.length>1e5)i.resolve();else{if(!t._isReadableStream)for(const i of e)t._layoutText(i);i.resolve()}}(this)}),this._capability.reject)}}function h(t){const e=new d(t);return e._render(),e}function u({container:t,viewport:e,textDivs:i,textDivProperties:s,isOffscreenCanvasSupported:o,mustRotate:r=!0,mustRescale:l=!0}){if(r&&(0,n.setLayerDimensions)(t,{rotation:e.rotation}),l){const t=a(0,o),n={prevFontSize:null,prevFontFamily:null,div:null,scale:e.scale*(globalThis.devicePixelRatio||1),properties:null,ctx:t};for(const t of i)n.properties=s.get(t),n.div=t,c(n)}}},92:(t,e,i)=>{i.d(e,{PDFDataTransportStream:()=>o});var s=i(266),n=i(473);class o{constructor({length:t,initialData:e,progressiveDone:i=!1,contentDispositionFilename:n=null,disableRange:o=!1,disableStream:r=!1},a){if((0,s.assert)(a,'PDFDataTransportStream - missing required "pdfDataRangeTransport" argument.'),this._queuedChunks=[],this._progressiveDone=i,this._contentDispositionFilename=n,e?.length>0){const t=e instanceof Uint8Array&&e.byteLength===e.buffer.byteLength?e.buffer:new Uint8Array(e).buffer;this._queuedChunks.push(t)}this._pdfDataRangeTransport=a,this._isStreamingSupported=!r,this._isRangeSupported=!o,this._contentLength=t,this._fullRequestReader=null,this._rangeReaders=[],this._pdfDataRangeTransport.addRangeListener(((t,e)=>{this._onReceiveData({begin:t,chunk:e})})),this._pdfDataRangeTransport.addProgressListener(((t,e)=>{this._onProgress({loaded:t,total:e})})),this._pdfDataRangeTransport.addProgressiveReadListener((t=>{this._onReceiveData({chunk:t})})),this._pdfDataRangeTransport.addProgressiveDoneListener((()=>{this._onProgressiveDone()})),this._pdfDataRangeTransport.transportReady()}_onReceiveData({begin:t,chunk:e}){const i=e instanceof Uint8Array&&e.byteLength===e.buffer.byteLength?e.buffer:new Uint8Array(e).buffer;if(void 0===t)this._fullRequestReader?this._fullRequestReader._enqueue(i):this._queuedChunks.push(i);else{const e=this._rangeReaders.some((function(e){return e._begin===t&&(e._enqueue(i),!0)}));(0,s.assert)(e,"_onReceiveData - no `PDFDataTransportStreamRangeReader` instance found.")}}get _progressiveDataLength(){return this._fullRequestReader?._loaded??0}_onProgress(t){void 0===t.total?this._rangeReaders[0]?.onProgress?.({loaded:t.loaded}):this._fullRequestReader?.onProgress?.({loaded:t.loaded,total:t.total})}_onProgressiveDone(){this._fullRequestReader?.progressiveDone(),this._progressiveDone=!0}_removeRangeReader(t){const e=this._rangeReaders.indexOf(t);e>=0&&this._rangeReaders.splice(e,1)}getFullReader(){(0,s.assert)(!this._fullRequestReader,"PDFDataTransportStream.getFullReader can only be called once.");const t=this._queuedChunks;return this._queuedChunks=null,new r(this,t,this._progressiveDone,this._contentDispositionFilename)}getRangeReader(t,e){if(e<=this._progressiveDataLength)return null;const i=new a(this,t,e);return this._pdfDataRangeTransport.requestDataRange(t,e),this._rangeReaders.push(i),i}cancelAllRequests(t){this._fullRequestReader?.cancel(t);for(const e of this._rangeReaders.slice(0))e.cancel(t);this._pdfDataRangeTransport.abort()}}class r{constructor(t,e,i=!1,s=null){this._stream=t,this._done=i||!1,this._filename=(0,n.isPdfFile)(s)?s:null,this._queuedChunks=e||[],this._loaded=0;for(const t of this._queuedChunks)this._loaded+=t.byteLength;this._requests=[],this._headersReady=Promise.resolve(),t._fullRequestReader=this,this.onProgress=null}_enqueue(t){this._done||(this._requests.length>0?this._requests.shift().resolve({value:t,done:!1}):this._queuedChunks.push(t),this._loaded+=t.byteLength)}get headersReady(){return this._headersReady}get filename(){return this._filename}get isRangeSupported(){return this._stream._isRangeSupported}get isStreamingSupported(){return this._stream._isStreamingSupported}get contentLength(){return this._stream._contentLength}async read(){if(this._queuedChunks.length>0)return{value:this._queuedChunks.shift(),done:!1};if(this._done)return{value:void 0,done:!0};const t=new s.PromiseCapability;return this._requests.push(t),t.promise}cancel(t){this._done=!0;for(const t of this._requests)t.resolve({value:void 0,done:!0});this._requests.length=0}progressiveDone(){this._done||(this._done=!0)}}class a{constructor(t,e,i){this._stream=t,this._begin=e,this._end=i,this._queuedChunk=null,this._requests=[],this._done=!1,this.onProgress=null}_enqueue(t){if(!this._done){if(0===this._requests.length)this._queuedChunk=t;else{this._requests.shift().resolve({value:t,done:!1});for(const t of this._requests)t.resolve({value:void 0,done:!0});this._requests.length=0}this._done=!0,this._stream._removeRangeReader(this)}}get isStreamingSupported(){return!1}async read(){if(this._queuedChunk){const t=this._queuedChunk;return this._queuedChunk=null,{value:t,done:!1}}if(this._done)return{value:void 0,done:!0};const t=new s.PromiseCapability;return this._requests.push(t),t.promise}cancel(t){this._done=!0;for(const t of this._requests)t.resolve({value:void 0,done:!0});this._requests.length=0,this._stream._removeRangeReader(this)}}},368:(t,e,i)=>{i.d(e,{GlobalWorkerOptions:()=>s});const s=Object.create(null);s.workerPort=null,s.workerSrc=""},160:(t,e,i)=>{i.d(e,{XfaLayer:()=>n});var s=i(521);class n{static setupStorage(t,e,i,s,n){const o=s.getValue(e,{value:null});switch(i.name){case"textarea":if(null!==o.value&&(t.textContent=o.value),"print"===n)break;t.addEventListener("input",(t=>{s.setValue(e,{value:t.target.value})}));break;case"input":if("radio"===i.attributes.type||"checkbox"===i.attributes.type){if(o.value===i.attributes.xfaOn?t.setAttribute("checked",!0):o.value===i.attributes.xfaOff&&t.removeAttribute("checked"),"print"===n)break;t.addEventListener("change",(t=>{s.setValue(e,{value:t.target.checked?t.target.getAttribute("xfaOn"):t.target.getAttribute("xfaOff")})}))}else{if(null!==o.value&&t.setAttribute("value",o.value),"print"===n)break;t.addEventListener("input",(t=>{s.setValue(e,{value:t.target.value})}))}break;case"select":if(null!==o.value){t.setAttribute("value",o.value);for(const t of i.children)t.attributes.value===o.value?t.attributes.selected=!0:t.attributes.hasOwnProperty("selected")&&delete t.attributes.selected}t.addEventListener("input",(t=>{const i=t.target.options,n=-1===i.selectedIndex?"":i[i.selectedIndex].value;s.setValue(e,{value:n})}))}}static setAttributes({html:t,element:e,storage:i=null,intent:s,linkService:n}){const{attributes:o}=e,r=t instanceof HTMLAnchorElement;"radio"===o.type&&(o.name=`${o.name}-${s}`);for(const[e,i]of Object.entries(o))if(null!=i)switch(e){case"class":i.length&&t.setAttribute(e,i.join(" "));break;case"dataId":break;case"id":t.setAttribute("data-element-id",i);break;case"style":Object.assign(t.style,i);break;case"textContent":t.textContent=i;break;default:(!r||"href"!==e&&"newWindow"!==e)&&t.setAttribute(e,i)}r&&n.addLinkAttributes(t,o.href,o.newWindow),i&&o.dataId&&this.setupStorage(t,o.dataId,e,i)}static render(t){const e=t.annotationStorage,i=t.linkService,n=t.xfaHtml,o=t.intent||"display",r=document.createElement(n.name);n.attributes&&this.setAttributes({html:r,element:n,intent:o,linkService:i});const a="richText"!==o,l=t.div;if(l.append(r),t.viewport){const e=`matrix(${t.viewport.transform.join(",")})`;l.style.transform=e}a&&l.setAttribute("class","xfaLayer xfaFont");const c=[];if(0===n.children.length){if(n.value){const t=document.createTextNode(n.value);r.append(t),a&&s.XfaText.shouldBuildText(n.name)&&c.push(t)}return{textDivs:c}}const d=[[n,-1,r]];for(;d.length>0;){const[t,n,r]=d.at(-1);if(n+1===t.children.length){d.pop();continue}const l=t.children[++d.at(-1)[1]];if(null===l)continue;const{name:h}=l;if("#text"===h){const t=document.createTextNode(l.value);c.push(t),r.append(t);continue}const u=l?.attributes?.xmlns?document.createElementNS(l.attributes.xmlns,h):document.createElement(h);if(r.append(u),l.attributes&&this.setAttributes({html:u,element:l,storage:e,intent:o,linkService:i}),l.children?.length>0)d.push([l,-1,u]);else if(l.value){const t=document.createTextNode(l.value);a&&s.XfaText.shouldBuildText(h)&&c.push(t),u.append(t)}}for(const t of l.querySelectorAll(".xfaNonInteractive input, .xfaNonInteractive textarea"))t.setAttribute("readOnly",!0);return{textDivs:c}}static update(t){const e=`matrix(${t.viewport.transform.join(",")})`;t.div.style.transform=e,t.div.hidden=!1}}},521:(t,e,i)=>{i.d(e,{XfaText:()=>s});class s{static textContent(t){const e=[],i={items:e,styles:Object.create(null)};return function t(i){if(!i)return;let n=null;const o=i.name;if("#text"===o)n=i.value;else{if(!s.shouldBuildText(o))return;i?.attributes?.textContent?n=i.attributes.textContent:i.value&&(n=i.value)}if(null!==n&&e.push({str:n}),i.children)for(const e of i.children)t(e)}(t),i}static shouldBuildText(t){return!("textarea"===t||"input"===t||"option"===t||"select"===t)}}},907:(t,e,i)=>{i.a(t,(async(t,s)=>{try{i.d(e,{AbortException:()=>n.AbortException,AnnotationEditorLayer:()=>l.AnnotationEditorLayer,AnnotationEditorParamsType:()=>n.AnnotationEditorParamsType,AnnotationEditorType:()=>n.AnnotationEditorType,AnnotationEditorUIManager:()=>c.AnnotationEditorUIManager,AnnotationLayer:()=>d.AnnotationLayer,AnnotationMode:()=>n.AnnotationMode,CMapCompressionType:()=>n.CMapCompressionType,ColorPicker:()=>h.ColorPicker,DOMSVGFactory:()=>r.DOMSVGFactory,DrawLayer:()=>u.DrawLayer,FeatureTest:()=>n.FeatureTest,GlobalWorkerOptions:()=>p.GlobalWorkerOptions,ImageKind:()=>n.ImageKind,InvalidPDFException:()=>n.InvalidPDFException,MissingPDFException:()=>n.MissingPDFException,OPS:()=>n.OPS,Outliner:()=>g.Outliner,PDFDataRangeTransport:()=>o.PDFDataRangeTransport,PDFDateString:()=>r.PDFDateString,PDFWorker:()=>o.PDFWorker,PasswordResponses:()=>n.PasswordResponses,PermissionFlag:()=>n.PermissionFlag,PixelsPerInch:()=>r.PixelsPerInch,PromiseCapability:()=>n.PromiseCapability,RenderingCancelledException:()=>r.RenderingCancelledException,UnexpectedResponseException:()=>n.UnexpectedResponseException,Util:()=>n.Util,VerbosityLevel:()=>n.VerbosityLevel,XfaLayer:()=>m.XfaLayer,build:()=>o.build,createValidAbsoluteUrl:()=>n.createValidAbsoluteUrl,fetchData:()=>r.fetchData,getDocument:()=>o.getDocument,getFilenameFromUrl:()=>r.getFilenameFromUrl,getPdfFilenameFromUrl:()=>r.getPdfFilenameFromUrl,getXfaPageViewport:()=>r.getXfaPageViewport,isDataScheme:()=>r.isDataScheme,isPdfFile:()=>r.isPdfFile,noContextMenu:()=>r.noContextMenu,normalizeUnicode:()=>n.normalizeUnicode,renderTextLayer:()=>a.renderTextLayer,setLayerDimensions:()=>r.setLayerDimensions,shadow:()=>n.shadow,updateTextLayer:()=>a.updateTextLayer,version:()=>o.version});var n=i(266),o=i(406),r=i(473),a=i(739),l=i(629),c=i(812),d=i(640),h=i(97),u=i(423),p=i(368),g=i(405),m=i(160),f=t([o]);o=(f.then?(await f)():f)[0],s()}catch(t){s(t)}}))},694:(t,e,i)=>{i.d(e,{MessageHandler:()=>o});var s=i(266);function n(t){switch(t instanceof Error||"object"==typeof t&&null!==t||(0,s.unreachable)('wrapReason: Expected "reason" to be a (possibly cloned) Error.'),t.name){case"AbortException":return new s.AbortException(t.message);case"MissingPDFException":return new s.MissingPDFException(t.message);case"PasswordException":return new s.PasswordException(t.message,t.code);case"UnexpectedResponseException":return new s.UnexpectedResponseException(t.message,t.status);case"UnknownErrorException":return new s.UnknownErrorException(t.message,t.details);default:return new s.UnknownErrorException(t.message,t.toString())}}class o{constructor(t,e,i){this.sourceName=t,this.targetName=e,this.comObj=i,this.callbackId=1,this.streamId=1,this.streamSinks=Object.create(null),this.streamControllers=Object.create(null),this.callbackCapabilities=Object.create(null),this.actionHandler=Object.create(null),this._onComObjOnMessage=t=>{const e=t.data;if(e.targetName!==this.sourceName)return;if(e.stream)return void this.#qn(e);if(e.callback){const t=e.callbackId,i=this.callbackCapabilities[t];if(!i)throw new Error(`Cannot resolve callback ${t}`);if(delete this.callbackCapabilities[t],1===e.callback)i.resolve(e.data);else{if(2!==e.callback)throw new Error("Unexpected callback case");i.reject(n(e.reason))}return}const s=this.actionHandler[e.action];if(!s)throw new Error(`Unknown action from worker: ${e.action}`);if(e.callbackId){const t=this.sourceName,o=e.sourceName;new Promise((function(t){t(s(e.data))})).then((function(s){i.postMessage({sourceName:t,targetName:o,callback:1,callbackId:e.callbackId,data:s})}),(function(s){i.postMessage({sourceName:t,targetName:o,callback:2,callbackId:e.callbackId,reason:n(s)})}))}else e.streamId?this.#Gn(e):s(e.data)},i.addEventListener("message",this._onComObjOnMessage)}on(t,e){const i=this.actionHandler;if(i[t])throw new Error(`There is already an actionName called "${t}"`);i[t]=e}send(t,e,i){this.comObj.postMessage({sourceName:this.sourceName,targetName:this.targetName,action:t,data:e},i)}sendWithPromise(t,e,i){const n=this.callbackId++,o=new s.PromiseCapability;this.callbackCapabilities[n]=o;try{this.comObj.postMessage({sourceName:this.sourceName,targetName:this.targetName,action:t,callbackId:n,data:e},i)}catch(t){o.reject(t)}return o.promise}sendWithStream(t,e,i,o){const r=this.streamId++,a=this.sourceName,l=this.targetName,c=this.comObj;return new ReadableStream({start:i=>{const n=new s.PromiseCapability;return this.streamControllers[r]={controller:i,startCall:n,pullCall:null,cancelCall:null,isClosed:!1},c.postMessage({sourceName:a,targetName:l,action:t,streamId:r,data:e,desiredSize:i.desiredSize},o),n.promise},pull:t=>{const e=new s.PromiseCapability;return this.streamControllers[r].pullCall=e,c.postMessage({sourceName:a,targetName:l,stream:6,streamId:r,desiredSize:t.desiredSize}),e.promise},cancel:t=>{(0,s.assert)(t instanceof Error,"cancel must have a valid reason");const e=new s.PromiseCapability;return this.streamControllers[r].cancelCall=e,this.streamControllers[r].isClosed=!0,c.postMessage({sourceName:a,targetName:l,stream:1,streamId:r,reason:n(t)}),e.promise}},i)}#Gn(t){const e=t.streamId,i=this.sourceName,o=t.sourceName,r=this.comObj,a=this,l=this.actionHandler[t.action],c={enqueue(t,n=1,a){if(this.isCancelled)return;const l=this.desiredSize;this.desiredSize-=n,l>0&&this.desiredSize<=0&&(this.sinkCapability=new s.PromiseCapability,this.ready=this.sinkCapability.promise),r.postMessage({sourceName:i,targetName:o,stream:4,streamId:e,chunk:t},a)},close(){this.isCancelled||(this.isCancelled=!0,r.postMessage({sourceName:i,targetName:o,stream:3,streamId:e}),delete a.streamSinks[e])},error(t){(0,s.assert)(t instanceof Error,"error must have a valid reason"),this.isCancelled||(this.isCancelled=!0,r.postMessage({sourceName:i,targetName:o,stream:5,streamId:e,reason:n(t)}))},sinkCapability:new s.PromiseCapability,onPull:null,onCancel:null,isCancelled:!1,desiredSize:t.desiredSize,ready:null};c.sinkCapability.resolve(),c.ready=c.sinkCapability.promise,this.streamSinks[e]=c,new Promise((function(e){e(l(t.data,c))})).then((function(){r.postMessage({sourceName:i,targetName:o,stream:8,streamId:e,success:!0})}),(function(t){r.postMessage({sourceName:i,targetName:o,stream:8,streamId:e,reason:n(t)})}))}#qn(t){const e=t.streamId,i=this.sourceName,o=t.sourceName,r=this.comObj,a=this.streamControllers[e],l=this.streamSinks[e];switch(t.stream){case 8:t.success?a.startCall.resolve():a.startCall.reject(n(t.reason));break;case 7:t.success?a.pullCall.resolve():a.pullCall.reject(n(t.reason));break;case 6:if(!l){r.postMessage({sourceName:i,targetName:o,stream:7,streamId:e,success:!0});break}l.desiredSize<=0&&t.desiredSize>0&&l.sinkCapability.resolve(),l.desiredSize=t.desiredSize,new Promise((function(t){t(l.onPull?.())})).then((function(){r.postMessage({sourceName:i,targetName:o,stream:7,streamId:e,success:!0})}),(function(t){r.postMessage({sourceName:i,targetName:o,stream:7,streamId:e,reason:n(t)})}));break;case 4:if((0,s.assert)(a,"enqueue should have stream controller"),a.isClosed)break;a.controller.enqueue(t.chunk);break;case 3:if((0,s.assert)(a,"close should have stream controller"),a.isClosed)break;a.isClosed=!0,a.controller.close(),this.#Kn(a,e);break;case 5:(0,s.assert)(a,"error should have stream controller"),a.controller.error(n(t.reason)),this.#Kn(a,e);break;case 2:t.success?a.cancelCall.resolve():a.cancelCall.reject(n(t.reason)),this.#Kn(a,e);break;case 1:if(!l)break;new Promise((function(e){e(l.onCancel?.(n(t.reason)))})).then((function(){r.postMessage({sourceName:i,targetName:o,stream:2,streamId:e,success:!0})}),(function(t){r.postMessage({sourceName:i,targetName:o,stream:2,streamId:e,reason:n(t)})})),l.sinkCapability.reject(n(t.reason)),l.isCancelled=!0,delete this.streamSinks[e];break;default:throw new Error("Unexpected stream case")}}async#Kn(t,e){await Promise.allSettled([t.startCall?.promise,t.pullCall?.promise,t.cancelCall?.promise]),delete this.streamControllers[e]}destroy(){this.comObj.removeEventListener("message",this._onComObjOnMessage)}}},825:(t,e,i)=>{i.d(e,{MurmurHash3_64:()=>a});var s=i(266);const n=3285377520,o=4294901760,r=65535;class a{constructor(t){this.h1=t?4294967295&t:n,this.h2=t?4294967295&t:n}update(t){let e,i;if("string"==typeof t){e=new Uint8Array(2*t.length),i=0;for(let s=0,n=t.length;s<n;s++){const n=t.charCodeAt(s);n<=255?e[i++]=n:(e[i++]=n>>>8,e[i++]=255&n)}}else{if(!(0,s.isArrayBuffer)(t))throw new Error("Wrong data format in MurmurHash3_64_update. Input must be a string or array.");e=t.slice(),i=e.byteLength}const n=i>>2,a=i-4*n,l=new Uint32Array(e.buffer,0,n);let c=0,d=0,h=this.h1,u=this.h2;const p=3432918353,g=461845907,m=11601,f=13715;for(let t=0;t<n;t++)1&t?(c=l[t],c=c*p&o|c*m&r,c=c<<15|c>>>17,c=c*g&o|c*f&r,h^=c,h=h<<13|h>>>19,h=5*h+3864292196):(d=l[t],d=d*p&o|d*m&r,d=d<<15|d>>>17,d=d*g&o|d*f&r,u^=d,u=u<<13|u>>>19,u=5*u+3864292196);switch(c=0,a){case 3:c^=e[4*n+2]<<16;case 2:c^=e[4*n+1]<<8;case 1:c^=e[4*n],c=c*p&o|c*m&r,c=c<<15|c>>>17,c=c*g&o|c*f&r,1&n?h^=c:u^=c}this.h1=h,this.h2=u}hexdigest(){let t=this.h1,e=this.h2;return t^=e>>>1,t=3981806797*t&o|36045*t&r,e=4283543511*e&o|(2950163797*(e<<16|t>>>16)&o)>>>16,t^=e>>>1,t=444984403*t&o|60499*t&r,e=3301882366*e&o|(3120437893*(e<<16|t>>>16)&o)>>>16,t^=e>>>1,(t>>>0).toString(16).padStart(8,"0")+(e>>>0).toString(16).padStart(8,"0")}}},266:(t,e,i)=>{i.d(e,{AbortException:()=>N,AnnotationBorderStyleType:()=>b,AnnotationEditorParamsType:()=>u,AnnotationEditorPrefix:()=>d,AnnotationEditorType:()=>h,AnnotationMode:()=>c,AnnotationPrefix:()=>Q,AnnotationType:()=>f,BaseException:()=>B,CMapCompressionType:()=>y,FONT_IDENTITY_MATRIX:()=>o,FeatureTest:()=>$,FormatError:()=>F,IDENTITY_MATRIX:()=>n,ImageKind:()=>m,InvalidPDFException:()=>R,LINE_FACTOR:()=>a,MAX_IMAGE_SIZE_TO_CACHE:()=>r,MissingPDFException:()=>D,OPS:()=>w,PasswordException:()=>L,PasswordResponses:()=>k,PermissionFlag:()=>p,PromiseCapability:()=>G,RenderingIntentFlag:()=>l,TextRenderingMode:()=>g,UnexpectedResponseException:()=>O,UnknownErrorException:()=>P,Util:()=>V,VerbosityLevel:()=>v,assert:()=>_,bytesToString:()=>H,createValidAbsoluteUrl:()=>M,getUuid:()=>J,getVerbosityLevel:()=>C,info:()=>A,isArrayBuffer:()=>q,isNodeJS:()=>s,normalizeUnicode:()=>Y,objectFromMap:()=>j,setVerbosityLevel:()=>E,shadow:()=>I,string32:()=>U,stringToBytes:()=>z,unreachable:()=>T,warn:()=>S});const s=!("object"!=typeof process||process+""!="[object process]"||process.versions.nw||process.versions.electron&&process.type&&"browser"!==process.type),n=[1,0,0,1,0,0],o=[.001,0,0,.001,0,0],r=1e7,a=1.35,l={ANY:1,DISPLAY:2,PRINT:4,SAVE:8,ANNOTATIONS_FORMS:16,ANNOTATIONS_STORAGE:32,ANNOTATIONS_DISABLE:64,OPLIST:256},c={DISABLE:0,ENABLE:1,ENABLE_FORMS:2,ENABLE_STORAGE:3},d="pdfjs_internal_editor_",h={DISABLE:-1,NONE:0,FREETEXT:3,HIGHLIGHT:9,STAMP:13,INK:15},u={RESIZE:1,CREATE:2,FREETEXT_SIZE:11,FREETEXT_COLOR:12,FREETEXT_OPACITY:13,INK_COLOR:21,INK_THICKNESS:22,INK_OPACITY:23,HIGHLIGHT_COLOR:31,HIGHLIGHT_DEFAULT_COLOR:32},p={PRINT:4,MODIFY_CONTENTS:8,COPY:16,MODIFY_ANNOTATIONS:32,FILL_INTERACTIVE_FORMS:256,COPY_FOR_ACCESSIBILITY:512,ASSEMBLE:1024,PRINT_HIGH_QUALITY:2048},g={FILL:0,STROKE:1,FILL_STROKE:2,INVISIBLE:3,FILL_ADD_TO_PATH:4,STROKE_ADD_TO_PATH:5,FILL_STROKE_ADD_TO_PATH:6,ADD_TO_PATH:7,FILL_STROKE_MASK:3,ADD_TO_PATH_FLAG:4},m={GRAYSCALE_1BPP:1,RGB_24BPP:2,RGBA_32BPP:3},f={TEXT:1,LINK:2,FREETEXT:3,LINE:4,SQUARE:5,CIRCLE:6,POLYGON:7,POLYLINE:8,HIGHLIGHT:9,UNDERLINE:10,SQUIGGLY:11,STRIKEOUT:12,STAMP:13,CARET:14,INK:15,POPUP:16,FILEATTACHMENT:17,SOUND:18,MOVIE:19,WIDGET:20,SCREEN:21,PRINTERMARK:22,TRAPNET:23,WATERMARK:24,THREED:25,REDACT:26},b={SOLID:1,DASHED:2,BEVELED:3,INSET:4,UNDERLINE:5},v={ERRORS:0,WARNINGS:1,INFOS:5},y={NONE:0,BINARY:1},w={dependency:1,setLineWidth:2,setLineCap:3,setLineJoin:4,setMiterLimit:5,setDash:6,setRenderingIntent:7,setFlatness:8,setGState:9,save:10,restore:11,transform:12,moveTo:13,lineTo:14,curveTo:15,curveTo2:16,curveTo3:17,closePath:18,rectangle:19,stroke:20,closeStroke:21,fill:22,eoFill:23,fillStroke:24,eoFillStroke:25,closeFillStroke:26,closeEOFillStroke:27,endPath:28,clip:29,eoClip:30,beginText:31,endText:32,setCharSpacing:33,setWordSpacing:34,setHScale:35,setLeading:36,setFont:37,setTextRenderingMode:38,setTextRise:39,moveText:40,setLeadingMoveText:41,setTextMatrix:42,nextLine:43,showText:44,showSpacedText:45,nextLineShowText:46,nextLineSetSpacingShowText:47,setCharWidth:48,setCharWidthAndBounds:49,setStrokeColorSpace:50,setFillColorSpace:51,setStrokeColor:52,setStrokeColorN:53,setFillColor:54,setFillColorN:55,setStrokeGray:56,setFillGray:57,setStrokeRGBColor:58,setFillRGBColor:59,setStrokeCMYKColor:60,setFillCMYKColor:61,shadingFill:62,beginInlineImage:63,beginImageData:64,endInlineImage:65,paintXObject:66,markPoint:67,markPointProps:68,beginMarkedContent:69,beginMarkedContentProps:70,endMarkedContent:71,beginCompat:72,endCompat:73,paintFormXObjectBegin:74,paintFormXObjectEnd:75,beginGroup:76,endGroup:77,beginAnnotation:80,endAnnotation:81,paintImageMaskXObject:83,paintImageMaskXObjectGroup:84,paintImageXObject:85,paintInlineImageXObject:86,paintInlineImageXObjectGroup:87,paintImageXObjectRepeat:88,paintImageMaskXObjectRepeat:89,paintSolidColorImageMask:90,constructPath:91},k={NEED_PASSWORD:1,INCORRECT_PASSWORD:2};let x=v.WARNINGS;function E(t){Number.isInteger(t)&&(x=t)}function C(){return x}function A(t){x>=v.INFOS&&console.log(`Info: ${t}`)}function S(t){x>=v.WARNINGS&&console.log(`Warning: ${t}`)}function T(t){throw new Error(t)}function _(t,e){t||T(e)}function M(t,e=null,i=null){if(!t)return null;try{if(i&&"string"==typeof t){if(i.addDefaultProtocol&&t.startsWith("www.")){const e=t.match(/\./g);e?.length>=2&&(t=`http://${t}`)}if(i.tryConvertEncoding)try{t=decodeURIComponent(escape(t))}catch{}}const s=e?new URL(t,e):new URL(t);if(function(t){switch(t?.protocol){case"http:":case"https:":case"ftp:":case"mailto:":case"tel:":return!0;default:return!1}}(s))return s}catch{}return null}function I(t,e,i,s=!1){return Object.defineProperty(t,e,{value:i,enumerable:!s,configurable:!0,writable:!1}),i}const B=function(){function t(e,i){this.constructor===t&&T("Cannot initialize BaseException."),this.message=e,this.name=i}return t.prototype=new Error,t.constructor=t,t}();class L extends B{constructor(t,e){super(t,"PasswordException"),this.code=e}}class P extends B{constructor(t,e){super(t,"UnknownErrorException"),this.details=e}}class R extends B{constructor(t){super(t,"InvalidPDFException")}}class D extends B{constructor(t){super(t,"MissingPDFException")}}class O extends B{constructor(t,e){super(t,"UnexpectedResponseException"),this.status=e}}class F extends B{constructor(t){super(t,"FormatError")}}class N extends B{constructor(t){super(t,"AbortException")}}function H(t){"object"==typeof t&&void 0!==t?.length||T("Invalid argument for bytesToString");const e=t.length,i=8192;if(e<i)return String.fromCharCode.apply(null,t);const s=[];for(let n=0;n<e;n+=i){const o=Math.min(n+i,e),r=t.subarray(n,o);s.push(String.fromCharCode.apply(null,r))}return s.join("")}function z(t){"string"!=typeof t&&T("Invalid argument for stringToBytes");const e=t.length,i=new Uint8Array(e);for(let s=0;s<e;++s)i[s]=255&t.charCodeAt(s);return i}function U(t){return String.fromCharCode(t>>24&255,t>>16&255,t>>8&255,255&t)}function j(t){const e=Object.create(null);for(const[i,s]of t)e[i]=s;return e}class ${static get isLittleEndian(){return I(this,"isLittleEndian",function(){const t=new Uint8Array(4);return t[0]=1,1===new Uint32Array(t.buffer,0,1)[0]}())}static get isEvalSupported(){return I(this,"isEvalSupported",function(){try{return new Function(""),!0}catch{return!1}}())}static get isOffscreenCanvasSupported(){return I(this,"isOffscreenCanvasSupported","undefined"!=typeof OffscreenCanvas)}static get platform(){return"undefined"!=typeof navigator&&"string"==typeof navigator?.platform?I(this,"platform",{isMac:navigator.platform.includes("Mac")}):I(this,"platform",{isMac:!1})}static get isCSSRoundSupported(){return I(this,"isCSSRoundSupported",globalThis.CSS?.supports?.("width: round(1.5px, 1px)"))}}const W=[...Array(256).keys()].map((t=>t.toString(16).padStart(2,"0")));class V{static makeHexColor(t,e,i){return`#${W[t]}${W[e]}${W[i]}`}static scaleMinMax(t,e){let i;t[0]?(t[0]<0&&(i=e[0],e[0]=e[1],e[1]=i),e[0]*=t[0],e[1]*=t[0],t[3]<0&&(i=e[2],e[2]=e[3],e[3]=i),e[2]*=t[3],e[3]*=t[3]):(i=e[0],e[0]=e[2],e[2]=i,i=e[1],e[1]=e[3],e[3]=i,t[1]<0&&(i=e[2],e[2]=e[3],e[3]=i),e[2]*=t[1],e[3]*=t[1],t[2]<0&&(i=e[0],e[0]=e[1],e[1]=i),e[0]*=t[2],e[1]*=t[2]),e[0]+=t[4],e[1]+=t[4],e[2]+=t[5],e[3]+=t[5]}static transform(t,e){return[t[0]*e[0]+t[2]*e[1],t[1]*e[0]+t[3]*e[1],t[0]*e[2]+t[2]*e[3],t[1]*e[2]+t[3]*e[3],t[0]*e[4]+t[2]*e[5]+t[4],t[1]*e[4]+t[3]*e[5]+t[5]]}static applyTransform(t,e){return[t[0]*e[0]+t[1]*e[2]+e[4],t[0]*e[1]+t[1]*e[3]+e[5]]}static applyInverseTransform(t,e){const i=e[0]*e[3]-e[1]*e[2];return[(t[0]*e[3]-t[1]*e[2]+e[2]*e[5]-e[4]*e[3])/i,(-t[0]*e[1]+t[1]*e[0]+e[4]*e[1]-e[5]*e[0])/i]}static getAxialAlignedBoundingBox(t,e){const i=this.applyTransform(t,e),s=this.applyTransform(t.slice(2,4),e),n=this.applyTransform([t[0],t[3]],e),o=this.applyTransform([t[2],t[1]],e);return[Math.min(i[0],s[0],n[0],o[0]),Math.min(i[1],s[1],n[1],o[1]),Math.max(i[0],s[0],n[0],o[0]),Math.max(i[1],s[1],n[1],o[1])]}static inverseTransform(t){const e=t[0]*t[3]-t[1]*t[2];return[t[3]/e,-t[1]/e,-t[2]/e,t[0]/e,(t[2]*t[5]-t[4]*t[3])/e,(t[4]*t[1]-t[5]*t[0])/e]}static singularValueDecompose2dScale(t){const e=[t[0],t[2],t[1],t[3]],i=t[0]*e[0]+t[1]*e[2],s=t[0]*e[1]+t[1]*e[3],n=t[2]*e[0]+t[3]*e[2],o=t[2]*e[1]+t[3]*e[3],r=(i+o)/2,a=Math.sqrt((i+o)**2-4*(i*o-n*s))/2,l=r+a||1,c=r-a||1;return[Math.sqrt(l),Math.sqrt(c)]}static normalizeRect(t){const e=t.slice(0);return t[0]>t[2]&&(e[0]=t[2],e[2]=t[0]),t[1]>t[3]&&(e[1]=t[3],e[3]=t[1]),e}static intersect(t,e){const i=Math.max(Math.min(t[0],t[2]),Math.min(e[0],e[2])),s=Math.min(Math.max(t[0],t[2]),Math.max(e[0],e[2]));if(i>s)return null;const n=Math.max(Math.min(t[1],t[3]),Math.min(e[1],e[3])),o=Math.min(Math.max(t[1],t[3]),Math.max(e[1],e[3]));return n>o?null:[i,n,s,o]}static bezierBoundingBox(t,e,i,s,n,o,r,a){const l=[],c=[[],[]];let d,h,u,p,g,m,f,b;for(let c=0;c<2;++c)if(0===c?(h=6*t-12*i+6*n,d=-3*t+9*i-9*n+3*r,u=3*i-3*t):(h=6*e-12*s+6*o,d=-3*e+9*s-9*o+3*a,u=3*s-3*e),Math.abs(d)<1e-12){if(Math.abs(h)<1e-12)continue;p=-u/h,0<p&&p<1&&l.push(p)}else f=h*h-4*u*d,b=Math.sqrt(f),f<0||(g=(-h+b)/(2*d),0<g&&g<1&&l.push(g),m=(-h-b)/(2*d),0<m&&m<1&&l.push(m));let v,y=l.length;const w=y;for(;y--;)p=l[y],v=1-p,c[0][y]=v*v*v*t+3*v*v*p*i+3*v*p*p*n+p*p*p*r,c[1][y]=v*v*v*e+3*v*v*p*s+3*v*p*p*o+p*p*p*a;return c[0][w]=t,c[1][w]=e,c[0][w+1]=r,c[1][w+1]=a,c[0].length=c[1].length=w+2,[Math.min(...c[0]),Math.min(...c[1]),Math.max(...c[0]),Math.max(...c[1])]}}function q(t){return"object"==typeof t&&void 0!==t?.byteLength}class G{#Xn=!1;constructor(){this.promise=new Promise(((t,e)=>{this.resolve=e=>{this.#Xn=!0,t(e)},this.reject=t=>{this.#Xn=!0,e(t)}}))}get settled(){return this.#Xn}}let K=null,X=null;function Y(t){return K||(K=/([\u00a0\u00b5\u037e\u0eb3\u2000-\u200a\u202f\u2126\ufb00-\ufb04\ufb06\ufb20-\ufb36\ufb38-\ufb3c\ufb3e\ufb40-\ufb41\ufb43-\ufb44\ufb46-\ufba1\ufba4-\ufba9\ufbae-\ufbb1\ufbd3-\ufbdc\ufbde-\ufbe7\ufbea-\ufbf8\ufbfc-\ufbfd\ufc00-\ufc5d\ufc64-\ufcf1\ufcf5-\ufd3d\ufd88\ufdf4\ufdfa-\ufdfb\ufe71\ufe77\ufe79\ufe7b\ufe7d]+)|(\ufb05+)/gu,X=new Map([["ﬅ","ſt"]])),t.replaceAll(K,((t,e,i)=>e?e.normalize("NFKC"):X.get(i)))}function J(){if("undefined"!=typeof crypto&&"function"==typeof crypto?.randomUUID)return crypto.randomUUID();const t=new Uint8Array(32);if("undefined"!=typeof crypto&&"function"==typeof crypto?.getRandomValues)crypto.getRandomValues(t);else for(let e=0;e<32;e++)t[e]=Math.floor(255*Math.random());return H(t)}const Q="pdfjs_internal_id_"}},o={};function p(t){var e=o[t];if(void 0!==e)return e.exports;var i=o[t]={exports:{}};return n[t](i,i.exports,p),i.exports}c="function"==typeof Symbol?Symbol("webpack queues"):"__webpack_queues__",d="function"==typeof Symbol?Symbol("webpack exports"):"__webpack_exports__",h="function"==typeof Symbol?Symbol("webpack error"):"__webpack_error__",u=t=>{t&&t.d<1&&(t.d=1,t.forEach((t=>t.r--)),t.forEach((t=>t.r--?t.r++:t())))},p.a=(t,e,i)=>{var s;i&&((s=[]).d=-1);var n,o,r,a=new Set,l=t.exports,p=new Promise(((t,e)=>{r=e,o=t}));p[d]=l,p[c]=t=>(s&&t(s),a.forEach(t),p.catch((t=>{}))),t.exports=p,e((t=>{var e;n=(t=>t.map((t=>{if(null!==t&&"object"==typeof t){if(t[c])return t;if(t.then){var e=[];e.d=0,t.then((t=>{i[d]=t,u(e)}),(t=>{i[h]=t,u(e)}));var i={};return i[c]=t=>t(e),i}}var s={};return s[c]=t=>{},s[d]=t,s})))(t);var i=()=>n.map((t=>{if(t[h])throw t[h];return t[d]})),o=new Promise((t=>{(e=()=>t(i)).r=0;var o=t=>t!==s&&!a.has(t)&&(a.add(t),t&&!t.d&&(e.r++,t.push(e)));n.map((t=>t[c](o)))}));return e.r?o:i()}),(t=>(t?r(p[h]=t):o(l),u(s)))),s&&s.d<0&&(s.d=0)},p.d=(t,e)=>{for(var i in e)p.o(e,i)&&!p.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:e[i]})},p.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e);var r=p(907),a=((r=globalThis.pdfjsLib=await(globalThis.pdfjsLibPromise=r)).AbortException,r.AnnotationEditorLayer,r.AnnotationEditorParamsType,r.AnnotationEditorType,r.AnnotationEditorUIManager,r.AnnotationLayer,r.AnnotationMode,r.CMapCompressionType,r.ColorPicker,r.DOMSVGFactory,r.DrawLayer,r.FeatureTest,r.GlobalWorkerOptions),l=(r.ImageKind,r.InvalidPDFException,r.MissingPDFException,r.OPS,r.Outliner,r.PDFDataRangeTransport,r.PDFDateString,r.PDFWorker,r.PasswordResponses,r.PermissionFlag,r.PixelsPerInch,r.PromiseCapability,r.RenderingCancelledException,r.UnexpectedResponseException,r.Util,r.VerbosityLevel,r.XfaLayer,r.build,r.createValidAbsoluteUrl,r.fetchData,r.getDocument);r.getFilenameFromUrl,r.getPdfFilenameFromUrl,r.getXfaPageViewport,r.isDataScheme,r.isPdfFile,r.noContextMenu,r.normalizeUnicode,r.renderTextLayer,r.setLayerDimensions,r.shadow,r.updateTextLayer,r.version,s()}catch(g){s(g)}var c,d,h,u}),1)}},o={};function r(t){var e=o[t];if(void 0!==e)return e.exports;var i=o[t]={exports:{}};return n[t].call(i.exports,i,i.exports,r),i.exports}t="function"==typeof Symbol?Symbol("webpack queues"):"__webpack_queues__",e="function"==typeof Symbol?Symbol("webpack exports"):"__webpack_exports__",i="function"==typeof Symbol?Symbol("webpack error"):"__webpack_error__",s=t=>{t&&t.d<1&&(t.d=1,t.forEach((t=>t.r--)),t.forEach((t=>t.r--?t.r++:t())))},r.a=(n,o,r)=>{var a;r&&((a=[]).d=-1);var l,c,d,h=new Set,u=n.exports,p=new Promise(((t,e)=>{d=e,c=t}));p[e]=u,p[t]=t=>(a&&t(a),h.forEach(t),p.catch((t=>{}))),n.exports=p,o((n=>{var o;l=(n=>n.map((n=>{if(null!==n&&"object"==typeof n){if(n[t])return n;if(n.then){var o=[];o.d=0,n.then((t=>{r[e]=t,s(o)}),(t=>{r[i]=t,s(o)}));var r={};return r[t]=t=>t(o),r}}var a={};return a[t]=t=>{},a[e]=n,a})))(n);var r=()=>l.map((t=>{if(t[i])throw t[i];return t[e]})),c=new Promise((e=>{(o=()=>e(r)).r=0;var i=t=>t!==a&&!h.has(t)&&(h.add(t),t&&!t.d&&(o.r++,t.push(o)));l.map((e=>e[t](i)))}));return o.r?c:r()}),(t=>(t?d(p[i]=t):c(u),s(a)))),a&&a.d<0&&(a.d=0)},r.d=(t,e)=>{for(var i in e)r.o(e,i)&&!r.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:e[i]})},r.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r(316)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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bEYsWUFBWSxFQUFNaUgsSUFBSzQySCxFQUFXMzRILElBRTFFLEVDTkRnNUgsRUFBb0I5K0gsRUFBSSxDQUFDNDRELEVBQUs0dUQsSUFBVXJwSCxPQUFPK0IsVUFBVUMsZUFBZWtDLEtBQUt1MkQsRUFBSzR1RCxHQ0d4RHNYLEVBQW9CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdHlwZXNjcmlwdC93ZWJwYWNrL3J1bnRpbWUvYXN5bmMgbW9kdWxlIiwid2VicGFjazovL3R5cGVzY3JpcHQvLi9ub2RlX21vZHVsZXMvQGVkaXRvcmpzL3F1b3RlL2Rpc3QvcXVvdGUudW1kLmpzIiwid2VicGFjazovL3R5cGVzY3JpcHQvLi9ub2RlX21vZHVsZXMvZWRpdG9yanMtdW5kby9kaXN0L2J1bmRsZS5qcyIsIndlYnBhY2s6Ly90eXBlc2NyaXB0Ly4vQ3VzdG9tU3R5bGVUb29sLnRzIiwid2VicGFjazovL3R5cGVzY3JpcHQvLi9Ob3RlVG9vbC50cyIsIndlYnBhY2s6Ly90eXBlc2NyaXB0Ly4vUmVuZGVyUERGLnRzIiwid2VicGFjazovL3R5cGVzY3JpcHQvLi9hcGlfcmVxdWVzdHMudHMiLCJ3ZWJwYWNrOi8vdHlwZXNjcmlwdC8uL2VkaXRvci50cyIsIndlYnBhY2s6Ly90eXBlc2NyaXB0Ly4vdG9vbHMudHMiLCJ3ZWJwYWNrOi8vdHlwZXNjcmlwdC8uL25vZGVfbW9kdWxlcy9AZWRpdG9yanMvZWRpdG9yanMvZGlzdC9lZGl0b3Jqcy5tanMiLCJ3ZWJwYWNrOi8vdHlwZXNjcmlwdC8uL25vZGVfbW9kdWxlcy9AZWRpdG9yanMvaGVhZGVyL2Rpc3QvaGVhZGVyLm1qcyIsIndlYnBhY2s6Ly90eXBlc2NyaXB0Ly4vbm9kZV9tb2R1bGVzL0BlZGl0b3Jqcy9saXN0L2Rpc3QvbGlzdC5tanMiLCJ3ZWJwYWNrOi8vdHlwZXNjcmlwdC8uL25vZGVfbW9kdWxlcy9AZWRpdG9yanMvcmF3L2Rpc3QvcmF3Lm1qcyIsIndlYnBhY2s6Ly90eXBlc2NyaXB0Ly4vbm9kZV9tb2R1bGVzL3BkZmpzLWRpc3QvYnVpbGQvcGRmLm1qcyIsIndlYnBhY2s6Ly90eXBlc2NyaXB0L3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL3R5cGVzY3JpcHQvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL3R5cGVzY3JpcHQvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly90eXBlc2NyaXB0L3dlYnBhY2svc3RhcnR1cCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgd2VicGFja1F1ZXVlcyA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiA/IFN5bWJvbChcIndlYnBhY2sgcXVldWVzXCIpIDogXCJfX3dlYnBhY2tfcXVldWVzX19cIjtcbnZhciB3ZWJwYWNrRXhwb3J0cyA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiA/IFN5bWJvbChcIndlYnBhY2sgZXhwb3J0c1wiKSA6IFwiX193ZWJwYWNrX2V4cG9ydHNfX1wiO1xudmFyIHdlYnBhY2tFcnJvciA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiA/IFN5bWJvbChcIndlYnBhY2sgZXJyb3JcIikgOiBcIl9fd2VicGFja19lcnJvcl9fXCI7XG52YXIgcmVzb2x2ZVF1ZXVlID0gKHF1ZXVlKSA9PiB7XG5cdGlmKHF1ZXVlICYmIHF1ZXVlLmQgPCAxKSB7XG5cdFx0cXVldWUuZCA9IDE7XG5cdFx0cXVldWUuZm9yRWFjaCgoZm4pID0+IChmbi5yLS0pKTtcblx0XHRxdWV1ZS5mb3JFYWNoKChmbikgPT4gKGZuLnItLSA/IGZuLnIrKyA6IGZuKCkpKTtcblx0fVxufVxudmFyIHdyYXBEZXBzID0gKGRlcHMpID0+IChkZXBzLm1hcCgoZGVwKSA9PiB7XG5cdGlmKGRlcCAhPT0gbnVsbCAmJiB0eXBlb2YgZGVwID09PSBcIm9iamVjdFwiKSB7XG5cdFx0aWYoZGVwW3dlYnBhY2tRdWV1ZXNdKSByZXR1cm4gZGVwO1xuXHRcdGlmKGRlcC50aGVuKSB7XG5cdFx0XHR2YXIgcXVldWUgPSBbXTtcblx0XHRcdHF1ZXVlLmQgPSAwO1xuXHRcdFx0ZGVwLnRoZW4oKHIpID0+IHtcblx0XHRcdFx0b2JqW3dlYnBhY2tFeHBvcnRzXSA9IHI7XG5cdFx0XHRcdHJlc29sdmVRdWV1ZShxdWV1ZSk7XG5cdFx0XHR9LCAoZSkgPT4ge1xuXHRcdFx0XHRvYmpbd2VicGFja0Vycm9yXSA9IGU7XG5cdFx0XHRcdHJlc29sdmVRdWV1ZShxdWV1ZSk7XG5cdFx0XHR9KTtcblx0XHRcdHZhciBvYmogPSB7fTtcblx0XHRcdG9ialt3ZWJwYWNrUXVldWVzXSA9IChmbikgPT4gKGZuKHF1ZXVlKSk7XG5cdFx0XHRyZXR1cm4gb2JqO1xuXHRcdH1cblx0fVxuXHR2YXIgcmV0ID0ge307XG5cdHJldFt3ZWJwYWNrUXVldWVzXSA9IHggPT4ge307XG5cdHJldFt3ZWJwYWNrRXhwb3J0c10gPSBkZXA7XG5cdHJldHVybiByZXQ7XG59KSk7XG5fX3dlYnBhY2tfcmVxdWlyZV9fLmEgPSAobW9kdWxlLCBib2R5LCBoYXNBd2FpdCkgPT4ge1xuXHR2YXIgcXVldWU7XG5cdGhhc0F3YWl0ICYmICgocXVldWUgPSBbXSkuZCA9IC0xKTtcblx0dmFyIGRlcFF1ZXVlcyA9IG5ldyBTZXQoKTtcblx0dmFyIGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cztcblx0dmFyIGN1cnJlbnREZXBzO1xuXHR2YXIgb3V0ZXJSZXNvbHZlO1xuXHR2YXIgcmVqZWN0O1xuXHR2YXIgcHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWopID0+IHtcblx0XHRyZWplY3QgPSByZWo7XG5cdFx0b3V0ZXJSZXNvbHZlID0gcmVzb2x2ZTtcblx0fSk7XG5cdHByb21pc2Vbd2VicGFja0V4cG9ydHNdID0gZXhwb3J0cztcblx0cHJvbWlzZVt3ZWJwYWNrUXVldWVzXSA9IChmbikgPT4gKHF1ZXVlICYmIGZuKHF1ZXVlKSwgZGVwUXVldWVzLmZvckVhY2goZm4pLCBwcm9taXNlW1wiY2F0Y2hcIl0oeCA9PiB7fSkpO1xuXHRtb2R1bGUuZXhwb3J0cyA9IHByb21pc2U7XG5cdGJvZHkoKGRlcHMpID0+IHtcblx0XHRjdXJyZW50RGVwcyA9IHdyYXBEZXBzKGRlcHMpO1xuXHRcdHZhciBmbjtcblx0XHR2YXIgZ2V0UmVzdWx0ID0gKCkgPT4gKGN1cnJlbnREZXBzLm1hcCgoZCkgPT4ge1xuXHRcdFx0aWYoZFt3ZWJwYWNrRXJyb3JdKSB0aHJvdyBkW3dlYnBhY2tFcnJvcl07XG5cdFx0XHRyZXR1cm4gZFt3ZWJwYWNrRXhwb3J0c107XG5cdFx0fSkpXG5cdFx0dmFyIHByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuXHRcdFx0Zm4gPSAoKSA9PiAocmVzb2x2ZShnZXRSZXN1bHQpKTtcblx0XHRcdGZuLnIgPSAwO1xuXHRcdFx0dmFyIGZuUXVldWUgPSAocSkgPT4gKHEgIT09IHF1ZXVlICYmICFkZXBRdWV1ZXMuaGFzKHEpICYmIChkZXBRdWV1ZXMuYWRkKHEpLCBxICYmICFxLmQgJiYgKGZuLnIrKywgcS5wdXNoKGZuKSkpKTtcblx0XHRcdGN1cnJlbnREZXBzLm1hcCgoZGVwKSA9PiAoZGVwW3dlYnBhY2tRdWV1ZXNdKGZuUXVldWUpKSk7XG5cdFx0fSk7XG5cdFx0cmV0dXJuIGZuLnIgPyBwcm9taXNlIDogZ2V0UmVzdWx0KCk7XG5cdH0sIChlcnIpID0+ICgoZXJyID8gcmVqZWN0KHByb21pc2Vbd2VicGFja0Vycm9yXSA9IGVycikgOiBvdXRlclJlc29sdmUoZXhwb3J0cykpLCByZXNvbHZlUXVldWUocXVldWUpKSk7XG5cdHF1ZXVlICYmIHF1ZXVlLmQgPCAwICYmIChxdWV1ZS5kID0gMCk7XG59OyIsIihmdW5jdGlvbigpe1widXNlIHN0cmljdFwiO3RyeXtpZih0eXBlb2YgZG9jdW1lbnQ8XCJ1XCIpe3ZhciB0PWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTt0LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKFwiLmNkeC1xdW90ZS1pY29uIHN2Z3t0cmFuc2Zvcm06cm90YXRlKDE4MGRlZyl9LmNkeC1xdW90ZXttYXJnaW46MH0uY2R4LXF1b3RlX190ZXh0e21pbi1oZWlnaHQ6MTU4cHg7bWFyZ2luLWJvdHRvbToxMHB4fS5jZHgtcXVvdGUgW2NvbnRlbnRFZGl0YWJsZT10cnVlXVtkYXRhLXBsYWNlaG9sZGVyXTpiZWZvcmV7cG9zaXRpb246YWJzb2x1dGU7Y29udGVudDphdHRyKGRhdGEtcGxhY2Vob2xkZXIpO2NvbG9yOiM3MDc2ODQ7Zm9udC13ZWlnaHQ6NDAwO29wYWNpdHk6MH0uY2R4LXF1b3RlIFtjb250ZW50RWRpdGFibGU9dHJ1ZV1bZGF0YS1wbGFjZWhvbGRlcl06ZW1wdHk6YmVmb3Jle29wYWNpdHk6MX0uY2R4LXF1b3RlIFtjb250ZW50RWRpdGFibGU9dHJ1ZV1bZGF0YS1wbGFjZWhvbGRlcl06ZW1wdHk6Zm9jdXM6YmVmb3Jle29wYWNpdHk6MH0uY2R4LXF1b3RlLXNldHRpbmdze2Rpc3BsYXk6ZmxleH0uY2R4LXF1b3RlLXNldHRpbmdzIC5jZHgtc2V0dGluZ3MtYnV0dG9ue3dpZHRoOjUwJX1cIikpLGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQodCl9fWNhdGNoKGUpe2NvbnNvbGUuZXJyb3IoXCJ2aXRlLXBsdWdpbi1jc3MtaW5qZWN0ZWQtYnktanNcIixlKX19KSgpO1xuKGZ1bmN0aW9uKHMsbyl7dHlwZW9mIGV4cG9ydHM9PVwib2JqZWN0XCImJnR5cGVvZiBtb2R1bGU8XCJ1XCI/bW9kdWxlLmV4cG9ydHM9bygpOnR5cGVvZiBkZWZpbmU9PVwiZnVuY3Rpb25cIiYmZGVmaW5lLmFtZD9kZWZpbmUobyk6KHM9dHlwZW9mIGdsb2JhbFRoaXM8XCJ1XCI/Z2xvYmFsVGhpczpzfHxzZWxmLHMuUXVvdGU9bygpKX0pKHRoaXMsZnVuY3Rpb24oKXtcInVzZSBzdHJpY3RcIjtjb25zdCBzPVwiXCIsbz0nPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgd2lkdGg9XCIyNFwiIGhlaWdodD1cIjI0XCIgZmlsbD1cIm5vbmVcIiB2aWV3Qm94PVwiMCAwIDI0IDI0XCI+PHBhdGggc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgc3Ryb2tlLWxpbmVjYXA9XCJyb3VuZFwiIHN0cm9rZS13aWR0aD1cIjJcIiBkPVwiTTE4IDdMNiA3XCIvPjxwYXRoIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIiBzdHJva2Utd2lkdGg9XCIyXCIgZD1cIk0xOCAxN0g2XCIvPjxwYXRoIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIiBzdHJva2Utd2lkdGg9XCIyXCIgZD1cIk0xNiAxMkw4IDEyXCIvPjwvc3ZnPicsYz0nPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgd2lkdGg9XCIyNFwiIGhlaWdodD1cIjI0XCIgZmlsbD1cIm5vbmVcIiB2aWV3Qm94PVwiMCAwIDI0IDI0XCI+PHBhdGggc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgc3Ryb2tlLWxpbmVjYXA9XCJyb3VuZFwiIHN0cm9rZS13aWR0aD1cIjJcIiBkPVwiTTE3IDdMNSA3XCIvPjxwYXRoIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIiBzdHJva2Utd2lkdGg9XCIyXCIgZD1cIk0xNyAxN0g1XCIvPjxwYXRoIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIiBzdHJva2Utd2lkdGg9XCIyXCIgZD1cIk0xMyAxMkw1IDEyXCIvPjwvc3ZnPicsbD0nPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgd2lkdGg9XCIyNFwiIGhlaWdodD1cIjI0XCIgZmlsbD1cIm5vbmVcIiB2aWV3Qm94PVwiMCAwIDI0IDI0XCI+PHBhdGggc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgc3Ryb2tlLWxpbmVjYXA9XCJyb3VuZFwiIHN0cm9rZS1saW5lam9pbj1cInJvdW5kXCIgc3Ryb2tlLXdpZHRoPVwiMlwiIGQ9XCJNMTAgMTAuODE4Mkw5IDEwLjgxODJDOC44MDIyMiAxMC44MTgyIDguNjA4ODggMTAuNzY0OSA4LjQ0NDQzIDEwLjY2NUM4LjI3OTk4IDEwLjU2NTEgOC4xNTE4MSAxMC40MjMxIDguMDc2MTIgMTAuMjU3QzguMDAwNDMgMTAuMDkwOSA3Ljk4MDYzIDkuOTA4MDggOC4wMTkyMiA5LjczMTc0QzguMDU3OCA5LjU1NTM5IDguMTUzMDQgOS4zOTM0MSA4LjI5Mjg5IDkuMjY2MjdDOC40MzI3NSA5LjEzOTEzIDguNjEwOTMgOS4wNTI1NSA4LjgwNDkxIDkuMDE3NDdDOC45OTg4OSA4Ljk4MjM5IDkuMTk5OTYgOS4wMDAzOSA5LjM4MjY4IDkuMDY5MkM5LjU2NTQxIDkuMTM4MDEgOS43MjE1OSA5LjI1NDUzIDkuODMxNDcgOS40MDQwM0M5Ljk0MTM1IDkuNTUzNTMgMTAgOS43MjkyOSAxMCA5LjkwOTA5TDEwIDEyLjE4MThDMTAgMTIuNjY0IDkuNzg5MjkgMTMuMTI2NSA5LjQxNDIxIDEzLjQ2NzVDOS4wMzkxNCAxMy44MDg0IDguNTMwNDMgMTQgOCAxNFwiLz48cGF0aCBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIgc3Ryb2tlLWxpbmVqb2luPVwicm91bmRcIiBzdHJva2Utd2lkdGg9XCIyXCIgZD1cIk0xNiAxMC44MTgyTDE1IDEwLjgxODJDMTQuODAyMiAxMC44MTgyIDE0LjYwODkgMTAuNzY0OSAxNC40NDQ0IDEwLjY2NUMxNC4yOCAxMC41NjUxIDE0LjE1MTggMTAuNDIzMSAxNC4wNzYxIDEwLjI1N0MxNC4wMDA0IDEwLjA5MDkgMTMuOTgwNiA5LjkwODA4IDE0LjAxOTIgOS43MzE3NEMxNC4wNTc4IDkuNTU1MzkgMTQuMTUzIDkuMzkzNDEgMTQuMjkyOSA5LjI2NjI3QzE0LjQzMjcgOS4xMzkxMyAxNC42MTA5IDkuMDUyNTUgMTQuODA0OSA5LjAxNzQ3QzE0Ljk5ODkgOC45ODIzOSAxNS4yIDkuMDAwMzkgMTUuMzgyNyA5LjA2OTJDMTUuNTY1NCA5LjEzODAxIDE1LjcyMTYgOS4yNTQ1MyAxNS44MzE1IDkuNDA0MDNDMTUuOTQxNCA5LjU1MzUzIDE2IDkuNzI5MjkgMTYgOS45MDkwOUwxNiAxMi4xODE4QzE2IDEyLjY2NCAxNS43ODkzIDEzLjEyNjUgMTUuNDE0MiAxMy40Njc1QzE1LjAzOTEgMTMuODA4NCAxNC41MzA0IDE0IDE0IDE0XCIvPjwvc3ZnPic7Y2xhc3MgaXtzdGF0aWMgZ2V0IGlzUmVhZE9ubHlTdXBwb3J0ZWQoKXtyZXR1cm4hMH1zdGF0aWMgZ2V0IHRvb2xib3goKXtyZXR1cm57aWNvbjpsLHRpdGxlOlwiUXVvdGVcIn19c3RhdGljIGdldCBjb250ZW50bGVzcygpe3JldHVybiEwfXN0YXRpYyBnZXQgZW5hYmxlTGluZUJyZWFrcygpe3JldHVybiEwfXN0YXRpYyBnZXQgREVGQVVMVF9RVU9URV9QTEFDRUhPTERFUigpe3JldHVyblwiRW50ZXIgYSBxdW90ZVwifXN0YXRpYyBnZXQgREVGQVVMVF9DQVBUSU9OX1BMQUNFSE9MREVSKCl7cmV0dXJuXCJFbnRlciBhIGNhcHRpb25cIn1zdGF0aWMgZ2V0IEFMSUdOTUVOVFMoKXtyZXR1cm57bGVmdDpcImxlZnRcIixjZW50ZXI6XCJjZW50ZXJcIn19c3RhdGljIGdldCBERUZBVUxUX0FMSUdOTUVOVCgpe3JldHVybiBpLkFMSUdOTUVOVFMubGVmdH1zdGF0aWMgZ2V0IGNvbnZlcnNpb25Db25maWcoKXtyZXR1cm57aW1wb3J0OlwidGV4dFwiLGV4cG9ydDpmdW5jdGlvbih0KXtyZXR1cm4gdC5jYXB0aW9uP2Ake3QudGV4dH0g4oCUICR7dC5jYXB0aW9ufWA6dC50ZXh0fX19Z2V0IENTUygpe3JldHVybntiYXNlQ2xhc3M6dGhpcy5hcGkuc3R5bGVzLmJsb2NrLHdyYXBwZXI6XCJjZHgtcXVvdGVcIix0ZXh0OlwiY2R4LXF1b3RlX190ZXh0XCIsaW5wdXQ6dGhpcy5hcGkuc3R5bGVzLmlucHV0LGNhcHRpb246XCJjZHgtcXVvdGVfX2NhcHRpb25cIn19Z2V0IHNldHRpbmdzKCl7cmV0dXJuW3tuYW1lOlwibGVmdFwiLGljb246Y30se25hbWU6XCJjZW50ZXJcIixpY29uOm99XX1jb25zdHJ1Y3Rvcih7ZGF0YTp0LGNvbmZpZzplLGFwaTpuLHJlYWRPbmx5OnJ9KXtjb25zdHtBTElHTk1FTlRTOmEsREVGQVVMVF9BTElHTk1FTlQ6ZH09aTt0aGlzLmFwaT1uLHRoaXMucmVhZE9ubHk9cix0aGlzLnF1b3RlUGxhY2Vob2xkZXI9ZS5xdW90ZVBsYWNlaG9sZGVyfHxpLkRFRkFVTFRfUVVPVEVfUExBQ0VIT0xERVIsdGhpcy5jYXB0aW9uUGxhY2Vob2xkZXI9ZS5jYXB0aW9uUGxhY2Vob2xkZXJ8fGkuREVGQVVMVF9DQVBUSU9OX1BMQUNFSE9MREVSLHRoaXMuZGF0YT17dGV4dDp0LnRleHR8fFwiXCIsY2FwdGlvbjp0LmNhcHRpb258fFwiXCIsYWxpZ25tZW50Ok9iamVjdC52YWx1ZXMoYSkuaW5jbHVkZXModC5hbGlnbm1lbnQpJiZ0LmFsaWdubWVudHx8ZS5kZWZhdWx0QWxpZ25tZW50fHxkfX1yZW5kZXIoKXtjb25zdCB0PXRoaXMuX21ha2UoXCJibG9ja3F1b3RlXCIsW3RoaXMuQ1NTLmJhc2VDbGFzcyx0aGlzLkNTUy53cmFwcGVyXSksZT10aGlzLl9tYWtlKFwiZGl2XCIsW3RoaXMuQ1NTLmlucHV0LHRoaXMuQ1NTLnRleHRdLHtjb250ZW50RWRpdGFibGU6IXRoaXMucmVhZE9ubHksaW5uZXJIVE1MOnRoaXMuZGF0YS50ZXh0fSksbj10aGlzLl9tYWtlKFwiZGl2XCIsW3RoaXMuQ1NTLmlucHV0LHRoaXMuQ1NTLmNhcHRpb25dLHtjb250ZW50RWRpdGFibGU6IXRoaXMucmVhZE9ubHksaW5uZXJIVE1MOnRoaXMuZGF0YS5jYXB0aW9ufSk7cmV0dXJuIGUuZGF0YXNldC5wbGFjZWhvbGRlcj10aGlzLnF1b3RlUGxhY2Vob2xkZXIsbi5kYXRhc2V0LnBsYWNlaG9sZGVyPXRoaXMuY2FwdGlvblBsYWNlaG9sZGVyLHQuYXBwZW5kQ2hpbGQoZSksdC5hcHBlbmRDaGlsZChuKSx0fXNhdmUodCl7Y29uc3QgZT10LnF1ZXJ5U2VsZWN0b3IoYC4ke3RoaXMuQ1NTLnRleHR9YCksbj10LnF1ZXJ5U2VsZWN0b3IoYC4ke3RoaXMuQ1NTLmNhcHRpb259YCk7cmV0dXJuIE9iamVjdC5hc3NpZ24odGhpcy5kYXRhLHt0ZXh0OmUuaW5uZXJIVE1MLGNhcHRpb246bi5pbm5lckhUTUx9KX1zdGF0aWMgZ2V0IHNhbml0aXplKCl7cmV0dXJue3RleHQ6e2JyOiEwfSxjYXB0aW9uOnticjohMH0sYWxpZ25tZW50Ont9fX1yZW5kZXJTZXR0aW5ncygpe2NvbnN0IHQ9ZT0+ZVswXS50b1VwcGVyQ2FzZSgpK2Uuc3Vic3RyKDEpO3JldHVybiB0aGlzLnNldHRpbmdzLm1hcChlPT4oe2ljb246ZS5pY29uLGxhYmVsOnRoaXMuYXBpLmkxOG4udChgQWxpZ24gJHt0KGUubmFtZSl9YCksb25BY3RpdmF0ZTooKT0+dGhpcy5fdG9nZ2xlVHVuZShlLm5hbWUpLGlzQWN0aXZlOnRoaXMuZGF0YS5hbGlnbm1lbnQ9PT1lLm5hbWUsY2xvc2VPbkFjdGl2YXRlOiEwfSkpfV90b2dnbGVUdW5lKHQpe3RoaXMuZGF0YS5hbGlnbm1lbnQ9dH1fbWFrZSh0LGU9bnVsbCxuPXt9KXtjb25zdCByPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodCk7QXJyYXkuaXNBcnJheShlKT9yLmNsYXNzTGlzdC5hZGQoLi4uZSk6ZSYmci5jbGFzc0xpc3QuYWRkKGUpO2Zvcihjb25zdCBhIGluIG4pclthXT1uW2FdO3JldHVybiByfX1yZXR1cm4gaX0pO1xuIiwiIWZ1bmN0aW9uKHQsZSl7XCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHMmJlwib2JqZWN0XCI9PXR5cGVvZiBtb2R1bGU/bW9kdWxlLmV4cG9ydHM9ZSgpOlwiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoW10sZSk6XCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHM/ZXhwb3J0cy5VbmRvPWUoKTp0LlVuZG89ZSgpfShzZWxmLCgoKT0+KCgpPT57dmFyIHQ9ezc1NzoodCxlLG4pPT57dC5leHBvcnRzPW4oNjY2KX0sNjY2OnQ9Pnt2YXIgZT1mdW5jdGlvbih0KXtcInVzZSBzdHJpY3RcIjt2YXIgZSxuPU9iamVjdC5wcm90b3R5cGUscj1uLmhhc093blByb3BlcnR5LG89XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sP1N5bWJvbDp7fSxpPW8uaXRlcmF0b3J8fFwiQEBpdGVyYXRvclwiLGE9by5hc3luY0l0ZXJhdG9yfHxcIkBAYXN5bmNJdGVyYXRvclwiLHM9by50b1N0cmluZ1RhZ3x8XCJAQHRvU3RyaW5nVGFnXCI7ZnVuY3Rpb24gYyh0LGUsbil7cmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LGUse3ZhbHVlOm4sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITAsd3JpdGFibGU6ITB9KSx0W2VdfXRyeXtjKHt9LFwiXCIpfWNhdGNoKHQpe2M9ZnVuY3Rpb24odCxlLG4pe3JldHVybiB0W2VdPW59fWZ1bmN0aW9uIHUodCxlLG4scil7dmFyIG89ZSYmZS5wcm90b3R5cGUgaW5zdGFuY2VvZiB2P2U6dixpPU9iamVjdC5jcmVhdGUoby5wcm90b3R5cGUpLGE9bmV3IFQocnx8W10pO3JldHVybiBpLl9pbnZva2U9ZnVuY3Rpb24odCxlLG4pe3ZhciByPWg7cmV0dXJuIGZ1bmN0aW9uKG8saSl7aWYocj09PWQpdGhyb3cgbmV3IEVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgcnVubmluZ1wiKTtpZihyPT09cCl7aWYoXCJ0aHJvd1wiPT09byl0aHJvdyBpO3JldHVybiBTKCl9Zm9yKG4ubWV0aG9kPW8sbi5hcmc9aTs7KXt2YXIgYT1uLmRlbGVnYXRlO2lmKGEpe3ZhciBzPUwoYSxuKTtpZihzKXtpZihzPT09eSljb250aW51ZTtyZXR1cm4gc319aWYoXCJuZXh0XCI9PT1uLm1ldGhvZCluLnNlbnQ9bi5fc2VudD1uLmFyZztlbHNlIGlmKFwidGhyb3dcIj09PW4ubWV0aG9kKXtpZihyPT09aCl0aHJvdyByPXAsbi5hcmc7bi5kaXNwYXRjaEV4Y2VwdGlvbihuLmFyZyl9ZWxzZVwicmV0dXJuXCI9PT1uLm1ldGhvZCYmbi5hYnJ1cHQoXCJyZXR1cm5cIixuLmFyZyk7cj1kO3ZhciBjPWwodCxlLG4pO2lmKFwibm9ybWFsXCI9PT1jLnR5cGUpe2lmKHI9bi5kb25lP3A6ZixjLmFyZz09PXkpY29udGludWU7cmV0dXJue3ZhbHVlOmMuYXJnLGRvbmU6bi5kb25lfX1cInRocm93XCI9PT1jLnR5cGUmJihyPXAsbi5tZXRob2Q9XCJ0aHJvd1wiLG4uYXJnPWMuYXJnKX19fSh0LG4sYSksaX1mdW5jdGlvbiBsKHQsZSxuKXt0cnl7cmV0dXJue3R5cGU6XCJub3JtYWxcIixhcmc6dC5jYWxsKGUsbil9fWNhdGNoKHQpe3JldHVybnt0eXBlOlwidGhyb3dcIixhcmc6dH19fXQud3JhcD11O3ZhciBoPVwic3VzcGVuZGVkU3RhcnRcIixmPVwic3VzcGVuZGVkWWllbGRcIixkPVwiZXhlY3V0aW5nXCIscD1cImNvbXBsZXRlZFwiLHk9e307ZnVuY3Rpb24gdigpe31mdW5jdGlvbiBnKCl7fWZ1bmN0aW9uIGsoKXt9dmFyIGI9e307YyhiLGksKGZ1bmN0aW9uKCl7cmV0dXJuIHRoaXN9KSk7dmFyIG09T2JqZWN0LmdldFByb3RvdHlwZU9mLHg9bSYmbShtKEIoW10pKSk7eCYmeCE9PW4mJnIuY2FsbCh4LGkpJiYoYj14KTt2YXIgdz1rLnByb3RvdHlwZT12LnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKGIpO2Z1bmN0aW9uIE8odCl7W1wibmV4dFwiLFwidGhyb3dcIixcInJldHVyblwiXS5mb3JFYWNoKChmdW5jdGlvbihlKXtjKHQsZSwoZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuX2ludm9rZShlLHQpfSkpfSkpfWZ1bmN0aW9uIEUodCxlKXtmdW5jdGlvbiBuKG8saSxhLHMpe3ZhciBjPWwodFtvXSx0LGkpO2lmKFwidGhyb3dcIiE9PWMudHlwZSl7dmFyIHU9Yy5hcmcsaD11LnZhbHVlO3JldHVybiBoJiZcIm9iamVjdFwiPT10eXBlb2YgaCYmci5jYWxsKGgsXCJfX2F3YWl0XCIpP2UucmVzb2x2ZShoLl9fYXdhaXQpLnRoZW4oKGZ1bmN0aW9uKHQpe24oXCJuZXh0XCIsdCxhLHMpfSksKGZ1bmN0aW9uKHQpe24oXCJ0aHJvd1wiLHQsYSxzKX0pKTplLnJlc29sdmUoaCkudGhlbigoZnVuY3Rpb24odCl7dS52YWx1ZT10LGEodSl9KSwoZnVuY3Rpb24odCl7cmV0dXJuIG4oXCJ0aHJvd1wiLHQsYSxzKX0pKX1zKGMuYXJnKX12YXIgbzt0aGlzLl9pbnZva2U9ZnVuY3Rpb24odCxyKXtmdW5jdGlvbiBpKCl7cmV0dXJuIG5ldyBlKChmdW5jdGlvbihlLG8pe24odCxyLGUsbyl9KSl9cmV0dXJuIG89bz9vLnRoZW4oaSxpKTppKCl9fWZ1bmN0aW9uIEwodCxuKXt2YXIgcj10Lml0ZXJhdG9yW24ubWV0aG9kXTtpZihyPT09ZSl7aWYobi5kZWxlZ2F0ZT1udWxsLFwidGhyb3dcIj09PW4ubWV0aG9kKXtpZih0Lml0ZXJhdG9yLnJldHVybiYmKG4ubWV0aG9kPVwicmV0dXJuXCIsbi5hcmc9ZSxMKHQsbiksXCJ0aHJvd1wiPT09bi5tZXRob2QpKXJldHVybiB5O24ubWV0aG9kPVwidGhyb3dcIixuLmFyZz1uZXcgVHlwZUVycm9yKFwiVGhlIGl0ZXJhdG9yIGRvZXMgbm90IHByb3ZpZGUgYSAndGhyb3cnIG1ldGhvZFwiKX1yZXR1cm4geX12YXIgbz1sKHIsdC5pdGVyYXRvcixuLmFyZyk7aWYoXCJ0aHJvd1wiPT09by50eXBlKXJldHVybiBuLm1ldGhvZD1cInRocm93XCIsbi5hcmc9by5hcmcsbi5kZWxlZ2F0ZT1udWxsLHk7dmFyIGk9by5hcmc7cmV0dXJuIGk/aS5kb25lPyhuW3QucmVzdWx0TmFtZV09aS52YWx1ZSxuLm5leHQ9dC5uZXh0TG9jLFwicmV0dXJuXCIhPT1uLm1ldGhvZCYmKG4ubWV0aG9kPVwibmV4dFwiLG4uYXJnPWUpLG4uZGVsZWdhdGU9bnVsbCx5KTppOihuLm1ldGhvZD1cInRocm93XCIsbi5hcmc9bmV3IFR5cGVFcnJvcihcIml0ZXJhdG9yIHJlc3VsdCBpcyBub3QgYW4gb2JqZWN0XCIpLG4uZGVsZWdhdGU9bnVsbCx5KX1mdW5jdGlvbiBDKHQpe3ZhciBlPXt0cnlMb2M6dFswXX07MSBpbiB0JiYoZS5jYXRjaExvYz10WzFdKSwyIGluIHQmJihlLmZpbmFsbHlMb2M9dFsyXSxlLmFmdGVyTG9jPXRbM10pLHRoaXMudHJ5RW50cmllcy5wdXNoKGUpfWZ1bmN0aW9uIGoodCl7dmFyIGU9dC5jb21wbGV0aW9ufHx7fTtlLnR5cGU9XCJub3JtYWxcIixkZWxldGUgZS5hcmcsdC5jb21wbGV0aW9uPWV9ZnVuY3Rpb24gVCh0KXt0aGlzLnRyeUVudHJpZXM9W3t0cnlMb2M6XCJyb290XCJ9XSx0LmZvckVhY2goQyx0aGlzKSx0aGlzLnJlc2V0KCEwKX1mdW5jdGlvbiBCKHQpe2lmKHQpe3ZhciBuPXRbaV07aWYobilyZXR1cm4gbi5jYWxsKHQpO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIHQubmV4dClyZXR1cm4gdDtpZighaXNOYU4odC5sZW5ndGgpKXt2YXIgbz0tMSxhPWZ1bmN0aW9uIG4oKXtmb3IoOysrbzx0Lmxlbmd0aDspaWYoci5jYWxsKHQsbykpcmV0dXJuIG4udmFsdWU9dFtvXSxuLmRvbmU9ITEsbjtyZXR1cm4gbi52YWx1ZT1lLG4uZG9uZT0hMCxufTtyZXR1cm4gYS5uZXh0PWF9fXJldHVybntuZXh0OlN9fWZ1bmN0aW9uIFMoKXtyZXR1cm57dmFsdWU6ZSxkb25lOiEwfX1yZXR1cm4gZy5wcm90b3R5cGU9ayxjKHcsXCJjb25zdHJ1Y3RvclwiLGspLGMoayxcImNvbnN0cnVjdG9yXCIsZyksZy5kaXNwbGF5TmFtZT1jKGsscyxcIkdlbmVyYXRvckZ1bmN0aW9uXCIpLHQuaXNHZW5lcmF0b3JGdW5jdGlvbj1mdW5jdGlvbih0KXt2YXIgZT1cImZ1bmN0aW9uXCI9PXR5cGVvZiB0JiZ0LmNvbnN0cnVjdG9yO3JldHVybiEhZSYmKGU9PT1nfHxcIkdlbmVyYXRvckZ1bmN0aW9uXCI9PT0oZS5kaXNwbGF5TmFtZXx8ZS5uYW1lKSl9LHQubWFyaz1mdW5jdGlvbih0KXtyZXR1cm4gT2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5zZXRQcm90b3R5cGVPZih0LGspOih0Ll9fcHJvdG9fXz1rLGModCxzLFwiR2VuZXJhdG9yRnVuY3Rpb25cIikpLHQucHJvdG90eXBlPU9iamVjdC5jcmVhdGUodyksdH0sdC5hd3JhcD1mdW5jdGlvbih0KXtyZXR1cm57X19hd2FpdDp0fX0sTyhFLnByb3RvdHlwZSksYyhFLnByb3RvdHlwZSxhLChmdW5jdGlvbigpe3JldHVybiB0aGlzfSkpLHQuQXN5bmNJdGVyYXRvcj1FLHQuYXN5bmM9ZnVuY3Rpb24oZSxuLHIsbyxpKXt2b2lkIDA9PT1pJiYoaT1Qcm9taXNlKTt2YXIgYT1uZXcgRSh1KGUsbixyLG8pLGkpO3JldHVybiB0LmlzR2VuZXJhdG9yRnVuY3Rpb24obik/YTphLm5leHQoKS50aGVuKChmdW5jdGlvbih0KXtyZXR1cm4gdC5kb25lP3QudmFsdWU6YS5uZXh0KCl9KSl9LE8odyksYyh3LHMsXCJHZW5lcmF0b3JcIiksYyh3LGksKGZ1bmN0aW9uKCl7cmV0dXJuIHRoaXN9KSksYyh3LFwidG9TdHJpbmdcIiwoZnVuY3Rpb24oKXtyZXR1cm5cIltvYmplY3QgR2VuZXJhdG9yXVwifSkpLHQua2V5cz1mdW5jdGlvbih0KXt2YXIgZT1bXTtmb3IodmFyIG4gaW4gdCllLnB1c2gobik7cmV0dXJuIGUucmV2ZXJzZSgpLGZ1bmN0aW9uIG4oKXtmb3IoO2UubGVuZ3RoOyl7dmFyIHI9ZS5wb3AoKTtpZihyIGluIHQpcmV0dXJuIG4udmFsdWU9cixuLmRvbmU9ITEsbn1yZXR1cm4gbi5kb25lPSEwLG59fSx0LnZhbHVlcz1CLFQucHJvdG90eXBlPXtjb25zdHJ1Y3RvcjpULHJlc2V0OmZ1bmN0aW9uKHQpe2lmKHRoaXMucHJldj0wLHRoaXMubmV4dD0wLHRoaXMuc2VudD10aGlzLl9zZW50PWUsdGhpcy5kb25lPSExLHRoaXMuZGVsZWdhdGU9bnVsbCx0aGlzLm1ldGhvZD1cIm5leHRcIix0aGlzLmFyZz1lLHRoaXMudHJ5RW50cmllcy5mb3JFYWNoKGopLCF0KWZvcih2YXIgbiBpbiB0aGlzKVwidFwiPT09bi5jaGFyQXQoMCkmJnIuY2FsbCh0aGlzLG4pJiYhaXNOYU4oK24uc2xpY2UoMSkpJiYodGhpc1tuXT1lKX0sc3RvcDpmdW5jdGlvbigpe3RoaXMuZG9uZT0hMDt2YXIgdD10aGlzLnRyeUVudHJpZXNbMF0uY29tcGxldGlvbjtpZihcInRocm93XCI9PT10LnR5cGUpdGhyb3cgdC5hcmc7cmV0dXJuIHRoaXMucnZhbH0sZGlzcGF0Y2hFeGNlcHRpb246ZnVuY3Rpb24odCl7aWYodGhpcy5kb25lKXRocm93IHQ7dmFyIG49dGhpcztmdW5jdGlvbiBvKHIsbyl7cmV0dXJuIHMudHlwZT1cInRocm93XCIscy5hcmc9dCxuLm5leHQ9cixvJiYobi5tZXRob2Q9XCJuZXh0XCIsbi5hcmc9ZSksISFvfWZvcih2YXIgaT10aGlzLnRyeUVudHJpZXMubGVuZ3RoLTE7aT49MDstLWkpe3ZhciBhPXRoaXMudHJ5RW50cmllc1tpXSxzPWEuY29tcGxldGlvbjtpZihcInJvb3RcIj09PWEudHJ5TG9jKXJldHVybiBvKFwiZW5kXCIpO2lmKGEudHJ5TG9jPD10aGlzLnByZXYpe3ZhciBjPXIuY2FsbChhLFwiY2F0Y2hMb2NcIiksdT1yLmNhbGwoYSxcImZpbmFsbHlMb2NcIik7aWYoYyYmdSl7aWYodGhpcy5wcmV2PGEuY2F0Y2hMb2MpcmV0dXJuIG8oYS5jYXRjaExvYywhMCk7aWYodGhpcy5wcmV2PGEuZmluYWxseUxvYylyZXR1cm4gbyhhLmZpbmFsbHlMb2MpfWVsc2UgaWYoYyl7aWYodGhpcy5wcmV2PGEuY2F0Y2hMb2MpcmV0dXJuIG8oYS5jYXRjaExvYywhMCl9ZWxzZXtpZighdSl0aHJvdyBuZXcgRXJyb3IoXCJ0cnkgc3RhdGVtZW50IHdpdGhvdXQgY2F0Y2ggb3IgZmluYWxseVwiKTtpZih0aGlzLnByZXY8YS5maW5hbGx5TG9jKXJldHVybiBvKGEuZmluYWxseUxvYyl9fX19LGFicnVwdDpmdW5jdGlvbih0LGUpe2Zvcih2YXIgbj10aGlzLnRyeUVudHJpZXMubGVuZ3RoLTE7bj49MDstLW4pe3ZhciBvPXRoaXMudHJ5RW50cmllc1tuXTtpZihvLnRyeUxvYzw9dGhpcy5wcmV2JiZyLmNhbGwobyxcImZpbmFsbHlMb2NcIikmJnRoaXMucHJldjxvLmZpbmFsbHlMb2Mpe3ZhciBpPW87YnJlYWt9fWkmJihcImJyZWFrXCI9PT10fHxcImNvbnRpbnVlXCI9PT10KSYmaS50cnlMb2M8PWUmJmU8PWkuZmluYWxseUxvYyYmKGk9bnVsbCk7dmFyIGE9aT9pLmNvbXBsZXRpb246e307cmV0dXJuIGEudHlwZT10LGEuYXJnPWUsaT8odGhpcy5tZXRob2Q9XCJuZXh0XCIsdGhpcy5uZXh0PWkuZmluYWxseUxvYyx5KTp0aGlzLmNvbXBsZXRlKGEpfSxjb21wbGV0ZTpmdW5jdGlvbih0LGUpe2lmKFwidGhyb3dcIj09PXQudHlwZSl0aHJvdyB0LmFyZztyZXR1cm5cImJyZWFrXCI9PT10LnR5cGV8fFwiY29udGludWVcIj09PXQudHlwZT90aGlzLm5leHQ9dC5hcmc6XCJyZXR1cm5cIj09PXQudHlwZT8odGhpcy5ydmFsPXRoaXMuYXJnPXQuYXJnLHRoaXMubWV0aG9kPVwicmV0dXJuXCIsdGhpcy5uZXh0PVwiZW5kXCIpOlwibm9ybWFsXCI9PT10LnR5cGUmJmUmJih0aGlzLm5leHQ9ZSkseX0sZmluaXNoOmZ1bmN0aW9uKHQpe2Zvcih2YXIgZT10aGlzLnRyeUVudHJpZXMubGVuZ3RoLTE7ZT49MDstLWUpe3ZhciBuPXRoaXMudHJ5RW50cmllc1tlXTtpZihuLmZpbmFsbHlMb2M9PT10KXJldHVybiB0aGlzLmNvbXBsZXRlKG4uY29tcGxldGlvbixuLmFmdGVyTG9jKSxqKG4pLHl9fSxjYXRjaDpmdW5jdGlvbih0KXtmb3IodmFyIGU9dGhpcy50cnlFbnRyaWVzLmxlbmd0aC0xO2U+PTA7LS1lKXt2YXIgbj10aGlzLnRyeUVudHJpZXNbZV07aWYobi50cnlMb2M9PT10KXt2YXIgcj1uLmNvbXBsZXRpb247aWYoXCJ0aHJvd1wiPT09ci50eXBlKXt2YXIgbz1yLmFyZztqKG4pfXJldHVybiBvfX10aHJvdyBuZXcgRXJyb3IoXCJpbGxlZ2FsIGNhdGNoIGF0dGVtcHRcIil9LGRlbGVnYXRlWWllbGQ6ZnVuY3Rpb24odCxuLHIpe3JldHVybiB0aGlzLmRlbGVnYXRlPXtpdGVyYXRvcjpCKHQpLHJlc3VsdE5hbWU6bixuZXh0TG9jOnJ9LFwibmV4dFwiPT09dGhpcy5tZXRob2QmJih0aGlzLmFyZz1lKSx5fX0sdH0odC5leHBvcnRzKTt0cnl7cmVnZW5lcmF0b3JSdW50aW1lPWV9Y2F0Y2godCl7XCJvYmplY3RcIj09dHlwZW9mIGdsb2JhbFRoaXM/Z2xvYmFsVGhpcy5yZWdlbmVyYXRvclJ1bnRpbWU9ZTpGdW5jdGlvbihcInJcIixcInJlZ2VuZXJhdG9yUnVudGltZSA9IHJcIikoZSl9fSw1NzE6ZnVuY3Rpb24odCxlKXt2YXIgbixyO249ZnVuY3Rpb24odCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIGU9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KHQsZSl7Zm9yKHZhciBuPTA7bjxlLmxlbmd0aDtuKyspe3ZhciByPWVbbl07ci5lbnVtZXJhYmxlPXIuZW51bWVyYWJsZXx8ITEsci5jb25maWd1cmFibGU9ITAsXCJ2YWx1ZVwiaW4gciYmKHIud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LHIua2V5LHIpfX1yZXR1cm4gZnVuY3Rpb24oZSxuLHIpe3JldHVybiBuJiZ0KGUucHJvdG90eXBlLG4pLHImJnQoZSxyKSxlfX0oKSxuPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdChlKXsoZnVuY3Rpb24odCxlKXtpZighKHQgaW5zdGFuY2VvZiBlKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfSkodGhpcyx0KSx0aGlzLnRhcmdldD1lLHRoaXMuaXNDb250ZW50RWRpdGFibGU9ZSYmZS5jb250ZW50RWRpdGFibGV9cmV0dXJuIGUodCxbe2tleTpcImdldFBvc1wiLHZhbHVlOmZ1bmN0aW9uKCl7aWYoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCE9PXRoaXMudGFyZ2V0KXJldHVybi0xO2lmKHRoaXMuaXNDb250ZW50RWRpdGFibGUpe3RoaXMudGFyZ2V0LmZvY3VzKCk7dmFyIHQ9ZG9jdW1lbnQuZ2V0U2VsZWN0aW9uKCkuZ2V0UmFuZ2VBdCgwKSxlPXQuY2xvbmVSYW5nZSgpO3JldHVybiBlLnNlbGVjdE5vZGVDb250ZW50cyh0aGlzLnRhcmdldCksZS5zZXRFbmQodC5lbmRDb250YWluZXIsdC5lbmRPZmZzZXQpLGUudG9TdHJpbmcoKS5sZW5ndGh9cmV0dXJuIHRoaXMudGFyZ2V0LnNlbGVjdGlvblN0YXJ0fX0se2tleTpcInNldFBvc1wiLHZhbHVlOmZ1bmN0aW9uKHQpe2lmKHRoaXMuaXNDb250ZW50RWRpdGFibGUpe2lmKHQ+PTApe3ZhciBlPXdpbmRvdy5nZXRTZWxlY3Rpb24oKSxuPXRoaXMuY3JlYXRlUmFuZ2UodGhpcy50YXJnZXQse2NvdW50OnR9KTtuJiYobi5jb2xsYXBzZSghMSksZS5yZW1vdmVBbGxSYW5nZXMoKSxlLmFkZFJhbmdlKG4pKX19ZWxzZSB0aGlzLnRhcmdldC5zZXRTZWxlY3Rpb25SYW5nZSh0LHQpfX0se2tleTpcImNyZWF0ZVJhbmdlXCIsdmFsdWU6ZnVuY3Rpb24odCxlLG4pe2lmKG58fCgobj1kb2N1bWVudC5jcmVhdGVSYW5nZSgpKS5zZWxlY3ROb2RlKHQpLG4uc2V0U3RhcnQodCwwKSksMD09PWUuY291bnQpbi5zZXRFbmQodCxlLmNvdW50KTtlbHNlIGlmKHQmJmUuY291bnQ+MClpZih0Lm5vZGVUeXBlPT09Tm9kZS5URVhUX05PREUpdC50ZXh0Q29udGVudC5sZW5ndGg8ZS5jb3VudD9lLmNvdW50LT10LnRleHRDb250ZW50Lmxlbmd0aDoobi5zZXRFbmQodCxlLmNvdW50KSxlLmNvdW50PTApO2Vsc2UgZm9yKHZhciByPTA7cjx0LmNoaWxkTm9kZXMubGVuZ3RoJiYobj10aGlzLmNyZWF0ZVJhbmdlKHQuY2hpbGROb2Rlc1tyXSxlLG4pLDAhPT1lLmNvdW50KTtyKyspO3JldHVybiBufX1dKSx0fSgpO3QuZXhwb3J0cz1ufSx2b2lkIDA9PT0ocj1uLmFwcGx5KGUsW3RdKSl8fCh0LmV4cG9ydHM9cil9LDMzNDoodCxlLG4pPT57dC5leHBvcnRzPW4oNTcxKX19LGU9e307ZnVuY3Rpb24gbihyKXt2YXIgbz1lW3JdO2lmKHZvaWQgMCE9PW8pcmV0dXJuIG8uZXhwb3J0czt2YXIgaT1lW3JdPXtleHBvcnRzOnt9fTtyZXR1cm4gdFtyXS5jYWxsKGkuZXhwb3J0cyxpLGkuZXhwb3J0cyxuKSxpLmV4cG9ydHN9bi5uPXQ9Pnt2YXIgZT10JiZ0Ll9fZXNNb2R1bGU/KCk9PnQuZGVmYXVsdDooKT0+dDtyZXR1cm4gbi5kKGUse2E6ZX0pLGV9LG4uZD0odCxlKT0+e2Zvcih2YXIgciBpbiBlKW4ubyhlLHIpJiYhbi5vKHQscikmJk9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LHIse2VudW1lcmFibGU6ITAsZ2V0OmVbcl19KX0sbi5vPSh0LGUpPT5PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodCxlKTt2YXIgcj17fTtyZXR1cm4oKCk9PntcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiB0KHQsZSxuLHIsbyxpLGEpe3RyeXt2YXIgcz10W2ldKGEpLGM9cy52YWx1ZX1jYXRjaCh0KXtyZXR1cm4gdm9pZCBuKHQpfXMuZG9uZT9lKGMpOlByb21pc2UucmVzb2x2ZShjKS50aGVuKHIsbyl9ZnVuY3Rpb24gZShlKXtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgbj10aGlzLHI9YXJndW1lbnRzO3JldHVybiBuZXcgUHJvbWlzZSgoZnVuY3Rpb24obyxpKXt2YXIgYT1lLmFwcGx5KG4scik7ZnVuY3Rpb24gcyhlKXt0KGEsbyxpLHMsYyxcIm5leHRcIixlKX1mdW5jdGlvbiBjKGUpe3QoYSxvLGkscyxjLFwidGhyb3dcIixlKX1zKHZvaWQgMCl9KSl9fWZ1bmN0aW9uIG8odCxlLG4pe3JldHVybiBlIGluIHQ/T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsZSx7dmFsdWU6bixlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMCx3cml0YWJsZTohMH0pOnRbZV09bix0fWZ1bmN0aW9uIGkodCxlKXtpZighKHQgaW5zdGFuY2VvZiBlKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfWZ1bmN0aW9uIGEodCxlKXtmb3IodmFyIG49MDtuPGUubGVuZ3RoO24rKyl7dmFyIHI9ZVtuXTtyLmVudW1lcmFibGU9ci5lbnVtZXJhYmxlfHwhMSxyLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiByJiYoci53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsci5rZXkscil9fWZ1bmN0aW9uIHModCxlLG4pe3JldHVybiBlJiZhKHQucHJvdG90eXBlLGUpLG4mJmEodCxuKSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcInByb3RvdHlwZVwiLHt3cml0YWJsZTohMX0pLHR9bi5kKHIse2RlZmF1bHQ6KCk9Pnl9KTt2YXIgYz1uKDc1NyksdT1uLm4oYyksbD1uKDMzNCksaD1uLm4obCksZj1mdW5jdGlvbigpe2Z1bmN0aW9uIHQoZSxuLHIpe2kodGhpcyx0KSx0aGlzLmhvbGRlcj1uLHRoaXMub2JzZXJ2ZXI9bnVsbCx0aGlzLmRlYm91bmNlVGltZXI9cix0aGlzLm11dGF0aW9uRGVib3VuY2VyPXRoaXMuZGVib3VuY2UoKGZ1bmN0aW9uKCl7ZSgpfSksdGhpcy5kZWJvdW5jZVRpbWVyKX1yZXR1cm4gcyh0LFt7a2V5Olwic2V0TXV0YXRpb25PYnNlcnZlclwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcyxlPXRoaXMuaG9sZGVyLnF1ZXJ5U2VsZWN0b3IoXCIuY29kZXgtZWRpdG9yX19yZWRhY3RvclwiKTt0aGlzLm9ic2VydmVyPW5ldyBNdXRhdGlvbk9ic2VydmVyKChmdW5jdGlvbihlKXt0Lm11dGF0aW9uSGFuZGxlcihlKX0pKSx0aGlzLm9ic2VydmVyLm9ic2VydmUoZSx7Y2hpbGRMaXN0OiEwLGF0dHJpYnV0ZXM6ITAsc3VidHJlZTohMCxjaGFyYWN0ZXJEYXRhOiEwLGNoYXJhY3RlckRhdGFPbGRWYWx1ZTohMH0pfX0se2tleTpcIm11dGF0aW9uSGFuZGxlclwiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMsbj0hMTt0LmZvckVhY2goKGZ1bmN0aW9uKHQpe3N3aXRjaCh0LnR5cGUpe2Nhc2VcImNoaWxkTGlzdFwiOnQudGFyZ2V0PT09ZS5ob2xkZXI/ZS5vbkRlc3Ryb3koKTpuPSEwO2JyZWFrO2Nhc2VcImNoYXJhY3RlckRhdGFcIjpuPSEwO2JyZWFrO2Nhc2VcImF0dHJpYnV0ZXNcIjp0LnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoXCJjZS1ibG9ja1wiKXx8dC50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKFwidGMtdG9vbGJveFwiKXx8KG49ITApfX0pKSxuJiZ0aGlzLm11dGF0aW9uRGVib3VuY2VyKCl9fSx7a2V5OlwiZGVib3VuY2VcIix2YWx1ZTpmdW5jdGlvbih0LGUpe3ZhciBuLHI9dGhpcztyZXR1cm4gZnVuY3Rpb24oKXtmb3IodmFyIG89YXJndW1lbnRzLmxlbmd0aCxpPW5ldyBBcnJheShvKSxhPTA7YTxvO2ErKylpW2FdPWFyZ3VtZW50c1thXTt2YXIgcz1yO2NsZWFyVGltZW91dChuKSxuPXNldFRpbWVvdXQoKGZ1bmN0aW9uKCl7cmV0dXJuIHQuYXBwbHkocyxpKX0pLGUpfX19LHtrZXk6XCJvbkRlc3Ryb3lcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciB0PW5ldyBDdXN0b21FdmVudChcImRlc3Ryb3lcIik7ZG9jdW1lbnQuZGlzcGF0Y2hFdmVudCh0KSx0aGlzLm9ic2VydmVyLmRpc2Nvbm5lY3QoKX19XSksdH0oKTtmdW5jdGlvbiBkKHQsZSl7dmFyIG49T2JqZWN0LmtleXModCk7aWYoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyl7dmFyIHI9T2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyh0KTtlJiYocj1yLmZpbHRlcigoZnVuY3Rpb24oZSl7cmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodCxlKS5lbnVtZXJhYmxlfSkpKSxuLnB1c2guYXBwbHkobixyKX1yZXR1cm4gbn1mdW5jdGlvbiBwKHQpe2Zvcih2YXIgZT0xO2U8YXJndW1lbnRzLmxlbmd0aDtlKyspe3ZhciBuPW51bGwhPWFyZ3VtZW50c1tlXT9hcmd1bWVudHNbZV06e307ZSUyP2QoT2JqZWN0KG4pLCEwKS5mb3JFYWNoKChmdW5jdGlvbihlKXtvKHQsZSxuW2VdKX0pKTpPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycz9PYmplY3QuZGVmaW5lUHJvcGVydGllcyh0LE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKG4pKTpkKE9iamVjdChuKSkuZm9yRWFjaCgoZnVuY3Rpb24oZSl7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsZSxPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG4sZSkpfSkpfXJldHVybiB0fXZhciB5PWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdChlKXt2YXIgbj10aGlzLHI9ZS5lZGl0b3Isbz1lLmNvbmZpZyxhPXZvaWQgMD09PW8/e306byxzPWUub25VcGRhdGUsYz1lLm1heExlbmd0aDtpKHRoaXMsdCk7dmFyIHU9e21heExlbmd0aDozMCxvblVwZGF0ZTpmdW5jdGlvbigpe30sY29uZmlnOntkZWJvdW5jZVRpbWVyOjIwMCxzaG9ydGN1dHM6e3VuZG86W1wiQ01EK1pcIl0scmVkbzpbXCJDTUQrWVwiLFwiQ01EK1NISUZUK1pcIl19fX0sbD1yLmJsb2NrcyxoPXIuY2FyZXQsZD1yLmNvbmZpZ3VyYXRpb24seT1kLmhvbGRlcix2PWQuZGVmYXVsdEJsb2NrLGc9dS5jb25maWcuc2hvcnRjdXRzLGs9YS5zaG9ydGN1dHMsYj1wKHAoe30sZyksayksbT1BcnJheS5pc0FycmF5KGIudW5kbyk/Yi51bmRvOltiLnVuZG9dLHg9QXJyYXkuaXNBcnJheShiLnJlZG8pP2IucmVkbzpbYi5yZWRvXSx3PXUuY29uZmlnLmRlYm91bmNlVGltZXIsTz1hLmRlYm91bmNlVGltZXIsRT12b2lkIDA9PT1PP3c6Tzt0aGlzLmhvbGRlcj1cInN0cmluZ1wiPT10eXBlb2YgeT9kb2N1bWVudC5nZXRFbGVtZW50QnlJZCh5KTp5LHRoaXMuZWRpdG9yPXIsdGhpcy5kZWZhdWx0QmxvY2s9dix0aGlzLmJsb2Nrcz1sLHRoaXMuY2FyZXQ9aCx0aGlzLnNob3VsZFNhdmVIaXN0b3J5PSEwLHRoaXMucmVhZE9ubHk9ZC5yZWFkT25seSx0aGlzLm1heExlbmd0aD1jfHx1Lm1heExlbmd0aCx0aGlzLm9uVXBkYXRlPXN8fHUub25VcGRhdGUsdGhpcy5jb25maWc9e2RlYm91bmNlVGltZXI6RSxzaG9ydGN1dHM6e3VuZG86bSxyZWRvOnh9fSxuZXcgZigoZnVuY3Rpb24oKXtyZXR1cm4gbi5yZWdpc3RlckNoYW5nZSgpfSksdGhpcy5ob2xkZXIsdGhpcy5jb25maWcuZGVib3VuY2VUaW1lcikuc2V0TXV0YXRpb25PYnNlcnZlcigpLHRoaXMuc2V0RXZlbnRMaXN0ZW5lcnMoKSx0aGlzLmluaXRpYWxJdGVtPW51bGwsdGhpcy5jbGVhcigpfXZhciBuLHIsbztyZXR1cm4gcyh0LFt7a2V5OlwidHJ1bmNhdGVcIix2YWx1ZTpmdW5jdGlvbih0LGUpe2Zvcig7dC5sZW5ndGg+ZTspdC5zaGlmdCgpfX0se2tleTpcImluaXRpYWxpemVcIix2YWx1ZTpmdW5jdGlvbih0KXt2YXIgZT1cImJsb2Nrc1wiaW4gdD90LmJsb2Nrczp0LG49e2luZGV4OmUubGVuZ3RoLTEsc3RhdGU6ZX07dGhpcy5zdGFja1swXT1uLHRoaXMuaW5pdGlhbEl0ZW09bn19LHtrZXk6XCJjbGVhclwiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy5zdGFjaz10aGlzLmluaXRpYWxJdGVtP1t0aGlzLmluaXRpYWxJdGVtXTpbe2luZGV4OjAsc3RhdGU6W3t0eXBlOnRoaXMuZGVmYXVsdEJsb2NrLGRhdGE6e319XX1dLHRoaXMucG9zaXRpb249MCx0aGlzLm9uVXBkYXRlKCl9fSx7a2V5Olwic2V0UmVhZE9ubHlcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciB0PXRoaXMuaG9sZGVyLnF1ZXJ5U2VsZWN0b3IoXCIuY2UtdG9vbGJveFwiKTt0aGlzLnJlYWRPbmx5PSF0fX0se2tleTpcInJlZ2lzdGVyQ2hhbmdlXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgdD10aGlzO3RoaXMuc2V0UmVhZE9ubHkoKSx0aGlzLnJlYWRPbmx5fHwodGhpcy5lZGl0b3ImJnRoaXMuZWRpdG9yLnNhdmUmJnRoaXMuc2hvdWxkU2F2ZUhpc3RvcnkmJnRoaXMuZWRpdG9yLnNhdmUoKS50aGVuKChmdW5jdGlvbihlKXt0LmVkaXRvckRpZFVwZGF0ZShlLmJsb2NrcykmJnQuc2F2ZShlLmJsb2Nrcyl9KSksdGhpcy5zaG91bGRTYXZlSGlzdG9yeT0hMCl9fSx7a2V5OlwiZWRpdG9yRGlkVXBkYXRlXCIsdmFsdWU6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5zdGFja1t0aGlzLnBvc2l0aW9uXS5zdGF0ZTtyZXR1cm4hIXQubGVuZ3RoJiYodC5sZW5ndGghPT1lLmxlbmd0aHx8SlNPTi5zdHJpbmdpZnkoZSkhPT1KU09OLnN0cmluZ2lmeSh0KSl9fSx7a2V5Olwic2F2ZVwiLHZhbHVlOmZ1bmN0aW9uKHQpe3RoaXMucG9zaXRpb24+PXRoaXMubWF4TGVuZ3RoJiZ0aGlzLnRydW5jYXRlKHRoaXMuc3RhY2ssdGhpcy5tYXhMZW5ndGgpLHRoaXMucG9zaXRpb249TWF0aC5taW4odGhpcy5wb3NpdGlvbix0aGlzLnN0YWNrLmxlbmd0aC0xKSx0aGlzLnN0YWNrPXRoaXMuc3RhY2suc2xpY2UoMCx0aGlzLnBvc2l0aW9uKzEpO3ZhciBlPXRoaXMuYmxvY2tzLmdldEN1cnJlbnRCbG9ja0luZGV4KCksbj10aGlzLmJsb2Nrcy5nZXRCbG9ja3NDb3VudCgpLHI9ZTt0W2VdfHwoci09bi10Lmxlbmd0aCk7dmFyIG89IXRbcl18fFwicGFyYWdyYXBoXCIhPT10W3JdLnR5cGUmJlwiaGVhZGVyXCIhPT10W3JdLnR5cGU/bnVsbDp0aGlzLmdldENhcmV0SW5kZXgoZSk7dGhpcy5zdGFjay5wdXNoKHtpbmRleDpyLHN0YXRlOnQsY2FyZXRJbmRleDpvfSksdGhpcy5wb3NpdGlvbis9MSx0aGlzLm9uVXBkYXRlKCl9fSx7a2V5OlwiZ2V0Q2FyZXRJbmRleFwiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMuaG9sZGVyLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJjZS1ibG9ja19fY29udGVudFwiKTtyZXR1cm4gbmV3KGgoKSkoZVt0XS5maXJzdENoaWxkKS5nZXRQb3MoKX19LHtrZXk6XCJpbnNlcnREZWxldGVkQmxvY2tcIix2YWx1ZTpmdW5jdGlvbih0LGUsbil7Zm9yKHZhciByPTA7cjx0Lmxlbmd0aDtyKz0xKWlmKCFlW3JdfHx0W3JdLmlkIT09ZVtyXS5pZCl7dGhpcy5ibG9ja3MuaW5zZXJ0KHRbcl0udHlwZSx0W3JdLmRhdGEse30sciwhMCksdGhpcy5jYXJldC5zZXRUb0Jsb2NrKG4sXCJlbmRcIik7YnJlYWt9fX0se2tleTpcImJsb2NrV2FzRHJvcHBlZFwiLHZhbHVlOmZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQubGVuZ3RoPT09ZS5sZW5ndGgmJnQuc29tZSgoZnVuY3Rpb24odCxuKXtyZXR1cm4gdC5pZCE9PWVbbl0uaWR9KSl9fSx7a2V5OlwiYmxvY2tXYXNTa2lwcGVkXCIsdmFsdWU6ZnVuY3Rpb24odCxlLG4scil7cmV0dXJuIHQ8ZSYmbi5sZW5ndGghPT1yLmxlbmd0aH19LHtrZXk6XCJjb250ZW50Q2hhbmdlZEluTm9Gb2N1c0Jsb2NrXCIsdmFsdWU6ZnVuY3Rpb24odCxlKXtyZXR1cm4gdCE9PWV9fSx7a2V5OlwiYmxvY2tXYXNEZWxldGVkXCIsdmFsdWU6ZnVuY3Rpb24odCxlKXtyZXR1cm4gdC5sZW5ndGg+ZS5sZW5ndGh9fSx7a2V5OlwidW5kb1wiLHZhbHVlOihvPWUodSgpLm1hcmsoKGZ1bmN0aW9uIHQoKXt2YXIgZSxuLHIsbyxpLGEscyxjLGwsaCxmO3JldHVybiB1KCkud3JhcCgoZnVuY3Rpb24odCl7Zm9yKDs7KXN3aXRjaCh0LnByZXY9dC5uZXh0KXtjYXNlIDA6aWYoIXRoaXMuY2FuVW5kbygpKXt0Lm5leHQ9NDM7YnJlYWt9aWYoZT10aGlzLnN0YWNrW3RoaXMucG9zaXRpb25dLG49ZS5pbmRleCxyPWUuc3RhdGUsdGhpcy5wb3NpdGlvbi09MSx0aGlzLnNob3VsZFNhdmVIaXN0b3J5PSExLG89dGhpcy5zdGFja1t0aGlzLnBvc2l0aW9uXS5pbmRleCxpPXRoaXMuc3RhY2tbdGhpcy5wb3NpdGlvbl0sYT1pLnN0YXRlLHM9aS5jYXJldEluZGV4LHRoaXMub25VcGRhdGUoKSxjPXRoaXMuYmxvY2tzLmdldEJsb2Nrc0NvdW50KCksYVtvXXx8KG8tPTEsdGhpcy5zdGFja1t0aGlzLnBvc2l0aW9uXS5pbmRleD1vKSwhdGhpcy5ibG9ja1dhc0RlbGV0ZWQoYSxyKSl7dC5uZXh0PTEzO2JyZWFrfXRoaXMuaW5zZXJ0RGVsZXRlZEJsb2NrKGEscixvKSx0Lm5leHQ9Mzg7YnJlYWs7Y2FzZSAxMzppZighdGhpcy5ibG9ja1dhc1NraXBwZWQobyxuLGEscikpe3QubmV4dD0xOTticmVha31yZXR1cm4gdC5uZXh0PTE2LHRoaXMuYmxvY2tzLmRlbGV0ZShuKTtjYXNlIDE2OnRoaXMuY2FyZXQuc2V0VG9CbG9jayhvLFwiZW5kXCIpLHQubmV4dD0zODticmVhaztjYXNlIDE5OmlmKCEoYz5hLmxlbmd0aCkpe3QubmV4dD0yNzticmVha31yZXR1cm4gdC5uZXh0PTIyLHRoaXMuYmxvY2tzLnJlbmRlcih7YmxvY2tzOmF9KTtjYXNlIDIyOnJldHVybiB0Lm5leHQ9MjQsdGhpcy5lZGl0b3IuYmxvY2tzLmluc2VydCh0aGlzLmRlZmF1bHRCbG9jayx7fSk7Y2FzZSAyNDp0aGlzLnNldENhcmV0SW5kZXgobyxzKSx0Lm5leHQ9Mzg7YnJlYWs7Y2FzZSAyNzppZighdGhpcy5ibG9ja1dhc0Ryb3BwZWQoYSxyKSl7dC5uZXh0PTMzO2JyZWFrfXJldHVybiB0Lm5leHQ9MzAsdGhpcy5ibG9ja3MucmVuZGVyKHtibG9ja3M6YX0pO2Nhc2UgMzA6dGhpcy5jYXJldC5zZXRUb0Jsb2NrKG8sXCJlbmRcIiksdC5uZXh0PTM4O2JyZWFrO2Nhc2UgMzM6aWYoIXRoaXMuY29udGVudENoYW5nZWRJbk5vRm9jdXNCbG9jayhvLG4pKXt0Lm5leHQ9Mzg7YnJlYWt9cmV0dXJuIGw9dGhpcy5ibG9ja3MuZ2V0QmxvY2tCeUluZGV4KG4pLGg9bC5pZCx0Lm5leHQ9MzcsdGhpcy5ibG9ja3MudXBkYXRlKGgsYVtuXS5kYXRhKTtjYXNlIDM3OnRoaXMuc2V0Q2FyZXRJbmRleChvLHMpO2Nhc2UgMzg6aWYoIShmPXRoaXMuYmxvY2tzLmdldEJsb2NrQnlJbmRleChvKSkpe3QubmV4dD00MzticmVha31yZXR1cm4gdC5uZXh0PTQyLHRoaXMuYmxvY2tzLnVwZGF0ZShmLmlkLGFbb10uZGF0YSk7Y2FzZSA0Mjp0aGlzLnNldENhcmV0SW5kZXgobyxzKTtjYXNlIDQzOmNhc2VcImVuZFwiOnJldHVybiB0LnN0b3AoKX19KSx0LHRoaXMpfSkpKSxmdW5jdGlvbigpe3JldHVybiBvLmFwcGx5KHRoaXMsYXJndW1lbnRzKX0pfSx7a2V5Olwic2V0Q2FyZXRJbmRleFwiLHZhbHVlOmZ1bmN0aW9uKHQsZSl7aWYoZSYmLTEhPT1lKXt2YXIgbj10aGlzLmhvbGRlci5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwiY2UtYmxvY2tfX2NvbnRlbnRcIikscj1uZXcoaCgpKShuW3RdLmZpcnN0Q2hpbGQpO3NldFRpbWVvdXQoKGZ1bmN0aW9uKCl7cmV0dXJuIHIuc2V0UG9zKGUpfSksNTApfWVsc2UgdGhpcy5jYXJldC5zZXRUb0Jsb2NrKHQsXCJlbmRcIil9fSx7a2V5OlwiaW5zZXJ0QmxvY2tcIix2YWx1ZToocj1lKHUoKS5tYXJrKChmdW5jdGlvbiB0KGUsbil7cmV0dXJuIHUoKS53cmFwKChmdW5jdGlvbih0KXtmb3IoOzspc3dpdGNoKHQucHJldj10Lm5leHQpe2Nhc2UgMDpyZXR1cm4gdC5uZXh0PTIsdGhpcy5ibG9ja3MuaW5zZXJ0KGVbbl0udHlwZSxlW25dLmRhdGEse30sbiwhMCk7Y2FzZSAyOmNhc2VcImVuZFwiOnJldHVybiB0LnN0b3AoKX19KSx0LHRoaXMpfSkpKSxmdW5jdGlvbih0LGUpe3JldHVybiByLmFwcGx5KHRoaXMsYXJndW1lbnRzKX0pfSx7a2V5OlwiaW5zZXJ0U2tpcHBlZEJsb2Nrc1wiLHZhbHVlOmZ1bmN0aW9uKHQsZSl7Zm9yKHZhciBuPXQ7bjxlLmxlbmd0aDtuKz0xKXRoaXMuaW5zZXJ0QmxvY2soZSxuKX19LHtrZXk6XCJyZWRvXCIsdmFsdWU6KG49ZSh1KCkubWFyaygoZnVuY3Rpb24gdCgpe3ZhciBlLG4scixvLGksYSxzLGM7cmV0dXJuIHUoKS53cmFwKChmdW5jdGlvbih0KXtmb3IoOzspc3dpdGNoKHQucHJldj10Lm5leHQpe2Nhc2UgMDppZighdGhpcy5jYW5SZWRvKCkpe3QubmV4dD0yNjticmVha31pZih0aGlzLnBvc2l0aW9uKz0xLHRoaXMuc2hvdWxkU2F2ZUhpc3Rvcnk9ITEsZT10aGlzLnN0YWNrW3RoaXMucG9zaXRpb25dLG49ZS5pbmRleCxyPWUuc3RhdGUsbz1lLmNhcmV0SW5kZXgsaT10aGlzLnN0YWNrW3RoaXMucG9zaXRpb24tMV0sYT1pLmluZGV4LHM9aS5zdGF0ZSwhdGhpcy5ibG9ja1dhc0RlbGV0ZWQocyxyKSl7dC5uZXh0PTExO2JyZWFrfXJldHVybiB0Lm5leHQ9OCx0aGlzLmJsb2Nrcy5kZWxldGUoKTtjYXNlIDg6dGhpcy5jYXJldC5zZXRUb0Jsb2NrKG4sXCJlbmRcIiksdC5uZXh0PTIwO2JyZWFrO2Nhc2UgMTE6aWYoIXRoaXMuYmxvY2tXYXNTa2lwcGVkKGEsbixyLHMpKXt0Lm5leHQ9MTY7YnJlYWt9dGhpcy5pbnNlcnRTa2lwcGVkQmxvY2tzKHMubGVuZ3RoLHIpLHRoaXMuY2FyZXQuc2V0VG9CbG9jayhuLFwiZW5kXCIpLHQubmV4dD0yMDticmVhaztjYXNlIDE2OmlmKCF0aGlzLmJsb2NrV2FzRHJvcHBlZChyLHMpfHwxPT09dGhpcy5wb3NpdGlvbil7dC5uZXh0PTIwO2JyZWFrfXJldHVybiB0Lm5leHQ9MTksdGhpcy5ibG9ja3MucmVuZGVyKHtibG9ja3M6cn0pO2Nhc2UgMTk6dGhpcy5jYXJldC5zZXRUb0Jsb2NrKG4sXCJlbmRcIik7Y2FzZSAyMDppZih0aGlzLm9uVXBkYXRlKCksIShjPXRoaXMuYmxvY2tzLmdldEJsb2NrQnlJbmRleChuKSkpe3QubmV4dD0yNjticmVha31yZXR1cm4gdC5uZXh0PTI1LHRoaXMuYmxvY2tzLnVwZGF0ZShjLmlkLHJbbl0uZGF0YSk7Y2FzZSAyNTp0aGlzLnNldENhcmV0SW5kZXgobixvKTtjYXNlIDI2OmNhc2VcImVuZFwiOnJldHVybiB0LnN0b3AoKX19KSx0LHRoaXMpfSkpKSxmdW5jdGlvbigpe3JldHVybiBuLmFwcGx5KHRoaXMsYXJndW1lbnRzKX0pfSx7a2V5OlwiY2FuVW5kb1wiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIXRoaXMucmVhZE9ubHkmJnRoaXMucG9zaXRpb24+MH19LHtrZXk6XCJjYW5SZWRvXCIsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4hdGhpcy5yZWFkT25seSYmdGhpcy5wb3NpdGlvbjx0aGlzLmNvdW50KCl9fSx7a2V5OlwiY291bnRcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLnN0YWNrLmxlbmd0aC0xfX0se2tleTpcInBhcnNlS2V5c1wiLHZhbHVlOmZ1bmN0aW9uKHQpe3ZhciBlPXtDTUQ6LyhNYWMpL2kudGVzdChuYXZpZ2F0b3IucGxhdGZvcm0pP1wibWV0YUtleVwiOlwiY3RybEtleVwiLEFMVDpcImFsdEtleVwiLFNISUZUOlwic2hpZnRLZXlcIn0sbj10LnNsaWNlKDAsLTEpLm1hcCgoZnVuY3Rpb24odCl7cmV0dXJuIGVbdF19KSkscj1uLmluY2x1ZGVzKFwic2hpZnRLZXlcIikmJjI9PT10Lmxlbmd0aD90W3QubGVuZ3RoLTFdLnRvVXBwZXJDYXNlKCk6dFt0Lmxlbmd0aC0xXS50b0xvd2VyQ2FzZSgpO3JldHVybiBuLnB1c2gociksbn19LHtrZXk6XCJzZXRFdmVudExpc3RlbmVyc1wiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcyxlPXRoaXMuaG9sZGVyLG49dGhpcy5jb25maWcuc2hvcnRjdXRzLHI9bi51bmRvLG89bi5yZWRvLGk9ci5tYXAoKGZ1bmN0aW9uKHQpe3JldHVybiB0LnJlcGxhY2UoLyAvZyxcIlwiKS5zcGxpdChcIitcIil9KSksYT1vLm1hcCgoZnVuY3Rpb24odCl7cmV0dXJuIHQucmVwbGFjZSgvIC9nLFwiXCIpLnNwbGl0KFwiK1wiKX0pKSxzPWkubWFwKChmdW5jdGlvbihlKXtyZXR1cm4gdC5wYXJzZUtleXMoZSl9KSksYz1hLm1hcCgoZnVuY3Rpb24oZSl7cmV0dXJuIHQucGFyc2VLZXlzKGUpfSkpLHU9ZnVuY3Rpb24odCxlKXtyZXR1cm4gZS5yZWR1Y2UoKGZ1bmN0aW9uKGUsbil7cmV0dXJuIGV8fGZ1bmN0aW9uKHQsZSl7cmV0dXJuIDM9PT1lLmxlbmd0aCYmdFtlWzBdXSYmdFtlWzFdXSYmdC5rZXkudG9Mb3dlckNhc2UoKT09PWVbMl19KHQsbil9KSwhMSl9LGw9ZnVuY3Rpb24odCxlLG4pe3JldHVybiEoIWZ1bmN0aW9uKHQsZSl7cmV0dXJuIGUucmVkdWNlKChmdW5jdGlvbihlLG4pe3JldHVybiBlfHxmdW5jdGlvbih0LGUpe3JldHVybiAyPT09ZS5sZW5ndGgmJnRbZVswXV0mJnQua2V5LnRvTG93ZXJDYXNlKCk9PT1lWzFdfSh0LG4pfSksITEpfSh0LGUpfHx1KHQsbikpfHwhIXUodCxlKX0saD1mdW5jdGlvbihlKXtsKGUscyxjKSYmKGUucHJldmVudERlZmF1bHQoKSx0LnVuZG8oKSl9LGY9ZnVuY3Rpb24oZSl7bChlLGMscykmJihlLnByZXZlbnREZWZhdWx0KCksdC5yZWRvKCkpfTtlLmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsaCksZS5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLGYpLGUuYWRkRXZlbnRMaXN0ZW5lcihcImRlc3Ryb3lcIiwoZnVuY3Rpb24oKXtlLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsaCksZS5yZW1vdmVFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLGYpfSkpfX1dLFt7a2V5OlwiaXNSZWFkT25seVN1cHBvcnRlZFwiLGdldDpmdW5jdGlvbigpe3JldHVybiEwfX1dKSx0fSgpfSkoKSxyLmRlZmF1bHR9KSgpKSk7IiwiZXhwb3J0IGNsYXNzIEN1c3RvbVN0eWxlVG9vbHtcbiAgICBwcml2YXRlIGJ1dHRvbjogSFRNTEJ1dHRvbkVsZW1lbnQ7XG4gICAgcHJpdmF0ZSBzdGF0ZTogYm9vbGVhbjtcbiAgICBwcml2YXRlIGFwaTogYW55O1xuXG4gICAgc3RhdGljIGdldCBpc0lubGluZSgpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG5cbiAgICAvLyBAdHMtaWdub3JlXG4gICAgY29uc3RydWN0b3Ioe2FwaX0pIHtcbiAgICAgICAgdGhpcy5idXR0b24gPSBudWxsO1xuICAgICAgICB0aGlzLnN0YXRlID0gZmFsc2U7XG4gICAgICAgIHRoaXMuYXBpID0gYXBpO1xuICAgIH1cblxuICAgIHJlbmRlcigpe1xuICAgICAgICB0aGlzLmJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICAgICAgICB0aGlzLmJ1dHRvbi50eXBlID0gJ2J1dHRvbic7XG4gICAgICAgIHRoaXMuYnV0dG9uLnRleHRDb250ZW50ID0gJ0NTUyc7XG4gICAgICAgIHRoaXMuYnV0dG9uLmNsYXNzTGlzdC5hZGQoXCJjZS1pbmxpbmUtdG9vbFwiKTtcblxuICAgICAgICByZXR1cm4gdGhpcy5idXR0b247XG4gICAgfVxuXG4gICAgc2hvd19jcmVhdGVfZGlhbG9nKHJhbmdlOiBSYW5nZSl7XG4gICAgICAgIGlmKGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2N1c3RvbS1zdHlsZS10b29sLXNldHRpbmdzJykubGVuZ3RoID4gMCl7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHRvb2xiYXIgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdjZS1pbmxpbmUtdG9vbGJhcicpWzBdIGFzIEhUTUxFbGVtZW50O1xuXG4gICAgICAgIGxldCBzZXR0aW5nc19kaWFsb2dfaHRtbCA9IFwiXCIgK1xuICAgICAgICAgICAgXCI8ZGl2IGNsYXNzPSdjdXN0b20tc3R5bGUtdG9vbC1zZXR0aW5ncyc+XCIgK1xuICAgICAgICAgICAgXCI8bGFiZWw+Q2xhc3Nlczo8L2xhYmVsPlwiICtcbiAgICAgICAgICAgIFwiPGlucHV0IGNsYXNzPSdjZHgtaW5wdXQnIGlkPSdjdXN0b20tc3R5bGUtdG9vbC1zZXR0aW5ncy1jbGFzc2VzJyB0eXBlPSd0ZXh0JyBwbGFjZWhvbGRlcj0nZXhhbXBsZS1jbGFzczEgbXktY2xhc3MyJz5cIitcbiAgICAgICAgICAgIFwiPGxhYmVsPklubGluZSBTdHlsZSAoQ1NTKTo8L2xhYmVsPlwiICtcbiAgICAgICAgICAgIFwiPHRleHRhcmVhIGNsYXNzPSdjZHgtaW5wdXQnIGlkPSdjdXN0b20tc3R5bGUtdG9vbC1zZXR0aW5ncy1pbmxpbmUtc3R5bGUnIHBsYWNlaG9sZGVyPSdiYWNrZ3JvdW5kLWNvbG9yOiBncmF5Oyc+PC90ZXh0YXJlYT5cIiArXG4gICAgICAgICAgICBcIjxkaXYgc3R5bGU9J2Rpc3BsYXk6IGZsZXg7IGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2Vlbic+PGJ1dHRvbiBpZD0nY3VzdG9tLXN0eWxlLWFib3J0JyBjbGFzcz0nYnRuIGJ0bi1zbSBidG4tc2Vjb25kYXJ5IG10LTEnPkNhbmNlbDwvYnV0dG9uPjxidXR0b24gaWQ9J2N1c3RvbS1zdHlsZS1zYXZlJyBjbGFzcz0nYnRuIGJ0bi1zbSBidG4tcHJpbWFyeSBtdC0xJz5TYXZlPC9idXR0b24+PC9kaXY+XCIgK1xuICAgICAgICAgICAgXCI8L2Rpdj5cIjtcbiAgICAgICAgdG9vbGJhci5pbnNlcnRBZGphY2VudEhUTUwoJ2FmdGVyZW5kJywgc2V0dGluZ3NfZGlhbG9nX2h0bWwpO1xuXG4gICAgICAgIGxldCBzZXR0aW5nc19kaWFsb2c6IEhUTUxFbGVtZW50ID0gdG9vbGJhci5wYXJlbnRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jdXN0b20tc3R5bGUtdG9vbC1zZXR0aW5ncycpIGFzIEhUTUxFbGVtZW50O1xuICAgICAgICBzZXR0aW5nc19kaWFsb2cuc3R5bGUubGVmdCA9IHRvb2xiYXIuc3R5bGUubGVmdDtcbiAgICAgICAgLy8gQWRkIHRoZSBzYW1lIHBvc2l0aW9uIGFzIHRoZSB0b29sYmFyIGJ1dCBhZGQgNDBweCB0byB0aGUgdG9wXG4gICAgICAgIGxldCBjdXJyZW50VG9wID0gcGFyc2VJbnQodG9vbGJhci5zdHlsZS50b3AsIDEwKTtcbiAgICAgICAgc2V0dGluZ3NfZGlhbG9nLnN0eWxlLnRvcCA9IChjdXJyZW50VG9wICsgNDApICsgJ3B4JztcblxuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImN1c3RvbS1zdHlsZS1hYm9ydFwiKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgICAgIHNldHRpbmdzX2RpYWxvZy5yZW1vdmUoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjdXN0b20tc3R5bGUtc2F2ZVwiKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgICAgIGxldCBjbGFzc2VzID0gKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjdXN0b20tc3R5bGUtdG9vbC1zZXR0aW5ncy1jbGFzc2VzJykgYXMgSFRNTElucHV0RWxlbWVudCkudmFsdWU7XG4gICAgICAgICAgICBsZXQgaW5saW5lX3N0eWxlID0gKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjdXN0b20tc3R5bGUtdG9vbC1zZXR0aW5ncy1pbmxpbmUtc3R5bGUnKSBhcyBIVE1MVGV4dEFyZWFFbGVtZW50KS52YWx1ZTtcblxuICAgICAgICAgICAgbGV0IGN1c3RvbV9zdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2N1c3RvbXN0eWxlJyk7XG4gICAgICAgICAgICBjdXN0b21fc3R5bGUuc2V0QXR0cmlidXRlKCdpbmxpbmUtc3R5bGUnLCBpbmxpbmVfc3R5bGUpO1xuICAgICAgICAgICAgY3VzdG9tX3N0eWxlLnNldEF0dHJpYnV0ZSgnY2xhc3NlcycsIGNsYXNzZXMpO1xuXG4gICAgICAgICAgICBsZXQgc2VsZWN0ZWRUZXh0ID0gcmFuZ2UuZXh0cmFjdENvbnRlbnRzKCk7XG4gICAgICAgICAgICBjdXN0b21fc3R5bGUuYXBwZW5kQ2hpbGQoc2VsZWN0ZWRUZXh0KTtcbiAgICAgICAgICAgIHJhbmdlLmluc2VydE5vZGUoY3VzdG9tX3N0eWxlKTtcbiAgICAgICAgICAgIHNldHRpbmdzX2RpYWxvZy5yZW1vdmUoKTtcblxuICAgICAgICAgICAgdGhpcy5hcGkuc2VsZWN0aW9uLmV4cGFuZFRvVGFnKGN1c3RvbV9zdHlsZSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHNob3dfY2hhbmdlX2RpYWxvZyhyYW5nZTogUmFuZ2Upe1xuICAgICAgICBpZihkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdjdXN0b20tc3R5bGUtdG9vbC1zZXR0aW5ncycpLmxlbmd0aCA+IDApe1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGxldCBlbGVtZW50ID0gdGhpcy5hcGkuc2VsZWN0aW9uLmZpbmRQYXJlbnRUYWcoJ0NVU1RPTVNUWUxFJyk7XG5cbiAgICAgICAgbGV0IHRvb2xiYXIgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdjZS1pbmxpbmUtdG9vbGJhcicpWzBdIGFzIEhUTUxFbGVtZW50O1xuXG4gICAgICAgIGxldCBzZXR0aW5nc19kaWFsb2dfaHRtbCA9IFwiXCIgK1xuICAgICAgICAgICAgXCI8ZGl2IGNsYXNzPSdjdXN0b20tc3R5bGUtdG9vbC1zZXR0aW5ncyc+XCIgK1xuICAgICAgICAgICAgXCI8bGFiZWw+Q2xhc3Nlczo8L2xhYmVsPlwiICtcbiAgICAgICAgICAgIFwiPGlucHV0IGNsYXNzPSdjZHgtaW5wdXQnIGlkPSdjdXN0b20tc3R5bGUtdG9vbC1zZXR0aW5ncy1jbGFzc2VzJyB0eXBlPSd0ZXh0JyBwbGFjZWhvbGRlcj0nZXhhbXBsZS1jbGFzczEgbXktY2xhc3MyJyB2YWx1ZT1cIitlbGVtZW50LmdldEF0dHJpYnV0ZShcImNsYXNzZXNcIikrXCI+XCIrXG4gICAgICAgICAgICBcIjxsYWJlbD5JbmxpbmUgU3R5bGUgKENTUyk6PC9sYWJlbD5cIiArXG4gICAgICAgICAgICBcIjx0ZXh0YXJlYSBjbGFzcz0nY2R4LWlucHV0JyBpZD0nY3VzdG9tLXN0eWxlLXRvb2wtc2V0dGluZ3MtaW5saW5lLXN0eWxlJyBwbGFjZWhvbGRlcj0nYmFja2dyb3VuZC1jb2xvcjogZ3JheTsnPlwiK2VsZW1lbnQuZ2V0QXR0cmlidXRlKFwiaW5saW5lLXN0eWxlXCIpK1wiPC90ZXh0YXJlYT5cIiArXG4gICAgICAgICAgICBcIjxkaXYgc3R5bGU9J2Rpc3BsYXk6IGZsZXg7IGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2Vlbic+PGJ1dHRvbiBpZD0nY3VzdG9tLXN0eWxlLWFib3J0JyBjbGFzcz0nYnRuIGJ0bi1zbSBidG4tc2Vjb25kYXJ5IG10LTEnPkNhbmNlbDwvYnV0dG9uPjxidXR0b24gaWQ9J2N1c3RvbS1zdHlsZS1kZWxldGUnIGNsYXNzPSdidG4gYnRuLXNtIGJ0bi1kYW5nZXInPkRlbGV0ZTwvYnV0dG9uPjxidXR0b24gaWQ9J2N1c3RvbS1zdHlsZS1zYXZlJyBjbGFzcz0nYnRuIGJ0bi1zbSBidG4tcHJpbWFyeSBtdC0xJz5TYXZlPC9idXR0b24+PC9kaXY+XCIgK1xuICAgICAgICAgICAgXCI8L2Rpdj5cIjtcbiAgICAgICAgdG9vbGJhci5pbnNlcnRBZGphY2VudEhUTUwoJ2FmdGVyZW5kJywgc2V0dGluZ3NfZGlhbG9nX2h0bWwpO1xuXG4gICAgICAgIGxldCBzZXR0aW5nc19kaWFsb2c6IEhUTUxFbGVtZW50ID0gdG9vbGJhci5wYXJlbnRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jdXN0b20tc3R5bGUtdG9vbC1zZXR0aW5ncycpIGFzIEhUTUxFbGVtZW50O1xuICAgICAgICBzZXR0aW5nc19kaWFsb2cuc3R5bGUubGVmdCA9IHRvb2xiYXIuc3R5bGUubGVmdDtcbiAgICAgICAgLy8gQWRkIHRoZSBzYW1lIHBvc2l0aW9uIGFzIHRoZSB0b29sYmFyIGJ1dCBhZGQgNDBweCB0byB0aGUgdG9wXG4gICAgICAgIGxldCBjdXJyZW50VG9wID0gcGFyc2VJbnQodG9vbGJhci5zdHlsZS50b3AsIDEwKTtcbiAgICAgICAgc2V0dGluZ3NfZGlhbG9nLnN0eWxlLnRvcCA9IChjdXJyZW50VG9wICsgNDApICsgJ3B4JztcblxuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImN1c3RvbS1zdHlsZS1hYm9ydFwiKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgICAgIHNldHRpbmdzX2RpYWxvZy5yZW1vdmUoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjdXN0b20tc3R5bGUtc2F2ZVwiKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKFwiY2xhc3Nlc1wiLCAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2N1c3RvbS1zdHlsZS10b29sLXNldHRpbmdzLWNsYXNzZXMnKSBhcyBIVE1MSW5wdXRFbGVtZW50KS52YWx1ZSk7XG4gICAgICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShcImlubGluZS1zdHlsZVwiLCAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2N1c3RvbS1zdHlsZS10b29sLXNldHRpbmdzLWlubGluZS1zdHlsZScpIGFzIEhUTUxUZXh0QXJlYUVsZW1lbnQpLnZhbHVlKTtcbiAgICAgICAgICAgIHNldHRpbmdzX2RpYWxvZy5yZW1vdmUoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjdXN0b20tc3R5bGUtZGVsZXRlXCIpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICAgICAgbGV0IHRleHQgPSByYW5nZS5leHRyYWN0Q29udGVudHMoKTtcbiAgICAgICAgICAgIGVsZW1lbnQucmVtb3ZlKCk7XG4gICAgICAgICAgICByYW5nZS5pbnNlcnROb2RlKHRleHQpO1xuICAgICAgICAgICAgc2V0dGluZ3NfZGlhbG9nLnJlbW92ZSgpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBzdXJyb3VuZChyYW5nZTogUmFuZ2Upe1xuICAgICAgICBpZiAodGhpcy5zdGF0ZSkge1xuICAgICAgICAgICAgdGhpcy5zaG93X2NoYW5nZV9kaWFsb2cocmFuZ2UpO1xuICAgICAgICB9ZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnNob3dfY3JlYXRlX2RpYWxvZyhyYW5nZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjaGVja1N0YXRlKHNlbGVjdGlvbjogYW55KSB7XG4gICAgICAgIGNvbnN0IHRleHQgPSBzZWxlY3Rpb24uYW5jaG9yTm9kZTtcblxuICAgICAgICBpZiAoIXRleHQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGFuY2hvckVsZW1lbnQgPSB0ZXh0IGluc3RhbmNlb2YgRWxlbWVudCA/IHRleHQgOiB0ZXh0LnBhcmVudEVsZW1lbnQ7XG5cbiAgICAgICAgdGhpcy5zdGF0ZSA9ICEhYW5jaG9yRWxlbWVudC5jbG9zZXN0KCdjdXN0b21zdHlsZScpO1xuICAgIH1cblxuICAgIHN0YXRpYyBnZXQgc2FuaXRpemUoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBjdXN0b21zdHlsZTogZnVuY3Rpb24oZWwgOiBhbnkpe1xuICAgICAgICAgICAgICAgIHJldHVybiBlbC5nZXRBdHRyaWJ1dGUoXCJpbmxpbmUtc3R5bGVcIikudHJpbSgpLmxlbmd0aCA+IDAgfHwgZWwuZ2V0QXR0cmlidXRlKFwiY2xhc3Nlc1wiKS50cmltKCkubGVuZ3RoID4gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG59IiwiZXhwb3J0IGNsYXNzIE5vdGVUb29se1xuICAgIHByaXZhdGUgYnV0dG9uOiBIVE1MQnV0dG9uRWxlbWVudDtcbiAgICBwcml2YXRlIHN0YXRlOiBib29sZWFuO1xuICAgIHByaXZhdGUgYXBpOiBhbnk7XG5cbiAgICBzdGF0aWMgZ2V0IGlzSW5saW5lKCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cblxuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBjb25zdHJ1Y3Rvcih7ZGF0YSwgYXBpfSkge1xuICAgICAgICB0aGlzLmJ1dHRvbiA9IG51bGw7XG4gICAgICAgIHRoaXMuc3RhdGUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5hcGkgPSBhcGk7XG5cbiAgICAgICAgLy9UT0RPOiBBZGQgdGhlIGV2ZW50IGxpc3RlbmVycyBlYXJsaWVyLCBzbyB0aGF0IHRoZSBub3RlcyBhcmUgY2xpY2thYmxlIGZyb20gdGhlIHN0YXJ0LlxuICAgICAgICBOb3RlVG9vbC5hZGRfYWxsX3Nob3dfbm90ZV9zZXR0aW5nc19saXN0ZW5lcnMoKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgYWRkX2FsbF9zaG93X25vdGVfc2V0dGluZ3NfbGlzdGVuZXJzKCl7XG4gICAgICAgIGxldCBub3RlcyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ25vdGUnKTtcbiAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IG5vdGVzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgICAgIG5vdGVzW2ldLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5zaG93X25vdGVfc2V0dGluZ3NfZWRpdG9yKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vLyBHZXQncyBjYWxsZWQgd2hlbiBhbiBleGlzdGluZyBub3RlIGlzIGNsaWNrZWQuXG4gICAgc3RhdGljIHNob3dfbm90ZV9zZXR0aW5nc19lZGl0b3IoZTogRXZlbnQpe1xuICAgICAgICAvLyBIaWRlIGFsbCBvdGhlciBub3RlLXNldHRpbmdzIGRpYWxvZ3NcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICBmb3IobGV0IHNldHRpbmdzIG9mIGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ25vdGUtc2V0dGluZ3MnKSl7XG4gICAgICAgICAgICBzZXR0aW5ncy5yZW1vdmUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBub3RlID0gZS50YXJnZXQgYXMgSFRNTEVsZW1lbnQ7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiR290IGNsaWNrZWQgYnk6XCIpO1xuICAgICAgICBjb25zb2xlLmxvZyhub3RlKTtcbiAgICAgICAgbGV0IG5vdGVfdHlwZSA9IG5vdGUuZ2V0QXR0cmlidXRlKFwibm90ZS10eXBlXCIpO1xuICAgICAgICBsZXQgbm90ZV9jb250ZW50ID0gbm90ZS5nZXRBdHRyaWJ1dGUoXCJub3RlLWNvbnRlbnRcIik7XG5cblxuICAgICAgICBsZXQgdG9vbGJhciA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2NlLWlubGluZS10b29sYmFyJylbMF0gYXMgSFRNTEVsZW1lbnQ7XG5cbiAgICAgICAgbGV0IHNldHRpbmdzX2RpYWxvZ19odG1sID0gXCJcIiArXG4gICAgICAgICAgICBcIjxkaXYgY2xhc3M9J25vdGUtc2V0dGluZ3MnPlwiICtcbiAgICAgICAgICAgIFwiPGxhYmVsPk1vZGlmeSBOb3RlOjwvbGFiZWw+XCIgK1xuICAgICAgICAgICAgXCI8c2VsZWN0IGlkPSdub3RlLXR5cGUnIGNsYXNzPSdmb3JtLXNlbGVjdCBmb3JtLXNlbGVjdC1zbSc+XCI7XG5cbiAgICAgICAgaWYobm90ZV90eXBlID09PSBcImZvb3Rub3RlXCIpe1xuICAgICAgICAgICAgc2V0dGluZ3NfZGlhbG9nX2h0bWwgKz0gXCI8b3B0aW9uIHZhbHVlPSdmb290bm90ZScgc2VsZWN0ZWQ+Rm9vdG5vdGU8L29wdGlvbj48b3B0aW9uIHZhbHVlPSdlbmRub3RlJz5FbmRub3RlPC9vcHRpb24+XCI7XG4gICAgICAgIH1lbHNle1xuICAgICAgICAgICAgc2V0dGluZ3NfZGlhbG9nX2h0bWwgKz0gXCI8b3B0aW9uIHZhbHVlPSdmb290bm90ZSc+Rm9vdG5vdGU8L29wdGlvbj48b3B0aW9uIHZhbHVlPSdlbmRub3RlJyBzZWxlY3RlZD5FbmRub3RlPC9vcHRpb24+XCI7XG4gICAgICAgIH1cblxuICAgICAgICBzZXR0aW5nc19kaWFsb2dfaHRtbCArPSBcIjwvc2VsZWN0PlwiICtcbiAgICAgICAgICAgIFwiPHRleHRhcmVhIGlkPSdub3RlLWNvbnRlbnQnIGNsYXNzPSdmb3JtLWNvbnRyb2wgZm9ybS1jb250cm9sLXNtIG10LTEnPlwiK25vdGVfY29udGVudCtcIjwvdGV4dGFyZWE+XCIgK1xuICAgICAgICAgICAgXCI8ZGl2IHN0eWxlPSdkaXNwbGF5OiBmbGV4OyBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW4nPjxidXR0b24gaWQ9J25vdGUtZGVsZXRlJyBjbGFzcz0nYnRuIGJ0bi1zbSBidG4tZGFuZ2VyIG10LTEnPkRlbGV0ZSBOb3RlPC9idXR0b24+PGJ1dHRvbiBpZD0nbm90ZS1hYm9ydCcgY2xhc3M9J2J0biBidG4tc20gYnRuLXNlY29uZGFyeSBtdC0xJz5DYW5jZWw8L2J1dHRvbj48YnV0dG9uIGlkPSdub3RlLXNhdmUnIGNsYXNzPSdidG4gYnRuLXNtIGJ0bi1wcmltYXJ5IG10LTEnPlNhdmU8L2J1dHRvbj48L2Rpdj5cIiArXG4gICAgICAgICAgICBcIjwvZGl2PlwiO1xuICAgICAgICB0b29sYmFyLmluc2VydEFkamFjZW50SFRNTCgnYWZ0ZXJlbmQnLCBzZXR0aW5nc19kaWFsb2dfaHRtbCk7XG5cbiAgICAgICAgbGV0IHNldHRpbmdzX2RpYWxvZzogSFRNTEVsZW1lbnQgPSB0b29sYmFyLnBhcmVudEVsZW1lbnQucXVlcnlTZWxlY3RvcignLm5vdGUtc2V0dGluZ3MnKTtcbiAgICAgICAgc2V0dGluZ3NfZGlhbG9nLnN0eWxlLmxlZnQgPSB0b29sYmFyLnN0eWxlLmxlZnQ7XG4gICAgICAgIC8vIEFkZCB0aGUgc2FtZSBwb3NpdGlvbiBhcyB0aGUgdG9vbGJhciBidXQgYWRkIDQwcHggdG8gdGhlIHRvcFxuICAgICAgICBsZXQgY3VycmVudFRvcCA9IHBhcnNlSW50KHRvb2xiYXIuc3R5bGUudG9wLCAxMCk7XG4gICAgICAgIHNldHRpbmdzX2RpYWxvZy5zdHlsZS50b3AgPSAoY3VycmVudFRvcCArIDQwKSArICdweCc7XG5cbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ25vdGUtc2F2ZScpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICAgICAgbGV0IG5vdGVfdHlwZSA9IChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbm90ZS10eXBlJykgYXMgSFRNTFNlbGVjdEVsZW1lbnQpLnZhbHVlO1xuICAgICAgICAgICAgbGV0IG5vdGVfY29udGVudCA9IChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbm90ZS1jb250ZW50JykgYXMgSFRNTFRleHRBcmVhRWxlbWVudCkudmFsdWU7XG5cbiAgICAgICAgICAgIG5vdGUuc2V0QXR0cmlidXRlKFwibm90ZS10eXBlXCIsIG5vdGVfdHlwZSk7XG4gICAgICAgICAgICBub3RlLnNldEF0dHJpYnV0ZShcIm5vdGUtY29udGVudFwiLCBub3RlX2NvbnRlbnQpO1xuICAgICAgICAgICAgaWYobm90ZV90eXBlID09PSBcImZvb3Rub3RlXCIpe1xuICAgICAgICAgICAgICAgIG5vdGUuaW5uZXJIVE1MID0gXCJGXCI7XG4gICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICBub3RlLmlubmVySFRNTCA9IFwiRVwiO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBzZXR0aW5nc19kaWFsb2cucmVtb3ZlKCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdub3RlLWFib3J0JykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgICAgICBzZXR0aW5nc19kaWFsb2cucmVtb3ZlKCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdub3RlLWRlbGV0ZScpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgbm90ZS5yZW1vdmUoKTtcbiAgICAgICAgICAgIHNldHRpbmdzX2RpYWxvZy5yZW1vdmUoKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmVuZGVyKCl7XG4gICAgICAgIHRoaXMuYnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gICAgICAgIHRoaXMuYnV0dG9uLnR5cGUgPSAnYnV0dG9uJztcbiAgICAgICAgdGhpcy5idXR0b24udGV4dENvbnRlbnQgPSAnTm90ZSc7XG4gICAgICAgIHRoaXMuYnV0dG9uLmNsYXNzTGlzdC5hZGQoXCJjZS1pbmxpbmUtdG9vbFwiKTtcblxuICAgICAgICByZXR1cm4gdGhpcy5idXR0b247XG4gICAgfVxuXG4gICAgc2hvd19ub3RlX3NldHRpbmdzKHJhbmdlOiBSYW5nZSl7XG4gICAgICAgIGlmKGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ25vdGUtc2V0dGluZ3MnKS5sZW5ndGggPiAwKXtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBsZXQgdG9vbGJhciA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2NlLWlubGluZS10b29sYmFyJylbMF0gYXMgSFRNTEVsZW1lbnQ7XG5cbiAgICAgICAgbGV0IHNldHRpbmdzX2RpYWxvZ19odG1sID0gXCJcIiArXG4gICAgICAgICAgICBcIjxkaXYgY2xhc3M9J25vdGUtc2V0dGluZ3MnPlwiICtcbiAgICAgICAgICAgIFwiPGxhYmVsPkFkZCBuZXcgTm90ZTo8L2xhYmVsPlwiICtcbiAgICAgICAgICAgIFwiPHNlbGVjdCBpZD0nbm90ZS10eXBlJyBjbGFzcz0nZm9ybS1zZWxlY3QgZm9ybS1zZWxlY3Qtc20nPjxvcHRpb24gdmFsdWU9J2Zvb3Rub3RlJz5Gb290bm90ZTwvb3B0aW9uPjxvcHRpb24gdmFsdWU9J2VuZG5vdGUnPkVuZG5vdGU8L29wdGlvbj48L3NlbGVjdD5cIiArXG4gICAgICAgICAgICBcIjx0ZXh0YXJlYSBpZD0nbm90ZS1jb250ZW50JyBjbGFzcz0nZm9ybS1jb250cm9sIGZvcm0tY29udHJvbC1zbSBtdC0xJz48L3RleHRhcmVhPlwiICtcbiAgICAgICAgICAgIFwiPGRpdiBzdHlsZT0nZGlzcGxheTogZmxleDsganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuJz48YnV0dG9uIGlkPSdub3RlLWFib3J0JyBjbGFzcz0nYnRuIGJ0bi1zbSBidG4tc2Vjb25kYXJ5IG10LTEnPkNhbmNlbDwvYnV0dG9uPjxidXR0b24gaWQ9J25vdGUtc2F2ZScgY2xhc3M9J2J0biBidG4tc20gYnRuLXByaW1hcnkgbXQtMSc+U2F2ZTwvYnV0dG9uPjwvZGl2PlwiICtcbiAgICAgICAgICAgIFwiPC9kaXY+XCI7XG4gICAgICAgIHRvb2xiYXIuaW5zZXJ0QWRqYWNlbnRIVE1MKCdhZnRlcmVuZCcsIHNldHRpbmdzX2RpYWxvZ19odG1sKTtcblxuICAgICAgICBsZXQgc2V0dGluZ3NfZGlhbG9nOiBIVE1MRWxlbWVudCA9IHRvb2xiYXIucGFyZW50RWxlbWVudC5xdWVyeVNlbGVjdG9yKCcubm90ZS1zZXR0aW5ncycpO1xuICAgICAgICBzZXR0aW5nc19kaWFsb2cuc3R5bGUubGVmdCA9IHRvb2xiYXIuc3R5bGUubGVmdDtcbiAgICAgICAgLy8gQWRkIHRoZSBzYW1lIHBvc2l0aW9uIGFzIHRoZSB0b29sYmFyIGJ1dCBhZGQgNDBweCB0byB0aGUgdG9wXG4gICAgICAgIGxldCBjdXJyZW50VG9wID0gcGFyc2VJbnQodG9vbGJhci5zdHlsZS50b3AsIDEwKTtcbiAgICAgICAgc2V0dGluZ3NfZGlhbG9nLnN0eWxlLnRvcCA9IChjdXJyZW50VG9wICsgNDApICsgJ3B4JztcblxuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbm90ZS1zYXZlJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgICAgICBsZXQgbm90ZV90eXBlID0gKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdub3RlLXR5cGUnKSBhcyBIVE1MU2VsZWN0RWxlbWVudCkudmFsdWU7XG4gICAgICAgICAgICBsZXQgbm90ZV9jb250ZW50ID0gKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdub3RlLWNvbnRlbnQnKSBhcyBIVE1MVGV4dEFyZWFFbGVtZW50KS52YWx1ZTtcblxuICAgICAgICAgICAgbGV0IG5vdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gICAgICAgICAgICBub3RlLnNldEF0dHJpYnV0ZShcIm5vdGUtdHlwZVwiLCBub3RlX3R5cGUpO1xuICAgICAgICAgICAgbm90ZS5zZXRBdHRyaWJ1dGUoXCJub3RlLWNvbnRlbnRcIiwgbm90ZV9jb250ZW50KTtcbiAgICAgICAgICAgIGlmKG5vdGVfdHlwZSA9PT0gXCJmb290bm90ZVwiKXtcbiAgICAgICAgICAgICAgICBub3RlLmlubmVySFRNTCA9IFwiRlwiO1xuICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgbm90ZS5pbm5lckhUTUwgPSBcIkVcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG5vdGUuY2xhc3NMaXN0LmFkZCgnbm90ZScpO1xuICAgICAgICAgICAgbm90ZS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIE5vdGVUb29sLnNob3dfbm90ZV9zZXR0aW5nc19lZGl0b3IpO1xuICAgICAgICAgICAgcmFuZ2UuY29sbGFwc2UoZmFsc2UpO1xuICAgICAgICAgICAgcmFuZ2UuaW5zZXJ0Tm9kZShub3RlKTtcbiAgICAgICAgICAgIHNldHRpbmdzX2RpYWxvZy5yZW1vdmUoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ25vdGUtYWJvcnQnKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgICAgIHNldHRpbmdzX2RpYWxvZy5yZW1vdmUoKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgc3Vycm91bmQocmFuZ2U6IFJhbmdlKXtcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNob3dfbm90ZV9zZXR0aW5ncyhyYW5nZSlcbiAgICB9XG5cbiAgICBjaGVja1N0YXRlKHNlbGVjdGlvbjogYW55KSB7XG4gICAgICAgIGNvbnN0IHRleHQgPSBzZWxlY3Rpb24uYW5jaG9yTm9kZTtcblxuICAgICAgICBpZiAoIXRleHQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGFuY2hvckVsZW1lbnQgPSB0ZXh0IGluc3RhbmNlb2YgRWxlbWVudCA/IHRleHQgOiB0ZXh0LnBhcmVudEVsZW1lbnQ7XG5cbiAgICAgICAgdGhpcy5zdGF0ZSA9ICEhYW5jaG9yRWxlbWVudC5jbG9zZXN0KCcubm90ZScpO1xuICAgIH1cblxuICAgIHN0YXRpYyBnZXQgc2FuaXRpemUoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzcGFuOiBmdW5jdGlvbihlbCA6IGFueSl7XG4gICAgICAgICAgICAgICAgaWYoZWwuY2xhc3NMaXN0LmNvbnRhaW5zKCdub3RlJykpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYoZWwuZ2V0QXR0cmlidXRlKFwibm90ZS10eXBlXCIpICYmIGVsLmdldEF0dHJpYnV0ZShcIm5vdGUtY29udGVudFwiKSl7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwibm90ZS10eXBlXCI6IGVsLmdldEF0dHJpYnV0ZShcIm5vdGUtdHlwZVwiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIm5vdGUtY29udGVudFwiOiBlbC5nZXRBdHRyaWJ1dGUoXCJub3RlLWNvbnRlbnRcIiksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M6IFwibm90ZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1lbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cbn0iLCJpbXBvcnQgKiBhcyBwZGZqcyBmcm9tICdwZGZqcy1kaXN0JztcblxuaW1wb3J0IHtzZW5kX2dldF9yZW5kZXJpbmdfc3RhdHVzLCBzZW5kX3JlbmRlcl9wcm9qZWN0LCBzZW5kX3VwZGF0ZV9jb250ZW50X2Jsb2Nrc30gZnJvbSBcIi4vYXBpX3JlcXVlc3RzXCI7XG5cbmxldCBzdGF0dXNfdGltZXIgOiBOb2RlSlMuVGltZW91dHxudWxsID0gbnVsbDtcbnBkZmpzLkdsb2JhbFdvcmtlck9wdGlvbnMud29ya2VyU3JjID1cbiAgICAnL2pzL3BkZi53b3JrZXIubWpzJztcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiByZW5kZXJfcHJvamVjdF9saXN0ZW5lcigpe1xuICAgIGlmKHN0YXR1c190aW1lciAhPT0gbnVsbCl7XG4gICAgICAgIC8vIE9sZCByZW5kZXJpbmcgaXMgc3RpbGwgcnVubmluZywgZG9uJ3Qgc3RhcnQgYSBuZXcgb25lXG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBAdHMtaWdub3JlXG4gICAgbGV0IHByb2plY3RfaWQgOiBzdHJpbmcgPSA8c3RyaW5nPmdsb2JhbFRoaXMucHJvamVjdF9pZDtcblxuICAgIHNob3dfcmVuZGVyaW5nX2NvbCgpO1xuICAgIGxldCBpZCA6IHN0cmluZyA9IChhd2FpdCBzZW5kX3JlbmRlcl9wcm9qZWN0KHByb2plY3RfaWQpKS5kYXRhO1xuICAgIGNvbnNvbGUubG9nKFwiUmVuZGVyaW5nIGlkIGlzOiBcIiwgaWQpO1xuXG4gICAgc3RhdHVzX3RpbWVyID0gc2V0VGltZW91dChjaGVja19yZW5kZXJpbmdfc3RhdHVzLCAyNTAsIGlkKTtcblxufVxuXG5hc3luYyBmdW5jdGlvbiBjaGVja19yZW5kZXJpbmdfc3RhdHVzKHJlbmRlcl9pZDogc3RyaW5nKXtcbiAgICBsZXQgc3RhdHVzID0gYXdhaXQgc2VuZF9nZXRfcmVuZGVyaW5nX3N0YXR1cyhyZW5kZXJfaWQpO1xuICAgIGNvbnNvbGUubG9nKHN0YXR1cyk7XG4gICAgaWYoc3RhdHVzLmRhdGEgPT09IFwiUXVldWVkXCIpe1xuICAgICAgICBjb25zb2xlLmxvZyhcIlJlbmRlcmluZyBpcyBzdGlsbCBxdWV1ZWRcIik7XG4gICAgfWVsc2UgaWYoc3RhdHVzLmRhdGEgPT09IFwiUHJlcGFyaW5nXCIpe1xuICAgICAgICBjb25zb2xlLmxvZyhcIlJlbmRlcmluZyBpcyBiZWluZyBwcmVwYXJlZFwiKTtcbiAgICB9ZWxzZSBpZihzdGF0dXMuZGF0YSA9PT0gXCJSdW5uaW5nXCIpe1xuICAgICAgICBjb25zb2xlLmxvZyhcIlJlbmRlcmluZyBpcyBydW5uaW5nXCIpO1xuICAgIH1lbHNlIGlmKHN0YXR1cy5kYXRhID09PSBcIkZpbmlzaGVkXCIpe1xuICAgICAgICBjb25zb2xlLmxvZyhcIlJlbmRlcmluZyBmaW5pc2hlZFwiKTtcbiAgICB9ZWxzZSBpZihzdGF0dXMuZGF0YS5oYXNPd25Qcm9wZXJ0eShcIkZhaWxlZFwiKSl7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiUmVuZGVyaW5nIGZhaWxlZFwiKTtcbiAgICAgICAgY29uc29sZS5sb2coc3RhdHVzLmRhdGEpO1xuICAgIH1cblxuICAgIGlmKHN0YXR1cy5kYXRhICE9PSBcIkZpbmlzaGVkXCIgJiYgIXN0YXR1cy5kYXRhLmhhc093blByb3BlcnR5KFwiRmFpbGVkXCIpKSB7IC8vVE9ETzogZml4IGZhaWxlZCBzdGF0dXNcbiAgICAgICAgc3RhdHVzX3RpbWVyID0gc2V0VGltZW91dChjaGVja19yZW5kZXJpbmdfc3RhdHVzLCAyMDAsIHJlbmRlcl9pZCk7XG4gICAgfWVsc2V7XG4gICAgICAgIHN0YXR1c190aW1lciA9IG51bGw7XG4gICAgICAgIGF3YWl0IHNob3dfcGRmKHJlbmRlcl9pZCk7IC8vVE9ETyBvbmx5IHNob3cgcGRmIGlmIGl0IHdhcyBzdWNjZXNzZnVsXG4gICAgfVxufVxuXG5hc3luYyBmdW5jdGlvbiBzaG93X3BkZihyZW5kZXJpbmdfaWQ6IHN0cmluZyl7XG4gICAgbGV0IHBkZl91cmwgPSBgL2Rvd25sb2FkL3JlbmRlcmluZ3MvYCtyZW5kZXJpbmdfaWQ7XG5cbiAgICAvLyBTaG93IGRvd25sb2FkIGJ1dHRvblxuICAgIGxldCBkb3dubG9hZF9idXR0b24gPSA8SFRNTExpbmtFbGVtZW50PiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImVkaXRvcl9kb3dubG9hZF9wZGZfYnRuXCIpO1xuICAgIGRvd25sb2FkX2J1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKFwiaGlkZVwiKTtcbiAgICBkb3dubG9hZF9idXR0b24uaHJlZiA9IHBkZl91cmw7XG5cbiAgICBsZXQgc2NhbGUgPSAxO1xuICAgIGxldCB2aWV3ZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInRlc3RcIik7XG4gICAgdmlld2VyLmlubmVySFRNTCA9IFwiXCI7XG5cbiAgICBsZXQgbG9hZGluZ1Rhc2sgPSBwZGZqcy5nZXREb2N1bWVudChwZGZfdXJsKTtcbiAgICBsZXQgcGRmID0gYXdhaXQgbG9hZGluZ1Rhc2sucHJvbWlzZTtcblxuICAgIGZvcihsZXQgcGFnZV9udW0gPSAxOyBwYWdlX251bSA8PSBwZGYubnVtUGFnZXM7IHBhZ2VfbnVtKyspe1xuICAgICAgICBsZXQgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiKTtcbiAgICAgICAgY2FudmFzLmNsYXNzTGlzdC5hZGQoXCJwZGYtcGFnZVwiKTtcbiAgICAgICAgdmlld2VyLmFwcGVuZENoaWxkKGNhbnZhcyk7XG4gICAgICAgIGF3YWl0IHJlbmRlclBhZ2UocGFnZV9udW0sIGNhbnZhcyk7XG4gICAgfVxuXG4gICAgYXN5bmMgZnVuY3Rpb24gcmVuZGVyUGFnZShwYWdlTnVtYmVyOiBudW1iZXIsIGNhbnZhczogSFRNTENhbnZhc0VsZW1lbnQpIHtcbiAgICAgICAgbGV0IHBhZ2UgPSBhd2FpdCBwZGYuZ2V0UGFnZShwYWdlTnVtYmVyKTtcblxuICAgICAgICBsZXQgdmlld3BvcnQgPSBwYWdlLmdldFZpZXdwb3J0KHtzY2FsZTogc2NhbGV9KTtcbiAgICAgICAgICAgIGNhbnZhcy5oZWlnaHQgPSB2aWV3cG9ydC5oZWlnaHQ7XG4gICAgICAgICAgICBjYW52YXMud2lkdGggPSB2aWV3cG9ydC53aWR0aDtcbiAgICAgICAgICAgIHBhZ2UucmVuZGVyKFxuICAgICAgICAgICAgICAgIHtjYW52YXNDb250ZXh0OiBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKSwgdmlld3BvcnQ6IHZpZXdwb3J0fSk7XG4gICAgfVxufVxuXG5cblxuZnVuY3Rpb24gc2hvd19yZW5kZXJpbmdfY29sKCl7XG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJlZGl0b3ItcmVuZGVyLXByZXZpZXdcIikuY2xhc3NMaXN0LnJlbW92ZShcImhpZGVcIik7XG59IiwiZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNlbmRfdXBkYXRlX2NvbnRlbnRfYmxvY2tzKHByb2plY3RfaWQ6IHN0cmluZywgc2VjdGlvbl9wYXRoOiBzdHJpbmcsIGRhdGE6IGFueSl7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgL2FwaS9wcm9qZWN0cy9gK3Byb2plY3RfaWQrYC9zZWN0aW9ucy9gK3NlY3Rpb25fcGF0aCtcIi9jb250ZW50X2Jsb2Nrcy9cIiwge1xuICAgICAgICBtZXRob2Q6ICdQVVQnLFxuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgICAgIH0sXG4gICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGRhdGEpXG4gICAgfSk7XG4gICAgaWYoIXJlc3BvbnNlLm9rKXtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBGYWlsZWQgdG8gdXBkYXRlIGNvbnRlbnQgYmxvY2s6ICR7cmVzcG9uc2Uuc3RhdHVzfWApO1xuICAgIH1lbHNle1xuICAgICAgICBsZXQgcmVzcG9uc2VfZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICAgICAgaWYocmVzcG9uc2VfZGF0YS5oYXNPd25Qcm9wZXJ0eShcImVycm9yXCIpKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKHJlc3BvbnNlX2RhdGFbXCJlcnJvclwiXSk7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZCB0byBzYXZlIGNvbnRlbnQgYmxvY2tzOiAke3Jlc3BvbnNlX2RhdGFbXCJlcnJvclwiXX1gKTtcbiAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICByZXR1cm4gcmVzcG9uc2VfZGF0YTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNlbmRfZ2V0X2NvbnRlbnRfYmxvY2tzKHByb2plY3RfaWQ6IHN0cmluZywgc2VjdGlvbl9wYXRoOiBzdHJpbmcpe1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYC9hcGkvcHJvamVjdHMvYCtwcm9qZWN0X2lkK2Avc2VjdGlvbnMvYCtzZWN0aW9uX3BhdGgrXCIvY29udGVudF9ibG9ja3MvXCIsIHtcbiAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgaWYoIXJlc3BvbnNlLm9rKXtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBGYWlsZWQgdG8gZ2V0IGNvbnRlbnQgYmxvY2tzOiAke3Jlc3BvbnNlLnN0YXR1c31gKTtcbiAgICB9ZWxzZXtcbiAgICAgICAgbGV0IHJlc3BvbnNlX2RhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgICAgIGlmKHJlc3BvbnNlX2RhdGEuaGFzT3duUHJvcGVydHkoXCJlcnJvclwiKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBGYWlsZWQgdG8gZ2V0IGNvbnRlbnQgYmxvY2tzOiAke3Jlc3BvbnNlX2RhdGFbXCJlcnJvclwiXX1gKTtcbiAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICByZXR1cm4gcmVzcG9uc2VfZGF0YTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc2VuZF9yZW5kZXJfcHJvamVjdChwcm9qZWN0X2lkOiBzdHJpbmcpe1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYC9hcGkvcHJvamVjdHMvYCtwcm9qZWN0X2lkK2AvcmVuZGVyYCwge1xuICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgaWYoIXJlc3BvbnNlLm9rKXtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBGYWlsZWQgdG8gcmVuZGVyIHByb2plY3Q6ICR7cmVzcG9uc2Uuc3RhdHVzfWApO1xuICAgIH1lbHNle1xuICAgICAgICBsZXQgcmVzcG9uc2VfZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICAgICAgaWYocmVzcG9uc2VfZGF0YS5oYXNPd25Qcm9wZXJ0eShcImVycm9yXCIpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZCB0byByZW5kZXIgcHJvamVjdDogJHtyZXNwb25zZV9kYXRhW1wiZXJyb3JcIl19YCk7XG4gICAgICAgIH1lbHNle1xuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlX2RhdGE7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzZW5kX2dldF9yZW5kZXJpbmdfc3RhdHVzKHJlbmRlcl9pZDogc3RyaW5nKXtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGAvYXBpL3JlbmRlcmluZ3MvYCtyZW5kZXJfaWQrYC9zdGF0dXNgLCB7XG4gICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIGlmKCFyZXNwb25zZS5vayl7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgRmFpbGVkIHRvIHJlbmRlciBwcm9qZWN0OiAke3Jlc3BvbnNlLnN0YXR1c31gKTtcbiAgICB9ZWxzZXtcbiAgICAgICAgbGV0IHJlc3BvbnNlX2RhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgICAgIGlmKHJlc3BvbnNlX2RhdGEuaGFzT3duUHJvcGVydHkoXCJlcnJvclwiKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBGYWlsZWQgdG8gcmVuZGVyIHByb2plY3Q6ICR7cmVzcG9uc2VfZGF0YVtcImVycm9yXCJdfWApO1xuICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZV9kYXRhO1xuICAgICAgICB9XG4gICAgfVxufSIsImltcG9ydCBFZGl0b3JKUyBmcm9tIFwiQGVkaXRvcmpzL2VkaXRvcmpzXCI7XG5pbXBvcnQgSGVhZGVyIGZyb20gJ0BlZGl0b3Jqcy9oZWFkZXInO1xuLy8gQHRzLWlnbm9yZVxuaW1wb3J0IFJhd1Rvb2wgZnJvbSAnQGVkaXRvcmpzL3Jhdyc7XG5pbXBvcnQge05vdGVUb29sfSBmcm9tIFwiLi9Ob3RlVG9vbFwiO1xuY29uc3QgUXVvdGU6YW55ID0gcmVxdWlyZSgnQGVkaXRvcmpzL3F1b3RlJyk7XG5jb25zdCBVbmRvOiBhbnkgPSByZXF1aXJlKCdlZGl0b3Jqcy11bmRvJyk7XG5cbi8vIEB0cy1pZ25vcmVcbmltcG9ydCBMaXN0IGZyb20gXCJAZWRpdG9yanMvbGlzdFwiO1xuaW1wb3J0ICogYXMgQVBJIGZyb20gXCIuL2FwaV9yZXF1ZXN0c1wiO1xuaW1wb3J0ICogYXMgVG9vbHMgZnJvbSBcIi4vdG9vbHNcIjtcbmltcG9ydCAqIGFzIFJlbmRlclBERiBmcm9tIFwiLi9SZW5kZXJQREZcIjtcbmltcG9ydCB7Q3VzdG9tU3R5bGVUb29sfSBmcm9tIFwiLi9DdXN0b21TdHlsZVRvb2xcIjtcblxubGV0IHR5cGluZ190aW1lcjogbnVtYmVyIHwgbnVsbCA9IG51bGw7XG5sZXQgZWRpdG9yOiBFZGl0b3JKUyB8IG51bGwgPSBudWxsO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc2hvd19lZGl0b3IoKXtcbiAgICBsZXQgZmlyc3RfY2hhbmdlID0gdHJ1ZTtcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImVkaXRvcl9yZW5kZXJfcHJvamVjdF9idG5cIikuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIFJlbmRlclBERi5yZW5kZXJfcHJvamVjdF9saXN0ZW5lcik7XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICBsZXQgZGF0YSA9IChhd2FpdCBBUEkuc2VuZF9nZXRfY29udGVudF9ibG9ja3MoZ2xvYmFsVGhpcy5wcm9qZWN0X2lkLCBnbG9iYWxUaGlzLnNlY3Rpb25fcGF0aCkpLmRhdGE7XG4gICAgICAgIGNvbnNvbGUubG9nKGRhdGEpO1xuXG4gICAgICAgIGVkaXRvciA9IG5ldyBFZGl0b3JKUyh7XG4gICAgICAgICAgICBob2xkZXI6IFwic2VjdGlvbl9jb250ZW50X2Jsb2Nrc19pbm5lclwiLFxuICAgICAgICAgICAgdG9vbHM6IHtcbiAgICAgICAgICAgICAgICBoZWFkZXI6IEhlYWRlcixcbiAgICAgICAgICAgICAgICByYXc6IFJhd1Rvb2wsXG4gICAgICAgICAgICAgICAgbGlzdDoge1xuICAgICAgICAgICAgICAgICAgICBjbGFzczogTGlzdCxcbiAgICAgICAgICAgICAgICAgICAgaW5saW5lVG9vbGJhcjogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgY29uZmlnOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0U3R5bGU6ICd1bm9yZGVyZWQnXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG5vdGU6IE5vdGVUb29sLFxuICAgICAgICAgICAgICAgIHF1b3RlOiBRdW90ZSxcbiAgICAgICAgICAgICAgICBjdXN0b21fc3R5bGVfdG9vbDogQ3VzdG9tU3R5bGVUb29sLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRhdGE6IHtibG9ja3M6IGRhdGF9LFxuICAgICAgICAgICAgb25DaGFuZ2U6IChhcGksIGV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYoIWZpcnN0X2NoYW5nZSl7IC8vIERvbid0IHNhdmUgdGhlIGZpcnN0IGNoYW5nZSwgYXMgaXQncyBqdXN0IHRoZSBpbml0aWFsIGxvYWRcbiAgICAgICAgICAgICAgICAgICAgc2F2ZV9jaGFuZ2VzKCk7XG4gICAgICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgICAgIGZpcnN0X2NoYW5nZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvblJlYWR5OiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgdW5kbyA9IG5ldyBVbmRvKHsgZWRpdG9yIH0pO1xuICAgICAgICAgICAgICAgIHVuZG8uaW5pdGlhbGl6ZSh7YmxvY2tzOiBkYXRhfSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcblxuICAgICAgICBhd2FpdCBlZGl0b3IuaXNSZWFkeTtcblxuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInNlY3Rpb25fY29udGVudF9ibG9ja3NfaW5uZXJcIikuYWRkRXZlbnRMaXN0ZW5lcihcImlucHV0XCIsIHR5cGluZ19oYW5kbGVyKTtcblxuICAgICAgICAvLyBNYWtlIGFsbCBleGlzdGluZyBub3RlcyBjbGlja2FibGVcbiAgICAgICAgTm90ZVRvb2wuYWRkX2FsbF9zaG93X25vdGVfc2V0dGluZ3NfbGlzdGVuZXJzKCk7XG4gICAgfWNhdGNoKGUpe1xuICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xuICAgICAgICBUb29scy5zaG93X2FsZXJ0KFwiQ291bGRuJ3QgbG9hZCBjb250ZW50LlwiLCBcImRhbmdlclwiKTtcbiAgICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzYXZlX2NoYW5nZXMoKXtcbiAgICBsZXQgZGF0YSA9IGF3YWl0IGVkaXRvci5zYXZlKCk7XG4gICAgY29uc29sZS5sb2coZGF0YSk7XG5cbiAgICB0cnkge1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIGF3YWl0IEFQSS5zZW5kX3VwZGF0ZV9jb250ZW50X2Jsb2NrcyhnbG9iYWxUaGlzLnByb2plY3RfaWQsIGdsb2JhbFRoaXMuc2VjdGlvbl9wYXRoLCBkYXRhLmJsb2Nrcyk7XG4gICAgICAgIFRvb2xzLnNob3dfYWxlcnQoXCJTYXZlZCBDaGFuZ2VzLlwiLCBcInN1Y2Nlc3NcIik7XG4gICAgfWNhdGNoKGUpe1xuICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xuICAgICAgICBUb29scy5zaG93X2FsZXJ0KFwiQ291bGRuJ3Qgc2F2ZSBjb250ZW50LlwiLCBcImRhbmdlclwiKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHR5cGluZ19oYW5kbGVyKCl7XG4gICAgaWYgKHR5cGluZ190aW1lcikge1xuICAgICAgICBjbGVhclRpbWVvdXQodHlwaW5nX3RpbWVyKTtcbiAgICB9XG5cbiAgICAvLyBTZXQgYSB0aW1lb3V0IHRvIHdhaXQgZm9yIHRoZSB1c2VyIHRvIHN0b3AgdHlwaW5nXG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIHR5cGluZ190aW1lciA9IHNldFRpbWVvdXQoYXN5bmMgZnVuY3Rpb24oKXtcbiAgICAgICAgYXdhaXQgc2F2ZV9jaGFuZ2VzKCk7XG4gICAgfSwgNTAwKTtcbn1cblxud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsIGFzeW5jIGZ1bmN0aW9uKCl7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIHdpbmRvdy5zaG93X25ld19lZGl0b3IgPSAoKSA9PiB7c2hvd19lZGl0b3IoKX07XG59KTtcbiIsImV4cG9ydCBmdW5jdGlvbiBoaWRlX2FsbChjbGFzc19uYW1lOiBzdHJpbmcpe1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBmb3IobGV0IGVsZW1lbnQgb2YgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShjbGFzc19uYW1lKSl7XG4gICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZChcImhpZGVcIik7XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIHN0YXJ0X2xvYWRpbmdfc3Bpbm5lcigpe1xuICAgIGxldCBsb2FkaW5nX3NwaW5uZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImxvYWRpbmdfc3Bpbm5lclwiKTtcbiAgICBpZihsb2FkaW5nX3NwaW5uZXIgIT09IG51bGwpe1xuICAgICAgICBsb2FkaW5nX3NwaW5uZXIuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzdG9wX2xvYWRpbmdfc3Bpbm5lcigpe1xuICAgIGxldCBsb2FkaW5nX3NwaW5uZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImxvYWRpbmdfc3Bpbm5lclwiKTtcbiAgICBpZihsb2FkaW5nX3NwaW5uZXIgIT09IG51bGwpe1xuICAgICAgICBsb2FkaW5nX3NwaW5uZXIuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNob3dfYWxlcnQobWVzc2FnZTogc3RyaW5nLCB0eXBlOiBzdHJpbmcgPSBcImRhbmdlcnx3YXJuaW5nfHN1Y2Nlc3N8aW5mb3xwcmltYXJ5fHNlY29uZGFyeXxsaWdodHxkYXJrXCIpe1xuICAgIGxldCBpZCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwMDAwMDAwMCk7XG5cbiAgICAvLyBAdHMtaWdub3JlXG4gICAgbGV0IGFsZXJ0X2h0bWwgPSBIYW5kbGViYXJzLnRlbXBsYXRlcy5hbGVydF90bXBsKHtcIm1lc3NhZ2VcIjogbWVzc2FnZSwgXCJ0eXBlXCI6IHR5cGUsIFwiaWRcIjogaWR9KTtcblxuICAgIC8vSW5zZXJ0IGFsZXJ0IGFzIGZpcnN0IGVsZW1lbnQgb2YgYm9keVxuICAgIGRvY3VtZW50LmJvZHkuaW5zZXJ0QWRqYWNlbnRIVE1MKFwiYWZ0ZXJiZWdpblwiLCBhbGVydF9odG1sKTtcblxuICAgIGxldCBhbGVydCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYWxlcnRfXCIgKyBpZCk7XG4gICAgYWxlcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcImFsZXJ0LWNsb3NlXCIpWzBdLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbigpe1xuICAgICAgICBhbGVydC5yZW1vdmUoKTtcbiAgICB9KTtcblxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBpZiAoYWxlcnQgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGFsZXJ0LnJlbW92ZSgpO1xuICAgICAgICB9XG4gICAgfSwgNTAwMCk7XG59IiwidmFyIFJ0ID0gdHlwZW9mIGdsb2JhbFRoaXMgPCBcInVcIiA/IGdsb2JhbFRoaXMgOiB0eXBlb2Ygd2luZG93IDwgXCJ1XCIgPyB3aW5kb3cgOiB0eXBlb2YgZ2xvYmFsIDwgXCJ1XCIgPyBnbG9iYWwgOiB0eXBlb2Ygc2VsZiA8IFwidVwiID8gc2VsZiA6IHt9O1xuZnVuY3Rpb24gUGUocykge1xuICByZXR1cm4gcyAmJiBzLl9fZXNNb2R1bGUgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIFwiZGVmYXVsdFwiKSA/IHMuZGVmYXVsdCA6IHM7XG59XG5mdW5jdGlvbiBUZSgpIHtcbn1cbk9iamVjdC5hc3NpZ24oVGUsIHtcbiAgZGVmYXVsdDogVGUsXG4gIHJlZ2lzdGVyOiBUZSxcbiAgcmV2ZXJ0OiBmdW5jdGlvbigpIHtcbiAgfSxcbiAgX19lc01vZHVsZTogITBcbn0pO1xuRWxlbWVudC5wcm90b3R5cGUubWF0Y2hlcyB8fCAoRWxlbWVudC5wcm90b3R5cGUubWF0Y2hlcyA9IEVsZW1lbnQucHJvdG90eXBlLm1hdGNoZXNTZWxlY3RvciB8fCBFbGVtZW50LnByb3RvdHlwZS5tb3pNYXRjaGVzU2VsZWN0b3IgfHwgRWxlbWVudC5wcm90b3R5cGUubXNNYXRjaGVzU2VsZWN0b3IgfHwgRWxlbWVudC5wcm90b3R5cGUub01hdGNoZXNTZWxlY3RvciB8fCBFbGVtZW50LnByb3RvdHlwZS53ZWJraXRNYXRjaGVzU2VsZWN0b3IgfHwgZnVuY3Rpb24ocykge1xuICBjb25zdCBlID0gKHRoaXMuZG9jdW1lbnQgfHwgdGhpcy5vd25lckRvY3VtZW50KS5xdWVyeVNlbGVjdG9yQWxsKHMpO1xuICBsZXQgdCA9IGUubGVuZ3RoO1xuICBmb3IgKDsgLS10ID49IDAgJiYgZS5pdGVtKHQpICE9PSB0aGlzOyApXG4gICAgO1xuICByZXR1cm4gdCA+IC0xO1xufSk7XG5FbGVtZW50LnByb3RvdHlwZS5jbG9zZXN0IHx8IChFbGVtZW50LnByb3RvdHlwZS5jbG9zZXN0ID0gZnVuY3Rpb24ocykge1xuICBsZXQgZSA9IHRoaXM7XG4gIGlmICghZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNvbnRhaW5zKGUpKVxuICAgIHJldHVybiBudWxsO1xuICBkbyB7XG4gICAgaWYgKGUubWF0Y2hlcyhzKSlcbiAgICAgIHJldHVybiBlO1xuICAgIGUgPSBlLnBhcmVudEVsZW1lbnQgfHwgZS5wYXJlbnROb2RlO1xuICB9IHdoaWxlIChlICE9PSBudWxsKTtcbiAgcmV0dXJuIG51bGw7XG59KTtcbkVsZW1lbnQucHJvdG90eXBlLnByZXBlbmQgfHwgKEVsZW1lbnQucHJvdG90eXBlLnByZXBlbmQgPSBmdW5jdGlvbihlKSB7XG4gIGNvbnN0IHQgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7XG4gIEFycmF5LmlzQXJyYXkoZSkgfHwgKGUgPSBbZV0pLCBlLmZvckVhY2goKG8pID0+IHtcbiAgICBjb25zdCBpID0gbyBpbnN0YW5jZW9mIE5vZGU7XG4gICAgdC5hcHBlbmRDaGlsZChpID8gbyA6IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKG8pKTtcbiAgfSksIHRoaXMuaW5zZXJ0QmVmb3JlKHQsIHRoaXMuZmlyc3RDaGlsZCk7XG59KTtcbkVsZW1lbnQucHJvdG90eXBlLnNjcm9sbEludG9WaWV3SWZOZWVkZWQgfHwgKEVsZW1lbnQucHJvdG90eXBlLnNjcm9sbEludG9WaWV3SWZOZWVkZWQgPSBmdW5jdGlvbihzKSB7XG4gIHMgPSBhcmd1bWVudHMubGVuZ3RoID09PSAwID8gITAgOiAhIXM7XG4gIGNvbnN0IGUgPSB0aGlzLnBhcmVudE5vZGUsIHQgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlLCBudWxsKSwgbyA9IHBhcnNlSW50KHQuZ2V0UHJvcGVydHlWYWx1ZShcImJvcmRlci10b3Atd2lkdGhcIikpLCBpID0gcGFyc2VJbnQodC5nZXRQcm9wZXJ0eVZhbHVlKFwiYm9yZGVyLWxlZnQtd2lkdGhcIikpLCBuID0gdGhpcy5vZmZzZXRUb3AgLSBlLm9mZnNldFRvcCA8IGUuc2Nyb2xsVG9wLCByID0gdGhpcy5vZmZzZXRUb3AgLSBlLm9mZnNldFRvcCArIHRoaXMuY2xpZW50SGVpZ2h0IC0gbyA+IGUuc2Nyb2xsVG9wICsgZS5jbGllbnRIZWlnaHQsIGEgPSB0aGlzLm9mZnNldExlZnQgLSBlLm9mZnNldExlZnQgPCBlLnNjcm9sbExlZnQsIGwgPSB0aGlzLm9mZnNldExlZnQgLSBlLm9mZnNldExlZnQgKyB0aGlzLmNsaWVudFdpZHRoIC0gaSA+IGUuc2Nyb2xsTGVmdCArIGUuY2xpZW50V2lkdGgsIGQgPSBuICYmICFyO1xuICAobiB8fCByKSAmJiBzICYmIChlLnNjcm9sbFRvcCA9IHRoaXMub2Zmc2V0VG9wIC0gZS5vZmZzZXRUb3AgLSBlLmNsaWVudEhlaWdodCAvIDIgLSBvICsgdGhpcy5jbGllbnRIZWlnaHQgLyAyKSwgKGEgfHwgbCkgJiYgcyAmJiAoZS5zY3JvbGxMZWZ0ID0gdGhpcy5vZmZzZXRMZWZ0IC0gZS5vZmZzZXRMZWZ0IC0gZS5jbGllbnRXaWR0aCAvIDIgLSBpICsgdGhpcy5jbGllbnRXaWR0aCAvIDIpLCAobiB8fCByIHx8IGEgfHwgbCkgJiYgIXMgJiYgdGhpcy5zY3JvbGxJbnRvVmlldyhkKTtcbn0pO1xud2luZG93LnJlcXVlc3RJZGxlQ2FsbGJhY2sgPSB3aW5kb3cucmVxdWVzdElkbGVDYWxsYmFjayB8fCBmdW5jdGlvbihzKSB7XG4gIGNvbnN0IGUgPSBEYXRlLm5vdygpO1xuICByZXR1cm4gc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICBzKHtcbiAgICAgIGRpZFRpbWVvdXQ6ICExLFxuICAgICAgdGltZVJlbWFpbmluZzogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBNYXRoLm1heCgwLCA1MCAtIChEYXRlLm5vdygpIC0gZSkpO1xuICAgICAgfVxuICAgIH0pO1xuICB9LCAxKTtcbn07XG53aW5kb3cuY2FuY2VsSWRsZUNhbGxiYWNrID0gd2luZG93LmNhbmNlbElkbGVDYWxsYmFjayB8fCBmdW5jdGlvbihzKSB7XG4gIGNsZWFyVGltZW91dChzKTtcbn07XG5sZXQgRHQgPSAocyA9IDIxKSA9PiBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKG5ldyBVaW50OEFycmF5KHMpKS5yZWR1Y2UoKGUsIHQpID0+ICh0ICY9IDYzLCB0IDwgMzYgPyBlICs9IHQudG9TdHJpbmcoMzYpIDogdCA8IDYyID8gZSArPSAodCAtIDI2KS50b1N0cmluZygzNikudG9VcHBlckNhc2UoKSA6IHQgPiA2MiA/IGUgKz0gXCItXCIgOiBlICs9IFwiX1wiLCBlKSwgXCJcIik7XG52YXIgYXQgPSAvKiBAX19QVVJFX18gKi8gKChzKSA9PiAocy5WRVJCT1NFID0gXCJWRVJCT1NFXCIsIHMuSU5GTyA9IFwiSU5GT1wiLCBzLldBUk4gPSBcIldBUk5cIiwgcy5FUlJPUiA9IFwiRVJST1JcIiwgcykpKGF0IHx8IHt9KTtcbmNvbnN0IGsgPSB7XG4gIEJBQ0tTUEFDRTogOCxcbiAgVEFCOiA5LFxuICBFTlRFUjogMTMsXG4gIFNISUZUOiAxNixcbiAgQ1RSTDogMTcsXG4gIEFMVDogMTgsXG4gIEVTQzogMjcsXG4gIFNQQUNFOiAzMixcbiAgTEVGVDogMzcsXG4gIFVQOiAzOCxcbiAgRE9XTjogNDAsXG4gIFJJR0hUOiAzOSxcbiAgREVMRVRFOiA0NixcbiAgTUVUQTogOTEsXG4gIFNMQVNIOiAxOTFcbn0sIFB0ID0ge1xuICBMRUZUOiAwLFxuICBXSEVFTDogMSxcbiAgUklHSFQ6IDIsXG4gIEJBQ0tXQVJEOiAzLFxuICBGT1JXQVJEOiA0XG59O1xuZnVuY3Rpb24gbWUocywgZSwgdCA9IFwibG9nXCIsIG8sIGkgPSBcImNvbG9yOiBpbmhlcml0XCIpIHtcbiAgaWYgKCEoXCJjb25zb2xlXCIgaW4gd2luZG93KSB8fCAhd2luZG93LmNvbnNvbGVbdF0pXG4gICAgcmV0dXJuO1xuICBjb25zdCBuID0gW1wiaW5mb1wiLCBcImxvZ1wiLCBcIndhcm5cIiwgXCJlcnJvclwiXS5pbmNsdWRlcyh0KSwgciA9IFtdO1xuICBzd2l0Y2ggKG1lLmxvZ0xldmVsKSB7XG4gICAgY2FzZSBcIkVSUk9SXCI6XG4gICAgICBpZiAodCAhPT0gXCJlcnJvclwiKVxuICAgICAgICByZXR1cm47XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiV0FSTlwiOlxuICAgICAgaWYgKCFbXCJlcnJvclwiLCBcIndhcm5cIl0uaW5jbHVkZXModCkpXG4gICAgICAgIHJldHVybjtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJJTkZPXCI6XG4gICAgICBpZiAoIW4gfHwgcylcbiAgICAgICAgcmV0dXJuO1xuICAgICAgYnJlYWs7XG4gIH1cbiAgbyAmJiByLnB1c2gobyk7XG4gIGNvbnN0IGEgPSBcIkVkaXRvci5qcyAyLjI5LjBcIiwgbCA9IGBsaW5lLWhlaWdodDogMWVtO1xuICAgICAgICAgICAgY29sb3I6ICMwMDZGRUE7XG4gICAgICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgICAgICAgICBmb250LXNpemU6IDExcHg7XG4gICAgICAgICAgICBsaW5lLWhlaWdodDogMWVtO1xuICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcbiAgICAgICAgICAgIHBhZGRpbmc6IDRweCA5cHg7XG4gICAgICAgICAgICBib3JkZXItcmFkaXVzOiAzMHB4O1xuICAgICAgICAgICAgYm9yZGVyOiAxcHggc29saWQgcmdiYSg1NiwgMTM4LCAyMjksIDAuMTYpO1xuICAgICAgICAgICAgbWFyZ2luOiA0cHggNXB4IDRweCAwO2A7XG4gIHMgJiYgKG4gPyAoci51bnNoaWZ0KGwsIGkpLCBlID0gYCVjJHthfSVjICR7ZX1gKSA6IGUgPSBgKCAke2F9ICkke2V9YCk7XG4gIHRyeSB7XG4gICAgbiA/IG8gPyBjb25zb2xlW3RdKGAke2V9ICVvYCwgLi4ucikgOiBjb25zb2xlW3RdKGUsIC4uLnIpIDogY29uc29sZVt0XShlKTtcbiAgfSBjYXRjaCB7XG4gIH1cbn1cbm1lLmxvZ0xldmVsID0gXCJWRVJCT1NFXCI7XG5mdW5jdGlvbiBGdChzKSB7XG4gIG1lLmxvZ0xldmVsID0gcztcbn1cbmNvbnN0IFQgPSBtZS5iaW5kKHdpbmRvdywgITEpLCBZID0gbWUuYmluZCh3aW5kb3csICEwKTtcbmZ1bmN0aW9uIG9lKHMpIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChzKS5tYXRjaCgvXFxzKFthLXpBLVpdKykvKVsxXS50b0xvd2VyQ2FzZSgpO1xufVxuZnVuY3Rpb24gTShzKSB7XG4gIHJldHVybiBvZShzKSA9PT0gXCJmdW5jdGlvblwiIHx8IG9lKHMpID09PSBcImFzeW5jZnVuY3Rpb25cIjtcbn1cbmZ1bmN0aW9uIEQocykge1xuICByZXR1cm4gb2UocykgPT09IFwib2JqZWN0XCI7XG59XG5mdW5jdGlvbiBHKHMpIHtcbiAgcmV0dXJuIG9lKHMpID09PSBcInN0cmluZ1wiO1xufVxuZnVuY3Rpb24gSHQocykge1xuICByZXR1cm4gb2UocykgPT09IFwiYm9vbGVhblwiO1xufVxuZnVuY3Rpb24gSmUocykge1xuICByZXR1cm4gb2UocykgPT09IFwibnVtYmVyXCI7XG59XG5mdW5jdGlvbiBRZShzKSB7XG4gIHJldHVybiBvZShzKSA9PT0gXCJ1bmRlZmluZWRcIjtcbn1cbmZ1bmN0aW9uIFcocykge1xuICByZXR1cm4gcyA/IE9iamVjdC5rZXlzKHMpLmxlbmd0aCA9PT0gMCAmJiBzLmNvbnN0cnVjdG9yID09PSBPYmplY3QgOiAhMDtcbn1cbmZ1bmN0aW9uIGx0KHMpIHtcbiAgcmV0dXJuIHMgPiA0NyAmJiBzIDwgNTggfHwgLy8gbnVtYmVyIGtleXNcbiAgcyA9PT0gMzIgfHwgcyA9PT0gMTMgfHwgLy8gU3BhY2UgYmFyICYgcmV0dXJuIGtleShzKVxuICBzID09PSAyMjkgfHwgLy8gcHJvY2Vzc2luZyBrZXkgaW5wdXQgZm9yIGNlcnRhaW4gbGFuZ3VhZ2VzIOKAlCBDaGluZXNlLCBKYXBhbmVzZSwgZXRjLlxuICBzID4gNjQgJiYgcyA8IDkxIHx8IC8vIGxldHRlciBrZXlzXG4gIHMgPiA5NSAmJiBzIDwgMTEyIHx8IC8vIE51bXBhZCBrZXlzXG4gIHMgPiAxODUgJiYgcyA8IDE5MyB8fCAvLyA7PSwtLi9gIChpbiBvcmRlcilcbiAgcyA+IDIxOCAmJiBzIDwgMjIzO1xufVxuYXN5bmMgZnVuY3Rpb24genQocywgZSA9ICgpID0+IHtcbn0sIHQgPSAoKSA9PiB7XG59KSB7XG4gIGFzeW5jIGZ1bmN0aW9uIG8oaSwgbiwgcikge1xuICAgIHRyeSB7XG4gICAgICBhd2FpdCBpLmZ1bmN0aW9uKGkuZGF0YSksIGF3YWl0IG4oUWUoaS5kYXRhKSA/IHt9IDogaS5kYXRhKTtcbiAgICB9IGNhdGNoIHtcbiAgICAgIHIoUWUoaS5kYXRhKSA/IHt9IDogaS5kYXRhKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHMucmVkdWNlKGFzeW5jIChpLCBuKSA9PiAoYXdhaXQgaSwgbyhuLCBlLCB0KSksIFByb21pc2UucmVzb2x2ZSgpKTtcbn1cbmZ1bmN0aW9uIGN0KHMpIHtcbiAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHMpO1xufVxuZnVuY3Rpb24geGUocywgZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgY29uc3QgdCA9IHRoaXMsIG8gPSBhcmd1bWVudHM7XG4gICAgd2luZG93LnNldFRpbWVvdXQoKCkgPT4gcy5hcHBseSh0LCBvKSwgZSk7XG4gIH07XG59XG5mdW5jdGlvbiBVdChzKSB7XG4gIHJldHVybiBzLm5hbWUuc3BsaXQoXCIuXCIpLnBvcCgpO1xufVxuZnVuY3Rpb24ganQocykge1xuICByZXR1cm4gL15bLVxcd10rXFwvKFstK1xcd10rfFxcKikkLy50ZXN0KHMpO1xufVxuZnVuY3Rpb24gZXQocywgZSwgdCkge1xuICBsZXQgbztcbiAgcmV0dXJuICguLi5pKSA9PiB7XG4gICAgY29uc3QgbiA9IHRoaXMsIHIgPSAoKSA9PiB7XG4gICAgICBvID0gbnVsbCwgdCB8fCBzLmFwcGx5KG4sIGkpO1xuICAgIH0sIGEgPSB0ICYmICFvO1xuICAgIHdpbmRvdy5jbGVhclRpbWVvdXQobyksIG8gPSB3aW5kb3cuc2V0VGltZW91dChyLCBlKSwgYSAmJiBzLmFwcGx5KG4sIGkpO1xuICB9O1xufVxuZnVuY3Rpb24gSWUocywgZSwgdCA9IHZvaWQgMCkge1xuICBsZXQgbywgaSwgbiwgciA9IG51bGwsIGEgPSAwO1xuICB0IHx8ICh0ID0ge30pO1xuICBjb25zdCBsID0gZnVuY3Rpb24oKSB7XG4gICAgYSA9IHQubGVhZGluZyA9PT0gITEgPyAwIDogRGF0ZS5ub3coKSwgciA9IG51bGwsIG4gPSBzLmFwcGx5KG8sIGkpLCByIHx8IChvID0gaSA9IG51bGwpO1xuICB9O1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgY29uc3QgZCA9IERhdGUubm93KCk7XG4gICAgIWEgJiYgdC5sZWFkaW5nID09PSAhMSAmJiAoYSA9IGQpO1xuICAgIGNvbnN0IHUgPSBlIC0gKGQgLSBhKTtcbiAgICByZXR1cm4gbyA9IHRoaXMsIGkgPSBhcmd1bWVudHMsIHUgPD0gMCB8fCB1ID4gZSA/IChyICYmIChjbGVhclRpbWVvdXQociksIHIgPSBudWxsKSwgYSA9IGQsIG4gPSBzLmFwcGx5KG8sIGkpLCByIHx8IChvID0gaSA9IG51bGwpKSA6ICFyICYmIHQudHJhaWxpbmcgIT09ICExICYmIChyID0gc2V0VGltZW91dChsLCB1KSksIG47XG4gIH07XG59XG5mdW5jdGlvbiAkdCgpIHtcbiAgY29uc3QgcyA9IHtcbiAgICB3aW46ICExLFxuICAgIG1hYzogITEsXG4gICAgeDExOiAhMSxcbiAgICBsaW51eDogITFcbiAgfSwgZSA9IE9iamVjdC5rZXlzKHMpLmZpbmQoKHQpID0+IHdpbmRvdy5uYXZpZ2F0b3IuYXBwVmVyc2lvbi50b0xvd2VyQ2FzZSgpLmluZGV4T2YodCkgIT09IC0xKTtcbiAgcmV0dXJuIGUgJiYgKHNbZV0gPSAhMCksIHM7XG59XG5mdW5jdGlvbiByZShzKSB7XG4gIHJldHVybiBzWzBdLnRvVXBwZXJDYXNlKCkgKyBzLnNsaWNlKDEpO1xufVxuZnVuY3Rpb24gTWUocywgLi4uZSkge1xuICBpZiAoIWUubGVuZ3RoKVxuICAgIHJldHVybiBzO1xuICBjb25zdCB0ID0gZS5zaGlmdCgpO1xuICBpZiAoRChzKSAmJiBEKHQpKVxuICAgIGZvciAoY29uc3QgbyBpbiB0KVxuICAgICAgRCh0W29dKSA/IChzW29dIHx8IE9iamVjdC5hc3NpZ24ocywgeyBbb106IHt9IH0pLCBNZShzW29dLCB0W29dKSkgOiBPYmplY3QuYXNzaWduKHMsIHsgW29dOiB0W29dIH0pO1xuICByZXR1cm4gTWUocywgLi4uZSk7XG59XG5mdW5jdGlvbiB5ZShzKSB7XG4gIGNvbnN0IGUgPSAkdCgpO1xuICByZXR1cm4gcyA9IHMucmVwbGFjZSgvc2hpZnQvZ2ksIFwi4oenXCIpLnJlcGxhY2UoL2JhY2tzcGFjZS9naSwgXCLijKtcIikucmVwbGFjZSgvZW50ZXIvZ2ksIFwi4o+OXCIpLnJlcGxhY2UoL3VwL2dpLCBcIuKGkVwiKS5yZXBsYWNlKC9sZWZ0L2dpLCBcIuKGklwiKS5yZXBsYWNlKC9kb3duL2dpLCBcIuKGk1wiKS5yZXBsYWNlKC9yaWdodC9naSwgXCLihpBcIikucmVwbGFjZSgvZXNjYXBlL2dpLCBcIuKOi1wiKS5yZXBsYWNlKC9pbnNlcnQvZ2ksIFwiSW5zXCIpLnJlcGxhY2UoL2RlbGV0ZS9naSwgXCLikKFcIikucmVwbGFjZSgvXFwrL2dpLCBcIiArIFwiKSwgZS5tYWMgPyBzID0gcy5yZXBsYWNlKC9jdHJsfGNtZC9naSwgXCLijJhcIikucmVwbGFjZSgvYWx0L2dpLCBcIuKMpVwiKSA6IHMgPSBzLnJlcGxhY2UoL2NtZC9naSwgXCJDdHJsXCIpLnJlcGxhY2UoL3dpbmRvd3MvZ2ksIFwiV0lOXCIpLCBzO1xufVxuZnVuY3Rpb24gV3Qocykge1xuICB0cnkge1xuICAgIHJldHVybiBuZXcgVVJMKHMpLmhyZWY7XG4gIH0gY2F0Y2gge1xuICB9XG4gIHJldHVybiBzLnN1YnN0cmluZygwLCAyKSA9PT0gXCIvL1wiID8gd2luZG93LmxvY2F0aW9uLnByb3RvY29sICsgcyA6IHdpbmRvdy5sb2NhdGlvbi5vcmlnaW4gKyBzO1xufVxuZnVuY3Rpb24gWXQoKSB7XG4gIHJldHVybiBEdCgxMCk7XG59XG5mdW5jdGlvbiBLdChzKSB7XG4gIHdpbmRvdy5vcGVuKHMsIFwiX2JsYW5rXCIpO1xufVxuZnVuY3Rpb24gWHQocyA9IFwiXCIpIHtcbiAgcmV0dXJuIGAke3N9JHtNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxZTgpLnRvU3RyaW5nKDE2KX1gO1xufVxuZnVuY3Rpb24gTGUocywgZSwgdCkge1xuICBjb25zdCBvID0gYMKrJHtlfcK7IGlzIGRlcHJlY2F0ZWQgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiB0aGUgbmV4dCBtYWpvciByZWxlYXNlLiBQbGVhc2UgdXNlIHRoZSDCqyR7dH3CuyBpbnN0ZWFkLmA7XG4gIHMgJiYgWShvLCBcIndhcm5cIik7XG59XG5mdW5jdGlvbiBsZShzLCBlLCB0KSB7XG4gIGNvbnN0IG8gPSB0LnZhbHVlID8gXCJ2YWx1ZVwiIDogXCJnZXRcIiwgaSA9IHRbb10sIG4gPSBgIyR7ZX1DYWNoZWA7XG4gIGlmICh0W29dID0gZnVuY3Rpb24oLi4ucikge1xuICAgIHJldHVybiB0aGlzW25dID09PSB2b2lkIDAgJiYgKHRoaXNbbl0gPSBpLmFwcGx5KHRoaXMsIC4uLnIpKSwgdGhpc1tuXTtcbiAgfSwgbyA9PT0gXCJnZXRcIiAmJiB0LnNldCkge1xuICAgIGNvbnN0IHIgPSB0LnNldDtcbiAgICB0LnNldCA9IGZ1bmN0aW9uKGEpIHtcbiAgICAgIGRlbGV0ZSBzW25dLCByLmFwcGx5KHRoaXMsIGEpO1xuICAgIH07XG4gIH1cbiAgcmV0dXJuIHQ7XG59XG5jb25zdCBkdCA9IDY1MDtcbmZ1bmN0aW9uIHRlKCkge1xuICByZXR1cm4gd2luZG93Lm1hdGNoTWVkaWEoYChtYXgtd2lkdGg6ICR7ZHR9cHgpYCkubWF0Y2hlcztcbn1cbmNvbnN0IHR0ID0gdHlwZW9mIHdpbmRvdyA8IFwidVwiICYmIHdpbmRvdy5uYXZpZ2F0b3IgJiYgd2luZG93Lm5hdmlnYXRvci5wbGF0Zm9ybSAmJiAoL2lQKGFkfGhvbmV8b2QpLy50ZXN0KHdpbmRvdy5uYXZpZ2F0b3IucGxhdGZvcm0pIHx8IHdpbmRvdy5uYXZpZ2F0b3IucGxhdGZvcm0gPT09IFwiTWFjSW50ZWxcIiAmJiB3aW5kb3cubmF2aWdhdG9yLm1heFRvdWNoUG9pbnRzID4gMSk7XG5mdW5jdGlvbiBWdChzLCBlKSB7XG4gIGNvbnN0IHQgPSBBcnJheS5pc0FycmF5KHMpIHx8IEQocyksIG8gPSBBcnJheS5pc0FycmF5KGUpIHx8IEQoZSk7XG4gIHJldHVybiB0IHx8IG8gPyBKU09OLnN0cmluZ2lmeShzKSA9PT0gSlNPTi5zdHJpbmdpZnkoZSkgOiBzID09PSBlO1xufVxuY2xhc3MgYyB7XG4gIC8qKlxuICAgKiBDaGVjayBpZiBwYXNzZWQgdGFnIGhhcyBubyBjbG9zZWQgdGFnXG4gICAqXG4gICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHRhZyAtIGVsZW1lbnQgdG8gY2hlY2tcbiAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAqL1xuICBzdGF0aWMgaXNTaW5nbGVUYWcoZSkge1xuICAgIHJldHVybiBlLnRhZ05hbWUgJiYgW1xuICAgICAgXCJBUkVBXCIsXG4gICAgICBcIkJBU0VcIixcbiAgICAgIFwiQlJcIixcbiAgICAgIFwiQ09MXCIsXG4gICAgICBcIkNPTU1BTkRcIixcbiAgICAgIFwiRU1CRURcIixcbiAgICAgIFwiSFJcIixcbiAgICAgIFwiSU1HXCIsXG4gICAgICBcIklOUFVUXCIsXG4gICAgICBcIktFWUdFTlwiLFxuICAgICAgXCJMSU5LXCIsXG4gICAgICBcIk1FVEFcIixcbiAgICAgIFwiUEFSQU1cIixcbiAgICAgIFwiU09VUkNFXCIsXG4gICAgICBcIlRSQUNLXCIsXG4gICAgICBcIldCUlwiXG4gICAgXS5pbmNsdWRlcyhlLnRhZ05hbWUpO1xuICB9XG4gIC8qKlxuICAgKiBDaGVjayBpZiBlbGVtZW50IGlzIEJSIG9yIFdCUlxuICAgKlxuICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtZW50IC0gZWxlbWVudCB0byBjaGVja1xuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICovXG4gIHN0YXRpYyBpc0xpbmVCcmVha1RhZyhlKSB7XG4gICAgcmV0dXJuIGUgJiYgZS50YWdOYW1lICYmIFtcbiAgICAgIFwiQlJcIixcbiAgICAgIFwiV0JSXCJcbiAgICBdLmluY2x1ZGVzKGUudGFnTmFtZSk7XG4gIH1cbiAgLyoqXG4gICAqIEhlbHBlciBmb3IgbWFraW5nIEVsZW1lbnRzIHdpdGggY2xhc3MgbmFtZSBhbmQgYXR0cmlidXRlc1xuICAgKlxuICAgKiBAcGFyYW0gIHtzdHJpbmd9IHRhZ05hbWUgLSBuZXcgRWxlbWVudCB0YWcgbmFtZVxuICAgKiBAcGFyYW0gIHtzdHJpbmdbXXxzdHJpbmd9IFtjbGFzc05hbWVzXSAtIGxpc3Qgb3IgbmFtZSBvZiBDU1MgY2xhc3MgbmFtZShzKVxuICAgKiBAcGFyYW0gIHtvYmplY3R9IFthdHRyaWJ1dGVzXSAtIGFueSBhdHRyaWJ1dGVzXG4gICAqIEByZXR1cm5zIHtIVE1MRWxlbWVudH1cbiAgICovXG4gIHN0YXRpYyBtYWtlKGUsIHQgPSBudWxsLCBvID0ge30pIHtcbiAgICBjb25zdCBpID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChlKTtcbiAgICBBcnJheS5pc0FycmF5KHQpID8gaS5jbGFzc0xpc3QuYWRkKC4uLnQpIDogdCAmJiBpLmNsYXNzTGlzdC5hZGQodCk7XG4gICAgZm9yIChjb25zdCBuIGluIG8pXG4gICAgICBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobywgbikgJiYgKGlbbl0gPSBvW25dKTtcbiAgICByZXR1cm4gaTtcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlcyBUZXh0IE5vZGUgd2l0aCB0aGUgcGFzc2VkIGNvbnRlbnRcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGNvbnRlbnQgLSB0ZXh0IGNvbnRlbnRcbiAgICogQHJldHVybnMge1RleHR9XG4gICAqL1xuICBzdGF0aWMgdGV4dChlKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGUpO1xuICB9XG4gIC8qKlxuICAgKiBBcHBlbmQgb25lIG9yIHNldmVyYWwgZWxlbWVudHMgdG8gdGhlIHBhcmVudFxuICAgKlxuICAgKiBAcGFyYW0gIHtFbGVtZW50fERvY3VtZW50RnJhZ21lbnR9IHBhcmVudCAtIHdoZXJlIHRvIGFwcGVuZFxuICAgKiBAcGFyYW0gIHtFbGVtZW50fEVsZW1lbnRbXXxEb2N1bWVudEZyYWdtZW50fFRleHR8VGV4dFtdfSBlbGVtZW50cyAtIGVsZW1lbnQgb3IgZWxlbWVudHMgbGlzdFxuICAgKi9cbiAgc3RhdGljIGFwcGVuZChlLCB0KSB7XG4gICAgQXJyYXkuaXNBcnJheSh0KSA/IHQuZm9yRWFjaCgobykgPT4gZS5hcHBlbmRDaGlsZChvKSkgOiBlLmFwcGVuZENoaWxkKHQpO1xuICB9XG4gIC8qKlxuICAgKiBBcHBlbmQgZWxlbWVudCBvciBhIGNvdXBsZSB0byB0aGUgYmVnaW5uaW5nIG9mIHRoZSBwYXJlbnQgZWxlbWVudHNcbiAgICpcbiAgICogQHBhcmFtIHtFbGVtZW50fSBwYXJlbnQgLSB3aGVyZSB0byBhcHBlbmRcbiAgICogQHBhcmFtIHtFbGVtZW50fEVsZW1lbnRbXX0gZWxlbWVudHMgLSBlbGVtZW50IG9yIGVsZW1lbnRzIGxpc3RcbiAgICovXG4gIHN0YXRpYyBwcmVwZW5kKGUsIHQpIHtcbiAgICBBcnJheS5pc0FycmF5KHQpID8gKHQgPSB0LnJldmVyc2UoKSwgdC5mb3JFYWNoKChvKSA9PiBlLnByZXBlbmQobykpKSA6IGUucHJlcGVuZCh0KTtcbiAgfVxuICAvKipcbiAgICogU3dhcCB0d28gZWxlbWVudHMgaW4gcGFyZW50XG4gICAqXG4gICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsMSAtIGZyb21cbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWwyIC0gdG9cbiAgICogQGRlcHJlY2F0ZWRcbiAgICovXG4gIHN0YXRpYyBzd2FwKGUsIHQpIHtcbiAgICBjb25zdCBvID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSwgaSA9IGUucGFyZW50Tm9kZTtcbiAgICBpLmluc2VydEJlZm9yZShvLCBlKSwgaS5pbnNlcnRCZWZvcmUoZSwgdCksIGkuaW5zZXJ0QmVmb3JlKHQsIG8pLCBpLnJlbW92ZUNoaWxkKG8pO1xuICB9XG4gIC8qKlxuICAgKiBTZWxlY3RvciBEZWNvcmF0b3JcbiAgICpcbiAgICogUmV0dXJucyBmaXJzdCBtYXRjaFxuICAgKlxuICAgKiBAcGFyYW0ge0VsZW1lbnR9IGVsIC0gZWxlbWVudCB3ZSBzZWFyY2hpbmcgaW5zaWRlLiBEZWZhdWx0IC0gRE9NIERvY3VtZW50XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzZWxlY3RvciAtIHNlYXJjaGluZyBzdHJpbmdcbiAgICogQHJldHVybnMge0VsZW1lbnR9XG4gICAqL1xuICBzdGF0aWMgZmluZChlID0gZG9jdW1lbnQsIHQpIHtcbiAgICByZXR1cm4gZS5xdWVyeVNlbGVjdG9yKHQpO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgRWxlbWVudCBieSBJZFxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgLSBpZCB0byBmaW5kXG4gICAqIEByZXR1cm5zIHtIVE1MRWxlbWVudCB8IG51bGx9XG4gICAqL1xuICBzdGF0aWMgZ2V0KGUpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoZSk7XG4gIH1cbiAgLyoqXG4gICAqIFNlbGVjdG9yIERlY29yYXRvci5cbiAgICpcbiAgICogUmV0dXJucyBhbGwgbWF0Y2hlc1xuICAgKlxuICAgKiBAcGFyYW0ge0VsZW1lbnR8RG9jdW1lbnR9IGVsIC0gZWxlbWVudCB3ZSBzZWFyY2hpbmcgaW5zaWRlLiBEZWZhdWx0IC0gRE9NIERvY3VtZW50XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzZWxlY3RvciAtIHNlYXJjaGluZyBzdHJpbmdcbiAgICogQHJldHVybnMge05vZGVMaXN0fVxuICAgKi9cbiAgc3RhdGljIGZpbmRBbGwoZSA9IGRvY3VtZW50LCB0KSB7XG4gICAgcmV0dXJuIGUucXVlcnlTZWxlY3RvckFsbCh0KTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBDU1Mgc2VsZWN0b3IgZm9yIGFsbCB0ZXh0IGlucHV0c1xuICAgKi9cbiAgc3RhdGljIGdldCBhbGxJbnB1dHNTZWxlY3RvcigpIHtcbiAgICByZXR1cm4gXCJbY29udGVudGVkaXRhYmxlPXRydWVdLCB0ZXh0YXJlYSwgaW5wdXQ6bm90KFt0eXBlXSksIFwiICsgW1widGV4dFwiLCBcInBhc3N3b3JkXCIsIFwiZW1haWxcIiwgXCJudW1iZXJcIiwgXCJzZWFyY2hcIiwgXCJ0ZWxcIiwgXCJ1cmxcIl0ubWFwKCh0KSA9PiBgaW5wdXRbdHlwZT1cIiR7dH1cIl1gKS5qb2luKFwiLCBcIik7XG4gIH1cbiAgLyoqXG4gICAqIEZpbmQgYWxsIGNvbnRlbnRlZGl0YWJsZSwgdGV4dGFyZWEgYW5kIGVkaXRhYmxlIGlucHV0IGVsZW1lbnRzIHBhc3NlZCBob2xkZXIgY29udGFpbnNcbiAgICpcbiAgICogQHBhcmFtIGhvbGRlciAtIGVsZW1lbnQgd2hlcmUgdG8gZmluZCBpbnB1dHNcbiAgICovXG4gIHN0YXRpYyBmaW5kQWxsSW5wdXRzKGUpIHtcbiAgICByZXR1cm4gY3QoZS5xdWVyeVNlbGVjdG9yQWxsKGMuYWxsSW5wdXRzU2VsZWN0b3IpKS5yZWR1Y2UoKHQsIG8pID0+IGMuaXNOYXRpdmVJbnB1dChvKSB8fCBjLmNvbnRhaW5zT25seUlubGluZUVsZW1lbnRzKG8pID8gWy4uLnQsIG9dIDogWy4uLnQsIC4uLmMuZ2V0RGVlcGVzdEJsb2NrRWxlbWVudHMobyldLCBbXSk7XG4gIH1cbiAgLyoqXG4gICAqIFNlYXJjaCBmb3IgZGVlcGVzdCBub2RlIHdoaWNoIGlzIExlYWYuXG4gICAqIExlYWYgaXMgdGhlIHZlcnRleCB0aGF0IGRvZXNuJ3QgaGF2ZSBhbnkgY2hpbGQgbm9kZXNcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uIE1ldGhvZCByZWN1cnNpdmVseSBnb2VzIHRocm93IHRoZSBhbGwgTm9kZSB1bnRpbCBpdCBmaW5kcyB0aGUgTGVhZlxuICAgKiBAcGFyYW0ge05vZGV9IG5vZGUgLSByb290IE5vZGUuIEZyb20gdGhpcyB2ZXJ0ZXggd2Ugc3RhcnQgRGVlcC1maXJzdCBzZWFyY2hcbiAgICogICAgICAgICAgICAgICAgICAgICAge0BsaW5rIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0RlcHRoLWZpcnN0X3NlYXJjaH1cbiAgICogQHBhcmFtIHtib29sZWFufSBbYXRMYXN0XSAtIGZpbmQgbGFzdCB0ZXh0IG5vZGVcbiAgICogQHJldHVybnMge05vZGV9IC0gaXQgY2FuIGJlIHRleHQgTm9kZSBvciBFbGVtZW50IE5vZGUsIHNvIHRoYXQgY2FyZXQgd2lsbCBhYmxlIHRvIHdvcmsgd2l0aCBpdFxuICAgKi9cbiAgc3RhdGljIGdldERlZXBlc3ROb2RlKGUsIHQgPSAhMSkge1xuICAgIGNvbnN0IG8gPSB0ID8gXCJsYXN0Q2hpbGRcIiA6IFwiZmlyc3RDaGlsZFwiLCBpID0gdCA/IFwicHJldmlvdXNTaWJsaW5nXCIgOiBcIm5leHRTaWJsaW5nXCI7XG4gICAgaWYgKGUgJiYgZS5ub2RlVHlwZSA9PT0gTm9kZS5FTEVNRU5UX05PREUgJiYgZVtvXSkge1xuICAgICAgbGV0IG4gPSBlW29dO1xuICAgICAgaWYgKGMuaXNTaW5nbGVUYWcobikgJiYgIWMuaXNOYXRpdmVJbnB1dChuKSAmJiAhYy5pc0xpbmVCcmVha1RhZyhuKSlcbiAgICAgICAgaWYgKG5baV0pXG4gICAgICAgICAgbiA9IG5baV07XG4gICAgICAgIGVsc2UgaWYgKG4ucGFyZW50Tm9kZVtpXSlcbiAgICAgICAgICBuID0gbi5wYXJlbnROb2RlW2ldO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgcmV0dXJuIG4ucGFyZW50Tm9kZTtcbiAgICAgIHJldHVybiB0aGlzLmdldERlZXBlc3ROb2RlKG4sIHQpO1xuICAgIH1cbiAgICByZXR1cm4gZTtcbiAgfVxuICAvKipcbiAgICogQ2hlY2sgaWYgb2JqZWN0IGlzIERPTSBub2RlXG4gICAqXG4gICAqIEBwYXJhbSB7Kn0gbm9kZSAtIG9iamVjdCB0byBjaGVja1xuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICovXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gIHN0YXRpYyBpc0VsZW1lbnQoZSkge1xuICAgIHJldHVybiBKZShlKSA/ICExIDogZSAmJiBlLm5vZGVUeXBlICYmIGUubm9kZVR5cGUgPT09IE5vZGUuRUxFTUVOVF9OT0RFO1xuICB9XG4gIC8qKlxuICAgKiBDaGVjayBpZiBvYmplY3QgaXMgRG9jdW1lbnRGcmFnbWVudCBub2RlXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBub2RlIC0gb2JqZWN0IHRvIGNoZWNrXG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKi9cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgc3RhdGljIGlzRnJhZ21lbnQoZSkge1xuICAgIHJldHVybiBKZShlKSA/ICExIDogZSAmJiBlLm5vZGVUeXBlICYmIGUubm9kZVR5cGUgPT09IE5vZGUuRE9DVU1FTlRfRlJBR01FTlRfTk9ERTtcbiAgfVxuICAvKipcbiAgICogQ2hlY2sgaWYgcGFzc2VkIGVsZW1lbnQgaXMgY29udGVudGVkaXRhYmxlXG4gICAqXG4gICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW1lbnQgLSBodG1sIGVsZW1lbnQgdG8gY2hlY2tcbiAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAqL1xuICBzdGF0aWMgaXNDb250ZW50RWRpdGFibGUoZSkge1xuICAgIHJldHVybiBlLmNvbnRlbnRFZGl0YWJsZSA9PT0gXCJ0cnVlXCI7XG4gIH1cbiAgLyoqXG4gICAqIENoZWNrcyB0YXJnZXQgaWYgaXQgaXMgbmF0aXZlIGlucHV0XG4gICAqXG4gICAqIEBwYXJhbSB7Kn0gdGFyZ2V0IC0gSFRNTCBlbGVtZW50IG9yIHN0cmluZ1xuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICovXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gIHN0YXRpYyBpc05hdGl2ZUlucHV0KGUpIHtcbiAgICBjb25zdCB0ID0gW1xuICAgICAgXCJJTlBVVFwiLFxuICAgICAgXCJURVhUQVJFQVwiXG4gICAgXTtcbiAgICByZXR1cm4gZSAmJiBlLnRhZ05hbWUgPyB0LmluY2x1ZGVzKGUudGFnTmFtZSkgOiAhMTtcbiAgfVxuICAvKipcbiAgICogQ2hlY2tzIGlmIHdlIGNhbiBzZXQgY2FyZXRcbiAgICpcbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gdGFyZ2V0IC0gdGFyZ2V0IHRvIGNoZWNrXG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKi9cbiAgc3RhdGljIGNhblNldENhcmV0KGUpIHtcbiAgICBsZXQgdCA9ICEwO1xuICAgIGlmIChjLmlzTmF0aXZlSW5wdXQoZSkpXG4gICAgICBzd2l0Y2ggKGUudHlwZSkge1xuICAgICAgICBjYXNlIFwiZmlsZVwiOlxuICAgICAgICBjYXNlIFwiY2hlY2tib3hcIjpcbiAgICAgICAgY2FzZSBcInJhZGlvXCI6XG4gICAgICAgIGNhc2UgXCJoaWRkZW5cIjpcbiAgICAgICAgY2FzZSBcInN1Ym1pdFwiOlxuICAgICAgICBjYXNlIFwiYnV0dG9uXCI6XG4gICAgICAgIGNhc2UgXCJpbWFnZVwiOlxuICAgICAgICBjYXNlIFwicmVzZXRcIjpcbiAgICAgICAgICB0ID0gITE7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgZWxzZVxuICAgICAgdCA9IGMuaXNDb250ZW50RWRpdGFibGUoZSk7XG4gICAgcmV0dXJuIHQ7XG4gIH1cbiAgLyoqXG4gICAqIENoZWNrcyBub2RlIGlmIGl0IGlzIGVtcHR5XG4gICAqXG4gICAqIEBkZXNjcmlwdGlvbiBNZXRob2QgY2hlY2tzIHNpbXBsZSBOb2RlIHdpdGhvdXQgYW55IGNoaWxkcyBmb3IgZW1wdGluZXNzXG4gICAqIElmIHlvdSBoYXZlIE5vZGUgd2l0aCAyIG9yIG1vcmUgY2hpbGRyZW4gaWQgZGVwdGgsIHlvdSBiZXR0ZXIgdXNlIHtAbGluayBEb20jaXNFbXB0eX0gbWV0aG9kXG4gICAqIEBwYXJhbSB7Tm9kZX0gbm9kZSAtIG5vZGUgdG8gY2hlY2tcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtpZ25vcmVDaGFyc10gLSBjaGFyIG9yIHN1YnN0cmluZyB0byB0cmVhdCBhcyBlbXB0eVxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gdHJ1ZSBpZiBpdCBpcyBlbXB0eVxuICAgKi9cbiAgc3RhdGljIGlzTm9kZUVtcHR5KGUsIHQpIHtcbiAgICBsZXQgbztcbiAgICByZXR1cm4gdGhpcy5pc1NpbmdsZVRhZyhlKSAmJiAhdGhpcy5pc0xpbmVCcmVha1RhZyhlKSA/ICExIDogKHRoaXMuaXNFbGVtZW50KGUpICYmIHRoaXMuaXNOYXRpdmVJbnB1dChlKSA/IG8gPSBlLnZhbHVlIDogbyA9IGUudGV4dENvbnRlbnQucmVwbGFjZShcIuKAi1wiLCBcIlwiKSwgdCAmJiAobyA9IG8ucmVwbGFjZShuZXcgUmVnRXhwKHQsIFwiZ1wiKSwgXCJcIikpLCBvLnRyaW0oKS5sZW5ndGggPT09IDApO1xuICB9XG4gIC8qKlxuICAgKiBjaGVja3Mgbm9kZSBpZiBpdCBpcyBkb2Vzbid0IGhhdmUgYW55IGNoaWxkIG5vZGVzXG4gICAqXG4gICAqIEBwYXJhbSB7Tm9kZX0gbm9kZSAtIG5vZGUgdG8gY2hlY2tcbiAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAqL1xuICBzdGF0aWMgaXNMZWFmKGUpIHtcbiAgICByZXR1cm4gZSA/IGUuY2hpbGROb2Rlcy5sZW5ndGggPT09IDAgOiAhMTtcbiAgfVxuICAvKipcbiAgICogYnJlYWR0aC1maXJzdCBzZWFyY2ggKEJGUylcbiAgICoge0BsaW5rIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0JyZWFkdGgtZmlyc3Rfc2VhcmNofVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb24gUHVzaGVzIHRvIHN0YWNrIGFsbCBET00gbGVhZnMgYW5kIGNoZWNrcyBmb3IgZW1wdGluZXNzXG4gICAqIEBwYXJhbSB7Tm9kZX0gbm9kZSAtIG5vZGUgdG8gY2hlY2tcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtpZ25vcmVDaGFyc10gLSBjaGFyIG9yIHN1YnN0cmluZyB0byB0cmVhdCBhcyBlbXB0eVxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICovXG4gIHN0YXRpYyBpc0VtcHR5KGUsIHQpIHtcbiAgICBlLm5vcm1hbGl6ZSgpO1xuICAgIGNvbnN0IG8gPSBbZV07XG4gICAgZm9yICg7IG8ubGVuZ3RoID4gMDsgKVxuICAgICAgaWYgKGUgPSBvLnNoaWZ0KCksICEhZSkge1xuICAgICAgICBpZiAodGhpcy5pc0xlYWYoZSkgJiYgIXRoaXMuaXNOb2RlRW1wdHkoZSwgdCkpXG4gICAgICAgICAgcmV0dXJuICExO1xuICAgICAgICBlLmNoaWxkTm9kZXMgJiYgby5wdXNoKC4uLkFycmF5LmZyb20oZS5jaGlsZE5vZGVzKSk7XG4gICAgICB9XG4gICAgcmV0dXJuICEwO1xuICB9XG4gIC8qKlxuICAgKiBDaGVjayBpZiBzdHJpbmcgY29udGFpbnMgaHRtbCBlbGVtZW50c1xuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyIC0gc3RyaW5nIHRvIGNoZWNrXG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKi9cbiAgc3RhdGljIGlzSFRNTFN0cmluZyhlKSB7XG4gICAgY29uc3QgdCA9IGMubWFrZShcImRpdlwiKTtcbiAgICByZXR1cm4gdC5pbm5lckhUTUwgPSBlLCB0LmNoaWxkRWxlbWVudENvdW50ID4gMDtcbiAgfVxuICAvKipcbiAgICogUmV0dXJuIGxlbmd0aCBvZiBub2RlYHMgdGV4dCBjb250ZW50XG4gICAqXG4gICAqIEBwYXJhbSB7Tm9kZX0gbm9kZSAtIG5vZGUgd2l0aCBjb250ZW50XG4gICAqIEByZXR1cm5zIHtudW1iZXJ9XG4gICAqL1xuICBzdGF0aWMgZ2V0Q29udGVudExlbmd0aChlKSB7XG4gICAgcmV0dXJuIGMuaXNOYXRpdmVJbnB1dChlKSA/IGUudmFsdWUubGVuZ3RoIDogZS5ub2RlVHlwZSA9PT0gTm9kZS5URVhUX05PREUgPyBlLmxlbmd0aCA6IGUudGV4dENvbnRlbnQubGVuZ3RoO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm4gYXJyYXkgb2YgbmFtZXMgb2YgYmxvY2sgaHRtbCBlbGVtZW50c1xuICAgKlxuICAgKiBAcmV0dXJucyB7c3RyaW5nW119XG4gICAqL1xuICBzdGF0aWMgZ2V0IGJsb2NrRWxlbWVudHMoKSB7XG4gICAgcmV0dXJuIFtcbiAgICAgIFwiYWRkcmVzc1wiLFxuICAgICAgXCJhcnRpY2xlXCIsXG4gICAgICBcImFzaWRlXCIsXG4gICAgICBcImJsb2NrcXVvdGVcIixcbiAgICAgIFwiY2FudmFzXCIsXG4gICAgICBcImRpdlwiLFxuICAgICAgXCJkbFwiLFxuICAgICAgXCJkdFwiLFxuICAgICAgXCJmaWVsZHNldFwiLFxuICAgICAgXCJmaWdjYXB0aW9uXCIsXG4gICAgICBcImZpZ3VyZVwiLFxuICAgICAgXCJmb290ZXJcIixcbiAgICAgIFwiZm9ybVwiLFxuICAgICAgXCJoMVwiLFxuICAgICAgXCJoMlwiLFxuICAgICAgXCJoM1wiLFxuICAgICAgXCJoNFwiLFxuICAgICAgXCJoNVwiLFxuICAgICAgXCJoNlwiLFxuICAgICAgXCJoZWFkZXJcIixcbiAgICAgIFwiaGdyb3VwXCIsXG4gICAgICBcImhyXCIsXG4gICAgICBcImxpXCIsXG4gICAgICBcIm1haW5cIixcbiAgICAgIFwibmF2XCIsXG4gICAgICBcIm5vc2NyaXB0XCIsXG4gICAgICBcIm9sXCIsXG4gICAgICBcIm91dHB1dFwiLFxuICAgICAgXCJwXCIsXG4gICAgICBcInByZVwiLFxuICAgICAgXCJydWJ5XCIsXG4gICAgICBcInNlY3Rpb25cIixcbiAgICAgIFwidGFibGVcIixcbiAgICAgIFwidGJvZHlcIixcbiAgICAgIFwidGhlYWRcIixcbiAgICAgIFwidHJcIixcbiAgICAgIFwidGZvb3RcIixcbiAgICAgIFwidWxcIixcbiAgICAgIFwidmlkZW9cIlxuICAgIF07XG4gIH1cbiAgLyoqXG4gICAqIENoZWNrIGlmIHBhc3NlZCBjb250ZW50IGluY2x1ZGVzIG9ubHkgaW5saW5lIGVsZW1lbnRzXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfEhUTUxFbGVtZW50fSBkYXRhIC0gZWxlbWVudCBvciBodG1sIHN0cmluZ1xuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICovXG4gIHN0YXRpYyBjb250YWluc09ubHlJbmxpbmVFbGVtZW50cyhlKSB7XG4gICAgbGV0IHQ7XG4gICAgRyhlKSA/ICh0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSwgdC5pbm5lckhUTUwgPSBlKSA6IHQgPSBlO1xuICAgIGNvbnN0IG8gPSAoaSkgPT4gIWMuYmxvY2tFbGVtZW50cy5pbmNsdWRlcyhpLnRhZ05hbWUudG9Mb3dlckNhc2UoKSkgJiYgQXJyYXkuZnJvbShpLmNoaWxkcmVuKS5ldmVyeShvKTtcbiAgICByZXR1cm4gQXJyYXkuZnJvbSh0LmNoaWxkcmVuKS5ldmVyeShvKTtcbiAgfVxuICAvKipcbiAgICogRmluZCBhbmQgcmV0dXJuIGFsbCBibG9jayBlbGVtZW50cyBpbiB0aGUgcGFzc2VkIHBhcmVudCAoaW5jbHVkaW5nIHN1YnRyZWUpXG4gICAqXG4gICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHBhcmVudCAtIHJvb3QgZWxlbWVudFxuICAgKiBAcmV0dXJucyB7SFRNTEVsZW1lbnRbXX1cbiAgICovXG4gIHN0YXRpYyBnZXREZWVwZXN0QmxvY2tFbGVtZW50cyhlKSB7XG4gICAgcmV0dXJuIGMuY29udGFpbnNPbmx5SW5saW5lRWxlbWVudHMoZSkgPyBbZV0gOiBBcnJheS5mcm9tKGUuY2hpbGRyZW4pLnJlZHVjZSgodCwgbykgPT4gWy4uLnQsIC4uLmMuZ2V0RGVlcGVzdEJsb2NrRWxlbWVudHMobyldLCBbXSk7XG4gIH1cbiAgLyoqXG4gICAqIEhlbHBlciBmb3IgZ2V0IGhvbGRlciBmcm9tIHtzdHJpbmd9IG9yIHJldHVybiBIVE1MRWxlbWVudFxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZyB8IEhUTUxFbGVtZW50fSBlbGVtZW50IC0gaG9sZGVyJ3MgaWQgb3IgaG9sZGVyJ3MgSFRNTCBFbGVtZW50XG4gICAqIEByZXR1cm5zIHtIVE1MRWxlbWVudH1cbiAgICovXG4gIHN0YXRpYyBnZXRIb2xkZXIoZSkge1xuICAgIHJldHVybiBHKGUpID8gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoZSkgOiBlO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIHRydWUgaWYgZWxlbWVudCBpcyBhbmNob3IgKGlzIEEgdGFnKVxuICAgKlxuICAgKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnQgLSBlbGVtZW50IHRvIGNoZWNrXG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKi9cbiAgc3RhdGljIGlzQW5jaG9yKGUpIHtcbiAgICByZXR1cm4gZS50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiYVwiO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm4gZWxlbWVudCdzIG9mZnNldCByZWxhdGVkIHRvIHRoZSBkb2N1bWVudFxuICAgKlxuICAgKiBAdG9kbyBoYW5kbGUgY2FzZSB3aGVuIGVkaXRvciBpbml0aWFsaXplZCBpbiBzY3JvbGxhYmxlIHBvcHVwXG4gICAqIEBwYXJhbSBlbCAtIGVsZW1lbnQgdG8gY29tcHV0ZSBvZmZzZXRcbiAgICovXG4gIHN0YXRpYyBvZmZzZXQoZSkge1xuICAgIGNvbnN0IHQgPSBlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLCBvID0gd2luZG93LnBhZ2VYT2Zmc2V0IHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxMZWZ0LCBpID0gd2luZG93LnBhZ2VZT2Zmc2V0IHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3AsIG4gPSB0LnRvcCArIGksIHIgPSB0LmxlZnQgKyBvO1xuICAgIHJldHVybiB7XG4gICAgICB0b3A6IG4sXG4gICAgICBsZWZ0OiByLFxuICAgICAgYm90dG9tOiBuICsgdC5oZWlnaHQsXG4gICAgICByaWdodDogciArIHQud2lkdGhcbiAgICB9O1xuICB9XG59XG5jb25zdCBxdCA9IHtcbiAgYmxvY2tUdW5lczoge1xuICAgIHRvZ2dsZXI6IHtcbiAgICAgIFwiQ2xpY2sgdG8gdHVuZVwiOiBcIlwiLFxuICAgICAgXCJvciBkcmFnIHRvIG1vdmVcIjogXCJcIlxuICAgIH1cbiAgfSxcbiAgaW5saW5lVG9vbGJhcjoge1xuICAgIGNvbnZlcnRlcjoge1xuICAgICAgXCJDb252ZXJ0IHRvXCI6IFwiXCJcbiAgICB9XG4gIH0sXG4gIHRvb2xiYXI6IHtcbiAgICB0b29sYm94OiB7XG4gICAgICBBZGQ6IFwiXCJcbiAgICB9XG4gIH0sXG4gIHBvcG92ZXI6IHtcbiAgICBGaWx0ZXI6IFwiXCIsXG4gICAgXCJOb3RoaW5nIGZvdW5kXCI6IFwiXCJcbiAgfVxufSwgWnQgPSB7XG4gIFRleHQ6IFwiXCIsXG4gIExpbms6IFwiXCIsXG4gIEJvbGQ6IFwiXCIsXG4gIEl0YWxpYzogXCJcIlxufSwgR3QgPSB7XG4gIGxpbms6IHtcbiAgICBcIkFkZCBhIGxpbmtcIjogXCJcIlxuICB9LFxuICBzdHViOiB7XG4gICAgXCJUaGUgYmxvY2sgY2FuIG5vdCBiZSBkaXNwbGF5ZWQgY29ycmVjdGx5LlwiOiBcIlwiXG4gIH1cbn0sIEp0ID0ge1xuICBkZWxldGU6IHtcbiAgICBEZWxldGU6IFwiXCIsXG4gICAgXCJDbGljayB0byBkZWxldGVcIjogXCJcIlxuICB9LFxuICBtb3ZlVXA6IHtcbiAgICBcIk1vdmUgdXBcIjogXCJcIlxuICB9LFxuICBtb3ZlRG93bjoge1xuICAgIFwiTW92ZSBkb3duXCI6IFwiXCJcbiAgfVxufSwgaHQgPSB7XG4gIHVpOiBxdCxcbiAgdG9vbE5hbWVzOiBadCxcbiAgdG9vbHM6IEd0LFxuICBibG9ja1R1bmVzOiBKdFxufSwgaWUgPSBjbGFzcyB7XG4gIC8qKlxuICAgKiBUeXBlLXNhZmUgdHJhbnNsYXRpb24gZm9yIGludGVybmFsIFVJIHRleHRzOlxuICAgKiBQZXJmb3JtIHRyYW5zbGF0aW9uIG9mIHRoZSBzdHJpbmcgYnkgbmFtZXNwYWNlIGFuZCBhIGtleVxuICAgKlxuICAgKiBAZXhhbXBsZSBJMThuLnVpKEkxOG5JbnRlcm5hbE5TLnVpLmJsb2NrVHVuZXMudG9nZ2xlciwgJ0NsaWNrIHRvIHR1bmUnKVxuICAgKiBAcGFyYW0gaW50ZXJuYWxOYW1lc3BhY2UgLSBwYXRoIHRvIHRyYW5zbGF0ZWQgc3RyaW5nIGluIGRpY3Rpb25hcnlcbiAgICogQHBhcmFtIGRpY3RLZXkgLSBkaWN0aW9uYXJ5IGtleS4gQmV0dGVyIHRvIHVzZSBkZWZhdWx0IGxvY2FsZSBvcmlnaW5hbCB0ZXh0XG4gICAqL1xuICBzdGF0aWMgdWkocywgZSkge1xuICAgIHJldHVybiBpZS5fdChzLCBlKTtcbiAgfVxuICAvKipcbiAgICogVHJhbnNsYXRlIGZvciBleHRlcm5hbCBzdHJpbmdzIHRoYXQgaXMgbm90IHByZXNlbnRlZCBpbiBkZWZhdWx0IGRpY3Rpb25hcnkuXG4gICAqIEZvciBleGFtcGxlLCBmb3IgdXNlci1zcGVjaWZpZWQgdG9vbCBuYW1lc1xuICAgKlxuICAgKiBAcGFyYW0gbmFtZXNwYWNlIC0gcGF0aCB0byB0cmFuc2xhdGVkIHN0cmluZyBpbiBkaWN0aW9uYXJ5XG4gICAqIEBwYXJhbSBkaWN0S2V5IC0gZGljdGlvbmFyeSBrZXkuIEJldHRlciB0byB1c2UgZGVmYXVsdCBsb2NhbGUgb3JpZ2luYWwgdGV4dFxuICAgKi9cbiAgc3RhdGljIHQocywgZSkge1xuICAgIHJldHVybiBpZS5fdChzLCBlKTtcbiAgfVxuICAvKipcbiAgICogQWRqdXN0IG1vZHVsZSBmb3IgdXNpbmcgZXh0ZXJuYWwgZGljdGlvbmFyeVxuICAgKlxuICAgKiBAcGFyYW0gZGljdGlvbmFyeSAtIG5ldyBtZXNzYWdlcyBsaXN0IHRvIG92ZXJyaWRlIGRlZmF1bHRcbiAgICovXG4gIHN0YXRpYyBzZXREaWN0aW9uYXJ5KHMpIHtcbiAgICBpZS5jdXJyZW50RGljdGlvbmFyeSA9IHM7XG4gIH1cbiAgLyoqXG4gICAqIFBlcmZvcm0gdHJhbnNsYXRpb24gYm90aCBmb3IgaW50ZXJuYWwgYW5kIGV4dGVybmFsIG5hbWVzcGFjZXNcbiAgICogSWYgdGhlcmUgaXMgbm8gdHJhbnNsYXRpb24gZm91bmQsIHJldHVybnMgcGFzc2VkIGtleSBhcyBhIHRyYW5zbGF0ZWQgbWVzc2FnZVxuICAgKlxuICAgKiBAcGFyYW0gbmFtZXNwYWNlIC0gcGF0aCB0byB0cmFuc2xhdGVkIHN0cmluZyBpbiBkaWN0aW9uYXJ5XG4gICAqIEBwYXJhbSBkaWN0S2V5IC0gZGljdGlvbmFyeSBrZXkuIEJldHRlciB0byB1c2UgZGVmYXVsdCBsb2NhbGUgb3JpZ2luYWwgdGV4dFxuICAgKi9cbiAgc3RhdGljIF90KHMsIGUpIHtcbiAgICBjb25zdCB0ID0gaWUuZ2V0TmFtZXNwYWNlKHMpO1xuICAgIHJldHVybiAhdCB8fCAhdFtlXSA/IGUgOiB0W2VdO1xuICB9XG4gIC8qKlxuICAgKiBGaW5kIG1lc3NhZ2VzIHNlY3Rpb24gYnkgbmFtZXNwYWNlIHBhdGhcbiAgICpcbiAgICogQHBhcmFtIG5hbWVzcGFjZSAtIHBhdGggdG8gc2VjdGlvblxuICAgKi9cbiAgc3RhdGljIGdldE5hbWVzcGFjZShzKSB7XG4gICAgcmV0dXJuIHMuc3BsaXQoXCIuXCIpLnJlZHVjZSgodCwgbykgPT4gIXQgfHwgIU9iamVjdC5rZXlzKHQpLmxlbmd0aCA/IHt9IDogdFtvXSwgaWUuY3VycmVudERpY3Rpb25hcnkpO1xuICB9XG59O1xubGV0IHogPSBpZTtcbnouY3VycmVudERpY3Rpb25hcnkgPSBodDtcbmNsYXNzIHV0IGV4dGVuZHMgRXJyb3Ige1xufVxuY2xhc3MgRWUge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLnN1YnNjcmliZXJzID0ge307XG4gIH1cbiAgLyoqXG4gICAqIFN1YnNjcmliZSBhbnkgZXZlbnQgb24gY2FsbGJhY2tcbiAgICpcbiAgICogQHBhcmFtIGV2ZW50TmFtZSAtIGV2ZW50IG5hbWVcbiAgICogQHBhcmFtIGNhbGxiYWNrIC0gc3Vic2NyaWJlclxuICAgKi9cbiAgb24oZSwgdCkge1xuICAgIGUgaW4gdGhpcy5zdWJzY3JpYmVycyB8fCAodGhpcy5zdWJzY3JpYmVyc1tlXSA9IFtdKSwgdGhpcy5zdWJzY3JpYmVyc1tlXS5wdXNoKHQpO1xuICB9XG4gIC8qKlxuICAgKiBTdWJzY3JpYmUgYW55IGV2ZW50IG9uIGNhbGxiYWNrLiBDYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBvbmNlIGFuZCBiZSByZW1vdmVkIGZyb20gc3Vic2NyaWJlcnMgYXJyYXkgYWZ0ZXIgY2FsbC5cbiAgICpcbiAgICogQHBhcmFtIGV2ZW50TmFtZSAtIGV2ZW50IG5hbWVcbiAgICogQHBhcmFtIGNhbGxiYWNrIC0gc3Vic2NyaWJlclxuICAgKi9cbiAgb25jZShlLCB0KSB7XG4gICAgZSBpbiB0aGlzLnN1YnNjcmliZXJzIHx8ICh0aGlzLnN1YnNjcmliZXJzW2VdID0gW10pO1xuICAgIGNvbnN0IG8gPSAoaSkgPT4ge1xuICAgICAgY29uc3QgbiA9IHQoaSksIHIgPSB0aGlzLnN1YnNjcmliZXJzW2VdLmluZGV4T2Yobyk7XG4gICAgICByZXR1cm4gciAhPT0gLTEgJiYgdGhpcy5zdWJzY3JpYmVyc1tlXS5zcGxpY2UociwgMSksIG47XG4gICAgfTtcbiAgICB0aGlzLnN1YnNjcmliZXJzW2VdLnB1c2gobyk7XG4gIH1cbiAgLyoqXG4gICAqIEVtaXQgY2FsbGJhY2tzIHdpdGggcGFzc2VkIGRhdGFcbiAgICpcbiAgICogQHBhcmFtIGV2ZW50TmFtZSAtIGV2ZW50IG5hbWVcbiAgICogQHBhcmFtIGRhdGEgLSBzdWJzY3JpYmVycyBnZXQgdGhpcyBkYXRhIHdoZW4gdGhleSB3ZXJlIGZpcmVkXG4gICAqL1xuICBlbWl0KGUsIHQpIHtcbiAgICBXKHRoaXMuc3Vic2NyaWJlcnMpIHx8ICF0aGlzLnN1YnNjcmliZXJzW2VdIHx8IHRoaXMuc3Vic2NyaWJlcnNbZV0ucmVkdWNlKChvLCBpKSA9PiB7XG4gICAgICBjb25zdCBuID0gaShvKTtcbiAgICAgIHJldHVybiBuICE9PSB2b2lkIDAgPyBuIDogbztcbiAgICB9LCB0KTtcbiAgfVxuICAvKipcbiAgICogVW5zdWJzY3JpYmUgY2FsbGJhY2sgZnJvbSBldmVudFxuICAgKlxuICAgKiBAcGFyYW0gZXZlbnROYW1lIC0gZXZlbnQgbmFtZVxuICAgKiBAcGFyYW0gY2FsbGJhY2sgLSBldmVudCBoYW5kbGVyXG4gICAqL1xuICBvZmYoZSwgdCkge1xuICAgIGlmICh0aGlzLnN1YnNjcmliZXJzW2VdID09PSB2b2lkIDApIHtcbiAgICAgIGNvbnNvbGUud2FybihgRXZlbnREaXNwYXRjaGVyIC5vZmYoKTogdGhlcmUgaXMgbm8gc3Vic2NyaWJlcnMgZm9yIGV2ZW50IFwiJHtlLnRvU3RyaW5nKCl9XCIuIFByb2JhYmx5LCAub2ZmKCkgY2FsbGVkIGJlZm9yZSAub24oKWApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBmb3IgKGxldCBvID0gMDsgbyA8IHRoaXMuc3Vic2NyaWJlcnNbZV0ubGVuZ3RoOyBvKyspXG4gICAgICBpZiAodGhpcy5zdWJzY3JpYmVyc1tlXVtvXSA9PT0gdCkge1xuICAgICAgICBkZWxldGUgdGhpcy5zdWJzY3JpYmVyc1tlXVtvXTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gIH1cbiAgLyoqXG4gICAqIERlc3Ryb3llclxuICAgKiBjbGVhcnMgc3Vic2NyaWJlcnMgbGlzdFxuICAgKi9cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLnN1YnNjcmliZXJzID0ge307XG4gIH1cbn1cbmZ1bmN0aW9uIGVlKHMpIHtcbiAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIHtcbiAgICAvKipcbiAgICAgKiBCbG9jayBpZFxuICAgICAqXG4gICAgICogQHJldHVybnMge3N0cmluZ31cbiAgICAgKi9cbiAgICBnZXQgaWQoKSB7XG4gICAgICByZXR1cm4gcy5pZDtcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIFRvb2wgbmFtZVxuICAgICAqXG4gICAgICogQHJldHVybnMge3N0cmluZ31cbiAgICAgKi9cbiAgICBnZXQgbmFtZSgpIHtcbiAgICAgIHJldHVybiBzLm5hbWU7XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBUb29sIGNvbmZpZyBwYXNzZWQgb24gRWRpdG9yJ3MgaW5pdGlhbGl6YXRpb25cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtUb29sQ29uZmlnfVxuICAgICAqL1xuICAgIGdldCBjb25maWcoKSB7XG4gICAgICByZXR1cm4gcy5jb25maWc7XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiAuY2UtYmxvY2sgZWxlbWVudCwgdGhhdCB3cmFwcyBwbHVnaW4gY29udGVudHNcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtIVE1MRWxlbWVudH1cbiAgICAgKi9cbiAgICBnZXQgaG9sZGVyKCkge1xuICAgICAgcmV0dXJuIHMuaG9sZGVyO1xuICAgIH0sXG4gICAgLyoqXG4gICAgICogVHJ1ZSBpZiBCbG9jayBjb250ZW50IGlzIGVtcHR5XG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICBnZXQgaXNFbXB0eSgpIHtcbiAgICAgIHJldHVybiBzLmlzRW1wdHk7XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBUcnVlIGlmIEJsb2NrIGlzIHNlbGVjdGVkIHdpdGggQ3Jvc3MtQmxvY2sgc2VsZWN0aW9uXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICBnZXQgc2VsZWN0ZWQoKSB7XG4gICAgICByZXR1cm4gcy5zZWxlY3RlZDtcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIFNldCBCbG9jaydzIHN0cmV0Y2ggc3RhdGVcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gc3RhdGUg4oCUIHN0YXRlIHRvIHNldFxuICAgICAqL1xuICAgIHNldCBzdHJldGNoZWQodCkge1xuICAgICAgcy5zdHJldGNoZWQgPSB0O1xuICAgIH0sXG4gICAgLyoqXG4gICAgICogVHJ1ZSBpZiBCbG9jayBpcyBzdHJldGNoZWRcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgICAqL1xuICAgIGdldCBzdHJldGNoZWQoKSB7XG4gICAgICByZXR1cm4gcy5zdHJldGNoZWQ7XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBUcnVlIGlmIEJsb2NrIGhhcyBpbnB1dHMgdG8gYmUgZm9jdXNlZFxuICAgICAqL1xuICAgIGdldCBmb2N1c2FibGUoKSB7XG4gICAgICByZXR1cm4gcy5mb2N1c2FibGU7XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBDYWxsIFRvb2wgbWV0aG9kIHdpdGggZXJyb3JzIGhhbmRsZXIgdW5kZXItdGhlLWhvb2RcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtZXRob2ROYW1lIC0gbWV0aG9kIHRvIGNhbGxcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gcGFyYW0gLSBvYmplY3Qgd2l0aCBwYXJhbWV0ZXJzXG4gICAgICogQHJldHVybnMge3Vua25vd259XG4gICAgICovXG4gICAgY2FsbCh0LCBvKSB7XG4gICAgICByZXR1cm4gcy5jYWxsKHQsIG8pO1xuICAgIH0sXG4gICAgLyoqXG4gICAgICogU2F2ZSBCbG9jayBjb250ZW50XG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTx2b2lkfFNhdmVkRGF0YT59XG4gICAgICovXG4gICAgc2F2ZSgpIHtcbiAgICAgIHJldHVybiBzLnNhdmUoKTtcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIFZhbGlkYXRlIEJsb2NrIGRhdGFcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7QmxvY2tUb29sRGF0YX0gZGF0YSAtIGRhdGEgdG8gdmFsaWRhdGVcbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxib29sZWFuPn1cbiAgICAgKi9cbiAgICB2YWxpZGF0ZSh0KSB7XG4gICAgICByZXR1cm4gcy52YWxpZGF0ZSh0KTtcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIEFsbG93cyB0byBzYXkgRWRpdG9yIHRoYXQgQmxvY2sgd2FzIGNoYW5nZWQuIFVzZWQgdG8gbWFudWFsbHkgdHJpZ2dlciBFZGl0b3IncyAnb25DaGFuZ2UnIGNhbGxiYWNrXG4gICAgICogQ2FuIGJlIHVzZWZ1bCBmb3IgYmxvY2sgY2hhbmdlcyBpbnZpc2libGUgZm9yIGVkaXRvciBjb3JlLlxuICAgICAqL1xuICAgIGRpc3BhdGNoQ2hhbmdlKCkge1xuICAgICAgcy5kaXNwYXRjaENoYW5nZSgpO1xuICAgIH1cbiAgfSk7XG59XG5jbGFzcyBGZSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuYWxsTGlzdGVuZXJzID0gW107XG4gIH1cbiAgLyoqXG4gICAqIEFzc2lnbnMgZXZlbnQgbGlzdGVuZXIgb24gZWxlbWVudCBhbmQgcmV0dXJucyB1bmlxdWUgaWRlbnRpZmllclxuICAgKlxuICAgKiBAcGFyYW0ge0V2ZW50VGFyZ2V0fSBlbGVtZW50IC0gRE9NIGVsZW1lbnQgdGhhdCBuZWVkcyB0byBiZSBsaXN0ZW5lZFxuICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnRUeXBlIC0gZXZlbnQgdHlwZVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBoYW5kbGVyIC0gbWV0aG9kIHRoYXQgd2lsbCBiZSBmaXJlZCBvbiBldmVudFxuICAgKiBAcGFyYW0ge2Jvb2xlYW58QWRkRXZlbnRMaXN0ZW5lck9wdGlvbnN9IG9wdGlvbnMgLSB1c2VDYXB0dXJlIG9yIHtjYXB0dXJlLCBwYXNzaXZlLCBvbmNlfVxuICAgKi9cbiAgb24oZSwgdCwgbywgaSA9ICExKSB7XG4gICAgY29uc3QgbiA9IFh0KFwibFwiKSwgciA9IHtcbiAgICAgIGlkOiBuLFxuICAgICAgZWxlbWVudDogZSxcbiAgICAgIGV2ZW50VHlwZTogdCxcbiAgICAgIGhhbmRsZXI6IG8sXG4gICAgICBvcHRpb25zOiBpXG4gICAgfTtcbiAgICBpZiAoIXRoaXMuZmluZE9uZShlLCB0LCBvKSlcbiAgICAgIHJldHVybiB0aGlzLmFsbExpc3RlbmVycy5wdXNoKHIpLCBlLmFkZEV2ZW50TGlzdGVuZXIodCwgbywgaSksIG47XG4gIH1cbiAgLyoqXG4gICAqIFJlbW92ZXMgZXZlbnQgbGlzdGVuZXIgZnJvbSBlbGVtZW50XG4gICAqXG4gICAqIEBwYXJhbSB7RXZlbnRUYXJnZXR9IGVsZW1lbnQgLSBET00gZWxlbWVudCB0aGF0IHdlIHJlbW92aW5nIGxpc3RlbmVyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudFR5cGUgLSBldmVudCB0eXBlXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGhhbmRsZXIgLSByZW1vdmUgaGFuZGxlciwgaWYgZWxlbWVudCBsaXN0ZW5zIHNldmVyYWwgaGFuZGxlcnMgb24gdGhlIHNhbWUgZXZlbnQgdHlwZVxuICAgKiBAcGFyYW0ge2Jvb2xlYW58QWRkRXZlbnRMaXN0ZW5lck9wdGlvbnN9IG9wdGlvbnMgLSB1c2VDYXB0dXJlIG9yIHtjYXB0dXJlLCBwYXNzaXZlLCBvbmNlfVxuICAgKi9cbiAgb2ZmKGUsIHQsIG8sIGkpIHtcbiAgICBjb25zdCBuID0gdGhpcy5maW5kQWxsKGUsIHQsIG8pO1xuICAgIG4uZm9yRWFjaCgociwgYSkgPT4ge1xuICAgICAgY29uc3QgbCA9IHRoaXMuYWxsTGlzdGVuZXJzLmluZGV4T2YoblthXSk7XG4gICAgICBsID4gLTEgJiYgKHRoaXMuYWxsTGlzdGVuZXJzLnNwbGljZShsLCAxKSwgci5lbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoci5ldmVudFR5cGUsIHIuaGFuZGxlciwgci5vcHRpb25zKSk7XG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIFJlbW92ZXMgbGlzdGVuZXIgYnkgaWRcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGlkIC0gbGlzdGVuZXIgaWRlbnRpZmllclxuICAgKi9cbiAgb2ZmQnlJZChlKSB7XG4gICAgY29uc3QgdCA9IHRoaXMuZmluZEJ5SWQoZSk7XG4gICAgdCAmJiB0LmVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcih0LmV2ZW50VHlwZSwgdC5oYW5kbGVyLCB0Lm9wdGlvbnMpO1xuICB9XG4gIC8qKlxuICAgKiBGaW5kcyBhbmQgcmV0dXJucyBmaXJzdCBsaXN0ZW5lciBieSBwYXNzZWQgcGFyYW1zXG4gICAqXG4gICAqIEBwYXJhbSB7RXZlbnRUYXJnZXR9IGVsZW1lbnQgLSBldmVudCB0YXJnZXRcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtldmVudFR5cGVdIC0gZXZlbnQgdHlwZVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaGFuZGxlcl0gLSBldmVudCBoYW5kbGVyXG4gICAqIEByZXR1cm5zIHtMaXN0ZW5lckRhdGF8bnVsbH1cbiAgICovXG4gIGZpbmRPbmUoZSwgdCwgbykge1xuICAgIGNvbnN0IGkgPSB0aGlzLmZpbmRBbGwoZSwgdCwgbyk7XG4gICAgcmV0dXJuIGkubGVuZ3RoID4gMCA/IGlbMF0gOiBudWxsO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm4gYWxsIHN0b3JlZCBsaXN0ZW5lcnMgYnkgcGFzc2VkIHBhcmFtc1xuICAgKlxuICAgKiBAcGFyYW0ge0V2ZW50VGFyZ2V0fSBlbGVtZW50IC0gZXZlbnQgdGFyZ2V0XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudFR5cGUgLSBldmVudCB0eXBlXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGhhbmRsZXIgLSBldmVudCBoYW5kbGVyXG4gICAqIEByZXR1cm5zIHtMaXN0ZW5lckRhdGFbXX1cbiAgICovXG4gIGZpbmRBbGwoZSwgdCwgbykge1xuICAgIGxldCBpO1xuICAgIGNvbnN0IG4gPSBlID8gdGhpcy5maW5kQnlFdmVudFRhcmdldChlKSA6IFtdO1xuICAgIHJldHVybiBlICYmIHQgJiYgbyA/IGkgPSBuLmZpbHRlcigocikgPT4gci5ldmVudFR5cGUgPT09IHQgJiYgci5oYW5kbGVyID09PSBvKSA6IGUgJiYgdCA/IGkgPSBuLmZpbHRlcigocikgPT4gci5ldmVudFR5cGUgPT09IHQpIDogaSA9IG4sIGk7XG4gIH1cbiAgLyoqXG4gICAqIFJlbW92ZXMgYWxsIGxpc3RlbmVyc1xuICAgKi9cbiAgcmVtb3ZlQWxsKCkge1xuICAgIHRoaXMuYWxsTGlzdGVuZXJzLm1hcCgoZSkgPT4ge1xuICAgICAgZS5lbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoZS5ldmVudFR5cGUsIGUuaGFuZGxlciwgZS5vcHRpb25zKTtcbiAgICB9KSwgdGhpcy5hbGxMaXN0ZW5lcnMgPSBbXTtcbiAgfVxuICAvKipcbiAgICogTW9kdWxlIGNsZWFudXAgb24gZGVzdHJ1Y3Rpb25cbiAgICovXG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy5yZW1vdmVBbGwoKTtcbiAgfVxuICAvKipcbiAgICogU2VhcmNoIG1ldGhvZDogbG9va3MgZm9yIGxpc3RlbmVyIGJ5IHBhc3NlZCBlbGVtZW50XG4gICAqXG4gICAqIEBwYXJhbSB7RXZlbnRUYXJnZXR9IGVsZW1lbnQgLSBzZWFyY2hpbmcgZWxlbWVudFxuICAgKiBAcmV0dXJucyB7QXJyYXl9IGxpc3RlbmVycyB0aGF0IGZvdW5kIG9uIGVsZW1lbnRcbiAgICovXG4gIGZpbmRCeUV2ZW50VGFyZ2V0KGUpIHtcbiAgICByZXR1cm4gdGhpcy5hbGxMaXN0ZW5lcnMuZmlsdGVyKCh0KSA9PiB7XG4gICAgICBpZiAodC5lbGVtZW50ID09PSBlKVxuICAgICAgICByZXR1cm4gdDtcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogU2VhcmNoIG1ldGhvZDogbG9va3MgZm9yIGxpc3RlbmVyIGJ5IHBhc3NlZCBldmVudCB0eXBlXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudFR5cGUgLSBldmVudCB0eXBlXG4gICAqIEByZXR1cm5zIHtMaXN0ZW5lckRhdGFbXX0gbGlzdGVuZXJzIHRoYXQgZm91bmQgb24gZWxlbWVudFxuICAgKi9cbiAgZmluZEJ5VHlwZShlKSB7XG4gICAgcmV0dXJuIHRoaXMuYWxsTGlzdGVuZXJzLmZpbHRlcigodCkgPT4ge1xuICAgICAgaWYgKHQuZXZlbnRUeXBlID09PSBlKVxuICAgICAgICByZXR1cm4gdDtcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogU2VhcmNoIG1ldGhvZDogbG9va3MgZm9yIGxpc3RlbmVyIGJ5IHBhc3NlZCBoYW5kbGVyXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGhhbmRsZXIgLSBldmVudCBoYW5kbGVyXG4gICAqIEByZXR1cm5zIHtMaXN0ZW5lckRhdGFbXX0gbGlzdGVuZXJzIHRoYXQgZm91bmQgb24gZWxlbWVudFxuICAgKi9cbiAgZmluZEJ5SGFuZGxlcihlKSB7XG4gICAgcmV0dXJuIHRoaXMuYWxsTGlzdGVuZXJzLmZpbHRlcigodCkgPT4ge1xuICAgICAgaWYgKHQuaGFuZGxlciA9PT0gZSlcbiAgICAgICAgcmV0dXJuIHQ7XG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgbGlzdGVuZXIgZGF0YSBmb3VuZCBieSBpZFxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgLSBsaXN0ZW5lciBpZGVudGlmaWVyXG4gICAqIEByZXR1cm5zIHtMaXN0ZW5lckRhdGF9XG4gICAqL1xuICBmaW5kQnlJZChlKSB7XG4gICAgcmV0dXJuIHRoaXMuYWxsTGlzdGVuZXJzLmZpbmQoKHQpID0+IHQuaWQgPT09IGUpO1xuICB9XG59XG5jbGFzcyB5IHtcbiAgLyoqXG4gICAqIEBjbGFzc1xuICAgKiBAcGFyYW0gb3B0aW9ucyAtIE1vZHVsZSBvcHRpb25zXG4gICAqIEBwYXJhbSBvcHRpb25zLmNvbmZpZyAtIE1vZHVsZSBjb25maWdcbiAgICogQHBhcmFtIG9wdGlvbnMuZXZlbnRzRGlzcGF0Y2hlciAtIENvbW1vbiBldmVudCBidXNcbiAgICovXG4gIGNvbnN0cnVjdG9yKHsgY29uZmlnOiBlLCBldmVudHNEaXNwYXRjaGVyOiB0IH0pIHtcbiAgICBpZiAodGhpcy5ub2RlcyA9IHt9LCB0aGlzLmxpc3RlbmVycyA9IG5ldyBGZSgpLCB0aGlzLnJlYWRPbmx5TXV0YWJsZUxpc3RlbmVycyA9IHtcbiAgICAgIC8qKlxuICAgICAgICogQXNzaWducyBldmVudCBsaXN0ZW5lciBvbiBET00gZWxlbWVudCBhbmQgcHVzaGVzIGludG8gc3BlY2lhbCBhcnJheSB0aGF0IG1pZ2h0IGJlIHJlbW92ZWRcbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge0V2ZW50VGFyZ2V0fSBlbGVtZW50IC0gRE9NIEVsZW1lbnRcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudFR5cGUgLSBFdmVudCBuYW1lXG4gICAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBoYW5kbGVyIC0gRXZlbnQgaGFuZGxlclxuICAgICAgICogQHBhcmFtIHtib29sZWFufEFkZEV2ZW50TGlzdGVuZXJPcHRpb25zfSBvcHRpb25zIC0gTGlzdGVuaW5nIG9wdGlvbnNcbiAgICAgICAqL1xuICAgICAgb246IChvLCBpLCBuLCByID0gITEpID0+IHtcbiAgICAgICAgdGhpcy5tdXRhYmxlTGlzdGVuZXJJZHMucHVzaChcbiAgICAgICAgICB0aGlzLmxpc3RlbmVycy5vbihvLCBpLCBuLCByKVxuICAgICAgICApO1xuICAgICAgfSxcbiAgICAgIC8qKlxuICAgICAgICogQ2xlYXJzIGFsbCBtdXRhYmxlIGxpc3RlbmVyc1xuICAgICAgICovXG4gICAgICBjbGVhckFsbDogKCkgPT4ge1xuICAgICAgICBmb3IgKGNvbnN0IG8gb2YgdGhpcy5tdXRhYmxlTGlzdGVuZXJJZHMpXG4gICAgICAgICAgdGhpcy5saXN0ZW5lcnMub2ZmQnlJZChvKTtcbiAgICAgICAgdGhpcy5tdXRhYmxlTGlzdGVuZXJJZHMgPSBbXTtcbiAgICAgIH1cbiAgICB9LCB0aGlzLm11dGFibGVMaXN0ZW5lcklkcyA9IFtdLCBuZXcudGFyZ2V0ID09PSB5KVxuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNvbnN0cnVjdG9ycyBmb3IgYWJzdHJhY3QgY2xhc3MgTW9kdWxlIGFyZSBub3QgYWxsb3dlZC5cIik7XG4gICAgdGhpcy5jb25maWcgPSBlLCB0aGlzLmV2ZW50c0Rpc3BhdGNoZXIgPSB0O1xuICB9XG4gIC8qKlxuICAgKiBFZGl0b3IgbW9kdWxlcyBzZXR0ZXJcbiAgICpcbiAgICogQHBhcmFtIHtFZGl0b3JNb2R1bGVzfSBFZGl0b3IgLSBFZGl0b3IncyBNb2R1bGVzXG4gICAqL1xuICBzZXQgc3RhdGUoZSkge1xuICAgIHRoaXMuRWRpdG9yID0gZTtcbiAgfVxuICAvKipcbiAgICogUmVtb3ZlIG1lbW9yaXplZCBub2Rlc1xuICAgKi9cbiAgcmVtb3ZlQWxsTm9kZXMoKSB7XG4gICAgZm9yIChjb25zdCBlIGluIHRoaXMubm9kZXMpIHtcbiAgICAgIGNvbnN0IHQgPSB0aGlzLm5vZGVzW2VdO1xuICAgICAgdCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50ICYmIHQucmVtb3ZlKCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIHRydWUgaWYgY3VycmVudCBkaXJlY3Rpb24gaXMgUlRMIChSaWdodC1Uby1MZWZ0KVxuICAgKi9cbiAgZ2V0IGlzUnRsKCkge1xuICAgIHJldHVybiB0aGlzLmNvbmZpZy5pMThuLmRpcmVjdGlvbiA9PT0gXCJydGxcIjtcbiAgfVxufVxuY2xhc3MgYiB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuaW5zdGFuY2UgPSBudWxsLCB0aGlzLnNlbGVjdGlvbiA9IG51bGwsIHRoaXMuc2F2ZWRTZWxlY3Rpb25SYW5nZSA9IG51bGwsIHRoaXMuaXNGYWtlQmFja2dyb3VuZEVuYWJsZWQgPSAhMSwgdGhpcy5jb21tYW5kQmFja2dyb3VuZCA9IFwiYmFja0NvbG9yXCIsIHRoaXMuY29tbWFuZFJlbW92ZUZvcm1hdCA9IFwicmVtb3ZlRm9ybWF0XCI7XG4gIH1cbiAgLyoqXG4gICAqIEVkaXRvciBzdHlsZXNcbiAgICpcbiAgICogQHJldHVybnMge3tlZGl0b3JXcmFwcGVyOiBzdHJpbmcsIGVkaXRvclpvbmU6IHN0cmluZ319XG4gICAqL1xuICBzdGF0aWMgZ2V0IENTUygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZWRpdG9yV3JhcHBlcjogXCJjb2RleC1lZGl0b3JcIixcbiAgICAgIGVkaXRvclpvbmU6IFwiY29kZXgtZWRpdG9yX19yZWRhY3RvclwiXG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBzZWxlY3RlZCBhbmNob3JcbiAgICoge0BsaW5rIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL3J1L2RvY3MvV2ViL0FQSS9TZWxlY3Rpb24vYW5jaG9yTm9kZX1cbiAgICpcbiAgICogQHJldHVybnMge05vZGV8bnVsbH1cbiAgICovXG4gIHN0YXRpYyBnZXQgYW5jaG9yTm9kZSgpIHtcbiAgICBjb25zdCBlID0gd2luZG93LmdldFNlbGVjdGlvbigpO1xuICAgIHJldHVybiBlID8gZS5hbmNob3JOb2RlIDogbnVsbDtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBzZWxlY3RlZCBhbmNob3IgZWxlbWVudFxuICAgKlxuICAgKiBAcmV0dXJucyB7RWxlbWVudHxudWxsfVxuICAgKi9cbiAgc3RhdGljIGdldCBhbmNob3JFbGVtZW50KCkge1xuICAgIGNvbnN0IGUgPSB3aW5kb3cuZ2V0U2VsZWN0aW9uKCk7XG4gICAgaWYgKCFlKVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgY29uc3QgdCA9IGUuYW5jaG9yTm9kZTtcbiAgICByZXR1cm4gdCA/IGMuaXNFbGVtZW50KHQpID8gdCA6IHQucGFyZW50RWxlbWVudCA6IG51bGw7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgc2VsZWN0aW9uIG9mZnNldCBhY2NvcmRpbmcgdG8gdGhlIGFuY2hvciBub2RlXG4gICAqIHtAbGluayBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9ydS9kb2NzL1dlYi9BUEkvU2VsZWN0aW9uL2FuY2hvck9mZnNldH1cbiAgICpcbiAgICogQHJldHVybnMge251bWJlcnxudWxsfVxuICAgKi9cbiAgc3RhdGljIGdldCBhbmNob3JPZmZzZXQoKSB7XG4gICAgY29uc3QgZSA9IHdpbmRvdy5nZXRTZWxlY3Rpb24oKTtcbiAgICByZXR1cm4gZSA/IGUuYW5jaG9yT2Zmc2V0IDogbnVsbDtcbiAgfVxuICAvKipcbiAgICogSXMgY3VycmVudCBzZWxlY3Rpb24gcmFuZ2UgY29sbGFwc2VkXG4gICAqXG4gICAqIEByZXR1cm5zIHtib29sZWFufG51bGx9XG4gICAqL1xuICBzdGF0aWMgZ2V0IGlzQ29sbGFwc2VkKCkge1xuICAgIGNvbnN0IGUgPSB3aW5kb3cuZ2V0U2VsZWN0aW9uKCk7XG4gICAgcmV0dXJuIGUgPyBlLmlzQ29sbGFwc2VkIDogbnVsbDtcbiAgfVxuICAvKipcbiAgICogQ2hlY2sgY3VycmVudCBzZWxlY3Rpb24gaWYgaXQgaXMgYXQgRWRpdG9yJ3Mgem9uZVxuICAgKlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICovXG4gIHN0YXRpYyBnZXQgaXNBdEVkaXRvcigpIHtcbiAgICByZXR1cm4gdGhpcy5pc1NlbGVjdGlvbkF0RWRpdG9yKGIuZ2V0KCkpO1xuICB9XG4gIC8qKlxuICAgKiBDaGVjayBpZiBwYXNzZWQgc2VsZWN0aW9uIGlzIGF0IEVkaXRvcidzIHpvbmVcbiAgICpcbiAgICogQHBhcmFtIHNlbGVjdGlvbiAtIFNlbGVjdGlvbiBvYmplY3QgdG8gY2hlY2tcbiAgICovXG4gIHN0YXRpYyBpc1NlbGVjdGlvbkF0RWRpdG9yKGUpIHtcbiAgICBpZiAoIWUpXG4gICAgICByZXR1cm4gITE7XG4gICAgbGV0IHQgPSBlLmFuY2hvck5vZGUgfHwgZS5mb2N1c05vZGU7XG4gICAgdCAmJiB0Lm5vZGVUeXBlID09PSBOb2RlLlRFWFRfTk9ERSAmJiAodCA9IHQucGFyZW50Tm9kZSk7XG4gICAgbGV0IG8gPSBudWxsO1xuICAgIHJldHVybiB0ICYmIHQgaW5zdGFuY2VvZiBFbGVtZW50ICYmIChvID0gdC5jbG9zZXN0KGAuJHtiLkNTUy5lZGl0b3Jab25lfWApKSwgbyA/IG8ubm9kZVR5cGUgPT09IE5vZGUuRUxFTUVOVF9OT0RFIDogITE7XG4gIH1cbiAgLyoqXG4gICAqIENoZWNrIGlmIHBhc3NlZCByYW5nZSBhdCBFZGl0b3Igem9uZVxuICAgKlxuICAgKiBAcGFyYW0gcmFuZ2UgLSByYW5nZSB0byBjaGVja1xuICAgKi9cbiAgc3RhdGljIGlzUmFuZ2VBdEVkaXRvcihlKSB7XG4gICAgaWYgKCFlKVxuICAgICAgcmV0dXJuO1xuICAgIGxldCB0ID0gZS5zdGFydENvbnRhaW5lcjtcbiAgICB0ICYmIHQubm9kZVR5cGUgPT09IE5vZGUuVEVYVF9OT0RFICYmICh0ID0gdC5wYXJlbnROb2RlKTtcbiAgICBsZXQgbyA9IG51bGw7XG4gICAgcmV0dXJuIHQgJiYgdCBpbnN0YW5jZW9mIEVsZW1lbnQgJiYgKG8gPSB0LmNsb3Nlc3QoYC4ke2IuQ1NTLmVkaXRvclpvbmV9YCkpLCBvID8gby5ub2RlVHlwZSA9PT0gTm9kZS5FTEVNRU5UX05PREUgOiAhMTtcbiAgfVxuICAvKipcbiAgICogTWV0aG9kcyByZXR1cm4gYm9vbGVhbiB0aGF0IHRydWUgaWYgc2VsZWN0aW9uIGV4aXN0cyBvbiB0aGUgcGFnZVxuICAgKi9cbiAgc3RhdGljIGdldCBpc1NlbGVjdGlvbkV4aXN0cygpIHtcbiAgICByZXR1cm4gISFiLmdldCgpLmFuY2hvck5vZGU7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybiBmaXJzdCByYW5nZVxuICAgKlxuICAgKiBAcmV0dXJucyB7UmFuZ2V8bnVsbH1cbiAgICovXG4gIHN0YXRpYyBnZXQgcmFuZ2UoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0UmFuZ2VGcm9tU2VsZWN0aW9uKHRoaXMuZ2V0KCkpO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIHJhbmdlIGZyb20gcGFzc2VkIFNlbGVjdGlvbiBvYmplY3RcbiAgICpcbiAgICogQHBhcmFtIHNlbGVjdGlvbiAtIFNlbGVjdGlvbiBvYmplY3QgdG8gZ2V0IFJhbmdlIGZyb21cbiAgICovXG4gIHN0YXRpYyBnZXRSYW5nZUZyb21TZWxlY3Rpb24oZSkge1xuICAgIHJldHVybiBlICYmIGUucmFuZ2VDb3VudCA/IGUuZ2V0UmFuZ2VBdCgwKSA6IG51bGw7XG4gIH1cbiAgLyoqXG4gICAqIENhbGN1bGF0ZXMgcG9zaXRpb24gYW5kIHNpemUgb2Ygc2VsZWN0ZWQgdGV4dFxuICAgKlxuICAgKiBAcmV0dXJucyB7RE9NUmVjdCB8IENsaWVudFJlY3R9XG4gICAqL1xuICBzdGF0aWMgZ2V0IHJlY3QoKSB7XG4gICAgbGV0IGUgPSBkb2N1bWVudC5zZWxlY3Rpb24sIHQsIG8gPSB7XG4gICAgICB4OiAwLFxuICAgICAgeTogMCxcbiAgICAgIHdpZHRoOiAwLFxuICAgICAgaGVpZ2h0OiAwXG4gICAgfTtcbiAgICBpZiAoZSAmJiBlLnR5cGUgIT09IFwiQ29udHJvbFwiKVxuICAgICAgcmV0dXJuIGUgPSBlLCB0ID0gZS5jcmVhdGVSYW5nZSgpLCBvLnggPSB0LmJvdW5kaW5nTGVmdCwgby55ID0gdC5ib3VuZGluZ1RvcCwgby53aWR0aCA9IHQuYm91bmRpbmdXaWR0aCwgby5oZWlnaHQgPSB0LmJvdW5kaW5nSGVpZ2h0LCBvO1xuICAgIGlmICghd2luZG93LmdldFNlbGVjdGlvbilcbiAgICAgIHJldHVybiBUKFwiTWV0aG9kIHdpbmRvdy5nZXRTZWxlY3Rpb24gaXMgbm90IHN1cHBvcnRlZFwiLCBcIndhcm5cIiksIG87XG4gICAgaWYgKGUgPSB3aW5kb3cuZ2V0U2VsZWN0aW9uKCksIGUucmFuZ2VDb3VudCA9PT0gbnVsbCB8fCBpc05hTihlLnJhbmdlQ291bnQpKVxuICAgICAgcmV0dXJuIFQoXCJNZXRob2QgU2VsZWN0aW9uVXRpbHMucmFuZ2VDb3VudCBpcyBub3Qgc3VwcG9ydGVkXCIsIFwid2FyblwiKSwgbztcbiAgICBpZiAoZS5yYW5nZUNvdW50ID09PSAwKVxuICAgICAgcmV0dXJuIG87XG4gICAgaWYgKHQgPSBlLmdldFJhbmdlQXQoMCkuY2xvbmVSYW5nZSgpLCB0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCAmJiAobyA9IHQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkpLCBvLnggPT09IDAgJiYgby55ID09PSAwKSB7XG4gICAgICBjb25zdCBpID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XG4gICAgICBpZiAoaS5nZXRCb3VuZGluZ0NsaWVudFJlY3QpIHtcbiAgICAgICAgaS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShcIuKAi1wiKSksIHQuaW5zZXJ0Tm9kZShpKSwgbyA9IGkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgIGNvbnN0IG4gPSBpLnBhcmVudE5vZGU7XG4gICAgICAgIG4ucmVtb3ZlQ2hpbGQoaSksIG4ubm9ybWFsaXplKCk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBvO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIHNlbGVjdGVkIHRleHQgYXMgU3RyaW5nXG4gICAqXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAqL1xuICBzdGF0aWMgZ2V0IHRleHQoKSB7XG4gICAgcmV0dXJuIHdpbmRvdy5nZXRTZWxlY3Rpb24gPyB3aW5kb3cuZ2V0U2VsZWN0aW9uKCkudG9TdHJpbmcoKSA6IFwiXCI7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgd2luZG93IFNlbGVjdGlvblV0aWxzXG4gICAqIHtAbGluayBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9ydS9kb2NzL1dlYi9BUEkvV2luZG93L2dldFNlbGVjdGlvbn1cbiAgICpcbiAgICogQHJldHVybnMge1NlbGVjdGlvbn1cbiAgICovXG4gIHN0YXRpYyBnZXQoKSB7XG4gICAgcmV0dXJuIHdpbmRvdy5nZXRTZWxlY3Rpb24oKTtcbiAgfVxuICAvKipcbiAgICogU2V0IGZvY3VzIHRvIGNvbnRlbnRlZGl0YWJsZSBvciBuYXRpdmUgaW5wdXQgZWxlbWVudFxuICAgKlxuICAgKiBAcGFyYW0gZWxlbWVudCAtIGVsZW1lbnQgd2hlcmUgdG8gc2V0IGZvY3VzXG4gICAqIEBwYXJhbSBvZmZzZXQgLSBvZmZzZXQgb2YgY3Vyc29yXG4gICAqL1xuICBzdGF0aWMgc2V0Q3Vyc29yKGUsIHQgPSAwKSB7XG4gICAgY29uc3QgbyA9IGRvY3VtZW50LmNyZWF0ZVJhbmdlKCksIGkgPSB3aW5kb3cuZ2V0U2VsZWN0aW9uKCk7XG4gICAgcmV0dXJuIGMuaXNOYXRpdmVJbnB1dChlKSA/IGMuY2FuU2V0Q2FyZXQoZSkgPyAoZS5mb2N1cygpLCBlLnNlbGVjdGlvblN0YXJ0ID0gZS5zZWxlY3Rpb25FbmQgPSB0LCBlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpKSA6IHZvaWQgMCA6IChvLnNldFN0YXJ0KGUsIHQpLCBvLnNldEVuZChlLCB0KSwgaS5yZW1vdmVBbGxSYW5nZXMoKSwgaS5hZGRSYW5nZShvKSwgby5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSk7XG4gIH1cbiAgLyoqXG4gICAqIENoZWNrIGlmIGN1cnJlbnQgcmFuZ2UgZXhpc3RzIGFuZCBiZWxvbmdzIHRvIGNvbnRhaW5lclxuICAgKlxuICAgKiBAcGFyYW0gY29udGFpbmVyIC0gd2hlcmUgcmFuZ2Ugc2hvdWxkIGJlXG4gICAqL1xuICBzdGF0aWMgaXNSYW5nZUluc2lkZUNvbnRhaW5lcihlKSB7XG4gICAgY29uc3QgdCA9IGIucmFuZ2U7XG4gICAgcmV0dXJuIHQgPT09IG51bGwgPyAhMSA6IGUuY29udGFpbnModC5zdGFydENvbnRhaW5lcik7XG4gIH1cbiAgLyoqXG4gICAqIEFkZHMgZmFrZSBjdXJzb3IgdG8gdGhlIGN1cnJlbnQgcmFuZ2VcbiAgICovXG4gIHN0YXRpYyBhZGRGYWtlQ3Vyc29yKCkge1xuICAgIGNvbnN0IGUgPSBiLnJhbmdlO1xuICAgIGlmIChlID09PSBudWxsKVxuICAgICAgcmV0dXJuO1xuICAgIGNvbnN0IHQgPSBjLm1ha2UoXCJzcGFuXCIsIFwiY29kZXgtZWRpdG9yX19mYWtlLWN1cnNvclwiKTtcbiAgICB0LmRhdGFzZXQubXV0YXRpb25GcmVlID0gXCJ0cnVlXCIsIGUuY29sbGFwc2UoKSwgZS5pbnNlcnROb2RlKHQpO1xuICB9XG4gIC8qKlxuICAgKiBDaGVjayBpZiBwYXNzZWQgZWxlbWVudCBjb250YWlucyBhIGZha2UgY3Vyc29yXG4gICAqXG4gICAqIEBwYXJhbSBlbCAtIHdoZXJlIHRvIGNoZWNrXG4gICAqL1xuICBzdGF0aWMgaXNGYWtlQ3Vyc29ySW5zaWRlQ29udGFpbmVyKGUpIHtcbiAgICByZXR1cm4gYy5maW5kKGUsIFwiLmNvZGV4LWVkaXRvcl9fZmFrZS1jdXJzb3JcIikgIT09IG51bGw7XG4gIH1cbiAgLyoqXG4gICAqIFJlbW92ZXMgZmFrZSBjdXJzb3IgZnJvbSBhIGNvbnRhaW5lclxuICAgKlxuICAgKiBAcGFyYW0gY29udGFpbmVyIC0gY29udGFpbmVyIHRvIGxvb2sgZm9yXG4gICAqL1xuICBzdGF0aWMgcmVtb3ZlRmFrZUN1cnNvcihlID0gZG9jdW1lbnQuYm9keSkge1xuICAgIGNvbnN0IHQgPSBjLmZpbmQoZSwgXCIuY29kZXgtZWRpdG9yX19mYWtlLWN1cnNvclwiKTtcbiAgICB0ICYmIHQucmVtb3ZlKCk7XG4gIH1cbiAgLyoqXG4gICAqIFJlbW92ZXMgZmFrZSBiYWNrZ3JvdW5kXG4gICAqL1xuICByZW1vdmVGYWtlQmFja2dyb3VuZCgpIHtcbiAgICB0aGlzLmlzRmFrZUJhY2tncm91bmRFbmFibGVkICYmICh0aGlzLmlzRmFrZUJhY2tncm91bmRFbmFibGVkID0gITEsIGRvY3VtZW50LmV4ZWNDb21tYW5kKHRoaXMuY29tbWFuZFJlbW92ZUZvcm1hdCkpO1xuICB9XG4gIC8qKlxuICAgKiBTZXRzIGZha2UgYmFja2dyb3VuZFxuICAgKi9cbiAgc2V0RmFrZUJhY2tncm91bmQoKSB7XG4gICAgZG9jdW1lbnQuZXhlY0NvbW1hbmQodGhpcy5jb21tYW5kQmFja2dyb3VuZCwgITEsIFwiI2E4ZDZmZlwiKSwgdGhpcy5pc0Zha2VCYWNrZ3JvdW5kRW5hYmxlZCA9ICEwO1xuICB9XG4gIC8qKlxuICAgKiBTYXZlIFNlbGVjdGlvblV0aWxzJ3MgcmFuZ2VcbiAgICovXG4gIHNhdmUoKSB7XG4gICAgdGhpcy5zYXZlZFNlbGVjdGlvblJhbmdlID0gYi5yYW5nZTtcbiAgfVxuICAvKipcbiAgICogUmVzdG9yZSBzYXZlZCBTZWxlY3Rpb25VdGlscydzIHJhbmdlXG4gICAqL1xuICByZXN0b3JlKCkge1xuICAgIGlmICghdGhpcy5zYXZlZFNlbGVjdGlvblJhbmdlKVxuICAgICAgcmV0dXJuO1xuICAgIGNvbnN0IGUgPSB3aW5kb3cuZ2V0U2VsZWN0aW9uKCk7XG4gICAgZS5yZW1vdmVBbGxSYW5nZXMoKSwgZS5hZGRSYW5nZSh0aGlzLnNhdmVkU2VsZWN0aW9uUmFuZ2UpO1xuICB9XG4gIC8qKlxuICAgKiBDbGVhcnMgc2F2ZWQgc2VsZWN0aW9uXG4gICAqL1xuICBjbGVhclNhdmVkKCkge1xuICAgIHRoaXMuc2F2ZWRTZWxlY3Rpb25SYW5nZSA9IG51bGw7XG4gIH1cbiAgLyoqXG4gICAqIENvbGxhcHNlIGN1cnJlbnQgc2VsZWN0aW9uXG4gICAqL1xuICBjb2xsYXBzZVRvRW5kKCkge1xuICAgIGNvbnN0IGUgPSB3aW5kb3cuZ2V0U2VsZWN0aW9uKCksIHQgPSBkb2N1bWVudC5jcmVhdGVSYW5nZSgpO1xuICAgIHQuc2VsZWN0Tm9kZUNvbnRlbnRzKGUuZm9jdXNOb2RlKSwgdC5jb2xsYXBzZSghMSksIGUucmVtb3ZlQWxsUmFuZ2VzKCksIGUuYWRkUmFuZ2UodCk7XG4gIH1cbiAgLyoqXG4gICAqIExvb2tzIGFoZWFkIHRvIGZpbmQgcGFzc2VkIHRhZyBmcm9tIGN1cnJlbnQgc2VsZWN0aW9uXG4gICAqXG4gICAqIEBwYXJhbSAge3N0cmluZ30gdGFnTmFtZSAgICAgICAtIHRhZyB0byBmb3VuZFxuICAgKiBAcGFyYW0gIHtzdHJpbmd9IFtjbGFzc05hbWVdICAgLSB0YWcncyBjbGFzcyBuYW1lXG4gICAqIEBwYXJhbSAge251bWJlcn0gW3NlYXJjaERlcHRoXSAtIGNvdW50IG9mIHRhZ3MgdGhhdCBjYW4gYmUgaW5jbHVkZWQuIEZvciBiZXR0ZXIgcGVyZm9ybWFuY2UuXG4gICAqIEByZXR1cm5zIHtIVE1MRWxlbWVudHxudWxsfVxuICAgKi9cbiAgZmluZFBhcmVudFRhZyhlLCB0LCBvID0gMTApIHtcbiAgICBjb25zdCBpID0gd2luZG93LmdldFNlbGVjdGlvbigpO1xuICAgIGxldCBuID0gbnVsbDtcbiAgICByZXR1cm4gIWkgfHwgIWkuYW5jaG9yTm9kZSB8fCAhaS5mb2N1c05vZGUgPyBudWxsIDogKFtcbiAgICAgIC8qKiB0aGUgTm9kZSBpbiB3aGljaCB0aGUgc2VsZWN0aW9uIGJlZ2lucyAqL1xuICAgICAgaS5hbmNob3JOb2RlLFxuICAgICAgLyoqIHRoZSBOb2RlIGluIHdoaWNoIHRoZSBzZWxlY3Rpb24gZW5kcyAqL1xuICAgICAgaS5mb2N1c05vZGVcbiAgICBdLmZvckVhY2goKGEpID0+IHtcbiAgICAgIGxldCBsID0gbztcbiAgICAgIGZvciAoOyBsID4gMCAmJiBhLnBhcmVudE5vZGUgJiYgIShhLnRhZ05hbWUgPT09IGUgJiYgKG4gPSBhLCB0ICYmIGEuY2xhc3NMaXN0ICYmICFhLmNsYXNzTGlzdC5jb250YWlucyh0KSAmJiAobiA9IG51bGwpLCBuKSk7IClcbiAgICAgICAgYSA9IGEucGFyZW50Tm9kZSwgbC0tO1xuICAgIH0pLCBuKTtcbiAgfVxuICAvKipcbiAgICogRXhwYW5kcyBzZWxlY3Rpb24gcmFuZ2UgdG8gdGhlIHBhc3NlZCBwYXJlbnQgbm9kZVxuICAgKlxuICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtZW50IC0gZWxlbWVudCB3aGljaCBjb250ZW50cyBzaG91bGQgYmUgc2VsZWN0ZWRcbiAgICovXG4gIGV4cGFuZFRvVGFnKGUpIHtcbiAgICBjb25zdCB0ID0gd2luZG93LmdldFNlbGVjdGlvbigpO1xuICAgIHQucmVtb3ZlQWxsUmFuZ2VzKCk7XG4gICAgY29uc3QgbyA9IGRvY3VtZW50LmNyZWF0ZVJhbmdlKCk7XG4gICAgby5zZWxlY3ROb2RlQ29udGVudHMoZSksIHQuYWRkUmFuZ2Uobyk7XG4gIH1cbn1cbmZ1bmN0aW9uIFF0KHMsIGUpIHtcbiAgY29uc3QgeyB0eXBlOiB0LCB0YXJnZXQ6IG8sIGFkZGVkTm9kZXM6IGksIHJlbW92ZWROb2RlczogbiB9ID0gcztcbiAgaWYgKG8gPT09IGUpXG4gICAgcmV0dXJuICEwO1xuICBpZiAoW1wiY2hhcmFjdGVyRGF0YVwiLCBcImF0dHJpYnV0ZXNcIl0uaW5jbHVkZXModCkpIHtcbiAgICBjb25zdCBsID0gby5ub2RlVHlwZSA9PT0gTm9kZS5URVhUX05PREUgPyBvLnBhcmVudE5vZGUgOiBvO1xuICAgIHJldHVybiBlLmNvbnRhaW5zKGwpO1xuICB9XG4gIGNvbnN0IHIgPSBBcnJheS5mcm9tKGkpLnNvbWUoKGwpID0+IGUuY29udGFpbnMobCkpLCBhID0gQXJyYXkuZnJvbShuKS5zb21lKChsKSA9PiBlLmNvbnRhaW5zKGwpKTtcbiAgcmV0dXJuIHIgfHwgYTtcbn1cbmNvbnN0IEFlID0gXCJyZWRhY3RvciBkb20gY2hhbmdlZFwiLCBwdCA9IFwiYmxvY2sgY2hhbmdlZFwiLCBmdCA9IFwiZmFrZSBjdXJzb3IgaXMgYWJvdXQgdG8gYmUgdG9nZ2xlZFwiLCBndCA9IFwiZmFrZSBjdXJzb3IgaGF2ZSBiZWVuIHNldFwiO1xuZnVuY3Rpb24gb3QocywgZSkge1xuICByZXR1cm4gcy5tZXJnZWFibGUgJiYgcy5uYW1lID09PSBlLm5hbWU7XG59XG5mdW5jdGlvbiBlbyhzLCBlKSB7XG4gIGNvbnN0IHQgPSBlID09IG51bGwgPyB2b2lkIDAgOiBlLmV4cG9ydDtcbiAgcmV0dXJuIE0odCkgPyB0KHMpIDogRyh0KSA/IHNbdF0gOiAodCAhPT0gdm9pZCAwICYmIFQoXCJDb252ZXJzaW9uIMKrZXhwb3J0wrsgcHJvcGVydHkgbXVzdCBiZSBhIHN0cmluZyBvciBmdW5jdGlvbi4gU3RyaW5nIG1lYW5zIGtleSBvZiBzYXZlZCBkYXRhIG9iamVjdCB0byBleHBvcnQuIEZ1bmN0aW9uIHNob3VsZCBleHBvcnQgcHJvY2Vzc2VkIHN0cmluZyB0byBleHBvcnQuXCIpLCBcIlwiKTtcbn1cbmZ1bmN0aW9uIHRvKHMsIGUpIHtcbiAgY29uc3QgdCA9IGUgPT0gbnVsbCA/IHZvaWQgMCA6IGUuaW1wb3J0O1xuICByZXR1cm4gTSh0KSA/IHQocykgOiBHKHQpID8ge1xuICAgIFt0XTogc1xuICB9IDogKHQgIT09IHZvaWQgMCAmJiBUKFwiQ29udmVyc2lvbiDCq2ltcG9ydMK7IHByb3BlcnR5IG11c3QgYmUgYSBzdHJpbmcgb3IgZnVuY3Rpb24uIFN0cmluZyBtZWFucyBrZXkgb2YgdG9vbCBkYXRhIHRvIGltcG9ydC4gRnVuY3Rpb24gYWNjZXB0cyBhIGltcG9ydGVkIHN0cmluZyBhbmQgcmV0dXJuIGNvbXBvc2VkIHRvb2wgZGF0YS5cIiksIHt9KTtcbn1cbnZhciBYID0gLyogQF9fUFVSRV9fICovICgocykgPT4gKHMuQVBQRU5EX0NBTExCQUNLID0gXCJhcHBlbmRDYWxsYmFja1wiLCBzLlJFTkRFUkVEID0gXCJyZW5kZXJlZFwiLCBzLk1PVkVEID0gXCJtb3ZlZFwiLCBzLlVQREFURUQgPSBcInVwZGF0ZWRcIiwgcy5SRU1PVkVEID0gXCJyZW1vdmVkXCIsIHMuT05fUEFTVEUgPSBcIm9uUGFzdGVcIiwgcykpKFggfHwge30pO1xuY2xhc3MgUiBleHRlbmRzIEVlIHtcbiAgLyoqXG4gICAqIEBwYXJhbSBvcHRpb25zIC0gYmxvY2sgY29uc3RydWN0b3Igb3B0aW9uc1xuICAgKiBAcGFyYW0gW29wdGlvbnMuaWRdIC0gYmxvY2sncyBpZC4gV2lsbCBiZSBnZW5lcmF0ZWQgaWYgb21pdHRlZC5cbiAgICogQHBhcmFtIG9wdGlvbnMuZGF0YSAtIFRvb2wncyBpbml0aWFsIGRhdGFcbiAgICogQHBhcmFtIG9wdGlvbnMudG9vbCDigJQgYmxvY2sncyB0b29sXG4gICAqIEBwYXJhbSBvcHRpb25zLmFwaSAtIEVkaXRvciBBUEkgbW9kdWxlIGZvciBwYXNzIGl0IHRvIHRoZSBCbG9jayBUdW5lc1xuICAgKiBAcGFyYW0gb3B0aW9ucy5yZWFkT25seSAtIFJlYWQtT25seSBmbGFnXG4gICAqIEBwYXJhbSBbZXZlbnRCdXNdIC0gRWRpdG9yIGNvbW1vbiBldmVudCBidXMuIEFsbG93cyB0byBzdWJzY3JpYmUgb24gc29tZSBFZGl0b3IgZXZlbnRzLiBDb3VsZCBiZSBvbWl0dGVkIHdoZW4gXCJ2aXJ0dWFsXCIgQmxvY2sgaXMgY3JlYXRlZC4gU2VlIEJsb2Nrc0FQSUBjb21wb3NlQmxvY2tEYXRhLlxuICAgKi9cbiAgY29uc3RydWN0b3Ioe1xuICAgIGlkOiBlID0gWXQoKSxcbiAgICBkYXRhOiB0LFxuICAgIHRvb2w6IG8sXG4gICAgYXBpOiBpLFxuICAgIHJlYWRPbmx5OiBuLFxuICAgIHR1bmVzRGF0YTogclxuICB9LCBhKSB7XG4gICAgc3VwZXIoKSwgdGhpcy5jYWNoZWRJbnB1dHMgPSBbXSwgdGhpcy50b29sUmVuZGVyZWRFbGVtZW50ID0gbnVsbCwgdGhpcy50dW5lc0luc3RhbmNlcyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCksIHRoaXMuZGVmYXVsdFR1bmVzSW5zdGFuY2VzID0gLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKSwgdGhpcy51bmF2YWlsYWJsZVR1bmVzRGF0YSA9IHt9LCB0aGlzLmlucHV0SW5kZXggPSAwLCB0aGlzLmVkaXRvckV2ZW50QnVzID0gbnVsbCwgdGhpcy5oYW5kbGVGb2N1cyA9ICgpID0+IHtcbiAgICAgIHRoaXMuZHJvcElucHV0c0NhY2hlKCksIHRoaXMudXBkYXRlQ3VycmVudElucHV0KCk7XG4gICAgfSwgdGhpcy5kaWRNdXRhdGVkID0gKGwgPSB2b2lkIDApID0+IHtcbiAgICAgIGNvbnN0IGQgPSBsID09PSB2b2lkIDAsIHUgPSBsIGluc3RhbmNlb2YgSW5wdXRFdmVudDtcbiAgICAgICFkICYmICF1ICYmIHRoaXMuZGV0ZWN0VG9vbFJvb3RDaGFuZ2UobCk7XG4gICAgICBsZXQgaDtcbiAgICAgIGQgfHwgdSA/IGggPSAhMCA6IGggPSAhKGwubGVuZ3RoID4gMCAmJiBsLmV2ZXJ5KCh4KSA9PiB7XG4gICAgICAgIGNvbnN0IHsgYWRkZWROb2RlczogcCwgcmVtb3ZlZE5vZGVzOiBtLCB0YXJnZXQ6IEwgfSA9IHg7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgLi4uQXJyYXkuZnJvbShwKSxcbiAgICAgICAgICAuLi5BcnJheS5mcm9tKG0pLFxuICAgICAgICAgIExcbiAgICAgICAgXS5zb21lKChTKSA9PiAoYy5pc0VsZW1lbnQoUykgfHwgKFMgPSBTLnBhcmVudEVsZW1lbnQpLCBTICYmIFMuY2xvc2VzdCgnW2RhdGEtbXV0YXRpb24tZnJlZT1cInRydWVcIl0nKSAhPT0gbnVsbCkpO1xuICAgICAgfSkpLCBoICYmICh0aGlzLmRyb3BJbnB1dHNDYWNoZSgpLCB0aGlzLnVwZGF0ZUN1cnJlbnRJbnB1dCgpLCB0aGlzLmNhbGwoXG4gICAgICAgIFwidXBkYXRlZFwiXG4gICAgICAgIC8qIFVQREFURUQgKi9cbiAgICAgICksIHRoaXMuZW1pdChcImRpZE11dGF0ZWRcIiwgdGhpcykpO1xuICAgIH0sIHRoaXMubmFtZSA9IG8ubmFtZSwgdGhpcy5pZCA9IGUsIHRoaXMuc2V0dGluZ3MgPSBvLnNldHRpbmdzLCB0aGlzLmNvbmZpZyA9IG8uc2V0dGluZ3MuY29uZmlnIHx8IHt9LCB0aGlzLmFwaSA9IGksIHRoaXMuZWRpdG9yRXZlbnRCdXMgPSBhIHx8IG51bGwsIHRoaXMuYmxvY2tBUEkgPSBuZXcgZWUodGhpcyksIHRoaXMudG9vbCA9IG8sIHRoaXMudG9vbEluc3RhbmNlID0gby5jcmVhdGUodCwgdGhpcy5ibG9ja0FQSSwgbiksIHRoaXMudHVuZXMgPSBvLnR1bmVzLCB0aGlzLmNvbXBvc2VUdW5lcyhyKSwgdGhpcy5ob2xkZXIgPSB0aGlzLmNvbXBvc2UoKSwgd2luZG93LnJlcXVlc3RJZGxlQ2FsbGJhY2soKCkgPT4ge1xuICAgICAgdGhpcy53YXRjaEJsb2NrTXV0YXRpb25zKCksIHRoaXMuYWRkSW5wdXRFdmVudHMoKTtcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogQ1NTIGNsYXNzZXMgZm9yIHRoZSBCbG9ja1xuICAgKlxuICAgKiBAcmV0dXJucyB7e3dyYXBwZXI6IHN0cmluZywgY29udGVudDogc3RyaW5nfX1cbiAgICovXG4gIHN0YXRpYyBnZXQgQ1NTKCkge1xuICAgIHJldHVybiB7XG4gICAgICB3cmFwcGVyOiBcImNlLWJsb2NrXCIsXG4gICAgICB3cmFwcGVyU3RyZXRjaGVkOiBcImNlLWJsb2NrLS1zdHJldGNoZWRcIixcbiAgICAgIGNvbnRlbnQ6IFwiY2UtYmxvY2tfX2NvbnRlbnRcIixcbiAgICAgIHNlbGVjdGVkOiBcImNlLWJsb2NrLS1zZWxlY3RlZFwiLFxuICAgICAgZHJvcFRhcmdldDogXCJjZS1ibG9jay0tZHJvcC10YXJnZXRcIlxuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIEZpbmQgYW5kIHJldHVybiBhbGwgZWRpdGFibGUgZWxlbWVudHMgKGNvbnRlbnRlZGl0YWJsZSBhbmQgbmF0aXZlIGlucHV0cykgaW4gdGhlIFRvb2wgSFRNTFxuICAgKlxuICAgKiBAcmV0dXJucyB7SFRNTEVsZW1lbnRbXX1cbiAgICovXG4gIGdldCBpbnB1dHMoKSB7XG4gICAgaWYgKHRoaXMuY2FjaGVkSW5wdXRzLmxlbmd0aCAhPT0gMClcbiAgICAgIHJldHVybiB0aGlzLmNhY2hlZElucHV0cztcbiAgICBjb25zdCBlID0gYy5maW5kQWxsSW5wdXRzKHRoaXMuaG9sZGVyKTtcbiAgICByZXR1cm4gdGhpcy5pbnB1dEluZGV4ID4gZS5sZW5ndGggLSAxICYmICh0aGlzLmlucHV0SW5kZXggPSBlLmxlbmd0aCAtIDEpLCB0aGlzLmNhY2hlZElucHV0cyA9IGUsIGU7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybiBjdXJyZW50IFRvb2xgcyBpbnB1dFxuICAgKlxuICAgKiBAcmV0dXJucyB7SFRNTEVsZW1lbnR9XG4gICAqL1xuICBnZXQgY3VycmVudElucHV0KCkge1xuICAgIHJldHVybiB0aGlzLmlucHV0c1t0aGlzLmlucHV0SW5kZXhdO1xuICB9XG4gIC8qKlxuICAgKiBTZXQgaW5wdXQgaW5kZXggdG8gdGhlIHBhc3NlZCBlbGVtZW50XG4gICAqXG4gICAqIEBwYXJhbSB7SFRNTEVsZW1lbnQgfCBOb2RlfSBlbGVtZW50IC0gSFRNTCBFbGVtZW50IHRvIHNldCBhcyBjdXJyZW50IGlucHV0XG4gICAqL1xuICBzZXQgY3VycmVudElucHV0KGUpIHtcbiAgICBjb25zdCB0ID0gdGhpcy5pbnB1dHMuZmluZEluZGV4KChvKSA9PiBvID09PSBlIHx8IG8uY29udGFpbnMoZSkpO1xuICAgIHQgIT09IC0xICYmICh0aGlzLmlucHV0SW5kZXggPSB0KTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJuIGZpcnN0IFRvb2xgcyBpbnB1dFxuICAgKlxuICAgKiBAcmV0dXJucyB7SFRNTEVsZW1lbnR9XG4gICAqL1xuICBnZXQgZmlyc3RJbnB1dCgpIHtcbiAgICByZXR1cm4gdGhpcy5pbnB1dHNbMF07XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybiBmaXJzdCBUb29sYHMgaW5wdXRcbiAgICpcbiAgICogQHJldHVybnMge0hUTUxFbGVtZW50fVxuICAgKi9cbiAgZ2V0IGxhc3RJbnB1dCgpIHtcbiAgICBjb25zdCBlID0gdGhpcy5pbnB1dHM7XG4gICAgcmV0dXJuIGVbZS5sZW5ndGggLSAxXTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJuIG5leHQgVG9vbGBzIGlucHV0IG9yIHVuZGVmaW5lZCBpZiBpdCBkb2Vzbid0IGV4aXN0XG4gICAqXG4gICAqIEByZXR1cm5zIHtIVE1MRWxlbWVudH1cbiAgICovXG4gIGdldCBuZXh0SW5wdXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuaW5wdXRzW3RoaXMuaW5wdXRJbmRleCArIDFdO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm4gcHJldmlvdXMgVG9vbGBzIGlucHV0IG9yIHVuZGVmaW5lZCBpZiBpdCBkb2Vzbid0IGV4aXN0XG4gICAqXG4gICAqIEByZXR1cm5zIHtIVE1MRWxlbWVudH1cbiAgICovXG4gIGdldCBwcmV2aW91c0lucHV0KCkge1xuICAgIHJldHVybiB0aGlzLmlucHV0c1t0aGlzLmlucHV0SW5kZXggLSAxXTtcbiAgfVxuICAvKipcbiAgICogR2V0IEJsb2NrJ3MgSlNPTiBkYXRhXG4gICAqXG4gICAqIEByZXR1cm5zIHtvYmplY3R9XG4gICAqL1xuICBnZXQgZGF0YSgpIHtcbiAgICByZXR1cm4gdGhpcy5zYXZlKCkudGhlbigoZSkgPT4gZSAmJiAhVyhlLmRhdGEpID8gZS5kYXRhIDoge30pO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIHRvb2wncyBzYW5pdGl6ZXIgY29uZmlnXG4gICAqXG4gICAqIEByZXR1cm5zIHtvYmplY3R9XG4gICAqL1xuICBnZXQgc2FuaXRpemUoKSB7XG4gICAgcmV0dXJuIHRoaXMudG9vbC5zYW5pdGl6ZUNvbmZpZztcbiAgfVxuICAvKipcbiAgICogaXMgYmxvY2sgbWVyZ2VhYmxlXG4gICAqIFdlIHBsdWdpbiBoYXZlIG1lcmdlIGZ1bmN0aW9uIHRoZW4gd2UgY2FsbCBpdCBtZXJnZWFibGVcbiAgICpcbiAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAqL1xuICBnZXQgbWVyZ2VhYmxlKCkge1xuICAgIHJldHVybiBNKHRoaXMudG9vbEluc3RhbmNlLm1lcmdlKTtcbiAgfVxuICAvKipcbiAgICogSWYgQmxvY2sgY29udGFpbnMgaW5wdXRzLCBpdCBpcyBmb2N1c2FibGVcbiAgICovXG4gIGdldCBmb2N1c2FibGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuaW5wdXRzLmxlbmd0aCAhPT0gMDtcbiAgfVxuICAvKipcbiAgICogQ2hlY2sgYmxvY2sgZm9yIGVtcHRpbmVzc1xuICAgKlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICovXG4gIGdldCBpc0VtcHR5KCkge1xuICAgIGNvbnN0IGUgPSBjLmlzRW1wdHkodGhpcy5wbHVnaW5zQ29udGVudCwgXCIvXCIpLCB0ID0gIXRoaXMuaGFzTWVkaWE7XG4gICAgcmV0dXJuIGUgJiYgdDtcbiAgfVxuICAvKipcbiAgICogQ2hlY2sgaWYgYmxvY2sgaGFzIGEgbWVkaWEgY29udGVudCBzdWNoIGFzIGltYWdlcywgaWZyYW1lIGFuZCBvdGhlclxuICAgKlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICovXG4gIGdldCBoYXNNZWRpYSgpIHtcbiAgICBjb25zdCBlID0gW1xuICAgICAgXCJpbWdcIixcbiAgICAgIFwiaWZyYW1lXCIsXG4gICAgICBcInZpZGVvXCIsXG4gICAgICBcImF1ZGlvXCIsXG4gICAgICBcInNvdXJjZVwiLFxuICAgICAgXCJpbnB1dFwiLFxuICAgICAgXCJ0ZXh0YXJlYVwiLFxuICAgICAgXCJ0d2l0dGVyd2lkZ2V0XCJcbiAgICBdO1xuICAgIHJldHVybiAhIXRoaXMuaG9sZGVyLnF1ZXJ5U2VsZWN0b3IoZS5qb2luKFwiLFwiKSk7XG4gIH1cbiAgLyoqXG4gICAqIFNldCBzZWxlY3RlZCBzdGF0ZVxuICAgKiBXZSBkb24ndCBuZWVkIHRvIG1hcmsgQmxvY2sgYXMgU2VsZWN0ZWQgd2hlbiBpdCBpcyBlbXB0eVxuICAgKlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHN0YXRlIC0gJ3RydWUnIHRvIHNlbGVjdCwgJ2ZhbHNlJyB0byByZW1vdmUgc2VsZWN0aW9uXG4gICAqL1xuICBzZXQgc2VsZWN0ZWQoZSkge1xuICAgIHZhciBpLCBuO1xuICAgIHRoaXMuaG9sZGVyLmNsYXNzTGlzdC50b2dnbGUoUi5DU1Muc2VsZWN0ZWQsIGUpO1xuICAgIGNvbnN0IHQgPSBlID09PSAhMCAmJiBiLmlzUmFuZ2VJbnNpZGVDb250YWluZXIodGhpcy5ob2xkZXIpLCBvID0gZSA9PT0gITEgJiYgYi5pc0Zha2VDdXJzb3JJbnNpZGVDb250YWluZXIodGhpcy5ob2xkZXIpO1xuICAgICh0IHx8IG8pICYmICgoaSA9IHRoaXMuZWRpdG9yRXZlbnRCdXMpID09IG51bGwgfHwgaS5lbWl0KGZ0LCB7IHN0YXRlOiBlIH0pLCB0ID8gYi5hZGRGYWtlQ3Vyc29yKCkgOiBiLnJlbW92ZUZha2VDdXJzb3IodGhpcy5ob2xkZXIpLCAobiA9IHRoaXMuZWRpdG9yRXZlbnRCdXMpID09IG51bGwgfHwgbi5lbWl0KGd0LCB7IHN0YXRlOiBlIH0pKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBUcnVlIGlmIGl0IGlzIFNlbGVjdGVkXG4gICAqXG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKi9cbiAgZ2V0IHNlbGVjdGVkKCkge1xuICAgIHJldHVybiB0aGlzLmhvbGRlci5jbGFzc0xpc3QuY29udGFpbnMoUi5DU1Muc2VsZWN0ZWQpO1xuICB9XG4gIC8qKlxuICAgKiBTZXQgc3RyZXRjaGVkIHN0YXRlXG4gICAqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gc3RhdGUgLSAndHJ1ZScgdG8gZW5hYmxlLCAnZmFsc2UnIHRvIGRpc2FibGUgc3RyZXRjaGVkIHN0YXRlXG4gICAqL1xuICBzZXQgc3RyZXRjaGVkKGUpIHtcbiAgICB0aGlzLmhvbGRlci5jbGFzc0xpc3QudG9nZ2xlKFIuQ1NTLndyYXBwZXJTdHJldGNoZWQsIGUpO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm4gQmxvY2sncyBzdHJldGNoZWQgc3RhdGVcbiAgICpcbiAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAqL1xuICBnZXQgc3RyZXRjaGVkKCkge1xuICAgIHJldHVybiB0aGlzLmhvbGRlci5jbGFzc0xpc3QuY29udGFpbnMoUi5DU1Mud3JhcHBlclN0cmV0Y2hlZCk7XG4gIH1cbiAgLyoqXG4gICAqIFRvZ2dsZSBkcm9wIHRhcmdldCBzdGF0ZVxuICAgKlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHN0YXRlIC0gJ3RydWUnIGlmIGJsb2NrIGlzIGRyb3AgdGFyZ2V0LCBmYWxzZSBvdGhlcndpc2VcbiAgICovXG4gIHNldCBkcm9wVGFyZ2V0KGUpIHtcbiAgICB0aGlzLmhvbGRlci5jbGFzc0xpc3QudG9nZ2xlKFIuQ1NTLmRyb3BUYXJnZXQsIGUpO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIFBsdWdpbnMgY29udGVudFxuICAgKlxuICAgKiBAcmV0dXJucyB7SFRNTEVsZW1lbnR9XG4gICAqL1xuICBnZXQgcGx1Z2luc0NvbnRlbnQoKSB7XG4gICAgcmV0dXJuIHRoaXMudG9vbFJlbmRlcmVkRWxlbWVudDtcbiAgfVxuICAvKipcbiAgICogQ2FsbHMgVG9vbCdzIG1ldGhvZFxuICAgKlxuICAgKiBNZXRob2QgY2hlY2tzIHRvb2wgcHJvcGVydHkge01ldGhvZE5hbWV9LiBGaXJlcyBtZXRob2Qgd2l0aCBwYXNzZXMgcGFyYW1zIElmIGl0IGlzIGluc3RhbmNlIG9mIEZ1bmN0aW9uXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBtZXRob2ROYW1lIC0gbWV0aG9kIHRvIGNhbGxcbiAgICogQHBhcmFtIHtvYmplY3R9IHBhcmFtcyAtIG1ldGhvZCBhcmd1bWVudFxuICAgKi9cbiAgY2FsbChlLCB0KSB7XG4gICAgaWYgKE0odGhpcy50b29sSW5zdGFuY2VbZV0pKSB7XG4gICAgICBlID09PSBcImFwcGVuZENhbGxiYWNrXCIgJiYgVChcbiAgICAgICAgXCJgYXBwZW5kQ2FsbGJhY2tgIGhvb2sgaXMgZGVwcmVjYXRlZCBhbmQgd2lsbCBiZSByZW1vdmVkIGluIHRoZSBuZXh0IG1ham9yIHJlbGVhc2UuIFVzZSBgcmVuZGVyZWRgIGhvb2sgaW5zdGVhZFwiLFxuICAgICAgICBcIndhcm5cIlxuICAgICAgKTtcbiAgICAgIHRyeSB7XG4gICAgICAgIHRoaXMudG9vbEluc3RhbmNlW2VdLmNhbGwodGhpcy50b29sSW5zdGFuY2UsIHQpO1xuICAgICAgfSBjYXRjaCAobykge1xuICAgICAgICBUKGBFcnJvciBkdXJpbmcgJyR7ZX0nIGNhbGw6ICR7by5tZXNzYWdlfWAsIFwiZXJyb3JcIik7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBDYWxsIHBsdWdpbnMgbWVyZ2UgbWV0aG9kXG4gICAqXG4gICAqIEBwYXJhbSB7QmxvY2tUb29sRGF0YX0gZGF0YSAtIGRhdGEgdG8gbWVyZ2VcbiAgICovXG4gIGFzeW5jIG1lcmdlV2l0aChlKSB7XG4gICAgYXdhaXQgdGhpcy50b29sSW5zdGFuY2UubWVyZ2UoZSk7XG4gIH1cbiAgLyoqXG4gICAqIEV4dHJhY3RzIGRhdGEgZnJvbSBCbG9ja1xuICAgKiBHcm91cHMgVG9vbCdzIHNhdmUgcHJvY2Vzc2luZyB0aW1lXG4gICAqXG4gICAqIEByZXR1cm5zIHtvYmplY3R9XG4gICAqL1xuICBhc3luYyBzYXZlKCkge1xuICAgIGNvbnN0IGUgPSBhd2FpdCB0aGlzLnRvb2xJbnN0YW5jZS5zYXZlKHRoaXMucGx1Z2luc0NvbnRlbnQpLCB0ID0gdGhpcy51bmF2YWlsYWJsZVR1bmVzRGF0YTtcbiAgICBbXG4gICAgICAuLi50aGlzLnR1bmVzSW5zdGFuY2VzLmVudHJpZXMoKSxcbiAgICAgIC4uLnRoaXMuZGVmYXVsdFR1bmVzSW5zdGFuY2VzLmVudHJpZXMoKVxuICAgIF0uZm9yRWFjaCgoW24sIHJdKSA9PiB7XG4gICAgICBpZiAoTShyLnNhdmUpKVxuICAgICAgICB0cnkge1xuICAgICAgICAgIHRbbl0gPSByLnNhdmUoKTtcbiAgICAgICAgfSBjYXRjaCAoYSkge1xuICAgICAgICAgIFQoYFR1bmUgJHtyLmNvbnN0cnVjdG9yLm5hbWV9IHNhdmUgbWV0aG9kIHRocm93cyBhbiBFcnJvciAlb2AsIFwid2FyblwiLCBhKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIGNvbnN0IG8gPSB3aW5kb3cucGVyZm9ybWFuY2Uubm93KCk7XG4gICAgbGV0IGk7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShlKS50aGVuKChuKSA9PiAoaSA9IHdpbmRvdy5wZXJmb3JtYW5jZS5ub3coKSwge1xuICAgICAgaWQ6IHRoaXMuaWQsXG4gICAgICB0b29sOiB0aGlzLm5hbWUsXG4gICAgICBkYXRhOiBuLFxuICAgICAgdHVuZXM6IHQsXG4gICAgICB0aW1lOiBpIC0gb1xuICAgIH0pKS5jYXRjaCgobikgPT4ge1xuICAgICAgVChgU2F2aW5nIHByb2Nlc3MgZm9yICR7dGhpcy5uYW1lfSB0b29sIGZhaWxlZCBkdWUgdG8gdGhlICR7bn1gLCBcImxvZ1wiLCBcInJlZFwiKTtcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogVXNlcyBUb29sJ3MgdmFsaWRhdGlvbiBtZXRob2QgdG8gY2hlY2sgdGhlIGNvcnJlY3RuZXNzIG9mIG91dHB1dCBkYXRhXG4gICAqIFRvb2wncyB2YWxpZGF0aW9uIG1ldGhvZCBpcyBvcHRpb25hbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb24gTWV0aG9kIHJldHVybnMgdHJ1ZXxmYWxzZSB3aGV0aGVyIGRhdGEgcGFzc2VkIHRoZSB2YWxpZGF0aW9uIG9yIG5vdFxuICAgKiBAcGFyYW0ge0Jsb2NrVG9vbERhdGF9IGRhdGEgLSBkYXRhIHRvIHZhbGlkYXRlXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGJvb2xlYW4+fSB2YWxpZFxuICAgKi9cbiAgYXN5bmMgdmFsaWRhdGUoZSkge1xuICAgIGxldCB0ID0gITA7XG4gICAgcmV0dXJuIHRoaXMudG9vbEluc3RhbmNlLnZhbGlkYXRlIGluc3RhbmNlb2YgRnVuY3Rpb24gJiYgKHQgPSBhd2FpdCB0aGlzLnRvb2xJbnN0YW5jZS52YWxpZGF0ZShlKSksIHQ7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgZGF0YSB0byByZW5kZXIgaW4gdHVuZXMgbWVudS5cbiAgICogU3BsaXRzIGJsb2NrIHR1bmVzIHNldHRpbmdzIGludG8gMiBncm91cHM6IHBvcG92ZXIgaXRlbXMgYW5kIGN1c3RvbSBodG1sLlxuICAgKi9cbiAgZ2V0VHVuZXMoKSB7XG4gICAgY29uc3QgZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksIHQgPSBbXSwgbyA9IHR5cGVvZiB0aGlzLnRvb2xJbnN0YW5jZS5yZW5kZXJTZXR0aW5ncyA9PSBcImZ1bmN0aW9uXCIgPyB0aGlzLnRvb2xJbnN0YW5jZS5yZW5kZXJTZXR0aW5ncygpIDogW10sIGkgPSBbXG4gICAgICAuLi50aGlzLnR1bmVzSW5zdGFuY2VzLnZhbHVlcygpLFxuICAgICAgLi4udGhpcy5kZWZhdWx0VHVuZXNJbnN0YW5jZXMudmFsdWVzKClcbiAgICBdLm1hcCgobikgPT4gbi5yZW5kZXIoKSk7XG4gICAgcmV0dXJuIFtvLCBpXS5mbGF0KCkuZm9yRWFjaCgobikgPT4ge1xuICAgICAgYy5pc0VsZW1lbnQobikgPyBlLmFwcGVuZENoaWxkKG4pIDogQXJyYXkuaXNBcnJheShuKSA/IHQucHVzaCguLi5uKSA6IHQucHVzaChuKTtcbiAgICB9KSwgW3QsIGVdO1xuICB9XG4gIC8qKlxuICAgKiBVcGRhdGUgY3VycmVudCBpbnB1dCBpbmRleCB3aXRoIHNlbGVjdGlvbiBhbmNob3Igbm9kZVxuICAgKi9cbiAgdXBkYXRlQ3VycmVudElucHV0KCkge1xuICAgIHRoaXMuY3VycmVudElucHV0ID0gYy5pc05hdGl2ZUlucHV0KGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpIHx8ICFiLmFuY2hvck5vZGUgPyBkb2N1bWVudC5hY3RpdmVFbGVtZW50IDogYi5hbmNob3JOb2RlO1xuICB9XG4gIC8qKlxuICAgKiBBbGxvd3MgdG8gc2F5IEVkaXRvciB0aGF0IEJsb2NrIHdhcyBjaGFuZ2VkLiBVc2VkIHRvIG1hbnVhbGx5IHRyaWdnZXIgRWRpdG9yJ3MgJ29uQ2hhbmdlJyBjYWxsYmFja1xuICAgKiBDYW4gYmUgdXNlZnVsIGZvciBibG9jayBjaGFuZ2VzIGludmlzaWJsZSBmb3IgZWRpdG9yIGNvcmUuXG4gICAqL1xuICBkaXNwYXRjaENoYW5nZSgpIHtcbiAgICB0aGlzLmRpZE11dGF0ZWQoKTtcbiAgfVxuICAvKipcbiAgICogQ2FsbCBUb29sIGluc3RhbmNlIGRlc3Ryb3kgbWV0aG9kXG4gICAqL1xuICBkZXN0cm95KCkge1xuICAgIHRoaXMudW53YXRjaEJsb2NrTXV0YXRpb25zKCksIHRoaXMucmVtb3ZlSW5wdXRFdmVudHMoKSwgc3VwZXIuZGVzdHJveSgpLCBNKHRoaXMudG9vbEluc3RhbmNlLmRlc3Ryb3kpICYmIHRoaXMudG9vbEluc3RhbmNlLmRlc3Ryb3koKTtcbiAgfVxuICAvKipcbiAgICogVG9vbCBjb3VsZCBzcGVjaWZ5IHNldmVyYWwgZW50cmllcyB0byBiZSBkaXNwbGF5ZWQgYXQgdGhlIFRvb2xib3ggKGZvciBleGFtcGxlLCBcIkhlYWRpbmcgMVwiLCBcIkhlYWRpbmcgMlwiLCBcIkhlYWRpbmcgM1wiKVxuICAgKiBUaGlzIG1ldGhvZCByZXR1cm5zIHRoZSBlbnRyeSB0aGF0IGlzIHJlbGF0ZWQgdG8gdGhlIEJsb2NrIChkZXBlbmRlZCBvbiB0aGUgQmxvY2sgZGF0YSlcbiAgICovXG4gIGFzeW5jIGdldEFjdGl2ZVRvb2xib3hFbnRyeSgpIHtcbiAgICBjb25zdCBlID0gdGhpcy50b29sLnRvb2xib3g7XG4gICAgaWYgKGUubGVuZ3RoID09PSAxKVxuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzLnRvb2wudG9vbGJveFswXSk7XG4gICAgY29uc3QgdCA9IGF3YWl0IHRoaXMuZGF0YTtcbiAgICByZXR1cm4gZS5maW5kKChpKSA9PiBPYmplY3QuZW50cmllcyhpLmRhdGEpLnNvbWUoKFtuLCByXSkgPT4gdFtuXSAmJiBWdCh0W25dLCByKSkpO1xuICB9XG4gIC8qKlxuICAgKiBFeHBvcnRzIEJsb2NrIGRhdGEgYXMgc3RyaW5nIHVzaW5nIGNvbnZlcnNpb24gY29uZmlnXG4gICAqL1xuICBhc3luYyBleHBvcnREYXRhQXNTdHJpbmcoKSB7XG4gICAgY29uc3QgZSA9IGF3YWl0IHRoaXMuZGF0YTtcbiAgICByZXR1cm4gZW8oZSwgdGhpcy50b29sLmNvbnZlcnNpb25Db25maWcpO1xuICB9XG4gIC8qKlxuICAgKiBNYWtlIGRlZmF1bHQgQmxvY2sgd3JhcHBlcnMgYW5kIHB1dCBUb29sYHMgY29udGVudCB0aGVyZVxuICAgKlxuICAgKiBAcmV0dXJucyB7SFRNTERpdkVsZW1lbnR9XG4gICAqL1xuICBjb21wb3NlKCkge1xuICAgIGNvbnN0IGUgPSBjLm1ha2UoXCJkaXZcIiwgUi5DU1Mud3JhcHBlciksIHQgPSBjLm1ha2UoXCJkaXZcIiwgUi5DU1MuY29udGVudCksIG8gPSB0aGlzLnRvb2xJbnN0YW5jZS5yZW5kZXIoKTtcbiAgICBlLmRhdGFzZXQuaWQgPSB0aGlzLmlkLCB0aGlzLnRvb2xSZW5kZXJlZEVsZW1lbnQgPSBvLCB0LmFwcGVuZENoaWxkKHRoaXMudG9vbFJlbmRlcmVkRWxlbWVudCk7XG4gICAgbGV0IGkgPSB0O1xuICAgIHJldHVybiBbLi4udGhpcy50dW5lc0luc3RhbmNlcy52YWx1ZXMoKSwgLi4udGhpcy5kZWZhdWx0VHVuZXNJbnN0YW5jZXMudmFsdWVzKCldLmZvckVhY2goKG4pID0+IHtcbiAgICAgIGlmIChNKG4ud3JhcCkpXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgaSA9IG4ud3JhcChpKTtcbiAgICAgICAgfSBjYXRjaCAocikge1xuICAgICAgICAgIFQoYFR1bmUgJHtuLmNvbnN0cnVjdG9yLm5hbWV9IHdyYXAgbWV0aG9kIHRocm93cyBhbiBFcnJvciAlb2AsIFwid2FyblwiLCByKTtcbiAgICAgICAgfVxuICAgIH0pLCBlLmFwcGVuZENoaWxkKGkpLCBlO1xuICB9XG4gIC8qKlxuICAgKiBJbnN0YW50aWF0ZSBCbG9jayBUdW5lc1xuICAgKlxuICAgKiBAcGFyYW0gdHVuZXNEYXRhIC0gY3VycmVudCBCbG9jayB0dW5lcyBkYXRhXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBjb21wb3NlVHVuZXMoZSkge1xuICAgIEFycmF5LmZyb20odGhpcy50dW5lcy52YWx1ZXMoKSkuZm9yRWFjaCgodCkgPT4ge1xuICAgICAgKHQuaXNJbnRlcm5hbCA/IHRoaXMuZGVmYXVsdFR1bmVzSW5zdGFuY2VzIDogdGhpcy50dW5lc0luc3RhbmNlcykuc2V0KHQubmFtZSwgdC5jcmVhdGUoZVt0Lm5hbWVdLCB0aGlzLmJsb2NrQVBJKSk7XG4gICAgfSksIE9iamVjdC5lbnRyaWVzKGUpLmZvckVhY2goKFt0LCBvXSkgPT4ge1xuICAgICAgdGhpcy50dW5lc0luc3RhbmNlcy5oYXModCkgfHwgKHRoaXMudW5hdmFpbGFibGVUdW5lc0RhdGFbdF0gPSBvKTtcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogQWRkcyBmb2N1cyBldmVudCBsaXN0ZW5lcnMgdG8gYWxsIGlucHV0cyBhbmQgY29udGVudGVkaXRhYmxlXG4gICAqL1xuICBhZGRJbnB1dEV2ZW50cygpIHtcbiAgICB0aGlzLmlucHV0cy5mb3JFYWNoKChlKSA9PiB7XG4gICAgICBlLmFkZEV2ZW50TGlzdGVuZXIoXCJmb2N1c1wiLCB0aGlzLmhhbmRsZUZvY3VzKSwgYy5pc05hdGl2ZUlucHV0KGUpICYmIGUuYWRkRXZlbnRMaXN0ZW5lcihcImlucHV0XCIsIHRoaXMuZGlkTXV0YXRlZCk7XG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIHJlbW92ZXMgZm9jdXMgZXZlbnQgbGlzdGVuZXJzIGZyb20gYWxsIGlucHV0cyBhbmQgY29udGVudGVkaXRhYmxlXG4gICAqL1xuICByZW1vdmVJbnB1dEV2ZW50cygpIHtcbiAgICB0aGlzLmlucHV0cy5mb3JFYWNoKChlKSA9PiB7XG4gICAgICBlLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJmb2N1c1wiLCB0aGlzLmhhbmRsZUZvY3VzKSwgYy5pc05hdGl2ZUlucHV0KGUpICYmIGUucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImlucHV0XCIsIHRoaXMuZGlkTXV0YXRlZCk7XG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIExpc3RlbiBjb21tb24gZWRpdG9yIERvbSBDaGFuZ2VkIGV2ZW50IGFuZCBkZXRlY3QgbXV0YXRpb25zIHJlbGF0ZWQgdG8gdGhlICBCbG9ja1xuICAgKi9cbiAgd2F0Y2hCbG9ja011dGF0aW9ucygpIHtcbiAgICB2YXIgZTtcbiAgICB0aGlzLnJlZGFjdG9yRG9tQ2hhbmdlZENhbGxiYWNrID0gKHQpID0+IHtcbiAgICAgIGNvbnN0IHsgbXV0YXRpb25zOiBvIH0gPSB0O1xuICAgICAgby5zb21lKChuKSA9PiBRdChuLCB0aGlzLnRvb2xSZW5kZXJlZEVsZW1lbnQpKSAmJiB0aGlzLmRpZE11dGF0ZWQobyk7XG4gICAgfSwgKGUgPSB0aGlzLmVkaXRvckV2ZW50QnVzKSA9PSBudWxsIHx8IGUub24oQWUsIHRoaXMucmVkYWN0b3JEb21DaGFuZ2VkQ2FsbGJhY2spO1xuICB9XG4gIC8qKlxuICAgKiBSZW1vdmUgcmVkYWN0b3IgZG9tIGNoYW5nZSBldmVudCBsaXN0ZW5lclxuICAgKi9cbiAgdW53YXRjaEJsb2NrTXV0YXRpb25zKCkge1xuICAgIHZhciBlO1xuICAgIChlID0gdGhpcy5lZGl0b3JFdmVudEJ1cykgPT0gbnVsbCB8fCBlLm9mZihBZSwgdGhpcy5yZWRhY3RvckRvbUNoYW5nZWRDYWxsYmFjayk7XG4gIH1cbiAgLyoqXG4gICAqIFNvbWV0aW1lcyBUb29sIGNhbiByZXBsYWNlIG93biBtYWluIGVsZW1lbnQsIGZvciBleGFtcGxlIEgyIC0+IEg0IG9yIFVMIC0+IE9MXG4gICAqIFdlIG5lZWQgdG8gZGV0ZWN0IHN1Y2ggY2hhbmdlcyBhbmQgdXBkYXRlIGEgbGluayB0byB0b29scyBtYWluIGVsZW1lbnQgd2l0aCB0aGUgbmV3IG9uZVxuICAgKlxuICAgKiBAcGFyYW0gbXV0YXRpb25zIC0gcmVjb3JkcyBvZiBibG9jayBjb250ZW50IG11dGF0aW9uc1xuICAgKi9cbiAgZGV0ZWN0VG9vbFJvb3RDaGFuZ2UoZSkge1xuICAgIGUuZm9yRWFjaCgodCkgPT4ge1xuICAgICAgaWYgKEFycmF5LmZyb20odC5yZW1vdmVkTm9kZXMpLmluY2x1ZGVzKHRoaXMudG9vbFJlbmRlcmVkRWxlbWVudCkpIHtcbiAgICAgICAgY29uc3QgaSA9IHQuYWRkZWROb2Rlc1t0LmFkZGVkTm9kZXMubGVuZ3RoIC0gMV07XG4gICAgICAgIHRoaXMudG9vbFJlbmRlcmVkRWxlbWVudCA9IGk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIENsZWFycyBpbnB1dHMgY2FjaGVkIHZhbHVlXG4gICAqL1xuICBkcm9wSW5wdXRzQ2FjaGUoKSB7XG4gICAgdGhpcy5jYWNoZWRJbnB1dHMgPSBbXTtcbiAgfVxufVxuY2xhc3Mgb28gZXh0ZW5kcyB5IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKSwgdGhpcy5pbnNlcnQgPSAoZSA9IHRoaXMuY29uZmlnLmRlZmF1bHRCbG9jaywgdCA9IHt9LCBvID0ge30sIGksIG4sIHIsIGEpID0+IHtcbiAgICAgIGNvbnN0IGwgPSB0aGlzLkVkaXRvci5CbG9ja01hbmFnZXIuaW5zZXJ0KHtcbiAgICAgICAgaWQ6IGEsXG4gICAgICAgIHRvb2w6IGUsXG4gICAgICAgIGRhdGE6IHQsXG4gICAgICAgIGluZGV4OiBpLFxuICAgICAgICBuZWVkVG9Gb2N1czogbixcbiAgICAgICAgcmVwbGFjZTogclxuICAgICAgfSk7XG4gICAgICByZXR1cm4gbmV3IGVlKGwpO1xuICAgIH0sIHRoaXMuY29tcG9zZUJsb2NrRGF0YSA9IGFzeW5jIChlKSA9PiB7XG4gICAgICBjb25zdCB0ID0gdGhpcy5FZGl0b3IuVG9vbHMuYmxvY2tUb29scy5nZXQoZSk7XG4gICAgICByZXR1cm4gbmV3IFIoe1xuICAgICAgICB0b29sOiB0LFxuICAgICAgICBhcGk6IHRoaXMuRWRpdG9yLkFQSSxcbiAgICAgICAgcmVhZE9ubHk6ICEwLFxuICAgICAgICBkYXRhOiB7fSxcbiAgICAgICAgdHVuZXNEYXRhOiB7fVxuICAgICAgfSkuZGF0YTtcbiAgICB9LCB0aGlzLnVwZGF0ZSA9IGFzeW5jIChlLCB0KSA9PiB7XG4gICAgICBjb25zdCB7IEJsb2NrTWFuYWdlcjogbyB9ID0gdGhpcy5FZGl0b3IsIGkgPSBvLmdldEJsb2NrQnlJZChlKTtcbiAgICAgIGlmIChpID09PSB2b2lkIDApXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgQmxvY2sgd2l0aCBpZCBcIiR7ZX1cIiBub3QgZm91bmRgKTtcbiAgICAgIGNvbnN0IG4gPSBhd2FpdCBvLnVwZGF0ZShpLCB0KTtcbiAgICAgIHJldHVybiBuZXcgZWUobik7XG4gICAgfSwgdGhpcy5jb252ZXJ0ID0gKGUsIHQsIG8pID0+IHtcbiAgICAgIHZhciBoLCBmO1xuICAgICAgY29uc3QgeyBCbG9ja01hbmFnZXI6IGksIFRvb2xzOiBuIH0gPSB0aGlzLkVkaXRvciwgciA9IGkuZ2V0QmxvY2tCeUlkKGUpO1xuICAgICAgaWYgKCFyKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEJsb2NrIHdpdGggaWQgXCIke2V9XCIgbm90IGZvdW5kYCk7XG4gICAgICBjb25zdCBhID0gbi5ibG9ja1Rvb2xzLmdldChyLm5hbWUpLCBsID0gbi5ibG9ja1Rvb2xzLmdldCh0KTtcbiAgICAgIGlmICghbClcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBCbG9jayBUb29sIHdpdGggdHlwZSBcIiR7dH1cIiBub3QgZm91bmRgKTtcbiAgICAgIGNvbnN0IGQgPSAoKGggPSBhID09IG51bGwgPyB2b2lkIDAgOiBhLmNvbnZlcnNpb25Db25maWcpID09IG51bGwgPyB2b2lkIDAgOiBoLmV4cG9ydCkgIT09IHZvaWQgMCwgdSA9ICgoZiA9IGwuY29udmVyc2lvbkNvbmZpZykgPT0gbnVsbCA/IHZvaWQgMCA6IGYuaW1wb3J0KSAhPT0gdm9pZCAwO1xuICAgICAgaWYgKGQgJiYgdSlcbiAgICAgICAgaS5jb252ZXJ0KHIsIHQsIG8pO1xuICAgICAgZWxzZSB7XG4gICAgICAgIGNvbnN0IHggPSBbXG4gICAgICAgICAgZCA/ICExIDogcmUoci5uYW1lKSxcbiAgICAgICAgICB1ID8gITEgOiByZSh0KVxuICAgICAgICBdLmZpbHRlcihCb29sZWFuKS5qb2luKFwiIGFuZCBcIik7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgQ29udmVyc2lvbiBmcm9tIFwiJHtyLm5hbWV9XCIgdG8gXCIke3R9XCIgaXMgbm90IHBvc3NpYmxlLiAke3h9IHRvb2wocykgc2hvdWxkIHByb3ZpZGUgYSBcImNvbnZlcnNpb25Db25maWdcImApO1xuICAgICAgfVxuICAgIH0sIHRoaXMuaW5zZXJ0TWFueSA9IChlLCB0ID0gdGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLmJsb2Nrcy5sZW5ndGggLSAxKSA9PiB7XG4gICAgICB0aGlzLnZhbGlkYXRlSW5kZXgodCk7XG4gICAgICBjb25zdCBvID0gZS5tYXAoKHsgaWQ6IGksIHR5cGU6IG4sIGRhdGE6IHIgfSkgPT4gdGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLmNvbXBvc2VCbG9jayh7XG4gICAgICAgIGlkOiBpLFxuICAgICAgICB0b29sOiBuIHx8IHRoaXMuY29uZmlnLmRlZmF1bHRCbG9jayxcbiAgICAgICAgZGF0YTogclxuICAgICAgfSkpO1xuICAgICAgcmV0dXJuIHRoaXMuRWRpdG9yLkJsb2NrTWFuYWdlci5pbnNlcnRNYW55KG8sIHQpLCBvLm1hcCgoaSkgPT4gbmV3IGVlKGkpKTtcbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBBdmFpbGFibGUgbWV0aG9kc1xuICAgKlxuICAgKiBAcmV0dXJucyB7QmxvY2tzfVxuICAgKi9cbiAgZ2V0IG1ldGhvZHMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNsZWFyOiAoKSA9PiB0aGlzLmNsZWFyKCksXG4gICAgICByZW5kZXI6IChlKSA9PiB0aGlzLnJlbmRlcihlKSxcbiAgICAgIHJlbmRlckZyb21IVE1MOiAoZSkgPT4gdGhpcy5yZW5kZXJGcm9tSFRNTChlKSxcbiAgICAgIGRlbGV0ZTogKGUpID0+IHRoaXMuZGVsZXRlKGUpLFxuICAgICAgc3dhcDogKGUsIHQpID0+IHRoaXMuc3dhcChlLCB0KSxcbiAgICAgIG1vdmU6IChlLCB0KSA9PiB0aGlzLm1vdmUoZSwgdCksXG4gICAgICBnZXRCbG9ja0J5SW5kZXg6IChlKSA9PiB0aGlzLmdldEJsb2NrQnlJbmRleChlKSxcbiAgICAgIGdldEJ5SWQ6IChlKSA9PiB0aGlzLmdldEJ5SWQoZSksXG4gICAgICBnZXRDdXJyZW50QmxvY2tJbmRleDogKCkgPT4gdGhpcy5nZXRDdXJyZW50QmxvY2tJbmRleCgpLFxuICAgICAgZ2V0QmxvY2tJbmRleDogKGUpID0+IHRoaXMuZ2V0QmxvY2tJbmRleChlKSxcbiAgICAgIGdldEJsb2Nrc0NvdW50OiAoKSA9PiB0aGlzLmdldEJsb2Nrc0NvdW50KCksXG4gICAgICBzdHJldGNoQmxvY2s6IChlLCB0ID0gITApID0+IHRoaXMuc3RyZXRjaEJsb2NrKGUsIHQpLFxuICAgICAgaW5zZXJ0TmV3QmxvY2s6ICgpID0+IHRoaXMuaW5zZXJ0TmV3QmxvY2soKSxcbiAgICAgIGluc2VydDogdGhpcy5pbnNlcnQsXG4gICAgICBpbnNlcnRNYW55OiB0aGlzLmluc2VydE1hbnksXG4gICAgICB1cGRhdGU6IHRoaXMudXBkYXRlLFxuICAgICAgY29tcG9zZUJsb2NrRGF0YTogdGhpcy5jb21wb3NlQmxvY2tEYXRhLFxuICAgICAgY29udmVydDogdGhpcy5jb252ZXJ0XG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBCbG9ja3MgY291bnRcbiAgICpcbiAgICogQHJldHVybnMge251bWJlcn1cbiAgICovXG4gIGdldEJsb2Nrc0NvdW50KCkge1xuICAgIHJldHVybiB0aGlzLkVkaXRvci5CbG9ja01hbmFnZXIuYmxvY2tzLmxlbmd0aDtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBjdXJyZW50IGJsb2NrIGluZGV4XG4gICAqXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9XG4gICAqL1xuICBnZXRDdXJyZW50QmxvY2tJbmRleCgpIHtcbiAgICByZXR1cm4gdGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLmN1cnJlbnRCbG9ja0luZGV4O1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBpbmRleCBvZiBCbG9jayBieSBpZDtcbiAgICpcbiAgICogQHBhcmFtIGlkIC0gYmxvY2sgaWRcbiAgICovXG4gIGdldEJsb2NrSW5kZXgoZSkge1xuICAgIGNvbnN0IHQgPSB0aGlzLkVkaXRvci5CbG9ja01hbmFnZXIuZ2V0QmxvY2tCeUlkKGUpO1xuICAgIGlmICghdCkge1xuICAgICAgWShcIlRoZXJlIGlzIG5vIGJsb2NrIHdpdGggaWQgYFwiICsgZSArIFwiYFwiLCBcIndhcm5cIik7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHJldHVybiB0aGlzLkVkaXRvci5CbG9ja01hbmFnZXIuZ2V0QmxvY2tJbmRleCh0KTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBCbG9ja0FQSSBvYmplY3QgYnkgQmxvY2sgaW5kZXhcbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IC0gaW5kZXggdG8gZ2V0XG4gICAqL1xuICBnZXRCbG9ja0J5SW5kZXgoZSkge1xuICAgIGNvbnN0IHQgPSB0aGlzLkVkaXRvci5CbG9ja01hbmFnZXIuZ2V0QmxvY2tCeUluZGV4KGUpO1xuICAgIGlmICh0ID09PSB2b2lkIDApIHtcbiAgICAgIFkoXCJUaGVyZSBpcyBubyBibG9jayBhdCBpbmRleCBgXCIgKyBlICsgXCJgXCIsIFwid2FyblwiKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBlZSh0KTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBCbG9ja0FQSSBvYmplY3QgYnkgQmxvY2sgaWRcbiAgICpcbiAgICogQHBhcmFtIGlkIC0gaWQgb2YgYmxvY2sgdG8gZ2V0XG4gICAqL1xuICBnZXRCeUlkKGUpIHtcbiAgICBjb25zdCB0ID0gdGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLmdldEJsb2NrQnlJZChlKTtcbiAgICByZXR1cm4gdCA9PT0gdm9pZCAwID8gKFkoXCJUaGVyZSBpcyBubyBibG9jayB3aXRoIGlkIGBcIiArIGUgKyBcImBcIiwgXCJ3YXJuXCIpLCBudWxsKSA6IG5ldyBlZSh0KTtcbiAgfVxuICAvKipcbiAgICogQ2FsbCBCbG9jayBNYW5hZ2VyIG1ldGhvZCB0aGF0IHN3YXAgQmxvY2tzXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggLSBwb3NpdGlvbiBvZiBmaXJzdCBCbG9ja1xuICAgKiBAcGFyYW0ge251bWJlcn0gdG9JbmRleCAtIHBvc2l0aW9uIG9mIHNlY29uZCBCbG9ja1xuICAgKiBAZGVwcmVjYXRlZCDigJQgdXNlICdtb3ZlJyBpbnN0ZWFkXG4gICAqL1xuICBzd2FwKGUsIHQpIHtcbiAgICBUKFxuICAgICAgXCJgYmxvY2tzLnN3YXAoKWAgbWV0aG9kIGlzIGRlcHJlY2F0ZWQgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiB0aGUgbmV4dCBtYWpvciByZWxlYXNlLiBVc2UgYGJsb2NrLm1vdmUoKWAgbWV0aG9kIGluc3RlYWRcIixcbiAgICAgIFwiaW5mb1wiXG4gICAgKSwgdGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLnN3YXAoZSwgdCk7XG4gIH1cbiAgLyoqXG4gICAqIE1vdmUgYmxvY2sgZnJvbSBvbmUgaW5kZXggdG8gYW5vdGhlclxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gdG9JbmRleCAtIGluZGV4IHRvIG1vdmUgdG9cbiAgICogQHBhcmFtIHtudW1iZXJ9IGZyb21JbmRleCAtIGluZGV4IHRvIG1vdmUgZnJvbVxuICAgKi9cbiAgbW92ZShlLCB0KSB7XG4gICAgdGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLm1vdmUoZSwgdCk7XG4gIH1cbiAgLyoqXG4gICAqIERlbGV0ZXMgQmxvY2tcbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IGJsb2NrSW5kZXggLSBpbmRleCBvZiBCbG9jayB0byBkZWxldGVcbiAgICovXG4gIGRlbGV0ZShlID0gdGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLmN1cnJlbnRCbG9ja0luZGV4KSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHQgPSB0aGlzLkVkaXRvci5CbG9ja01hbmFnZXIuZ2V0QmxvY2tCeUluZGV4KGUpO1xuICAgICAgdGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLnJlbW92ZUJsb2NrKHQpO1xuICAgIH0gY2F0Y2ggKHQpIHtcbiAgICAgIFkodCwgXCJ3YXJuXCIpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLkVkaXRvci5CbG9ja01hbmFnZXIuYmxvY2tzLmxlbmd0aCA9PT0gMCAmJiB0aGlzLkVkaXRvci5CbG9ja01hbmFnZXIuaW5zZXJ0KCksIHRoaXMuRWRpdG9yLkJsb2NrTWFuYWdlci5jdXJyZW50QmxvY2sgJiYgdGhpcy5FZGl0b3IuQ2FyZXQuc2V0VG9CbG9jayh0aGlzLkVkaXRvci5CbG9ja01hbmFnZXIuY3VycmVudEJsb2NrLCB0aGlzLkVkaXRvci5DYXJldC5wb3NpdGlvbnMuRU5EKSwgdGhpcy5FZGl0b3IuVG9vbGJhci5jbG9zZSgpO1xuICB9XG4gIC8qKlxuICAgKiBDbGVhciBFZGl0b3IncyBhcmVhXG4gICAqL1xuICBhc3luYyBjbGVhcigpIHtcbiAgICBhd2FpdCB0aGlzLkVkaXRvci5CbG9ja01hbmFnZXIuY2xlYXIoITApLCB0aGlzLkVkaXRvci5JbmxpbmVUb29sYmFyLmNsb3NlKCk7XG4gIH1cbiAgLyoqXG4gICAqIEZpbGxzIEVkaXRvciB3aXRoIEJsb2NrcyBkYXRhXG4gICAqXG4gICAqIEBwYXJhbSB7T3V0cHV0RGF0YX0gZGF0YSDigJQgU2F2ZWQgRWRpdG9yIGRhdGFcbiAgICovXG4gIGFzeW5jIHJlbmRlcihlKSB7XG4gICAgaWYgKGUgPT09IHZvaWQgMCB8fCBlLmJsb2NrcyA9PT0gdm9pZCAwKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW5jb3JyZWN0IGRhdGEgcGFzc2VkIHRvIHRoZSByZW5kZXIoKSBtZXRob2RcIik7XG4gICAgdGhpcy5FZGl0b3IuTW9kaWZpY2F0aW9uc09ic2VydmVyLmRpc2FibGUoKSwgYXdhaXQgdGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLmNsZWFyKCksIGF3YWl0IHRoaXMuRWRpdG9yLlJlbmRlcmVyLnJlbmRlcihlLmJsb2NrcyksIHRoaXMuRWRpdG9yLk1vZGlmaWNhdGlvbnNPYnNlcnZlci5lbmFibGUoKTtcbiAgfVxuICAvKipcbiAgICogUmVuZGVyIHBhc3NlZCBIVE1MIHN0cmluZ1xuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZGF0YSAtIEhUTUwgc3RyaW5nIHRvIHJlbmRlclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTx2b2lkPn1cbiAgICovXG4gIHJlbmRlckZyb21IVE1MKGUpIHtcbiAgICByZXR1cm4gdGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLmNsZWFyKCksIHRoaXMuRWRpdG9yLlBhc3RlLnByb2Nlc3NUZXh0KGUsICEwKTtcbiAgfVxuICAvKipcbiAgICogU3RyZXRjaCBCbG9jaydzIGNvbnRlbnRcbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IC0gaW5kZXggb2YgQmxvY2sgdG8gc3RyZXRjaFxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHN0YXR1cyAtIHRydWUgdG8gZW5hYmxlLCBmYWxzZSB0byBkaXNhYmxlXG4gICAqIEBkZXByZWNhdGVkIFVzZSBCbG9ja0FQSSBpbnRlcmZhY2UgdG8gc3RyZXRjaCBCbG9ja3NcbiAgICovXG4gIHN0cmV0Y2hCbG9jayhlLCB0ID0gITApIHtcbiAgICBMZShcbiAgICAgICEwLFxuICAgICAgXCJibG9ja3Muc3RyZXRjaEJsb2NrKClcIixcbiAgICAgIFwiQmxvY2tBUElcIlxuICAgICk7XG4gICAgY29uc3QgbyA9IHRoaXMuRWRpdG9yLkJsb2NrTWFuYWdlci5nZXRCbG9ja0J5SW5kZXgoZSk7XG4gICAgbyAmJiAoby5zdHJldGNoZWQgPSB0KTtcbiAgfVxuICAvKipcbiAgICogSW5zZXJ0IG5ldyBCbG9ja1xuICAgKiBBZnRlciBzZXQgY2FyZXQgdG8gdGhpcyBCbG9ja1xuICAgKlxuICAgKiBAdG9kbyByZW1vdmUgaW4gMy4wLjBcbiAgICogQGRlcHJlY2F0ZWQgd2l0aCBpbnNlcnQoKSBtZXRob2RcbiAgICovXG4gIGluc2VydE5ld0Jsb2NrKCkge1xuICAgIFQoXCJNZXRob2QgYmxvY2tzLmluc2VydE5ld0Jsb2NrKCkgaXMgZGVwcmVjYXRlZCBhbmQgaXQgd2lsbCBiZSByZW1vdmVkIGluIHRoZSBuZXh0IG1ham9yIHJlbGVhc2UuIFVzZSBibG9ja3MuaW5zZXJ0KCkgaW5zdGVhZC5cIiwgXCJ3YXJuXCIpLCB0aGlzLmluc2VydCgpO1xuICB9XG4gIC8qKlxuICAgKiBWYWxpZGF0ZWQgYmxvY2sgaW5kZXggYW5kIHRocm93cyBhbiBlcnJvciBpZiBpdCdzIGludmFsaWRcbiAgICpcbiAgICogQHBhcmFtIGluZGV4IC0gaW5kZXggdG8gdmFsaWRhdGVcbiAgICovXG4gIHZhbGlkYXRlSW5kZXgoZSkge1xuICAgIGlmICh0eXBlb2YgZSAhPSBcIm51bWJlclwiKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW5kZXggc2hvdWxkIGJlIGEgbnVtYmVyXCIpO1xuICAgIGlmIChlIDwgMClcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkluZGV4IHNob3VsZCBiZSBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gMFwiKTtcbiAgICBpZiAoZSA9PT0gbnVsbClcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkluZGV4IHNob3VsZCBiZSBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gMFwiKTtcbiAgfVxufVxuY2xhc3MgaW8gZXh0ZW5kcyB5IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKSwgdGhpcy5zZXRUb0ZpcnN0QmxvY2sgPSAoZSA9IHRoaXMuRWRpdG9yLkNhcmV0LnBvc2l0aW9ucy5ERUZBVUxULCB0ID0gMCkgPT4gdGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLmZpcnN0QmxvY2sgPyAodGhpcy5FZGl0b3IuQ2FyZXQuc2V0VG9CbG9jayh0aGlzLkVkaXRvci5CbG9ja01hbmFnZXIuZmlyc3RCbG9jaywgZSwgdCksICEwKSA6ICExLCB0aGlzLnNldFRvTGFzdEJsb2NrID0gKGUgPSB0aGlzLkVkaXRvci5DYXJldC5wb3NpdGlvbnMuREVGQVVMVCwgdCA9IDApID0+IHRoaXMuRWRpdG9yLkJsb2NrTWFuYWdlci5sYXN0QmxvY2sgPyAodGhpcy5FZGl0b3IuQ2FyZXQuc2V0VG9CbG9jayh0aGlzLkVkaXRvci5CbG9ja01hbmFnZXIubGFzdEJsb2NrLCBlLCB0KSwgITApIDogITEsIHRoaXMuc2V0VG9QcmV2aW91c0Jsb2NrID0gKGUgPSB0aGlzLkVkaXRvci5DYXJldC5wb3NpdGlvbnMuREVGQVVMVCwgdCA9IDApID0+IHRoaXMuRWRpdG9yLkJsb2NrTWFuYWdlci5wcmV2aW91c0Jsb2NrID8gKHRoaXMuRWRpdG9yLkNhcmV0LnNldFRvQmxvY2sodGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLnByZXZpb3VzQmxvY2ssIGUsIHQpLCAhMCkgOiAhMSwgdGhpcy5zZXRUb05leHRCbG9jayA9IChlID0gdGhpcy5FZGl0b3IuQ2FyZXQucG9zaXRpb25zLkRFRkFVTFQsIHQgPSAwKSA9PiB0aGlzLkVkaXRvci5CbG9ja01hbmFnZXIubmV4dEJsb2NrID8gKHRoaXMuRWRpdG9yLkNhcmV0LnNldFRvQmxvY2sodGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLm5leHRCbG9jaywgZSwgdCksICEwKSA6ICExLCB0aGlzLnNldFRvQmxvY2sgPSAoZSwgdCA9IHRoaXMuRWRpdG9yLkNhcmV0LnBvc2l0aW9ucy5ERUZBVUxULCBvID0gMCkgPT4gdGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLmJsb2Nrc1tlXSA/ICh0aGlzLkVkaXRvci5DYXJldC5zZXRUb0Jsb2NrKHRoaXMuRWRpdG9yLkJsb2NrTWFuYWdlci5ibG9ja3NbZV0sIHQsIG8pLCAhMCkgOiAhMSwgdGhpcy5mb2N1cyA9IChlID0gITEpID0+IGUgPyB0aGlzLnNldFRvTGFzdEJsb2NrKHRoaXMuRWRpdG9yLkNhcmV0LnBvc2l0aW9ucy5FTkQpIDogdGhpcy5zZXRUb0ZpcnN0QmxvY2sodGhpcy5FZGl0b3IuQ2FyZXQucG9zaXRpb25zLlNUQVJUKTtcbiAgfVxuICAvKipcbiAgICogQXZhaWxhYmxlIG1ldGhvZHNcbiAgICpcbiAgICogQHJldHVybnMge0NhcmV0fVxuICAgKi9cbiAgZ2V0IG1ldGhvZHMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHNldFRvRmlyc3RCbG9jazogdGhpcy5zZXRUb0ZpcnN0QmxvY2ssXG4gICAgICBzZXRUb0xhc3RCbG9jazogdGhpcy5zZXRUb0xhc3RCbG9jayxcbiAgICAgIHNldFRvUHJldmlvdXNCbG9jazogdGhpcy5zZXRUb1ByZXZpb3VzQmxvY2ssXG4gICAgICBzZXRUb05leHRCbG9jazogdGhpcy5zZXRUb05leHRCbG9jayxcbiAgICAgIHNldFRvQmxvY2s6IHRoaXMuc2V0VG9CbG9jayxcbiAgICAgIGZvY3VzOiB0aGlzLmZvY3VzXG4gICAgfTtcbiAgfVxufVxuY2xhc3Mgbm8gZXh0ZW5kcyB5IHtcbiAgLyoqXG4gICAqIEF2YWlsYWJsZSBtZXRob2RzXG4gICAqXG4gICAqIEByZXR1cm5zIHtFdmVudHN9XG4gICAqL1xuICBnZXQgbWV0aG9kcygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZW1pdDogKGUsIHQpID0+IHRoaXMuZW1pdChlLCB0KSxcbiAgICAgIG9mZjogKGUsIHQpID0+IHRoaXMub2ZmKGUsIHQpLFxuICAgICAgb246IChlLCB0KSA9PiB0aGlzLm9uKGUsIHQpXG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogU3Vic2NyaWJlIG9uIEV2ZW50c1xuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnROYW1lIC0gZXZlbnQgbmFtZSB0byBzdWJzY3JpYmVcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgLSBldmVudCBoYW5kbGVyXG4gICAqL1xuICBvbihlLCB0KSB7XG4gICAgdGhpcy5ldmVudHNEaXNwYXRjaGVyLm9uKGUsIHQpO1xuICB9XG4gIC8qKlxuICAgKiBFbWl0IGV2ZW50IHdpdGggZGF0YVxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnROYW1lIC0gZXZlbnQgdG8gZW1pdFxuICAgKiBAcGFyYW0ge29iamVjdH0gZGF0YSAtIGV2ZW50J3MgZGF0YVxuICAgKi9cbiAgZW1pdChlLCB0KSB7XG4gICAgdGhpcy5ldmVudHNEaXNwYXRjaGVyLmVtaXQoZSwgdCk7XG4gIH1cbiAgLyoqXG4gICAqIFVuc3Vic2NyaWJlIGZyb20gRXZlbnRcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50TmFtZSAtIGV2ZW50IHRvIHVuc3Vic2NyaWJlXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIC0gZXZlbnQgaGFuZGxlclxuICAgKi9cbiAgb2ZmKGUsIHQpIHtcbiAgICB0aGlzLmV2ZW50c0Rpc3BhdGNoZXIub2ZmKGUsIHQpO1xuICB9XG59XG5jbGFzcyBIZSBleHRlbmRzIHkge1xuICAvKipcbiAgICogUmV0dXJuIG5hbWVzcGFjZSBzZWN0aW9uIGZvciB0b29sIG9yIGJsb2NrIHR1bmVcbiAgICpcbiAgICogQHBhcmFtIHRvb2wgLSB0b29sIG9iamVjdFxuICAgKi9cbiAgc3RhdGljIGdldE5hbWVzcGFjZShlKSB7XG4gICAgcmV0dXJuIGUuaXNUdW5lKCkgPyBgYmxvY2tUdW5lcy4ke2UubmFtZX1gIDogYHRvb2xzLiR7ZS5uYW1lfWA7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybiBJMThuIEFQSSBtZXRob2RzIHdpdGggZ2xvYmFsIGRpY3Rpb25hcnkgYWNjZXNzXG4gICAqL1xuICBnZXQgbWV0aG9kcygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdDogKCkgPT4ge1xuICAgICAgICBZKFwiSTE4bi50KCkgbWV0aG9kIGNhbiBiZSBhY2Nlc3NlZCBvbmx5IGZyb20gVG9vbHNcIiwgXCJ3YXJuXCIpO1xuICAgICAgfVxuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybiBJMThuIEFQSSBtZXRob2RzIHdpdGggdG9vbCBuYW1lc3BhY2VkIGRpY3Rpb25hcnlcbiAgICpcbiAgICogQHBhcmFtIHRvb2wgLSBUb29sIG9iamVjdFxuICAgKi9cbiAgZ2V0TWV0aG9kc0ZvclRvb2woZSkge1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKFxuICAgICAgdGhpcy5tZXRob2RzLFxuICAgICAge1xuICAgICAgICB0OiAodCkgPT4gei50KEhlLmdldE5hbWVzcGFjZShlKSwgdClcbiAgICAgIH1cbiAgICApO1xuICB9XG59XG5jbGFzcyBzbyBleHRlbmRzIHkge1xuICAvKipcbiAgICogRWRpdG9yLmpzIENvcmUgQVBJIG1vZHVsZXNcbiAgICovXG4gIGdldCBtZXRob2RzKCkge1xuICAgIHJldHVybiB7XG4gICAgICBibG9ja3M6IHRoaXMuRWRpdG9yLkJsb2Nrc0FQSS5tZXRob2RzLFxuICAgICAgY2FyZXQ6IHRoaXMuRWRpdG9yLkNhcmV0QVBJLm1ldGhvZHMsXG4gICAgICBldmVudHM6IHRoaXMuRWRpdG9yLkV2ZW50c0FQSS5tZXRob2RzLFxuICAgICAgbGlzdGVuZXJzOiB0aGlzLkVkaXRvci5MaXN0ZW5lcnNBUEkubWV0aG9kcyxcbiAgICAgIG5vdGlmaWVyOiB0aGlzLkVkaXRvci5Ob3RpZmllckFQSS5tZXRob2RzLFxuICAgICAgc2FuaXRpemVyOiB0aGlzLkVkaXRvci5TYW5pdGl6ZXJBUEkubWV0aG9kcyxcbiAgICAgIHNhdmVyOiB0aGlzLkVkaXRvci5TYXZlckFQSS5tZXRob2RzLFxuICAgICAgc2VsZWN0aW9uOiB0aGlzLkVkaXRvci5TZWxlY3Rpb25BUEkubWV0aG9kcyxcbiAgICAgIHN0eWxlczogdGhpcy5FZGl0b3IuU3R5bGVzQVBJLmNsYXNzZXMsXG4gICAgICB0b29sYmFyOiB0aGlzLkVkaXRvci5Ub29sYmFyQVBJLm1ldGhvZHMsXG4gICAgICBpbmxpbmVUb29sYmFyOiB0aGlzLkVkaXRvci5JbmxpbmVUb29sYmFyQVBJLm1ldGhvZHMsXG4gICAgICB0b29sdGlwOiB0aGlzLkVkaXRvci5Ub29sdGlwQVBJLm1ldGhvZHMsXG4gICAgICBpMThuOiB0aGlzLkVkaXRvci5JMThuQVBJLm1ldGhvZHMsXG4gICAgICByZWFkT25seTogdGhpcy5FZGl0b3IuUmVhZE9ubHlBUEkubWV0aG9kcyxcbiAgICAgIHVpOiB0aGlzLkVkaXRvci5VaUFQSS5tZXRob2RzXG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBFZGl0b3IuanMgQ29yZSBBUEkgbWV0aG9kcyBmb3IgcGFzc2VkIHRvb2xcbiAgICpcbiAgICogQHBhcmFtIHRvb2wgLSB0b29sIG9iamVjdFxuICAgKi9cbiAgZ2V0TWV0aG9kc0ZvclRvb2woZSkge1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKFxuICAgICAgdGhpcy5tZXRob2RzLFxuICAgICAge1xuICAgICAgICBpMThuOiB0aGlzLkVkaXRvci5JMThuQVBJLmdldE1ldGhvZHNGb3JUb29sKGUpXG4gICAgICB9XG4gICAgKTtcbiAgfVxufVxuY2xhc3Mgcm8gZXh0ZW5kcyB5IHtcbiAgLyoqXG4gICAqIEF2YWlsYWJsZSBtZXRob2RzXG4gICAqXG4gICAqIEByZXR1cm5zIHtJbmxpbmVUb29sYmFyfVxuICAgKi9cbiAgZ2V0IG1ldGhvZHMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNsb3NlOiAoKSA9PiB0aGlzLmNsb3NlKCksXG4gICAgICBvcGVuOiAoKSA9PiB0aGlzLm9wZW4oKVxuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIE9wZW4gSW5saW5lIFRvb2xiYXJcbiAgICovXG4gIG9wZW4oKSB7XG4gICAgdGhpcy5FZGl0b3IuSW5saW5lVG9vbGJhci50cnlUb1Nob3coKTtcbiAgfVxuICAvKipcbiAgICogQ2xvc2UgSW5saW5lIFRvb2xiYXJcbiAgICovXG4gIGNsb3NlKCkge1xuICAgIHRoaXMuRWRpdG9yLklubGluZVRvb2xiYXIuY2xvc2UoKTtcbiAgfVxufVxuY2xhc3MgYW8gZXh0ZW5kcyB5IHtcbiAgLyoqXG4gICAqIEF2YWlsYWJsZSBtZXRob2RzXG4gICAqXG4gICAqIEByZXR1cm5zIHtMaXN0ZW5lcnN9XG4gICAqL1xuICBnZXQgbWV0aG9kcygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgb246IChlLCB0LCBvLCBpKSA9PiB0aGlzLm9uKGUsIHQsIG8sIGkpLFxuICAgICAgb2ZmOiAoZSwgdCwgbywgaSkgPT4gdGhpcy5vZmYoZSwgdCwgbywgaSksXG4gICAgICBvZmZCeUlkOiAoZSkgPT4gdGhpcy5vZmZCeUlkKGUpXG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogQWRzIGEgRE9NIGV2ZW50IGxpc3RlbmVyLiBSZXR1cm4gaXQncyBpZC5cbiAgICpcbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWxlbWVudCAtIEVsZW1lbnQgdG8gc2V0IGhhbmRsZXIgdG9cbiAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50VHlwZSAtIGV2ZW50IHR5cGVcbiAgICogQHBhcmFtIHsoKSA9PiB2b2lkfSBoYW5kbGVyIC0gZXZlbnQgaGFuZGxlclxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHVzZUNhcHR1cmUgLSBjYXB0dXJlIGV2ZW50IG9yIG5vdFxuICAgKi9cbiAgb24oZSwgdCwgbywgaSkge1xuICAgIHJldHVybiB0aGlzLmxpc3RlbmVycy5vbihlLCB0LCBvLCBpKTtcbiAgfVxuICAvKipcbiAgICogUmVtb3ZlcyBET00gbGlzdGVuZXIgZnJvbSBlbGVtZW50XG4gICAqXG4gICAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudCAtIEVsZW1lbnQgdG8gcmVtb3ZlIGhhbmRsZXIgZnJvbVxuICAgKiBAcGFyYW0gZXZlbnRUeXBlIC0gZXZlbnQgdHlwZVxuICAgKiBAcGFyYW0gaGFuZGxlciAtIGV2ZW50IGhhbmRsZXJcbiAgICogQHBhcmFtIHtib29sZWFufSB1c2VDYXB0dXJlIC0gY2FwdHVyZSBldmVudCBvciBub3RcbiAgICovXG4gIG9mZihlLCB0LCBvLCBpKSB7XG4gICAgdGhpcy5saXN0ZW5lcnMub2ZmKGUsIHQsIG8sIGkpO1xuICB9XG4gIC8qKlxuICAgKiBSZW1vdmVzIERPTSBsaXN0ZW5lciBieSB0aGUgbGlzdGVuZXIgaWRcbiAgICpcbiAgICogQHBhcmFtIGlkIC0gaWQgb2YgdGhlIGxpc3RlbmVyIHRvIHJlbW92ZVxuICAgKi9cbiAgb2ZmQnlJZChlKSB7XG4gICAgdGhpcy5saXN0ZW5lcnMub2ZmQnlJZChlKTtcbiAgfVxufVxudmFyIF9lID0ge30sIGxvID0ge1xuICBnZXQgZXhwb3J0cygpIHtcbiAgICByZXR1cm4gX2U7XG4gIH0sXG4gIHNldCBleHBvcnRzKHMpIHtcbiAgICBfZSA9IHM7XG4gIH1cbn07XG4oZnVuY3Rpb24ocywgZSkge1xuICAoZnVuY3Rpb24odCwgbykge1xuICAgIHMuZXhwb3J0cyA9IG8oKTtcbiAgfSkod2luZG93LCBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgdmFyIG8gPSB7fTtcbiAgICAgIGZ1bmN0aW9uIGkobikge1xuICAgICAgICBpZiAob1tuXSlcbiAgICAgICAgICByZXR1cm4gb1tuXS5leHBvcnRzO1xuICAgICAgICB2YXIgciA9IG9bbl0gPSB7IGk6IG4sIGw6ICExLCBleHBvcnRzOiB7fSB9O1xuICAgICAgICByZXR1cm4gdFtuXS5jYWxsKHIuZXhwb3J0cywgciwgci5leHBvcnRzLCBpKSwgci5sID0gITAsIHIuZXhwb3J0cztcbiAgICAgIH1cbiAgICAgIHJldHVybiBpLm0gPSB0LCBpLmMgPSBvLCBpLmQgPSBmdW5jdGlvbihuLCByLCBhKSB7XG4gICAgICAgIGkubyhuLCByKSB8fCBPYmplY3QuZGVmaW5lUHJvcGVydHkobiwgciwgeyBlbnVtZXJhYmxlOiAhMCwgZ2V0OiBhIH0pO1xuICAgICAgfSwgaS5yID0gZnVuY3Rpb24obikge1xuICAgICAgICB0eXBlb2YgU3ltYm9sIDwgXCJ1XCIgJiYgU3ltYm9sLnRvU3RyaW5nVGFnICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6IFwiTW9kdWxlXCIgfSksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogITAgfSk7XG4gICAgICB9LCBpLnQgPSBmdW5jdGlvbihuLCByKSB7XG4gICAgICAgIGlmICgxICYgciAmJiAobiA9IGkobikpLCA4ICYgciB8fCA0ICYgciAmJiB0eXBlb2YgbiA9PSBcIm9iamVjdFwiICYmIG4gJiYgbi5fX2VzTW9kdWxlKVxuICAgICAgICAgIHJldHVybiBuO1xuICAgICAgICB2YXIgYSA9IC8qIEBfX1BVUkVfXyAqLyBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICBpZiAoaS5yKGEpLCBPYmplY3QuZGVmaW5lUHJvcGVydHkoYSwgXCJkZWZhdWx0XCIsIHsgZW51bWVyYWJsZTogITAsIHZhbHVlOiBuIH0pLCAyICYgciAmJiB0eXBlb2YgbiAhPSBcInN0cmluZ1wiKVxuICAgICAgICAgIGZvciAodmFyIGwgaW4gbilcbiAgICAgICAgICAgIGkuZChhLCBsLCBmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICAgIHJldHVybiBuW2RdO1xuICAgICAgICAgICAgfS5iaW5kKG51bGwsIGwpKTtcbiAgICAgICAgcmV0dXJuIGE7XG4gICAgICB9LCBpLm4gPSBmdW5jdGlvbihuKSB7XG4gICAgICAgIHZhciByID0gbiAmJiBuLl9fZXNNb2R1bGUgPyBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gbi5kZWZhdWx0O1xuICAgICAgICB9IDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIG47XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBpLmQociwgXCJhXCIsIHIpLCByO1xuICAgICAgfSwgaS5vID0gZnVuY3Rpb24obiwgcikge1xuICAgICAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG4sIHIpO1xuICAgICAgfSwgaS5wID0gXCIvXCIsIGkoaS5zID0gMCk7XG4gICAgfShbZnVuY3Rpb24odCwgbywgaSkge1xuICAgICAgaSgxKSwgLyohXG4gICAgICAgKiBDb2RleCBKYXZhU2NyaXB0IE5vdGlmaWNhdGlvbiBtb2R1bGVcbiAgICAgICAqIGh0dHBzOi8vZ2l0aHViLmNvbS9jb2RleC10ZWFtL2pzLW5vdGlmaWVyXG4gICAgICAgKi9cbiAgICAgIHQuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgbiA9IGkoNiksIHIgPSBcImNkeC1ub3RpZnktLWJvdW5jZS1pblwiLCBhID0gbnVsbDtcbiAgICAgICAgcmV0dXJuIHsgc2hvdzogZnVuY3Rpb24obCkge1xuICAgICAgICAgIGlmIChsLm1lc3NhZ2UpIHtcbiAgICAgICAgICAgIChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgaWYgKGEpXG4gICAgICAgICAgICAgICAgcmV0dXJuICEwO1xuICAgICAgICAgICAgICBhID0gbi5nZXRXcmFwcGVyKCksIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoYSk7XG4gICAgICAgICAgICB9KSgpO1xuICAgICAgICAgICAgdmFyIGQgPSBudWxsLCB1ID0gbC50aW1lIHx8IDhlMztcbiAgICAgICAgICAgIHN3aXRjaCAobC50eXBlKSB7XG4gICAgICAgICAgICAgIGNhc2UgXCJjb25maXJtXCI6XG4gICAgICAgICAgICAgICAgZCA9IG4uY29uZmlybShsKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSBcInByb21wdFwiOlxuICAgICAgICAgICAgICAgIGQgPSBuLnByb21wdChsKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBkID0gbi5hbGVydChsKSwgd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICBkLnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgIH0sIHUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYS5hcHBlbmRDaGlsZChkKSwgZC5jbGFzc0xpc3QuYWRkKHIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSB9O1xuICAgICAgfSgpO1xuICAgIH0sIGZ1bmN0aW9uKHQsIG8sIGkpIHtcbiAgICAgIHZhciBuID0gaSgyKTtcbiAgICAgIHR5cGVvZiBuID09IFwic3RyaW5nXCIgJiYgKG4gPSBbW3QuaSwgbiwgXCJcIl1dKTtcbiAgICAgIHZhciByID0geyBobXI6ICEwLCB0cmFuc2Zvcm06IHZvaWQgMCwgaW5zZXJ0SW50bzogdm9pZCAwIH07XG4gICAgICBpKDQpKG4sIHIpLCBuLmxvY2FscyAmJiAodC5leHBvcnRzID0gbi5sb2NhbHMpO1xuICAgIH0sIGZ1bmN0aW9uKHQsIG8sIGkpIHtcbiAgICAgICh0LmV4cG9ydHMgPSBpKDMpKCExKSkucHVzaChbdC5pLCBgLmNkeC1ub3RpZnktLWVycm9ye2JhY2tncm91bmQ6I2ZmZmJmYiFpbXBvcnRhbnR9LmNkeC1ub3RpZnktLWVycm9yOjpiZWZvcmV7YmFja2dyb3VuZDojZmI1ZDVkIWltcG9ydGFudH0uY2R4LW5vdGlmeV9faW5wdXR7bWF4LXdpZHRoOjEzMHB4O3BhZGRpbmc6NXB4IDEwcHg7YmFja2dyb3VuZDojZjdmN2Y3O2JvcmRlcjowO2JvcmRlci1yYWRpdXM6M3B4O2ZvbnQtc2l6ZToxM3B4O2NvbG9yOiM2NTZiN2M7b3V0bGluZTowfS5jZHgtbm90aWZ5X19pbnB1dDotbXMtaW5wdXQtcGxhY2Vob2xkZXJ7Y29sb3I6IzY1NmI3Y30uY2R4LW5vdGlmeV9faW5wdXQ6OnBsYWNlaG9sZGVye2NvbG9yOiM2NTZiN2N9LmNkeC1ub3RpZnlfX2lucHV0OmZvY3VzOi1tcy1pbnB1dC1wbGFjZWhvbGRlcntjb2xvcjpyZ2JhKDEwMSwxMDcsMTI0LC4zKX0uY2R4LW5vdGlmeV9faW5wdXQ6Zm9jdXM6OnBsYWNlaG9sZGVye2NvbG9yOnJnYmEoMTAxLDEwNywxMjQsLjMpfS5jZHgtbm90aWZ5X19idXR0b257Ym9yZGVyOm5vbmU7Ym9yZGVyLXJhZGl1czozcHg7Zm9udC1zaXplOjEzcHg7cGFkZGluZzo1cHggMTBweDtjdXJzb3I6cG9pbnRlcn0uY2R4LW5vdGlmeV9fYnV0dG9uOmxhc3QtY2hpbGR7bWFyZ2luLWxlZnQ6MTBweH0uY2R4LW5vdGlmeV9fYnV0dG9uLS1jYW5jZWx7YmFja2dyb3VuZDojZjJmNWY3O2JveC1zaGFkb3c6MCAycHggMXB4IDAgcmdiYSgxNiwxOSwyOSwwKTtjb2xvcjojNjU2YjdjfS5jZHgtbm90aWZ5X19idXR0b24tLWNhbmNlbDpob3ZlcntiYWNrZ3JvdW5kOiNlZWV9LmNkeC1ub3RpZnlfX2J1dHRvbi0tY29uZmlybXtiYWNrZ3JvdW5kOiMzNGM5OTI7Ym94LXNoYWRvdzowIDFweCAxcHggMCByZ2JhKDE4LDQ5LDM1LC4wNSk7Y29sb3I6I2ZmZn0uY2R4LW5vdGlmeV9fYnV0dG9uLS1jb25maXJtOmhvdmVye2JhY2tncm91bmQ6IzMzYjA4Mn0uY2R4LW5vdGlmeV9fYnRucy13cmFwcGVye2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTpmbGV4Oy1tcy1mbGV4LWZsb3c6cm93IG5vd3JhcDtmbGV4LWZsb3c6cm93IG5vd3JhcDttYXJnaW4tdG9wOjVweH0uY2R4LW5vdGlmeV9fY3Jvc3N7cG9zaXRpb246YWJzb2x1dGU7dG9wOjVweDtyaWdodDo1cHg7d2lkdGg6MTBweDtoZWlnaHQ6MTBweDtwYWRkaW5nOjVweDtvcGFjaXR5Oi41NDtjdXJzb3I6cG9pbnRlcn0uY2R4LW5vdGlmeV9fY3Jvc3M6OmFmdGVyLC5jZHgtbm90aWZ5X19jcm9zczo6YmVmb3Jle2NvbnRlbnQ6Jyc7cG9zaXRpb246YWJzb2x1dGU7bGVmdDo5cHg7dG9wOjVweDtoZWlnaHQ6MTJweDt3aWR0aDoycHg7YmFja2dyb3VuZDojNTc1ZDY3fS5jZHgtbm90aWZ5X19jcm9zczo6YmVmb3Jle3RyYW5zZm9ybTpyb3RhdGUoLTQ1ZGVnKX0uY2R4LW5vdGlmeV9fY3Jvc3M6OmFmdGVye3RyYW5zZm9ybTpyb3RhdGUoNDVkZWcpfS5jZHgtbm90aWZ5X19jcm9zczpob3ZlcntvcGFjaXR5OjF9LmNkeC1ub3RpZmllc3twb3NpdGlvbjpmaXhlZDt6LWluZGV4OjI7Ym90dG9tOjIwcHg7bGVmdDoyMHB4O2ZvbnQtZmFtaWx5Oi1hcHBsZS1zeXN0ZW0sQmxpbmtNYWNTeXN0ZW1Gb250LFwiU2Vnb2UgVUlcIixSb2JvdG8sT3h5Z2VuLFVidW50dSxDYW50YXJlbGwsXCJGaXJhIFNhbnNcIixcIkRyb2lkIFNhbnNcIixcIkhlbHZldGljYSBOZXVlXCIsc2Fucy1zZXJpZn0uY2R4LW5vdGlmeXtwb3NpdGlvbjpyZWxhdGl2ZTt3aWR0aDoyMjBweDttYXJnaW4tdG9wOjE1cHg7cGFkZGluZzoxM3B4IDE2cHg7YmFja2dyb3VuZDojZmZmO2JveC1zaGFkb3c6MCAxMXB4IDE3cHggMCByZ2JhKDIzLDMyLDYxLC4xMyk7Ym9yZGVyLXJhZGl1czo1cHg7Zm9udC1zaXplOjE0cHg7bGluZS1oZWlnaHQ6MS40ZW07d29yZC13cmFwOmJyZWFrLXdvcmR9LmNkeC1ub3RpZnk6OmJlZm9yZXtjb250ZW50OicnO3Bvc2l0aW9uOmFic29sdXRlO2Rpc3BsYXk6YmxvY2s7dG9wOjA7bGVmdDowO3dpZHRoOjNweDtoZWlnaHQ6Y2FsYygxMDAlIC0gNnB4KTttYXJnaW46M3B4O2JvcmRlci1yYWRpdXM6NXB4O2JhY2tncm91bmQ6MCAwfUBrZXlmcmFtZXMgYm91bmNlSW57MCV7b3BhY2l0eTowO3RyYW5zZm9ybTpzY2FsZSguMyl9NTAle29wYWNpdHk6MTt0cmFuc2Zvcm06c2NhbGUoMS4wNSl9NzAle3RyYW5zZm9ybTpzY2FsZSguOSl9MTAwJXt0cmFuc2Zvcm06c2NhbGUoMSl9fS5jZHgtbm90aWZ5LS1ib3VuY2UtaW57YW5pbWF0aW9uLW5hbWU6Ym91bmNlSW47YW5pbWF0aW9uLWR1cmF0aW9uOi42czthbmltYXRpb24taXRlcmF0aW9uLWNvdW50OjF9LmNkeC1ub3RpZnktLXN1Y2Nlc3N7YmFja2dyb3VuZDojZmFmZmZlIWltcG9ydGFudH0uY2R4LW5vdGlmeS0tc3VjY2Vzczo6YmVmb3Jle2JhY2tncm91bmQ6IzQxZmZiMSFpbXBvcnRhbnR9YCwgXCJcIl0pO1xuICAgIH0sIGZ1bmN0aW9uKHQsIG8pIHtcbiAgICAgIHQuZXhwb3J0cyA9IGZ1bmN0aW9uKGkpIHtcbiAgICAgICAgdmFyIG4gPSBbXTtcbiAgICAgICAgcmV0dXJuIG4udG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24ocikge1xuICAgICAgICAgICAgdmFyIGEgPSBmdW5jdGlvbihsLCBkKSB7XG4gICAgICAgICAgICAgIHZhciB1ID0gbFsxXSB8fCBcIlwiLCBoID0gbFszXTtcbiAgICAgICAgICAgICAgaWYgKCFoKVxuICAgICAgICAgICAgICAgIHJldHVybiB1O1xuICAgICAgICAgICAgICBpZiAoZCAmJiB0eXBlb2YgYnRvYSA9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICB2YXIgZiA9IChwID0gaCwgXCIvKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIgKyBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShwKSkpKSArIFwiICovXCIpLCB4ID0gaC5zb3VyY2VzLm1hcChmdW5jdGlvbihtKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gXCIvKiMgc291cmNlVVJMPVwiICsgaC5zb3VyY2VSb290ICsgbSArIFwiICovXCI7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFt1XS5jb25jYXQoeCkuY29uY2F0KFtmXSkuam9pbihgXG5gKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB2YXIgcDtcbiAgICAgICAgICAgICAgcmV0dXJuIFt1XS5qb2luKGBcbmApO1xuICAgICAgICAgICAgfShyLCBpKTtcbiAgICAgICAgICAgIHJldHVybiByWzJdID8gXCJAbWVkaWEgXCIgKyByWzJdICsgXCJ7XCIgKyBhICsgXCJ9XCIgOiBhO1xuICAgICAgICAgIH0pLmpvaW4oXCJcIik7XG4gICAgICAgIH0sIG4uaSA9IGZ1bmN0aW9uKHIsIGEpIHtcbiAgICAgICAgICB0eXBlb2YgciA9PSBcInN0cmluZ1wiICYmIChyID0gW1tudWxsLCByLCBcIlwiXV0pO1xuICAgICAgICAgIGZvciAodmFyIGwgPSB7fSwgZCA9IDA7IGQgPCB0aGlzLmxlbmd0aDsgZCsrKSB7XG4gICAgICAgICAgICB2YXIgdSA9IHRoaXNbZF1bMF07XG4gICAgICAgICAgICB0eXBlb2YgdSA9PSBcIm51bWJlclwiICYmIChsW3VdID0gITApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmb3IgKGQgPSAwOyBkIDwgci5sZW5ndGg7IGQrKykge1xuICAgICAgICAgICAgdmFyIGggPSByW2RdO1xuICAgICAgICAgICAgdHlwZW9mIGhbMF0gPT0gXCJudW1iZXJcIiAmJiBsW2hbMF1dIHx8IChhICYmICFoWzJdID8gaFsyXSA9IGEgOiBhICYmIChoWzJdID0gXCIoXCIgKyBoWzJdICsgXCIpIGFuZCAoXCIgKyBhICsgXCIpXCIpLCBuLnB1c2goaCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSwgbjtcbiAgICAgIH07XG4gICAgfSwgZnVuY3Rpb24odCwgbywgaSkge1xuICAgICAgdmFyIG4sIHIsIGEgPSB7fSwgbCA9IChuID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB3aW5kb3cgJiYgZG9jdW1lbnQgJiYgZG9jdW1lbnQuYWxsICYmICF3aW5kb3cuYXRvYjtcbiAgICAgIH0sIGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gciA9PT0gdm9pZCAwICYmIChyID0gbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpKSwgcjtcbiAgICAgIH0pLCBkID0gZnVuY3Rpb24odikge1xuICAgICAgICB2YXIgZyA9IHt9O1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24odykge1xuICAgICAgICAgIGlmICh0eXBlb2YgdyA9PSBcImZ1bmN0aW9uXCIpXG4gICAgICAgICAgICByZXR1cm4gdygpO1xuICAgICAgICAgIGlmIChnW3ddID09PSB2b2lkIDApIHtcbiAgICAgICAgICAgIHZhciBFID0gZnVuY3Rpb24oSSkge1xuICAgICAgICAgICAgICByZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihJKTtcbiAgICAgICAgICAgIH0uY2FsbCh0aGlzLCB3KTtcbiAgICAgICAgICAgIGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgRSBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudClcbiAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBFID0gRS5jb250ZW50RG9jdW1lbnQuaGVhZDtcbiAgICAgICAgICAgICAgfSBjYXRjaCB7XG4gICAgICAgICAgICAgICAgRSA9IG51bGw7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGdbd10gPSBFO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gZ1t3XTtcbiAgICAgICAgfTtcbiAgICAgIH0oKSwgdSA9IG51bGwsIGggPSAwLCBmID0gW10sIHggPSBpKDUpO1xuICAgICAgZnVuY3Rpb24gcCh2LCBnKSB7XG4gICAgICAgIGZvciAodmFyIHcgPSAwOyB3IDwgdi5sZW5ndGg7IHcrKykge1xuICAgICAgICAgIHZhciBFID0gdlt3XSwgSSA9IGFbRS5pZF07XG4gICAgICAgICAgaWYgKEkpIHtcbiAgICAgICAgICAgIEkucmVmcysrO1xuICAgICAgICAgICAgZm9yICh2YXIgQyA9IDA7IEMgPCBJLnBhcnRzLmxlbmd0aDsgQysrKVxuICAgICAgICAgICAgICBJLnBhcnRzW0NdKEUucGFydHNbQ10pO1xuICAgICAgICAgICAgZm9yICg7IEMgPCBFLnBhcnRzLmxlbmd0aDsgQysrKVxuICAgICAgICAgICAgICBJLnBhcnRzLnB1c2goSChFLnBhcnRzW0NdLCBnKSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciBPID0gW107XG4gICAgICAgICAgICBmb3IgKEMgPSAwOyBDIDwgRS5wYXJ0cy5sZW5ndGg7IEMrKylcbiAgICAgICAgICAgICAgTy5wdXNoKEgoRS5wYXJ0c1tDXSwgZykpO1xuICAgICAgICAgICAgYVtFLmlkXSA9IHsgaWQ6IEUuaWQsIHJlZnM6IDEsIHBhcnRzOiBPIH07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBtKHYsIGcpIHtcbiAgICAgICAgZm9yICh2YXIgdyA9IFtdLCBFID0ge30sIEkgPSAwOyBJIDwgdi5sZW5ndGg7IEkrKykge1xuICAgICAgICAgIHZhciBDID0gdltJXSwgTyA9IGcuYmFzZSA/IENbMF0gKyBnLmJhc2UgOiBDWzBdLCBCID0geyBjc3M6IENbMV0sIG1lZGlhOiBDWzJdLCBzb3VyY2VNYXA6IENbM10gfTtcbiAgICAgICAgICBFW09dID8gRVtPXS5wYXJ0cy5wdXNoKEIpIDogdy5wdXNoKEVbT10gPSB7IGlkOiBPLCBwYXJ0czogW0JdIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3O1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gTCh2LCBnKSB7XG4gICAgICAgIHZhciB3ID0gZCh2Lmluc2VydEludG8pO1xuICAgICAgICBpZiAoIXcpXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnRJbnRvJyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG4gICAgICAgIHZhciBFID0gZltmLmxlbmd0aCAtIDFdO1xuICAgICAgICBpZiAodi5pbnNlcnRBdCA9PT0gXCJ0b3BcIilcbiAgICAgICAgICBFID8gRS5uZXh0U2libGluZyA/IHcuaW5zZXJ0QmVmb3JlKGcsIEUubmV4dFNpYmxpbmcpIDogdy5hcHBlbmRDaGlsZChnKSA6IHcuaW5zZXJ0QmVmb3JlKGcsIHcuZmlyc3RDaGlsZCksIGYucHVzaChnKTtcbiAgICAgICAgZWxzZSBpZiAodi5pbnNlcnRBdCA9PT0gXCJib3R0b21cIilcbiAgICAgICAgICB3LmFwcGVuZENoaWxkKGcpO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBpZiAodHlwZW9mIHYuaW5zZXJ0QXQgIT0gXCJvYmplY3RcIiB8fCAhdi5pbnNlcnRBdC5iZWZvcmUpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFtTdHlsZSBMb2FkZXJdXG5cbiBJbnZhbGlkIHZhbHVlIGZvciBwYXJhbWV0ZXIgJ2luc2VydEF0JyAoJ29wdGlvbnMuaW5zZXJ0QXQnKSBmb3VuZC5cbiBNdXN0IGJlICd0b3AnLCAnYm90dG9tJywgb3IgT2JqZWN0LlxuIChodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay1jb250cmliL3N0eWxlLWxvYWRlciNpbnNlcnRhdClcbmApO1xuICAgICAgICAgIHZhciBJID0gZCh2Lmluc2VydEludG8gKyBcIiBcIiArIHYuaW5zZXJ0QXQuYmVmb3JlKTtcbiAgICAgICAgICB3Lmluc2VydEJlZm9yZShnLCBJKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZnVuY3Rpb24gQSh2KSB7XG4gICAgICAgIGlmICh2LnBhcmVudE5vZGUgPT09IG51bGwpXG4gICAgICAgICAgcmV0dXJuICExO1xuICAgICAgICB2LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodik7XG4gICAgICAgIHZhciBnID0gZi5pbmRleE9mKHYpO1xuICAgICAgICBnID49IDAgJiYgZi5zcGxpY2UoZywgMSk7XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBTKHYpIHtcbiAgICAgICAgdmFyIGcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG4gICAgICAgIHJldHVybiB2LmF0dHJzLnR5cGUgPT09IHZvaWQgMCAmJiAodi5hdHRycy50eXBlID0gXCJ0ZXh0L2Nzc1wiKSwgWihnLCB2LmF0dHJzKSwgTCh2LCBnKSwgZztcbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIFoodiwgZykge1xuICAgICAgICBPYmplY3Qua2V5cyhnKS5mb3JFYWNoKGZ1bmN0aW9uKHcpIHtcbiAgICAgICAgICB2LnNldEF0dHJpYnV0ZSh3LCBnW3ddKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBIKHYsIGcpIHtcbiAgICAgICAgdmFyIHcsIEUsIEksIEM7XG4gICAgICAgIGlmIChnLnRyYW5zZm9ybSAmJiB2LmNzcykge1xuICAgICAgICAgIGlmICghKEMgPSBnLnRyYW5zZm9ybSh2LmNzcykpKVxuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICB2LmNzcyA9IEM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGcuc2luZ2xldG9uKSB7XG4gICAgICAgICAgdmFyIE8gPSBoKys7XG4gICAgICAgICAgdyA9IHUgfHwgKHUgPSBTKGcpKSwgRSA9IGNlLmJpbmQobnVsbCwgdywgTywgITEpLCBJID0gY2UuYmluZChudWxsLCB3LCBPLCAhMCk7XG4gICAgICAgIH0gZWxzZVxuICAgICAgICAgIHYuc291cmNlTWFwICYmIHR5cGVvZiBVUkwgPT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBVUkwuY3JlYXRlT2JqZWN0VVJMID09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgVVJMLnJldm9rZU9iamVjdFVSTCA9PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIEJsb2IgPT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBidG9hID09IFwiZnVuY3Rpb25cIiA/ICh3ID0gZnVuY3Rpb24oQikge1xuICAgICAgICAgICAgdmFyIGogPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlua1wiKTtcbiAgICAgICAgICAgIHJldHVybiBCLmF0dHJzLnR5cGUgPT09IHZvaWQgMCAmJiAoQi5hdHRycy50eXBlID0gXCJ0ZXh0L2Nzc1wiKSwgQi5hdHRycy5yZWwgPSBcInN0eWxlc2hlZXRcIiwgWihqLCBCLmF0dHJzKSwgTChCLCBqKSwgajtcbiAgICAgICAgICB9KGcpLCBFID0gZnVuY3Rpb24oQiwgaiwgZGUpIHtcbiAgICAgICAgICAgIHZhciBRID0gZGUuY3NzLCBDZSA9IGRlLnNvdXJjZU1hcCwgT3QgPSBqLmNvbnZlcnRUb0Fic29sdXRlVXJscyA9PT0gdm9pZCAwICYmIENlO1xuICAgICAgICAgICAgKGouY29udmVydFRvQWJzb2x1dGVVcmxzIHx8IE90KSAmJiAoUSA9IHgoUSkpLCBDZSAmJiAoUSArPSBgXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGAgKyBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShDZSkpKSkgKyBcIiAqL1wiKTtcbiAgICAgICAgICAgIHZhciBOdCA9IG5ldyBCbG9iKFtRXSwgeyB0eXBlOiBcInRleHQvY3NzXCIgfSksIEdlID0gQi5ocmVmO1xuICAgICAgICAgICAgQi5ocmVmID0gVVJMLmNyZWF0ZU9iamVjdFVSTChOdCksIEdlICYmIFVSTC5yZXZva2VPYmplY3RVUkwoR2UpO1xuICAgICAgICAgIH0uYmluZChudWxsLCB3LCBnKSwgSSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgQSh3KSwgdy5ocmVmICYmIFVSTC5yZXZva2VPYmplY3RVUkwody5ocmVmKTtcbiAgICAgICAgICB9KSA6ICh3ID0gUyhnKSwgRSA9IGZ1bmN0aW9uKEIsIGopIHtcbiAgICAgICAgICAgIHZhciBkZSA9IGouY3NzLCBRID0gai5tZWRpYTtcbiAgICAgICAgICAgIGlmIChRICYmIEIuc2V0QXR0cmlidXRlKFwibWVkaWFcIiwgUSksIEIuc3R5bGVTaGVldClcbiAgICAgICAgICAgICAgQi5zdHlsZVNoZWV0LmNzc1RleHQgPSBkZTtcbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICBmb3IgKDsgQi5maXJzdENoaWxkOyApXG4gICAgICAgICAgICAgICAgQi5yZW1vdmVDaGlsZChCLmZpcnN0Q2hpbGQpO1xuICAgICAgICAgICAgICBCLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGRlKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfS5iaW5kKG51bGwsIHcpLCBJID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBBKHcpO1xuICAgICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gRSh2KSwgZnVuY3Rpb24oQikge1xuICAgICAgICAgIGlmIChCKSB7XG4gICAgICAgICAgICBpZiAoQi5jc3MgPT09IHYuY3NzICYmIEIubWVkaWEgPT09IHYubWVkaWEgJiYgQi5zb3VyY2VNYXAgPT09IHYuc291cmNlTWFwKVxuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBFKHYgPSBCKTtcbiAgICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgIEkoKTtcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIHQuZXhwb3J0cyA9IGZ1bmN0aW9uKHYsIGcpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBERUJVRyA8IFwidVwiICYmIERFQlVHICYmIHR5cGVvZiBkb2N1bWVudCAhPSBcIm9iamVjdFwiKVxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoZSBzdHlsZS1sb2FkZXIgY2Fubm90IGJlIHVzZWQgaW4gYSBub24tYnJvd3NlciBlbnZpcm9ubWVudFwiKTtcbiAgICAgICAgKGcgPSBnIHx8IHt9KS5hdHRycyA9IHR5cGVvZiBnLmF0dHJzID09IFwib2JqZWN0XCIgPyBnLmF0dHJzIDoge30sIGcuc2luZ2xldG9uIHx8IHR5cGVvZiBnLnNpbmdsZXRvbiA9PSBcImJvb2xlYW5cIiB8fCAoZy5zaW5nbGV0b24gPSBsKCkpLCBnLmluc2VydEludG8gfHwgKGcuaW5zZXJ0SW50byA9IFwiaGVhZFwiKSwgZy5pbnNlcnRBdCB8fCAoZy5pbnNlcnRBdCA9IFwiYm90dG9tXCIpO1xuICAgICAgICB2YXIgdyA9IG0odiwgZyk7XG4gICAgICAgIHJldHVybiBwKHcsIGcpLCBmdW5jdGlvbihFKSB7XG4gICAgICAgICAgZm9yICh2YXIgSSA9IFtdLCBDID0gMDsgQyA8IHcubGVuZ3RoOyBDKyspIHtcbiAgICAgICAgICAgIHZhciBPID0gd1tDXTtcbiAgICAgICAgICAgIChCID0gYVtPLmlkXSkucmVmcy0tLCBJLnB1c2goQik7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZvciAoRSAmJiBwKG0oRSwgZyksIGcpLCBDID0gMDsgQyA8IEkubGVuZ3RoOyBDKyspIHtcbiAgICAgICAgICAgIHZhciBCO1xuICAgICAgICAgICAgaWYgKChCID0gSVtDXSkucmVmcyA9PT0gMCkge1xuICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IEIucGFydHMubGVuZ3RoOyBqKyspXG4gICAgICAgICAgICAgICAgQi5wYXJ0c1tqXSgpO1xuICAgICAgICAgICAgICBkZWxldGUgYVtCLmlkXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9O1xuICAgICAgdmFyIFUsIEogPSAoVSA9IFtdLCBmdW5jdGlvbih2LCBnKSB7XG4gICAgICAgIHJldHVybiBVW3ZdID0gZywgVS5maWx0ZXIoQm9vbGVhbikuam9pbihgXG5gKTtcbiAgICAgIH0pO1xuICAgICAgZnVuY3Rpb24gY2UodiwgZywgdywgRSkge1xuICAgICAgICB2YXIgSSA9IHcgPyBcIlwiIDogRS5jc3M7XG4gICAgICAgIGlmICh2LnN0eWxlU2hlZXQpXG4gICAgICAgICAgdi5zdHlsZVNoZWV0LmNzc1RleHQgPSBKKGcsIEkpO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICB2YXIgQyA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKEkpLCBPID0gdi5jaGlsZE5vZGVzO1xuICAgICAgICAgIE9bZ10gJiYgdi5yZW1vdmVDaGlsZChPW2ddKSwgTy5sZW5ndGggPyB2Lmluc2VydEJlZm9yZShDLCBPW2ddKSA6IHYuYXBwZW5kQ2hpbGQoQyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCBmdW5jdGlvbih0LCBvKSB7XG4gICAgICB0LmV4cG9ydHMgPSBmdW5jdGlvbihpKSB7XG4gICAgICAgIHZhciBuID0gdHlwZW9mIHdpbmRvdyA8IFwidVwiICYmIHdpbmRvdy5sb2NhdGlvbjtcbiAgICAgICAgaWYgKCFuKVxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImZpeFVybHMgcmVxdWlyZXMgd2luZG93LmxvY2F0aW9uXCIpO1xuICAgICAgICBpZiAoIWkgfHwgdHlwZW9mIGkgIT0gXCJzdHJpbmdcIilcbiAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgdmFyIHIgPSBuLnByb3RvY29sICsgXCIvL1wiICsgbi5ob3N0LCBhID0gciArIG4ucGF0aG5hbWUucmVwbGFjZSgvXFwvW15cXC9dKiQvLCBcIi9cIik7XG4gICAgICAgIHJldHVybiBpLnJlcGxhY2UoL3VybFxccypcXCgoKD86W14pKF18XFwoKD86W14pKF0rfFxcKFteKShdKlxcKSkqXFwpKSopXFwpL2dpLCBmdW5jdGlvbihsLCBkKSB7XG4gICAgICAgICAgdmFyIHUsIGggPSBkLnRyaW0oKS5yZXBsYWNlKC9eXCIoLiopXCIkLywgZnVuY3Rpb24oZiwgeCkge1xuICAgICAgICAgICAgcmV0dXJuIHg7XG4gICAgICAgICAgfSkucmVwbGFjZSgvXicoLiopJyQvLCBmdW5jdGlvbihmLCB4KSB7XG4gICAgICAgICAgICByZXR1cm4geDtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm4gL14oI3xkYXRhOnxodHRwOlxcL1xcL3xodHRwczpcXC9cXC98ZmlsZTpcXC9cXC9cXC98XFxzKiQpL2kudGVzdChoKSA/IGwgOiAodSA9IGguaW5kZXhPZihcIi8vXCIpID09PSAwID8gaCA6IGguaW5kZXhPZihcIi9cIikgPT09IDAgPyByICsgaCA6IGEgKyBoLnJlcGxhY2UoL15cXC5cXC8vLCBcIlwiKSwgXCJ1cmwoXCIgKyBKU09OLnN0cmluZ2lmeSh1KSArIFwiKVwiKTtcbiAgICAgICAgfSk7XG4gICAgICB9O1xuICAgIH0sIGZ1bmN0aW9uKHQsIG8sIGkpIHtcbiAgICAgIHZhciBuLCByLCBhLCBsLCBkLCB1LCBoLCBmLCB4O1xuICAgICAgdC5leHBvcnRzID0gKG4gPSBcImNkeC1ub3RpZmllc1wiLCByID0gXCJjZHgtbm90aWZ5XCIsIGEgPSBcImNkeC1ub3RpZnlfX2Nyb3NzXCIsIGwgPSBcImNkeC1ub3RpZnlfX2J1dHRvbi0tY29uZmlybVwiLCBkID0gXCJjZHgtbm90aWZ5X19idXR0b24tLWNhbmNlbFwiLCB1ID0gXCJjZHgtbm90aWZ5X19pbnB1dFwiLCBoID0gXCJjZHgtbm90aWZ5X19idXR0b25cIiwgZiA9IFwiY2R4LW5vdGlmeV9fYnRucy13cmFwcGVyXCIsIHsgYWxlcnQ6IHggPSBmdW5jdGlvbihwKSB7XG4gICAgICAgIHZhciBtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIkRJVlwiKSwgTCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJESVZcIiksIEEgPSBwLm1lc3NhZ2UsIFMgPSBwLnN0eWxlO1xuICAgICAgICByZXR1cm4gbS5jbGFzc0xpc3QuYWRkKHIpLCBTICYmIG0uY2xhc3NMaXN0LmFkZChyICsgXCItLVwiICsgUyksIG0uaW5uZXJIVE1MID0gQSwgTC5jbGFzc0xpc3QuYWRkKGEpLCBMLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBtLnJlbW92ZS5iaW5kKG0pKSwgbS5hcHBlbmRDaGlsZChMKSwgbTtcbiAgICAgIH0sIGNvbmZpcm06IGZ1bmN0aW9uKHApIHtcbiAgICAgICAgdmFyIG0gPSB4KHApLCBMID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSwgQSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIiksIFMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpLCBaID0gbS5xdWVyeVNlbGVjdG9yKFwiLlwiICsgYSksIEggPSBwLmNhbmNlbEhhbmRsZXIsIFUgPSBwLm9rSGFuZGxlcjtcbiAgICAgICAgcmV0dXJuIEwuY2xhc3NMaXN0LmFkZChmKSwgQS5pbm5lckhUTUwgPSBwLm9rVGV4dCB8fCBcIkNvbmZpcm1cIiwgUy5pbm5lckhUTUwgPSBwLmNhbmNlbFRleHQgfHwgXCJDYW5jZWxcIiwgQS5jbGFzc0xpc3QuYWRkKGgpLCBTLmNsYXNzTGlzdC5hZGQoaCksIEEuY2xhc3NMaXN0LmFkZChsKSwgUy5jbGFzc0xpc3QuYWRkKGQpLCBIICYmIHR5cGVvZiBIID09IFwiZnVuY3Rpb25cIiAmJiAoUy5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgSCksIFouYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIEgpKSwgVSAmJiB0eXBlb2YgVSA9PSBcImZ1bmN0aW9uXCIgJiYgQS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgVSksIEEuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIG0ucmVtb3ZlLmJpbmQobSkpLCBTLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBtLnJlbW92ZS5iaW5kKG0pKSwgTC5hcHBlbmRDaGlsZChBKSwgTC5hcHBlbmRDaGlsZChTKSwgbS5hcHBlbmRDaGlsZChMKSwgbTtcbiAgICAgIH0sIHByb21wdDogZnVuY3Rpb24ocCkge1xuICAgICAgICB2YXIgbSA9IHgocCksIEwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLCBBID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKSwgUyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKSwgWiA9IG0ucXVlcnlTZWxlY3RvcihcIi5cIiArIGEpLCBIID0gcC5jYW5jZWxIYW5kbGVyLCBVID0gcC5va0hhbmRsZXI7XG4gICAgICAgIHJldHVybiBMLmNsYXNzTGlzdC5hZGQoZiksIEEuaW5uZXJIVE1MID0gcC5va1RleHQgfHwgXCJPa1wiLCBBLmNsYXNzTGlzdC5hZGQoaCksIEEuY2xhc3NMaXN0LmFkZChsKSwgUy5jbGFzc0xpc3QuYWRkKHUpLCBwLnBsYWNlaG9sZGVyICYmIFMuc2V0QXR0cmlidXRlKFwicGxhY2Vob2xkZXJcIiwgcC5wbGFjZWhvbGRlciksIHAuZGVmYXVsdCAmJiAoUy52YWx1ZSA9IHAuZGVmYXVsdCksIHAuaW5wdXRUeXBlICYmIChTLnR5cGUgPSBwLmlucHV0VHlwZSksIEggJiYgdHlwZW9mIEggPT0gXCJmdW5jdGlvblwiICYmIFouYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIEgpLCBVICYmIHR5cGVvZiBVID09IFwiZnVuY3Rpb25cIiAmJiBBLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBVKFMudmFsdWUpO1xuICAgICAgICB9KSwgQS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgbS5yZW1vdmUuYmluZChtKSksIEwuYXBwZW5kQ2hpbGQoUyksIEwuYXBwZW5kQ2hpbGQoQSksIG0uYXBwZW5kQ2hpbGQoTCksIG07XG4gICAgICB9LCBnZXRXcmFwcGVyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiRElWXCIpO1xuICAgICAgICByZXR1cm4gcC5jbGFzc0xpc3QuYWRkKG4pLCBwO1xuICAgICAgfSB9KTtcbiAgICB9XSk7XG4gIH0pO1xufSkobG8pO1xuY29uc3QgY28gPSAvKiBAX19QVVJFX18gKi8gUGUoX2UpO1xuY2xhc3MgaG8ge1xuICAvKipcbiAgICogU2hvdyB3ZWIgbm90aWZpY2F0aW9uXG4gICAqXG4gICAqIEBwYXJhbSB7Tm90aWZpZXJPcHRpb25zIHwgQ29uZmlybU5vdGlmaWVyT3B0aW9ucyB8IFByb21wdE5vdGlmaWVyT3B0aW9uc30gb3B0aW9ucyAtIG5vdGlmaWNhdGlvbiBvcHRpb25zXG4gICAqL1xuICBzaG93KGUpIHtcbiAgICBjby5zaG93KGUpO1xuICB9XG59XG5jbGFzcyB1byBleHRlbmRzIHkge1xuICAvKipcbiAgICogQHBhcmFtIG1vZHVsZUNvbmZpZ3VyYXRpb24gLSBNb2R1bGUgQ29uZmlndXJhdGlvblxuICAgKiBAcGFyYW0gbW9kdWxlQ29uZmlndXJhdGlvbi5jb25maWcgLSBFZGl0b3IncyBjb25maWdcbiAgICogQHBhcmFtIG1vZHVsZUNvbmZpZ3VyYXRpb24uZXZlbnRzRGlzcGF0Y2hlciAtIEVkaXRvcidzIGV2ZW50IGRpc3BhdGNoZXJcbiAgICovXG4gIGNvbnN0cnVjdG9yKHsgY29uZmlnOiBlLCBldmVudHNEaXNwYXRjaGVyOiB0IH0pIHtcbiAgICBzdXBlcih7XG4gICAgICBjb25maWc6IGUsXG4gICAgICBldmVudHNEaXNwYXRjaGVyOiB0XG4gICAgfSksIHRoaXMubm90aWZpZXIgPSBuZXcgaG8oKTtcbiAgfVxuICAvKipcbiAgICogQXZhaWxhYmxlIG1ldGhvZHNcbiAgICovXG4gIGdldCBtZXRob2RzKCkge1xuICAgIHJldHVybiB7XG4gICAgICBzaG93OiAoZSkgPT4gdGhpcy5zaG93KGUpXG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogU2hvdyBub3RpZmljYXRpb25cbiAgICpcbiAgICogQHBhcmFtIHtOb3RpZmllck9wdGlvbnN9IG9wdGlvbnMgLSBtZXNzYWdlIG9wdGlvblxuICAgKi9cbiAgc2hvdyhlKSB7XG4gICAgcmV0dXJuIHRoaXMubm90aWZpZXIuc2hvdyhlKTtcbiAgfVxufVxuY2xhc3MgcG8gZXh0ZW5kcyB5IHtcbiAgLyoqXG4gICAqIEF2YWlsYWJsZSBtZXRob2RzXG4gICAqL1xuICBnZXQgbWV0aG9kcygpIHtcbiAgICBjb25zdCBlID0gKCkgPT4gdGhpcy5pc0VuYWJsZWQ7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRvZ2dsZTogKHQpID0+IHRoaXMudG9nZ2xlKHQpLFxuICAgICAgZ2V0IGlzRW5hYmxlZCgpIHtcbiAgICAgICAgcmV0dXJuIGUoKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBTZXQgb3IgdG9nZ2xlIHJlYWQtb25seSBzdGF0ZVxuICAgKlxuICAgKiBAcGFyYW0ge2Jvb2xlYW58dW5kZWZpbmVkfSBzdGF0ZSAtIHNldCBvciB0b2dnbGUgc3RhdGVcbiAgICogQHJldHVybnMge2Jvb2xlYW59IGN1cnJlbnQgdmFsdWVcbiAgICovXG4gIHRvZ2dsZShlKSB7XG4gICAgcmV0dXJuIHRoaXMuRWRpdG9yLlJlYWRPbmx5LnRvZ2dsZShlKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBjdXJyZW50IHJlYWQtb25seSBzdGF0ZVxuICAgKi9cbiAgZ2V0IGlzRW5hYmxlZCgpIHtcbiAgICByZXR1cm4gdGhpcy5FZGl0b3IuUmVhZE9ubHkuaXNFbmFibGVkO1xuICB9XG59XG52YXIgT2UgPSB7fSwgZm8gPSB7XG4gIGdldCBleHBvcnRzKCkge1xuICAgIHJldHVybiBPZTtcbiAgfSxcbiAgc2V0IGV4cG9ydHMocykge1xuICAgIE9lID0gcztcbiAgfVxufTtcbihmdW5jdGlvbihzLCBlKSB7XG4gIChmdW5jdGlvbih0LCBvKSB7XG4gICAgcy5leHBvcnRzID0gbygpO1xuICB9KShSdCwgZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gdChoKSB7XG4gICAgICB2YXIgZiA9IGgudGFncywgeCA9IE9iamVjdC5rZXlzKGYpLCBwID0geC5tYXAoZnVuY3Rpb24obSkge1xuICAgICAgICByZXR1cm4gdHlwZW9mIGZbbV07XG4gICAgICB9KS5ldmVyeShmdW5jdGlvbihtKSB7XG4gICAgICAgIHJldHVybiBtID09PSBcIm9iamVjdFwiIHx8IG0gPT09IFwiYm9vbGVhblwiIHx8IG0gPT09IFwiZnVuY3Rpb25cIjtcbiAgICAgIH0pO1xuICAgICAgaWYgKCFwKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgY29uZmlndXJhdGlvbiB3YXMgaW52YWxpZFwiKTtcbiAgICAgIHRoaXMuY29uZmlnID0gaDtcbiAgICB9XG4gICAgdmFyIG8gPSBbXCJQXCIsIFwiTElcIiwgXCJURFwiLCBcIlRIXCIsIFwiRElWXCIsIFwiSDFcIiwgXCJIMlwiLCBcIkgzXCIsIFwiSDRcIiwgXCJINVwiLCBcIkg2XCIsIFwiUFJFXCJdO1xuICAgIGZ1bmN0aW9uIGkoaCkge1xuICAgICAgcmV0dXJuIG8uaW5kZXhPZihoLm5vZGVOYW1lKSAhPT0gLTE7XG4gICAgfVxuICAgIHZhciBuID0gW1wiQVwiLCBcIkJcIiwgXCJTVFJPTkdcIiwgXCJJXCIsIFwiRU1cIiwgXCJTVUJcIiwgXCJTVVBcIiwgXCJVXCIsIFwiU1RSSUtFXCJdO1xuICAgIGZ1bmN0aW9uIHIoaCkge1xuICAgICAgcmV0dXJuIG4uaW5kZXhPZihoLm5vZGVOYW1lKSAhPT0gLTE7XG4gICAgfVxuICAgIHQucHJvdG90eXBlLmNsZWFuID0gZnVuY3Rpb24oaCkge1xuICAgICAgY29uc3QgZiA9IGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudCgpLCB4ID0gZi5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgcmV0dXJuIHguaW5uZXJIVE1MID0gaCwgdGhpcy5fc2FuaXRpemUoZiwgeCksIHguaW5uZXJIVE1MO1xuICAgIH0sIHQucHJvdG90eXBlLl9zYW5pdGl6ZSA9IGZ1bmN0aW9uKGgsIGYpIHtcbiAgICAgIHZhciB4ID0gYShoLCBmKSwgcCA9IHguZmlyc3RDaGlsZCgpO1xuICAgICAgaWYgKHApXG4gICAgICAgIGRvIHtcbiAgICAgICAgICBpZiAocC5ub2RlVHlwZSA9PT0gTm9kZS5URVhUX05PREUpXG4gICAgICAgICAgICBpZiAocC5kYXRhLnRyaW0oKSA9PT0gXCJcIiAmJiAocC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nICYmIGkocC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nKSB8fCBwLm5leHRFbGVtZW50U2libGluZyAmJiBpKHAubmV4dEVsZW1lbnRTaWJsaW5nKSkpIHtcbiAgICAgICAgICAgICAgZi5yZW1vdmVDaGlsZChwKSwgdGhpcy5fc2FuaXRpemUoaCwgZik7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIGlmIChwLm5vZGVUeXBlID09PSBOb2RlLkNPTU1FTlRfTk9ERSkge1xuICAgICAgICAgICAgZi5yZW1vdmVDaGlsZChwKSwgdGhpcy5fc2FuaXRpemUoaCwgZik7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIG0gPSByKHApLCBMO1xuICAgICAgICAgIG0gJiYgKEwgPSBBcnJheS5wcm90b3R5cGUuc29tZS5jYWxsKHAuY2hpbGROb2RlcywgaSkpO1xuICAgICAgICAgIHZhciBBID0gISFmLnBhcmVudE5vZGUsIFMgPSBpKGYpICYmIGkocCkgJiYgQSwgWiA9IHAubm9kZU5hbWUudG9Mb3dlckNhc2UoKSwgSCA9IGwodGhpcy5jb25maWcsIFosIHApLCBVID0gbSAmJiBMO1xuICAgICAgICAgIGlmIChVIHx8IGQocCwgSCkgfHwgIXRoaXMuY29uZmlnLmtlZXBOZXN0ZWRCbG9ja0VsZW1lbnRzICYmIFMpIHtcbiAgICAgICAgICAgIGlmICghKHAubm9kZU5hbWUgPT09IFwiU0NSSVBUXCIgfHwgcC5ub2RlTmFtZSA9PT0gXCJTVFlMRVwiKSlcbiAgICAgICAgICAgICAgZm9yICg7IHAuY2hpbGROb2Rlcy5sZW5ndGggPiAwOyApXG4gICAgICAgICAgICAgICAgZi5pbnNlcnRCZWZvcmUocC5jaGlsZE5vZGVzWzBdLCBwKTtcbiAgICAgICAgICAgIGYucmVtb3ZlQ2hpbGQocCksIHRoaXMuX3Nhbml0aXplKGgsIGYpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZvciAodmFyIEogPSAwOyBKIDwgcC5hdHRyaWJ1dGVzLmxlbmd0aDsgSiArPSAxKSB7XG4gICAgICAgICAgICB2YXIgY2UgPSBwLmF0dHJpYnV0ZXNbSl07XG4gICAgICAgICAgICB1KGNlLCBILCBwKSAmJiAocC5yZW1vdmVBdHRyaWJ1dGUoY2UubmFtZSksIEogPSBKIC0gMSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMuX3Nhbml0aXplKGgsIHApO1xuICAgICAgICB9IHdoaWxlIChwID0geC5uZXh0U2libGluZygpKTtcbiAgICB9O1xuICAgIGZ1bmN0aW9uIGEoaCwgZikge1xuICAgICAgcmV0dXJuIGguY3JlYXRlVHJlZVdhbGtlcihcbiAgICAgICAgZixcbiAgICAgICAgTm9kZUZpbHRlci5TSE9XX1RFWFQgfCBOb2RlRmlsdGVyLlNIT1dfRUxFTUVOVCB8IE5vZGVGaWx0ZXIuU0hPV19DT01NRU5ULFxuICAgICAgICBudWxsLFxuICAgICAgICAhMVxuICAgICAgKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gbChoLCBmLCB4KSB7XG4gICAgICByZXR1cm4gdHlwZW9mIGgudGFnc1tmXSA9PSBcImZ1bmN0aW9uXCIgPyBoLnRhZ3NbZl0oeCkgOiBoLnRhZ3NbZl07XG4gICAgfVxuICAgIGZ1bmN0aW9uIGQoaCwgZikge1xuICAgICAgcmV0dXJuIHR5cGVvZiBmID4gXCJ1XCIgPyAhMCA6IHR5cGVvZiBmID09IFwiYm9vbGVhblwiID8gIWYgOiAhMTtcbiAgICB9XG4gICAgZnVuY3Rpb24gdShoLCBmLCB4KSB7XG4gICAgICB2YXIgcCA9IGgubmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgcmV0dXJuIGYgPT09ICEwID8gITEgOiB0eXBlb2YgZltwXSA9PSBcImZ1bmN0aW9uXCIgPyAhZltwXShoLnZhbHVlLCB4KSA6IHR5cGVvZiBmW3BdID4gXCJ1XCIgfHwgZltwXSA9PT0gITEgPyAhMCA6IHR5cGVvZiBmW3BdID09IFwic3RyaW5nXCIgPyBmW3BdICE9PSBoLnZhbHVlIDogITE7XG4gICAgfVxuICAgIHJldHVybiB0O1xuICB9KTtcbn0pKGZvKTtcbmNvbnN0IGdvID0gT2U7XG5mdW5jdGlvbiBidChzLCBlKSB7XG4gIHJldHVybiBzLm1hcCgodCkgPT4ge1xuICAgIGNvbnN0IG8gPSBNKGUpID8gZSh0LnRvb2wpIDogZTtcbiAgICByZXR1cm4gVyhvKSB8fCAodC5kYXRhID0gemUodC5kYXRhLCBvKSksIHQ7XG4gIH0pO1xufVxuZnVuY3Rpb24gVihzLCBlID0ge30pIHtcbiAgY29uc3QgdCA9IHtcbiAgICB0YWdzOiBlXG4gIH07XG4gIHJldHVybiBuZXcgZ28odCkuY2xlYW4ocyk7XG59XG5mdW5jdGlvbiB6ZShzLCBlKSB7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KHMpID8gYm8ocywgZSkgOiBEKHMpID8gbW8ocywgZSkgOiBHKHMpID8ga28ocywgZSkgOiBzO1xufVxuZnVuY3Rpb24gYm8ocywgZSkge1xuICByZXR1cm4gcy5tYXAoKHQpID0+IHplKHQsIGUpKTtcbn1cbmZ1bmN0aW9uIG1vKHMsIGUpIHtcbiAgY29uc3QgdCA9IHt9O1xuICBmb3IgKGNvbnN0IG8gaW4gcykge1xuICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIG8pKVxuICAgICAgY29udGludWU7XG4gICAgY29uc3QgaSA9IHNbb10sIG4gPSB2byhlW29dKSA/IGVbb10gOiBlO1xuICAgIHRbb10gPSB6ZShpLCBuKTtcbiAgfVxuICByZXR1cm4gdDtcbn1cbmZ1bmN0aW9uIGtvKHMsIGUpIHtcbiAgcmV0dXJuIEQoZSkgPyBWKHMsIGUpIDogZSA9PT0gITEgPyBWKHMsIHt9KSA6IHM7XG59XG5mdW5jdGlvbiB2byhzKSB7XG4gIHJldHVybiBEKHMpIHx8IEh0KHMpIHx8IE0ocyk7XG59XG5jbGFzcyB4byBleHRlbmRzIHkge1xuICAvKipcbiAgICogQXZhaWxhYmxlIG1ldGhvZHNcbiAgICpcbiAgICogQHJldHVybnMge1Nhbml0aXplckNvbmZpZ31cbiAgICovXG4gIGdldCBtZXRob2RzKCkge1xuICAgIHJldHVybiB7XG4gICAgICBjbGVhbjogKGUsIHQpID0+IHRoaXMuY2xlYW4oZSwgdClcbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBQZXJmb3JtIHNhbml0aXppbmcgb2YgYSBzdHJpbmdcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRhaW50U3RyaW5nIC0gd2hhdCB0byBzYW5pdGl6ZVxuICAgKiBAcGFyYW0ge1Nhbml0aXplckNvbmZpZ30gY29uZmlnIC0gc2FuaXRpemVyIGNvbmZpZ1xuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKi9cbiAgY2xlYW4oZSwgdCkge1xuICAgIHJldHVybiBWKGUsIHQpO1xuICB9XG59XG5jbGFzcyB3byBleHRlbmRzIHkge1xuICAvKipcbiAgICogQXZhaWxhYmxlIG1ldGhvZHNcbiAgICpcbiAgICogQHJldHVybnMge1NhdmVyfVxuICAgKi9cbiAgZ2V0IG1ldGhvZHMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHNhdmU6ICgpID0+IHRoaXMuc2F2ZSgpXG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJuIEVkaXRvcidzIGRhdGFcbiAgICpcbiAgICogQHJldHVybnMge091dHB1dERhdGF9XG4gICAqL1xuICBzYXZlKCkge1xuICAgIGNvbnN0IGUgPSBcIkVkaXRvcidzIGNvbnRlbnQgY2FuIG5vdCBiZSBzYXZlZCBpbiByZWFkLW9ubHkgbW9kZVwiO1xuICAgIHJldHVybiB0aGlzLkVkaXRvci5SZWFkT25seS5pc0VuYWJsZWQgPyAoWShlLCBcIndhcm5cIiksIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihlKSkpIDogdGhpcy5FZGl0b3IuU2F2ZXIuc2F2ZSgpO1xuICB9XG59XG5jbGFzcyB5byBleHRlbmRzIHkge1xuICAvKipcbiAgICogQXZhaWxhYmxlIG1ldGhvZHNcbiAgICpcbiAgICogQHJldHVybnMge1NlbGVjdGlvbkFQSUludGVyZmFjZX1cbiAgICovXG4gIGdldCBtZXRob2RzKCkge1xuICAgIHJldHVybiB7XG4gICAgICBmaW5kUGFyZW50VGFnOiAoZSwgdCkgPT4gdGhpcy5maW5kUGFyZW50VGFnKGUsIHQpLFxuICAgICAgZXhwYW5kVG9UYWc6IChlKSA9PiB0aGlzLmV4cGFuZFRvVGFnKGUpXG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogTG9va3MgYWhlYWQgZnJvbSBzZWxlY3Rpb24gYW5kIGZpbmQgcGFzc2VkIHRhZyB3aXRoIGNsYXNzIG5hbWVcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRhZ05hbWUgLSB0YWcgdG8gZmluZFxuICAgKiBAcGFyYW0ge3N0cmluZ30gY2xhc3NOYW1lIC0gdGFnJ3MgY2xhc3MgbmFtZVxuICAgKiBAcmV0dXJucyB7SFRNTEVsZW1lbnR8bnVsbH1cbiAgICovXG4gIGZpbmRQYXJlbnRUYWcoZSwgdCkge1xuICAgIHJldHVybiBuZXcgYigpLmZpbmRQYXJlbnRUYWcoZSwgdCk7XG4gIH1cbiAgLyoqXG4gICAqIEV4cGFuZCBzZWxlY3Rpb24gdG8gcGFzc2VkIHRhZ1xuICAgKlxuICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBub2RlIC0gdGFnIHRoYXQgc2hvdWxkIGNvbnRhaW4gc2VsZWN0aW9uXG4gICAqL1xuICBleHBhbmRUb1RhZyhlKSB7XG4gICAgbmV3IGIoKS5leHBhbmRUb1RhZyhlKTtcbiAgfVxufVxuY2xhc3MgRW8gZXh0ZW5kcyB5IHtcbiAgLyoqXG4gICAqIEV4cG9ydGVkIGNsYXNzZXNcbiAgICovXG4gIGdldCBjbGFzc2VzKCkge1xuICAgIHJldHVybiB7XG4gICAgICAvKipcbiAgICAgICAqIEJhc2UgQmxvY2sgc3R5bGVzXG4gICAgICAgKi9cbiAgICAgIGJsb2NrOiBcImNkeC1ibG9ja1wiLFxuICAgICAgLyoqXG4gICAgICAgKiBJbmxpbmUgVG9vbHMgc3R5bGVzXG4gICAgICAgKi9cbiAgICAgIGlubGluZVRvb2xCdXR0b246IFwiY2UtaW5saW5lLXRvb2xcIixcbiAgICAgIGlubGluZVRvb2xCdXR0b25BY3RpdmU6IFwiY2UtaW5saW5lLXRvb2wtLWFjdGl2ZVwiLFxuICAgICAgLyoqXG4gICAgICAgKiBVSSBlbGVtZW50c1xuICAgICAgICovXG4gICAgICBpbnB1dDogXCJjZHgtaW5wdXRcIixcbiAgICAgIGxvYWRlcjogXCJjZHgtbG9hZGVyXCIsXG4gICAgICBidXR0b246IFwiY2R4LWJ1dHRvblwiLFxuICAgICAgLyoqXG4gICAgICAgKiBTZXR0aW5ncyBzdHlsZXNcbiAgICAgICAqL1xuICAgICAgc2V0dGluZ3NCdXR0b246IFwiY2R4LXNldHRpbmdzLWJ1dHRvblwiLFxuICAgICAgc2V0dGluZ3NCdXR0b25BY3RpdmU6IFwiY2R4LXNldHRpbmdzLWJ1dHRvbi0tYWN0aXZlXCJcbiAgICB9O1xuICB9XG59XG5jbGFzcyBCbyBleHRlbmRzIHkge1xuICAvKipcbiAgICogQXZhaWxhYmxlIG1ldGhvZHNcbiAgICpcbiAgICogQHJldHVybnMge1Rvb2xiYXJ9XG4gICAqL1xuICBnZXQgbWV0aG9kcygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgY2xvc2U6ICgpID0+IHRoaXMuY2xvc2UoKSxcbiAgICAgIG9wZW46ICgpID0+IHRoaXMub3BlbigpLFxuICAgICAgdG9nZ2xlQmxvY2tTZXR0aW5nczogKGUpID0+IHRoaXMudG9nZ2xlQmxvY2tTZXR0aW5ncyhlKSxcbiAgICAgIHRvZ2dsZVRvb2xib3g6IChlKSA9PiB0aGlzLnRvZ2dsZVRvb2xib3goZSlcbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBPcGVuIHRvb2xiYXJcbiAgICovXG4gIG9wZW4oKSB7XG4gICAgdGhpcy5FZGl0b3IuVG9vbGJhci5tb3ZlQW5kT3BlbigpO1xuICB9XG4gIC8qKlxuICAgKiBDbG9zZSB0b29sYmFyIGFuZCBhbGwgaW5jbHVkZWQgZWxlbWVudHNcbiAgICovXG4gIGNsb3NlKCkge1xuICAgIHRoaXMuRWRpdG9yLlRvb2xiYXIuY2xvc2UoKTtcbiAgfVxuICAvKipcbiAgICogVG9nZ2xlcyBCbG9jayBTZXR0aW5nIG9mIHRoZSBjdXJyZW50IGJsb2NrXG4gICAqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gb3BlbmluZ1N0YXRlIOKAlCAgb3BlbmluZyBzdGF0ZSBvZiBCbG9jayBTZXR0aW5nXG4gICAqL1xuICB0b2dnbGVCbG9ja1NldHRpbmdzKGUpIHtcbiAgICBpZiAodGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLmN1cnJlbnRCbG9ja0luZGV4ID09PSAtMSkge1xuICAgICAgWShcIkNvdWxkJ3QgdG9nZ2xlIHRoZSBUb29sYmFyIGJlY2F1c2UgdGhlcmUgaXMgbm8gYmxvY2sgc2VsZWN0ZWQgXCIsIFwid2FyblwiKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZSA/PyAhdGhpcy5FZGl0b3IuQmxvY2tTZXR0aW5ncy5vcGVuZWQgPyAodGhpcy5FZGl0b3IuVG9vbGJhci5tb3ZlQW5kT3BlbigpLCB0aGlzLkVkaXRvci5CbG9ja1NldHRpbmdzLm9wZW4oKSkgOiB0aGlzLkVkaXRvci5CbG9ja1NldHRpbmdzLmNsb3NlKCk7XG4gIH1cbiAgLyoqXG4gICAqIE9wZW4gdG9vbGJveFxuICAgKlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IG9wZW5pbmdTdGF0ZSAtIE9wZW5pbmcgc3RhdGUgb2YgdG9vbGJveFxuICAgKi9cbiAgdG9nZ2xlVG9vbGJveChlKSB7XG4gICAgaWYgKHRoaXMuRWRpdG9yLkJsb2NrTWFuYWdlci5jdXJyZW50QmxvY2tJbmRleCA9PT0gLTEpIHtcbiAgICAgIFkoXCJDb3VsZCd0IHRvZ2dsZSB0aGUgVG9vbGJveCBiZWNhdXNlIHRoZXJlIGlzIG5vIGJsb2NrIHNlbGVjdGVkIFwiLCBcIndhcm5cIik7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGUgPz8gIXRoaXMuRWRpdG9yLlRvb2xiYXIudG9vbGJveC5vcGVuZWQgPyAodGhpcy5FZGl0b3IuVG9vbGJhci5tb3ZlQW5kT3BlbigpLCB0aGlzLkVkaXRvci5Ub29sYmFyLnRvb2xib3gub3BlbigpKSA6IHRoaXMuRWRpdG9yLlRvb2xiYXIudG9vbGJveC5jbG9zZSgpO1xuICB9XG59XG52YXIgTmUgPSB7fSwgQ28gPSB7XG4gIGdldCBleHBvcnRzKCkge1xuICAgIHJldHVybiBOZTtcbiAgfSxcbiAgc2V0IGV4cG9ydHMocykge1xuICAgIE5lID0gcztcbiAgfVxufTtcbi8qIVxuICogQ29kZVguVG9vbHRpcHNcbiAqIFxuICogQHZlcnNpb24gMS4wLjVcbiAqIFxuICogQGxpY2VuY2UgTUlUXG4gKiBAYXV0aG9yIENvZGVYIDxodHRwczovL2NvZGV4LnNvPlxuICogXG4gKiBcbiAqL1xuKGZ1bmN0aW9uKHMsIGUpIHtcbiAgKGZ1bmN0aW9uKHQsIG8pIHtcbiAgICBzLmV4cG9ydHMgPSBvKCk7XG4gIH0pKHdpbmRvdywgZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICAgIHZhciBvID0ge307XG4gICAgICBmdW5jdGlvbiBpKG4pIHtcbiAgICAgICAgaWYgKG9bbl0pXG4gICAgICAgICAgcmV0dXJuIG9bbl0uZXhwb3J0cztcbiAgICAgICAgdmFyIHIgPSBvW25dID0geyBpOiBuLCBsOiAhMSwgZXhwb3J0czoge30gfTtcbiAgICAgICAgcmV0dXJuIHRbbl0uY2FsbChyLmV4cG9ydHMsIHIsIHIuZXhwb3J0cywgaSksIHIubCA9ICEwLCByLmV4cG9ydHM7XG4gICAgICB9XG4gICAgICByZXR1cm4gaS5tID0gdCwgaS5jID0gbywgaS5kID0gZnVuY3Rpb24obiwgciwgYSkge1xuICAgICAgICBpLm8obiwgcikgfHwgT2JqZWN0LmRlZmluZVByb3BlcnR5KG4sIHIsIHsgZW51bWVyYWJsZTogITAsIGdldDogYSB9KTtcbiAgICAgIH0sIGkuciA9IGZ1bmN0aW9uKG4pIHtcbiAgICAgICAgdHlwZW9mIFN5bWJvbCA8IFwidVwiICYmIFN5bWJvbC50b1N0cmluZ1RhZyAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkobiwgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiBcIk1vZHVsZVwiIH0pLCBPYmplY3QuZGVmaW5lUHJvcGVydHkobiwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6ICEwIH0pO1xuICAgICAgfSwgaS50ID0gZnVuY3Rpb24obiwgcikge1xuICAgICAgICBpZiAoMSAmIHIgJiYgKG4gPSBpKG4pKSwgOCAmIHIgfHwgNCAmIHIgJiYgdHlwZW9mIG4gPT0gXCJvYmplY3RcIiAmJiBuICYmIG4uX19lc01vZHVsZSlcbiAgICAgICAgICByZXR1cm4gbjtcbiAgICAgICAgdmFyIGEgPSAvKiBAX19QVVJFX18gKi8gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgaWYgKGkucihhKSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KGEsIFwiZGVmYXVsdFwiLCB7IGVudW1lcmFibGU6ICEwLCB2YWx1ZTogbiB9KSwgMiAmIHIgJiYgdHlwZW9mIG4gIT0gXCJzdHJpbmdcIilcbiAgICAgICAgICBmb3IgKHZhciBsIGluIG4pXG4gICAgICAgICAgICBpLmQoYSwgbCwgZnVuY3Rpb24oZCkge1xuICAgICAgICAgICAgICByZXR1cm4gbltkXTtcbiAgICAgICAgICAgIH0uYmluZChudWxsLCBsKSk7XG4gICAgICAgIHJldHVybiBhO1xuICAgICAgfSwgaS5uID0gZnVuY3Rpb24obikge1xuICAgICAgICB2YXIgciA9IG4gJiYgbi5fX2VzTW9kdWxlID8gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIG4uZGVmYXVsdDtcbiAgICAgICAgfSA6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBuO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gaS5kKHIsIFwiYVwiLCByKSwgcjtcbiAgICAgIH0sIGkubyA9IGZ1bmN0aW9uKG4sIHIpIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChuLCByKTtcbiAgICAgIH0sIGkucCA9IFwiXCIsIGkoaS5zID0gMCk7XG4gICAgfShbZnVuY3Rpb24odCwgbywgaSkge1xuICAgICAgdC5leHBvcnRzID0gaSgxKTtcbiAgICB9LCBmdW5jdGlvbih0LCBvLCBpKSB7XG4gICAgICBpLnIobyksIGkuZChvLCBcImRlZmF1bHRcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBuO1xuICAgICAgfSk7XG4gICAgICBjbGFzcyBuIHtcbiAgICAgICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgICAgdGhpcy5ub2RlcyA9IHsgd3JhcHBlcjogbnVsbCwgY29udGVudDogbnVsbCB9LCB0aGlzLnNob3dlZCA9ICExLCB0aGlzLm9mZnNldFRvcCA9IDEwLCB0aGlzLm9mZnNldExlZnQgPSAxMCwgdGhpcy5vZmZzZXRSaWdodCA9IDEwLCB0aGlzLmhpZGluZ0RlbGF5ID0gMCwgdGhpcy5oYW5kbGVXaW5kb3dTY3JvbGwgPSAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnNob3dlZCAmJiB0aGlzLmhpZGUoITApO1xuICAgICAgICAgIH0sIHRoaXMubG9hZFN0eWxlcygpLCB0aGlzLnByZXBhcmUoKSwgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJzY3JvbGxcIiwgdGhpcy5oYW5kbGVXaW5kb3dTY3JvbGwsIHsgcGFzc2l2ZTogITAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZ2V0IENTUygpIHtcbiAgICAgICAgICByZXR1cm4geyB0b29sdGlwOiBcImN0XCIsIHRvb2x0aXBDb250ZW50OiBcImN0X19jb250ZW50XCIsIHRvb2x0aXBTaG93bjogXCJjdC0tc2hvd25cIiwgcGxhY2VtZW50OiB7IGxlZnQ6IFwiY3QtLWxlZnRcIiwgYm90dG9tOiBcImN0LS1ib3R0b21cIiwgcmlnaHQ6IFwiY3QtLXJpZ2h0XCIsIHRvcDogXCJjdC0tdG9wXCIgfSB9O1xuICAgICAgICB9XG4gICAgICAgIHNob3coYSwgbCwgZCkge1xuICAgICAgICAgIHRoaXMubm9kZXMud3JhcHBlciB8fCB0aGlzLnByZXBhcmUoKSwgdGhpcy5oaWRpbmdUaW1lb3V0ICYmIGNsZWFyVGltZW91dCh0aGlzLmhpZGluZ1RpbWVvdXQpO1xuICAgICAgICAgIGNvbnN0IHUgPSBPYmplY3QuYXNzaWduKHsgcGxhY2VtZW50OiBcImJvdHRvbVwiLCBtYXJnaW5Ub3A6IDAsIG1hcmdpbkxlZnQ6IDAsIG1hcmdpblJpZ2h0OiAwLCBtYXJnaW5Cb3R0b206IDAsIGRlbGF5OiA3MCwgaGlkaW5nRGVsYXk6IDAgfSwgZCk7XG4gICAgICAgICAgaWYgKHUuaGlkaW5nRGVsYXkgJiYgKHRoaXMuaGlkaW5nRGVsYXkgPSB1LmhpZGluZ0RlbGF5KSwgdGhpcy5ub2Rlcy5jb250ZW50LmlubmVySFRNTCA9IFwiXCIsIHR5cGVvZiBsID09IFwic3RyaW5nXCIpXG4gICAgICAgICAgICB0aGlzLm5vZGVzLmNvbnRlbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUobCkpO1xuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKCEobCBpbnN0YW5jZW9mIE5vZGUpKVxuICAgICAgICAgICAgICB0aHJvdyBFcnJvcihcIltDb2RlWCBUb29sdGlwXSBXcm9uZyB0eXBlIG9mIMKrY29udGVudMK7IHBhc3NlZC4gSXQgc2hvdWxkIGJlIGFuIGluc3RhbmNlIG9mIE5vZGUgb3IgU3RyaW5nLiBCdXQgXCIgKyB0eXBlb2YgbCArIFwiIGdpdmVuLlwiKTtcbiAgICAgICAgICAgIHRoaXMubm9kZXMuY29udGVudC5hcHBlbmRDaGlsZChsKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgc3dpdGNoICh0aGlzLm5vZGVzLndyYXBwZXIuY2xhc3NMaXN0LnJlbW92ZSguLi5PYmplY3QudmFsdWVzKHRoaXMuQ1NTLnBsYWNlbWVudCkpLCB1LnBsYWNlbWVudCkge1xuICAgICAgICAgICAgY2FzZSBcInRvcFwiOlxuICAgICAgICAgICAgICB0aGlzLnBsYWNlVG9wKGEsIHUpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJsZWZ0XCI6XG4gICAgICAgICAgICAgIHRoaXMucGxhY2VMZWZ0KGEsIHUpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJyaWdodFwiOlxuICAgICAgICAgICAgICB0aGlzLnBsYWNlUmlnaHQoYSwgdSk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcImJvdHRvbVwiOlxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgdGhpcy5wbGFjZUJvdHRvbShhLCB1KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdSAmJiB1LmRlbGF5ID8gdGhpcy5zaG93aW5nVGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5ub2Rlcy53cmFwcGVyLmNsYXNzTGlzdC5hZGQodGhpcy5DU1MudG9vbHRpcFNob3duKSwgdGhpcy5zaG93ZWQgPSAhMDtcbiAgICAgICAgICB9LCB1LmRlbGF5KSA6ICh0aGlzLm5vZGVzLndyYXBwZXIuY2xhc3NMaXN0LmFkZCh0aGlzLkNTUy50b29sdGlwU2hvd24pLCB0aGlzLnNob3dlZCA9ICEwKTtcbiAgICAgICAgfVxuICAgICAgICBoaWRlKGEgPSAhMSkge1xuICAgICAgICAgIGlmICh0aGlzLmhpZGluZ0RlbGF5ICYmICFhKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaGlkaW5nVGltZW91dCAmJiBjbGVhclRpbWVvdXQodGhpcy5oaWRpbmdUaW1lb3V0KSwgdm9pZCAodGhpcy5oaWRpbmdUaW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgIHRoaXMuaGlkZSghMCk7XG4gICAgICAgICAgICB9LCB0aGlzLmhpZGluZ0RlbGF5KSk7XG4gICAgICAgICAgdGhpcy5ub2Rlcy53cmFwcGVyLmNsYXNzTGlzdC5yZW1vdmUodGhpcy5DU1MudG9vbHRpcFNob3duKSwgdGhpcy5zaG93ZWQgPSAhMSwgdGhpcy5zaG93aW5nVGltZW91dCAmJiBjbGVhclRpbWVvdXQodGhpcy5zaG93aW5nVGltZW91dCk7XG4gICAgICAgIH1cbiAgICAgICAgb25Ib3ZlcihhLCBsLCBkKSB7XG4gICAgICAgICAgYS5hZGRFdmVudExpc3RlbmVyKFwibW91c2VlbnRlclwiLCAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnNob3coYSwgbCwgZCk7XG4gICAgICAgICAgfSksIGEuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlbGVhdmVcIiwgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5oaWRlKCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZGVzdHJveSgpIHtcbiAgICAgICAgICB0aGlzLm5vZGVzLndyYXBwZXIucmVtb3ZlKCksIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwic2Nyb2xsXCIsIHRoaXMuaGFuZGxlV2luZG93U2Nyb2xsKTtcbiAgICAgICAgfVxuICAgICAgICBwcmVwYXJlKCkge1xuICAgICAgICAgIHRoaXMubm9kZXMud3JhcHBlciA9IHRoaXMubWFrZShcImRpdlwiLCB0aGlzLkNTUy50b29sdGlwKSwgdGhpcy5ub2Rlcy5jb250ZW50ID0gdGhpcy5tYWtlKFwiZGl2XCIsIHRoaXMuQ1NTLnRvb2x0aXBDb250ZW50KSwgdGhpcy5hcHBlbmQodGhpcy5ub2Rlcy53cmFwcGVyLCB0aGlzLm5vZGVzLmNvbnRlbnQpLCB0aGlzLmFwcGVuZChkb2N1bWVudC5ib2R5LCB0aGlzLm5vZGVzLndyYXBwZXIpO1xuICAgICAgICB9XG4gICAgICAgIGxvYWRTdHlsZXMoKSB7XG4gICAgICAgICAgY29uc3QgYSA9IFwiY29kZXgtdG9vbHRpcHMtc3R5bGVcIjtcbiAgICAgICAgICBpZiAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYSkpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgY29uc3QgbCA9IGkoMiksIGQgPSB0aGlzLm1ha2UoXCJzdHlsZVwiLCBudWxsLCB7IHRleHRDb250ZW50OiBsLnRvU3RyaW5nKCksIGlkOiBhIH0pO1xuICAgICAgICAgIHRoaXMucHJlcGVuZChkb2N1bWVudC5oZWFkLCBkKTtcbiAgICAgICAgfVxuICAgICAgICBwbGFjZUJvdHRvbShhLCBsKSB7XG4gICAgICAgICAgY29uc3QgZCA9IGEuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksIHUgPSBkLmxlZnQgKyBhLmNsaWVudFdpZHRoIC8gMiAtIHRoaXMubm9kZXMud3JhcHBlci5vZmZzZXRXaWR0aCAvIDIsIGggPSBkLmJvdHRvbSArIHdpbmRvdy5wYWdlWU9mZnNldCArIHRoaXMub2Zmc2V0VG9wICsgbC5tYXJnaW5Ub3A7XG4gICAgICAgICAgdGhpcy5hcHBseVBsYWNlbWVudChcImJvdHRvbVwiLCB1LCBoKTtcbiAgICAgICAgfVxuICAgICAgICBwbGFjZVRvcChhLCBsKSB7XG4gICAgICAgICAgY29uc3QgZCA9IGEuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksIHUgPSBkLmxlZnQgKyBhLmNsaWVudFdpZHRoIC8gMiAtIHRoaXMubm9kZXMud3JhcHBlci5vZmZzZXRXaWR0aCAvIDIsIGggPSBkLnRvcCArIHdpbmRvdy5wYWdlWU9mZnNldCAtIHRoaXMubm9kZXMud3JhcHBlci5jbGllbnRIZWlnaHQgLSB0aGlzLm9mZnNldFRvcDtcbiAgICAgICAgICB0aGlzLmFwcGx5UGxhY2VtZW50KFwidG9wXCIsIHUsIGgpO1xuICAgICAgICB9XG4gICAgICAgIHBsYWNlTGVmdChhLCBsKSB7XG4gICAgICAgICAgY29uc3QgZCA9IGEuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksIHUgPSBkLmxlZnQgLSB0aGlzLm5vZGVzLndyYXBwZXIub2Zmc2V0V2lkdGggLSB0aGlzLm9mZnNldExlZnQgLSBsLm1hcmdpbkxlZnQsIGggPSBkLnRvcCArIHdpbmRvdy5wYWdlWU9mZnNldCArIGEuY2xpZW50SGVpZ2h0IC8gMiAtIHRoaXMubm9kZXMud3JhcHBlci5vZmZzZXRIZWlnaHQgLyAyO1xuICAgICAgICAgIHRoaXMuYXBwbHlQbGFjZW1lbnQoXCJsZWZ0XCIsIHUsIGgpO1xuICAgICAgICB9XG4gICAgICAgIHBsYWNlUmlnaHQoYSwgbCkge1xuICAgICAgICAgIGNvbnN0IGQgPSBhLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLCB1ID0gZC5yaWdodCArIHRoaXMub2Zmc2V0UmlnaHQgKyBsLm1hcmdpblJpZ2h0LCBoID0gZC50b3AgKyB3aW5kb3cucGFnZVlPZmZzZXQgKyBhLmNsaWVudEhlaWdodCAvIDIgLSB0aGlzLm5vZGVzLndyYXBwZXIub2Zmc2V0SGVpZ2h0IC8gMjtcbiAgICAgICAgICB0aGlzLmFwcGx5UGxhY2VtZW50KFwicmlnaHRcIiwgdSwgaCk7XG4gICAgICAgIH1cbiAgICAgICAgYXBwbHlQbGFjZW1lbnQoYSwgbCwgZCkge1xuICAgICAgICAgIHRoaXMubm9kZXMud3JhcHBlci5jbGFzc0xpc3QuYWRkKHRoaXMuQ1NTLnBsYWNlbWVudFthXSksIHRoaXMubm9kZXMud3JhcHBlci5zdHlsZS5sZWZ0ID0gbCArIFwicHhcIiwgdGhpcy5ub2Rlcy53cmFwcGVyLnN0eWxlLnRvcCA9IGQgKyBcInB4XCI7XG4gICAgICAgIH1cbiAgICAgICAgbWFrZShhLCBsID0gbnVsbCwgZCA9IHt9KSB7XG4gICAgICAgICAgY29uc3QgdSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoYSk7XG4gICAgICAgICAgQXJyYXkuaXNBcnJheShsKSA/IHUuY2xhc3NMaXN0LmFkZCguLi5sKSA6IGwgJiYgdS5jbGFzc0xpc3QuYWRkKGwpO1xuICAgICAgICAgIGZvciAoY29uc3QgaCBpbiBkKVxuICAgICAgICAgICAgZC5oYXNPd25Qcm9wZXJ0eShoKSAmJiAodVtoXSA9IGRbaF0pO1xuICAgICAgICAgIHJldHVybiB1O1xuICAgICAgICB9XG4gICAgICAgIGFwcGVuZChhLCBsKSB7XG4gICAgICAgICAgQXJyYXkuaXNBcnJheShsKSA/IGwuZm9yRWFjaCgoZCkgPT4gYS5hcHBlbmRDaGlsZChkKSkgOiBhLmFwcGVuZENoaWxkKGwpO1xuICAgICAgICB9XG4gICAgICAgIHByZXBlbmQoYSwgbCkge1xuICAgICAgICAgIEFycmF5LmlzQXJyYXkobCkgPyAobCA9IGwucmV2ZXJzZSgpKS5mb3JFYWNoKChkKSA9PiBhLnByZXBlbmQoZCkpIDogYS5wcmVwZW5kKGwpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwgZnVuY3Rpb24odCwgbykge1xuICAgICAgdC5leHBvcnRzID0gYC5jdHt6LWluZGV4Ojk5OTtvcGFjaXR5OjA7LXdlYmtpdC11c2VyLXNlbGVjdDpub25lOy1tb3otdXNlci1zZWxlY3Q6bm9uZTstbXMtdXNlci1zZWxlY3Q6bm9uZTt1c2VyLXNlbGVjdDpub25lO3BvaW50ZXItZXZlbnRzOm5vbmU7LXdlYmtpdC10cmFuc2l0aW9uOm9wYWNpdHkgNTBtcyBlYXNlLWluLC13ZWJraXQtdHJhbnNmb3JtIDcwbXMgY3ViaWMtYmV6aWVyKC4yMTUsLjYxLC4zNTUsMSk7dHJhbnNpdGlvbjpvcGFjaXR5IDUwbXMgZWFzZS1pbiwtd2Via2l0LXRyYW5zZm9ybSA3MG1zIGN1YmljLWJlemllciguMjE1LC42MSwuMzU1LDEpO3RyYW5zaXRpb246b3BhY2l0eSA1MG1zIGVhc2UtaW4sdHJhbnNmb3JtIDcwbXMgY3ViaWMtYmV6aWVyKC4yMTUsLjYxLC4zNTUsMSk7dHJhbnNpdGlvbjpvcGFjaXR5IDUwbXMgZWFzZS1pbix0cmFuc2Zvcm0gNzBtcyBjdWJpYy1iZXppZXIoLjIxNSwuNjEsLjM1NSwxKSwtd2Via2l0LXRyYW5zZm9ybSA3MG1zIGN1YmljLWJlemllciguMjE1LC42MSwuMzU1LDEpO3dpbGwtY2hhbmdlOm9wYWNpdHksdG9wLGxlZnQ7LXdlYmtpdC1ib3gtc2hhZG93OjAgOHB4IDEycHggMCByZ2JhKDI5LDMyLDQzLC4xNyksMCA0cHggNXB4IC0zcHggcmdiYSg1LDYsMTIsLjQ5KTtib3gtc2hhZG93OjAgOHB4IDEycHggMCByZ2JhKDI5LDMyLDQzLC4xNyksMCA0cHggNXB4IC0zcHggcmdiYSg1LDYsMTIsLjQ5KTtib3JkZXItcmFkaXVzOjlweH0uY3QsLmN0OmJlZm9yZXtwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MDtsZWZ0OjB9LmN0OmJlZm9yZXtjb250ZW50OlwiXCI7Ym90dG9tOjA7cmlnaHQ6MDtiYWNrZ3JvdW5kLWNvbG9yOiMxZDIwMmI7ei1pbmRleDotMTtib3JkZXItcmFkaXVzOjRweH1Ac3VwcG9ydHMoLXdlYmtpdC1tYXNrLWJveC1pbWFnZTp1cmwoXCJcIikpey5jdDpiZWZvcmV7Ym9yZGVyLXJhZGl1czowOy13ZWJraXQtbWFzay1ib3gtaW1hZ2U6dXJsKCdkYXRhOmltYWdlL3N2Zyt4bWw7Y2hhcnNldD11dGYtOCw8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB3aWR0aD1cIjI0XCIgaGVpZ2h0PVwiMjRcIj48cGF0aCBkPVwiTTEwLjcxIDBoMi41OGMzLjAyIDAgNC42NC40MiA2LjEgMS4yYTguMTggOC4xOCAwIDAxMy40IDMuNEMyMy42IDYuMDcgMjQgNy43IDI0IDEwLjcxdjIuNThjMCAzLjAyLS40MiA0LjY0LTEuMiA2LjFhOC4xOCA4LjE4IDAgMDEtMy40IDMuNGMtMS40Ny44LTMuMSAxLjIxLTYuMTEgMS4yMUgxMC43Yy0zLjAyIDAtNC42NC0uNDItNi4xLTEuMmE4LjE4IDguMTggMCAwMS0zLjQtMy40Qy40IDE3LjkzIDAgMTYuMyAwIDEzLjI5VjEwLjdjMC0zLjAyLjQyLTQuNjQgMS4yLTYuMWE4LjE4IDguMTggMCAwMTMuNC0zLjRDNi4wNy40IDcuNyAwIDEwLjcxIDB6XCIvPjwvc3ZnPicpIDQ4JSA0MSUgMzcuOSUgNTMuMyV9fUBtZWRpYSAoLS1tb2JpbGUpey5jdHtkaXNwbGF5Om5vbmV9fS5jdF9fY29udGVudHtwYWRkaW5nOjZweCAxMHB4O2NvbG9yOiNjZGQxZTA7Zm9udC1zaXplOjEycHg7dGV4dC1hbGlnbjpjZW50ZXI7bGV0dGVyLXNwYWNpbmc6LjAyZW07bGluZS1oZWlnaHQ6MWVtfS5jdDphZnRlcntjb250ZW50OlwiXCI7d2lkdGg6OHB4O2hlaWdodDo4cHg7cG9zaXRpb246YWJzb2x1dGU7YmFja2dyb3VuZC1jb2xvcjojMWQyMDJiO3otaW5kZXg6LTF9LmN0LS1ib3R0b217LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSg1cHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVZKDVweCl9LmN0LS1ib3R0b206YWZ0ZXJ7dG9wOi0zcHg7bGVmdDo1MCU7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgtNTAlKSByb3RhdGUoLTQ1ZGVnKTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgtNTAlKSByb3RhdGUoLTQ1ZGVnKX0uY3QtLXRvcHstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKC01cHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVZKC01cHgpfS5jdC0tdG9wOmFmdGVye3RvcDphdXRvO2JvdHRvbTotM3B4O2xlZnQ6NTAlOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTUwJSkgcm90YXRlKC00NWRlZyk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTUwJSkgcm90YXRlKC00NWRlZyl9LmN0LS1sZWZ0ey13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTVweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTVweCl9LmN0LS1sZWZ0OmFmdGVye3RvcDo1MCU7bGVmdDphdXRvO3JpZ2h0OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlKDQxLjYlLC01MCUpIHJvdGF0ZSgtNDVkZWcpO3RyYW5zZm9ybTp0cmFuc2xhdGUoNDEuNiUsLTUwJSkgcm90YXRlKC00NWRlZyl9LmN0LS1yaWdodHstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDVweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoNXB4KX0uY3QtLXJpZ2h0OmFmdGVye3RvcDo1MCU7bGVmdDowOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZSgtNDEuNiUsLTUwJSkgcm90YXRlKC00NWRlZyk7dHJhbnNmb3JtOnRyYW5zbGF0ZSgtNDEuNiUsLTUwJSkgcm90YXRlKC00NWRlZyl9LmN0LS1zaG93bntvcGFjaXR5OjE7LXdlYmtpdC10cmFuc2Zvcm06bm9uZTt0cmFuc2Zvcm06bm9uZX1gO1xuICAgIH1dKS5kZWZhdWx0O1xuICB9KTtcbn0pKENvKTtcbmNvbnN0IFRvID0gLyogQF9fUFVSRV9fICovIFBlKE5lKTtcbmxldCBGID0gbnVsbDtcbmZ1bmN0aW9uIFVlKCkge1xuICBGIHx8IChGID0gbmV3IFRvKCkpO1xufVxuZnVuY3Rpb24gU28ocywgZSwgdCkge1xuICBVZSgpLCBGID09IG51bGwgfHwgRi5zaG93KHMsIGUsIHQpO1xufVxuZnVuY3Rpb24gUmUocyA9ICExKSB7XG4gIFVlKCksIEYgPT0gbnVsbCB8fCBGLmhpZGUocyk7XG59XG5mdW5jdGlvbiBnZShzLCBlLCB0KSB7XG4gIFVlKCksIEYgPT0gbnVsbCB8fCBGLm9uSG92ZXIocywgZSwgdCk7XG59XG5mdW5jdGlvbiBJbygpIHtcbiAgRiA9PSBudWxsIHx8IEYuZGVzdHJveSgpLCBGID0gbnVsbDtcbn1cbmNsYXNzIE1vIGV4dGVuZHMgeSB7XG4gIC8qKlxuICAgKiBAY2xhc3NcbiAgICogQHBhcmFtIG1vZHVsZUNvbmZpZ3VyYXRpb24gLSBNb2R1bGUgQ29uZmlndXJhdGlvblxuICAgKiBAcGFyYW0gbW9kdWxlQ29uZmlndXJhdGlvbi5jb25maWcgLSBFZGl0b3IncyBjb25maWdcbiAgICogQHBhcmFtIG1vZHVsZUNvbmZpZ3VyYXRpb24uZXZlbnRzRGlzcGF0Y2hlciAtIEVkaXRvcidzIGV2ZW50IGRpc3BhdGNoZXJcbiAgICovXG4gIGNvbnN0cnVjdG9yKHsgY29uZmlnOiBlLCBldmVudHNEaXNwYXRjaGVyOiB0IH0pIHtcbiAgICBzdXBlcih7XG4gICAgICBjb25maWc6IGUsXG4gICAgICBldmVudHNEaXNwYXRjaGVyOiB0XG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIEF2YWlsYWJsZSBtZXRob2RzXG4gICAqL1xuICBnZXQgbWV0aG9kcygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgc2hvdzogKGUsIHQsIG8pID0+IHRoaXMuc2hvdyhlLCB0LCBvKSxcbiAgICAgIGhpZGU6ICgpID0+IHRoaXMuaGlkZSgpLFxuICAgICAgb25Ib3ZlcjogKGUsIHQsIG8pID0+IHRoaXMub25Ib3ZlcihlLCB0LCBvKVxuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIE1ldGhvZCBzaG93IHRvb2x0aXAgb24gZWxlbWVudCB3aXRoIHBhc3NlZCBIVE1MIGNvbnRlbnRcbiAgICpcbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWxlbWVudCAtIGVsZW1lbnQgb24gd2hpY2ggdG9vbHRpcCBzaG91bGQgYmUgc2hvd25cbiAgICogQHBhcmFtIHtUb29sdGlwQ29udGVudH0gY29udGVudCAtIHRvb2x0aXAgY29udGVudFxuICAgKiBAcGFyYW0ge1Rvb2x0aXBPcHRpb25zfSBvcHRpb25zIC0gdG9vbHRpcCBvcHRpb25zXG4gICAqL1xuICBzaG93KGUsIHQsIG8pIHtcbiAgICBTbyhlLCB0LCBvKTtcbiAgfVxuICAvKipcbiAgICogTWV0aG9kIGhpZGVzIHRvb2x0aXAgb24gSFRNTCBwYWdlXG4gICAqL1xuICBoaWRlKCkge1xuICAgIFJlKCk7XG4gIH1cbiAgLyoqXG4gICAqIERlY29yYXRvciBmb3Igc2hvd2luZyBUb29sdGlwIGJ5IG1vdXNlZW50ZXIvbW91c2VsZWF2ZVxuICAgKlxuICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtZW50IC0gZWxlbWVudCBvbiB3aGljaCB0b29sdGlwIHNob3VsZCBiZSBzaG93blxuICAgKiBAcGFyYW0ge1Rvb2x0aXBDb250ZW50fSBjb250ZW50IC0gdG9vbHRpcCBjb250ZW50XG4gICAqIEBwYXJhbSB7VG9vbHRpcE9wdGlvbnN9IG9wdGlvbnMgLSB0b29sdGlwIG9wdGlvbnNcbiAgICovXG4gIG9uSG92ZXIoZSwgdCwgbykge1xuICAgIGdlKGUsIHQsIG8pO1xuICB9XG59XG5jbGFzcyBMbyBleHRlbmRzIHkge1xuICAvKipcbiAgICogQXZhaWxhYmxlIG1ldGhvZHMgLyBnZXR0ZXJzXG4gICAqL1xuICBnZXQgbWV0aG9kcygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbm9kZXM6IHRoaXMuZWRpdG9yTm9kZXNcbiAgICAgIC8qKlxuICAgICAgICogVGhlcmUgY2FuIGJlIGFkZGVkIHNvbWUgVUkgbWV0aG9kcywgbGlrZSB0b2dnbGVUaGluTW9kZSgpIGV0Y1xuICAgICAgICovXG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogRXhwb3J0ZWQgY2xhc3Nlc1xuICAgKi9cbiAgZ2V0IGVkaXRvck5vZGVzKCkge1xuICAgIHJldHVybiB7XG4gICAgICAvKipcbiAgICAgICAqIFRvcC1sZXZlbCBlZGl0b3IgaW5zdGFuY2Ugd3JhcHBlclxuICAgICAgICovXG4gICAgICB3cmFwcGVyOiB0aGlzLkVkaXRvci5VSS5ub2Rlcy53cmFwcGVyLFxuICAgICAgLyoqXG4gICAgICAgKiBFbGVtZW50IHRoYXQgaG9sZHMgYWxsIHRoZSBCbG9ja3NcbiAgICAgICAqL1xuICAgICAgcmVkYWN0b3I6IHRoaXMuRWRpdG9yLlVJLm5vZGVzLnJlZGFjdG9yXG4gICAgfTtcbiAgfVxufVxuZnVuY3Rpb24gbXQocywgZSkge1xuICBjb25zdCB0ID0ge307XG4gIHJldHVybiBPYmplY3QuZW50cmllcyhzKS5mb3JFYWNoKChbbywgaV0pID0+IHtcbiAgICBpZiAoRChpKSkge1xuICAgICAgY29uc3QgbiA9IGUgPyBgJHtlfS4ke299YCA6IG87XG4gICAgICBPYmplY3QudmFsdWVzKGkpLmV2ZXJ5KChhKSA9PiBHKGEpKSA/IHRbb10gPSBuIDogdFtvXSA9IG10KGksIG4pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0W29dID0gaTtcbiAgfSksIHQ7XG59XG5jb25zdCBLID0gbXQoaHQpO1xuZnVuY3Rpb24gQW8ocywgZSkge1xuICBjb25zdCB0ID0ge307XG4gIHJldHVybiBPYmplY3Qua2V5cyhzKS5mb3JFYWNoKChvKSA9PiB7XG4gICAgY29uc3QgaSA9IGVbb107XG4gICAgaSAhPT0gdm9pZCAwID8gdFtpXSA9IHNbb10gOiB0W29dID0gc1tvXTtcbiAgfSksIHQ7XG59XG5jb25zdCBfbyA9ICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB3aWR0aD1cIjI0XCIgaGVpZ2h0PVwiMjRcIiBmaWxsPVwibm9uZVwiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIj48cGF0aCBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIgc3Ryb2tlLXdpZHRoPVwiMlwiIGQ9XCJNOSAxMkw5IDcuMUM5IDcuMDQ0NzcgOS4wNDQ3NyA3IDkuMSA3SDEwLjRDMTEuNSA3IDE0IDcuMSAxNCA5LjVDMTQgOS41IDE0IDEyIDExIDEyTTkgMTJWMTYuOEM5IDE2LjkxMDUgOS4wODk1NCAxNyA5LjIgMTdIMTIuNUMxNCAxNyAxNSAxNiAxNSAxNC41QzE1IDExLjcwNDYgMTEgMTIgMTEgMTJNOSAxMkgxMVwiLz48L3N2Zz4nLCBrdCA9ICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB3aWR0aD1cIjI0XCIgaGVpZ2h0PVwiMjRcIiBmaWxsPVwibm9uZVwiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIj48cGF0aCBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIgc3Ryb2tlLXdpZHRoPVwiMlwiIGQ9XCJNNyAxMEwxMS44NTg2IDE0Ljg1ODZDMTEuOTM2NyAxNC45MzY3IDEyLjA2MzMgMTQuOTM2NyAxMi4xNDE0IDE0Ljg1ODZMMTcgMTBcIi8+PC9zdmc+JywgT28gPSAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgd2lkdGg9XCIyNFwiIGhlaWdodD1cIjI0XCIgZmlsbD1cIm5vbmVcIiB2aWV3Qm94PVwiMCAwIDI0IDI0XCI+PHBhdGggc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgc3Ryb2tlLWxpbmVjYXA9XCJyb3VuZFwiIHN0cm9rZS13aWR0aD1cIjJcIiBkPVwiTTcgMTVMMTEuODU4NiAxMC4xNDE0QzExLjkzNjcgMTAuMDYzMyAxMi4wNjMzIDEwLjA2MzMgMTIuMTQxNCAxMC4xNDE0TDE3IDE1XCIvPjwvc3ZnPicsIE5vID0gJzxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHdpZHRoPVwiMjRcIiBoZWlnaHQ9XCIyNFwiIGZpbGw9XCJub25lXCIgdmlld0JveD1cIjAgMCAyNCAyNFwiPjxwYXRoIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIiBzdHJva2Utd2lkdGg9XCIyXCIgZD1cIk04IDhMMTIgMTJNMTIgMTJMMTYgMTZNMTIgMTJMMTYgOE0xMiAxMkw4IDE2XCIvPjwvc3ZnPicsIFJvID0gJzxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHdpZHRoPVwiMjRcIiBoZWlnaHQ9XCIyNFwiIGZpbGw9XCJub25lXCIgdmlld0JveD1cIjAgMCAyNCAyNFwiPjxjaXJjbGUgY3g9XCIxMlwiIGN5PVwiMTJcIiByPVwiNFwiIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHN0cm9rZS13aWR0aD1cIjJcIi8+PC9zdmc+JywgRG8gPSAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgd2lkdGg9XCIyNFwiIGhlaWdodD1cIjI0XCIgZmlsbD1cIm5vbmVcIiB2aWV3Qm94PVwiMCAwIDI0IDI0XCI+PHBhdGggc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgc3Ryb2tlLWxpbmVjYXA9XCJyb3VuZFwiIHN0cm9rZS13aWR0aD1cIjJcIiBkPVwiTTEzLjM0IDEwQzEyLjQyMjMgMTIuNzMzNyAxMSAxNyAxMSAxN1wiLz48cGF0aCBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIgc3Ryb2tlLXdpZHRoPVwiMlwiIGQ9XCJNMTQuMjEgN0gxNC4yXCIvPjwvc3ZnPicsIGl0ID0gJzxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHdpZHRoPVwiMjRcIiBoZWlnaHQ9XCIyNFwiIGZpbGw9XCJub25lXCIgdmlld0JveD1cIjAgMCAyNCAyNFwiPjxwYXRoIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIiBzdHJva2Utd2lkdGg9XCIyXCIgZD1cIk03LjY5OTk4IDEyLjZMNy42Nzg5NiAxMi42MkM2LjUzOTkzIDEzLjcwNDggNi41MjAxMiAxNS41MTU1IDcuNjM1MTYgMTYuNjI1VjE2LjYyNUM4LjcyMjkzIDE3LjcwNzMgMTAuNDc5OSAxNy43MTAyIDExLjU3MTIgMTYuNjMxNEwxMy4wMjYzIDE1LjE5M0MxNC4wNzAzIDE0LjE2MDkgMTQuMjE0MSAxMi41MjUgMTMuMzY2MiAxMS4zMjY2TDEzLjIyIDExLjEyXCIvPjxwYXRoIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIiBzdHJva2Utd2lkdGg9XCIyXCIgZD1cIk0xNi4yMiAxMS4xMkwxNi4zNTY0IDEwLjk4MDVDMTcuMjg5NSAxMC4wMjY1IDE3LjM0NzggOC41MjA3IDE2LjQ5MTQgNy40OTczM1Y3LjQ5NzMzQzE1LjU2OTEgNi4zOTUwOSAxMy45MjY5IDYuMjUxNDMgMTIuODI3MSA3LjE3Njc1TDExLjM5MDEgOC4zODU4OEMxMC4wOTM1IDkuNDc2NzQgOS45NTcwNiAxMS40MjQxIDExLjA4ODggMTIuNjg1MkwxMS4xMiAxMi43MlwiLz48L3N2Zz4nLCBQbyA9ICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB3aWR0aD1cIjI0XCIgaGVpZ2h0PVwiMjRcIiBmaWxsPVwibm9uZVwiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIj48cGF0aCBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIgc3Ryb2tlLXdpZHRoPVwiMi42XCIgZD1cIk05LjQwOTk5IDcuMjk5OTlIOS40XCIvPjxwYXRoIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIiBzdHJva2Utd2lkdGg9XCIyLjZcIiBkPVwiTTE0LjYgNy4yOTk5OUgxNC41OVwiLz48cGF0aCBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIgc3Ryb2tlLXdpZHRoPVwiMi42XCIgZD1cIk05LjMwOTk5IDEySDkuM1wiLz48cGF0aCBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIgc3Ryb2tlLXdpZHRoPVwiMi42XCIgZD1cIk0xNC42IDEySDE0LjU5XCIvPjxwYXRoIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIiBzdHJva2Utd2lkdGg9XCIyLjZcIiBkPVwiTTkuNDA5OTkgMTYuN0g5LjRcIi8+PHBhdGggc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgc3Ryb2tlLWxpbmVjYXA9XCJyb3VuZFwiIHN0cm9rZS13aWR0aD1cIjIuNlwiIGQ9XCJNMTQuNiAxNi43SDE0LjU5XCIvPjwvc3ZnPicsIEZvID0gJzxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHdpZHRoPVwiMjRcIiBoZWlnaHQ9XCIyNFwiIGZpbGw9XCJub25lXCIgdmlld0JveD1cIjAgMCAyNCAyNFwiPjxwYXRoIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIiBzdHJva2Utd2lkdGg9XCIyXCIgZD1cIk0xMiA3VjEyTTEyIDE3VjEyTTE3IDEySDEyTTEyIDEySDdcIi8+PC9zdmc+JywgSG8gPSAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgd2lkdGg9XCIyNFwiIGhlaWdodD1cIjI0XCIgZmlsbD1cIm5vbmVcIiB2aWV3Qm94PVwiMCAwIDI0IDI0XCI+PGNpcmNsZSBjeD1cIjEwLjVcIiBjeT1cIjEwLjVcIiByPVwiNS41XCIgc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgc3Ryb2tlLXdpZHRoPVwiMlwiLz48bGluZSB4MT1cIjE1LjQxNDJcIiB4Mj1cIjE5XCIgeTE9XCIxNVwiIHkyPVwiMTguNTg1OFwiIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIiBzdHJva2Utd2lkdGg9XCIyXCIvPjwvc3ZnPicsIHpvID0gJzxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHdpZHRoPVwiMjRcIiBoZWlnaHQ9XCIyNFwiIGZpbGw9XCJub25lXCIgdmlld0JveD1cIjAgMCAyNCAyNFwiPjxwYXRoIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIiBzdHJva2Utd2lkdGg9XCIyXCIgZD1cIk0xNS43Nzk1IDExLjVDMTUuNzc5NSAxMS41IDE2LjA1MyAxMS4xOTYyIDE2LjU0OTcgMTAuNjcyMkMxNy40NDQyIDkuNzI4NTYgMTcuNDcwMSA4LjI0NzUgMTYuNTc4MSA3LjMwMTQ1VjcuMzAxNDVDMTUuNjQ4MiA2LjMxNTIyIDE0LjA4NzMgNi4yOTIyNyAxMy4xMjg4IDcuMjUwNzNMMTEuODc5NiA4LjQ5OTk5XCIvPjxwYXRoIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIiBzdHJva2Utd2lkdGg9XCIyXCIgZD1cIk04LjI0NTE3IDEyLjM4ODNDOC4yNDUxNyAxMi4zODgzIDcuOTcxNzEgMTIuNjkyMiA3LjQ3NTA0IDEzLjIxNjFDNi41ODA1MSAxNC4xNTk4IDYuNTU0NjcgMTUuNjQwOCA3LjQ0NjY2IDE2LjU4NjlWMTYuNTg2OUM4LjM3NjUzIDE3LjU3MzEgOS45Mzc0NCAxNy41OTYxIDEwLjg5NTkgMTYuNjM3NkwxMi4xNDUyIDE1LjM4ODNcIi8+PHBhdGggc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgc3Ryb2tlLWxpbmVjYXA9XCJyb3VuZFwiIHN0cm9rZS13aWR0aD1cIjJcIiBkPVwiTTE3Ljc4MDIgMTUuMTAzMkwxNi41OTcgMTQuOTQyMkMxNi4wMTA5IDE0Ljg2MjQgMTUuNDg0MSAxNS4zMDU5IDE1LjQ2MjcgMTUuODk2OUwxNS40MTk5IDE3LjA4MThcIi8+PHBhdGggc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgc3Ryb2tlLWxpbmVjYXA9XCJyb3VuZFwiIHN0cm9rZS13aWR0aD1cIjJcIiBkPVwiTTYuMzkwNjQgOS4wMzIzOEw3LjU4NDMyIDkuMDY2NjhDOC4xNzU1MSA5LjA4MzY2IDguNjUyMiA4LjU4NjY1IDguNjEwNTYgNy45OTY2OUw4LjUyNzEgNi44MTM5N1wiLz48bGluZSB4MT1cIjEyLjExNDJcIiB4Mj1cIjExLjdcIiB5MT1cIjEyLjJcIiB5Mj1cIjExLjc4NThcIiBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIgc3Ryb2tlLXdpZHRoPVwiMlwiLz48L3N2Zz4nLCBVbyA9ICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB3aWR0aD1cIjI0XCIgaGVpZ2h0PVwiMjRcIiBmaWxsPVwibm9uZVwiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIj48cmVjdCB3aWR0aD1cIjE0XCIgaGVpZ2h0PVwiMTRcIiB4PVwiNVwiIHk9XCI1XCIgc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgc3Ryb2tlLXdpZHRoPVwiMlwiIHJ4PVwiNFwiLz48bGluZSB4MT1cIjEyXCIgeDI9XCIxMlwiIHkxPVwiOVwiIHkyPVwiMTJcIiBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIgc3Ryb2tlLXdpZHRoPVwiMlwiLz48cGF0aCBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIgc3Ryb2tlLXdpZHRoPVwiMlwiIGQ9XCJNMTIgMTUuMDJWMTUuMDFcIi8+PC9zdmc+JztcbmNsYXNzIF8ge1xuICAvKipcbiAgICogQ29uc3RydWN0cyBwb3BvdmVyIGl0ZW0gaW5zdGFuY2VcbiAgICpcbiAgICogQHBhcmFtIHBhcmFtcyAtIHBvcG92ZXIgaXRlbSBjb25zdHJ1Y3Rpb24gcGFyYW1zXG4gICAqL1xuICBjb25zdHJ1Y3RvcihlKSB7XG4gICAgdGhpcy5ub2RlcyA9IHtcbiAgICAgIHJvb3Q6IG51bGwsXG4gICAgICBpY29uOiBudWxsXG4gICAgfSwgdGhpcy5jb25maXJtYXRpb25TdGF0ZSA9IG51bGwsIHRoaXMucmVtb3ZlU3BlY2lhbEZvY3VzQmVoYXZpb3IgPSAoKSA9PiB7XG4gICAgICB0aGlzLm5vZGVzLnJvb3QuY2xhc3NMaXN0LnJlbW92ZShfLkNTUy5ub0ZvY3VzKTtcbiAgICB9LCB0aGlzLnJlbW92ZVNwZWNpYWxIb3ZlckJlaGF2aW9yID0gKCkgPT4ge1xuICAgICAgdGhpcy5ub2Rlcy5yb290LmNsYXNzTGlzdC5yZW1vdmUoXy5DU1Mubm9Ib3Zlcik7XG4gICAgfSwgdGhpcy5vbkVycm9yQW5pbWF0aW9uRW5kID0gKCkgPT4ge1xuICAgICAgdGhpcy5ub2Rlcy5pY29uLmNsYXNzTGlzdC5yZW1vdmUoXy5DU1Mud29iYmxlQW5pbWF0aW9uKSwgdGhpcy5ub2Rlcy5pY29uLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJhbmltYXRpb25lbmRcIiwgdGhpcy5vbkVycm9yQW5pbWF0aW9uRW5kKTtcbiAgICB9LCB0aGlzLnBhcmFtcyA9IGUsIHRoaXMubm9kZXMucm9vdCA9IHRoaXMubWFrZShlKTtcbiAgfVxuICAvKipcbiAgICogVHJ1ZSBpZiBpdGVtIGlzIGRpc2FibGVkIGFuZCBoZW5jZSBub3QgY2xpY2thYmxlXG4gICAqL1xuICBnZXQgaXNEaXNhYmxlZCgpIHtcbiAgICByZXR1cm4gdGhpcy5wYXJhbXMuaXNEaXNhYmxlZDtcbiAgfVxuICAvKipcbiAgICogRXhwb3NlcyBwb3BvdmVyIGl0ZW0gdG9nZ2xlIHBhcmFtZXRlclxuICAgKi9cbiAgZ2V0IHRvZ2dsZSgpIHtcbiAgICByZXR1cm4gdGhpcy5wYXJhbXMudG9nZ2xlO1xuICB9XG4gIC8qKlxuICAgKiBJdGVtIHRpdGxlXG4gICAqL1xuICBnZXQgdGl0bGUoKSB7XG4gICAgcmV0dXJuIHRoaXMucGFyYW1zLnRpdGxlO1xuICB9XG4gIC8qKlxuICAgKiBUcnVlIGlmIHBvcG92ZXIgc2hvdWxkIGNsb3NlIG9uY2UgaXRlbSBpcyBhY3RpdmF0ZWRcbiAgICovXG4gIGdldCBjbG9zZU9uQWN0aXZhdGUoKSB7XG4gICAgcmV0dXJuIHRoaXMucGFyYW1zLmNsb3NlT25BY3RpdmF0ZTtcbiAgfVxuICAvKipcbiAgICogVHJ1ZSBpZiBjb25maXJtYXRpb24gc3RhdGUgaXMgZW5hYmxlZCBmb3IgcG9wb3ZlciBpdGVtXG4gICAqL1xuICBnZXQgaXNDb25maXJtYXRpb25TdGF0ZUVuYWJsZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29uZmlybWF0aW9uU3RhdGUgIT09IG51bGw7XG4gIH1cbiAgLyoqXG4gICAqIFRydWUgaWYgaXRlbSBpcyBmb2N1c2VkIGluIGtleWJvYXJkIG5hdmlnYXRpb24gcHJvY2Vzc1xuICAgKi9cbiAgZ2V0IGlzRm9jdXNlZCgpIHtcbiAgICByZXR1cm4gdGhpcy5ub2Rlcy5yb290LmNsYXNzTGlzdC5jb250YWlucyhfLkNTUy5mb2N1c2VkKTtcbiAgfVxuICAvKipcbiAgICogUG9wb3ZlciBpdGVtIENTUyBjbGFzc2VzXG4gICAqL1xuICBzdGF0aWMgZ2V0IENTUygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgY29udGFpbmVyOiBcImNlLXBvcG92ZXItaXRlbVwiLFxuICAgICAgdGl0bGU6IFwiY2UtcG9wb3Zlci1pdGVtX190aXRsZVwiLFxuICAgICAgc2Vjb25kYXJ5VGl0bGU6IFwiY2UtcG9wb3Zlci1pdGVtX19zZWNvbmRhcnktdGl0bGVcIixcbiAgICAgIGljb246IFwiY2UtcG9wb3Zlci1pdGVtX19pY29uXCIsXG4gICAgICBhY3RpdmU6IFwiY2UtcG9wb3Zlci1pdGVtLS1hY3RpdmVcIixcbiAgICAgIGRpc2FibGVkOiBcImNlLXBvcG92ZXItaXRlbS0tZGlzYWJsZWRcIixcbiAgICAgIGZvY3VzZWQ6IFwiY2UtcG9wb3Zlci1pdGVtLS1mb2N1c2VkXCIsXG4gICAgICBoaWRkZW46IFwiY2UtcG9wb3Zlci1pdGVtLS1oaWRkZW5cIixcbiAgICAgIGNvbmZpcm1hdGlvblN0YXRlOiBcImNlLXBvcG92ZXItaXRlbS0tY29uZmlybWF0aW9uXCIsXG4gICAgICBub0hvdmVyOiBcImNlLXBvcG92ZXItaXRlbS0tbm8taG92ZXJcIixcbiAgICAgIG5vRm9jdXM6IFwiY2UtcG9wb3Zlci1pdGVtLS1uby1mb2N1c1wiLFxuICAgICAgd29iYmxlQW5pbWF0aW9uOiBcIndvYmJsZVwiXG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBwb3BvdmVyIGl0ZW0gcm9vdCBlbGVtZW50XG4gICAqL1xuICBnZXRFbGVtZW50KCkge1xuICAgIHJldHVybiB0aGlzLm5vZGVzLnJvb3Q7XG4gIH1cbiAgLyoqXG4gICAqIENhbGxlZCBvbiBwb3BvdmVyIGl0ZW0gY2xpY2tcbiAgICovXG4gIGhhbmRsZUNsaWNrKCkge1xuICAgIGlmICh0aGlzLmlzQ29uZmlybWF0aW9uU3RhdGVFbmFibGVkKSB7XG4gICAgICB0aGlzLmFjdGl2YXRlT3JFbmFibGVDb25maXJtYXRpb25Nb2RlKHRoaXMuY29uZmlybWF0aW9uU3RhdGUpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLmFjdGl2YXRlT3JFbmFibGVDb25maXJtYXRpb25Nb2RlKHRoaXMucGFyYW1zKTtcbiAgfVxuICAvKipcbiAgICogVG9nZ2xlcyBpdGVtIGFjdGl2ZSBzdGF0ZVxuICAgKlxuICAgKiBAcGFyYW0gaXNBY3RpdmUgLSB0cnVlIGlmIGl0ZW0gc2hvdWxkIHN0cmljdGx5IHNob3VsZCBiZWNvbWUgYWN0aXZlXG4gICAqL1xuICB0b2dnbGVBY3RpdmUoZSkge1xuICAgIHRoaXMubm9kZXMucm9vdC5jbGFzc0xpc3QudG9nZ2xlKF8uQ1NTLmFjdGl2ZSwgZSk7XG4gIH1cbiAgLyoqXG4gICAqIFRvZ2dsZXMgaXRlbSBoaWRkZW4gc3RhdGVcbiAgICpcbiAgICogQHBhcmFtIGlzSGlkZGVuIC0gdHJ1ZSBpZiBpdGVtIHNob3VsZCBiZSBoaWRkZW5cbiAgICovXG4gIHRvZ2dsZUhpZGRlbihlKSB7XG4gICAgdGhpcy5ub2Rlcy5yb290LmNsYXNzTGlzdC50b2dnbGUoXy5DU1MuaGlkZGVuLCBlKTtcbiAgfVxuICAvKipcbiAgICogUmVzZXRzIHBvcG92ZXIgaXRlbSB0byBpdHMgb3JpZ2luYWwgc3RhdGVcbiAgICovXG4gIHJlc2V0KCkge1xuICAgIHRoaXMuaXNDb25maXJtYXRpb25TdGF0ZUVuYWJsZWQgJiYgdGhpcy5kaXNhYmxlQ29uZmlybWF0aW9uTW9kZSgpO1xuICB9XG4gIC8qKlxuICAgKiBNZXRob2QgY2FsbGVkIG9uY2UgaXRlbSBiZWNvbWVzIGZvY3VzZWQgZHVyaW5nIGtleWJvYXJkIG5hdmlnYXRpb25cbiAgICovXG4gIG9uRm9jdXMoKSB7XG4gICAgdGhpcy5kaXNhYmxlU3BlY2lhbEhvdmVyQW5kRm9jdXNCZWhhdmlvcigpO1xuICB9XG4gIC8qKlxuICAgKiBDb25zdHJ1Y3RzIEhUTUwgZWxlbWVudCBjb3JyZXNwb25kaW5nIHRvIHBvcG92ZXIgaXRlbSBwYXJhbXNcbiAgICpcbiAgICogQHBhcmFtIHBhcmFtcyAtIGl0ZW0gY29uc3RydWN0aW9uIHBhcmFtc1xuICAgKi9cbiAgbWFrZShlKSB7XG4gICAgY29uc3QgdCA9IGMubWFrZShcImRpdlwiLCBfLkNTUy5jb250YWluZXIpO1xuICAgIHJldHVybiBlLm5hbWUgJiYgKHQuZGF0YXNldC5pdGVtTmFtZSA9IGUubmFtZSksIHRoaXMubm9kZXMuaWNvbiA9IGMubWFrZShcImRpdlwiLCBfLkNTUy5pY29uLCB7XG4gICAgICBpbm5lckhUTUw6IGUuaWNvbiB8fCBSb1xuICAgIH0pLCB0LmFwcGVuZENoaWxkKHRoaXMubm9kZXMuaWNvbiksIHQuYXBwZW5kQ2hpbGQoYy5tYWtlKFwiZGl2XCIsIF8uQ1NTLnRpdGxlLCB7XG4gICAgICBpbm5lckhUTUw6IGUudGl0bGUgfHwgXCJcIlxuICAgIH0pKSwgZS5zZWNvbmRhcnlMYWJlbCAmJiB0LmFwcGVuZENoaWxkKGMubWFrZShcImRpdlwiLCBfLkNTUy5zZWNvbmRhcnlUaXRsZSwge1xuICAgICAgdGV4dENvbnRlbnQ6IGUuc2Vjb25kYXJ5TGFiZWxcbiAgICB9KSksIGUuaXNBY3RpdmUgJiYgdC5jbGFzc0xpc3QuYWRkKF8uQ1NTLmFjdGl2ZSksIGUuaXNEaXNhYmxlZCAmJiB0LmNsYXNzTGlzdC5hZGQoXy5DU1MuZGlzYWJsZWQpLCB0O1xuICB9XG4gIC8qKlxuICAgKiBBY3RpdmF0ZXMgY29uZmlybWF0aW9uIG1vZGUgZm9yIHRoZSBpdGVtLlxuICAgKlxuICAgKiBAcGFyYW0gbmV3U3RhdGUgLSBuZXcgcG9wb3ZlciBpdGVtIHBhcmFtcyB0aGF0IHNob3VsZCBiZSBhcHBsaWVkXG4gICAqL1xuICBlbmFibGVDb25maXJtYXRpb25Nb2RlKGUpIHtcbiAgICBjb25zdCB0ID0ge1xuICAgICAgLi4udGhpcy5wYXJhbXMsXG4gICAgICAuLi5lLFxuICAgICAgY29uZmlybWF0aW9uOiBlLmNvbmZpcm1hdGlvblxuICAgIH0sIG8gPSB0aGlzLm1ha2UodCk7XG4gICAgdGhpcy5ub2Rlcy5yb290LmlubmVySFRNTCA9IG8uaW5uZXJIVE1MLCB0aGlzLm5vZGVzLnJvb3QuY2xhc3NMaXN0LmFkZChfLkNTUy5jb25maXJtYXRpb25TdGF0ZSksIHRoaXMuY29uZmlybWF0aW9uU3RhdGUgPSBlLCB0aGlzLmVuYWJsZVNwZWNpYWxIb3ZlckFuZEZvY3VzQmVoYXZpb3IoKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBpdGVtIHRvIGl0cyBvcmlnaW5hbCBzdGF0ZVxuICAgKi9cbiAgZGlzYWJsZUNvbmZpcm1hdGlvbk1vZGUoKSB7XG4gICAgY29uc3QgZSA9IHRoaXMubWFrZSh0aGlzLnBhcmFtcyk7XG4gICAgdGhpcy5ub2Rlcy5yb290LmlubmVySFRNTCA9IGUuaW5uZXJIVE1MLCB0aGlzLm5vZGVzLnJvb3QuY2xhc3NMaXN0LnJlbW92ZShfLkNTUy5jb25maXJtYXRpb25TdGF0ZSksIHRoaXMuY29uZmlybWF0aW9uU3RhdGUgPSBudWxsLCB0aGlzLmRpc2FibGVTcGVjaWFsSG92ZXJBbmRGb2N1c0JlaGF2aW9yKCk7XG4gIH1cbiAgLyoqXG4gICAqIEVuYWJsZXMgc3BlY2lhbCBmb2N1cyBhbmQgaG92ZXIgYmVoYXZpb3IgZm9yIGl0ZW0gaW4gY29uZmlybWF0aW9uIHN0YXRlLlxuICAgKiBUaGlzIGlzIG5lZWRlZCB0byBwcmV2ZW50IGl0ZW0gZnJvbSBiZWluZyBoaWdobGlnaHRlZCBhcyBob3ZlcmVkL2ZvY3VzZWQganVzdCBhZnRlciBjbGljay5cbiAgICovXG4gIGVuYWJsZVNwZWNpYWxIb3ZlckFuZEZvY3VzQmVoYXZpb3IoKSB7XG4gICAgdGhpcy5ub2Rlcy5yb290LmNsYXNzTGlzdC5hZGQoXy5DU1Mubm9Ib3ZlciksIHRoaXMubm9kZXMucm9vdC5jbGFzc0xpc3QuYWRkKF8uQ1NTLm5vRm9jdXMpLCB0aGlzLm5vZGVzLnJvb3QuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlbGVhdmVcIiwgdGhpcy5yZW1vdmVTcGVjaWFsSG92ZXJCZWhhdmlvciwgeyBvbmNlOiAhMCB9KTtcbiAgfVxuICAvKipcbiAgICogRGlzYWJsZXMgc3BlY2lhbCBmb2N1cyBhbmQgaG92ZXIgYmVoYXZpb3JcbiAgICovXG4gIGRpc2FibGVTcGVjaWFsSG92ZXJBbmRGb2N1c0JlaGF2aW9yKCkge1xuICAgIHRoaXMucmVtb3ZlU3BlY2lhbEZvY3VzQmVoYXZpb3IoKSwgdGhpcy5yZW1vdmVTcGVjaWFsSG92ZXJCZWhhdmlvcigpLCB0aGlzLm5vZGVzLnJvb3QucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNlbGVhdmVcIiwgdGhpcy5yZW1vdmVTcGVjaWFsSG92ZXJCZWhhdmlvcik7XG4gIH1cbiAgLyoqXG4gICAqIEV4ZWN1dGVzIGl0ZW0ncyBvbkFjdGl2YXRlIGNhbGxiYWNrIGlmIHRoZSBpdGVtIGhhcyBubyBjb25maXJtYXRpb24gY29uZmlndXJlZFxuICAgKlxuICAgKiBAcGFyYW0gaXRlbSAtIGl0ZW0gdG8gYWN0aXZhdGUgb3IgYnJpbmcgdG8gY29uZmlybWF0aW9uIG1vZGVcbiAgICovXG4gIGFjdGl2YXRlT3JFbmFibGVDb25maXJtYXRpb25Nb2RlKGUpIHtcbiAgICBpZiAoZS5jb25maXJtYXRpb24gPT09IHZvaWQgMClcbiAgICAgIHRyeSB7XG4gICAgICAgIGUub25BY3RpdmF0ZShlKSwgdGhpcy5kaXNhYmxlQ29uZmlybWF0aW9uTW9kZSgpO1xuICAgICAgfSBjYXRjaCB7XG4gICAgICAgIHRoaXMuYW5pbWF0ZUVycm9yKCk7XG4gICAgICB9XG4gICAgZWxzZVxuICAgICAgdGhpcy5lbmFibGVDb25maXJtYXRpb25Nb2RlKGUuY29uZmlybWF0aW9uKTtcbiAgfVxuICAvKipcbiAgICogQW5pbWF0ZXMgaXRlbSB3aGljaCBzeW1ib2xpemVzIHRoYXQgZXJyb3Igb2NjdXJlZCB3aGlsZSBleGVjdXRpbmcgJ29uQWN0aXZhdGUoKScgY2FsbGJhY2tcbiAgICovXG4gIGFuaW1hdGVFcnJvcigpIHtcbiAgICB0aGlzLm5vZGVzLmljb24uY2xhc3NMaXN0LmNvbnRhaW5zKF8uQ1NTLndvYmJsZUFuaW1hdGlvbikgfHwgKHRoaXMubm9kZXMuaWNvbi5jbGFzc0xpc3QuYWRkKF8uQ1NTLndvYmJsZUFuaW1hdGlvbiksIHRoaXMubm9kZXMuaWNvbi5hZGRFdmVudExpc3RlbmVyKFwiYW5pbWF0aW9uZW5kXCIsIHRoaXMub25FcnJvckFuaW1hdGlvbkVuZCkpO1xuICB9XG59XG5jb25zdCBoZSA9IGNsYXNzIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7SFRNTEVsZW1lbnRbXX0gbm9kZUxpc3Qg4oCUIHRoZSBsaXN0IG9mIGl0ZXJhYmxlIEhUTUwtaXRlbXNcbiAgICogQHBhcmFtIHtzdHJpbmd9IGZvY3VzZWRDc3NDbGFzcyAtIHVzZXItcHJvdmlkZWQgQ1NTLWNsYXNzIHRoYXQgd2lsbCBiZSBzZXQgaW4gZmxpcHBpbmcgcHJvY2Vzc1xuICAgKi9cbiAgY29uc3RydWN0b3IocywgZSkge1xuICAgIHRoaXMuY3Vyc29yID0gLTEsIHRoaXMuaXRlbXMgPSBbXSwgdGhpcy5pdGVtcyA9IHMgfHwgW10sIHRoaXMuZm9jdXNlZENzc0NsYXNzID0gZTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBGb2N1c2VkIGJ1dHRvbiBOb2RlXG4gICAqXG4gICAqIEByZXR1cm5zIHtIVE1MRWxlbWVudH1cbiAgICovXG4gIGdldCBjdXJyZW50SXRlbSgpIHtcbiAgICByZXR1cm4gdGhpcy5jdXJzb3IgPT09IC0xID8gbnVsbCA6IHRoaXMuaXRlbXNbdGhpcy5jdXJzb3JdO1xuICB9XG4gIC8qKlxuICAgKiBTZXRzIGN1cnNvciB0byBzcGVjaWZpZWQgcG9zaXRpb25cbiAgICpcbiAgICogQHBhcmFtIGN1cnNvclBvc2l0aW9uIC0gbmV3IGN1cnNvciBwb3NpdGlvblxuICAgKi9cbiAgc2V0Q3Vyc29yKHMpIHtcbiAgICBzIDwgdGhpcy5pdGVtcy5sZW5ndGggJiYgcyA+PSAtMSAmJiAodGhpcy5kcm9wQ3Vyc29yKCksIHRoaXMuY3Vyc29yID0gcywgdGhpcy5pdGVtc1t0aGlzLmN1cnNvcl0uY2xhc3NMaXN0LmFkZCh0aGlzLmZvY3VzZWRDc3NDbGFzcykpO1xuICB9XG4gIC8qKlxuICAgKiBTZXRzIGl0ZW1zLiBDYW4gYmUgdXNlZCB3aGVuIGl0ZXJhYmxlIGl0ZW1zIGNoYW5nZWQgZHluYW1pY2FsbHlcbiAgICpcbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudFtdfSBub2RlTGlzdCAtIG5vZGVzIHRvIGl0ZXJhdGVcbiAgICovXG4gIHNldEl0ZW1zKHMpIHtcbiAgICB0aGlzLml0ZW1zID0gcztcbiAgfVxuICAvKipcbiAgICogU2V0cyBjdXJzb3IgbmV4dCB0byB0aGUgY3VycmVudFxuICAgKi9cbiAgbmV4dCgpIHtcbiAgICB0aGlzLmN1cnNvciA9IHRoaXMubGVhZk5vZGVzQW5kUmV0dXJuSW5kZXgoaGUuZGlyZWN0aW9ucy5SSUdIVCk7XG4gIH1cbiAgLyoqXG4gICAqIFNldHMgY3Vyc29yIGJlZm9yZSBjdXJyZW50XG4gICAqL1xuICBwcmV2aW91cygpIHtcbiAgICB0aGlzLmN1cnNvciA9IHRoaXMubGVhZk5vZGVzQW5kUmV0dXJuSW5kZXgoaGUuZGlyZWN0aW9ucy5MRUZUKTtcbiAgfVxuICAvKipcbiAgICogU2V0cyBjdXJzb3IgdG8gdGhlIGRlZmF1bHQgcG9zaXRpb24gYW5kIHJlbW92ZXMgQ1NTLWNsYXNzIGZyb20gcHJldmlvdXNseSBmb2N1c2VkIGl0ZW1cbiAgICovXG4gIGRyb3BDdXJzb3IoKSB7XG4gICAgdGhpcy5jdXJzb3IgIT09IC0xICYmICh0aGlzLml0ZW1zW3RoaXMuY3Vyc29yXS5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuZm9jdXNlZENzc0NsYXNzKSwgdGhpcy5jdXJzb3IgPSAtMSk7XG4gIH1cbiAgLyoqXG4gICAqIExlYWZzIG5vZGVzIGluc2lkZSB0aGUgdGFyZ2V0IGxpc3QgZnJvbSBhY3RpdmUgZWxlbWVudFxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZGlyZWN0aW9uIC0gbGVhZiBkaXJlY3Rpb24uIENhbiBiZSAnbGVmdCcgb3IgJ3JpZ2h0J1xuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBpbmRleCBvZiBmb2N1c2VkIG5vZGVcbiAgICovXG4gIGxlYWZOb2Rlc0FuZFJldHVybkluZGV4KHMpIHtcbiAgICBpZiAodGhpcy5pdGVtcy5sZW5ndGggPT09IDApXG4gICAgICByZXR1cm4gdGhpcy5jdXJzb3I7XG4gICAgbGV0IGUgPSB0aGlzLmN1cnNvcjtcbiAgICByZXR1cm4gZSA9PT0gLTEgPyBlID0gcyA9PT0gaGUuZGlyZWN0aW9ucy5SSUdIVCA/IC0xIDogMCA6IHRoaXMuaXRlbXNbZV0uY2xhc3NMaXN0LnJlbW92ZSh0aGlzLmZvY3VzZWRDc3NDbGFzcyksIHMgPT09IGhlLmRpcmVjdGlvbnMuUklHSFQgPyBlID0gKGUgKyAxKSAlIHRoaXMuaXRlbXMubGVuZ3RoIDogZSA9ICh0aGlzLml0ZW1zLmxlbmd0aCArIGUgLSAxKSAlIHRoaXMuaXRlbXMubGVuZ3RoLCBjLmNhblNldENhcmV0KHRoaXMuaXRlbXNbZV0pICYmIHhlKCgpID0+IGIuc2V0Q3Vyc29yKHRoaXMuaXRlbXNbZV0pLCA1MCkoKSwgdGhpcy5pdGVtc1tlXS5jbGFzc0xpc3QuYWRkKHRoaXMuZm9jdXNlZENzc0NsYXNzKSwgZTtcbiAgfVxufTtcbmxldCBuZSA9IGhlO1xubmUuZGlyZWN0aW9ucyA9IHtcbiAgUklHSFQ6IFwicmlnaHRcIixcbiAgTEVGVDogXCJsZWZ0XCJcbn07XG5jbGFzcyBxIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7RmxpcHBlck9wdGlvbnN9IG9wdGlvbnMgLSBkaWZmZXJlbnQgY29uc3RydWN0aW5nIHNldHRpbmdzXG4gICAqL1xuICBjb25zdHJ1Y3RvcihlKSB7XG4gICAgdGhpcy5pdGVyYXRvciA9IG51bGwsIHRoaXMuYWN0aXZhdGVkID0gITEsIHRoaXMuZmxpcENhbGxiYWNrcyA9IFtdLCB0aGlzLm9uS2V5RG93biA9ICh0KSA9PiB7XG4gICAgICBpZiAodGhpcy5pc0V2ZW50UmVhZHlGb3JIYW5kbGluZyh0KSlcbiAgICAgICAgc3dpdGNoIChxLnVzZWRLZXlzLmluY2x1ZGVzKHQua2V5Q29kZSkgJiYgdC5wcmV2ZW50RGVmYXVsdCgpLCB0LmtleUNvZGUpIHtcbiAgICAgICAgICBjYXNlIGsuVEFCOlxuICAgICAgICAgICAgdGhpcy5oYW5kbGVUYWJQcmVzcyh0KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2Ugay5MRUZUOlxuICAgICAgICAgIGNhc2Ugay5VUDpcbiAgICAgICAgICAgIHRoaXMuZmxpcExlZnQoKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2Ugay5SSUdIVDpcbiAgICAgICAgICBjYXNlIGsuRE9XTjpcbiAgICAgICAgICAgIHRoaXMuZmxpcFJpZ2h0KCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIGsuRU5URVI6XG4gICAgICAgICAgICB0aGlzLmhhbmRsZUVudGVyUHJlc3ModCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH0sIHRoaXMuaXRlcmF0b3IgPSBuZXcgbmUoZS5pdGVtcywgZS5mb2N1c2VkSXRlbUNsYXNzKSwgdGhpcy5hY3RpdmF0ZUNhbGxiYWNrID0gZS5hY3RpdmF0ZUNhbGxiYWNrLCB0aGlzLmFsbG93ZWRLZXlzID0gZS5hbGxvd2VkS2V5cyB8fCBxLnVzZWRLZXlzO1xuICB9XG4gIC8qKlxuICAgKiBUcnVlIGlmIGZsaXBwZXIgaXMgY3VycmVudGx5IGFjdGl2YXRlZFxuICAgKi9cbiAgZ2V0IGlzQWN0aXZhdGVkKCkge1xuICAgIHJldHVybiB0aGlzLmFjdGl2YXRlZDtcbiAgfVxuICAvKipcbiAgICogQXJyYXkgb2Yga2V5cyAoY29kZXMpIHRoYXQgaXMgaGFuZGxlZCBieSBGbGlwcGVyXG4gICAqIFVzZWQgdG86XG4gICAqICAtIHByZXZlbnREZWZhdWx0IG9ubHkgZm9yIHRoaXMga2V5cywgbm90IGFsbCBrZXlkb3ducyAoQHNlZSBjb25zdHJ1Y3RvcilcbiAgICogIC0gdG8gc2tpcCBleHRlcm5hbCBiZWhhdmlvdXJzIG9ubHkgZm9yIHRoZXNlIGtleXMsIHdoZW4gZmlsbGVyIGlzIGFjdGl2YXRlZCAoQHNlZSBCbG9ja0V2ZW50c0BhcnJvd1JpZ2h0QW5kRG93bilcbiAgICovXG4gIHN0YXRpYyBnZXQgdXNlZEtleXMoKSB7XG4gICAgcmV0dXJuIFtcbiAgICAgIGsuVEFCLFxuICAgICAgay5MRUZULFxuICAgICAgay5SSUdIVCxcbiAgICAgIGsuRU5URVIsXG4gICAgICBrLlVQLFxuICAgICAgay5ET1dOXG4gICAgXTtcbiAgfVxuICAvKipcbiAgICogQWN0aXZlIHRhYi9hcnJvd3MgaGFuZGxpbmcgYnkgZmxpcHBlclxuICAgKlxuICAgKiBAcGFyYW0gaXRlbXMgLSBTb21lIG1vZHVsZXMgKGxpa2UsIElubGluZVRvb2xiYXIsIEJsb2NrU2V0dGluZ3MpIG1pZ2h0IHJlZnJlc2ggYnV0dG9ucyBkeW5hbWljYWxseVxuICAgKiBAcGFyYW0gY3Vyc29yUG9zaXRpb24gLSBpbmRleCBvZiB0aGUgaXRlbSB0aGF0IHNob3VsZCBiZSBmb2N1c2VkIG9uY2UgZmxpcHBlciBpcyBhY3RpdmF0ZWRcbiAgICovXG4gIGFjdGl2YXRlKGUsIHQpIHtcbiAgICB0aGlzLmFjdGl2YXRlZCA9ICEwLCBlICYmIHRoaXMuaXRlcmF0b3Iuc2V0SXRlbXMoZSksIHQgIT09IHZvaWQgMCAmJiB0aGlzLml0ZXJhdG9yLnNldEN1cnNvcih0KSwgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgdGhpcy5vbktleURvd24sICEwKTtcbiAgfVxuICAvKipcbiAgICogRGlzYWJsZSB0YWIvYXJyb3dzIGhhbmRsaW5nIGJ5IGZsaXBwZXJcbiAgICovXG4gIGRlYWN0aXZhdGUoKSB7XG4gICAgdGhpcy5hY3RpdmF0ZWQgPSAhMSwgdGhpcy5kcm9wQ3Vyc29yKCksIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIHRoaXMub25LZXlEb3duKTtcbiAgfVxuICAvKipcbiAgICogRm9jdXMgZmlyc3QgaXRlbVxuICAgKi9cbiAgZm9jdXNGaXJzdCgpIHtcbiAgICB0aGlzLmRyb3BDdXJzb3IoKSwgdGhpcy5mbGlwUmlnaHQoKTtcbiAgfVxuICAvKipcbiAgICogRm9jdXNlcyBwcmV2aW91cyBmbGlwcGVyIGl0ZXJhdG9yIGl0ZW1cbiAgICovXG4gIGZsaXBMZWZ0KCkge1xuICAgIHRoaXMuaXRlcmF0b3IucHJldmlvdXMoKSwgdGhpcy5mbGlwQ2FsbGJhY2soKTtcbiAgfVxuICAvKipcbiAgICogRm9jdXNlcyBuZXh0IGZsaXBwZXIgaXRlcmF0b3IgaXRlbVxuICAgKi9cbiAgZmxpcFJpZ2h0KCkge1xuICAgIHRoaXMuaXRlcmF0b3IubmV4dCgpLCB0aGlzLmZsaXBDYWxsYmFjaygpO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm4gdHJ1ZSBpZiBzb21lIGJ1dHRvbiBpcyBmb2N1c2VkXG4gICAqL1xuICBoYXNGb2N1cygpIHtcbiAgICByZXR1cm4gISF0aGlzLml0ZXJhdG9yLmN1cnJlbnRJdGVtO1xuICB9XG4gIC8qKlxuICAgKiBSZWdpc3RlcmVzIGZ1bmN0aW9uIHRoYXQgc2hvdWxkIGJlIGV4ZWN1dGVkIG9uIGVhY2ggbmF2aWdhdGlvbiBhY3Rpb25cbiAgICpcbiAgICogQHBhcmFtIGNiIC0gZnVuY3Rpb24gdG8gZXhlY3V0ZVxuICAgKi9cbiAgb25GbGlwKGUpIHtcbiAgICB0aGlzLmZsaXBDYWxsYmFja3MucHVzaChlKTtcbiAgfVxuICAvKipcbiAgICogVW5yZWdpc3RlcmVzIGZ1bmN0aW9uIHRoYXQgaXMgZXhlY3V0ZWQgb24gZWFjaCBuYXZpZ2F0aW9uIGFjdGlvblxuICAgKlxuICAgKiBAcGFyYW0gY2IgLSBmdW5jdGlvbiB0byBzdG9wIGV4ZWN1dGluZ1xuICAgKi9cbiAgcmVtb3ZlT25GbGlwKGUpIHtcbiAgICB0aGlzLmZsaXBDYWxsYmFja3MgPSB0aGlzLmZsaXBDYWxsYmFja3MuZmlsdGVyKCh0KSA9PiB0ICE9PSBlKTtcbiAgfVxuICAvKipcbiAgICogRHJvcHMgZmxpcHBlcidzIGl0ZXJhdG9yIGN1cnNvclxuICAgKlxuICAgKiBAc2VlIERvbUl0ZXJhdG9yI2Ryb3BDdXJzb3JcbiAgICovXG4gIGRyb3BDdXJzb3IoKSB7XG4gICAgdGhpcy5pdGVyYXRvci5kcm9wQ3Vyc29yKCk7XG4gIH1cbiAgLyoqXG4gICAqIFRoaXMgZnVuY3Rpb24gaXMgZmlyZWQgYmVmb3JlIGhhbmRsaW5nIGZsaXBwZXIga2V5Y29kZXNcbiAgICogVGhlIHJlc3VsdCBvZiB0aGlzIGZ1bmN0aW9uIGRlZmluZXMgaWYgaXQgaXMgbmVlZCB0byBiZSBoYW5kbGVkIG9yIG5vdFxuICAgKlxuICAgKiBAcGFyYW0ge0tleWJvYXJkRXZlbnR9IGV2ZW50IC0ga2V5ZG93biBrZXlib2FyZCBldmVudFxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICovXG4gIGlzRXZlbnRSZWFkeUZvckhhbmRsaW5nKGUpIHtcbiAgICByZXR1cm4gdGhpcy5hY3RpdmF0ZWQgJiYgdGhpcy5hbGxvd2VkS2V5cy5pbmNsdWRlcyhlLmtleUNvZGUpO1xuICB9XG4gIC8qKlxuICAgKiBXaGVuIGZsaXBwZXIgaXMgYWN0aXZhdGVkIHRhYiBwcmVzcyB3aWxsIGxlYWYgdGhlIGl0ZW1zXG4gICAqXG4gICAqIEBwYXJhbSB7S2V5Ym9hcmRFdmVudH0gZXZlbnQgLSB0YWIga2V5ZG93biBldmVudFxuICAgKi9cbiAgaGFuZGxlVGFiUHJlc3MoZSkge1xuICAgIHN3aXRjaCAoZS5zaGlmdEtleSA/IG5lLmRpcmVjdGlvbnMuTEVGVCA6IG5lLmRpcmVjdGlvbnMuUklHSFQpIHtcbiAgICAgIGNhc2UgbmUuZGlyZWN0aW9ucy5SSUdIVDpcbiAgICAgICAgdGhpcy5mbGlwUmlnaHQoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIG5lLmRpcmVjdGlvbnMuTEVGVDpcbiAgICAgICAgdGhpcy5mbGlwTGVmdCgpO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIEVudGVyIHByZXNzIHdpbGwgY2xpY2sgY3VycmVudCBpdGVtIGlmIGZsaXBwZXIgaXMgYWN0aXZhdGVkXG4gICAqXG4gICAqIEBwYXJhbSB7S2V5Ym9hcmRFdmVudH0gZXZlbnQgLSBlbnRlciBrZXlkb3duIGV2ZW50XG4gICAqL1xuICBoYW5kbGVFbnRlclByZXNzKGUpIHtcbiAgICB0aGlzLmFjdGl2YXRlZCAmJiAodGhpcy5pdGVyYXRvci5jdXJyZW50SXRlbSAmJiAoZS5zdG9wUHJvcGFnYXRpb24oKSwgZS5wcmV2ZW50RGVmYXVsdCgpLCB0aGlzLml0ZXJhdG9yLmN1cnJlbnRJdGVtLmNsaWNrKCkpLCBNKHRoaXMuYWN0aXZhdGVDYWxsYmFjaykgJiYgdGhpcy5hY3RpdmF0ZUNhbGxiYWNrKHRoaXMuaXRlcmF0b3IuY3VycmVudEl0ZW0pKTtcbiAgfVxuICAvKipcbiAgICogRmlyZWQgYWZ0ZXIgZmxpcHBpbmcgaW4gYW55IGRpcmVjdGlvblxuICAgKi9cbiAgZmxpcENhbGxiYWNrKCkge1xuICAgIHRoaXMuaXRlcmF0b3IuY3VycmVudEl0ZW0gJiYgdGhpcy5pdGVyYXRvci5jdXJyZW50SXRlbS5zY3JvbGxJbnRvVmlld0lmTmVlZGVkKCksIHRoaXMuZmxpcENhbGxiYWNrcy5mb3JFYWNoKChlKSA9PiBlKCkpO1xuICB9XG59XG5jbGFzcyBwZSB7XG4gIC8qKlxuICAgKiBTdHlsZXNcbiAgICovXG4gIHN0YXRpYyBnZXQgQ1NTKCkge1xuICAgIHJldHVybiB7XG4gICAgICB3cmFwcGVyOiBcImNkeC1zZWFyY2gtZmllbGRcIixcbiAgICAgIGljb246IFwiY2R4LXNlYXJjaC1maWVsZF9faWNvblwiLFxuICAgICAgaW5wdXQ6IFwiY2R4LXNlYXJjaC1maWVsZF9faW5wdXRcIlxuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIEBwYXJhbSBvcHRpb25zIC0gYXZhaWxhYmxlIGNvbmZpZ1xuICAgKiBAcGFyYW0gb3B0aW9ucy5pdGVtcyAtIHNlYXJjaGFibGUgaXRlbXMgbGlzdFxuICAgKiBAcGFyYW0gb3B0aW9ucy5vblNlYXJjaCAtIHNlYXJjaCBjYWxsYmFja1xuICAgKiBAcGFyYW0gb3B0aW9ucy5wbGFjZWhvbGRlciAtIGlucHV0IHBsYWNlaG9sZGVyXG4gICAqL1xuICBjb25zdHJ1Y3Rvcih7IGl0ZW1zOiBlLCBvblNlYXJjaDogdCwgcGxhY2Vob2xkZXI6IG8gfSkge1xuICAgIHRoaXMubGlzdGVuZXJzID0gbmV3IEZlKCksIHRoaXMuaXRlbXMgPSBlLCB0aGlzLm9uU2VhcmNoID0gdCwgdGhpcy5yZW5kZXIobyk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgc2VhcmNoIGZpZWxkIGVsZW1lbnRcbiAgICovXG4gIGdldEVsZW1lbnQoKSB7XG4gICAgcmV0dXJuIHRoaXMud3JhcHBlcjtcbiAgfVxuICAvKipcbiAgICogU2V0cyBmb2N1cyB0byB0aGUgaW5wdXRcbiAgICovXG4gIGZvY3VzKCkge1xuICAgIHRoaXMuaW5wdXQuZm9jdXMoKTtcbiAgfVxuICAvKipcbiAgICogQ2xlYXJzIHNlYXJjaCBxdWVyeSBhbmQgcmVzdWx0c1xuICAgKi9cbiAgY2xlYXIoKSB7XG4gICAgdGhpcy5pbnB1dC52YWx1ZSA9IFwiXCIsIHRoaXMuc2VhcmNoUXVlcnkgPSBcIlwiLCB0aGlzLm9uU2VhcmNoKFwiXCIsIHRoaXMuZm91bmRJdGVtcyk7XG4gIH1cbiAgLyoqXG4gICAqIENsZWFycyBtZW1vcnlcbiAgICovXG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy5saXN0ZW5lcnMucmVtb3ZlQWxsKCk7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZXMgdGhlIHNlYXJjaCBmaWVsZFxuICAgKlxuICAgKiBAcGFyYW0gcGxhY2Vob2xkZXIgLSBpbnB1dCBwbGFjZWhvbGRlclxuICAgKi9cbiAgcmVuZGVyKGUpIHtcbiAgICB0aGlzLndyYXBwZXIgPSBjLm1ha2UoXCJkaXZcIiwgcGUuQ1NTLndyYXBwZXIpO1xuICAgIGNvbnN0IHQgPSBjLm1ha2UoXCJkaXZcIiwgcGUuQ1NTLmljb24sIHtcbiAgICAgIGlubmVySFRNTDogSG9cbiAgICB9KTtcbiAgICB0aGlzLmlucHV0ID0gYy5tYWtlKFwiaW5wdXRcIiwgcGUuQ1NTLmlucHV0LCB7XG4gICAgICBwbGFjZWhvbGRlcjogZSxcbiAgICAgIC8qKlxuICAgICAgICogVXNlZCB0byBwcmV2ZW50IGZvY3VzaW5nIG9uIHRoZSBpbnB1dCBieSBUYWIga2V5XG4gICAgICAgKiAoUG9wb3ZlciBpbiB0aGUgVG9vbGJhciBsYXlzIGJlbG93IHRoZSBibG9ja3MsXG4gICAgICAgKiBzbyBUYWIgaW4gdGhlIGxhc3QgYmxvY2sgd2lsbCBmb2N1cyB0aGlzIGhpZGRlbiBpbnB1dCBpZiB0aGlzIHByb3BlcnR5IGlzIG5vdCBzZXQpXG4gICAgICAgKi9cbiAgICAgIHRhYkluZGV4OiAtMVxuICAgIH0pLCB0aGlzLndyYXBwZXIuYXBwZW5kQ2hpbGQodCksIHRoaXMud3JhcHBlci5hcHBlbmRDaGlsZCh0aGlzLmlucHV0KSwgdGhpcy5saXN0ZW5lcnMub24odGhpcy5pbnB1dCwgXCJpbnB1dFwiLCAoKSA9PiB7XG4gICAgICB0aGlzLnNlYXJjaFF1ZXJ5ID0gdGhpcy5pbnB1dC52YWx1ZSwgdGhpcy5vblNlYXJjaCh0aGlzLnNlYXJjaFF1ZXJ5LCB0aGlzLmZvdW5kSXRlbXMpO1xuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIGxpc3Qgb2YgZm91bmQgaXRlbXMgZm9yIHRoZSBjdXJyZW50IHNlYXJjaCBxdWVyeVxuICAgKi9cbiAgZ2V0IGZvdW5kSXRlbXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXRlbXMuZmlsdGVyKChlKSA9PiB0aGlzLmNoZWNrSXRlbShlKSk7XG4gIH1cbiAgLyoqXG4gICAqIENvbnRhaW5zIGxvZ2ljIGZvciBjaGVja2luZyB3aGV0aGVyIHBhc3NlZCBpdGVtIGNvbmZvcm1zIHRoZSBzZWFyY2ggcXVlcnlcbiAgICpcbiAgICogQHBhcmFtIGl0ZW0gLSBpdGVtIHRvIGJlIGNoZWNrZWRcbiAgICovXG4gIGNoZWNrSXRlbShlKSB7XG4gICAgdmFyIGk7XG4gICAgY29uc3QgdCA9ICgoaSA9IGUudGl0bGUpID09IG51bGwgPyB2b2lkIDAgOiBpLnRvTG93ZXJDYXNlKCkpIHx8IFwiXCIsIG8gPSB0aGlzLnNlYXJjaFF1ZXJ5LnRvTG93ZXJDYXNlKCk7XG4gICAgcmV0dXJuIHQuaW5jbHVkZXMobyk7XG4gIH1cbn1cbmNvbnN0IHVlID0gY2xhc3Mge1xuICAvKipcbiAgICogTG9ja3MgYm9keSBlbGVtZW50IHNjcm9sbFxuICAgKi9cbiAgbG9jaygpIHtcbiAgICB0dCA/IHRoaXMubG9ja0hhcmQoKSA6IGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LmFkZCh1ZS5DU1Muc2Nyb2xsTG9ja2VkKTtcbiAgfVxuICAvKipcbiAgICogVW5sb2NrcyBib2R5IGVsZW1lbnQgc2Nyb2xsXG4gICAqL1xuICB1bmxvY2soKSB7XG4gICAgdHQgPyB0aGlzLnVubG9ja0hhcmQoKSA6IGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LnJlbW92ZSh1ZS5DU1Muc2Nyb2xsTG9ja2VkKTtcbiAgfVxuICAvKipcbiAgICogTG9ja3Mgc2Nyb2xsIGluIGEgaGFyZCB3YXkgKHZpYSBzZXR0aW5nIGZpeGVkIHBvc2l0aW9uIHRvIGJvZHkgZWxlbWVudClcbiAgICovXG4gIGxvY2tIYXJkKCkge1xuICAgIHRoaXMuc2Nyb2xsUG9zaXRpb24gPSB3aW5kb3cucGFnZVlPZmZzZXQsIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZS5zZXRQcm9wZXJ0eShcbiAgICAgIFwiLS13aW5kb3ctc2Nyb2xsLW9mZnNldFwiLFxuICAgICAgYCR7dGhpcy5zY3JvbGxQb3NpdGlvbn1weGBcbiAgICApLCBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5hZGQodWUuQ1NTLnNjcm9sbExvY2tlZEhhcmQpO1xuICB9XG4gIC8qKlxuICAgKiBVbmxvY2tzIGhhcmQgc2Nyb2xsIGxvY2tcbiAgICovXG4gIHVubG9ja0hhcmQoKSB7XG4gICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QucmVtb3ZlKHVlLkNTUy5zY3JvbGxMb2NrZWRIYXJkKSwgdGhpcy5zY3JvbGxQb3NpdGlvbiAhPT0gbnVsbCAmJiB3aW5kb3cuc2Nyb2xsVG8oMCwgdGhpcy5zY3JvbGxQb3NpdGlvbiksIHRoaXMuc2Nyb2xsUG9zaXRpb24gPSBudWxsO1xuICB9XG59O1xubGV0IHZ0ID0gdWU7XG52dC5DU1MgPSB7XG4gIHNjcm9sbExvY2tlZDogXCJjZS1zY3JvbGwtbG9ja2VkXCIsXG4gIHNjcm9sbExvY2tlZEhhcmQ6IFwiY2Utc2Nyb2xsLWxvY2tlZC0taGFyZFwiXG59O1xudmFyIGpvID0gT2JqZWN0LmRlZmluZVByb3BlcnR5LCAkbyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IsIFdvID0gKHMsIGUsIHQsIG8pID0+IHtcbiAgZm9yICh2YXIgaSA9IG8gPiAxID8gdm9pZCAwIDogbyA/ICRvKGUsIHQpIDogZSwgbiA9IHMubGVuZ3RoIC0gMSwgcjsgbiA+PSAwOyBuLS0pXG4gICAgKHIgPSBzW25dKSAmJiAoaSA9IChvID8gcihlLCB0LCBpKSA6IHIoaSkpIHx8IGkpO1xuICByZXR1cm4gbyAmJiBpICYmIGpvKGUsIHQsIGkpLCBpO1xufSwgYmUgPSAvKiBAX19QVVJFX18gKi8gKChzKSA9PiAocy5DbG9zZSA9IFwiY2xvc2VcIiwgcykpKGJlIHx8IHt9KTtcbmNvbnN0IE4gPSBjbGFzcyBleHRlbmRzIEVlIHtcbiAgLyoqXG4gICAqIENvbnN0cnVjdHMgdGhlIGluc3RhbmNlXG4gICAqXG4gICAqIEBwYXJhbSBwYXJhbXMgLSBwb3BvdmVyIGNvbnN0cnVjdGlvbiBwYXJhbXNcbiAgICovXG4gIGNvbnN0cnVjdG9yKHMpIHtcbiAgICBzdXBlcigpLCB0aGlzLnNjb3BlRWxlbWVudCA9IGRvY3VtZW50LmJvZHksIHRoaXMubGlzdGVuZXJzID0gbmV3IEZlKCksIHRoaXMuc2Nyb2xsTG9ja2VyID0gbmV3IHZ0KCksIHRoaXMubm9kZXMgPSB7XG4gICAgICB3cmFwcGVyOiBudWxsLFxuICAgICAgcG9wb3ZlcjogbnVsbCxcbiAgICAgIG5vdGhpbmdGb3VuZE1lc3NhZ2U6IG51bGwsXG4gICAgICBjdXN0b21Db250ZW50OiBudWxsLFxuICAgICAgaXRlbXM6IG51bGwsXG4gICAgICBvdmVybGF5OiBudWxsXG4gICAgfSwgdGhpcy5tZXNzYWdlcyA9IHtcbiAgICAgIG5vdGhpbmdGb3VuZDogXCJOb3RoaW5nIGZvdW5kXCIsXG4gICAgICBzZWFyY2g6IFwiU2VhcmNoXCJcbiAgICB9LCB0aGlzLm9uRmxpcCA9ICgpID0+IHtcbiAgICAgIHRoaXMuaXRlbXMuZmluZCgodCkgPT4gdC5pc0ZvY3VzZWQpLm9uRm9jdXMoKTtcbiAgICB9LCB0aGlzLml0ZW1zID0gcy5pdGVtcy5tYXAoKGUpID0+IG5ldyBfKGUpKSwgcy5zY29wZUVsZW1lbnQgIT09IHZvaWQgMCAmJiAodGhpcy5zY29wZUVsZW1lbnQgPSBzLnNjb3BlRWxlbWVudCksIHMubWVzc2FnZXMgJiYgKHRoaXMubWVzc2FnZXMgPSB7XG4gICAgICAuLi50aGlzLm1lc3NhZ2VzLFxuICAgICAgLi4ucy5tZXNzYWdlc1xuICAgIH0pLCBzLmN1c3RvbUNvbnRlbnRGbGlwcGFibGVJdGVtcyAmJiAodGhpcy5jdXN0b21Db250ZW50RmxpcHBhYmxlSXRlbXMgPSBzLmN1c3RvbUNvbnRlbnRGbGlwcGFibGVJdGVtcyksIHRoaXMubWFrZSgpLCBzLmN1c3RvbUNvbnRlbnQgJiYgdGhpcy5hZGRDdXN0b21Db250ZW50KHMuY3VzdG9tQ29udGVudCksIHMuc2VhcmNoYWJsZSAmJiB0aGlzLmFkZFNlYXJjaCgpLCB0aGlzLmluaXRpYWxpemVGbGlwcGVyKCk7XG4gIH1cbiAgLyoqXG4gICAqIFBvcG92ZXIgQ1NTIGNsYXNzZXNcbiAgICovXG4gIHN0YXRpYyBnZXQgQ1NTKCkge1xuICAgIHJldHVybiB7XG4gICAgICBwb3BvdmVyOiBcImNlLXBvcG92ZXJcIixcbiAgICAgIHBvcG92ZXJPcGVuVG9wOiBcImNlLXBvcG92ZXItLW9wZW4tdG9wXCIsXG4gICAgICBwb3BvdmVyT3BlbmVkOiBcImNlLXBvcG92ZXItLW9wZW5lZFwiLFxuICAgICAgc2VhcmNoOiBcImNlLXBvcG92ZXJfX3NlYXJjaFwiLFxuICAgICAgbm90aGluZ0ZvdW5kTWVzc2FnZTogXCJjZS1wb3BvdmVyX19ub3RoaW5nLWZvdW5kLW1lc3NhZ2VcIixcbiAgICAgIG5vdGhpbmdGb3VuZE1lc3NhZ2VEaXNwbGF5ZWQ6IFwiY2UtcG9wb3Zlcl9fbm90aGluZy1mb3VuZC1tZXNzYWdlLS1kaXNwbGF5ZWRcIixcbiAgICAgIGN1c3RvbUNvbnRlbnQ6IFwiY2UtcG9wb3Zlcl9fY3VzdG9tLWNvbnRlbnRcIixcbiAgICAgIGN1c3RvbUNvbnRlbnRIaWRkZW46IFwiY2UtcG9wb3Zlcl9fY3VzdG9tLWNvbnRlbnQtLWhpZGRlblwiLFxuICAgICAgaXRlbXM6IFwiY2UtcG9wb3Zlcl9faXRlbXNcIixcbiAgICAgIG92ZXJsYXk6IFwiY2UtcG9wb3Zlcl9fb3ZlcmxheVwiLFxuICAgICAgb3ZlcmxheUhpZGRlbjogXCJjZS1wb3BvdmVyX19vdmVybGF5LS1oaWRkZW5cIlxuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgSFRNTCBlbGVtZW50IGNvcnJlc3BvbmRpbmcgdG8gdGhlIHBvcG92ZXJcbiAgICovXG4gIGdldEVsZW1lbnQoKSB7XG4gICAgcmV0dXJuIHRoaXMubm9kZXMud3JhcHBlcjtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyB0cnVlIGlmIHNvbWUgaXRlbSBpbnNpZGUgcG9wb3ZlciBpcyBmb2N1c2VkXG4gICAqL1xuICBoYXNGb2N1cygpIHtcbiAgICByZXR1cm4gdGhpcy5mbGlwcGVyLmhhc0ZvY3VzKCk7XG4gIH1cbiAgLyoqXG4gICAqIE9wZW4gcG9wb3ZlclxuICAgKi9cbiAgc2hvdygpIHtcbiAgICB0aGlzLnNob3VsZE9wZW5Cb3R0b20gfHwgKHRoaXMubm9kZXMucG9wb3Zlci5zdHlsZS5zZXRQcm9wZXJ0eShcIi0tcG9wb3Zlci1oZWlnaHRcIiwgdGhpcy5oZWlnaHQgKyBcInB4XCIpLCB0aGlzLm5vZGVzLnBvcG92ZXIuY2xhc3NMaXN0LmFkZChOLkNTUy5wb3BvdmVyT3BlblRvcCkpLCB0aGlzLm5vZGVzLm92ZXJsYXkuY2xhc3NMaXN0LnJlbW92ZShOLkNTUy5vdmVybGF5SGlkZGVuKSwgdGhpcy5ub2Rlcy5wb3BvdmVyLmNsYXNzTGlzdC5hZGQoTi5DU1MucG9wb3Zlck9wZW5lZCksIHRoaXMuZmxpcHBlci5hY3RpdmF0ZSh0aGlzLmZsaXBwYWJsZUVsZW1lbnRzKSwgdGhpcy5zZWFyY2ggIT09IHZvaWQgMCAmJiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgdmFyIHM7XG4gICAgICAocyA9IHRoaXMuc2VhcmNoKSA9PSBudWxsIHx8IHMuZm9jdXMoKTtcbiAgICB9KSwgdGUoKSAmJiB0aGlzLnNjcm9sbExvY2tlci5sb2NrKCk7XG4gIH1cbiAgLyoqXG4gICAqIENsb3NlcyBwb3BvdmVyXG4gICAqL1xuICBoaWRlKCkge1xuICAgIHRoaXMubm9kZXMucG9wb3Zlci5jbGFzc0xpc3QucmVtb3ZlKE4uQ1NTLnBvcG92ZXJPcGVuZWQpLCB0aGlzLm5vZGVzLnBvcG92ZXIuY2xhc3NMaXN0LnJlbW92ZShOLkNTUy5wb3BvdmVyT3BlblRvcCksIHRoaXMubm9kZXMub3ZlcmxheS5jbGFzc0xpc3QuYWRkKE4uQ1NTLm92ZXJsYXlIaWRkZW4pLCB0aGlzLmZsaXBwZXIuZGVhY3RpdmF0ZSgpLCB0aGlzLml0ZW1zLmZvckVhY2goKHMpID0+IHMucmVzZXQoKSksIHRoaXMuc2VhcmNoICE9PSB2b2lkIDAgJiYgdGhpcy5zZWFyY2guY2xlYXIoKSwgdGUoKSAmJiB0aGlzLnNjcm9sbExvY2tlci51bmxvY2soKSwgdGhpcy5lbWl0KFxuICAgICAgXCJjbG9zZVwiXG4gICAgICAvKiBDbG9zZSAqL1xuICAgICk7XG4gIH1cbiAgLyoqXG4gICAqIENsZWFycyBtZW1vcnlcbiAgICovXG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy5mbGlwcGVyLmRlYWN0aXZhdGUoKSwgdGhpcy5saXN0ZW5lcnMucmVtb3ZlQWxsKCksIHRlKCkgJiYgdGhpcy5zY3JvbGxMb2NrZXIudW5sb2NrKCk7XG4gIH1cbiAgLyoqXG4gICAqIENvbnN0cnVjdHMgSFRNTCBlbGVtZW50IGNvcnJlc3BvbmRpbmcgdG8gcG9wb3ZlclxuICAgKi9cbiAgbWFrZSgpIHtcbiAgICB0aGlzLm5vZGVzLnBvcG92ZXIgPSBjLm1ha2UoXCJkaXZcIiwgW04uQ1NTLnBvcG92ZXJdKSwgdGhpcy5ub2Rlcy5ub3RoaW5nRm91bmRNZXNzYWdlID0gYy5tYWtlKFwiZGl2XCIsIFtOLkNTUy5ub3RoaW5nRm91bmRNZXNzYWdlXSwge1xuICAgICAgdGV4dENvbnRlbnQ6IHRoaXMubWVzc2FnZXMubm90aGluZ0ZvdW5kXG4gICAgfSksIHRoaXMubm9kZXMucG9wb3Zlci5hcHBlbmRDaGlsZCh0aGlzLm5vZGVzLm5vdGhpbmdGb3VuZE1lc3NhZ2UpLCB0aGlzLm5vZGVzLml0ZW1zID0gYy5tYWtlKFwiZGl2XCIsIFtOLkNTUy5pdGVtc10pLCB0aGlzLml0ZW1zLmZvckVhY2goKHMpID0+IHtcbiAgICAgIHRoaXMubm9kZXMuaXRlbXMuYXBwZW5kQ2hpbGQocy5nZXRFbGVtZW50KCkpO1xuICAgIH0pLCB0aGlzLm5vZGVzLnBvcG92ZXIuYXBwZW5kQ2hpbGQodGhpcy5ub2Rlcy5pdGVtcyksIHRoaXMubGlzdGVuZXJzLm9uKHRoaXMubm9kZXMucG9wb3ZlciwgXCJjbGlja1wiLCAocykgPT4ge1xuICAgICAgY29uc3QgZSA9IHRoaXMuZ2V0VGFyZ2V0SXRlbShzKTtcbiAgICAgIGUgIT09IHZvaWQgMCAmJiB0aGlzLmhhbmRsZUl0ZW1DbGljayhlKTtcbiAgICB9KSwgdGhpcy5ub2Rlcy53cmFwcGVyID0gYy5tYWtlKFwiZGl2XCIpLCB0aGlzLm5vZGVzLm92ZXJsYXkgPSBjLm1ha2UoXCJkaXZcIiwgW04uQ1NTLm92ZXJsYXksIE4uQ1NTLm92ZXJsYXlIaWRkZW5dKSwgdGhpcy5saXN0ZW5lcnMub24odGhpcy5ub2Rlcy5vdmVybGF5LCBcImNsaWNrXCIsICgpID0+IHtcbiAgICAgIHRoaXMuaGlkZSgpO1xuICAgIH0pLCB0aGlzLm5vZGVzLndyYXBwZXIuYXBwZW5kQ2hpbGQodGhpcy5ub2Rlcy5vdmVybGF5KSwgdGhpcy5ub2Rlcy53cmFwcGVyLmFwcGVuZENoaWxkKHRoaXMubm9kZXMucG9wb3Zlcik7XG4gIH1cbiAgLyoqXG4gICAqIEFkZHMgc2VhcmNoIHRvIHRoZSBwb3BvdmVyXG4gICAqL1xuICBhZGRTZWFyY2goKSB7XG4gICAgdGhpcy5zZWFyY2ggPSBuZXcgcGUoe1xuICAgICAgaXRlbXM6IHRoaXMuaXRlbXMsXG4gICAgICBwbGFjZWhvbGRlcjogdGhpcy5tZXNzYWdlcy5zZWFyY2gsXG4gICAgICBvblNlYXJjaDogKGUsIHQpID0+IHtcbiAgICAgICAgdGhpcy5pdGVtcy5mb3JFYWNoKChpKSA9PiB7XG4gICAgICAgICAgY29uc3QgbiA9ICF0LmluY2x1ZGVzKGkpO1xuICAgICAgICAgIGkudG9nZ2xlSGlkZGVuKG4pO1xuICAgICAgICB9KSwgdGhpcy50b2dnbGVOb3RoaW5nRm91bmRNZXNzYWdlKHQubGVuZ3RoID09PSAwKSwgdGhpcy50b2dnbGVDdXN0b21Db250ZW50KGUgIT09IFwiXCIpO1xuICAgICAgICBjb25zdCBvID0gZSA9PT0gXCJcIiA/IHRoaXMuZmxpcHBhYmxlRWxlbWVudHMgOiB0Lm1hcCgoaSkgPT4gaS5nZXRFbGVtZW50KCkpO1xuICAgICAgICB0aGlzLmZsaXBwZXIuaXNBY3RpdmF0ZWQgJiYgKHRoaXMuZmxpcHBlci5kZWFjdGl2YXRlKCksIHRoaXMuZmxpcHBlci5hY3RpdmF0ZShvKSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgY29uc3QgcyA9IHRoaXMuc2VhcmNoLmdldEVsZW1lbnQoKTtcbiAgICBzLmNsYXNzTGlzdC5hZGQoTi5DU1Muc2VhcmNoKSwgdGhpcy5ub2Rlcy5wb3BvdmVyLmluc2VydEJlZm9yZShzLCB0aGlzLm5vZGVzLnBvcG92ZXIuZmlyc3RDaGlsZCk7XG4gIH1cbiAgLyoqXG4gICAqIEFkZHMgY3VzdG9tIGh0bWwgY29udGVudCB0byB0aGUgcG9wb3ZlclxuICAgKlxuICAgKiBAcGFyYW0gY29udGVudCAtIGh0bWwgY29udGVudCB0byBhcHBlbmRcbiAgICovXG4gIGFkZEN1c3RvbUNvbnRlbnQocykge1xuICAgIHRoaXMubm9kZXMuY3VzdG9tQ29udGVudCA9IHMsIHRoaXMubm9kZXMuY3VzdG9tQ29udGVudC5jbGFzc0xpc3QuYWRkKE4uQ1NTLmN1c3RvbUNvbnRlbnQpLCB0aGlzLm5vZGVzLnBvcG92ZXIuaW5zZXJ0QmVmb3JlKHMsIHRoaXMubm9kZXMucG9wb3Zlci5maXJzdENoaWxkKTtcbiAgfVxuICAvKipcbiAgICogUmV0cmlldmVzIHBvcG92ZXIgaXRlbSB0aGF0IGlzIHRoZSB0YXJnZXQgb2YgdGhlIHNwZWNpZmllZCBldmVudFxuICAgKlxuICAgKiBAcGFyYW0gZXZlbnQgLSBldmVudCB0byByZXRyaWV2ZSBwb3BvdmVyIGl0ZW0gZnJvbVxuICAgKi9cbiAgZ2V0VGFyZ2V0SXRlbShzKSB7XG4gICAgcmV0dXJuIHRoaXMuaXRlbXMuZmluZCgoZSkgPT4gcy5jb21wb3NlZFBhdGgoKS5pbmNsdWRlcyhlLmdldEVsZW1lbnQoKSkpO1xuICB9XG4gIC8qKlxuICAgKiBIYW5kbGVzIGl0ZW0gY2xpY2tzXG4gICAqXG4gICAqIEBwYXJhbSBpdGVtIC0gaXRlbSB0byBoYW5kbGUgY2xpY2sgb2ZcbiAgICovXG4gIGhhbmRsZUl0ZW1DbGljayhzKSB7XG4gICAgcy5pc0Rpc2FibGVkIHx8ICh0aGlzLml0ZW1zLmZpbHRlcigoZSkgPT4gZSAhPT0gcykuZm9yRWFjaCgoZSkgPT4gZS5yZXNldCgpKSwgcy5oYW5kbGVDbGljaygpLCB0aGlzLnRvZ2dsZUl0ZW1BY3RpdmVuZXNzSWZOZWVkZWQocyksIHMuY2xvc2VPbkFjdGl2YXRlICYmIHRoaXMuaGlkZSgpKTtcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlcyBGbGlwcGVyIGluc3RhbmNlIHdoaWNoIGFsbG93cyB0byBuYXZpZ2F0ZSBiZXR3ZWVuIHBvcG92ZXIgaXRlbXMgdmlhIGtleWJvYXJkXG4gICAqL1xuICBpbml0aWFsaXplRmxpcHBlcigpIHtcbiAgICB0aGlzLmZsaXBwZXIgPSBuZXcgcSh7XG4gICAgICBpdGVtczogdGhpcy5mbGlwcGFibGVFbGVtZW50cyxcbiAgICAgIGZvY3VzZWRJdGVtQ2xhc3M6IF8uQ1NTLmZvY3VzZWQsXG4gICAgICBhbGxvd2VkS2V5czogW1xuICAgICAgICBrLlRBQixcbiAgICAgICAgay5VUCxcbiAgICAgICAgay5ET1dOLFxuICAgICAgICBrLkVOVEVSXG4gICAgICBdXG4gICAgfSksIHRoaXMuZmxpcHBlci5vbkZsaXAodGhpcy5vbkZsaXApO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIGxpc3Qgb2YgZWxlbWVudHMgYXZhaWxhYmxlIGZvciBrZXlib2FyZCBuYXZpZ2F0aW9uLlxuICAgKiBDb250YWlucyBib3RoIHVzdWFsIHBvcG92ZXIgaXRlbXMgZWxlbWVudHMgYW5kIGN1c3RvbSBodG1sIGNvbnRlbnQuXG4gICAqL1xuICBnZXQgZmxpcHBhYmxlRWxlbWVudHMoKSB7XG4gICAgY29uc3QgcyA9IHRoaXMuaXRlbXMubWFwKCh0KSA9PiB0LmdldEVsZW1lbnQoKSk7XG4gICAgcmV0dXJuICh0aGlzLmN1c3RvbUNvbnRlbnRGbGlwcGFibGVJdGVtcyB8fCBbXSkuY29uY2F0KHMpO1xuICB9XG4gIGdldCBoZWlnaHQoKSB7XG4gICAgbGV0IHMgPSAwO1xuICAgIGlmICh0aGlzLm5vZGVzLnBvcG92ZXIgPT09IG51bGwpXG4gICAgICByZXR1cm4gcztcbiAgICBjb25zdCBlID0gdGhpcy5ub2Rlcy5wb3BvdmVyLmNsb25lTm9kZSghMCk7XG4gICAgcmV0dXJuIGUuc3R5bGUudmlzaWJpbGl0eSA9IFwiaGlkZGVuXCIsIGUuc3R5bGUucG9zaXRpb24gPSBcImFic29sdXRlXCIsIGUuc3R5bGUudG9wID0gXCItMTAwMHB4XCIsIGUuY2xhc3NMaXN0LmFkZChOLkNTUy5wb3BvdmVyT3BlbmVkKSwgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChlKSwgcyA9IGUub2Zmc2V0SGVpZ2h0LCBlLnJlbW92ZSgpLCBzO1xuICB9XG4gIC8qKlxuICAgKiBDaGVja3MgaWYgcG9wb3ZlciBzaG91bGQgYmUgb3BlbmVkIGJvdHRvbS5cbiAgICogSXQgc2hvdWxkIGhhcHBlbiB3aGVuIHRoZXJlIGlzIGVub3VnaCBzcGFjZSBiZWxvdyBvciBub3QgZW5vdWdoIHNwYWNlIGFib3ZlXG4gICAqL1xuICBnZXQgc2hvdWxkT3BlbkJvdHRvbSgpIHtcbiAgICBjb25zdCBzID0gdGhpcy5ub2Rlcy5wb3BvdmVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLCBlID0gdGhpcy5zY29wZUVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksIHQgPSB0aGlzLmhlaWdodCwgbyA9IHMudG9wICsgdCwgaSA9IHMudG9wIC0gdCwgbiA9IE1hdGgubWluKHdpbmRvdy5pbm5lckhlaWdodCwgZS5ib3R0b20pO1xuICAgIHJldHVybiBpIDwgZS50b3AgfHwgbyA8PSBuO1xuICB9XG4gIC8qKlxuICAgKiBUb2dnbGVzIG5vdGhpbmcgZm91bmQgbWVzc2FnZSB2aXNpYmlsaXR5XG4gICAqXG4gICAqIEBwYXJhbSBpc0Rpc3BsYXllZCAtIHRydWUgaWYgdGhlIG1lc3NhZ2Ugc2hvdWxkIGJlIGRpc3BsYXllZFxuICAgKi9cbiAgdG9nZ2xlTm90aGluZ0ZvdW5kTWVzc2FnZShzKSB7XG4gICAgdGhpcy5ub2Rlcy5ub3RoaW5nRm91bmRNZXNzYWdlLmNsYXNzTGlzdC50b2dnbGUoTi5DU1Mubm90aGluZ0ZvdW5kTWVzc2FnZURpc3BsYXllZCwgcyk7XG4gIH1cbiAgLyoqXG4gICAqIFRvZ2dsZXMgY3VzdG9tIGNvbnRlbnQgdmlzaWJpbGl0eVxuICAgKlxuICAgKiBAcGFyYW0gaXNEaXNwbGF5ZWQgLSB0cnVlIGlmIGN1c3RvbSBjb250ZW50IHNob3VsZCBiZSBkaXNwbGF5ZWRcbiAgICovXG4gIHRvZ2dsZUN1c3RvbUNvbnRlbnQocykge1xuICAgIHZhciBlO1xuICAgIChlID0gdGhpcy5ub2Rlcy5jdXN0b21Db250ZW50KSA9PSBudWxsIHx8IGUuY2xhc3NMaXN0LnRvZ2dsZShOLkNTUy5jdXN0b21Db250ZW50SGlkZGVuLCBzKTtcbiAgfVxuICAvKipcbiAgICogLSBUb2dnbGVzIGl0ZW0gYWN0aXZlIHN0YXRlLCBpZiBjbGlja2VkIHBvcG92ZXIgaXRlbSBoYXMgcHJvcGVydHkgJ3RvZ2dsZScgc2V0IHRvIHRydWUuXG4gICAqXG4gICAqIC0gUGVyZm9ybXMgcmFkaW9idXR0b24tbGlrZSBiZWhhdmlvciBpZiB0aGUgaXRlbSBoYXMgcHJvcGVydHkgJ3RvZ2dsZScgc2V0IHRvIHN0cmluZyBrZXkuXG4gICAqIChBbGwgdGhlIG90aGVyIGl0ZW1zIHdpdGggdGhlIHNhbWUga2V5IGdldCBpbmFjdGl2ZSwgYW5kIHRoZSBpdGVtIGdldHMgYWN0aXZlKVxuICAgKlxuICAgKiBAcGFyYW0gY2xpY2tlZEl0ZW0gLSBwb3BvdmVyIGl0ZW0gdGhhdCB3YXMgY2xpY2tlZFxuICAgKi9cbiAgdG9nZ2xlSXRlbUFjdGl2ZW5lc3NJZk5lZWRlZChzKSB7XG4gICAgaWYgKHMudG9nZ2xlID09PSAhMCAmJiBzLnRvZ2dsZUFjdGl2ZSgpLCB0eXBlb2Ygcy50b2dnbGUgPT0gXCJzdHJpbmdcIikge1xuICAgICAgY29uc3QgZSA9IHRoaXMuaXRlbXMuZmlsdGVyKCh0KSA9PiB0LnRvZ2dsZSA9PT0gcy50b2dnbGUpO1xuICAgICAgaWYgKGUubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHMudG9nZ2xlQWN0aXZlKCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGUuZm9yRWFjaCgodCkgPT4ge1xuICAgICAgICB0LnRvZ2dsZUFjdGl2ZSh0ID09PSBzKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufTtcbmxldCBqZSA9IE47XG5XbyhbXG4gIGxlXG5dLCBqZS5wcm90b3R5cGUsIFwiaGVpZ2h0XCIsIDEpO1xuY2xhc3MgWW8gZXh0ZW5kcyB5IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKSwgdGhpcy5vcGVuZWQgPSAhMSwgdGhpcy5zZWxlY3Rpb24gPSBuZXcgYigpLCB0aGlzLm9uUG9wb3ZlckNsb3NlID0gKCkgPT4ge1xuICAgICAgdGhpcy5jbG9zZSgpO1xuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIE1vZHVsZSBFdmVudHNcbiAgICpcbiAgICogQHJldHVybnMge3tvcGVuZWQ6IHN0cmluZywgY2xvc2VkOiBzdHJpbmd9fVxuICAgKi9cbiAgZ2V0IGV2ZW50cygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgb3BlbmVkOiBcImJsb2NrLXNldHRpbmdzLW9wZW5lZFwiLFxuICAgICAgY2xvc2VkOiBcImJsb2NrLXNldHRpbmdzLWNsb3NlZFwiXG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogQmxvY2sgU2V0dGluZ3MgQ1NTXG4gICAqL1xuICBnZXQgQ1NTKCkge1xuICAgIHJldHVybiB7XG4gICAgICBzZXR0aW5nczogXCJjZS1zZXR0aW5nc1wiXG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogR2V0dGVyIGZvciBpbm5lciBwb3BvdmVyJ3MgZmxpcHBlciBpbnN0YW5jZVxuICAgKlxuICAgKiBAdG9kbyByZW1vdmUgb25jZSBCbG9ja1NldHRpbmdzIGJlY29tZXMgc3RhbmRhbG9uZSBub24tbW9kdWxlIGNsYXNzXG4gICAqL1xuICBnZXQgZmxpcHBlcigpIHtcbiAgICB2YXIgZTtcbiAgICByZXR1cm4gKGUgPSB0aGlzLnBvcG92ZXIpID09IG51bGwgPyB2b2lkIDAgOiBlLmZsaXBwZXI7XG4gIH1cbiAgLyoqXG4gICAqIFBhbmVsIHdpdGggYmxvY2sgc2V0dGluZ3Mgd2l0aCAyIHNlY3Rpb25zOlxuICAgKiAgLSBUb29sJ3MgU2V0dGluZ3NcbiAgICogIC0gRGVmYXVsdCBTZXR0aW5ncyBbTW92ZSwgUmVtb3ZlLCBldGNdXG4gICAqL1xuICBtYWtlKCkge1xuICAgIHRoaXMubm9kZXMud3JhcHBlciA9IGMubWFrZShcImRpdlwiLCBbdGhpcy5DU1Muc2V0dGluZ3NdKTtcbiAgfVxuICAvKipcbiAgICogRGVzdHJveXMgbW9kdWxlXG4gICAqL1xuICBkZXN0cm95KCkge1xuICAgIHRoaXMucmVtb3ZlQWxsTm9kZXMoKTtcbiAgfVxuICAvKipcbiAgICogT3BlbiBCbG9jayBTZXR0aW5ncyBwYW5lXG4gICAqXG4gICAqIEBwYXJhbSB0YXJnZXRCbG9jayAtIG5lYXIgd2hpY2ggQmxvY2sgd2Ugc2hvdWxkIG9wZW4gQmxvY2tTZXR0aW5nc1xuICAgKi9cbiAgb3BlbihlID0gdGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLmN1cnJlbnRCbG9jaykge1xuICAgIHRoaXMub3BlbmVkID0gITAsIHRoaXMuc2VsZWN0aW9uLnNhdmUoKSwgdGhpcy5FZGl0b3IuQmxvY2tTZWxlY3Rpb24uc2VsZWN0QmxvY2soZSksIHRoaXMuRWRpdG9yLkJsb2NrU2VsZWN0aW9uLmNsZWFyQ2FjaGUoKTtcbiAgICBjb25zdCBbdCwgb10gPSBlLmdldFR1bmVzKCk7XG4gICAgdGhpcy5ldmVudHNEaXNwYXRjaGVyLmVtaXQodGhpcy5ldmVudHMub3BlbmVkKSwgdGhpcy5wb3BvdmVyID0gbmV3IGplKHtcbiAgICAgIHNlYXJjaGFibGU6ICEwLFxuICAgICAgaXRlbXM6IHQubWFwKChpKSA9PiB0aGlzLnJlc29sdmVUdW5lQWxpYXNlcyhpKSksXG4gICAgICBjdXN0b21Db250ZW50OiBvLFxuICAgICAgY3VzdG9tQ29udGVudEZsaXBwYWJsZUl0ZW1zOiB0aGlzLmdldENvbnRyb2xzKG8pLFxuICAgICAgc2NvcGVFbGVtZW50OiB0aGlzLkVkaXRvci5BUEkubWV0aG9kcy51aS5ub2Rlcy5yZWRhY3RvcixcbiAgICAgIG1lc3NhZ2VzOiB7XG4gICAgICAgIG5vdGhpbmdGb3VuZDogei51aShLLnVpLnBvcG92ZXIsIFwiTm90aGluZyBmb3VuZFwiKSxcbiAgICAgICAgc2VhcmNoOiB6LnVpKEsudWkucG9wb3ZlciwgXCJGaWx0ZXJcIilcbiAgICAgIH1cbiAgICB9KSwgdGhpcy5wb3BvdmVyLm9uKGJlLkNsb3NlLCB0aGlzLm9uUG9wb3ZlckNsb3NlKSwgdGhpcy5ub2Rlcy53cmFwcGVyLmFwcGVuZCh0aGlzLnBvcG92ZXIuZ2V0RWxlbWVudCgpKSwgdGhpcy5wb3BvdmVyLnNob3coKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyByb290IGJsb2NrIHNldHRpbmdzIGVsZW1lbnRcbiAgICovXG4gIGdldEVsZW1lbnQoKSB7XG4gICAgcmV0dXJuIHRoaXMubm9kZXMud3JhcHBlcjtcbiAgfVxuICAvKipcbiAgICogQ2xvc2UgQmxvY2sgU2V0dGluZ3MgcGFuZVxuICAgKi9cbiAgY2xvc2UoKSB7XG4gICAgdGhpcy5vcGVuZWQgJiYgKHRoaXMub3BlbmVkID0gITEsIGIuaXNBdEVkaXRvciB8fCB0aGlzLnNlbGVjdGlvbi5yZXN0b3JlKCksIHRoaXMuc2VsZWN0aW9uLmNsZWFyU2F2ZWQoKSwgIXRoaXMuRWRpdG9yLkNyb3NzQmxvY2tTZWxlY3Rpb24uaXNDcm9zc0Jsb2NrU2VsZWN0aW9uU3RhcnRlZCAmJiB0aGlzLkVkaXRvci5CbG9ja01hbmFnZXIuY3VycmVudEJsb2NrICYmIHRoaXMuRWRpdG9yLkJsb2NrU2VsZWN0aW9uLnVuc2VsZWN0QmxvY2sodGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLmN1cnJlbnRCbG9jayksIHRoaXMuZXZlbnRzRGlzcGF0Y2hlci5lbWl0KHRoaXMuZXZlbnRzLmNsb3NlZCksIHRoaXMucG9wb3ZlciAmJiAodGhpcy5wb3BvdmVyLm9mZihiZS5DbG9zZSwgdGhpcy5vblBvcG92ZXJDbG9zZSksIHRoaXMucG9wb3Zlci5kZXN0cm95KCksIHRoaXMucG9wb3Zlci5nZXRFbGVtZW50KCkucmVtb3ZlKCksIHRoaXMucG9wb3ZlciA9IG51bGwpKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBsaXN0IG9mIGJ1dHRvbnMgYW5kIGlucHV0cyBpbnNpZGUgc3BlY2lmaWVkIGNvbnRhaW5lclxuICAgKlxuICAgKiBAcGFyYW0gY29udGFpbmVyIC0gY29udGFpbmVyIHRvIHF1ZXJ5IGNvbnRyb2xzIGluc2lkZSBvZlxuICAgKi9cbiAgZ2V0Q29udHJvbHMoZSkge1xuICAgIGNvbnN0IHsgU3R5bGVzQVBJOiB0IH0gPSB0aGlzLkVkaXRvciwgbyA9IGUucXVlcnlTZWxlY3RvckFsbChcbiAgICAgIGAuJHt0LmNsYXNzZXMuc2V0dGluZ3NCdXR0b259LCAke2MuYWxsSW5wdXRzU2VsZWN0b3J9YFxuICAgICk7XG4gICAgcmV0dXJuIEFycmF5LmZyb20obyk7XG4gIH1cbiAgLyoqXG4gICAqIFJlc29sdmVzIGFsaWFzZXMgaW4gdHVuZXMgbWVudSBpdGVtc1xuICAgKlxuICAgKiBAcGFyYW0gaXRlbSAtIGl0ZW0gd2l0aCByZXNvbHZlZCBhbGlhc2VzXG4gICAqL1xuICByZXNvbHZlVHVuZUFsaWFzZXMoZSkge1xuICAgIGNvbnN0IHQgPSBBbyhlLCB7IGxhYmVsOiBcInRpdGxlXCIgfSk7XG4gICAgcmV0dXJuIGUuY29uZmlybWF0aW9uICYmICh0LmNvbmZpcm1hdGlvbiA9IHRoaXMucmVzb2x2ZVR1bmVBbGlhc2VzKGUuY29uZmlybWF0aW9uKSksIHQ7XG4gIH1cbn1cbmNsYXNzICQgZXh0ZW5kcyB5IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKSwgdGhpcy5vcGVuZWQgPSAhMSwgdGhpcy50b29scyA9IFtdLCB0aGlzLmZsaXBwZXIgPSBudWxsLCB0aGlzLnRvZ2dsaW5nQ2FsbGJhY2sgPSBudWxsO1xuICB9XG4gIC8qKlxuICAgKiBDU1MgZ2V0dGVyXG4gICAqL1xuICBzdGF0aWMgZ2V0IENTUygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgY29udmVyc2lvblRvb2xiYXJXcmFwcGVyOiBcImNlLWNvbnZlcnNpb24tdG9vbGJhclwiLFxuICAgICAgY29udmVyc2lvblRvb2xiYXJTaG93ZWQ6IFwiY2UtY29udmVyc2lvbi10b29sYmFyLS1zaG93ZWRcIixcbiAgICAgIGNvbnZlcnNpb25Ub29sYmFyVG9vbHM6IFwiY2UtY29udmVyc2lvbi10b29sYmFyX190b29sc1wiLFxuICAgICAgY29udmVyc2lvblRvb2xiYXJMYWJlbDogXCJjZS1jb252ZXJzaW9uLXRvb2xiYXJfX2xhYmVsXCIsXG4gICAgICBjb252ZXJzaW9uVG9vbDogXCJjZS1jb252ZXJzaW9uLXRvb2xcIixcbiAgICAgIGNvbnZlcnNpb25Ub29sSGlkZGVuOiBcImNlLWNvbnZlcnNpb24tdG9vbC0taGlkZGVuXCIsXG4gICAgICBjb252ZXJzaW9uVG9vbEljb246IFwiY2UtY29udmVyc2lvbi10b29sX19pY29uXCIsXG4gICAgICBjb252ZXJzaW9uVG9vbFNlY29uZGFyeUxhYmVsOiBcImNlLWNvbnZlcnNpb24tdG9vbF9fc2Vjb25kYXJ5LWxhYmVsXCIsXG4gICAgICBjb252ZXJzaW9uVG9vbEZvY3VzZWQ6IFwiY2UtY29udmVyc2lvbi10b29sLS1mb2N1c2VkXCIsXG4gICAgICBjb252ZXJzaW9uVG9vbEFjdGl2ZTogXCJjZS1jb252ZXJzaW9uLXRvb2wtLWFjdGl2ZVwiXG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlIFVJIG9mIENvbnZlcnNpb24gVG9vbGJhclxuICAgKi9cbiAgbWFrZSgpIHtcbiAgICB0aGlzLm5vZGVzLndyYXBwZXIgPSBjLm1ha2UoXCJkaXZcIiwgW1xuICAgICAgJC5DU1MuY29udmVyc2lvblRvb2xiYXJXcmFwcGVyLFxuICAgICAgLi4udGhpcy5pc1J0bCA/IFt0aGlzLkVkaXRvci5VSS5DU1MuZWRpdG9yUnRsRml4XSA6IFtdXG4gICAgXSksIHRoaXMubm9kZXMudG9vbHMgPSBjLm1ha2UoXCJkaXZcIiwgJC5DU1MuY29udmVyc2lvblRvb2xiYXJUb29scyk7XG4gICAgY29uc3QgZSA9IGMubWFrZShcImRpdlwiLCAkLkNTUy5jb252ZXJzaW9uVG9vbGJhckxhYmVsLCB7XG4gICAgICB0ZXh0Q29udGVudDogei51aShLLnVpLmlubGluZVRvb2xiYXIuY29udmVydGVyLCBcIkNvbnZlcnQgdG9cIilcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcy5hZGRUb29scygpLCB0aGlzLmVuYWJsZUZsaXBwZXIoKSwgYy5hcHBlbmQodGhpcy5ub2Rlcy53cmFwcGVyLCBlKSwgYy5hcHBlbmQodGhpcy5ub2Rlcy53cmFwcGVyLCB0aGlzLm5vZGVzLnRvb2xzKSwgdGhpcy5ub2Rlcy53cmFwcGVyO1xuICB9XG4gIC8qKlxuICAgKiBEZWFjdGl2YXRlcyBmbGlwcGVyIGFuZCByZW1vdmVzIGFsbCBub2Rlc1xuICAgKi9cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLmZsaXBwZXIgJiYgKHRoaXMuZmxpcHBlci5kZWFjdGl2YXRlKCksIHRoaXMuZmxpcHBlciA9IG51bGwpLCB0aGlzLnJlbW92ZUFsbE5vZGVzKCk7XG4gIH1cbiAgLyoqXG4gICAqIFRvZ2dsZSBjb252ZXJzaW9uIGRyb3Bkb3duIHZpc2liaWxpdHlcbiAgICpcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3RvZ2dsaW5nQ2FsbGJhY2tdIOKAlCBjYWxsYmFjayB0aGF0IHdpbGwgYWNjZXB0IG9wZW5pbmcgc3RhdGVcbiAgICovXG4gIHRvZ2dsZShlKSB7XG4gICAgdGhpcy5vcGVuZWQgPyB0aGlzLmNsb3NlKCkgOiB0aGlzLm9wZW4oKSwgTShlKSAmJiAodGhpcy50b2dnbGluZ0NhbGxiYWNrID0gZSk7XG4gIH1cbiAgLyoqXG4gICAqIFNob3dzIENvbnZlcnNpb24gVG9vbGJhclxuICAgKi9cbiAgb3BlbigpIHtcbiAgICB0aGlzLmZpbHRlclRvb2xzKCksIHRoaXMub3BlbmVkID0gITAsIHRoaXMubm9kZXMud3JhcHBlci5jbGFzc0xpc3QuYWRkKCQuQ1NTLmNvbnZlcnNpb25Ub29sYmFyU2hvd2VkKSwgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICB0aGlzLmZsaXBwZXIuYWN0aXZhdGUodGhpcy50b29scy5tYXAoKGUpID0+IGUuYnV0dG9uKS5maWx0ZXIoKGUpID0+ICFlLmNsYXNzTGlzdC5jb250YWlucygkLkNTUy5jb252ZXJzaW9uVG9vbEhpZGRlbikpKSwgdGhpcy5mbGlwcGVyLmZvY3VzRmlyc3QoKSwgTSh0aGlzLnRvZ2dsaW5nQ2FsbGJhY2spICYmIHRoaXMudG9nZ2xpbmdDYWxsYmFjayghMCk7XG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIENsb3NlcyBDb252ZXJzaW9uIFRvb2xiYXJcbiAgICovXG4gIGNsb3NlKCkge1xuICAgIHRoaXMub3BlbmVkID0gITEsIHRoaXMuZmxpcHBlci5kZWFjdGl2YXRlKCksIHRoaXMubm9kZXMud3JhcHBlci5jbGFzc0xpc3QucmVtb3ZlKCQuQ1NTLmNvbnZlcnNpb25Ub29sYmFyU2hvd2VkKSwgTSh0aGlzLnRvZ2dsaW5nQ2FsbGJhY2spICYmIHRoaXMudG9nZ2xpbmdDYWxsYmFjayghMSk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgdHJ1ZSBpZiBpdCBoYXMgbW9yZSB0aGFuIG9uZSB0b29sIGF2YWlsYWJsZSBmb3IgY29udmVydCBpblxuICAgKi9cbiAgaGFzVG9vbHMoKSB7XG4gICAgcmV0dXJuIHRoaXMudG9vbHMubGVuZ3RoID09PSAxID8gdGhpcy50b29sc1swXS5uYW1lICE9PSB0aGlzLmNvbmZpZy5kZWZhdWx0QmxvY2sgOiAhMDtcbiAgfVxuICAvKipcbiAgICogUmVwbGFjZXMgb25lIEJsb2NrIHdpdGggYW5vdGhlclxuICAgKiBGb3IgdGhhdCBUb29scyBtdXN0IHByb3ZpZGUgaW1wb3J0L2V4cG9ydCBtZXRob2RzXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByZXBsYWNpbmdUb29sTmFtZSAtIG5hbWUgb2YgVG9vbCB3aGljaCByZXBsYWNlcyBjdXJyZW50XG4gICAqIEBwYXJhbSBibG9ja0RhdGFPdmVycmlkZXMgLSBJZiB0aGlzIGNvbnZlcnNpb24gZmlyZWQgYnkgdGhlIG9uZSBvZiBtdWx0aXBsZSBUb29sYm94IGl0ZW1zLCBleHRlbmQgY29udmVydGVkIGRhdGEgd2l0aCB0aGlzIGl0ZW0ncyBcImRhdGFcIiBvdmVycmlkZXNcbiAgICovXG4gIGFzeW5jIHJlcGxhY2VXaXRoQmxvY2soZSwgdCkge1xuICAgIGNvbnN0IHsgQmxvY2tNYW5hZ2VyOiBvLCBCbG9ja1NlbGVjdGlvbjogaSwgSW5saW5lVG9vbGJhcjogbiwgQ2FyZXQ6IHIgfSA9IHRoaXMuRWRpdG9yO1xuICAgIG8uY29udmVydCh0aGlzLkVkaXRvci5CbG9ja01hbmFnZXIuY3VycmVudEJsb2NrLCBlLCB0KSwgaS5jbGVhclNlbGVjdGlvbigpLCB0aGlzLmNsb3NlKCksIG4uY2xvc2UoKSwgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICByLnNldFRvQmxvY2sodGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLmN1cnJlbnRCbG9jaywgci5wb3NpdGlvbnMuRU5EKTtcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogSXRlcmF0ZXMgZXhpc3RpbmcgVG9vbHMgYW5kIGluc2VydHMgdG8gdGhlIENvbnZlcnNpb25Ub29sYmFyXG4gICAqIGlmIHRvb2xzIGhhdmUgYWJpbGl0eSB0byBpbXBvcnRcbiAgICovXG4gIGFkZFRvb2xzKCkge1xuICAgIGNvbnN0IGUgPSB0aGlzLkVkaXRvci5Ub29scy5ibG9ja1Rvb2xzO1xuICAgIEFycmF5LmZyb20oZS5lbnRyaWVzKCkpLmZvckVhY2goKFt0LCBvXSkgPT4ge1xuICAgICAgdmFyIG47XG4gICAgICBjb25zdCBpID0gby5jb252ZXJzaW9uQ29uZmlnO1xuICAgICAgIWkgfHwgIWkuaW1wb3J0IHx8IChuID0gby50b29sYm94KSA9PSBudWxsIHx8IG4uZm9yRWFjaChcbiAgICAgICAgKHIpID0+IHRoaXMuYWRkVG9vbElmVmFsaWQodCwgcilcbiAgICAgICk7XG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIEluc2VydHMgYSB0b29sIHRvIHRoZSBDb252ZXJzaW9uVG9vbGJhciBpZiB0aGUgdG9vbCdzIHRvb2xib3ggY29uZmlnIGlzIHZhbGlkXG4gICAqXG4gICAqIEBwYXJhbSBuYW1lIC0gdG9vbCdzIG5hbWVcbiAgICogQHBhcmFtIHRvb2xib3hTZXR0aW5ncyAtIHRvb2wncyBzaW5nbGUgdG9vbGJveCBzZXR0aW5nXG4gICAqL1xuICBhZGRUb29sSWZWYWxpZChlLCB0KSB7XG4gICAgVyh0KSB8fCAhdC5pY29uIHx8IHRoaXMuYWRkVG9vbChlLCB0KTtcbiAgfVxuICAvKipcbiAgICogQWRkIHRvb2wgdG8gdGhlIENvbnZlcnNpb24gVG9vbGJhclxuICAgKlxuICAgKiBAcGFyYW0gdG9vbE5hbWUgLSBuYW1lIG9mIFRvb2wgdG8gYWRkXG4gICAqIEBwYXJhbSB0b29sYm94SXRlbSAtIHRvb2wncyB0b29sYm94IGl0ZW0gZGF0YVxuICAgKi9cbiAgYWRkVG9vbChlLCB0KSB7XG4gICAgdmFyIHI7XG4gICAgY29uc3QgbyA9IGMubWFrZShcImRpdlwiLCBbJC5DU1MuY29udmVyc2lvblRvb2xdKSwgaSA9IGMubWFrZShcImRpdlwiLCBbJC5DU1MuY29udmVyc2lvblRvb2xJY29uXSk7XG4gICAgby5kYXRhc2V0LnRvb2wgPSBlLCBpLmlubmVySFRNTCA9IHQuaWNvbiwgYy5hcHBlbmQobywgaSksIGMuYXBwZW5kKG8sIGMudGV4dCh6LnQoSy50b29sTmFtZXMsIHQudGl0bGUgfHwgcmUoZSkpKSk7XG4gICAgY29uc3QgbiA9IChyID0gdGhpcy5FZGl0b3IuVG9vbHMuYmxvY2tUb29scy5nZXQoZSkpID09IG51bGwgPyB2b2lkIDAgOiByLnNob3J0Y3V0O1xuICAgIGlmIChuKSB7XG4gICAgICBjb25zdCBhID0gYy5tYWtlKFwic3BhblwiLCAkLkNTUy5jb252ZXJzaW9uVG9vbFNlY29uZGFyeUxhYmVsLCB7XG4gICAgICAgIGlubmVyVGV4dDogeWUobilcbiAgICAgIH0pO1xuICAgICAgYy5hcHBlbmQobywgYSk7XG4gICAgfVxuICAgIGMuYXBwZW5kKHRoaXMubm9kZXMudG9vbHMsIG8pLCB0aGlzLnRvb2xzLnB1c2goe1xuICAgICAgbmFtZTogZSxcbiAgICAgIGJ1dHRvbjogbyxcbiAgICAgIHRvb2xib3hJdGVtOiB0XG4gICAgfSksIHRoaXMubGlzdGVuZXJzLm9uKG8sIFwiY2xpY2tcIiwgYXN5bmMgKCkgPT4ge1xuICAgICAgYXdhaXQgdGhpcy5yZXBsYWNlV2l0aEJsb2NrKGUsIHQuZGF0YSk7XG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIEhpZGUgY3VycmVudCBUb29sIGFuZCBzaG93IG90aGVyc1xuICAgKi9cbiAgYXN5bmMgZmlsdGVyVG9vbHMoKSB7XG4gICAgY29uc3QgeyBjdXJyZW50QmxvY2s6IGUgfSA9IHRoaXMuRWRpdG9yLkJsb2NrTWFuYWdlciwgdCA9IGF3YWl0IGUuZ2V0QWN0aXZlVG9vbGJveEVudHJ5KCk7XG4gICAgZnVuY3Rpb24gbyhpLCBuKSB7XG4gICAgICByZXR1cm4gaS5pY29uID09PSBuLmljb24gJiYgaS50aXRsZSA9PT0gbi50aXRsZTtcbiAgICB9XG4gICAgdGhpcy50b29scy5mb3JFYWNoKChpKSA9PiB7XG4gICAgICBsZXQgbiA9ICExO1xuICAgICAgaWYgKHQpIHtcbiAgICAgICAgY29uc3QgciA9IG8odCwgaS50b29sYm94SXRlbSk7XG4gICAgICAgIG4gPSBpLmJ1dHRvbi5kYXRhc2V0LnRvb2wgPT09IGUubmFtZSAmJiByO1xuICAgICAgfVxuICAgICAgaS5idXR0b24uaGlkZGVuID0gbiwgaS5idXR0b24uY2xhc3NMaXN0LnRvZ2dsZSgkLkNTUy5jb252ZXJzaW9uVG9vbEhpZGRlbiwgbik7XG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIFByZXBhcmUgRmxpcHBlciB0byBiZSBhYmxlIHRvIGxlYWYgdG9vbHMgYnkgYXJyb3dzL3RhYlxuICAgKi9cbiAgZW5hYmxlRmxpcHBlcigpIHtcbiAgICB0aGlzLmZsaXBwZXIgPSBuZXcgcSh7XG4gICAgICBmb2N1c2VkSXRlbUNsYXNzOiAkLkNTUy5jb252ZXJzaW9uVG9vbEZvY3VzZWRcbiAgICB9KTtcbiAgfVxufVxudmFyIERlID0ge30sIEtvID0ge1xuICBnZXQgZXhwb3J0cygpIHtcbiAgICByZXR1cm4gRGU7XG4gIH0sXG4gIHNldCBleHBvcnRzKHMpIHtcbiAgICBEZSA9IHM7XG4gIH1cbn07XG4vKiFcbiAqIExpYnJhcnkgZm9yIGhhbmRsaW5nIGtleWJvYXJkIHNob3J0Y3V0c1xuICogQGNvcHlyaWdodCBDb2RlWCAoaHR0cHM6Ly9jb2RleC5zbylcbiAqIEBsaWNlbnNlIE1JVFxuICogQGF1dGhvciBDb2RlWCAoaHR0cHM6Ly9jb2RleC5zbylcbiAqIEB2ZXJzaW9uIDEuMi4wXG4gKi9cbihmdW5jdGlvbihzLCBlKSB7XG4gIChmdW5jdGlvbih0LCBvKSB7XG4gICAgcy5leHBvcnRzID0gbygpO1xuICB9KSh3aW5kb3csIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICB2YXIgbyA9IHt9O1xuICAgICAgZnVuY3Rpb24gaShuKSB7XG4gICAgICAgIGlmIChvW25dKVxuICAgICAgICAgIHJldHVybiBvW25dLmV4cG9ydHM7XG4gICAgICAgIHZhciByID0gb1tuXSA9IHsgaTogbiwgbDogITEsIGV4cG9ydHM6IHt9IH07XG4gICAgICAgIHJldHVybiB0W25dLmNhbGwoci5leHBvcnRzLCByLCByLmV4cG9ydHMsIGkpLCByLmwgPSAhMCwgci5leHBvcnRzO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGkubSA9IHQsIGkuYyA9IG8sIGkuZCA9IGZ1bmN0aW9uKG4sIHIsIGEpIHtcbiAgICAgICAgaS5vKG4sIHIpIHx8IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuLCByLCB7IGVudW1lcmFibGU6ICEwLCBnZXQ6IGEgfSk7XG4gICAgICB9LCBpLnIgPSBmdW5jdGlvbihuKSB7XG4gICAgICAgIHR5cGVvZiBTeW1ib2wgPCBcInVcIiAmJiBTeW1ib2wudG9TdHJpbmdUYWcgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KG4sIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogXCJNb2R1bGVcIiB9KSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KG4sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiAhMCB9KTtcbiAgICAgIH0sIGkudCA9IGZ1bmN0aW9uKG4sIHIpIHtcbiAgICAgICAgaWYgKDEgJiByICYmIChuID0gaShuKSksIDggJiByIHx8IDQgJiByICYmIHR5cGVvZiBuID09IFwib2JqZWN0XCIgJiYgbiAmJiBuLl9fZXNNb2R1bGUpXG4gICAgICAgICAgcmV0dXJuIG47XG4gICAgICAgIHZhciBhID0gLyogQF9fUFVSRV9fICovIE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgIGlmIChpLnIoYSksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShhLCBcImRlZmF1bHRcIiwgeyBlbnVtZXJhYmxlOiAhMCwgdmFsdWU6IG4gfSksIDIgJiByICYmIHR5cGVvZiBuICE9IFwic3RyaW5nXCIpXG4gICAgICAgICAgZm9yICh2YXIgbCBpbiBuKVxuICAgICAgICAgICAgaS5kKGEsIGwsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIG5bZF07XG4gICAgICAgICAgICB9LmJpbmQobnVsbCwgbCkpO1xuICAgICAgICByZXR1cm4gYTtcbiAgICAgIH0sIGkubiA9IGZ1bmN0aW9uKG4pIHtcbiAgICAgICAgdmFyIHIgPSBuICYmIG4uX19lc01vZHVsZSA/IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBuLmRlZmF1bHQ7XG4gICAgICAgIH0gOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gbjtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIGkuZChyLCBcImFcIiwgciksIHI7XG4gICAgICB9LCBpLm8gPSBmdW5jdGlvbihuLCByKSB7XG4gICAgICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobiwgcik7XG4gICAgICB9LCBpLnAgPSBcIlwiLCBpKGkucyA9IDApO1xuICAgIH0oW2Z1bmN0aW9uKHQsIG8sIGkpIHtcbiAgICAgIGZ1bmN0aW9uIG4obCwgZCkge1xuICAgICAgICBmb3IgKHZhciB1ID0gMDsgdSA8IGQubGVuZ3RoOyB1KyspIHtcbiAgICAgICAgICB2YXIgaCA9IGRbdV07XG4gICAgICAgICAgaC5lbnVtZXJhYmxlID0gaC5lbnVtZXJhYmxlIHx8ICExLCBoLmNvbmZpZ3VyYWJsZSA9ICEwLCBcInZhbHVlXCIgaW4gaCAmJiAoaC53cml0YWJsZSA9ICEwKSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KGwsIGgua2V5LCBoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZnVuY3Rpb24gcihsLCBkLCB1KSB7XG4gICAgICAgIHJldHVybiBkICYmIG4obC5wcm90b3R5cGUsIGQpLCB1ICYmIG4obCwgdSksIGw7XG4gICAgICB9XG4gICAgICBpLnIobyk7XG4gICAgICB2YXIgYSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBmdW5jdGlvbiBsKGQpIHtcbiAgICAgICAgICB2YXIgdSA9IHRoaXM7XG4gICAgICAgICAgKGZ1bmN0aW9uKGgsIGYpIHtcbiAgICAgICAgICAgIGlmICghKGggaW5zdGFuY2VvZiBmKSlcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgICAgICAgICB9KSh0aGlzLCBsKSwgdGhpcy5jb21tYW5kcyA9IHt9LCB0aGlzLmtleXMgPSB7fSwgdGhpcy5uYW1lID0gZC5uYW1lLCB0aGlzLnBhcnNlU2hvcnRjdXROYW1lKGQubmFtZSksIHRoaXMuZWxlbWVudCA9IGQub24sIHRoaXMuY2FsbGJhY2sgPSBkLmNhbGxiYWNrLCB0aGlzLmV4ZWN1dGVTaG9ydGN1dCA9IGZ1bmN0aW9uKGgpIHtcbiAgICAgICAgICAgIHUuZXhlY3V0ZShoKTtcbiAgICAgICAgICB9LCB0aGlzLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgdGhpcy5leGVjdXRlU2hvcnRjdXQsICExKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcihsLCBudWxsLCBbeyBrZXk6IFwic3VwcG9ydGVkQ29tbWFuZHNcIiwgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4geyBTSElGVDogW1wiU0hJRlRcIl0sIENNRDogW1wiQ01EXCIsIFwiQ09OVFJPTFwiLCBcIkNPTU1BTkRcIiwgXCJXSU5ET1dTXCIsIFwiQ1RSTFwiXSwgQUxUOiBbXCJBTFRcIiwgXCJPUFRJT05cIl0gfTtcbiAgICAgICAgfSB9LCB7IGtleTogXCJrZXlDb2Rlc1wiLCBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiB7IDA6IDQ4LCAxOiA0OSwgMjogNTAsIDM6IDUxLCA0OiA1MiwgNTogNTMsIDY6IDU0LCA3OiA1NSwgODogNTYsIDk6IDU3LCBBOiA2NSwgQjogNjYsIEM6IDY3LCBEOiA2OCwgRTogNjksIEY6IDcwLCBHOiA3MSwgSDogNzIsIEk6IDczLCBKOiA3NCwgSzogNzUsIEw6IDc2LCBNOiA3NywgTjogNzgsIE86IDc5LCBQOiA4MCwgUTogODEsIFI6IDgyLCBTOiA4MywgVDogODQsIFU6IDg1LCBWOiA4NiwgVzogODcsIFg6IDg4LCBZOiA4OSwgWjogOTAsIEJBQ0tTUEFDRTogOCwgRU5URVI6IDEzLCBFU0NBUEU6IDI3LCBMRUZUOiAzNywgVVA6IDM4LCBSSUdIVDogMzksIERPV046IDQwLCBJTlNFUlQ6IDQ1LCBERUxFVEU6IDQ2LCBcIi5cIjogMTkwIH07XG4gICAgICAgIH0gfV0pLCByKGwsIFt7IGtleTogXCJwYXJzZVNob3J0Y3V0TmFtZVwiLCB2YWx1ZTogZnVuY3Rpb24oZCkge1xuICAgICAgICAgIGQgPSBkLnNwbGl0KFwiK1wiKTtcbiAgICAgICAgICBmb3IgKHZhciB1ID0gMDsgdSA8IGQubGVuZ3RoOyB1KyspIHtcbiAgICAgICAgICAgIGRbdV0gPSBkW3VdLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgICAgICB2YXIgaCA9ICExO1xuICAgICAgICAgICAgZm9yICh2YXIgZiBpbiBsLnN1cHBvcnRlZENvbW1hbmRzKVxuICAgICAgICAgICAgICBpZiAobC5zdXBwb3J0ZWRDb21tYW5kc1tmXS5pbmNsdWRlcyhkW3VdKSkge1xuICAgICAgICAgICAgICAgIGggPSB0aGlzLmNvbW1hbmRzW2ZdID0gITA7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGggfHwgKHRoaXMua2V5c1tkW3VdXSA9ICEwKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZm9yICh2YXIgeCBpbiBsLnN1cHBvcnRlZENvbW1hbmRzKVxuICAgICAgICAgICAgdGhpcy5jb21tYW5kc1t4XSB8fCAodGhpcy5jb21tYW5kc1t4XSA9ICExKTtcbiAgICAgICAgfSB9LCB7IGtleTogXCJleGVjdXRlXCIsIHZhbHVlOiBmdW5jdGlvbihkKSB7XG4gICAgICAgICAgdmFyIHUsIGggPSB7IENNRDogZC5jdHJsS2V5IHx8IGQubWV0YUtleSwgU0hJRlQ6IGQuc2hpZnRLZXksIEFMVDogZC5hbHRLZXkgfSwgZiA9ICEwO1xuICAgICAgICAgIGZvciAodSBpbiB0aGlzLmNvbW1hbmRzKVxuICAgICAgICAgICAgdGhpcy5jb21tYW5kc1t1XSAhPT0gaFt1XSAmJiAoZiA9ICExKTtcbiAgICAgICAgICB2YXIgeCwgcCA9ICEwO1xuICAgICAgICAgIGZvciAoeCBpbiB0aGlzLmtleXMpXG4gICAgICAgICAgICBwID0gcCAmJiBkLmtleUNvZGUgPT09IGwua2V5Q29kZXNbeF07XG4gICAgICAgICAgZiAmJiBwICYmIHRoaXMuY2FsbGJhY2soZCk7XG4gICAgICAgIH0gfSwgeyBrZXk6IFwicmVtb3ZlXCIsIHZhbHVlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICB0aGlzLmVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgdGhpcy5leGVjdXRlU2hvcnRjdXQpO1xuICAgICAgICB9IH1dKSwgbDtcbiAgICAgIH0oKTtcbiAgICAgIG8uZGVmYXVsdCA9IGE7XG4gICAgfV0pLmRlZmF1bHQ7XG4gIH0pO1xufSkoS28pO1xuY29uc3QgWG8gPSAvKiBAX19QVVJFX18gKi8gUGUoRGUpO1xuY2xhc3MgVm8ge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLnJlZ2lzdGVyZWRTaG9ydGN1dHMgPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpO1xuICB9XG4gIC8qKlxuICAgKiBSZWdpc3RlciBzaG9ydGN1dFxuICAgKlxuICAgKiBAcGFyYW0gc2hvcnRjdXQgLSBzaG9ydGN1dCBvcHRpb25zXG4gICAqL1xuICBhZGQoZSkge1xuICAgIGlmICh0aGlzLmZpbmRTaG9ydGN1dChlLm9uLCBlLm5hbWUpKVxuICAgICAgdGhyb3cgRXJyb3IoXG4gICAgICAgIGBTaG9ydGN1dCAke2UubmFtZX0gaXMgYWxyZWFkeSByZWdpc3RlcmVkIGZvciAke2Uub259LiBQbGVhc2UgcmVtb3ZlIGl0IGJlZm9yZSBhZGQgYSBuZXcgaGFuZGxlci5gXG4gICAgICApO1xuICAgIGNvbnN0IG8gPSBuZXcgWG8oe1xuICAgICAgbmFtZTogZS5uYW1lLFxuICAgICAgb246IGUub24sXG4gICAgICBjYWxsYmFjazogZS5oYW5kbGVyXG4gICAgfSksIGkgPSB0aGlzLnJlZ2lzdGVyZWRTaG9ydGN1dHMuZ2V0KGUub24pIHx8IFtdO1xuICAgIHRoaXMucmVnaXN0ZXJlZFNob3J0Y3V0cy5zZXQoZS5vbiwgWy4uLmksIG9dKTtcbiAgfVxuICAvKipcbiAgICogUmVtb3ZlIHNob3J0Y3V0XG4gICAqXG4gICAqIEBwYXJhbSBlbGVtZW50IC0gRWxlbWVudCBzaG9ydGN1dCBpcyBzZXQgZm9yXG4gICAqIEBwYXJhbSBuYW1lIC0gc2hvcnRjdXQgbmFtZVxuICAgKi9cbiAgcmVtb3ZlKGUsIHQpIHtcbiAgICBjb25zdCBvID0gdGhpcy5maW5kU2hvcnRjdXQoZSwgdCk7XG4gICAgaWYgKCFvKVxuICAgICAgcmV0dXJuO1xuICAgIG8ucmVtb3ZlKCk7XG4gICAgY29uc3QgaSA9IHRoaXMucmVnaXN0ZXJlZFNob3J0Y3V0cy5nZXQoZSk7XG4gICAgdGhpcy5yZWdpc3RlcmVkU2hvcnRjdXRzLnNldChlLCBpLmZpbHRlcigobikgPT4gbiAhPT0gbykpO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgU2hvcnRjdXQgaW5zdGFuY2UgaWYgZXhpc3RcbiAgICpcbiAgICogQHBhcmFtIGVsZW1lbnQgLSBFbGVtZW50IHNob3JjdXQgaXMgc2V0IGZvclxuICAgKiBAcGFyYW0gc2hvcnRjdXQgLSBzaG9ydGN1dCBuYW1lXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IGluZGV4IC0gc2hvcnRjdXQgaW5kZXggaWYgZXhpc3RcbiAgICovXG4gIGZpbmRTaG9ydGN1dChlLCB0KSB7XG4gICAgcmV0dXJuICh0aGlzLnJlZ2lzdGVyZWRTaG9ydGN1dHMuZ2V0KGUpIHx8IFtdKS5maW5kKCh7IG5hbWU6IGkgfSkgPT4gaSA9PT0gdCk7XG4gIH1cbn1cbmNvbnN0IGFlID0gbmV3IFZvKCk7XG52YXIgcW8gPSBPYmplY3QuZGVmaW5lUHJvcGVydHksIFpvID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciwgeHQgPSAocywgZSwgdCwgbykgPT4ge1xuICBmb3IgKHZhciBpID0gbyA+IDEgPyB2b2lkIDAgOiBvID8gWm8oZSwgdCkgOiBlLCBuID0gcy5sZW5ndGggLSAxLCByOyBuID49IDA7IG4tLSlcbiAgICAociA9IHNbbl0pICYmIChpID0gKG8gPyByKGUsIHQsIGkpIDogcihpKSkgfHwgaSk7XG4gIHJldHVybiBvICYmIGkgJiYgcW8oZSwgdCwgaSksIGk7XG59LCBrZSA9IC8qIEBfX1BVUkVfXyAqLyAoKHMpID0+IChzLk9wZW5lZCA9IFwidG9vbGJveC1vcGVuZWRcIiwgcy5DbG9zZWQgPSBcInRvb2xib3gtY2xvc2VkXCIsIHMuQmxvY2tBZGRlZCA9IFwidG9vbGJveC1ibG9jay1hZGRlZFwiLCBzKSkoa2UgfHwge30pO1xuY29uc3Qgd3QgPSBjbGFzcyBleHRlbmRzIEVlIHtcbiAgLyoqXG4gICAqIFRvb2xib3ggY29uc3RydWN0b3JcbiAgICpcbiAgICogQHBhcmFtIG9wdGlvbnMgLSBhdmFpbGFibGUgcGFyYW1ldGVyc1xuICAgKiBAcGFyYW0gb3B0aW9ucy5hcGkgLSBFZGl0b3IgQVBJIG1ldGhvZHNcbiAgICogQHBhcmFtIG9wdGlvbnMudG9vbHMgLSBUb29scyBhdmFpbGFibGUgdG8gY2hlY2sgd2hldGhlciBzb21lIG9mIHRoZW0gc2hvdWxkIGJlIGRpc3BsYXllZCBhdCB0aGUgVG9vbGJveCBvciBub3RcbiAgICovXG4gIGNvbnN0cnVjdG9yKHsgYXBpOiBzLCB0b29sczogZSwgaTE4bkxhYmVsczogdCB9KSB7XG4gICAgc3VwZXIoKSwgdGhpcy5vcGVuZWQgPSAhMSwgdGhpcy5ub2RlcyA9IHtcbiAgICAgIHRvb2xib3g6IG51bGxcbiAgICB9LCB0aGlzLm9uUG9wb3ZlckNsb3NlID0gKCkgPT4ge1xuICAgICAgdGhpcy5vcGVuZWQgPSAhMSwgdGhpcy5lbWl0KFxuICAgICAgICBcInRvb2xib3gtY2xvc2VkXCJcbiAgICAgICAgLyogQ2xvc2VkICovXG4gICAgICApO1xuICAgIH0sIHRoaXMuYXBpID0gcywgdGhpcy50b29scyA9IGUsIHRoaXMuaTE4bkxhYmVscyA9IHQ7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgVHJ1ZSBpZiBUb29sYm94IGlzIEVtcHR5IGFuZCBub3RoaW5nIHRvIHNob3dcbiAgICpcbiAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAqL1xuICBnZXQgaXNFbXB0eSgpIHtcbiAgICByZXR1cm4gdGhpcy50b29sc1RvQmVEaXNwbGF5ZWQubGVuZ3RoID09PSAwO1xuICB9XG4gIC8qKlxuICAgKiBDU1Mgc3R5bGVzXG4gICAqXG4gICAqIEByZXR1cm5zIHtPYmplY3Q8c3RyaW5nLCBzdHJpbmc+fVxuICAgKi9cbiAgc3RhdGljIGdldCBDU1MoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRvb2xib3g6IFwiY2UtdG9vbGJveFwiXG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogTWFrZXMgdGhlIFRvb2xib3hcbiAgICovXG4gIG1ha2UoKSB7XG4gICAgcmV0dXJuIHRoaXMucG9wb3ZlciA9IG5ldyBqZSh7XG4gICAgICBzY29wZUVsZW1lbnQ6IHRoaXMuYXBpLnVpLm5vZGVzLnJlZGFjdG9yLFxuICAgICAgc2VhcmNoYWJsZTogITAsXG4gICAgICBtZXNzYWdlczoge1xuICAgICAgICBub3RoaW5nRm91bmQ6IHRoaXMuaTE4bkxhYmVscy5ub3RoaW5nRm91bmQsXG4gICAgICAgIHNlYXJjaDogdGhpcy5pMThuTGFiZWxzLmZpbHRlclxuICAgICAgfSxcbiAgICAgIGl0ZW1zOiB0aGlzLnRvb2xib3hJdGVtc1RvQmVEaXNwbGF5ZWRcbiAgICB9KSwgdGhpcy5wb3BvdmVyLm9uKGJlLkNsb3NlLCB0aGlzLm9uUG9wb3ZlckNsb3NlKSwgdGhpcy5lbmFibGVTaG9ydGN1dHMoKSwgdGhpcy5ub2Rlcy50b29sYm94ID0gdGhpcy5wb3BvdmVyLmdldEVsZW1lbnQoKSwgdGhpcy5ub2Rlcy50b29sYm94LmNsYXNzTGlzdC5hZGQod3QuQ1NTLnRvb2xib3gpLCB0aGlzLm5vZGVzLnRvb2xib3g7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgVG9vbGJveCBoYXMgdGhlIEZsaXBwZXIgYWN0aXZhdGVkIGFuZCB0aGUgRmxpcHBlciBoYXMgc2VsZWN0ZWQgYnV0dG9uXG4gICAqL1xuICBoYXNGb2N1cygpIHtcbiAgICB2YXIgcztcbiAgICByZXR1cm4gKHMgPSB0aGlzLnBvcG92ZXIpID09IG51bGwgPyB2b2lkIDAgOiBzLmhhc0ZvY3VzKCk7XG4gIH1cbiAgLyoqXG4gICAqIERlc3Ryb3kgTW9kdWxlXG4gICAqL1xuICBkZXN0cm95KCkge1xuICAgIHZhciBzO1xuICAgIHN1cGVyLmRlc3Ryb3koKSwgdGhpcy5ub2RlcyAmJiB0aGlzLm5vZGVzLnRvb2xib3ggJiYgKHRoaXMubm9kZXMudG9vbGJveC5yZW1vdmUoKSwgdGhpcy5ub2Rlcy50b29sYm94ID0gbnVsbCksIHRoaXMucmVtb3ZlQWxsU2hvcnRjdXRzKCksIChzID0gdGhpcy5wb3BvdmVyKSA9PSBudWxsIHx8IHMub2ZmKGJlLkNsb3NlLCB0aGlzLm9uUG9wb3ZlckNsb3NlKTtcbiAgfVxuICAvKipcbiAgICogVG9vbGJveCBUb29sJ3MgYnV0dG9uIGNsaWNrIGhhbmRsZXJcbiAgICpcbiAgICogQHBhcmFtIHRvb2xOYW1lIC0gdG9vbCB0eXBlIHRvIGJlIGFjdGl2YXRlZFxuICAgKiBAcGFyYW0gYmxvY2tEYXRhT3ZlcnJpZGVzIC0gQmxvY2sgZGF0YSBwcmVkZWZpbmVkIGJ5IHRoZSBhY3RpdmF0ZWQgVG9vbGJveCBpdGVtXG4gICAqL1xuICB0b29sQnV0dG9uQWN0aXZhdGVkKHMsIGUpIHtcbiAgICB0aGlzLmluc2VydE5ld0Jsb2NrKHMsIGUpO1xuICB9XG4gIC8qKlxuICAgKiBPcGVuIFRvb2xib3ggd2l0aCBUb29sc1xuICAgKi9cbiAgb3BlbigpIHtcbiAgICB2YXIgcztcbiAgICB0aGlzLmlzRW1wdHkgfHwgKChzID0gdGhpcy5wb3BvdmVyKSA9PSBudWxsIHx8IHMuc2hvdygpLCB0aGlzLm9wZW5lZCA9ICEwLCB0aGlzLmVtaXQoXG4gICAgICBcInRvb2xib3gtb3BlbmVkXCJcbiAgICAgIC8qIE9wZW5lZCAqL1xuICAgICkpO1xuICB9XG4gIC8qKlxuICAgKiBDbG9zZSBUb29sYm94XG4gICAqL1xuICBjbG9zZSgpIHtcbiAgICB2YXIgcztcbiAgICAocyA9IHRoaXMucG9wb3ZlcikgPT0gbnVsbCB8fCBzLmhpZGUoKSwgdGhpcy5vcGVuZWQgPSAhMSwgdGhpcy5lbWl0KFxuICAgICAgXCJ0b29sYm94LWNsb3NlZFwiXG4gICAgICAvKiBDbG9zZWQgKi9cbiAgICApO1xuICB9XG4gIC8qKlxuICAgKiBDbG9zZSBUb29sYm94XG4gICAqL1xuICB0b2dnbGUoKSB7XG4gICAgdGhpcy5vcGVuZWQgPyB0aGlzLmNsb3NlKCkgOiB0aGlzLm9wZW4oKTtcbiAgfVxuICBnZXQgdG9vbHNUb0JlRGlzcGxheWVkKCkge1xuICAgIGNvbnN0IHMgPSBbXTtcbiAgICByZXR1cm4gdGhpcy50b29scy5mb3JFYWNoKChlKSA9PiB7XG4gICAgICBlLnRvb2xib3ggJiYgcy5wdXNoKGUpO1xuICAgIH0pLCBzO1xuICB9XG4gIGdldCB0b29sYm94SXRlbXNUb0JlRGlzcGxheWVkKCkge1xuICAgIGNvbnN0IHMgPSAoZSwgdCkgPT4gKHtcbiAgICAgIGljb246IGUuaWNvbixcbiAgICAgIHRpdGxlOiB6LnQoSy50b29sTmFtZXMsIGUudGl0bGUgfHwgcmUodC5uYW1lKSksXG4gICAgICBuYW1lOiB0Lm5hbWUsXG4gICAgICBvbkFjdGl2YXRlOiAoKSA9PiB7XG4gICAgICAgIHRoaXMudG9vbEJ1dHRvbkFjdGl2YXRlZCh0Lm5hbWUsIGUuZGF0YSk7XG4gICAgICB9LFxuICAgICAgc2Vjb25kYXJ5TGFiZWw6IHQuc2hvcnRjdXQgPyB5ZSh0LnNob3J0Y3V0KSA6IFwiXCJcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcy50b29sc1RvQmVEaXNwbGF5ZWQucmVkdWNlKChlLCB0KSA9PiAoQXJyYXkuaXNBcnJheSh0LnRvb2xib3gpID8gdC50b29sYm94LmZvckVhY2goKG8pID0+IHtcbiAgICAgIGUucHVzaChzKG8sIHQpKTtcbiAgICB9KSA6IHQudG9vbGJveCAhPT0gdm9pZCAwICYmIGUucHVzaChzKHQudG9vbGJveCwgdCkpLCBlKSwgW10pO1xuICB9XG4gIC8qKlxuICAgKiBJdGVyYXRlIGFsbCB0b29scyBhbmQgZW5hYmxlIHRoZWlycyBzaG9ydGN1dHMgaWYgc3BlY2lmaWVkXG4gICAqL1xuICBlbmFibGVTaG9ydGN1dHMoKSB7XG4gICAgdGhpcy50b29sc1RvQmVEaXNwbGF5ZWQuZm9yRWFjaCgocykgPT4ge1xuICAgICAgY29uc3QgZSA9IHMuc2hvcnRjdXQ7XG4gICAgICBlICYmIHRoaXMuZW5hYmxlU2hvcnRjdXRGb3JUb29sKHMubmFtZSwgZSk7XG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIEVuYWJsZSBzaG9ydGN1dCBCbG9jayBUb29sIGltcGxlbWVudGVkIHNob3J0Y3V0XG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0b29sTmFtZSAtIFRvb2wgbmFtZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gc2hvcnRjdXQgLSBzaG9ydGN1dCBhY2NvcmRpbmcgdG8gdGhlIFNob3J0Y3V0RGF0YSBNb2R1bGUgZm9ybWF0XG4gICAqL1xuICBlbmFibGVTaG9ydGN1dEZvclRvb2wocywgZSkge1xuICAgIGFlLmFkZCh7XG4gICAgICBuYW1lOiBlLFxuICAgICAgb246IHRoaXMuYXBpLnVpLm5vZGVzLnJlZGFjdG9yLFxuICAgICAgaGFuZGxlcjogKHQpID0+IHtcbiAgICAgICAgdC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBjb25zdCBvID0gdGhpcy5hcGkuYmxvY2tzLmdldEN1cnJlbnRCbG9ja0luZGV4KCksIGkgPSB0aGlzLmFwaS5ibG9ja3MuZ2V0QmxvY2tCeUluZGV4KG8pO1xuICAgICAgICBpZiAoaSlcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy5hcGkuYmxvY2tzLmNvbnZlcnQoaS5pZCwgcyksIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICAgICAgICB0aGlzLmFwaS5jYXJldC5zZXRUb0Jsb2NrKG8sIFwiZW5kXCIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfSBjYXRjaCB7XG4gICAgICAgICAgfVxuICAgICAgICB0aGlzLmluc2VydE5ld0Jsb2NrKHMpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBSZW1vdmVzIGFsbCBhZGRlZCBzaG9ydGN1dHNcbiAgICogRmlyZWQgd2hlbiB0aGUgUmVhZC1Pbmx5IG1vZGUgaXMgYWN0aXZhdGVkXG4gICAqL1xuICByZW1vdmVBbGxTaG9ydGN1dHMoKSB7XG4gICAgdGhpcy50b29sc1RvQmVEaXNwbGF5ZWQuZm9yRWFjaCgocykgPT4ge1xuICAgICAgY29uc3QgZSA9IHMuc2hvcnRjdXQ7XG4gICAgICBlICYmIGFlLnJlbW92ZSh0aGlzLmFwaS51aS5ub2Rlcy5yZWRhY3RvciwgZSk7XG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIEluc2VydHMgbmV3IGJsb2NrXG4gICAqIENhbiBiZSBjYWxsZWQgd2hlbiBidXR0b24gY2xpY2tlZCBvbiBUb29sYm94IG9yIGJ5IFNob3J0Y3V0RGF0YVxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdG9vbE5hbWUgLSBUb29sIG5hbWVcbiAgICogQHBhcmFtIGJsb2NrRGF0YU92ZXJyaWRlcyAtIHByZWRlZmluZWQgQmxvY2sgZGF0YVxuICAgKi9cbiAgYXN5bmMgaW5zZXJ0TmV3QmxvY2socywgZSkge1xuICAgIGNvbnN0IHQgPSB0aGlzLmFwaS5ibG9ja3MuZ2V0Q3VycmVudEJsb2NrSW5kZXgoKSwgbyA9IHRoaXMuYXBpLmJsb2Nrcy5nZXRCbG9ja0J5SW5kZXgodCk7XG4gICAgaWYgKCFvKVxuICAgICAgcmV0dXJuO1xuICAgIGNvbnN0IGkgPSBvLmlzRW1wdHkgPyB0IDogdCArIDE7XG4gICAgbGV0IG47XG4gICAgaWYgKGUpIHtcbiAgICAgIGNvbnN0IGEgPSBhd2FpdCB0aGlzLmFwaS5ibG9ja3MuY29tcG9zZUJsb2NrRGF0YShzKTtcbiAgICAgIG4gPSBPYmplY3QuYXNzaWduKGEsIGUpO1xuICAgIH1cbiAgICBjb25zdCByID0gdGhpcy5hcGkuYmxvY2tzLmluc2VydChcbiAgICAgIHMsXG4gICAgICBuLFxuICAgICAgdm9pZCAwLFxuICAgICAgaSxcbiAgICAgIHZvaWQgMCxcbiAgICAgIG8uaXNFbXB0eVxuICAgICk7XG4gICAgci5jYWxsKFguQVBQRU5EX0NBTExCQUNLKSwgdGhpcy5hcGkuY2FyZXQuc2V0VG9CbG9jayhpKSwgdGhpcy5lbWl0KFwidG9vbGJveC1ibG9jay1hZGRlZFwiLCB7XG4gICAgICBibG9jazogclxuICAgIH0pLCB0aGlzLmFwaS50b29sYmFyLmNsb3NlKCk7XG4gIH1cbn07XG5sZXQgJGUgPSB3dDtcbnh0KFtcbiAgbGVcbl0sICRlLnByb3RvdHlwZSwgXCJ0b29sc1RvQmVEaXNwbGF5ZWRcIiwgMSk7XG54dChbXG4gIGxlXG5dLCAkZS5wcm90b3R5cGUsIFwidG9vbGJveEl0ZW1zVG9CZURpc3BsYXllZFwiLCAxKTtcbmNvbnN0IHl0ID0gXCJibG9jayBob3ZlcmVkXCI7XG5jbGFzcyBHbyBleHRlbmRzIHkge1xuICAvKipcbiAgICogQGNsYXNzXG4gICAqIEBwYXJhbSBtb2R1bGVDb25maWd1cmF0aW9uIC0gTW9kdWxlIENvbmZpZ3VyYXRpb25cbiAgICogQHBhcmFtIG1vZHVsZUNvbmZpZ3VyYXRpb24uY29uZmlnIC0gRWRpdG9yJ3MgY29uZmlnXG4gICAqIEBwYXJhbSBtb2R1bGVDb25maWd1cmF0aW9uLmV2ZW50c0Rpc3BhdGNoZXIgLSBFZGl0b3IncyBldmVudCBkaXNwYXRjaGVyXG4gICAqL1xuICBjb25zdHJ1Y3Rvcih7IGNvbmZpZzogZSwgZXZlbnRzRGlzcGF0Y2hlcjogdCB9KSB7XG4gICAgc3VwZXIoe1xuICAgICAgY29uZmlnOiBlLFxuICAgICAgZXZlbnRzRGlzcGF0Y2hlcjogdFxuICAgIH0pLCB0aGlzLnRvb2xib3hJbnN0YW5jZSA9IG51bGw7XG4gIH1cbiAgLyoqXG4gICAqIENTUyBzdHlsZXNcbiAgICpcbiAgICogQHJldHVybnMge29iamVjdH1cbiAgICovXG4gIGdldCBDU1MoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRvb2xiYXI6IFwiY2UtdG9vbGJhclwiLFxuICAgICAgY29udGVudDogXCJjZS10b29sYmFyX19jb250ZW50XCIsXG4gICAgICBhY3Rpb25zOiBcImNlLXRvb2xiYXJfX2FjdGlvbnNcIixcbiAgICAgIGFjdGlvbnNPcGVuZWQ6IFwiY2UtdG9vbGJhcl9fYWN0aW9ucy0tb3BlbmVkXCIsXG4gICAgICB0b29sYmFyT3BlbmVkOiBcImNlLXRvb2xiYXItLW9wZW5lZFwiLFxuICAgICAgb3BlbmVkVG9vbGJveEhvbGRlck1vZGlmaWVyOiBcImNvZGV4LWVkaXRvci0tdG9vbGJveC1vcGVuZWRcIixcbiAgICAgIHBsdXNCdXR0b246IFwiY2UtdG9vbGJhcl9fcGx1c1wiLFxuICAgICAgcGx1c0J1dHRvblNob3J0Y3V0OiBcImNlLXRvb2xiYXJfX3BsdXMtc2hvcnRjdXRcIixcbiAgICAgIHNldHRpbmdzVG9nZ2xlcjogXCJjZS10b29sYmFyX19zZXR0aW5ncy1idG5cIixcbiAgICAgIHNldHRpbmdzVG9nZ2xlckhpZGRlbjogXCJjZS10b29sYmFyX19zZXR0aW5ncy1idG4tLWhpZGRlblwiXG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyB0aGUgVG9vbGJhciBvcGVuaW5nIHN0YXRlXG4gICAqXG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKi9cbiAgZ2V0IG9wZW5lZCgpIHtcbiAgICByZXR1cm4gdGhpcy5ub2Rlcy53cmFwcGVyLmNsYXNzTGlzdC5jb250YWlucyh0aGlzLkNTUy50b29sYmFyT3BlbmVkKTtcbiAgfVxuICAvKipcbiAgICogUHVibGljIGludGVyZmFjZSBmb3IgYWNjZXNzaW5nIHRoZSBUb29sYm94XG4gICAqL1xuICBnZXQgdG9vbGJveCgpIHtcbiAgICB2YXIgZTtcbiAgICByZXR1cm4ge1xuICAgICAgb3BlbmVkOiAoZSA9IHRoaXMudG9vbGJveEluc3RhbmNlKSA9PSBudWxsID8gdm9pZCAwIDogZS5vcGVuZWQsXG4gICAgICBjbG9zZTogKCkgPT4ge1xuICAgICAgICB2YXIgdDtcbiAgICAgICAgKHQgPSB0aGlzLnRvb2xib3hJbnN0YW5jZSkgPT0gbnVsbCB8fCB0LmNsb3NlKCk7XG4gICAgICB9LFxuICAgICAgb3BlbjogKCkgPT4ge1xuICAgICAgICBpZiAodGhpcy50b29sYm94SW5zdGFuY2UgPT09IG51bGwpIHtcbiAgICAgICAgICBUKFwidG9vbGJveC5vcGVuKCkgY2FsbGVkIGJlZm9yZSBpbml0aWFsaXphdGlvbiBpcyBmaW5pc2hlZFwiLCBcIndhcm5cIik7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuRWRpdG9yLkJsb2NrTWFuYWdlci5jdXJyZW50QmxvY2sgPSB0aGlzLmhvdmVyZWRCbG9jaywgdGhpcy50b29sYm94SW5zdGFuY2Uub3BlbigpO1xuICAgICAgfSxcbiAgICAgIHRvZ2dsZTogKCkgPT4ge1xuICAgICAgICBpZiAodGhpcy50b29sYm94SW5zdGFuY2UgPT09IG51bGwpIHtcbiAgICAgICAgICBUKFwidG9vbGJveC50b2dnbGUoKSBjYWxsZWQgYmVmb3JlIGluaXRpYWxpemF0aW9uIGlzIGZpbmlzaGVkXCIsIFwid2FyblwiKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy50b29sYm94SW5zdGFuY2UudG9nZ2xlKCk7XG4gICAgICB9LFxuICAgICAgaGFzRm9jdXM6ICgpID0+IHtcbiAgICAgICAgdmFyIHQ7XG4gICAgICAgIHJldHVybiAodCA9IHRoaXMudG9vbGJveEluc3RhbmNlKSA9PSBudWxsID8gdm9pZCAwIDogdC5oYXNGb2N1cygpO1xuICAgICAgfVxuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIEJsb2NrIGFjdGlvbnMgYXBwZWFyYW5jZSBtYW5pcHVsYXRpb25zXG4gICAqL1xuICBnZXQgYmxvY2tBY3Rpb25zKCkge1xuICAgIHJldHVybiB7XG4gICAgICBoaWRlOiAoKSA9PiB7XG4gICAgICAgIHRoaXMubm9kZXMuYWN0aW9ucy5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuQ1NTLmFjdGlvbnNPcGVuZWQpO1xuICAgICAgfSxcbiAgICAgIHNob3c6ICgpID0+IHtcbiAgICAgICAgdGhpcy5ub2Rlcy5hY3Rpb25zLmNsYXNzTGlzdC5hZGQodGhpcy5DU1MuYWN0aW9uc09wZW5lZCk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogTWV0aG9kcyBmb3Igd29ya2luZyB3aXRoIEJsb2NrIFR1bmVzIHRvZ2dsZXJcbiAgICovXG4gIGdldCBibG9ja1R1bmVzVG9nZ2xlcigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaGlkZTogKCkgPT4gdGhpcy5ub2Rlcy5zZXR0aW5nc1RvZ2dsZXIuY2xhc3NMaXN0LmFkZCh0aGlzLkNTUy5zZXR0aW5nc1RvZ2dsZXJIaWRkZW4pLFxuICAgICAgc2hvdzogKCkgPT4gdGhpcy5ub2Rlcy5zZXR0aW5nc1RvZ2dsZXIuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLkNTUy5zZXR0aW5nc1RvZ2dsZXJIaWRkZW4pXG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogVG9nZ2xlcyByZWFkLW9ubHkgbW9kZVxuICAgKlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHJlYWRPbmx5RW5hYmxlZCAtIHJlYWQtb25seSBtb2RlXG4gICAqL1xuICB0b2dnbGVSZWFkT25seShlKSB7XG4gICAgZSA/ICh0aGlzLmRlc3Ryb3koKSwgdGhpcy5FZGl0b3IuQmxvY2tTZXR0aW5ncy5kZXN0cm95KCksIHRoaXMuZGlzYWJsZU1vZHVsZUJpbmRpbmdzKCkpIDogd2luZG93LnJlcXVlc3RJZGxlQ2FsbGJhY2soKCkgPT4ge1xuICAgICAgdGhpcy5kcmF3VUkoKSwgdGhpcy5lbmFibGVNb2R1bGVCaW5kaW5ncygpO1xuICAgIH0sIHsgdGltZW91dDogMmUzIH0pO1xuICB9XG4gIC8qKlxuICAgKiBNb3ZlIFRvb2xiYXIgdG8gdGhlIHBhc3NlZCAob3IgY3VycmVudCkgQmxvY2tcbiAgICpcbiAgICogQHBhcmFtIGJsb2NrIC0gYmxvY2sgdG8gbW92ZSBUb29sYmFyIG5lYXIgaXRcbiAgICovXG4gIG1vdmVBbmRPcGVuKGUgPSB0aGlzLkVkaXRvci5CbG9ja01hbmFnZXIuY3VycmVudEJsb2NrKSB7XG4gICAgaWYgKHRoaXMudG9vbGJveEluc3RhbmNlID09PSBudWxsKSB7XG4gICAgICBUKFwiQ2FuJ3Qgb3BlbiBUb29sYmFyIHNpbmNlIEVkaXRvciBpbml0aWFsaXphdGlvbiBpcyBub3QgZmluaXNoZWQgeWV0XCIsIFwid2FyblwiKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHRoaXMudG9vbGJveEluc3RhbmNlLm9wZW5lZCAmJiB0aGlzLnRvb2xib3hJbnN0YW5jZS5jbG9zZSgpLCB0aGlzLkVkaXRvci5CbG9ja1NldHRpbmdzLm9wZW5lZCAmJiB0aGlzLkVkaXRvci5CbG9ja1NldHRpbmdzLmNsb3NlKCksICFlKVxuICAgICAgcmV0dXJuO1xuICAgIHRoaXMuaG92ZXJlZEJsb2NrID0gZTtcbiAgICBjb25zdCB0ID0gZS5ob2xkZXIsIHsgaXNNb2JpbGU6IG8gfSA9IHRoaXMuRWRpdG9yLlVJLCBpID0gZS5wbHVnaW5zQ29udGVudCwgbiA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGkpLCByID0gcGFyc2VJbnQobi5wYWRkaW5nVG9wLCAxMCksIGEgPSB0Lm9mZnNldEhlaWdodDtcbiAgICBsZXQgbDtcbiAgICBvID8gbCA9IHQub2Zmc2V0VG9wICsgYSA6IGwgPSB0Lm9mZnNldFRvcCArIHIsIHRoaXMubm9kZXMud3JhcHBlci5zdHlsZS50b3AgPSBgJHtNYXRoLmZsb29yKGwpfXB4YCwgdGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLmJsb2Nrcy5sZW5ndGggPT09IDEgJiYgZS5pc0VtcHR5ID8gdGhpcy5ibG9ja1R1bmVzVG9nZ2xlci5oaWRlKCkgOiB0aGlzLmJsb2NrVHVuZXNUb2dnbGVyLnNob3coKSwgdGhpcy5vcGVuKCk7XG4gIH1cbiAgLyoqXG4gICAqIENsb3NlIHRoZSBUb29sYmFyXG4gICAqL1xuICBjbG9zZSgpIHtcbiAgICB2YXIgZSwgdDtcbiAgICB0aGlzLkVkaXRvci5SZWFkT25seS5pc0VuYWJsZWQgfHwgKChlID0gdGhpcy5ub2Rlcy53cmFwcGVyKSA9PSBudWxsIHx8IGUuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLkNTUy50b29sYmFyT3BlbmVkKSwgdGhpcy5ibG9ja0FjdGlvbnMuaGlkZSgpLCAodCA9IHRoaXMudG9vbGJveEluc3RhbmNlKSA9PSBudWxsIHx8IHQuY2xvc2UoKSwgdGhpcy5FZGl0b3IuQmxvY2tTZXR0aW5ncy5jbG9zZSgpLCB0aGlzLnJlc2V0KCkpO1xuICB9XG4gIC8qKlxuICAgKiBSZXNldCB0aGUgVG9vbGJhciBwb3NpdGlvbiB0byBwcmV2ZW50IERPTSBoZWlnaHQgZ3Jvd3RoLCBmb3IgZXhhbXBsZSBhZnRlciBibG9ja3MgZGVsZXRpb25cbiAgICovXG4gIHJlc2V0KCkge1xuICAgIHRoaXMubm9kZXMud3JhcHBlci5zdHlsZS50b3AgPSBcInVuc2V0XCI7XG4gIH1cbiAgLyoqXG4gICAqIE9wZW4gVG9vbGJhciB3aXRoIFBsdXMgQnV0dG9uIGFuZCBBY3Rpb25zXG4gICAqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gd2l0aEJsb2NrQWN0aW9ucyAtIGJ5IGRlZmF1bHQsIFRvb2xiYXIgb3BlbnMgd2l0aCBCbG9jayBBY3Rpb25zLlxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBUaGlzIGZsYWcgYWxsb3dzIHRvIG9wZW4gVG9vbGJhciB3aXRob3V0IEFjdGlvbnMuXG4gICAqL1xuICBvcGVuKGUgPSAhMCkge1xuICAgIHRoaXMubm9kZXMud3JhcHBlci5jbGFzc0xpc3QuYWRkKHRoaXMuQ1NTLnRvb2xiYXJPcGVuZWQpLCBlID8gdGhpcy5ibG9ja0FjdGlvbnMuc2hvdygpIDogdGhpcy5ibG9ja0FjdGlvbnMuaGlkZSgpO1xuICB9XG4gIC8qKlxuICAgKiBEcmF3cyBUb29sYmFyIGVsZW1lbnRzXG4gICAqL1xuICBtYWtlKCkge1xuICAgIHRoaXMubm9kZXMud3JhcHBlciA9IGMubWFrZShcImRpdlwiLCB0aGlzLkNTUy50b29sYmFyKSwgW1wiY29udGVudFwiLCBcImFjdGlvbnNcIl0uZm9yRWFjaCgoaSkgPT4ge1xuICAgICAgdGhpcy5ub2Rlc1tpXSA9IGMubWFrZShcImRpdlwiLCB0aGlzLkNTU1tpXSk7XG4gICAgfSksIGMuYXBwZW5kKHRoaXMubm9kZXMud3JhcHBlciwgdGhpcy5ub2Rlcy5jb250ZW50KSwgYy5hcHBlbmQodGhpcy5ub2Rlcy5jb250ZW50LCB0aGlzLm5vZGVzLmFjdGlvbnMpLCB0aGlzLm5vZGVzLnBsdXNCdXR0b24gPSBjLm1ha2UoXCJkaXZcIiwgdGhpcy5DU1MucGx1c0J1dHRvbiwge1xuICAgICAgaW5uZXJIVE1MOiBGb1xuICAgIH0pLCBjLmFwcGVuZCh0aGlzLm5vZGVzLmFjdGlvbnMsIHRoaXMubm9kZXMucGx1c0J1dHRvbiksIHRoaXMucmVhZE9ubHlNdXRhYmxlTGlzdGVuZXJzLm9uKHRoaXMubm9kZXMucGx1c0J1dHRvbiwgXCJjbGlja1wiLCAoKSA9PiB7XG4gICAgICBSZSghMCksIHRoaXMucGx1c0J1dHRvbkNsaWNrZWQoKTtcbiAgICB9LCAhMSk7XG4gICAgY29uc3QgZSA9IGMubWFrZShcImRpdlwiKTtcbiAgICBlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHoudWkoSy51aS50b29sYmFyLnRvb2xib3gsIFwiQWRkXCIpKSksIGUuYXBwZW5kQ2hpbGQoYy5tYWtlKFwiZGl2XCIsIHRoaXMuQ1NTLnBsdXNCdXR0b25TaG9ydGN1dCwge1xuICAgICAgdGV4dENvbnRlbnQ6IFwiL1wiXG4gICAgfSkpLCBnZSh0aGlzLm5vZGVzLnBsdXNCdXR0b24sIGUsIHtcbiAgICAgIGhpZGluZ0RlbGF5OiA0MDBcbiAgICB9KSwgdGhpcy5ub2Rlcy5zZXR0aW5nc1RvZ2dsZXIgPSBjLm1ha2UoXCJzcGFuXCIsIHRoaXMuQ1NTLnNldHRpbmdzVG9nZ2xlciwge1xuICAgICAgaW5uZXJIVE1MOiBQb1xuICAgIH0pLCBjLmFwcGVuZCh0aGlzLm5vZGVzLmFjdGlvbnMsIHRoaXMubm9kZXMuc2V0dGluZ3NUb2dnbGVyKTtcbiAgICBjb25zdCB0ID0gYy5tYWtlKFwiZGl2XCIpLCBvID0gYy50ZXh0KHoudWkoSy51aS5ibG9ja1R1bmVzLnRvZ2dsZXIsIFwiQ2xpY2sgdG8gdHVuZVwiKSk7XG4gICAgdC5hcHBlbmRDaGlsZChvKSwgdC5hcHBlbmRDaGlsZChjLm1ha2UoXCJkaXZcIiwgdGhpcy5DU1MucGx1c0J1dHRvblNob3J0Y3V0LCB7XG4gICAgICB0ZXh0Q29udGVudDogeWUoXCJDTUQgKyAvXCIpXG4gICAgfSkpLCBnZSh0aGlzLm5vZGVzLnNldHRpbmdzVG9nZ2xlciwgdCwge1xuICAgICAgaGlkaW5nRGVsYXk6IDQwMFxuICAgIH0pLCBjLmFwcGVuZCh0aGlzLm5vZGVzLmFjdGlvbnMsIHRoaXMubWFrZVRvb2xib3goKSksIGMuYXBwZW5kKHRoaXMubm9kZXMuYWN0aW9ucywgdGhpcy5FZGl0b3IuQmxvY2tTZXR0aW5ncy5nZXRFbGVtZW50KCkpLCBjLmFwcGVuZCh0aGlzLkVkaXRvci5VSS5ub2Rlcy53cmFwcGVyLCB0aGlzLm5vZGVzLndyYXBwZXIpO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGVzIHRoZSBUb29sYm94IGluc3RhbmNlIGFuZCByZXR1cm4gaXQncyByZW5kZXJlZCBlbGVtZW50XG4gICAqL1xuICBtYWtlVG9vbGJveCgpIHtcbiAgICByZXR1cm4gdGhpcy50b29sYm94SW5zdGFuY2UgPSBuZXcgJGUoe1xuICAgICAgYXBpOiB0aGlzLkVkaXRvci5BUEkubWV0aG9kcyxcbiAgICAgIHRvb2xzOiB0aGlzLkVkaXRvci5Ub29scy5ibG9ja1Rvb2xzLFxuICAgICAgaTE4bkxhYmVsczoge1xuICAgICAgICBmaWx0ZXI6IHoudWkoSy51aS5wb3BvdmVyLCBcIkZpbHRlclwiKSxcbiAgICAgICAgbm90aGluZ0ZvdW5kOiB6LnVpKEsudWkucG9wb3ZlciwgXCJOb3RoaW5nIGZvdW5kXCIpXG4gICAgICB9XG4gICAgfSksIHRoaXMudG9vbGJveEluc3RhbmNlLm9uKGtlLk9wZW5lZCwgKCkgPT4ge1xuICAgICAgdGhpcy5FZGl0b3IuVUkubm9kZXMud3JhcHBlci5jbGFzc0xpc3QuYWRkKHRoaXMuQ1NTLm9wZW5lZFRvb2xib3hIb2xkZXJNb2RpZmllcik7XG4gICAgfSksIHRoaXMudG9vbGJveEluc3RhbmNlLm9uKGtlLkNsb3NlZCwgKCkgPT4ge1xuICAgICAgdGhpcy5FZGl0b3IuVUkubm9kZXMud3JhcHBlci5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuQ1NTLm9wZW5lZFRvb2xib3hIb2xkZXJNb2RpZmllcik7XG4gICAgfSksIHRoaXMudG9vbGJveEluc3RhbmNlLm9uKGtlLkJsb2NrQWRkZWQsICh7IGJsb2NrOiBlIH0pID0+IHtcbiAgICAgIGNvbnN0IHsgQmxvY2tNYW5hZ2VyOiB0LCBDYXJldDogbyB9ID0gdGhpcy5FZGl0b3IsIGkgPSB0LmdldEJsb2NrQnlJZChlLmlkKTtcbiAgICAgIGkuaW5wdXRzLmxlbmd0aCA9PT0gMCAmJiAoaSA9PT0gdC5sYXN0QmxvY2sgPyAodC5pbnNlcnRBdEVuZCgpLCBvLnNldFRvQmxvY2sodC5sYXN0QmxvY2spKSA6IG8uc2V0VG9CbG9jayh0Lm5leHRCbG9jaykpO1xuICAgIH0pLCB0aGlzLnRvb2xib3hJbnN0YW5jZS5tYWtlKCk7XG4gIH1cbiAgLyoqXG4gICAqIEhhbmRsZXIgZm9yIFBsdXMgQnV0dG9uXG4gICAqL1xuICBwbHVzQnV0dG9uQ2xpY2tlZCgpIHtcbiAgICB2YXIgZTtcbiAgICB0aGlzLkVkaXRvci5CbG9ja01hbmFnZXIuY3VycmVudEJsb2NrID0gdGhpcy5ob3ZlcmVkQmxvY2ssIChlID0gdGhpcy50b29sYm94SW5zdGFuY2UpID09IG51bGwgfHwgZS50b2dnbGUoKTtcbiAgfVxuICAvKipcbiAgICogRW5hYmxlIGJpbmRpbmdzXG4gICAqL1xuICBlbmFibGVNb2R1bGVCaW5kaW5ncygpIHtcbiAgICB0aGlzLnJlYWRPbmx5TXV0YWJsZUxpc3RlbmVycy5vbih0aGlzLm5vZGVzLnNldHRpbmdzVG9nZ2xlciwgXCJtb3VzZWRvd25cIiwgKGUpID0+IHtcbiAgICAgIHZhciB0O1xuICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKSwgdGhpcy5zZXR0aW5nc1RvZ2dsZXJDbGlja2VkKCksICh0ID0gdGhpcy50b29sYm94SW5zdGFuY2UpICE9IG51bGwgJiYgdC5vcGVuZWQgJiYgdGhpcy50b29sYm94SW5zdGFuY2UuY2xvc2UoKSwgUmUoITApO1xuICAgIH0sICEwKSwgdGUoKSB8fCB0aGlzLmV2ZW50c0Rpc3BhdGNoZXIub24oeXQsIChlKSA9PiB7XG4gICAgICB2YXIgdDtcbiAgICAgIHRoaXMuRWRpdG9yLkJsb2NrU2V0dGluZ3Mub3BlbmVkIHx8ICh0ID0gdGhpcy50b29sYm94SW5zdGFuY2UpICE9IG51bGwgJiYgdC5vcGVuZWQgfHwgdGhpcy5tb3ZlQW5kT3BlbihlLmJsb2NrKTtcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogRGlzYWJsZSBiaW5kaW5nc1xuICAgKi9cbiAgZGlzYWJsZU1vZHVsZUJpbmRpbmdzKCkge1xuICAgIHRoaXMucmVhZE9ubHlNdXRhYmxlTGlzdGVuZXJzLmNsZWFyQWxsKCk7XG4gIH1cbiAgLyoqXG4gICAqIENsaWNrcyBvbiB0aGUgQmxvY2sgU2V0dGluZ3MgdG9nZ2xlclxuICAgKi9cbiAgc2V0dGluZ3NUb2dnbGVyQ2xpY2tlZCgpIHtcbiAgICB0aGlzLkVkaXRvci5CbG9ja01hbmFnZXIuY3VycmVudEJsb2NrID0gdGhpcy5ob3ZlcmVkQmxvY2ssIHRoaXMuRWRpdG9yLkJsb2NrU2V0dGluZ3Mub3BlbmVkID8gdGhpcy5FZGl0b3IuQmxvY2tTZXR0aW5ncy5jbG9zZSgpIDogdGhpcy5FZGl0b3IuQmxvY2tTZXR0aW5ncy5vcGVuKHRoaXMuaG92ZXJlZEJsb2NrKTtcbiAgfVxuICAvKipcbiAgICogRHJhd3MgVG9vbGJhciBVSVxuICAgKlxuICAgKiBUb29sYmFyIGNvbnRhaW5zIEJsb2NrU2V0dGluZ3MgYW5kIFRvb2xib3guXG4gICAqIFRoYXQncyB3aHkgYXQgZmlyc3Qgd2UgZHJhdyBpdHMgY29tcG9uZW50cyBhbmQgdGhlbiBUb29sYmFyIGl0c2VsZlxuICAgKlxuICAgKiBTdGVwczpcbiAgICogIC0gTWFrZSBUb29sYmFyIGRlcGVuZGVudCBjb21wb25lbnRzIGxpa2UgQmxvY2tTZXR0aW5ncywgVG9vbGJveCBhbmQgc28gb25cbiAgICogIC0gTWFrZSBpdHNlbGYgYW5kIGFwcGVuZCBkZXBlbmRlbnQgbm9kZXMgdG8gaXRzZWxmXG4gICAqXG4gICAqL1xuICBkcmF3VUkoKSB7XG4gICAgdGhpcy5FZGl0b3IuQmxvY2tTZXR0aW5ncy5tYWtlKCksIHRoaXMubWFrZSgpO1xuICB9XG4gIC8qKlxuICAgKiBSZW1vdmVzIGFsbCBjcmVhdGVkIGFuZCBzYXZlZCBIVE1MRWxlbWVudHNcbiAgICogSXQgaXMgdXNlZCBpbiBSZWFkLU9ubHkgbW9kZVxuICAgKi9cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLnJlbW92ZUFsbE5vZGVzKCksIHRoaXMudG9vbGJveEluc3RhbmNlICYmIHRoaXMudG9vbGJveEluc3RhbmNlLmRlc3Ryb3koKTtcbiAgfVxufVxudmFyIEJlID0gLyogQF9fUFVSRV9fICovICgocykgPT4gKHNbcy5CbG9jayA9IDBdID0gXCJCbG9ja1wiLCBzW3MuSW5saW5lID0gMV0gPSBcIklubGluZVwiLCBzW3MuVHVuZSA9IDJdID0gXCJUdW5lXCIsIHMpKShCZSB8fCB7fSksIHZlID0gLyogQF9fUFVSRV9fICovICgocykgPT4gKHMuU2hvcnRjdXQgPSBcInNob3J0Y3V0XCIsIHMuVG9vbGJveCA9IFwidG9vbGJveFwiLCBzLkVuYWJsZWRJbmxpbmVUb29scyA9IFwiaW5saW5lVG9vbGJhclwiLCBzLkVuYWJsZWRCbG9ja1R1bmVzID0gXCJ0dW5lc1wiLCBzLkNvbmZpZyA9IFwiY29uZmlnXCIsIHMpKSh2ZSB8fCB7fSksIEV0ID0gLyogQF9fUFVSRV9fICovICgocykgPT4gKHMuU2hvcnRjdXQgPSBcInNob3J0Y3V0XCIsIHMuU2FuaXRpemVDb25maWcgPSBcInNhbml0aXplXCIsIHMpKShFdCB8fCB7fSksIHNlID0gLyogQF9fUFVSRV9fICovICgocykgPT4gKHMuSXNFbmFibGVkTGluZUJyZWFrcyA9IFwiZW5hYmxlTGluZUJyZWFrc1wiLCBzLlRvb2xib3ggPSBcInRvb2xib3hcIiwgcy5Db252ZXJzaW9uQ29uZmlnID0gXCJjb252ZXJzaW9uQ29uZmlnXCIsIHMuSXNSZWFkT25seVN1cHBvcnRlZCA9IFwiaXNSZWFkT25seVN1cHBvcnRlZFwiLCBzLlBhc3RlQ29uZmlnID0gXCJwYXN0ZUNvbmZpZ1wiLCBzKSkoc2UgfHwge30pLCBXZSA9IC8qIEBfX1BVUkVfXyAqLyAoKHMpID0+IChzLklzSW5saW5lID0gXCJpc0lubGluZVwiLCBzLlRpdGxlID0gXCJ0aXRsZVwiLCBzKSkoV2UgfHwge30pLCBCdCA9IC8qIEBfX1BVUkVfXyAqLyAoKHMpID0+IChzLklzVHVuZSA9IFwiaXNUdW5lXCIsIHMpKShCdCB8fCB7fSk7XG5jbGFzcyBZZSB7XG4gIC8qKlxuICAgKiBAY2xhc3NcbiAgICogQHBhcmFtIHtDb25zdHJ1Y3Rvck9wdGlvbnN9IG9wdGlvbnMgLSBDb25zdHJ1Y3RvciBvcHRpb25zXG4gICAqL1xuICBjb25zdHJ1Y3Rvcih7XG4gICAgbmFtZTogZSxcbiAgICBjb25zdHJ1Y3RhYmxlOiB0LFxuICAgIGNvbmZpZzogbyxcbiAgICBhcGk6IGksXG4gICAgaXNEZWZhdWx0OiBuLFxuICAgIGlzSW50ZXJuYWw6IHIgPSAhMSxcbiAgICBkZWZhdWx0UGxhY2Vob2xkZXI6IGFcbiAgfSkge1xuICAgIHRoaXMuYXBpID0gaSwgdGhpcy5uYW1lID0gZSwgdGhpcy5jb25zdHJ1Y3RhYmxlID0gdCwgdGhpcy5jb25maWcgPSBvLCB0aGlzLmlzRGVmYXVsdCA9IG4sIHRoaXMuaXNJbnRlcm5hbCA9IHIsIHRoaXMuZGVmYXVsdFBsYWNlaG9sZGVyID0gYTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBUb29sIHVzZXIgY29uZmlndXJhdGlvblxuICAgKi9cbiAgZ2V0IHNldHRpbmdzKCkge1xuICAgIGNvbnN0IGUgPSB0aGlzLmNvbmZpZy5jb25maWcgfHwge307XG4gICAgcmV0dXJuIHRoaXMuaXNEZWZhdWx0ICYmICEoXCJwbGFjZWhvbGRlclwiIGluIGUpICYmIHRoaXMuZGVmYXVsdFBsYWNlaG9sZGVyICYmIChlLnBsYWNlaG9sZGVyID0gdGhpcy5kZWZhdWx0UGxhY2Vob2xkZXIpLCBlO1xuICB9XG4gIC8qKlxuICAgKiBDYWxscyBUb29sJ3MgcmVzZXQgbWV0aG9kXG4gICAqL1xuICByZXNldCgpIHtcbiAgICBpZiAoTSh0aGlzLmNvbnN0cnVjdGFibGUucmVzZXQpKVxuICAgICAgcmV0dXJuIHRoaXMuY29uc3RydWN0YWJsZS5yZXNldCgpO1xuICB9XG4gIC8qKlxuICAgKiBDYWxscyBUb29sJ3MgcHJlcGFyZSBtZXRob2RcbiAgICovXG4gIHByZXBhcmUoKSB7XG4gICAgaWYgKE0odGhpcy5jb25zdHJ1Y3RhYmxlLnByZXBhcmUpKVxuICAgICAgcmV0dXJuIHRoaXMuY29uc3RydWN0YWJsZS5wcmVwYXJlKHtcbiAgICAgICAgdG9vbE5hbWU6IHRoaXMubmFtZSxcbiAgICAgICAgY29uZmlnOiB0aGlzLnNldHRpbmdzXG4gICAgICB9KTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBzaG9ydGN1dCBmb3IgVG9vbCAoaW50ZXJuYWwgb3Igc3BlY2lmaWVkIGJ5IHVzZXIpXG4gICAqL1xuICBnZXQgc2hvcnRjdXQoKSB7XG4gICAgY29uc3QgZSA9IHRoaXMuY29uc3RydWN0YWJsZS5zaG9ydGN1dDtcbiAgICByZXR1cm4gdGhpcy5jb25maWcuc2hvcnRjdXQgfHwgZTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBUb29sJ3Mgc2FuaXRpemVyIGNvbmZpZ3VyYXRpb25cbiAgICovXG4gIGdldCBzYW5pdGl6ZUNvbmZpZygpIHtcbiAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3RhYmxlLnNhbml0aXplIHx8IHt9O1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIHRydWUgaWYgVG9vbHMgaXMgaW5saW5lXG4gICAqL1xuICBpc0lubGluZSgpIHtcbiAgICByZXR1cm4gdGhpcy50eXBlID09PSAxO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIHRydWUgaWYgVG9vbHMgaXMgYmxvY2tcbiAgICovXG4gIGlzQmxvY2soKSB7XG4gICAgcmV0dXJuIHRoaXMudHlwZSA9PT0gMDtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyB0cnVlIGlmIFRvb2xzIGlzIHR1bmVcbiAgICovXG4gIGlzVHVuZSgpIHtcbiAgICByZXR1cm4gdGhpcy50eXBlID09PSAyO1xuICB9XG59XG5jbGFzcyBKbyBleHRlbmRzIHkge1xuICAvKipcbiAgICogQGNsYXNzXG4gICAqIEBwYXJhbSBtb2R1bGVDb25maWd1cmF0aW9uIC0gTW9kdWxlIENvbmZpZ3VyYXRpb25cbiAgICogQHBhcmFtIG1vZHVsZUNvbmZpZ3VyYXRpb24uY29uZmlnIC0gRWRpdG9yJ3MgY29uZmlnXG4gICAqIEBwYXJhbSBtb2R1bGVDb25maWd1cmF0aW9uLmV2ZW50c0Rpc3BhdGNoZXIgLSBFZGl0b3IncyBldmVudCBkaXNwYXRjaGVyXG4gICAqL1xuICBjb25zdHJ1Y3Rvcih7IGNvbmZpZzogZSwgZXZlbnRzRGlzcGF0Y2hlcjogdCB9KSB7XG4gICAgc3VwZXIoe1xuICAgICAgY29uZmlnOiBlLFxuICAgICAgZXZlbnRzRGlzcGF0Y2hlcjogdFxuICAgIH0pLCB0aGlzLkNTUyA9IHtcbiAgICAgIGlubGluZVRvb2xiYXI6IFwiY2UtaW5saW5lLXRvb2xiYXJcIixcbiAgICAgIGlubGluZVRvb2xiYXJTaG93ZWQ6IFwiY2UtaW5saW5lLXRvb2xiYXItLXNob3dlZFwiLFxuICAgICAgaW5saW5lVG9vbGJhckxlZnRPcmllbnRlZDogXCJjZS1pbmxpbmUtdG9vbGJhci0tbGVmdC1vcmllbnRlZFwiLFxuICAgICAgaW5saW5lVG9vbGJhclJpZ2h0T3JpZW50ZWQ6IFwiY2UtaW5saW5lLXRvb2xiYXItLXJpZ2h0LW9yaWVudGVkXCIsXG4gICAgICBpbmxpbmVUb29sYmFyU2hvcnRjdXQ6IFwiY2UtaW5saW5lLXRvb2xiYXJfX3Nob3J0Y3V0XCIsXG4gICAgICBidXR0b25zV3JhcHBlcjogXCJjZS1pbmxpbmUtdG9vbGJhcl9fYnV0dG9uc1wiLFxuICAgICAgYWN0aW9uc1dyYXBwZXI6IFwiY2UtaW5saW5lLXRvb2xiYXJfX2FjdGlvbnNcIixcbiAgICAgIGlubGluZVRvb2xCdXR0b246IFwiY2UtaW5saW5lLXRvb2xcIixcbiAgICAgIGlucHV0RmllbGQ6IFwiY2R4LWlucHV0XCIsXG4gICAgICBmb2N1c2VkQnV0dG9uOiBcImNlLWlubGluZS10b29sLS1mb2N1c2VkXCIsXG4gICAgICBjb252ZXJzaW9uVG9nZ2xlcjogXCJjZS1pbmxpbmUtdG9vbGJhcl9fZHJvcGRvd25cIixcbiAgICAgIGNvbnZlcnNpb25Ub2dnbGVyQXJyb3c6IFwiY2UtaW5saW5lLXRvb2xiYXJfX2Ryb3Bkb3duLWFycm93XCIsXG4gICAgICBjb252ZXJzaW9uVG9nZ2xlckhpZGRlbjogXCJjZS1pbmxpbmUtdG9vbGJhcl9fZHJvcGRvd24tLWhpZGRlblwiLFxuICAgICAgY29udmVyc2lvblRvZ2dsZXJDb250ZW50OiBcImNlLWlubGluZS10b29sYmFyX19kcm9wZG93bi1jb250ZW50XCIsXG4gICAgICB0b2dnbGVyQW5kQnV0dG9uc1dyYXBwZXI6IFwiY2UtaW5saW5lLXRvb2xiYXJfX3RvZ2dsZXItYW5kLWJ1dHRvbi13cmFwcGVyXCJcbiAgICB9LCB0aGlzLm9wZW5lZCA9ICExLCB0aGlzLnRvb2xiYXJWZXJ0aWNhbE1hcmdpbiA9IHRlKCkgPyAyMCA6IDYsIHRoaXMuYnV0dG9uc0xpc3QgPSBudWxsLCB0aGlzLndpZHRoID0gMCwgdGhpcy5mbGlwcGVyID0gbnVsbDtcbiAgfVxuICAvKipcbiAgICogVG9nZ2xlcyByZWFkLW9ubHkgbW9kZVxuICAgKlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHJlYWRPbmx5RW5hYmxlZCAtIHJlYWQtb25seSBtb2RlXG4gICAqL1xuICB0b2dnbGVSZWFkT25seShlKSB7XG4gICAgZSA/ICh0aGlzLmRlc3Ryb3koKSwgdGhpcy5FZGl0b3IuQ29udmVyc2lvblRvb2xiYXIuZGVzdHJveSgpKSA6IHdpbmRvdy5yZXF1ZXN0SWRsZUNhbGxiYWNrKCgpID0+IHtcbiAgICAgIHRoaXMubWFrZSgpO1xuICAgIH0sIHsgdGltZW91dDogMmUzIH0pO1xuICB9XG4gIC8qKlxuICAgKiAgTW92aW5nIC8gYXBwZWFyYW5jZVxuICAgKiAgfn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+flxuICAgKi9cbiAgLyoqXG4gICAqIFNob3dzIElubGluZSBUb29sYmFyIGlmIHNvbWV0aGluZyBpcyBzZWxlY3RlZFxuICAgKlxuICAgKiBAcGFyYW0gW25lZWRUb0Nsb3NlXSAtIHBhc3MgdHJ1ZSB0byBjbG9zZSB0b29sYmFyIGlmIGl0IGlzIG5vdCBhbGxvd2VkLlxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBdm9pZCB0byB1c2UgaXQganVzdCBmb3IgY2xvc2luZyBJVCwgYmV0dGVyIGNhbGwgLmNsb3NlKCkgY2xlYXJseS5cbiAgICogQHBhcmFtIFtuZWVkVG9TaG93Q29udmVyc2lvblRvb2xiYXJdIC0gcGFzcyBmYWxzZSB0byBub3QgdG8gc2hvdyBDb252ZXJzaW9uIFRvb2xiYXJcbiAgICovXG4gIGFzeW5jIHRyeVRvU2hvdyhlID0gITEsIHQgPSAhMCkge1xuICAgIGUgJiYgdGhpcy5jbG9zZSgpLCB0aGlzLmFsbG93ZWRUb1Nob3coKSAmJiAoYXdhaXQgdGhpcy5hZGRUb29sc0ZpbHRlcmVkKHQpLCB0aGlzLm1vdmUoKSwgdGhpcy5vcGVuKHQpLCB0aGlzLkVkaXRvci5Ub29sYmFyLmNsb3NlKCkpO1xuICB9XG4gIC8qKlxuICAgKiBIaWRlcyBJbmxpbmUgVG9vbGJhclxuICAgKi9cbiAgY2xvc2UoKSB7XG4gICAgdGhpcy5vcGVuZWQgJiYgKHRoaXMuRWRpdG9yLlJlYWRPbmx5LmlzRW5hYmxlZCB8fCAodGhpcy5ub2Rlcy53cmFwcGVyLmNsYXNzTGlzdC5yZW1vdmUodGhpcy5DU1MuaW5saW5lVG9vbGJhclNob3dlZCksIEFycmF5LmZyb20odGhpcy50b29sc0luc3RhbmNlcy5lbnRyaWVzKCkpLmZvckVhY2goKFtlLCB0XSkgPT4ge1xuICAgICAgY29uc3QgbyA9IHRoaXMuZ2V0VG9vbFNob3J0Y3V0KGUpO1xuICAgICAgbyAmJiBhZS5yZW1vdmUodGhpcy5FZGl0b3IuVUkubm9kZXMucmVkYWN0b3IsIG8pLCBNKHQuY2xlYXIpICYmIHQuY2xlYXIoKTtcbiAgICB9KSwgdGhpcy5yZXNldCgpLCB0aGlzLm9wZW5lZCA9ICExLCB0aGlzLmZsaXBwZXIuZGVhY3RpdmF0ZSgpLCB0aGlzLkVkaXRvci5Db252ZXJzaW9uVG9vbGJhci5jbG9zZSgpKSk7XG4gIH1cbiAgLyoqXG4gICAqIENoZWNrIGlmIG5vZGUgaXMgY29udGFpbmVkIGJ5IElubGluZSBUb29sYmFyXG4gICAqXG4gICAqIEBwYXJhbSB7Tm9kZX0gbm9kZSDigJQgbm9kZSB0byBjaGVja1xuICAgKi9cbiAgY29udGFpbnNOb2RlKGUpIHtcbiAgICByZXR1cm4gdGhpcy5ub2Rlcy53cmFwcGVyID09PSB2b2lkIDAgPyAhMSA6IHRoaXMubm9kZXMud3JhcHBlci5jb250YWlucyhlKTtcbiAgfVxuICAvKipcbiAgICogUmVtb3ZlcyBVSSBhbmQgaXRzIGNvbXBvbmVudHNcbiAgICovXG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy5mbGlwcGVyICYmICh0aGlzLmZsaXBwZXIuZGVhY3RpdmF0ZSgpLCB0aGlzLmZsaXBwZXIgPSBudWxsKSwgdGhpcy5yZW1vdmVBbGxOb2RlcygpO1xuICB9XG4gIC8qKlxuICAgKiBNYWtpbmcgRE9NXG4gICAqL1xuICBtYWtlKCkge1xuICAgIHRoaXMubm9kZXMud3JhcHBlciA9IGMubWFrZShcImRpdlwiLCBbXG4gICAgICB0aGlzLkNTUy5pbmxpbmVUb29sYmFyLFxuICAgICAgLi4udGhpcy5pc1J0bCA/IFt0aGlzLkVkaXRvci5VSS5DU1MuZWRpdG9yUnRsRml4XSA6IFtdXG4gICAgXSksIHRoaXMubm9kZXMudG9nZ2xlckFuZEJ1dHRvbnNXcmFwcGVyID0gYy5tYWtlKFwiZGl2XCIsIHRoaXMuQ1NTLnRvZ2dsZXJBbmRCdXR0b25zV3JhcHBlciksIHRoaXMubm9kZXMuYnV0dG9ucyA9IGMubWFrZShcImRpdlwiLCB0aGlzLkNTUy5idXR0b25zV3JhcHBlciksIHRoaXMubm9kZXMuYWN0aW9ucyA9IGMubWFrZShcImRpdlwiLCB0aGlzLkNTUy5hY3Rpb25zV3JhcHBlciksIHRoaXMubGlzdGVuZXJzLm9uKHRoaXMubm9kZXMud3JhcHBlciwgXCJtb3VzZWRvd25cIiwgKGUpID0+IHtcbiAgICAgIGUudGFyZ2V0LmNsb3Nlc3QoYC4ke3RoaXMuQ1NTLmFjdGlvbnNXcmFwcGVyfWApIHx8IGUucHJldmVudERlZmF1bHQoKTtcbiAgICB9KSwgYy5hcHBlbmQodGhpcy5ub2Rlcy53cmFwcGVyLCBbdGhpcy5ub2Rlcy50b2dnbGVyQW5kQnV0dG9uc1dyYXBwZXIsIHRoaXMubm9kZXMuYWN0aW9uc10pLCBjLmFwcGVuZCh0aGlzLkVkaXRvci5VSS5ub2Rlcy53cmFwcGVyLCB0aGlzLm5vZGVzLndyYXBwZXIpLCB0aGlzLmFkZENvbnZlcnNpb25Ub2dnbGVyKCksIGMuYXBwZW5kKHRoaXMubm9kZXMudG9nZ2xlckFuZEJ1dHRvbnNXcmFwcGVyLCB0aGlzLm5vZGVzLmJ1dHRvbnMpLCB0aGlzLnByZXBhcmVDb252ZXJzaW9uVG9vbGJhcigpLCB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgIHRoaXMucmVjYWxjdWxhdGVXaWR0aCgpO1xuICAgIH0pLCB0aGlzLmVuYWJsZUZsaXBwZXIoKTtcbiAgfVxuICAvKipcbiAgICogU2hvd3MgSW5saW5lIFRvb2xiYXJcbiAgICovXG4gIG9wZW4oKSB7XG4gICAgaWYgKHRoaXMub3BlbmVkKVxuICAgICAgcmV0dXJuO1xuICAgIHRoaXMubm9kZXMud3JhcHBlci5jbGFzc0xpc3QuYWRkKHRoaXMuQ1NTLmlubGluZVRvb2xiYXJTaG93ZWQpLCB0aGlzLmJ1dHRvbnNMaXN0ID0gdGhpcy5ub2Rlcy5idXR0b25zLnF1ZXJ5U2VsZWN0b3JBbGwoYC4ke3RoaXMuQ1NTLmlubGluZVRvb2xCdXR0b259YCksIHRoaXMub3BlbmVkID0gITA7XG4gICAgbGV0IGUgPSBBcnJheS5mcm9tKHRoaXMuYnV0dG9uc0xpc3QpO1xuICAgIGUudW5zaGlmdCh0aGlzLm5vZGVzLmNvbnZlcnNpb25Ub2dnbGVyKSwgZSA9IGUuZmlsdGVyKCh0KSA9PiAhdC5oaWRkZW4pLCB0aGlzLmZsaXBwZXIuYWN0aXZhdGUoZSk7XG4gIH1cbiAgLyoqXG4gICAqIE1vdmUgVG9vbGJhciB0byB0aGUgc2VsZWN0ZWQgdGV4dFxuICAgKi9cbiAgbW92ZSgpIHtcbiAgICBjb25zdCBlID0gYi5yZWN0LCB0ID0gdGhpcy5FZGl0b3IuVUkubm9kZXMud3JhcHBlci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSwgbyA9IHtcbiAgICAgIHg6IGUueCAtIHQueCxcbiAgICAgIHk6IGUueSArIGUuaGVpZ2h0IC0gLy8gKyB3aW5kb3cuc2Nyb2xsWVxuICAgICAgdC50b3AgKyB0aGlzLnRvb2xiYXJWZXJ0aWNhbE1hcmdpblxuICAgIH07XG4gICAgby54ICsgdGhpcy53aWR0aCArIHQueCA+IHRoaXMuRWRpdG9yLlVJLmNvbnRlbnRSZWN0LnJpZ2h0ICYmIChvLnggPSB0aGlzLkVkaXRvci5VSS5jb250ZW50UmVjdC5yaWdodCAtIHRoaXMud2lkdGggLSB0LngpLCB0aGlzLm5vZGVzLndyYXBwZXIuc3R5bGUubGVmdCA9IE1hdGguZmxvb3Ioby54KSArIFwicHhcIiwgdGhpcy5ub2Rlcy53cmFwcGVyLnN0eWxlLnRvcCA9IE1hdGguZmxvb3Ioby55KSArIFwicHhcIjtcbiAgfVxuICAvKipcbiAgICogQ2xlYXIgb3JpZW50YXRpb24gY2xhc3NlcyBhbmQgcmVzZXQgcG9zaXRpb25cbiAgICovXG4gIHJlc2V0KCkge1xuICAgIHRoaXMubm9kZXMud3JhcHBlci5jbGFzc0xpc3QucmVtb3ZlKFxuICAgICAgdGhpcy5DU1MuaW5saW5lVG9vbGJhckxlZnRPcmllbnRlZCxcbiAgICAgIHRoaXMuQ1NTLmlubGluZVRvb2xiYXJSaWdodE9yaWVudGVkXG4gICAgKSwgdGhpcy5ub2Rlcy53cmFwcGVyLnN0eWxlLmxlZnQgPSBcIjBcIiwgdGhpcy5ub2Rlcy53cmFwcGVyLnN0eWxlLnRvcCA9IFwiMFwiO1xuICB9XG4gIC8qKlxuICAgKiBOZWVkIHRvIHNob3cgSW5saW5lIFRvb2xiYXIgb3Igbm90XG4gICAqL1xuICBhbGxvd2VkVG9TaG93KCkge1xuICAgIGNvbnN0IGUgPSBbXCJJTUdcIiwgXCJJTlBVVFwiXSwgdCA9IGIuZ2V0KCksIG8gPSBiLnRleHQ7XG4gICAgaWYgKCF0IHx8ICF0LmFuY2hvck5vZGUgfHwgdC5pc0NvbGxhcHNlZCB8fCBvLmxlbmd0aCA8IDEpXG4gICAgICByZXR1cm4gITE7XG4gICAgY29uc3QgaSA9IGMuaXNFbGVtZW50KHQuYW5jaG9yTm9kZSkgPyB0LmFuY2hvck5vZGUgOiB0LmFuY2hvck5vZGUucGFyZW50RWxlbWVudDtcbiAgICBpZiAodCAmJiBlLmluY2x1ZGVzKGkudGFnTmFtZSkgfHwgaS5jbG9zZXN0KCdbY29udGVudGVkaXRhYmxlPVwidHJ1ZVwiXScpID09PSBudWxsKVxuICAgICAgcmV0dXJuICExO1xuICAgIGNvbnN0IHIgPSB0aGlzLkVkaXRvci5CbG9ja01hbmFnZXIuZ2V0QmxvY2sodC5hbmNob3JOb2RlKTtcbiAgICByZXR1cm4gciA/IHIudG9vbC5pbmxpbmVUb29scy5zaXplICE9PSAwIDogITE7XG4gIH1cbiAgLyoqXG4gICAqIFJlY2FsY3VsYXRlIGlubGluZSB0b29sYmFyIHdpZHRoXG4gICAqL1xuICByZWNhbGN1bGF0ZVdpZHRoKCkge1xuICAgIHRoaXMud2lkdGggPSB0aGlzLm5vZGVzLndyYXBwZXIub2Zmc2V0V2lkdGg7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZSBhIHRvZ2dsZXIgZm9yIENvbnZlcnNpb24gRHJvcGRvd25cbiAgICogYW5kIHByZXBlbmQgaXQgdG8gdGhlIGJ1dHRvbnMgbGlzdFxuICAgKi9cbiAgYWRkQ29udmVyc2lvblRvZ2dsZXIoKSB7XG4gICAgdGhpcy5ub2Rlcy5jb252ZXJzaW9uVG9nZ2xlciA9IGMubWFrZShcImRpdlwiLCB0aGlzLkNTUy5jb252ZXJzaW9uVG9nZ2xlciksIHRoaXMubm9kZXMuY29udmVyc2lvblRvZ2dsZXJDb250ZW50ID0gYy5tYWtlKFwiZGl2XCIsIHRoaXMuQ1NTLmNvbnZlcnNpb25Ub2dnbGVyQ29udGVudCk7XG4gICAgY29uc3QgZSA9IGMubWFrZShcImRpdlwiLCB0aGlzLkNTUy5jb252ZXJzaW9uVG9nZ2xlckFycm93LCB7XG4gICAgICBpbm5lckhUTUw6IGt0XG4gICAgfSk7XG4gICAgdGhpcy5ub2Rlcy5jb252ZXJzaW9uVG9nZ2xlci5hcHBlbmRDaGlsZCh0aGlzLm5vZGVzLmNvbnZlcnNpb25Ub2dnbGVyQ29udGVudCksIHRoaXMubm9kZXMuY29udmVyc2lvblRvZ2dsZXIuYXBwZW5kQ2hpbGQoZSksIHRoaXMubm9kZXMudG9nZ2xlckFuZEJ1dHRvbnNXcmFwcGVyLmFwcGVuZENoaWxkKHRoaXMubm9kZXMuY29udmVyc2lvblRvZ2dsZXIpLCB0aGlzLmxpc3RlbmVycy5vbih0aGlzLm5vZGVzLmNvbnZlcnNpb25Ub2dnbGVyLCBcImNsaWNrXCIsICgpID0+IHtcbiAgICAgIHRoaXMuRWRpdG9yLkNvbnZlcnNpb25Ub29sYmFyLnRvZ2dsZSgodCkgPT4ge1xuICAgICAgICAhdCAmJiB0aGlzLm9wZW5lZCA/IHRoaXMuZmxpcHBlci5hY3RpdmF0ZSgpIDogdGhpcy5vcGVuZWQgJiYgdGhpcy5mbGlwcGVyLmRlYWN0aXZhdGUoKTtcbiAgICAgIH0pO1xuICAgIH0pLCB0ZSgpID09PSAhMSAmJiBnZSh0aGlzLm5vZGVzLmNvbnZlcnNpb25Ub2dnbGVyLCB6LnVpKEsudWkuaW5saW5lVG9vbGJhci5jb252ZXJ0ZXIsIFwiQ29udmVydCB0b1wiKSwge1xuICAgICAgcGxhY2VtZW50OiBcInRvcFwiLFxuICAgICAgaGlkaW5nRGVsYXk6IDEwMFxuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBDaGFuZ2VzIENvbnZlcnNpb24gRHJvcGRvd24gY29udGVudCBmb3IgY3VycmVudCBibG9jaydzIFRvb2xcbiAgICovXG4gIGFzeW5jIHNldENvbnZlcnNpb25Ub2dnbGVyQ29udGVudCgpIHtcbiAgICBjb25zdCB7IEJsb2NrTWFuYWdlcjogZSB9ID0gdGhpcy5FZGl0b3IsIHsgY3VycmVudEJsb2NrOiB0IH0gPSBlLCBvID0gdC5uYW1lLCBpID0gdC50b29sLmNvbnZlcnNpb25Db25maWcsIG4gPSBpICYmIGkuZXhwb3J0O1xuICAgIHRoaXMubm9kZXMuY29udmVyc2lvblRvZ2dsZXIuaGlkZGVuID0gIW4sIHRoaXMubm9kZXMuY29udmVyc2lvblRvZ2dsZXIuY2xhc3NMaXN0LnRvZ2dsZSh0aGlzLkNTUy5jb252ZXJzaW9uVG9nZ2xlckhpZGRlbiwgIW4pO1xuICAgIGNvbnN0IHIgPSBhd2FpdCB0LmdldEFjdGl2ZVRvb2xib3hFbnRyeSgpIHx8IHt9O1xuICAgIHRoaXMubm9kZXMuY29udmVyc2lvblRvZ2dsZXJDb250ZW50LmlubmVySFRNTCA9IHIuaWNvbiB8fCByLnRpdGxlIHx8IHJlKG8pO1xuICB9XG4gIC8qKlxuICAgKiBNYWtlcyB0aGUgQ29udmVyc2lvbiBEcm9wZG93blxuICAgKi9cbiAgcHJlcGFyZUNvbnZlcnNpb25Ub29sYmFyKCkge1xuICAgIGNvbnN0IGUgPSB0aGlzLkVkaXRvci5Db252ZXJzaW9uVG9vbGJhci5tYWtlKCk7XG4gICAgYy5hcHBlbmQodGhpcy5ub2Rlcy53cmFwcGVyLCBlKTtcbiAgfVxuICAvKipcbiAgICogIFdvcmtpbmcgd2l0aCBUb29sc1xuICAgKiAgfn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+flxuICAgKi9cbiAgLyoqXG4gICAqIEFwcGVuZCBvbmx5IGFsbG93ZWQgVG9vbHNcbiAgICpcbiAgICogQHBhcmFtIHtib29sZWFufSBuZWVkVG9TaG93Q29udmVyc2lvblRvb2xiYXIgLSBwYXNzIGZhbHNlIHRvIG5vdCB0byBzaG93IENvbnZlcnNpb24gVG9vbGJhciAoZS5nLiBmb3IgRm9vdG5vdGVzLWxpa2UgdG9vbHMpXG4gICAqL1xuICBhc3luYyBhZGRUb29sc0ZpbHRlcmVkKGUgPSAhMCkge1xuICAgIGNvbnN0IHQgPSBiLmdldCgpLCBvID0gdGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLmdldEJsb2NrKHQuYW5jaG9yTm9kZSk7XG4gICAgdGhpcy5ub2Rlcy5idXR0b25zLmlubmVySFRNTCA9IFwiXCIsIHRoaXMubm9kZXMuYWN0aW9ucy5pbm5lckhUTUwgPSBcIlwiLCB0aGlzLnRvb2xzSW5zdGFuY2VzID0gLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKSwgQXJyYXkuZnJvbShvLnRvb2wuaW5saW5lVG9vbHMudmFsdWVzKCkpLmZvckVhY2goKGkpID0+IHtcbiAgICAgIHRoaXMuYWRkVG9vbChpKTtcbiAgICB9KSwgZSAmJiB0aGlzLkVkaXRvci5Db252ZXJzaW9uVG9vbGJhci5oYXNUb29scygpID8gYXdhaXQgdGhpcy5zZXRDb252ZXJzaW9uVG9nZ2xlckNvbnRlbnQoKSA6IHRoaXMubm9kZXMuY29udmVyc2lvblRvZ2dsZXIuaGlkZGVuID0gITAsIHRoaXMucmVjYWxjdWxhdGVXaWR0aCgpO1xuICB9XG4gIC8qKlxuICAgKiBBZGQgdG9vbCBidXR0b24gYW5kIGFjdGl2YXRlIGNsaWNrc1xuICAgKlxuICAgKiBAcGFyYW0ge0lubGluZVRvb2x9IHRvb2wgLSBJbmxpbmVUb29sIG9iamVjdFxuICAgKi9cbiAgYWRkVG9vbChlKSB7XG4gICAgY29uc3QgdCA9IGUuY3JlYXRlKCksIG8gPSB0LnJlbmRlcigpO1xuICAgIGlmICghbykge1xuICAgICAgVChcIlJlbmRlciBtZXRob2QgbXVzdCByZXR1cm4gYW4gaW5zdGFuY2Ugb2YgTm9kZVwiLCBcIndhcm5cIiwgZS5uYW1lKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKG8uZGF0YXNldC50b29sID0gZS5uYW1lLCB0aGlzLm5vZGVzLmJ1dHRvbnMuYXBwZW5kQ2hpbGQobyksIHRoaXMudG9vbHNJbnN0YW5jZXMuc2V0KGUubmFtZSwgdCksIE0odC5yZW5kZXJBY3Rpb25zKSkge1xuICAgICAgY29uc3QgYSA9IHQucmVuZGVyQWN0aW9ucygpO1xuICAgICAgdGhpcy5ub2Rlcy5hY3Rpb25zLmFwcGVuZENoaWxkKGEpO1xuICAgIH1cbiAgICB0aGlzLmxpc3RlbmVycy5vbihvLCBcImNsaWNrXCIsIChhKSA9PiB7XG4gICAgICB0aGlzLnRvb2xDbGlja2VkKHQpLCBhLnByZXZlbnREZWZhdWx0KCk7XG4gICAgfSk7XG4gICAgY29uc3QgaSA9IHRoaXMuZ2V0VG9vbFNob3J0Y3V0KGUubmFtZSk7XG4gICAgaWYgKGkpXG4gICAgICB0cnkge1xuICAgICAgICB0aGlzLmVuYWJsZVNob3J0Y3V0cyh0LCBpKTtcbiAgICAgIH0gY2F0Y2gge1xuICAgICAgfVxuICAgIGNvbnN0IG4gPSBjLm1ha2UoXCJkaXZcIiksIHIgPSB6LnQoXG4gICAgICBLLnRvb2xOYW1lcyxcbiAgICAgIGUudGl0bGUgfHwgcmUoZS5uYW1lKVxuICAgICk7XG4gICAgbi5hcHBlbmRDaGlsZChjLnRleHQocikpLCBpICYmIG4uYXBwZW5kQ2hpbGQoYy5tYWtlKFwiZGl2XCIsIHRoaXMuQ1NTLmlubGluZVRvb2xiYXJTaG9ydGN1dCwge1xuICAgICAgdGV4dENvbnRlbnQ6IHllKGkpXG4gICAgfSkpLCB0ZSgpID09PSAhMSAmJiBnZShvLCBuLCB7XG4gICAgICBwbGFjZW1lbnQ6IFwidG9wXCIsXG4gICAgICBoaWRpbmdEZWxheTogMTAwXG4gICAgfSksIHQuY2hlY2tTdGF0ZShiLmdldCgpKTtcbiAgfVxuICAvKipcbiAgICogR2V0IHNob3J0Y3V0IG5hbWUgZm9yIHRvb2xcbiAgICpcbiAgICogQHBhcmFtIHRvb2xOYW1lIOKAlCBUb29sIG5hbWVcbiAgICovXG4gIGdldFRvb2xTaG9ydGN1dChlKSB7XG4gICAgY29uc3QgeyBUb29sczogdCB9ID0gdGhpcy5FZGl0b3IsIG8gPSB0LmlubGluZVRvb2xzLmdldChlKSwgaSA9IHQuaW50ZXJuYWwuaW5saW5lVG9vbHM7XG4gICAgcmV0dXJuIEFycmF5LmZyb20oaS5rZXlzKCkpLmluY2x1ZGVzKGUpID8gdGhpcy5pbmxpbmVUb29sc1tlXVtFdC5TaG9ydGN1dF0gOiBvLnNob3J0Y3V0O1xuICB9XG4gIC8qKlxuICAgKiBFbmFibGUgVG9vbCBzaG9ydGN1dCB3aXRoIEVkaXRvciBTaG9ydGN1dHMgTW9kdWxlXG4gICAqXG4gICAqIEBwYXJhbSB7SW5saW5lVG9vbH0gdG9vbCAtIFRvb2wgaW5zdGFuY2VcbiAgICogQHBhcmFtIHtzdHJpbmd9IHNob3J0Y3V0IC0gc2hvcnRjdXQgYWNjb3JkaW5nIHRvIHRoZSBTaG9ydGN1dERhdGEgTW9kdWxlIGZvcm1hdFxuICAgKi9cbiAgZW5hYmxlU2hvcnRjdXRzKGUsIHQpIHtcbiAgICBhZS5hZGQoe1xuICAgICAgbmFtZTogdCxcbiAgICAgIGhhbmRsZXI6IChvKSA9PiB7XG4gICAgICAgIGNvbnN0IHsgY3VycmVudEJsb2NrOiBpIH0gPSB0aGlzLkVkaXRvci5CbG9ja01hbmFnZXI7XG4gICAgICAgIGkgJiYgaS50b29sLmVuYWJsZWRJbmxpbmVUb29scyAmJiAoby5wcmV2ZW50RGVmYXVsdCgpLCB0aGlzLnRvb2xDbGlja2VkKGUpKTtcbiAgICAgIH0sXG4gICAgICBvbjogdGhpcy5FZGl0b3IuVUkubm9kZXMucmVkYWN0b3JcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogSW5saW5lIFRvb2wgYnV0dG9uIGNsaWNrc1xuICAgKlxuICAgKiBAcGFyYW0ge0lubGluZVRvb2x9IHRvb2wgLSBUb29sJ3MgaW5zdGFuY2VcbiAgICovXG4gIHRvb2xDbGlja2VkKGUpIHtcbiAgICBjb25zdCB0ID0gYi5yYW5nZTtcbiAgICBlLnN1cnJvdW5kKHQpLCB0aGlzLmNoZWNrVG9vbHNTdGF0ZSgpLCBlLnJlbmRlckFjdGlvbnMgIT09IHZvaWQgMCAmJiB0aGlzLmZsaXBwZXIuZGVhY3RpdmF0ZSgpO1xuICB9XG4gIC8qKlxuICAgKiBDaGVjayBUb29sc2Agc3RhdGUgYnkgc2VsZWN0aW9uXG4gICAqL1xuICBjaGVja1Rvb2xzU3RhdGUoKSB7XG4gICAgdGhpcy50b29sc0luc3RhbmNlcy5mb3JFYWNoKChlKSA9PiB7XG4gICAgICBlLmNoZWNrU3RhdGUoYi5nZXQoKSk7XG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBpbmxpbmUgdG9vbHMgdG9vbHNcbiAgICogVG9vbHMgdGhhdCBoYXMgaXNJbmxpbmUgaXMgdHJ1ZVxuICAgKi9cbiAgZ2V0IGlubGluZVRvb2xzKCkge1xuICAgIGNvbnN0IGUgPSB7fTtcbiAgICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzLkVkaXRvci5Ub29scy5pbmxpbmVUb29scy5lbnRyaWVzKCkpLmZvckVhY2goKFt0LCBvXSkgPT4ge1xuICAgICAgZVt0XSA9IG8uY3JlYXRlKCk7XG4gICAgfSksIGU7XG4gIH1cbiAgLyoqXG4gICAqIEFsbG93IHRvIGxlYWYgYnV0dG9ucyBieSBhcnJvd3MgLyB0YWJcbiAgICogQnV0dG9ucyB3aWxsIGJlIGZpbGxlZCBvbiBvcGVuaW5nXG4gICAqL1xuICBlbmFibGVGbGlwcGVyKCkge1xuICAgIHRoaXMuZmxpcHBlciA9IG5ldyBxKHtcbiAgICAgIGZvY3VzZWRJdGVtQ2xhc3M6IHRoaXMuQ1NTLmZvY3VzZWRCdXR0b24sXG4gICAgICBhbGxvd2VkS2V5czogW1xuICAgICAgICBrLkVOVEVSLFxuICAgICAgICBrLlRBQlxuICAgICAgXVxuICAgIH0pO1xuICB9XG59XG5jbGFzcyBRbyBleHRlbmRzIHkge1xuICAvKipcbiAgICogQWxsIGtleWRvd25zIG9uIEJsb2NrXG4gICAqXG4gICAqIEBwYXJhbSB7S2V5Ym9hcmRFdmVudH0gZXZlbnQgLSBrZXlkb3duXG4gICAqL1xuICBrZXlkb3duKGUpIHtcbiAgICBzd2l0Y2ggKHRoaXMuYmVmb3JlS2V5ZG93blByb2Nlc3NpbmcoZSksIGUua2V5Q29kZSkge1xuICAgICAgY2FzZSBrLkJBQ0tTUEFDRTpcbiAgICAgICAgdGhpcy5iYWNrc3BhY2UoZSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBrLkRFTEVURTpcbiAgICAgICAgdGhpcy5kZWxldGUoZSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBrLkVOVEVSOlxuICAgICAgICB0aGlzLmVudGVyKGUpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2Ugay5ET1dOOlxuICAgICAgY2FzZSBrLlJJR0hUOlxuICAgICAgICB0aGlzLmFycm93UmlnaHRBbmREb3duKGUpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2Ugay5VUDpcbiAgICAgIGNhc2Ugay5MRUZUOlxuICAgICAgICB0aGlzLmFycm93TGVmdEFuZFVwKGUpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2Ugay5UQUI6XG4gICAgICAgIHRoaXMudGFiUHJlc3NlZChlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIGsuU0xBU0g6XG4gICAgICAgIGUuY3RybEtleSB8fCBlLm1ldGFLZXkgPyB0aGlzLmNvbW1hbmRTbGFzaFByZXNzZWQoKSA6IHRoaXMuc2xhc2hQcmVzc2VkKCk7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogRmlyZXMgb24ga2V5ZG93biBiZWZvcmUgZXZlbnQgcHJvY2Vzc2luZ1xuICAgKlxuICAgKiBAcGFyYW0ge0tleWJvYXJkRXZlbnR9IGV2ZW50IC0ga2V5ZG93blxuICAgKi9cbiAgYmVmb3JlS2V5ZG93blByb2Nlc3NpbmcoZSkge1xuICAgIHRoaXMubmVlZFRvb2xiYXJDbG9zaW5nKGUpICYmIGx0KGUua2V5Q29kZSkgJiYgKHRoaXMuRWRpdG9yLlRvb2xiYXIuY2xvc2UoKSwgdGhpcy5FZGl0b3IuQ29udmVyc2lvblRvb2xiYXIuY2xvc2UoKSwgZS5jdHJsS2V5IHx8IGUubWV0YUtleSB8fCBlLmFsdEtleSB8fCBlLnNoaWZ0S2V5IHx8IHRoaXMuRWRpdG9yLkJsb2NrU2VsZWN0aW9uLmNsZWFyU2VsZWN0aW9uKGUpKTtcbiAgfVxuICAvKipcbiAgICogS2V5IHVwIG9uIEJsb2NrOlxuICAgKiAtIHNob3dzIElubGluZSBUb29sYmFyIGlmIHNvbWV0aGluZyBzZWxlY3RlZFxuICAgKiAtIHNob3dzIGNvbnZlcnNpb24gdG9vbGJhciB3aXRoIDg1JSBvZiBibG9jayBzZWxlY3Rpb25cbiAgICpcbiAgICogQHBhcmFtIHtLZXlib2FyZEV2ZW50fSBldmVudCAtIGtleXVwIGV2ZW50XG4gICAqL1xuICBrZXl1cChlKSB7XG4gICAgZS5zaGlmdEtleSB8fCB0aGlzLkVkaXRvci5VSS5jaGVja0VtcHRpbmVzcygpO1xuICB9XG4gIC8qKlxuICAgKiBBZGQgZHJvcCB0YXJnZXQgc3R5bGVzXG4gICAqXG4gICAqIEBwYXJhbSB7RHJhZ0V2ZW50fSBldmVudCAtIGRyYWcgb3ZlciBldmVudFxuICAgKi9cbiAgZHJhZ092ZXIoZSkge1xuICAgIGNvbnN0IHQgPSB0aGlzLkVkaXRvci5CbG9ja01hbmFnZXIuZ2V0QmxvY2tCeUNoaWxkTm9kZShlLnRhcmdldCk7XG4gICAgdC5kcm9wVGFyZ2V0ID0gITA7XG4gIH1cbiAgLyoqXG4gICAqIFJlbW92ZSBkcm9wIHRhcmdldCBzdHlsZVxuICAgKlxuICAgKiBAcGFyYW0ge0RyYWdFdmVudH0gZXZlbnQgLSBkcmFnIGxlYXZlIGV2ZW50XG4gICAqL1xuICBkcmFnTGVhdmUoZSkge1xuICAgIGNvbnN0IHQgPSB0aGlzLkVkaXRvci5CbG9ja01hbmFnZXIuZ2V0QmxvY2tCeUNoaWxkTm9kZShlLnRhcmdldCk7XG4gICAgdC5kcm9wVGFyZ2V0ID0gITE7XG4gIH1cbiAgLyoqXG4gICAqIENvcHlpbmcgc2VsZWN0ZWQgYmxvY2tzXG4gICAqIEJlZm9yZSBwdXR0aW5nIHRvIHRoZSBjbGlwYm9hcmQgd2Ugc2FuaXRpemUgYWxsIGJsb2NrcyBhbmQgdGhlbiBjb3B5IHRvIHRoZSBjbGlwYm9hcmRcbiAgICpcbiAgICogQHBhcmFtIHtDbGlwYm9hcmRFdmVudH0gZXZlbnQgLSBjbGlwYm9hcmQgZXZlbnRcbiAgICovXG4gIGhhbmRsZUNvbW1hbmRDKGUpIHtcbiAgICBjb25zdCB7IEJsb2NrU2VsZWN0aW9uOiB0IH0gPSB0aGlzLkVkaXRvcjtcbiAgICB0LmFueUJsb2NrU2VsZWN0ZWQgJiYgdC5jb3B5U2VsZWN0ZWRCbG9ja3MoZSk7XG4gIH1cbiAgLyoqXG4gICAqIENvcHkgYW5kIERlbGV0ZSBzZWxlY3RlZCBCbG9ja3NcbiAgICpcbiAgICogQHBhcmFtIHtDbGlwYm9hcmRFdmVudH0gZXZlbnQgLSBjbGlwYm9hcmQgZXZlbnRcbiAgICovXG4gIGhhbmRsZUNvbW1hbmRYKGUpIHtcbiAgICBjb25zdCB7IEJsb2NrU2VsZWN0aW9uOiB0LCBCbG9ja01hbmFnZXI6IG8sIENhcmV0OiBpIH0gPSB0aGlzLkVkaXRvcjtcbiAgICB0LmFueUJsb2NrU2VsZWN0ZWQgJiYgdC5jb3B5U2VsZWN0ZWRCbG9ja3MoZSkudGhlbigoKSA9PiB7XG4gICAgICBjb25zdCBuID0gby5yZW1vdmVTZWxlY3RlZEJsb2NrcygpLCByID0gby5pbnNlcnREZWZhdWx0QmxvY2tBdEluZGV4KG4sICEwKTtcbiAgICAgIGkuc2V0VG9CbG9jayhyLCBpLnBvc2l0aW9ucy5TVEFSVCksIHQuY2xlYXJTZWxlY3Rpb24oZSk7XG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIFRhYiBwcmVzc2VkIGluc2lkZSBhIEJsb2NrLlxuICAgKlxuICAgKiBAcGFyYW0ge0tleWJvYXJkRXZlbnR9IGV2ZW50IC0ga2V5ZG93blxuICAgKi9cbiAgdGFiUHJlc3NlZChlKSB7XG4gICAgY29uc3QgeyBJbmxpbmVUb29sYmFyOiB0LCBDb252ZXJzaW9uVG9vbGJhcjogbywgQ2FyZXQ6IGkgfSA9IHRoaXMuRWRpdG9yO1xuICAgIGlmIChvLm9wZW5lZCB8fCB0Lm9wZW5lZClcbiAgICAgIHJldHVybjtcbiAgICAoZS5zaGlmdEtleSA/IGkubmF2aWdhdGVQcmV2aW91cyghMCkgOiBpLm5hdmlnYXRlTmV4dCghMCkpICYmIGUucHJldmVudERlZmF1bHQoKTtcbiAgfVxuICAvKipcbiAgICogJy8nICsgJ2NvbW1hbmQnIGtleWRvd24gaW5zaWRlIGEgQmxvY2tcbiAgICovXG4gIGNvbW1hbmRTbGFzaFByZXNzZWQoKSB7XG4gICAgdGhpcy5FZGl0b3IuQmxvY2tTZWxlY3Rpb24uc2VsZWN0ZWRCbG9ja3MubGVuZ3RoID4gMSB8fCB0aGlzLmFjdGl2YXRlQmxvY2tTZXR0aW5ncygpO1xuICB9XG4gIC8qKlxuICAgKiAnLycga2V5ZG93biBpbnNpZGUgYSBCbG9ja1xuICAgKi9cbiAgc2xhc2hQcmVzc2VkKCkge1xuICAgIHRoaXMuRWRpdG9yLkJsb2NrTWFuYWdlci5jdXJyZW50QmxvY2suaXNFbXB0eSAmJiB0aGlzLmFjdGl2YXRlVG9vbGJveCgpO1xuICB9XG4gIC8qKlxuICAgKiBFTlRFUiBwcmVzc2VkIG9uIGJsb2NrXG4gICAqXG4gICAqIEBwYXJhbSB7S2V5Ym9hcmRFdmVudH0gZXZlbnQgLSBrZXlkb3duXG4gICAqL1xuICBlbnRlcihlKSB7XG4gICAgY29uc3QgeyBCbG9ja01hbmFnZXI6IHQsIFVJOiBvIH0gPSB0aGlzLkVkaXRvcjtcbiAgICBpZiAodC5jdXJyZW50QmxvY2sudG9vbC5pc0xpbmVCcmVha3NFbmFibGVkIHx8IG8uc29tZVRvb2xiYXJPcGVuZWQgJiYgby5zb21lRmxpcHBlckJ1dHRvbkZvY3VzZWQgfHwgZS5zaGlmdEtleSlcbiAgICAgIHJldHVybjtcbiAgICBsZXQgbiA9IHRoaXMuRWRpdG9yLkJsb2NrTWFuYWdlci5jdXJyZW50QmxvY2s7XG4gICAgdGhpcy5FZGl0b3IuQ2FyZXQuaXNBdFN0YXJ0ICYmICF0aGlzLkVkaXRvci5CbG9ja01hbmFnZXIuY3VycmVudEJsb2NrLmhhc01lZGlhID8gdGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLmluc2VydERlZmF1bHRCbG9ja0F0SW5kZXgodGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLmN1cnJlbnRCbG9ja0luZGV4KSA6IHRoaXMuRWRpdG9yLkNhcmV0LmlzQXRFbmQgPyBuID0gdGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLmluc2VydERlZmF1bHRCbG9ja0F0SW5kZXgodGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLmN1cnJlbnRCbG9ja0luZGV4ICsgMSkgOiBuID0gdGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLnNwbGl0KCksIHRoaXMuRWRpdG9yLkNhcmV0LnNldFRvQmxvY2sobiksIHRoaXMuRWRpdG9yLlRvb2xiYXIubW92ZUFuZE9wZW4obiksIGUucHJldmVudERlZmF1bHQoKTtcbiAgfVxuICAvKipcbiAgICogSGFuZGxlIGJhY2tzcGFjZSBrZXlkb3duIG9uIEJsb2NrXG4gICAqXG4gICAqIEBwYXJhbSB7S2V5Ym9hcmRFdmVudH0gZXZlbnQgLSBrZXlkb3duXG4gICAqL1xuICBiYWNrc3BhY2UoZSkge1xuICAgIGNvbnN0IHsgQmxvY2tNYW5hZ2VyOiB0LCBDYXJldDogbyB9ID0gdGhpcy5FZGl0b3IsIHsgY3VycmVudEJsb2NrOiBpLCBwcmV2aW91c0Jsb2NrOiBuIH0gPSB0O1xuICAgIGlmICghYi5pc0NvbGxhcHNlZCB8fCAhby5pc0F0U3RhcnQpXG4gICAgICByZXR1cm47XG4gICAgaWYgKGUucHJldmVudERlZmF1bHQoKSwgdGhpcy5FZGl0b3IuVG9vbGJhci5jbG9zZSgpLCAhKGkuY3VycmVudElucHV0ID09PSBpLmZpcnN0SW5wdXQpKSB7XG4gICAgICBvLm5hdmlnYXRlUHJldmlvdXMoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKG4gPT09IG51bGwpXG4gICAgICByZXR1cm47XG4gICAgaWYgKG4uaXNFbXB0eSkge1xuICAgICAgdC5yZW1vdmVCbG9jayhuKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGkuaXNFbXB0eSkge1xuICAgICAgdC5yZW1vdmVCbG9jayhpKTtcbiAgICAgIGNvbnN0IGwgPSB0LmN1cnJlbnRCbG9jaztcbiAgICAgIG8uc2V0VG9CbG9jayhsLCBvLnBvc2l0aW9ucy5FTkQpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBvdChpLCBuKSA/IHRoaXMubWVyZ2VCbG9ja3MobiwgaSkgOiBvLnNldFRvQmxvY2sobiwgby5wb3NpdGlvbnMuRU5EKTtcbiAgfVxuICAvKipcbiAgICogSGFuZGxlcyBkZWxldGUga2V5ZG93biBvbiBCbG9ja1xuICAgKiBSZW1vdmVzIGNoYXIgYWZ0ZXIgdGhlIGNhcmV0LlxuICAgKiBJZiBjYXJldCBpcyBhdCB0aGUgZW5kIG9mIHRoZSBibG9jaywgbWVyZ2UgbmV4dCBibG9jayB3aXRoIGN1cnJlbnRcbiAgICpcbiAgICogQHBhcmFtIHtLZXlib2FyZEV2ZW50fSBldmVudCAtIGtleWRvd25cbiAgICovXG4gIGRlbGV0ZShlKSB7XG4gICAgY29uc3QgeyBCbG9ja01hbmFnZXI6IHQsIENhcmV0OiBvIH0gPSB0aGlzLkVkaXRvciwgeyBjdXJyZW50QmxvY2s6IGksIG5leHRCbG9jazogbiB9ID0gdDtcbiAgICBpZiAoIWIuaXNDb2xsYXBzZWQgfHwgIW8uaXNBdEVuZClcbiAgICAgIHJldHVybjtcbiAgICBpZiAoZS5wcmV2ZW50RGVmYXVsdCgpLCB0aGlzLkVkaXRvci5Ub29sYmFyLmNsb3NlKCksICEoaS5jdXJyZW50SW5wdXQgPT09IGkubGFzdElucHV0KSkge1xuICAgICAgby5uYXZpZ2F0ZU5leHQoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKG4gPT09IG51bGwpXG4gICAgICByZXR1cm47XG4gICAgaWYgKG4uaXNFbXB0eSkge1xuICAgICAgdC5yZW1vdmVCbG9jayhuKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGkuaXNFbXB0eSkge1xuICAgICAgdC5yZW1vdmVCbG9jayhpKSwgby5zZXRUb0Jsb2NrKG4sIG8ucG9zaXRpb25zLlNUQVJUKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgb3QoaSwgbikgPyB0aGlzLm1lcmdlQmxvY2tzKGksIG4pIDogby5zZXRUb0Jsb2NrKG4sIG8ucG9zaXRpb25zLlNUQVJUKTtcbiAgfVxuICAvKipcbiAgICogTWVyZ2UgcGFzc2VkIEJsb2Nrc1xuICAgKlxuICAgKiBAcGFyYW0gdGFyZ2V0QmxvY2sgLSB0byB3aGljaCBCbG9jayB3ZSB3YW50IHRvIG1lcmdlXG4gICAqIEBwYXJhbSBibG9ja1RvTWVyZ2UgLSB3aGF0IEJsb2NrIHdlIHdhbnQgdG8gbWVyZ2VcbiAgICovXG4gIG1lcmdlQmxvY2tzKGUsIHQpIHtcbiAgICBjb25zdCB7IEJsb2NrTWFuYWdlcjogbywgQ2FyZXQ6IGksIFRvb2xiYXI6IG4gfSA9IHRoaXMuRWRpdG9yO1xuICAgIGkuY3JlYXRlU2hhZG93KGUucGx1Z2luc0NvbnRlbnQpLCBvLm1lcmdlQmxvY2tzKGUsIHQpLnRoZW4oKCkgPT4ge1xuICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgIGkucmVzdG9yZUNhcmV0KGUucGx1Z2luc0NvbnRlbnQpLCBlLnBsdWdpbnNDb250ZW50Lm5vcm1hbGl6ZSgpLCBuLmNsb3NlKCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogSGFuZGxlIHJpZ2h0IGFuZCBkb3duIGtleWJvYXJkIGtleXNcbiAgICpcbiAgICogQHBhcmFtIHtLZXlib2FyZEV2ZW50fSBldmVudCAtIGtleWJvYXJkIGV2ZW50XG4gICAqL1xuICBhcnJvd1JpZ2h0QW5kRG93bihlKSB7XG4gICAgY29uc3QgdCA9IHEudXNlZEtleXMuaW5jbHVkZXMoZS5rZXlDb2RlKSAmJiAoIWUuc2hpZnRLZXkgfHwgZS5rZXlDb2RlID09PSBrLlRBQik7XG4gICAgaWYgKHRoaXMuRWRpdG9yLlVJLnNvbWVUb29sYmFyT3BlbmVkICYmIHQpXG4gICAgICByZXR1cm47XG4gICAgdGhpcy5FZGl0b3IuVG9vbGJhci5jbG9zZSgpO1xuICAgIGNvbnN0IG8gPSB0aGlzLkVkaXRvci5DYXJldC5pc0F0RW5kIHx8IHRoaXMuRWRpdG9yLkJsb2NrU2VsZWN0aW9uLmFueUJsb2NrU2VsZWN0ZWQ7XG4gICAgaWYgKGUuc2hpZnRLZXkgJiYgZS5rZXlDb2RlID09PSBrLkRPV04gJiYgbykge1xuICAgICAgdGhpcy5FZGl0b3IuQ3Jvc3NCbG9ja1NlbGVjdGlvbi50b2dnbGVCbG9ja1NlbGVjdGVkU3RhdGUoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGUua2V5Q29kZSA9PT0gay5ET1dOIHx8IGUua2V5Q29kZSA9PT0gay5SSUdIVCAmJiAhdGhpcy5pc1J0bCA/IHRoaXMuRWRpdG9yLkNhcmV0Lm5hdmlnYXRlTmV4dCgpIDogdGhpcy5FZGl0b3IuQ2FyZXQubmF2aWdhdGVQcmV2aW91cygpKSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHhlKCgpID0+IHtcbiAgICAgIHRoaXMuRWRpdG9yLkJsb2NrTWFuYWdlci5jdXJyZW50QmxvY2sgJiYgdGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLmN1cnJlbnRCbG9jay51cGRhdGVDdXJyZW50SW5wdXQoKTtcbiAgICB9LCAyMCkoKSwgdGhpcy5FZGl0b3IuQmxvY2tTZWxlY3Rpb24uY2xlYXJTZWxlY3Rpb24oZSk7XG4gIH1cbiAgLyoqXG4gICAqIEhhbmRsZSBsZWZ0IGFuZCB1cCBrZXlib2FyZCBrZXlzXG4gICAqXG4gICAqIEBwYXJhbSB7S2V5Ym9hcmRFdmVudH0gZXZlbnQgLSBrZXlib2FyZCBldmVudFxuICAgKi9cbiAgYXJyb3dMZWZ0QW5kVXAoZSkge1xuICAgIGlmICh0aGlzLkVkaXRvci5VSS5zb21lVG9vbGJhck9wZW5lZCkge1xuICAgICAgaWYgKHEudXNlZEtleXMuaW5jbHVkZXMoZS5rZXlDb2RlKSAmJiAoIWUuc2hpZnRLZXkgfHwgZS5rZXlDb2RlID09PSBrLlRBQikpXG4gICAgICAgIHJldHVybjtcbiAgICAgIHRoaXMuRWRpdG9yLlVJLmNsb3NlQWxsVG9vbGJhcnMoKTtcbiAgICB9XG4gICAgdGhpcy5FZGl0b3IuVG9vbGJhci5jbG9zZSgpO1xuICAgIGNvbnN0IHQgPSB0aGlzLkVkaXRvci5DYXJldC5pc0F0U3RhcnQgfHwgdGhpcy5FZGl0b3IuQmxvY2tTZWxlY3Rpb24uYW55QmxvY2tTZWxlY3RlZDtcbiAgICBpZiAoZS5zaGlmdEtleSAmJiBlLmtleUNvZGUgPT09IGsuVVAgJiYgdCkge1xuICAgICAgdGhpcy5FZGl0b3IuQ3Jvc3NCbG9ja1NlbGVjdGlvbi50b2dnbGVCbG9ja1NlbGVjdGVkU3RhdGUoITEpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoZS5rZXlDb2RlID09PSBrLlVQIHx8IGUua2V5Q29kZSA9PT0gay5MRUZUICYmICF0aGlzLmlzUnRsID8gdGhpcy5FZGl0b3IuQ2FyZXQubmF2aWdhdGVQcmV2aW91cygpIDogdGhpcy5FZGl0b3IuQ2FyZXQubmF2aWdhdGVOZXh0KCkpIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgeGUoKCkgPT4ge1xuICAgICAgdGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLmN1cnJlbnRCbG9jayAmJiB0aGlzLkVkaXRvci5CbG9ja01hbmFnZXIuY3VycmVudEJsb2NrLnVwZGF0ZUN1cnJlbnRJbnB1dCgpO1xuICAgIH0sIDIwKSgpLCB0aGlzLkVkaXRvci5CbG9ja1NlbGVjdGlvbi5jbGVhclNlbGVjdGlvbihlKTtcbiAgfVxuICAvKipcbiAgICogQ2FzZXMgd2hlbiB3ZSBuZWVkIHRvIGNsb3NlIFRvb2xiYXJcbiAgICpcbiAgICogQHBhcmFtIHtLZXlib2FyZEV2ZW50fSBldmVudCAtIGtleWJvYXJkIGV2ZW50XG4gICAqL1xuICBuZWVkVG9vbGJhckNsb3NpbmcoZSkge1xuICAgIGNvbnN0IHQgPSBlLmtleUNvZGUgPT09IGsuRU5URVIgJiYgdGhpcy5FZGl0b3IuVG9vbGJhci50b29sYm94Lm9wZW5lZCwgbyA9IGUua2V5Q29kZSA9PT0gay5FTlRFUiAmJiB0aGlzLkVkaXRvci5CbG9ja1NldHRpbmdzLm9wZW5lZCwgaSA9IGUua2V5Q29kZSA9PT0gay5FTlRFUiAmJiB0aGlzLkVkaXRvci5JbmxpbmVUb29sYmFyLm9wZW5lZCwgbiA9IGUua2V5Q29kZSA9PT0gay5FTlRFUiAmJiB0aGlzLkVkaXRvci5Db252ZXJzaW9uVG9vbGJhci5vcGVuZWQsIHIgPSBlLmtleUNvZGUgPT09IGsuVEFCO1xuICAgIHJldHVybiAhKGUuc2hpZnRLZXkgfHwgciB8fCB0IHx8IG8gfHwgaSB8fCBuKTtcbiAgfVxuICAvKipcbiAgICogSWYgVG9vbGJveCBpcyBub3Qgb3BlbiwgdGhlbiBqdXN0IG9wZW4gaXQgYW5kIHNob3cgcGx1cyBidXR0b25cbiAgICovXG4gIGFjdGl2YXRlVG9vbGJveCgpIHtcbiAgICB0aGlzLkVkaXRvci5Ub29sYmFyLm9wZW5lZCB8fCB0aGlzLkVkaXRvci5Ub29sYmFyLm1vdmVBbmRPcGVuKCksIHRoaXMuRWRpdG9yLlRvb2xiYXIudG9vbGJveC5vcGVuKCk7XG4gIH1cbiAgLyoqXG4gICAqIE9wZW4gVG9vbGJhciBhbmQgc2hvdyBCbG9ja1NldHRpbmdzIGJlZm9yZSBmbGlwcGluZyBUb29sc1xuICAgKi9cbiAgYWN0aXZhdGVCbG9ja1NldHRpbmdzKCkge1xuICAgIHRoaXMuRWRpdG9yLlRvb2xiYXIub3BlbmVkIHx8IHRoaXMuRWRpdG9yLlRvb2xiYXIubW92ZUFuZE9wZW4oKSwgdGhpcy5FZGl0b3IuQmxvY2tTZXR0aW5ncy5vcGVuZWQgfHwgdGhpcy5FZGl0b3IuQmxvY2tTZXR0aW5ncy5vcGVuKCk7XG4gIH1cbn1cbmNsYXNzIFNlIHtcbiAgLyoqXG4gICAqIEBjbGFzc1xuICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSB3b3JraW5nQXJlYSDigJQgZWRpdG9yYHMgd29ya2luZyBub2RlXG4gICAqL1xuICBjb25zdHJ1Y3RvcihlKSB7XG4gICAgdGhpcy5ibG9ja3MgPSBbXSwgdGhpcy53b3JraW5nQXJlYSA9IGU7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBsZW5ndGggb2YgQmxvY2sgaW5zdGFuY2VzIGFycmF5XG4gICAqXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9XG4gICAqL1xuICBnZXQgbGVuZ3RoKCkge1xuICAgIHJldHVybiB0aGlzLmJsb2Nrcy5sZW5ndGg7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBCbG9jayBpbnN0YW5jZXMgYXJyYXlcbiAgICpcbiAgICogQHJldHVybnMge0Jsb2NrW119XG4gICAqL1xuICBnZXQgYXJyYXkoKSB7XG4gICAgcmV0dXJuIHRoaXMuYmxvY2tzO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgYmxvY2tzIGh0bWwgZWxlbWVudHMgYXJyYXlcbiAgICpcbiAgICogQHJldHVybnMge0hUTUxFbGVtZW50W119XG4gICAqL1xuICBnZXQgbm9kZXMoKSB7XG4gICAgcmV0dXJuIGN0KHRoaXMud29ya2luZ0FyZWEuY2hpbGRyZW4pO1xuICB9XG4gIC8qKlxuICAgKiBQcm94eSB0cmFwIHRvIGltcGxlbWVudCBhcnJheS1saWtlIHNldHRlclxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiBibG9ja3NbMF0gPSBuZXcgQmxvY2soLi4uKVxuICAgKiBAcGFyYW0ge0Jsb2Nrc30gaW5zdGFuY2Ug4oCUIEJsb2NrcyBpbnN0YW5jZVxuICAgKiBAcGFyYW0ge1Byb3BlcnR5S2V5fSBwcm9wZXJ0eSDigJQgYmxvY2sgaW5kZXggb3IgYW55IEJsb2NrcyBjbGFzcyBwcm9wZXJ0eSBrZXkgdG8gc2V0XG4gICAqIEBwYXJhbSB7QmxvY2t9IHZhbHVlIOKAlCB2YWx1ZSB0byBzZXRcbiAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAqL1xuICBzdGF0aWMgc2V0KGUsIHQsIG8pIHtcbiAgICByZXR1cm4gaXNOYU4oTnVtYmVyKHQpKSA/IChSZWZsZWN0LnNldChlLCB0LCBvKSwgITApIDogKGUuaW5zZXJ0KCt0LCBvKSwgITApO1xuICB9XG4gIC8qKlxuICAgKiBQcm94eSB0cmFwIHRvIGltcGxlbWVudCBhcnJheS1saWtlIGdldHRlclxuICAgKlxuICAgKiBAcGFyYW0ge0Jsb2Nrc30gaW5zdGFuY2Ug4oCUIEJsb2NrcyBpbnN0YW5jZVxuICAgKiBAcGFyYW0ge1Byb3BlcnR5S2V5fSBwcm9wZXJ0eSDigJQgQmxvY2tzIGNsYXNzIHByb3BlcnR5IGtleVxuICAgKiBAcmV0dXJucyB7QmxvY2t8Kn1cbiAgICovXG4gIHN0YXRpYyBnZXQoZSwgdCkge1xuICAgIHJldHVybiBpc05hTihOdW1iZXIodCkpID8gUmVmbGVjdC5nZXQoZSwgdCkgOiBlLmdldCgrdCk7XG4gIH1cbiAgLyoqXG4gICAqIFB1c2ggbmV3IEJsb2NrIHRvIHRoZSBibG9ja3MgYXJyYXkgYW5kIGFwcGVuZCBpdCB0byB3b3JraW5nIGFyZWFcbiAgICpcbiAgICogQHBhcmFtIHtCbG9ja30gYmxvY2sgLSBCbG9jayB0byBhZGRcbiAgICovXG4gIHB1c2goZSkge1xuICAgIHRoaXMuYmxvY2tzLnB1c2goZSksIHRoaXMuaW5zZXJ0VG9ET00oZSk7XG4gIH1cbiAgLyoqXG4gICAqIFN3YXBzIGJsb2NrcyB3aXRoIGluZGV4ZXMgZmlyc3QgYW5kIHNlY29uZFxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gZmlyc3QgLSBmaXJzdCBibG9jayBpbmRleFxuICAgKiBAcGFyYW0ge251bWJlcn0gc2Vjb25kIC0gc2Vjb25kIGJsb2NrIGluZGV4XG4gICAqIEBkZXByZWNhdGVkIOKAlCB1c2UgJ21vdmUnIGluc3RlYWRcbiAgICovXG4gIHN3YXAoZSwgdCkge1xuICAgIGNvbnN0IG8gPSB0aGlzLmJsb2Nrc1t0XTtcbiAgICBjLnN3YXAodGhpcy5ibG9ja3NbZV0uaG9sZGVyLCBvLmhvbGRlciksIHRoaXMuYmxvY2tzW3RdID0gdGhpcy5ibG9ja3NbZV0sIHRoaXMuYmxvY2tzW2VdID0gbztcbiAgfVxuICAvKipcbiAgICogTW92ZSBhIGJsb2NrIGZyb20gb25lIHRvIGFub3RoZXIgaW5kZXhcbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IHRvSW5kZXggLSBuZXcgaW5kZXggb2YgdGhlIGJsb2NrXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggLSBibG9jayB0byBtb3ZlXG4gICAqL1xuICBtb3ZlKGUsIHQpIHtcbiAgICBjb25zdCBvID0gdGhpcy5ibG9ja3Muc3BsaWNlKHQsIDEpWzBdLCBpID0gZSAtIDEsIG4gPSBNYXRoLm1heCgwLCBpKSwgciA9IHRoaXMuYmxvY2tzW25dO1xuICAgIGUgPiAwID8gdGhpcy5pbnNlcnRUb0RPTShvLCBcImFmdGVyZW5kXCIsIHIpIDogdGhpcy5pbnNlcnRUb0RPTShvLCBcImJlZm9yZWJlZ2luXCIsIHIpLCB0aGlzLmJsb2Nrcy5zcGxpY2UoZSwgMCwgbyk7XG4gICAgY29uc3QgYSA9IHRoaXMuY29tcG9zZUJsb2NrRXZlbnQoXCJtb3ZlXCIsIHtcbiAgICAgIGZyb21JbmRleDogdCxcbiAgICAgIHRvSW5kZXg6IGVcbiAgICB9KTtcbiAgICBvLmNhbGwoWC5NT1ZFRCwgYSk7XG4gIH1cbiAgLyoqXG4gICAqIEluc2VydCBuZXcgQmxvY2sgYXQgcGFzc2VkIGluZGV4XG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCDigJQgaW5kZXggdG8gaW5zZXJ0IEJsb2NrXG4gICAqIEBwYXJhbSB7QmxvY2t9IGJsb2NrIOKAlCBCbG9jayB0byBpbnNlcnRcbiAgICogQHBhcmFtIHtib29sZWFufSByZXBsYWNlIOKAlCBpdCB0cnVlLCByZXBsYWNlIGJsb2NrIG9uIGdpdmVuIGluZGV4XG4gICAqL1xuICBpbnNlcnQoZSwgdCwgbyA9ICExKSB7XG4gICAgaWYgKCF0aGlzLmxlbmd0aCkge1xuICAgICAgdGhpcy5wdXNoKHQpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBlID4gdGhpcy5sZW5ndGggJiYgKGUgPSB0aGlzLmxlbmd0aCksIG8gJiYgKHRoaXMuYmxvY2tzW2VdLmhvbGRlci5yZW1vdmUoKSwgdGhpcy5ibG9ja3NbZV0uY2FsbChYLlJFTU9WRUQpKTtcbiAgICBjb25zdCBpID0gbyA/IDEgOiAwO1xuICAgIGlmICh0aGlzLmJsb2Nrcy5zcGxpY2UoZSwgaSwgdCksIGUgPiAwKSB7XG4gICAgICBjb25zdCBuID0gdGhpcy5ibG9ja3NbZSAtIDFdO1xuICAgICAgdGhpcy5pbnNlcnRUb0RPTSh0LCBcImFmdGVyZW5kXCIsIG4pO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBuID0gdGhpcy5ibG9ja3NbZSArIDFdO1xuICAgICAgbiA/IHRoaXMuaW5zZXJ0VG9ET00odCwgXCJiZWZvcmViZWdpblwiLCBuKSA6IHRoaXMuaW5zZXJ0VG9ET00odCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBSZXBsYWNlcyBibG9jayB1bmRlciBwYXNzZWQgaW5kZXggd2l0aCBwYXNzZWQgYmxvY2tcbiAgICpcbiAgICogQHBhcmFtIGluZGV4IC0gaW5kZXggb2YgZXhpc3RlZCBibG9ja1xuICAgKiBAcGFyYW0gYmxvY2sgLSBuZXcgYmxvY2tcbiAgICovXG4gIHJlcGxhY2UoZSwgdCkge1xuICAgIGlmICh0aGlzLmJsb2Nrc1tlXSA9PT0gdm9pZCAwKVxuICAgICAgdGhyb3cgRXJyb3IoXCJJbmNvcnJlY3QgaW5kZXhcIik7XG4gICAgdGhpcy5ibG9ja3NbZV0uaG9sZGVyLnJlcGxhY2VXaXRoKHQuaG9sZGVyKSwgdGhpcy5ibG9ja3NbZV0gPSB0O1xuICB9XG4gIC8qKlxuICAgKiBJbnNlcnRzIHNldmVyYWwgYmxvY2tzIGF0IG9uY2VcbiAgICpcbiAgICogQHBhcmFtIGJsb2NrcyAtIGJsb2NrcyB0byBpbnNlcnRcbiAgICogQHBhcmFtIGluZGV4IC0gaW5kZXggdG8gaW5zZXJ0IGJsb2NrcyBhdFxuICAgKi9cbiAgaW5zZXJ0TWFueShlLCB0KSB7XG4gICAgY29uc3QgbyA9IG5ldyBEb2N1bWVudEZyYWdtZW50KCk7XG4gICAgZm9yIChjb25zdCBpIG9mIGUpXG4gICAgICBvLmFwcGVuZENoaWxkKGkuaG9sZGVyKTtcbiAgICBpZiAodGhpcy5sZW5ndGggPiAwKSB7XG4gICAgICBpZiAodCA+IDApIHtcbiAgICAgICAgY29uc3QgaSA9IE1hdGgubWluKHQgLSAxLCB0aGlzLmxlbmd0aCAtIDEpO1xuICAgICAgICB0aGlzLmJsb2Nrc1tpXS5ob2xkZXIuYWZ0ZXIobyk7XG4gICAgICB9IGVsc2VcbiAgICAgICAgdCA9PT0gMCAmJiB0aGlzLndvcmtpbmdBcmVhLnByZXBlbmQobyk7XG4gICAgICB0aGlzLmJsb2Nrcy5zcGxpY2UodCwgMCwgLi4uZSk7XG4gICAgfSBlbHNlXG4gICAgICB0aGlzLmJsb2Nrcy5wdXNoKC4uLmUpLCB0aGlzLndvcmtpbmdBcmVhLmFwcGVuZENoaWxkKG8pO1xuICAgIGUuZm9yRWFjaCgoaSkgPT4gaS5jYWxsKFguUkVOREVSRUQpKTtcbiAgfVxuICAvKipcbiAgICogUmVtb3ZlIGJsb2NrXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCAtIGluZGV4IG9mIEJsb2NrIHRvIHJlbW92ZVxuICAgKi9cbiAgcmVtb3ZlKGUpIHtcbiAgICBpc05hTihlKSAmJiAoZSA9IHRoaXMubGVuZ3RoIC0gMSksIHRoaXMuYmxvY2tzW2VdLmhvbGRlci5yZW1vdmUoKSwgdGhpcy5ibG9ja3NbZV0uY2FsbChYLlJFTU9WRUQpLCB0aGlzLmJsb2Nrcy5zcGxpY2UoZSwgMSk7XG4gIH1cbiAgLyoqXG4gICAqIFJlbW92ZSBhbGwgYmxvY2tzXG4gICAqL1xuICByZW1vdmVBbGwoKSB7XG4gICAgdGhpcy53b3JraW5nQXJlYS5pbm5lckhUTUwgPSBcIlwiLCB0aGlzLmJsb2Nrcy5mb3JFYWNoKChlKSA9PiBlLmNhbGwoWC5SRU1PVkVEKSksIHRoaXMuYmxvY2tzLmxlbmd0aCA9IDA7XG4gIH1cbiAgLyoqXG4gICAqIEluc2VydCBCbG9jayBhZnRlciBwYXNzZWQgdGFyZ2V0XG4gICAqXG4gICAqIEB0b2RvIGRlY2lkZSBpZiB0aGlzIG1ldGhvZCBpcyBuZWNlc3NhcnlcbiAgICogQHBhcmFtIHtCbG9ja30gdGFyZ2V0QmxvY2sg4oCUIHRhcmdldCBhZnRlciB3aGljaCBCbG9jayBzaG91bGQgYmUgaW5zZXJ0ZWRcbiAgICogQHBhcmFtIHtCbG9ja30gbmV3QmxvY2sg4oCUIEJsb2NrIHRvIGluc2VydFxuICAgKi9cbiAgaW5zZXJ0QWZ0ZXIoZSwgdCkge1xuICAgIGNvbnN0IG8gPSB0aGlzLmJsb2Nrcy5pbmRleE9mKGUpO1xuICAgIHRoaXMuaW5zZXJ0KG8gKyAxLCB0KTtcbiAgfVxuICAvKipcbiAgICogR2V0IEJsb2NrIGJ5IGluZGV4XG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCDigJQgQmxvY2sgaW5kZXhcbiAgICogQHJldHVybnMge0Jsb2NrfVxuICAgKi9cbiAgZ2V0KGUpIHtcbiAgICByZXR1cm4gdGhpcy5ibG9ja3NbZV07XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybiBpbmRleCBvZiBwYXNzZWQgQmxvY2tcbiAgICpcbiAgICogQHBhcmFtIHtCbG9ja30gYmxvY2sgLSBCbG9jayB0byBmaW5kXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9XG4gICAqL1xuICBpbmRleE9mKGUpIHtcbiAgICByZXR1cm4gdGhpcy5ibG9ja3MuaW5kZXhPZihlKTtcbiAgfVxuICAvKipcbiAgICogSW5zZXJ0IG5ldyBCbG9jayBpbnRvIERPTVxuICAgKlxuICAgKiBAcGFyYW0ge0Jsb2NrfSBibG9jayAtIEJsb2NrIHRvIGluc2VydFxuICAgKiBAcGFyYW0ge0luc2VydFBvc2l0aW9ufSBwb3NpdGlvbiDigJQgaW5zZXJ0IHBvc2l0aW9uIChpZiBzZXQsIHdpbGwgdXNlIGluc2VydEFkamFjZW50RWxlbWVudClcbiAgICogQHBhcmFtIHtCbG9ja30gdGFyZ2V0IOKAlCBCbG9jayByZWxhdGVkIHRvIHBvc2l0aW9uXG4gICAqL1xuICBpbnNlcnRUb0RPTShlLCB0LCBvKSB7XG4gICAgdCA/IG8uaG9sZGVyLmluc2VydEFkamFjZW50RWxlbWVudCh0LCBlLmhvbGRlcikgOiB0aGlzLndvcmtpbmdBcmVhLmFwcGVuZENoaWxkKGUuaG9sZGVyKSwgZS5jYWxsKFguUkVOREVSRUQpO1xuICB9XG4gIC8qKlxuICAgKiBDb21wb3NlcyBCbG9jayBldmVudCB3aXRoIHBhc3NlZCB0eXBlIGFuZCBkZXRhaWxzXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIC0gZXZlbnQgdHlwZVxuICAgKiBAcGFyYW0ge29iamVjdH0gZGV0YWlsIC0gZXZlbnQgZGV0YWlsXG4gICAqL1xuICBjb21wb3NlQmxvY2tFdmVudChlLCB0KSB7XG4gICAgcmV0dXJuIG5ldyBDdXN0b21FdmVudChlLCB7XG4gICAgICBkZXRhaWw6IHRcbiAgICB9KTtcbiAgfVxufVxuY29uc3QgbnQgPSBcImJsb2NrLXJlbW92ZWRcIiwgc3QgPSBcImJsb2NrLWFkZGVkXCIsIGVpID0gXCJibG9jay1tb3ZlZFwiLCBydCA9IFwiYmxvY2stY2hhbmdlZFwiO1xuY2xhc3MgdGkge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmNvbXBsZXRlZCA9IFByb21pc2UucmVzb2x2ZSgpO1xuICB9XG4gIC8qKlxuICAgKiBBZGQgbmV3IHByb21pc2UgdG8gcXVldWVcbiAgICpcbiAgICogQHBhcmFtIG9wZXJhdGlvbiAtIHByb21pc2Ugc2hvdWxkIGJlIGFkZGVkIHRvIHF1ZXVlXG4gICAqL1xuICBhZGQoZSkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgodCwgbykgPT4ge1xuICAgICAgdGhpcy5jb21wbGV0ZWQgPSB0aGlzLmNvbXBsZXRlZC50aGVuKGUpLnRoZW4odCkuY2F0Y2gobyk7XG4gICAgfSk7XG4gIH1cbn1cbmNsYXNzIG9pIGV4dGVuZHMgeSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyksIHRoaXMuX2N1cnJlbnRCbG9ja0luZGV4ID0gLTEsIHRoaXMuX2Jsb2NrcyA9IG51bGw7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgY3VycmVudCBCbG9jayBpbmRleFxuICAgKlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfVxuICAgKi9cbiAgZ2V0IGN1cnJlbnRCbG9ja0luZGV4KCkge1xuICAgIHJldHVybiB0aGlzLl9jdXJyZW50QmxvY2tJbmRleDtcbiAgfVxuICAvKipcbiAgICogU2V0IGN1cnJlbnQgQmxvY2sgaW5kZXggYW5kIGZpcmUgQmxvY2sgbGlmZWN5Y2xlIGNhbGxiYWNrc1xuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gbmV3SW5kZXggLSBpbmRleCBvZiBCbG9jayB0byBzZXQgYXMgY3VycmVudFxuICAgKi9cbiAgc2V0IGN1cnJlbnRCbG9ja0luZGV4KGUpIHtcbiAgICB0aGlzLl9jdXJyZW50QmxvY2tJbmRleCA9IGU7XG4gIH1cbiAgLyoqXG4gICAqIHJldHVybnMgZmlyc3QgQmxvY2tcbiAgICpcbiAgICogQHJldHVybnMge0Jsb2NrfVxuICAgKi9cbiAgZ2V0IGZpcnN0QmxvY2soKSB7XG4gICAgcmV0dXJuIHRoaXMuX2Jsb2Nrc1swXTtcbiAgfVxuICAvKipcbiAgICogcmV0dXJucyBsYXN0IEJsb2NrXG4gICAqXG4gICAqIEByZXR1cm5zIHtCbG9ja31cbiAgICovXG4gIGdldCBsYXN0QmxvY2soKSB7XG4gICAgcmV0dXJuIHRoaXMuX2Jsb2Nrc1t0aGlzLl9ibG9ja3MubGVuZ3RoIC0gMV07XG4gIH1cbiAgLyoqXG4gICAqIEdldCBjdXJyZW50IEJsb2NrIGluc3RhbmNlXG4gICAqXG4gICAqIEByZXR1cm5zIHtCbG9ja31cbiAgICovXG4gIGdldCBjdXJyZW50QmxvY2soKSB7XG4gICAgcmV0dXJuIHRoaXMuX2Jsb2Nrc1t0aGlzLmN1cnJlbnRCbG9ja0luZGV4XTtcbiAgfVxuICAvKipcbiAgICogU2V0IHBhc3NlZCBCbG9jayBhcyBhIGN1cnJlbnRcbiAgICpcbiAgICogQHBhcmFtIGJsb2NrIC0gYmxvY2sgdG8gc2V0IGFzIGEgY3VycmVudFxuICAgKi9cbiAgc2V0IGN1cnJlbnRCbG9jayhlKSB7XG4gICAgdGhpcy5jdXJyZW50QmxvY2tJbmRleCA9IHRoaXMuZ2V0QmxvY2tJbmRleChlKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBuZXh0IEJsb2NrIGluc3RhbmNlXG4gICAqXG4gICAqIEByZXR1cm5zIHtCbG9ja3xudWxsfVxuICAgKi9cbiAgZ2V0IG5leHRCbG9jaygpIHtcbiAgICByZXR1cm4gdGhpcy5jdXJyZW50QmxvY2tJbmRleCA9PT0gdGhpcy5fYmxvY2tzLmxlbmd0aCAtIDEgPyBudWxsIDogdGhpcy5fYmxvY2tzW3RoaXMuY3VycmVudEJsb2NrSW5kZXggKyAxXTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJuIGZpcnN0IEJsb2NrIHdpdGggaW5wdXRzIGFmdGVyIGN1cnJlbnQgQmxvY2tcbiAgICpcbiAgICogQHJldHVybnMge0Jsb2NrIHwgdW5kZWZpbmVkfVxuICAgKi9cbiAgZ2V0IG5leHRDb250ZW50ZnVsQmxvY2soKSB7XG4gICAgcmV0dXJuIHRoaXMuYmxvY2tzLnNsaWNlKHRoaXMuY3VycmVudEJsb2NrSW5kZXggKyAxKS5maW5kKCh0KSA9PiAhIXQuaW5wdXRzLmxlbmd0aCk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybiBmaXJzdCBCbG9jayB3aXRoIGlucHV0cyBiZWZvcmUgY3VycmVudCBCbG9ja1xuICAgKlxuICAgKiBAcmV0dXJucyB7QmxvY2sgfCB1bmRlZmluZWR9XG4gICAqL1xuICBnZXQgcHJldmlvdXNDb250ZW50ZnVsQmxvY2soKSB7XG4gICAgcmV0dXJuIHRoaXMuYmxvY2tzLnNsaWNlKDAsIHRoaXMuY3VycmVudEJsb2NrSW5kZXgpLnJldmVyc2UoKS5maW5kKCh0KSA9PiAhIXQuaW5wdXRzLmxlbmd0aCk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgcHJldmlvdXMgQmxvY2sgaW5zdGFuY2VcbiAgICpcbiAgICogQHJldHVybnMge0Jsb2NrfG51bGx9XG4gICAqL1xuICBnZXQgcHJldmlvdXNCbG9jaygpIHtcbiAgICByZXR1cm4gdGhpcy5jdXJyZW50QmxvY2tJbmRleCA9PT0gMCA/IG51bGwgOiB0aGlzLl9ibG9ja3NbdGhpcy5jdXJyZW50QmxvY2tJbmRleCAtIDFdO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgYXJyYXkgb2YgQmxvY2sgaW5zdGFuY2VzXG4gICAqXG4gICAqIEByZXR1cm5zIHtCbG9ja1tdfSB7QGxpbmsgQmxvY2tzI2FycmF5fVxuICAgKi9cbiAgZ2V0IGJsb2NrcygpIHtcbiAgICByZXR1cm4gdGhpcy5fYmxvY2tzLmFycmF5O1xuICB9XG4gIC8qKlxuICAgKiBDaGVjayBpZiBlYWNoIEJsb2NrIGlzIGVtcHR5XG4gICAqXG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKi9cbiAgZ2V0IGlzRWRpdG9yRW1wdHkoKSB7XG4gICAgcmV0dXJuIHRoaXMuYmxvY2tzLmV2ZXJ5KChlKSA9PiBlLmlzRW1wdHkpO1xuICB9XG4gIC8qKlxuICAgKiBTaG91bGQgYmUgY2FsbGVkIGFmdGVyIEVkaXRvci5VSSBwcmVwYXJhdGlvblxuICAgKiBEZWZpbmUgdGhpcy5fYmxvY2tzIHByb3BlcnR5XG4gICAqL1xuICBwcmVwYXJlKCkge1xuICAgIGNvbnN0IGUgPSBuZXcgU2UodGhpcy5FZGl0b3IuVUkubm9kZXMucmVkYWN0b3IpO1xuICAgIHRoaXMuX2Jsb2NrcyA9IG5ldyBQcm94eShlLCB7XG4gICAgICBzZXQ6IFNlLnNldCxcbiAgICAgIGdldDogU2UuZ2V0XG4gICAgfSksIHRoaXMubGlzdGVuZXJzLm9uKFxuICAgICAgZG9jdW1lbnQsXG4gICAgICBcImNvcHlcIixcbiAgICAgICh0KSA9PiB0aGlzLkVkaXRvci5CbG9ja0V2ZW50cy5oYW5kbGVDb21tYW5kQyh0KVxuICAgICk7XG4gIH1cbiAgLyoqXG4gICAqIFRvZ2dsZSByZWFkLW9ubHkgc3RhdGVcbiAgICpcbiAgICogSWYgcmVhZE9ubHkgaXMgdHJ1ZTpcbiAgICogIC0gVW5iaW5kIGV2ZW50IGhhbmRsZXJzIGZyb20gY3JlYXRlZCBCbG9ja3NcbiAgICpcbiAgICogaWYgcmVhZE9ubHkgaXMgZmFsc2U6XG4gICAqICAtIEJpbmQgZXZlbnQgaGFuZGxlcnMgdG8gYWxsIGV4aXN0aW5nIEJsb2Nrc1xuICAgKlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHJlYWRPbmx5RW5hYmxlZCAtIFwicmVhZCBvbmx5XCIgc3RhdGVcbiAgICovXG4gIHRvZ2dsZVJlYWRPbmx5KGUpIHtcbiAgICBlID8gdGhpcy5kaXNhYmxlTW9kdWxlQmluZGluZ3MoKSA6IHRoaXMuZW5hYmxlTW9kdWxlQmluZGluZ3MoKTtcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlcyBCbG9jayBpbnN0YW5jZSBieSB0b29sIG5hbWVcbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnMgLSBibG9jayBjcmVhdGlvbiBvcHRpb25zXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLnRvb2wgLSB0b29scyBwYXNzZWQgaW4gZWRpdG9yIGNvbmZpZyB7QGxpbmsgRWRpdG9yQ29uZmlnI3Rvb2xzfVxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMuaWRdIC0gdW5pcXVlIGlkIGZvciB0aGlzIGJsb2NrXG4gICAqIEBwYXJhbSB7QmxvY2tUb29sRGF0YX0gW29wdGlvbnMuZGF0YV0gLSBjb25zdHJ1Y3RvciBwYXJhbXNcbiAgICogQHJldHVybnMge0Jsb2NrfVxuICAgKi9cbiAgY29tcG9zZUJsb2NrKHtcbiAgICB0b29sOiBlLFxuICAgIGRhdGE6IHQgPSB7fSxcbiAgICBpZDogbyA9IHZvaWQgMCxcbiAgICB0dW5lczogaSA9IHt9XG4gIH0pIHtcbiAgICBjb25zdCBuID0gdGhpcy5FZGl0b3IuUmVhZE9ubHkuaXNFbmFibGVkLCByID0gdGhpcy5FZGl0b3IuVG9vbHMuYmxvY2tUb29scy5nZXQoZSksIGEgPSBuZXcgUih7XG4gICAgICBpZDogbyxcbiAgICAgIGRhdGE6IHQsXG4gICAgICB0b29sOiByLFxuICAgICAgYXBpOiB0aGlzLkVkaXRvci5BUEksXG4gICAgICByZWFkT25seTogbixcbiAgICAgIHR1bmVzRGF0YTogaVxuICAgIH0sIHRoaXMuZXZlbnRzRGlzcGF0Y2hlcik7XG4gICAgcmV0dXJuIG4gfHwgd2luZG93LnJlcXVlc3RJZGxlQ2FsbGJhY2soKCkgPT4ge1xuICAgICAgdGhpcy5iaW5kQmxvY2tFdmVudHMoYSk7XG4gICAgfSwgeyB0aW1lb3V0OiAyZTMgfSksIGE7XG4gIH1cbiAgLyoqXG4gICAqIEluc2VydCBuZXcgYmxvY2sgaW50byBfYmxvY2tzXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zIC0gaW5zZXJ0IG9wdGlvbnNcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLmlkXSAtIGJsb2NrJ3MgdW5pcXVlIGlkXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy50b29sXSAtIHBsdWdpbiBuYW1lLCBieSBkZWZhdWx0IG1ldGhvZCBpbnNlcnRzIHRoZSBkZWZhdWx0IGJsb2NrIHR5cGVcbiAgICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zLmRhdGFdIC0gcGx1Z2luIGRhdGFcbiAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLmluZGV4XSAtIGluZGV4IHdoZXJlIHRvIGluc2VydCBuZXcgQmxvY2tcbiAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5uZWVkVG9Gb2N1c10gLSBmbGFnIHNob3dzIGlmIG5lZWRlZCB0byB1cGRhdGUgY3VycmVudCBCbG9jayBpbmRleFxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLnJlcGxhY2VdIC0gZmxhZyBzaG93cyBpZiBibG9jayBieSBwYXNzZWQgaW5kZXggc2hvdWxkIGJlIHJlcGxhY2VkIHdpdGggaW5zZXJ0ZWQgb25lXG4gICAqIEByZXR1cm5zIHtCbG9ja31cbiAgICovXG4gIGluc2VydCh7XG4gICAgaWQ6IGUgPSB2b2lkIDAsXG4gICAgdG9vbDogdCA9IHRoaXMuY29uZmlnLmRlZmF1bHRCbG9jayxcbiAgICBkYXRhOiBvID0ge30sXG4gICAgaW5kZXg6IGksXG4gICAgbmVlZFRvRm9jdXM6IG4gPSAhMCxcbiAgICByZXBsYWNlOiByID0gITEsXG4gICAgdHVuZXM6IGEgPSB7fVxuICB9ID0ge30pIHtcbiAgICBsZXQgbCA9IGk7XG4gICAgbCA9PT0gdm9pZCAwICYmIChsID0gdGhpcy5jdXJyZW50QmxvY2tJbmRleCArIChyID8gMCA6IDEpKTtcbiAgICBjb25zdCBkID0gdGhpcy5jb21wb3NlQmxvY2soe1xuICAgICAgaWQ6IGUsXG4gICAgICB0b29sOiB0LFxuICAgICAgZGF0YTogbyxcbiAgICAgIHR1bmVzOiBhXG4gICAgfSk7XG4gICAgcmV0dXJuIHIgJiYgdGhpcy5ibG9ja0RpZE11dGF0ZWQobnQsIHRoaXMuZ2V0QmxvY2tCeUluZGV4KGwpLCB7XG4gICAgICBpbmRleDogbFxuICAgIH0pLCB0aGlzLl9ibG9ja3MuaW5zZXJ0KGwsIGQsIHIpLCB0aGlzLmJsb2NrRGlkTXV0YXRlZChzdCwgZCwge1xuICAgICAgaW5kZXg6IGxcbiAgICB9KSwgbiA/IHRoaXMuY3VycmVudEJsb2NrSW5kZXggPSBsIDogbCA8PSB0aGlzLmN1cnJlbnRCbG9ja0luZGV4ICYmIHRoaXMuY3VycmVudEJsb2NrSW5kZXgrKywgZDtcbiAgfVxuICAvKipcbiAgICogSW5zZXJ0cyBzZXZlcmFsIGJsb2NrcyBhdCBvbmNlXG4gICAqXG4gICAqIEBwYXJhbSBibG9ja3MgLSBibG9ja3MgdG8gaW5zZXJ0XG4gICAqIEBwYXJhbSBpbmRleCAtIGluZGV4IHdoZXJlIHRvIGluc2VydFxuICAgKi9cbiAgaW5zZXJ0TWFueShlLCB0ID0gMCkge1xuICAgIHRoaXMuX2Jsb2Nrcy5pbnNlcnRNYW55KGUsIHQpO1xuICB9XG4gIC8qKlxuICAgKiBVcGRhdGUgQmxvY2sgZGF0YS5cbiAgICpcbiAgICogQ3VycmVudGx5IHdlIGRvbid0IGhhdmUgYW4gJ3VwZGF0ZScgbWV0aG9kIGluIHRoZSBUb29scyBBUEksIHNvIHdlIGp1c3QgY3JlYXRlIGEgbmV3IGJsb2NrIHdpdGggdGhlIHNhbWUgaWQgYW5kIHR5cGVcbiAgICogU2hvdWxkIG5vdCB0cmlnZ2VyICdibG9jay1yZW1vdmVkJyBvciAnYmxvY2stYWRkZWQnIGV2ZW50c1xuICAgKlxuICAgKiBAcGFyYW0gYmxvY2sgLSBibG9jayB0byB1cGRhdGVcbiAgICogQHBhcmFtIGRhdGEgLSBuZXcgZGF0YVxuICAgKi9cbiAgYXN5bmMgdXBkYXRlKGUsIHQpIHtcbiAgICBjb25zdCBvID0gYXdhaXQgZS5kYXRhLCBpID0gdGhpcy5jb21wb3NlQmxvY2soe1xuICAgICAgaWQ6IGUuaWQsXG4gICAgICB0b29sOiBlLm5hbWUsXG4gICAgICBkYXRhOiBPYmplY3QuYXNzaWduKHt9LCBvLCB0KSxcbiAgICAgIHR1bmVzOiBlLnR1bmVzXG4gICAgfSksIG4gPSB0aGlzLmdldEJsb2NrSW5kZXgoZSk7XG4gICAgcmV0dXJuIHRoaXMuX2Jsb2Nrcy5yZXBsYWNlKG4sIGkpLCB0aGlzLmJsb2NrRGlkTXV0YXRlZChydCwgaSwge1xuICAgICAgaW5kZXg6IG5cbiAgICB9KSwgaTtcbiAgfVxuICAvKipcbiAgICogUmVwbGFjZSBwYXNzZWQgQmxvY2sgd2l0aCB0aGUgbmV3IG9uZSB3aXRoIHNwZWNpZmllZCBUb29sIGFuZCBkYXRhXG4gICAqXG4gICAqIEBwYXJhbSBibG9jayAtIGJsb2NrIHRvIHJlcGxhY2VcbiAgICogQHBhcmFtIG5ld1Rvb2wgLSBuZXcgVG9vbCBuYW1lXG4gICAqIEBwYXJhbSBkYXRhIC0gbmV3IFRvb2wgZGF0YVxuICAgKi9cbiAgcmVwbGFjZShlLCB0LCBvKSB7XG4gICAgY29uc3QgaSA9IHRoaXMuZ2V0QmxvY2tJbmRleChlKTtcbiAgICB0aGlzLmluc2VydCh7XG4gICAgICB0b29sOiB0LFxuICAgICAgZGF0YTogbyxcbiAgICAgIGluZGV4OiBpLFxuICAgICAgcmVwbGFjZTogITBcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogSW5zZXJ0IHBhc3RlZCBjb250ZW50LiBDYWxsIG9uUGFzdGUgY2FsbGJhY2sgYWZ0ZXIgaW5zZXJ0LlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdG9vbE5hbWUgLSBuYW1lIG9mIFRvb2wgdG8gaW5zZXJ0XG4gICAqIEBwYXJhbSB7UGFzdGVFdmVudH0gcGFzdGVFdmVudCAtIHBhc3RlZCBkYXRhXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gcmVwbGFjZSAtIHNob3VsZCByZXBsYWNlIGN1cnJlbnQgYmxvY2tcbiAgICovXG4gIHBhc3RlKGUsIHQsIG8gPSAhMSkge1xuICAgIGNvbnN0IGkgPSB0aGlzLmluc2VydCh7XG4gICAgICB0b29sOiBlLFxuICAgICAgcmVwbGFjZTogb1xuICAgIH0pO1xuICAgIHRyeSB7XG4gICAgICB3aW5kb3cucmVxdWVzdElkbGVDYWxsYmFjaygoKSA9PiB7XG4gICAgICAgIGkuY2FsbChYLk9OX1BBU1RFLCB0KTtcbiAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKG4pIHtcbiAgICAgIFQoYCR7ZX06IG9uUGFzdGUgY2FsbGJhY2sgY2FsbCBpcyBmYWlsZWRgLCBcImVycm9yXCIsIG4pO1xuICAgIH1cbiAgICByZXR1cm4gaTtcbiAgfVxuICAvKipcbiAgICogSW5zZXJ0IG5ldyBkZWZhdWx0IGJsb2NrIGF0IHBhc3NlZCBpbmRleFxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gaW5kZXggLSBpbmRleCB3aGVyZSBCbG9jayBzaG91bGQgYmUgaW5zZXJ0ZWRcbiAgICogQHBhcmFtIHtib29sZWFufSBuZWVkVG9Gb2N1cyAtIGlmIHRydWUsIHVwZGF0ZXMgY3VycmVudCBCbG9jayBpbmRleFxuICAgKlxuICAgKiBUT0RPOiBSZW1vdmUgbWV0aG9kIGFuZCB1c2UgaW5zZXJ0KCkgd2l0aCBpbmRleCBpbnN0ZWFkICg/KVxuICAgKiBAcmV0dXJucyB7QmxvY2t9IGluc2VydGVkIEJsb2NrXG4gICAqL1xuICBpbnNlcnREZWZhdWx0QmxvY2tBdEluZGV4KGUsIHQgPSAhMSkge1xuICAgIGNvbnN0IG8gPSB0aGlzLmNvbXBvc2VCbG9jayh7IHRvb2w6IHRoaXMuY29uZmlnLmRlZmF1bHRCbG9jayB9KTtcbiAgICByZXR1cm4gdGhpcy5fYmxvY2tzW2VdID0gbywgdGhpcy5ibG9ja0RpZE11dGF0ZWQoc3QsIG8sIHtcbiAgICAgIGluZGV4OiBlXG4gICAgfSksIHQgPyB0aGlzLmN1cnJlbnRCbG9ja0luZGV4ID0gZSA6IGUgPD0gdGhpcy5jdXJyZW50QmxvY2tJbmRleCAmJiB0aGlzLmN1cnJlbnRCbG9ja0luZGV4KyssIG87XG4gIH1cbiAgLyoqXG4gICAqIEFsd2F5cyBpbnNlcnRzIGF0IHRoZSBlbmRcbiAgICpcbiAgICogQHJldHVybnMge0Jsb2NrfVxuICAgKi9cbiAgaW5zZXJ0QXRFbmQoKSB7XG4gICAgcmV0dXJuIHRoaXMuY3VycmVudEJsb2NrSW5kZXggPSB0aGlzLmJsb2Nrcy5sZW5ndGggLSAxLCB0aGlzLmluc2VydCgpO1xuICB9XG4gIC8qKlxuICAgKiBNZXJnZSB0d28gYmxvY2tzXG4gICAqXG4gICAqIEBwYXJhbSB7QmxvY2t9IHRhcmdldEJsb2NrIC0gcHJldmlvdXMgYmxvY2sgd2lsbCBiZSBhcHBlbmQgdG8gdGhpcyBibG9ja1xuICAgKiBAcGFyYW0ge0Jsb2NrfSBibG9ja1RvTWVyZ2UgLSBibG9jayB0aGF0IHdpbGwgYmUgbWVyZ2VkIHdpdGggdGFyZ2V0IGJsb2NrXG4gICAqIEByZXR1cm5zIHtQcm9taXNlfSAtIHRoZSBzZXF1ZW5jZSB0aGF0IGNhbiBiZSBjb250aW51ZWRcbiAgICovXG4gIGFzeW5jIG1lcmdlQmxvY2tzKGUsIHQpIHtcbiAgICBjb25zdCBvID0gYXdhaXQgdC5kYXRhO1xuICAgIFcobykgfHwgYXdhaXQgZS5tZXJnZVdpdGgobyksIHRoaXMucmVtb3ZlQmxvY2sodCksIHRoaXMuY3VycmVudEJsb2NrSW5kZXggPSB0aGlzLl9ibG9ja3MuaW5kZXhPZihlKTtcbiAgfVxuICAvKipcbiAgICogUmVtb3ZlIHBhc3NlZCBCbG9ja1xuICAgKlxuICAgKiBAcGFyYW0gYmxvY2sgLSBCbG9jayB0byByZW1vdmVcbiAgICogQHBhcmFtIGFkZExhc3RCbG9jayAtIGlmIHRydWUsIGFkZHMgbmV3IGRlZmF1bHQgYmxvY2sgYXQgdGhlIGVuZC4gQHRvZG8gcmVtb3ZlIHRoaXMgbG9naWMgYW5kIHVzZSBldmVudC1idXMgaW5zdGVhZFxuICAgKi9cbiAgcmVtb3ZlQmxvY2soZSwgdCA9ICEwKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChvKSA9PiB7XG4gICAgICBjb25zdCBpID0gdGhpcy5fYmxvY2tzLmluZGV4T2YoZSk7XG4gICAgICBpZiAoIXRoaXMudmFsaWRhdGVJbmRleChpKSlcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2FuJ3QgZmluZCBhIEJsb2NrIHRvIHJlbW92ZVwiKTtcbiAgICAgIGUuZGVzdHJveSgpLCB0aGlzLl9ibG9ja3MucmVtb3ZlKGkpLCB0aGlzLmJsb2NrRGlkTXV0YXRlZChudCwgZSwge1xuICAgICAgICBpbmRleDogaVxuICAgICAgfSksIHRoaXMuY3VycmVudEJsb2NrSW5kZXggPj0gaSAmJiB0aGlzLmN1cnJlbnRCbG9ja0luZGV4LS0sIHRoaXMuYmxvY2tzLmxlbmd0aCA/IGkgPT09IDAgJiYgKHRoaXMuY3VycmVudEJsb2NrSW5kZXggPSAwKSA6ICh0aGlzLmN1cnJlbnRCbG9ja0luZGV4ID0gLTEsIHQgJiYgdGhpcy5pbnNlcnQoKSksIG8oKTtcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogUmVtb3ZlIG9ubHkgc2VsZWN0ZWQgQmxvY2tzXG4gICAqIGFuZCByZXR1cm5zIGZpcnN0IEJsb2NrIGluZGV4IHdoZXJlIHN0YXJ0ZWQgcmVtb3ZpbmcuLi5cbiAgICpcbiAgICogQHJldHVybnMge251bWJlcnx1bmRlZmluZWR9XG4gICAqL1xuICByZW1vdmVTZWxlY3RlZEJsb2NrcygpIHtcbiAgICBsZXQgZTtcbiAgICBmb3IgKGxldCB0ID0gdGhpcy5ibG9ja3MubGVuZ3RoIC0gMTsgdCA+PSAwOyB0LS0pXG4gICAgICB0aGlzLmJsb2Nrc1t0XS5zZWxlY3RlZCAmJiAodGhpcy5yZW1vdmVCbG9jayh0aGlzLmJsb2Nrc1t0XSksIGUgPSB0KTtcbiAgICByZXR1cm4gZTtcbiAgfVxuICAvKipcbiAgICogQXR0ZW50aW9uIVxuICAgKiBBZnRlciByZW1vdmluZyBpbnNlcnQgdGhlIG5ldyBkZWZhdWx0IHR5cGVkIEJsb2NrIGFuZCBmb2N1cyBvbiBpdFxuICAgKiBSZW1vdmVzIGFsbCBibG9ja3NcbiAgICovXG4gIHJlbW92ZUFsbEJsb2NrcygpIHtcbiAgICBmb3IgKGxldCBlID0gdGhpcy5ibG9ja3MubGVuZ3RoIC0gMTsgZSA+PSAwOyBlLS0pXG4gICAgICB0aGlzLl9ibG9ja3MucmVtb3ZlKGUpO1xuICAgIHRoaXMuY3VycmVudEJsb2NrSW5kZXggPSAtMSwgdGhpcy5pbnNlcnQoKSwgdGhpcy5jdXJyZW50QmxvY2suZmlyc3RJbnB1dC5mb2N1cygpO1xuICB9XG4gIC8qKlxuICAgKiBTcGxpdCBjdXJyZW50IEJsb2NrXG4gICAqIDEuIEV4dHJhY3QgY29udGVudCBmcm9tIENhcmV0IHBvc2l0aW9uIHRvIHRoZSBCbG9ja2BzIGVuZFxuICAgKiAyLiBJbnNlcnQgYSBuZXcgQmxvY2sgYmVsb3cgY3VycmVudCBvbmUgd2l0aCBleHRyYWN0ZWQgY29udGVudFxuICAgKlxuICAgKiBAcmV0dXJucyB7QmxvY2t9XG4gICAqL1xuICBzcGxpdCgpIHtcbiAgICBjb25zdCBlID0gdGhpcy5FZGl0b3IuQ2FyZXQuZXh0cmFjdEZyYWdtZW50RnJvbUNhcmV0UG9zaXRpb24oKSwgdCA9IGMubWFrZShcImRpdlwiKTtcbiAgICB0LmFwcGVuZENoaWxkKGUpO1xuICAgIGNvbnN0IG8gPSB7XG4gICAgICB0ZXh0OiBjLmlzRW1wdHkodCkgPyBcIlwiIDogdC5pbm5lckhUTUxcbiAgICB9O1xuICAgIHJldHVybiB0aGlzLmluc2VydCh7IGRhdGE6IG8gfSk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgQmxvY2sgYnkgcGFzc2VkIGluZGV4XG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCAtIGluZGV4IHRvIGdldC4gLTEgdG8gZ2V0IGxhc3RcbiAgICogQHJldHVybnMge0Jsb2NrfVxuICAgKi9cbiAgZ2V0QmxvY2tCeUluZGV4KGUpIHtcbiAgICByZXR1cm4gZSA9PT0gLTEgJiYgKGUgPSB0aGlzLl9ibG9ja3MubGVuZ3RoIC0gMSksIHRoaXMuX2Jsb2Nrc1tlXTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBhbiBpbmRleCBmb3IgcGFzc2VkIEJsb2NrXG4gICAqXG4gICAqIEBwYXJhbSBibG9jayAtIGJsb2NrIHRvIGZpbmQgaW5kZXhcbiAgICovXG4gIGdldEJsb2NrSW5kZXgoZSkge1xuICAgIHJldHVybiB0aGlzLl9ibG9ja3MuaW5kZXhPZihlKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyB0aGUgQmxvY2sgYnkgcGFzc2VkIGlkXG4gICAqXG4gICAqIEBwYXJhbSBpZCAtIGlkIG9mIGJsb2NrIHRvIGdldFxuICAgKiBAcmV0dXJucyB7QmxvY2t9XG4gICAqL1xuICBnZXRCbG9ja0J5SWQoZSkge1xuICAgIHJldHVybiB0aGlzLl9ibG9ja3MuYXJyYXkuZmluZCgodCkgPT4gdC5pZCA9PT0gZSk7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBCbG9jayBpbnN0YW5jZSBieSBodG1sIGVsZW1lbnRcbiAgICpcbiAgICogQHBhcmFtIHtOb2RlfSBlbGVtZW50IC0gaHRtbCBlbGVtZW50IHRvIGdldCBCbG9jayBieVxuICAgKi9cbiAgZ2V0QmxvY2soZSkge1xuICAgIGMuaXNFbGVtZW50KGUpIHx8IChlID0gZS5wYXJlbnROb2RlKTtcbiAgICBjb25zdCB0ID0gdGhpcy5fYmxvY2tzLm5vZGVzLCBvID0gZS5jbG9zZXN0KGAuJHtSLkNTUy53cmFwcGVyfWApLCBpID0gdC5pbmRleE9mKG8pO1xuICAgIGlmIChpID49IDApXG4gICAgICByZXR1cm4gdGhpcy5fYmxvY2tzW2ldO1xuICB9XG4gIC8qKlxuICAgKiAxKSBGaW5kIGZpcnN0LWxldmVsIEJsb2NrIGZyb20gcGFzc2VkIGNoaWxkIE5vZGVcbiAgICogMikgTWFyayBpdCBhcyBjdXJyZW50XG4gICAqXG4gICAqIEBwYXJhbSB7Tm9kZX0gY2hpbGROb2RlIC0gbG9vayBhaGVhZCBmcm9tIHRoaXMgbm9kZS5cbiAgICogQHJldHVybnMge0Jsb2NrIHwgdW5kZWZpbmVkfSBjYW4gcmV0dXJuIHVuZGVmaW5lZCBpbiBjYXNlIHdoZW4gdGhlIHBhc3NlZCBjaGlsZCBub3RlIGlzIG5vdCBhIHBhcnQgb2YgdGhlIGN1cnJlbnQgZWRpdG9yIGluc3RhbmNlXG4gICAqL1xuICBzZXRDdXJyZW50QmxvY2tCeUNoaWxkTm9kZShlKSB7XG4gICAgYy5pc0VsZW1lbnQoZSkgfHwgKGUgPSBlLnBhcmVudE5vZGUpO1xuICAgIGNvbnN0IHQgPSBlLmNsb3Nlc3QoYC4ke1IuQ1NTLndyYXBwZXJ9YCk7XG4gICAgaWYgKCF0KVxuICAgICAgcmV0dXJuO1xuICAgIGNvbnN0IG8gPSB0LmNsb3Nlc3QoYC4ke3RoaXMuRWRpdG9yLlVJLkNTUy5lZGl0b3JXcmFwcGVyfWApO1xuICAgIGlmIChvICE9IG51bGwgJiYgby5pc0VxdWFsTm9kZSh0aGlzLkVkaXRvci5VSS5ub2Rlcy53cmFwcGVyKSlcbiAgICAgIHJldHVybiB0aGlzLmN1cnJlbnRCbG9ja0luZGV4ID0gdGhpcy5fYmxvY2tzLm5vZGVzLmluZGV4T2YodCksIHRoaXMuY3VycmVudEJsb2NrLnVwZGF0ZUN1cnJlbnRJbnB1dCgpLCB0aGlzLmN1cnJlbnRCbG9jaztcbiAgfVxuICAvKipcbiAgICogUmV0dXJuIGJsb2NrIHdoaWNoIGNvbnRlbnRzIHBhc3NlZCBub2RlXG4gICAqXG4gICAqIEBwYXJhbSB7Tm9kZX0gY2hpbGROb2RlIC0gbm9kZSB0byBnZXQgQmxvY2sgYnlcbiAgICogQHJldHVybnMge0Jsb2NrfVxuICAgKi9cbiAgZ2V0QmxvY2tCeUNoaWxkTm9kZShlKSB7XG4gICAgaWYgKCFlIHx8ICEoZSBpbnN0YW5jZW9mIE5vZGUpKVxuICAgICAgcmV0dXJuO1xuICAgIGMuaXNFbGVtZW50KGUpIHx8IChlID0gZS5wYXJlbnROb2RlKTtcbiAgICBjb25zdCB0ID0gZS5jbG9zZXN0KGAuJHtSLkNTUy53cmFwcGVyfWApO1xuICAgIHJldHVybiB0aGlzLmJsb2Nrcy5maW5kKChvKSA9PiBvLmhvbGRlciA9PT0gdCk7XG4gIH1cbiAgLyoqXG4gICAqIFN3YXAgQmxvY2tzIFBvc2l0aW9uXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggLSBpbmRleCBvZiBmaXJzdCBibG9ja1xuICAgKiBAcGFyYW0ge251bWJlcn0gdG9JbmRleCAtIGluZGV4IG9mIHNlY29uZCBibG9ja1xuICAgKiBAZGVwcmVjYXRlZCDigJQgdXNlICdtb3ZlJyBpbnN0ZWFkXG4gICAqL1xuICBzd2FwKGUsIHQpIHtcbiAgICB0aGlzLl9ibG9ja3Muc3dhcChlLCB0KSwgdGhpcy5jdXJyZW50QmxvY2tJbmRleCA9IHQ7XG4gIH1cbiAgLyoqXG4gICAqIE1vdmUgYSBibG9jayB0byBhIG5ldyBpbmRleFxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gdG9JbmRleCAtIGluZGV4IHdoZXJlIHRvIG1vdmUgQmxvY2tcbiAgICogQHBhcmFtIHtudW1iZXJ9IGZyb21JbmRleCAtIGluZGV4IG9mIEJsb2NrIHRvIG1vdmVcbiAgICovXG4gIG1vdmUoZSwgdCA9IHRoaXMuY3VycmVudEJsb2NrSW5kZXgpIHtcbiAgICBpZiAoaXNOYU4oZSkgfHwgaXNOYU4odCkpIHtcbiAgICAgIFQoXCJXYXJuaW5nIGR1cmluZyAnbW92ZScgY2FsbDogaW5jb3JyZWN0IGluZGljZXMgcHJvdmlkZWQuXCIsIFwid2FyblwiKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKCF0aGlzLnZhbGlkYXRlSW5kZXgoZSkgfHwgIXRoaXMudmFsaWRhdGVJbmRleCh0KSkge1xuICAgICAgVChcIldhcm5pbmcgZHVyaW5nICdtb3ZlJyBjYWxsOiBpbmRpY2VzIGNhbm5vdCBiZSBsb3dlciB0aGFuIDAgb3IgZ3JlYXRlciB0aGFuIHRoZSBhbW91bnQgb2YgYmxvY2tzLlwiLCBcIndhcm5cIik7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuX2Jsb2Nrcy5tb3ZlKGUsIHQpLCB0aGlzLmN1cnJlbnRCbG9ja0luZGV4ID0gZSwgdGhpcy5ibG9ja0RpZE11dGF0ZWQoZWksIHRoaXMuY3VycmVudEJsb2NrLCB7XG4gICAgICBmcm9tSW5kZXg6IHQsXG4gICAgICB0b0luZGV4OiBlXG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIENvbnZlcnRzIHBhc3NlZCBCbG9jayB0byB0aGUgbmV3IFRvb2xcbiAgICogVXNlcyBDb252ZXJzaW9uIENvbmZpZ1xuICAgKlxuICAgKiBAcGFyYW0gYmxvY2tUb0NvbnZlcnQgLSBCbG9jayB0aGF0IHNob3VsZCBiZSBjb252ZXJ0ZWRcbiAgICogQHBhcmFtIHRhcmdldFRvb2xOYW1lIC0gbmFtZSBvZiB0aGUgVG9vbCB0byBjb252ZXJ0IHRvXG4gICAqIEBwYXJhbSBibG9ja0RhdGFPdmVycmlkZXMgLSBvcHRpb25hbCBuZXcgQmxvY2sgZGF0YSBvdmVycmlkZXNcbiAgICovXG4gIGFzeW5jIGNvbnZlcnQoZSwgdCwgbykge1xuICAgIGlmICghYXdhaXQgZS5zYXZlKCkpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZCBub3QgY29udmVydCBCbG9jay4gRmFpbGVkIHRvIGV4dHJhY3Qgb3JpZ2luYWwgQmxvY2sgZGF0YS5cIik7XG4gICAgY29uc3QgbiA9IHRoaXMuRWRpdG9yLlRvb2xzLmJsb2NrVG9vbHMuZ2V0KHQpO1xuICAgIGlmICghbilcbiAgICAgIHRocm93IG5ldyBFcnJvcihgQ291bGQgbm90IGNvbnZlcnQgQmxvY2suIFRvb2wgwqske3R9wrsgbm90IGZvdW5kLmApO1xuICAgIGNvbnN0IHIgPSBhd2FpdCBlLmV4cG9ydERhdGFBc1N0cmluZygpLCBhID0gVihcbiAgICAgIHIsXG4gICAgICBuLnNhbml0aXplQ29uZmlnXG4gICAgKTtcbiAgICBsZXQgbCA9IHRvKGEsIG4uY29udmVyc2lvbkNvbmZpZyk7XG4gICAgbyAmJiAobCA9IE9iamVjdC5hc3NpZ24obCwgbykpLCB0aGlzLnJlcGxhY2UoZSwgbi5uYW1lLCBsKTtcbiAgfVxuICAvKipcbiAgICogU2V0cyBjdXJyZW50IEJsb2NrIEluZGV4IC0xIHdoaWNoIG1lYW5zIHVua25vd25cbiAgICogYW5kIGNsZWFyIGhpZ2hsaWdodHNcbiAgICovXG4gIGRyb3BQb2ludGVyKCkge1xuICAgIHRoaXMuY3VycmVudEJsb2NrSW5kZXggPSAtMTtcbiAgfVxuICAvKipcbiAgICogQ2xlYXJzIEVkaXRvclxuICAgKlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IG5lZWRUb0FkZERlZmF1bHRCbG9jayAtIDEpIGluIGludGVybmFsIGNhbGxzIChmb3IgZXhhbXBsZSwgaW4gYXBpLmJsb2Nrcy5yZW5kZXIpXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2UgZG9uJ3QgbmVlZCB0byBhZGQgYW4gZW1wdHkgZGVmYXVsdCBibG9ja1xuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAyKSBpbiBhcGkuYmxvY2tzLmNsZWFyIHdlIHNob3VsZCBhZGQgZW1wdHkgYmxvY2tcbiAgICovXG4gIGFzeW5jIGNsZWFyKGUgPSAhMSkge1xuICAgIGNvbnN0IHQgPSBuZXcgdGkoKTtcbiAgICB0aGlzLmJsb2Nrcy5mb3JFYWNoKChvKSA9PiB7XG4gICAgICB0LmFkZChhc3luYyAoKSA9PiB7XG4gICAgICAgIGF3YWl0IHRoaXMucmVtb3ZlQmxvY2sobywgITEpO1xuICAgICAgfSk7XG4gICAgfSksIGF3YWl0IHQuY29tcGxldGVkLCB0aGlzLmRyb3BQb2ludGVyKCksIGUgJiYgdGhpcy5pbnNlcnQoKSwgdGhpcy5FZGl0b3IuVUkuY2hlY2tFbXB0aW5lc3MoKTtcbiAgfVxuICAvKipcbiAgICogQ2xlYW5zIHVwIGFsbCB0aGUgYmxvY2sgdG9vbHMnIHJlc291cmNlc1xuICAgKiBUaGlzIGlzIGNhbGxlZCB3aGVuIGVkaXRvciBpcyBkZXN0cm95ZWRcbiAgICovXG4gIGFzeW5jIGRlc3Ryb3koKSB7XG4gICAgYXdhaXQgUHJvbWlzZS5hbGwodGhpcy5ibG9ja3MubWFwKChlKSA9PiBlLmRlc3Ryb3koKSkpO1xuICB9XG4gIC8qKlxuICAgKiBCaW5kIEJsb2NrIGV2ZW50c1xuICAgKlxuICAgKiBAcGFyYW0ge0Jsb2NrfSBibG9jayAtIEJsb2NrIHRvIHdoaWNoIGV2ZW50IHNob3VsZCBiZSBib3VuZFxuICAgKi9cbiAgYmluZEJsb2NrRXZlbnRzKGUpIHtcbiAgICBjb25zdCB7IEJsb2NrRXZlbnRzOiB0IH0gPSB0aGlzLkVkaXRvcjtcbiAgICB0aGlzLnJlYWRPbmx5TXV0YWJsZUxpc3RlbmVycy5vbihlLmhvbGRlciwgXCJrZXlkb3duXCIsIChvKSA9PiB7XG4gICAgICB0LmtleWRvd24obyk7XG4gICAgfSksIHRoaXMucmVhZE9ubHlNdXRhYmxlTGlzdGVuZXJzLm9uKGUuaG9sZGVyLCBcImtleXVwXCIsIChvKSA9PiB7XG4gICAgICB0LmtleXVwKG8pO1xuICAgIH0pLCB0aGlzLnJlYWRPbmx5TXV0YWJsZUxpc3RlbmVycy5vbihlLmhvbGRlciwgXCJkcmFnb3ZlclwiLCAobykgPT4ge1xuICAgICAgdC5kcmFnT3ZlcihvKTtcbiAgICB9KSwgdGhpcy5yZWFkT25seU11dGFibGVMaXN0ZW5lcnMub24oZS5ob2xkZXIsIFwiZHJhZ2xlYXZlXCIsIChvKSA9PiB7XG4gICAgICB0LmRyYWdMZWF2ZShvKTtcbiAgICB9KSwgZS5vbihcImRpZE11dGF0ZWRcIiwgKG8pID0+IHRoaXMuYmxvY2tEaWRNdXRhdGVkKHJ0LCBvLCB7XG4gICAgICBpbmRleDogdGhpcy5nZXRCbG9ja0luZGV4KG8pXG4gICAgfSkpO1xuICB9XG4gIC8qKlxuICAgKiBEaXNhYmxlIG11dGFibGUgaGFuZGxlcnMgYW5kIGJpbmRpbmdzXG4gICAqL1xuICBkaXNhYmxlTW9kdWxlQmluZGluZ3MoKSB7XG4gICAgdGhpcy5yZWFkT25seU11dGFibGVMaXN0ZW5lcnMuY2xlYXJBbGwoKTtcbiAgfVxuICAvKipcbiAgICogRW5hYmxlcyBhbGwgbW9kdWxlIGhhbmRsZXJzIGFuZCBiaW5kaW5ncyBmb3IgYWxsIEJsb2Nrc1xuICAgKi9cbiAgZW5hYmxlTW9kdWxlQmluZGluZ3MoKSB7XG4gICAgdGhpcy5yZWFkT25seU11dGFibGVMaXN0ZW5lcnMub24oXG4gICAgICBkb2N1bWVudCxcbiAgICAgIFwiY3V0XCIsXG4gICAgICAoZSkgPT4gdGhpcy5FZGl0b3IuQmxvY2tFdmVudHMuaGFuZGxlQ29tbWFuZFgoZSlcbiAgICApLCB0aGlzLmJsb2Nrcy5mb3JFYWNoKChlKSA9PiB7XG4gICAgICB0aGlzLmJpbmRCbG9ja0V2ZW50cyhlKTtcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogVmFsaWRhdGVzIHRoYXQgdGhlIGdpdmVuIGluZGV4IGlzIG5vdCBsb3dlciB0aGFuIDAgb3IgaGlnaGVyIHRoYW4gdGhlIGFtb3VudCBvZiBibG9ja3NcbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IC0gaW5kZXggb2YgYmxvY2tzIGFycmF5IHRvIHZhbGlkYXRlXG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKi9cbiAgdmFsaWRhdGVJbmRleChlKSB7XG4gICAgcmV0dXJuICEoZSA8IDAgfHwgZSA+PSB0aGlzLl9ibG9ja3MubGVuZ3RoKTtcbiAgfVxuICAvKipcbiAgICogQmxvY2sgbXV0YXRpb24gY2FsbGJhY2tcbiAgICpcbiAgICogQHBhcmFtIG11dGF0aW9uVHlwZSAtIHdoYXQgaGFwcGVuZWQgd2l0aCBibG9ja1xuICAgKiBAcGFyYW0gYmxvY2sgLSBtdXRhdGVkIGJsb2NrXG4gICAqIEBwYXJhbSBkZXRhaWxEYXRhIC0gYWRkaXRpb25hbCBkYXRhIHRvIHBhc3Mgd2l0aCBjaGFuZ2UgZXZlbnRcbiAgICovXG4gIGJsb2NrRGlkTXV0YXRlZChlLCB0LCBvKSB7XG4gICAgY29uc3QgaSA9IG5ldyBDdXN0b21FdmVudChlLCB7XG4gICAgICBkZXRhaWw6IHtcbiAgICAgICAgdGFyZ2V0OiBuZXcgZWUodCksXG4gICAgICAgIC4uLm9cbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcy5ldmVudHNEaXNwYXRjaGVyLmVtaXQocHQsIHtcbiAgICAgIGV2ZW50OiBpXG4gICAgfSksIHQ7XG4gIH1cbn1cbmNsYXNzIGlpIGV4dGVuZHMgeSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyksIHRoaXMuYW55QmxvY2tTZWxlY3RlZENhY2hlID0gbnVsbCwgdGhpcy5uZWVkVG9TZWxlY3RBbGwgPSAhMSwgdGhpcy5uYXRpdmVJbnB1dFNlbGVjdGVkID0gITEsIHRoaXMucmVhZHlUb0Jsb2NrU2VsZWN0aW9uID0gITE7XG4gIH1cbiAgLyoqXG4gICAqIFNhbml0aXplciBDb25maWdcbiAgICpcbiAgICogQHJldHVybnMge1Nhbml0aXplckNvbmZpZ31cbiAgICovXG4gIGdldCBzYW5pdGl6ZXJDb25maWcoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHA6IHt9LFxuICAgICAgaDE6IHt9LFxuICAgICAgaDI6IHt9LFxuICAgICAgaDM6IHt9LFxuICAgICAgaDQ6IHt9LFxuICAgICAgaDU6IHt9LFxuICAgICAgaDY6IHt9LFxuICAgICAgb2w6IHt9LFxuICAgICAgdWw6IHt9LFxuICAgICAgbGk6IHt9LFxuICAgICAgYnI6ICEwLFxuICAgICAgaW1nOiB7XG4gICAgICAgIHNyYzogITAsXG4gICAgICAgIHdpZHRoOiAhMCxcbiAgICAgICAgaGVpZ2h0OiAhMFxuICAgICAgfSxcbiAgICAgIGE6IHtcbiAgICAgICAgaHJlZjogITBcbiAgICAgIH0sXG4gICAgICBiOiB7fSxcbiAgICAgIGk6IHt9LFxuICAgICAgdToge31cbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBGbGFnIHRoYXQgaWRlbnRpZmllcyBhbGwgQmxvY2tzIHNlbGVjdGlvblxuICAgKlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICovXG4gIGdldCBhbGxCbG9ja3NTZWxlY3RlZCgpIHtcbiAgICBjb25zdCB7IEJsb2NrTWFuYWdlcjogZSB9ID0gdGhpcy5FZGl0b3I7XG4gICAgcmV0dXJuIGUuYmxvY2tzLmV2ZXJ5KCh0KSA9PiB0LnNlbGVjdGVkID09PSAhMCk7XG4gIH1cbiAgLyoqXG4gICAqIFNldCBzZWxlY3RlZCBhbGwgYmxvY2tzXG4gICAqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gc3RhdGUgLSBzdGF0ZSB0byBzZXRcbiAgICovXG4gIHNldCBhbGxCbG9ja3NTZWxlY3RlZChlKSB7XG4gICAgY29uc3QgeyBCbG9ja01hbmFnZXI6IHQgfSA9IHRoaXMuRWRpdG9yO1xuICAgIHQuYmxvY2tzLmZvckVhY2goKG8pID0+IHtcbiAgICAgIG8uc2VsZWN0ZWQgPSBlO1xuICAgIH0pLCB0aGlzLmNsZWFyQ2FjaGUoKTtcbiAgfVxuICAvKipcbiAgICogRmxhZyB0aGF0IGlkZW50aWZpZXMgYW55IEJsb2NrIHNlbGVjdGlvblxuICAgKlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICovXG4gIGdldCBhbnlCbG9ja1NlbGVjdGVkKCkge1xuICAgIGNvbnN0IHsgQmxvY2tNYW5hZ2VyOiBlIH0gPSB0aGlzLkVkaXRvcjtcbiAgICByZXR1cm4gdGhpcy5hbnlCbG9ja1NlbGVjdGVkQ2FjaGUgPT09IG51bGwgJiYgKHRoaXMuYW55QmxvY2tTZWxlY3RlZENhY2hlID0gZS5ibG9ja3Muc29tZSgodCkgPT4gdC5zZWxlY3RlZCA9PT0gITApKSwgdGhpcy5hbnlCbG9ja1NlbGVjdGVkQ2FjaGU7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybiBzZWxlY3RlZCBCbG9ja3MgYXJyYXlcbiAgICpcbiAgICogQHJldHVybnMge0Jsb2NrW119XG4gICAqL1xuICBnZXQgc2VsZWN0ZWRCbG9ja3MoKSB7XG4gICAgcmV0dXJuIHRoaXMuRWRpdG9yLkJsb2NrTWFuYWdlci5ibG9ja3MuZmlsdGVyKChlKSA9PiBlLnNlbGVjdGVkKTtcbiAgfVxuICAvKipcbiAgICogTW9kdWxlIFByZXBhcmF0aW9uXG4gICAqIFJlZ2lzdGVycyBTaG9ydGN1dHMgQ01EK0EgYW5kIENNRCtDXG4gICAqIHRvIHNlbGVjdCBhbGwgYW5kIGNvcHkgdGhlbVxuICAgKi9cbiAgcHJlcGFyZSgpIHtcbiAgICB0aGlzLnNlbGVjdGlvbiA9IG5ldyBiKCksIGFlLmFkZCh7XG4gICAgICBuYW1lOiBcIkNNRCtBXCIsXG4gICAgICBoYW5kbGVyOiAoZSkgPT4ge1xuICAgICAgICBjb25zdCB7IEJsb2NrTWFuYWdlcjogdCwgUmVhZE9ubHk6IG8gfSA9IHRoaXMuRWRpdG9yO1xuICAgICAgICBpZiAoby5pc0VuYWJsZWQpIHtcbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCksIHRoaXMuc2VsZWN0QWxsQmxvY2tzKCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHQuY3VycmVudEJsb2NrICYmIHRoaXMuaGFuZGxlQ29tbWFuZEEoZSk7XG4gICAgICB9LFxuICAgICAgb246IHRoaXMuRWRpdG9yLlVJLm5vZGVzLnJlZGFjdG9yXG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIFRvZ2dsZSByZWFkLW9ubHkgc3RhdGVcbiAgICpcbiAgICogIC0gUmVtb3ZlIGFsbCByYW5nZXNcbiAgICogIC0gVW5zZWxlY3QgYWxsIEJsb2Nrc1xuICAgKi9cbiAgdG9nZ2xlUmVhZE9ubHkoKSB7XG4gICAgYi5nZXQoKS5yZW1vdmVBbGxSYW5nZXMoKSwgdGhpcy5hbGxCbG9ja3NTZWxlY3RlZCA9ICExO1xuICB9XG4gIC8qKlxuICAgKiBSZW1vdmUgc2VsZWN0aW9uIG9mIEJsb2NrXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyP30gaW5kZXggLSBCbG9jayBpbmRleCBhY2NvcmRpbmcgdG8gdGhlIEJsb2NrTWFuYWdlcidzIGluZGV4ZXNcbiAgICovXG4gIHVuU2VsZWN0QmxvY2tCeUluZGV4KGUpIHtcbiAgICBjb25zdCB7IEJsb2NrTWFuYWdlcjogdCB9ID0gdGhpcy5FZGl0b3I7XG4gICAgbGV0IG87XG4gICAgaXNOYU4oZSkgPyBvID0gdC5jdXJyZW50QmxvY2sgOiBvID0gdC5nZXRCbG9ja0J5SW5kZXgoZSksIG8uc2VsZWN0ZWQgPSAhMSwgdGhpcy5jbGVhckNhY2hlKCk7XG4gIH1cbiAgLyoqXG4gICAqIENsZWFyIHNlbGVjdGlvbiBmcm9tIEJsb2Nrc1xuICAgKlxuICAgKiBAcGFyYW0ge0V2ZW50fSByZWFzb24gLSBldmVudCBjYXVzZWQgY2xlYXIgb2Ygc2VsZWN0aW9uXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gcmVzdG9yZVNlbGVjdGlvbiAtIGlmIHRydWUsIHJlc3RvcmUgc2F2ZWQgc2VsZWN0aW9uXG4gICAqL1xuICBjbGVhclNlbGVjdGlvbihlLCB0ID0gITEpIHtcbiAgICBjb25zdCB7IEJsb2NrTWFuYWdlcjogbywgQ2FyZXQ6IGksIFJlY3RhbmdsZVNlbGVjdGlvbjogbiB9ID0gdGhpcy5FZGl0b3I7XG4gICAgdGhpcy5uZWVkVG9TZWxlY3RBbGwgPSAhMSwgdGhpcy5uYXRpdmVJbnB1dFNlbGVjdGVkID0gITEsIHRoaXMucmVhZHlUb0Jsb2NrU2VsZWN0aW9uID0gITE7XG4gICAgY29uc3QgciA9IGUgJiYgZSBpbnN0YW5jZW9mIEtleWJvYXJkRXZlbnQsIGEgPSByICYmIGx0KGUua2V5Q29kZSk7XG4gICAgaWYgKHRoaXMuYW55QmxvY2tTZWxlY3RlZCAmJiByICYmIGEgJiYgIWIuaXNTZWxlY3Rpb25FeGlzdHMpIHtcbiAgICAgIGNvbnN0IGwgPSBvLnJlbW92ZVNlbGVjdGVkQmxvY2tzKCk7XG4gICAgICBvLmluc2VydERlZmF1bHRCbG9ja0F0SW5kZXgobCwgITApLCBpLnNldFRvQmxvY2soby5jdXJyZW50QmxvY2spLCB4ZSgoKSA9PiB7XG4gICAgICAgIGNvbnN0IGQgPSBlLmtleTtcbiAgICAgICAgaS5pbnNlcnRDb250ZW50QXRDYXJldFBvc2l0aW9uKGQubGVuZ3RoID4gMSA/IFwiXCIgOiBkKTtcbiAgICAgIH0sIDIwKSgpO1xuICAgIH1cbiAgICBpZiAodGhpcy5FZGl0b3IuQ3Jvc3NCbG9ja1NlbGVjdGlvbi5jbGVhcihlKSwgIXRoaXMuYW55QmxvY2tTZWxlY3RlZCB8fCBuLmlzUmVjdEFjdGl2YXRlZCgpKSB7XG4gICAgICB0aGlzLkVkaXRvci5SZWN0YW5nbGVTZWxlY3Rpb24uY2xlYXJTZWxlY3Rpb24oKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdCAmJiB0aGlzLnNlbGVjdGlvbi5yZXN0b3JlKCksIHRoaXMuYWxsQmxvY2tzU2VsZWN0ZWQgPSAhMTtcbiAgfVxuICAvKipcbiAgICogUmVkdWNlIGVhY2ggQmxvY2sgYW5kIGNvcHkgaXRzIGNvbnRlbnRcbiAgICpcbiAgICogQHBhcmFtIHtDbGlwYm9hcmRFdmVudH0gZSAtIGNvcHkvY3V0IGV2ZW50XG4gICAqIEByZXR1cm5zIHtQcm9taXNlPHZvaWQ+fVxuICAgKi9cbiAgY29weVNlbGVjdGVkQmxvY2tzKGUpIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgY29uc3QgdCA9IGMubWFrZShcImRpdlwiKTtcbiAgICB0aGlzLnNlbGVjdGVkQmxvY2tzLmZvckVhY2goKG4pID0+IHtcbiAgICAgIGNvbnN0IHIgPSBWKG4uaG9sZGVyLmlubmVySFRNTCwgdGhpcy5zYW5pdGl6ZXJDb25maWcpLCBhID0gYy5tYWtlKFwicFwiKTtcbiAgICAgIGEuaW5uZXJIVE1MID0gciwgdC5hcHBlbmRDaGlsZChhKTtcbiAgICB9KTtcbiAgICBjb25zdCBvID0gQXJyYXkuZnJvbSh0LmNoaWxkTm9kZXMpLm1hcCgobikgPT4gbi50ZXh0Q29udGVudCkuam9pbihgXG5cbmApLCBpID0gdC5pbm5lckhUTUw7XG4gICAgcmV0dXJuIGUuY2xpcGJvYXJkRGF0YS5zZXREYXRhKFwidGV4dC9wbGFpblwiLCBvKSwgZS5jbGlwYm9hcmREYXRhLnNldERhdGEoXCJ0ZXh0L2h0bWxcIiwgaSksIFByb21pc2UuYWxsKHRoaXMuc2VsZWN0ZWRCbG9ja3MubWFwKChuKSA9PiBuLnNhdmUoKSkpLnRoZW4oKG4pID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGUuY2xpcGJvYXJkRGF0YS5zZXREYXRhKHRoaXMuRWRpdG9yLlBhc3RlLk1JTUVfVFlQRSwgSlNPTi5zdHJpbmdpZnkobikpO1xuICAgICAgfSBjYXRjaCB7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIFNlbGVjdCBCbG9jayBieSBpdHMgaW5kZXhcbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXI/fSBpbmRleCAtIEJsb2NrIGluZGV4IGFjY29yZGluZyB0byB0aGUgQmxvY2tNYW5hZ2VyJ3MgaW5kZXhlc1xuICAgKi9cbiAgc2VsZWN0QmxvY2tCeUluZGV4KGUpIHtcbiAgICBjb25zdCB7IEJsb2NrTWFuYWdlcjogdCB9ID0gdGhpcy5FZGl0b3IsIG8gPSB0LmdldEJsb2NrQnlJbmRleChlKTtcbiAgICBvICE9PSB2b2lkIDAgJiYgdGhpcy5zZWxlY3RCbG9jayhvKTtcbiAgfVxuICAvKipcbiAgICogU2VsZWN0IHBhc3NlZCBCbG9ja1xuICAgKlxuICAgKiBAcGFyYW0ge0Jsb2NrfSBibG9jayAtIEJsb2NrIHRvIHNlbGVjdFxuICAgKi9cbiAgc2VsZWN0QmxvY2soZSkge1xuICAgIHRoaXMuc2VsZWN0aW9uLnNhdmUoKSwgYi5nZXQoKS5yZW1vdmVBbGxSYW5nZXMoKSwgZS5zZWxlY3RlZCA9ICEwLCB0aGlzLmNsZWFyQ2FjaGUoKSwgdGhpcy5FZGl0b3IuSW5saW5lVG9vbGJhci5jbG9zZSgpO1xuICB9XG4gIC8qKlxuICAgKiBSZW1vdmUgc2VsZWN0aW9uIGZyb20gcGFzc2VkIEJsb2NrXG4gICAqXG4gICAqIEBwYXJhbSB7QmxvY2t9IGJsb2NrIC0gQmxvY2sgdG8gdW5zZWxlY3RcbiAgICovXG4gIHVuc2VsZWN0QmxvY2soZSkge1xuICAgIGUuc2VsZWN0ZWQgPSAhMSwgdGhpcy5jbGVhckNhY2hlKCk7XG4gIH1cbiAgLyoqXG4gICAqIENsZWFyIGFueUJsb2NrU2VsZWN0ZWQgY2FjaGVcbiAgICovXG4gIGNsZWFyQ2FjaGUoKSB7XG4gICAgdGhpcy5hbnlCbG9ja1NlbGVjdGVkQ2FjaGUgPSBudWxsO1xuICB9XG4gIC8qKlxuICAgKiBNb2R1bGUgZGVzdHJ1Y3Rpb25cbiAgICogRGUtcmVnaXN0ZXJzIFNob3J0Y3V0IENNRCtBXG4gICAqL1xuICBkZXN0cm95KCkge1xuICAgIGFlLnJlbW92ZSh0aGlzLkVkaXRvci5VSS5ub2Rlcy5yZWRhY3RvciwgXCJDTUQrQVwiKTtcbiAgfVxuICAvKipcbiAgICogRmlyc3QgQ01EK0Egc2VsZWN0cyBhbGwgaW5wdXQgY29udGVudCBieSBuYXRpdmUgYmVoYXZpb3VyLFxuICAgKiBuZXh0IENNRCtBIGtleXByZXNzIHNlbGVjdHMgYWxsIGJsb2Nrc1xuICAgKlxuICAgKiBAcGFyYW0ge0tleWJvYXJkRXZlbnR9IGV2ZW50IC0ga2V5Ym9hcmQgZXZlbnRcbiAgICovXG4gIGhhbmRsZUNvbW1hbmRBKGUpIHtcbiAgICBpZiAodGhpcy5FZGl0b3IuUmVjdGFuZ2xlU2VsZWN0aW9uLmNsZWFyU2VsZWN0aW9uKCksIGMuaXNOYXRpdmVJbnB1dChlLnRhcmdldCkgJiYgIXRoaXMucmVhZHlUb0Jsb2NrU2VsZWN0aW9uKSB7XG4gICAgICB0aGlzLnJlYWR5VG9CbG9ja1NlbGVjdGlvbiA9ICEwO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCB0ID0gdGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLmdldEJsb2NrKGUudGFyZ2V0KSwgbyA9IHQuaW5wdXRzO1xuICAgIGlmIChvLmxlbmd0aCA+IDEgJiYgIXRoaXMucmVhZHlUb0Jsb2NrU2VsZWN0aW9uKSB7XG4gICAgICB0aGlzLnJlYWR5VG9CbG9ja1NlbGVjdGlvbiA9ICEwO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoby5sZW5ndGggPT09IDEgJiYgIXRoaXMubmVlZFRvU2VsZWN0QWxsKSB7XG4gICAgICB0aGlzLm5lZWRUb1NlbGVjdEFsbCA9ICEwO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLm5lZWRUb1NlbGVjdEFsbCA/IChlLnByZXZlbnREZWZhdWx0KCksIHRoaXMuc2VsZWN0QWxsQmxvY2tzKCksIHRoaXMubmVlZFRvU2VsZWN0QWxsID0gITEsIHRoaXMucmVhZHlUb0Jsb2NrU2VsZWN0aW9uID0gITEsIHRoaXMuRWRpdG9yLkNvbnZlcnNpb25Ub29sYmFyLmNsb3NlKCkpIDogdGhpcy5yZWFkeVRvQmxvY2tTZWxlY3Rpb24gJiYgKGUucHJldmVudERlZmF1bHQoKSwgdGhpcy5zZWxlY3RCbG9jayh0KSwgdGhpcy5uZWVkVG9TZWxlY3RBbGwgPSAhMCk7XG4gIH1cbiAgLyoqXG4gICAqIFNlbGVjdCBBbGwgQmxvY2tzXG4gICAqIEVhY2ggQmxvY2sgaGFzIHNlbGVjdGVkIHNldHRlciB0aGF0IG1ha2VzIEJsb2NrIGNvcHlhYmxlXG4gICAqL1xuICBzZWxlY3RBbGxCbG9ja3MoKSB7XG4gICAgdGhpcy5zZWxlY3Rpb24uc2F2ZSgpLCBiLmdldCgpLnJlbW92ZUFsbFJhbmdlcygpLCB0aGlzLmFsbEJsb2Nrc1NlbGVjdGVkID0gITAsIHRoaXMuRWRpdG9yLklubGluZVRvb2xiYXIuY2xvc2UoKTtcbiAgfVxufVxuY2xhc3Mgd2UgZXh0ZW5kcyB5IHtcbiAgLyoqXG4gICAqIEFsbG93ZWQgY2FyZXQgcG9zaXRpb25zIGluIGlucHV0XG4gICAqXG4gICAqIEBzdGF0aWNcbiAgICogQHJldHVybnMge3tTVEFSVDogc3RyaW5nLCBFTkQ6IHN0cmluZywgREVGQVVMVDogc3RyaW5nfX1cbiAgICovXG4gIGdldCBwb3NpdGlvbnMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIFNUQVJUOiBcInN0YXJ0XCIsXG4gICAgICBFTkQ6IFwiZW5kXCIsXG4gICAgICBERUZBVUxUOiBcImRlZmF1bHRcIlxuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIEVsZW1lbnRzIHN0eWxlcyB0aGF0IGNhbiBiZSB1c2VmdWwgZm9yIENhcmV0IE1vZHVsZVxuICAgKi9cbiAgc3RhdGljIGdldCBDU1MoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHNoYWRvd0NhcmV0OiBcImNkeC1zaGFkb3ctY2FyZXRcIlxuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIEdldCdzIGRlZXBlc3QgZmlyc3Qgbm9kZSBhbmQgY2hlY2tzIGlmIG9mZnNldCBpcyB6ZXJvXG4gICAqXG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKi9cbiAgZ2V0IGlzQXRTdGFydCgpIHtcbiAgICBjb25zdCB7IGN1cnJlbnRCbG9jazogZSB9ID0gdGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyO1xuICAgIGlmICghZS5mb2N1c2FibGUpXG4gICAgICByZXR1cm4gITA7XG4gICAgY29uc3QgdCA9IGIuZ2V0KCksIG8gPSBjLmdldERlZXBlc3ROb2RlKGUuY3VycmVudElucHV0KTtcbiAgICBsZXQgaSA9IHQuZm9jdXNOb2RlO1xuICAgIGlmIChjLmlzTmF0aXZlSW5wdXQobykpXG4gICAgICByZXR1cm4gby5zZWxlY3Rpb25FbmQgPT09IDA7XG4gICAgaWYgKCF0LmFuY2hvck5vZGUpXG4gICAgICByZXR1cm4gITE7XG4gICAgbGV0IG4gPSBpLnRleHRDb250ZW50LnNlYXJjaCgvXFxTLyk7XG4gICAgbiA9PT0gLTEgJiYgKG4gPSAwKTtcbiAgICBsZXQgciA9IHQuZm9jdXNPZmZzZXQ7XG4gICAgcmV0dXJuIGkubm9kZVR5cGUgIT09IE5vZGUuVEVYVF9OT0RFICYmIGkuY2hpbGROb2Rlcy5sZW5ndGggJiYgKGkuY2hpbGROb2Rlc1tyXSA/IChpID0gaS5jaGlsZE5vZGVzW3JdLCByID0gMCkgOiAoaSA9IGkuY2hpbGROb2Rlc1tyIC0gMV0sIHIgPSBpLnRleHRDb250ZW50Lmxlbmd0aCkpLCAoYy5pc0xpbmVCcmVha1RhZyhvKSB8fCBjLmlzRW1wdHkobykpICYmIHRoaXMuZ2V0SGlnaGVyTGV2ZWxTaWJsaW5ncyhpLCBcImxlZnRcIikuZXZlcnkoKGQpID0+IHtcbiAgICAgIGNvbnN0IHUgPSBjLmlzTGluZUJyZWFrVGFnKGQpLCBoID0gZC5jaGlsZHJlbi5sZW5ndGggPT09IDEgJiYgYy5pc0xpbmVCcmVha1RhZyhkLmNoaWxkcmVuWzBdKSwgZiA9IHUgfHwgaDtcbiAgICAgIHJldHVybiBjLmlzRW1wdHkoZCkgJiYgIWY7XG4gICAgfSkgJiYgciA9PT0gbiA/ICEwIDogbyA9PT0gbnVsbCB8fCBpID09PSBvICYmIHIgPD0gbjtcbiAgfVxuICAvKipcbiAgICogR2V0J3MgZGVlcGVzdCBsYXN0IG5vZGUgYW5kIGNoZWNrcyBpZiBvZmZzZXQgaXMgbGFzdCBub2RlIHRleHQgbGVuZ3RoXG4gICAqXG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKi9cbiAgZ2V0IGlzQXRFbmQoKSB7XG4gICAgY29uc3QgeyBjdXJyZW50QmxvY2s6IGUgfSA9IHRoaXMuRWRpdG9yLkJsb2NrTWFuYWdlcjtcbiAgICBpZiAoIWUuZm9jdXNhYmxlKVxuICAgICAgcmV0dXJuICEwO1xuICAgIGNvbnN0IHQgPSBiLmdldCgpO1xuICAgIGxldCBvID0gdC5mb2N1c05vZGU7XG4gICAgY29uc3QgaSA9IGMuZ2V0RGVlcGVzdE5vZGUoZS5jdXJyZW50SW5wdXQsICEwKTtcbiAgICBpZiAoYy5pc05hdGl2ZUlucHV0KGkpKVxuICAgICAgcmV0dXJuIGkuc2VsZWN0aW9uRW5kID09PSBpLnZhbHVlLmxlbmd0aDtcbiAgICBpZiAoIXQuZm9jdXNOb2RlKVxuICAgICAgcmV0dXJuICExO1xuICAgIGxldCBuID0gdC5mb2N1c09mZnNldDtcbiAgICBpZiAoby5ub2RlVHlwZSAhPT0gTm9kZS5URVhUX05PREUgJiYgby5jaGlsZE5vZGVzLmxlbmd0aCAmJiAoby5jaGlsZE5vZGVzW24gLSAxXSA/IChvID0gby5jaGlsZE5vZGVzW24gLSAxXSwgbiA9IG8udGV4dENvbnRlbnQubGVuZ3RoKSA6IChvID0gby5jaGlsZE5vZGVzWzBdLCBuID0gMCkpLCBjLmlzTGluZUJyZWFrVGFnKGkpIHx8IGMuaXNFbXB0eShpKSkge1xuICAgICAgY29uc3QgYSA9IHRoaXMuZ2V0SGlnaGVyTGV2ZWxTaWJsaW5ncyhvLCBcInJpZ2h0XCIpO1xuICAgICAgaWYgKGEuZXZlcnkoKGQsIHUpID0+IHUgPT09IGEubGVuZ3RoIC0gMSAmJiBjLmlzTGluZUJyZWFrVGFnKGQpIHx8IGMuaXNFbXB0eShkKSAmJiAhYy5pc0xpbmVCcmVha1RhZyhkKSkgJiYgbiA9PT0gby50ZXh0Q29udGVudC5sZW5ndGgpXG4gICAgICAgIHJldHVybiAhMDtcbiAgICB9XG4gICAgY29uc3QgciA9IGkudGV4dENvbnRlbnQucmVwbGFjZSgvXFxzKyQvLCBcIlwiKTtcbiAgICByZXR1cm4gbyA9PT0gaSAmJiBuID49IHIubGVuZ3RoO1xuICB9XG4gIC8qKlxuICAgKiBNZXRob2QgZ2V0cyBCbG9jayBpbnN0YW5jZSBhbmQgcHV0cyBjYXJldCB0byB0aGUgdGV4dCBub2RlIHdpdGggb2Zmc2V0XG4gICAqIFRoZXJlIHR3byB3YXlzIHRoYXQgbWV0aG9kIGFwcGxpZXMgY2FyZXQgcG9zaXRpb246XG4gICAqICAgLSBmaXJzdCBmb3VuZCB0ZXh0IG5vZGU6IHNldHMgYXQgdGhlIGJlZ2lubmluZywgYnV0IHlvdSBjYW4gcGFzcyBhbiBvZmZzZXRcbiAgICogICAtIGxhc3QgZm91bmQgdGV4dCBub2RlOiBzZXRzIGF0IHRoZSBlbmQgb2YgdGhlIG5vZGUuIEFsc28sIHlvdSBjYW4gY3VzdG9taXplIHRoZSBiZWhhdmlvdXJcbiAgICpcbiAgICogQHBhcmFtIHtCbG9ja30gYmxvY2sgLSBCbG9jayBjbGFzc1xuICAgKiBAcGFyYW0ge3N0cmluZ30gcG9zaXRpb24gLSBwb3NpdGlvbiB3aGVyZSB0byBzZXQgY2FyZXQuXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgIElmIGRlZmF1bHQgLSBsZWF2ZSBkZWZhdWx0IGJlaGF2aW91ciBhbmQgYXBwbHkgb2Zmc2V0IGlmIGl0J3MgcGFzc2VkXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBvZmZzZXQgLSBjYXJldCBvZmZzZXQgcmVnYXJkaW5nIHRvIHRoZSB0ZXh0IG5vZGVcbiAgICovXG4gIHNldFRvQmxvY2soZSwgdCA9IHRoaXMucG9zaXRpb25zLkRFRkFVTFQsIG8gPSAwKSB7XG4gICAgdmFyIGQ7XG4gICAgY29uc3QgeyBCbG9ja01hbmFnZXI6IGksIEJsb2NrU2VsZWN0aW9uOiBuIH0gPSB0aGlzLkVkaXRvcjtcbiAgICBpZiAobi5jbGVhclNlbGVjdGlvbigpLCAhZS5mb2N1c2FibGUpIHtcbiAgICAgIChkID0gd2luZG93LmdldFNlbGVjdGlvbigpKSA9PSBudWxsIHx8IGQucmVtb3ZlQWxsUmFuZ2VzKCksIG4uc2VsZWN0QmxvY2soZSksIGkuY3VycmVudEJsb2NrID0gZTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbGV0IHI7XG4gICAgc3dpdGNoICh0KSB7XG4gICAgICBjYXNlIHRoaXMucG9zaXRpb25zLlNUQVJUOlxuICAgICAgICByID0gZS5maXJzdElucHV0O1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgdGhpcy5wb3NpdGlvbnMuRU5EOlxuICAgICAgICByID0gZS5sYXN0SW5wdXQ7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgciA9IGUuY3VycmVudElucHV0O1xuICAgIH1cbiAgICBpZiAoIXIpXG4gICAgICByZXR1cm47XG4gICAgY29uc3QgYSA9IGMuZ2V0RGVlcGVzdE5vZGUociwgdCA9PT0gdGhpcy5wb3NpdGlvbnMuRU5EKSwgbCA9IGMuZ2V0Q29udGVudExlbmd0aChhKTtcbiAgICBzd2l0Y2ggKCEwKSB7XG4gICAgICBjYXNlIHQgPT09IHRoaXMucG9zaXRpb25zLlNUQVJUOlxuICAgICAgICBvID0gMDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIHQgPT09IHRoaXMucG9zaXRpb25zLkVORDpcbiAgICAgIGNhc2UgbyA+IGw6XG4gICAgICAgIG8gPSBsO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gICAgdGhpcy5zZXQoYSwgbyksIGkuc2V0Q3VycmVudEJsb2NrQnlDaGlsZE5vZGUoZS5ob2xkZXIpLCBpLmN1cnJlbnRCbG9jay5jdXJyZW50SW5wdXQgPSByO1xuICB9XG4gIC8qKlxuICAgKiBTZXQgY2FyZXQgdG8gdGhlIGN1cnJlbnQgaW5wdXQgb2YgY3VycmVudCBCbG9jay5cbiAgICpcbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gaW5wdXQgLSBpbnB1dCB3aGVyZSBjYXJldCBzaG91bGQgYmUgc2V0XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBwb3NpdGlvbiAtIHBvc2l0aW9uIG9mIHRoZSBjYXJldC5cbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgSWYgZGVmYXVsdCAtIGxlYXZlIGRlZmF1bHQgYmVoYXZpb3VyIGFuZCBhcHBseSBvZmZzZXQgaWYgaXQncyBwYXNzZWRcbiAgICogQHBhcmFtIHtudW1iZXJ9IG9mZnNldCAtIGNhcmV0IG9mZnNldCByZWdhcmRpbmcgdG8gdGhlIHRleHQgbm9kZVxuICAgKi9cbiAgc2V0VG9JbnB1dChlLCB0ID0gdGhpcy5wb3NpdGlvbnMuREVGQVVMVCwgbyA9IDApIHtcbiAgICBjb25zdCB7IGN1cnJlbnRCbG9jazogaSB9ID0gdGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLCBuID0gYy5nZXREZWVwZXN0Tm9kZShlKTtcbiAgICBzd2l0Y2ggKHQpIHtcbiAgICAgIGNhc2UgdGhpcy5wb3NpdGlvbnMuU1RBUlQ6XG4gICAgICAgIHRoaXMuc2V0KG4sIDApO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgdGhpcy5wb3NpdGlvbnMuRU5EOlxuICAgICAgICB0aGlzLnNldChuLCBjLmdldENvbnRlbnRMZW5ndGgobikpO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIG8gJiYgdGhpcy5zZXQobiwgbyk7XG4gICAgfVxuICAgIGkuY3VycmVudElucHV0ID0gZTtcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlcyBEb2N1bWVudCBSYW5nZSBhbmQgc2V0cyBjYXJldCB0byB0aGUgZWxlbWVudCB3aXRoIG9mZnNldFxuICAgKlxuICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtZW50IC0gdGFyZ2V0IG5vZGUuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBvZmZzZXQgLSBvZmZzZXRcbiAgICovXG4gIHNldChlLCB0ID0gMCkge1xuICAgIGNvbnN0IHsgdG9wOiBpLCBib3R0b206IG4gfSA9IGIuc2V0Q3Vyc29yKGUsIHQpLCB7IGlubmVySGVpZ2h0OiByIH0gPSB3aW5kb3c7XG4gICAgaSA8IDAgPyB3aW5kb3cuc2Nyb2xsQnkoMCwgaSAtIDMwKSA6IG4gPiByICYmIHdpbmRvdy5zY3JvbGxCeSgwLCBuIC0gciArIDMwKTtcbiAgfVxuICAvKipcbiAgICogU2V0IENhcmV0IHRvIHRoZSBsYXN0IEJsb2NrXG4gICAqIElmIGxhc3QgYmxvY2sgaXMgbm90IGVtcHR5LCBhcHBlbmQgYW5vdGhlciBlbXB0eSBibG9ja1xuICAgKi9cbiAgc2V0VG9UaGVMYXN0QmxvY2soKSB7XG4gICAgY29uc3QgZSA9IHRoaXMuRWRpdG9yLkJsb2NrTWFuYWdlci5sYXN0QmxvY2s7XG4gICAgaWYgKGUpXG4gICAgICBpZiAoZS50b29sLmlzRGVmYXVsdCAmJiBlLmlzRW1wdHkpXG4gICAgICAgIHRoaXMuc2V0VG9CbG9jayhlKTtcbiAgICAgIGVsc2Uge1xuICAgICAgICBjb25zdCB0ID0gdGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLmluc2VydEF0RW5kKCk7XG4gICAgICAgIHRoaXMuc2V0VG9CbG9jayh0KTtcbiAgICAgIH1cbiAgfVxuICAvKipcbiAgICogRXh0cmFjdCBjb250ZW50IGZyYWdtZW50IG9mIGN1cnJlbnQgQmxvY2sgZnJvbSBDYXJldCBwb3NpdGlvbiB0byB0aGUgZW5kIG9mIHRoZSBCbG9ja1xuICAgKi9cbiAgZXh0cmFjdEZyYWdtZW50RnJvbUNhcmV0UG9zaXRpb24oKSB7XG4gICAgY29uc3QgZSA9IGIuZ2V0KCk7XG4gICAgaWYgKGUucmFuZ2VDb3VudCkge1xuICAgICAgY29uc3QgdCA9IGUuZ2V0UmFuZ2VBdCgwKSwgbyA9IHRoaXMuRWRpdG9yLkJsb2NrTWFuYWdlci5jdXJyZW50QmxvY2suY3VycmVudElucHV0O1xuICAgICAgaWYgKHQuZGVsZXRlQ29udGVudHMoKSwgbylcbiAgICAgICAgaWYgKGMuaXNOYXRpdmVJbnB1dChvKSkge1xuICAgICAgICAgIGNvbnN0IGkgPSBvLCBuID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLCByID0gaS52YWx1ZS5zdWJzdHJpbmcoMCwgaS5zZWxlY3Rpb25TdGFydCksIGEgPSBpLnZhbHVlLnN1YnN0cmluZyhpLnNlbGVjdGlvblN0YXJ0KTtcbiAgICAgICAgICByZXR1cm4gbi50ZXh0Q29udGVudCA9IGEsIGkudmFsdWUgPSByLCBuO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnN0IGkgPSB0LmNsb25lUmFuZ2UoKTtcbiAgICAgICAgICByZXR1cm4gaS5zZWxlY3ROb2RlQ29udGVudHMobyksIGkuc2V0U3RhcnQodC5lbmRDb250YWluZXIsIHQuZW5kT2Zmc2V0KSwgaS5leHRyYWN0Q29udGVudHMoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgfVxuICAvKipcbiAgICogU2V0J3MgY2FyZXQgdG8gdGhlIG5leHQgQmxvY2sgb3IgVG9vbGBzIGlucHV0XG4gICAqIEJlZm9yZSBtb3ZpbmcgY2FyZXQsIHdlIHNob3VsZCBjaGVjayBpZiBjYXJldCBwb3NpdGlvbiBpcyBhdCB0aGUgZW5kIG9mIFBsdWdpbnMgbm9kZVxuICAgKiBVc2luZyB7QGxpbmsgRG9tI2dldERlZXBlc3ROb2RlfSB0byBnZXQgYSBsYXN0IG5vZGUgYW5kIG1hdGNoIHdpdGggY3VycmVudCBzZWxlY3Rpb25cbiAgICpcbiAgICogQHBhcmFtIHtib29sZWFufSBmb3JjZSAtIHBhc3MgdHJ1ZSB0byBza2lwIGNoZWNrIGZvciBjYXJldCBwb3NpdGlvblxuICAgKi9cbiAgbmF2aWdhdGVOZXh0KGUgPSAhMSkge1xuICAgIGNvbnN0IHsgQmxvY2tNYW5hZ2VyOiB0IH0gPSB0aGlzLkVkaXRvciwgeyBjdXJyZW50QmxvY2s6IG8sIG5leHRCbG9jazogaSB9ID0gdCwgeyBuZXh0SW5wdXQ6IG4gfSA9IG8sIHIgPSB0aGlzLmlzQXRFbmQ7XG4gICAgbGV0IGEgPSBpO1xuICAgIGNvbnN0IGwgPSBlIHx8IHI7XG4gICAgaWYgKG4gJiYgbClcbiAgICAgIHJldHVybiB0aGlzLnNldFRvSW5wdXQobiwgdGhpcy5wb3NpdGlvbnMuU1RBUlQpLCAhMDtcbiAgICBpZiAoYSA9PT0gbnVsbCkge1xuICAgICAgaWYgKG8udG9vbC5pc0RlZmF1bHQgfHwgIWwpXG4gICAgICAgIHJldHVybiAhMTtcbiAgICAgIGEgPSB0Lmluc2VydEF0RW5kKCk7XG4gICAgfVxuICAgIHJldHVybiBsID8gKHRoaXMuc2V0VG9CbG9jayhhLCB0aGlzLnBvc2l0aW9ucy5TVEFSVCksICEwKSA6ICExO1xuICB9XG4gIC8qKlxuICAgKiBTZXQncyBjYXJldCB0byB0aGUgcHJldmlvdXMgVG9vbGBzIGlucHV0IG9yIEJsb2NrXG4gICAqIEJlZm9yZSBtb3ZpbmcgY2FyZXQsIHdlIHNob3VsZCBjaGVjayBpZiBjYXJldCBwb3NpdGlvbiBpcyBzdGFydCBvZiB0aGUgUGx1Z2lucyBub2RlXG4gICAqIFVzaW5nIHtAbGluayBEb20jZ2V0RGVlcGVzdE5vZGV9IHRvIGdldCBhIGxhc3Qgbm9kZSBhbmQgbWF0Y2ggd2l0aCBjdXJyZW50IHNlbGVjdGlvblxuICAgKlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGZvcmNlIC0gcGFzcyB0cnVlIHRvIHNraXAgY2hlY2sgZm9yIGNhcmV0IHBvc2l0aW9uXG4gICAqL1xuICBuYXZpZ2F0ZVByZXZpb3VzKGUgPSAhMSkge1xuICAgIGNvbnN0IHsgY3VycmVudEJsb2NrOiB0LCBwcmV2aW91c0Jsb2NrOiBvIH0gPSB0aGlzLkVkaXRvci5CbG9ja01hbmFnZXI7XG4gICAgaWYgKCF0KVxuICAgICAgcmV0dXJuICExO1xuICAgIGNvbnN0IHsgcHJldmlvdXNJbnB1dDogaSB9ID0gdCwgbiA9IGUgfHwgdGhpcy5pc0F0U3RhcnQ7XG4gICAgcmV0dXJuIGkgJiYgbiA/ICh0aGlzLnNldFRvSW5wdXQoaSwgdGhpcy5wb3NpdGlvbnMuRU5EKSwgITApIDogbyAhPT0gbnVsbCAmJiBuID8gKHRoaXMuc2V0VG9CbG9jayhvLCB0aGlzLnBvc2l0aW9ucy5FTkQpLCAhMCkgOiAhMTtcbiAgfVxuICAvKipcbiAgICogSW5zZXJ0cyBzaGFkb3cgZWxlbWVudCBhZnRlciBwYXNzZWQgZWxlbWVudCB3aGVyZSBjYXJldCBjYW4gYmUgcGxhY2VkXG4gICAqXG4gICAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudCAtIGVsZW1lbnQgYWZ0ZXIgd2hpY2ggc2hhZG93IGNhcmV0IHNob3VsZCBiZSBpbnNlcnRlZFxuICAgKi9cbiAgY3JlYXRlU2hhZG93KGUpIHtcbiAgICBjb25zdCB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XG4gICAgdC5jbGFzc0xpc3QuYWRkKHdlLkNTUy5zaGFkb3dDYXJldCksIGUuaW5zZXJ0QWRqYWNlbnRFbGVtZW50KFwiYmVmb3JlZW5kXCIsIHQpO1xuICB9XG4gIC8qKlxuICAgKiBSZXN0b3JlcyBjYXJldCBwb3NpdGlvblxuICAgKlxuICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtZW50IC0gZWxlbWVudCB3aGVyZSBjYXJldCBzaG91bGQgYmUgcmVzdG9yZWRcbiAgICovXG4gIHJlc3RvcmVDYXJldChlKSB7XG4gICAgY29uc3QgdCA9IGUucXVlcnlTZWxlY3RvcihgLiR7d2UuQ1NTLnNoYWRvd0NhcmV0fWApO1xuICAgIGlmICghdClcbiAgICAgIHJldHVybjtcbiAgICBuZXcgYigpLmV4cGFuZFRvVGFnKHQpO1xuICAgIGNvbnN0IGkgPSBkb2N1bWVudC5jcmVhdGVSYW5nZSgpO1xuICAgIGkuc2VsZWN0Tm9kZSh0KSwgaS5leHRyYWN0Q29udGVudHMoKTtcbiAgfVxuICAvKipcbiAgICogSW5zZXJ0cyBwYXNzZWQgY29udGVudCBhdCBjYXJldCBwb3NpdGlvblxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gY29udGVudCAtIGNvbnRlbnQgdG8gaW5zZXJ0XG4gICAqL1xuICBpbnNlcnRDb250ZW50QXRDYXJldFBvc2l0aW9uKGUpIHtcbiAgICBjb25zdCB0ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLCBvID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSwgaSA9IGIuZ2V0KCksIG4gPSBiLnJhbmdlO1xuICAgIG8uaW5uZXJIVE1MID0gZSwgQXJyYXkuZnJvbShvLmNoaWxkTm9kZXMpLmZvckVhY2goKGQpID0+IHQuYXBwZW5kQ2hpbGQoZCkpLCB0LmNoaWxkTm9kZXMubGVuZ3RoID09PSAwICYmIHQuYXBwZW5kQ2hpbGQobmV3IFRleHQoKSk7XG4gICAgY29uc3QgciA9IHQubGFzdENoaWxkO1xuICAgIG4uZGVsZXRlQ29udGVudHMoKSwgbi5pbnNlcnROb2RlKHQpO1xuICAgIGNvbnN0IGEgPSBkb2N1bWVudC5jcmVhdGVSYW5nZSgpLCBsID0gci5ub2RlVHlwZSA9PT0gTm9kZS5URVhUX05PREUgPyByIDogci5maXJzdENoaWxkO1xuICAgIGwgIT09IG51bGwgJiYgbC50ZXh0Q29udGVudCAhPT0gbnVsbCAmJiBhLnNldFN0YXJ0KGwsIGwudGV4dENvbnRlbnQubGVuZ3RoKSwgaS5yZW1vdmVBbGxSYW5nZXMoKSwgaS5hZGRSYW5nZShhKTtcbiAgfVxuICAvKipcbiAgICogR2V0IGFsbCBmaXJzdC1sZXZlbCAoZmlyc3QgY2hpbGQgb2YgW2NvbnRlbnRlZGl0YWJsZV0pIHNpYmxpbmdzIGZyb20gcGFzc2VkIG5vZGVcbiAgICogVGhlbiB5b3UgY2FuIGNoZWNrIGl0IGZvciBlbXB0aW5lc3NcbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogPGRpdiBjb250ZW50ZWRpdGFibGU+XG4gICAqIDxwPjwvcD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICAgKiA8cD48L3A+ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgbGVmdCBmaXJzdC1sZXZlbCBzaWJsaW5nc1xuICAgKiA8cD48L3A+ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAgICogPGJsb2NrcXVvdGU+PGE+PGI+YWRhZGRhZDwvYj48YT48YmxvY2txdW90ZT4gICAgICAgPC0tIHBhc3NlZCBub2RlIGZvciBleGFtcGxlIDxiPlxuICAgKiA8cD48L3A+ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAgICogPHA+PC9wPiAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHJpZ2h0IGZpcnN0LWxldmVsIHNpYmxpbmdzXG4gICAqIDxwPjwvcD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICAgKiA8L2Rpdj5cbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZnJvbSAtIGVsZW1lbnQgZnJvbSB3aGljaCBzaWJsaW5ncyBzaG91bGQgYmUgc2VhcmNoZWRcbiAgICogQHBhcmFtIHsnbGVmdCcgfCAncmlnaHQnfSBkaXJlY3Rpb24gLSBkaXJlY3Rpb24gb2Ygc2VhcmNoXG4gICAqIEByZXR1cm5zIHtIVE1MRWxlbWVudFtdfVxuICAgKi9cbiAgZ2V0SGlnaGVyTGV2ZWxTaWJsaW5ncyhlLCB0KSB7XG4gICAgbGV0IG8gPSBlO1xuICAgIGNvbnN0IGkgPSBbXTtcbiAgICBmb3IgKDsgby5wYXJlbnROb2RlICYmIG8ucGFyZW50Tm9kZS5jb250ZW50RWRpdGFibGUgIT09IFwidHJ1ZVwiOyApXG4gICAgICBvID0gby5wYXJlbnROb2RlO1xuICAgIGNvbnN0IG4gPSB0ID09PSBcImxlZnRcIiA/IFwicHJldmlvdXNTaWJsaW5nXCIgOiBcIm5leHRTaWJsaW5nXCI7XG4gICAgZm9yICg7IG9bbl07IClcbiAgICAgIG8gPSBvW25dLCBpLnB1c2gobyk7XG4gICAgcmV0dXJuIGk7XG4gIH1cbn1cbmNsYXNzIG5pIGV4dGVuZHMgeSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyksIHRoaXMub25Nb3VzZVVwID0gKCkgPT4ge1xuICAgICAgdGhpcy5saXN0ZW5lcnMub2ZmKGRvY3VtZW50LCBcIm1vdXNlb3ZlclwiLCB0aGlzLm9uTW91c2VPdmVyKSwgdGhpcy5saXN0ZW5lcnMub2ZmKGRvY3VtZW50LCBcIm1vdXNldXBcIiwgdGhpcy5vbk1vdXNlVXApO1xuICAgIH0sIHRoaXMub25Nb3VzZU92ZXIgPSAoZSkgPT4ge1xuICAgICAgY29uc3QgeyBCbG9ja01hbmFnZXI6IHQsIEJsb2NrU2VsZWN0aW9uOiBvIH0gPSB0aGlzLkVkaXRvcjtcbiAgICAgIGlmIChlLnJlbGF0ZWRUYXJnZXQgPT09IG51bGwgJiYgZS50YXJnZXQgPT09IG51bGwpXG4gICAgICAgIHJldHVybjtcbiAgICAgIGNvbnN0IGkgPSB0LmdldEJsb2NrQnlDaGlsZE5vZGUoZS5yZWxhdGVkVGFyZ2V0KSB8fCB0aGlzLmxhc3RTZWxlY3RlZEJsb2NrLCBuID0gdC5nZXRCbG9ja0J5Q2hpbGROb2RlKGUudGFyZ2V0KTtcbiAgICAgIGlmICghKCFpIHx8ICFuKSAmJiBuICE9PSBpKSB7XG4gICAgICAgIGlmIChpID09PSB0aGlzLmZpcnN0U2VsZWN0ZWRCbG9jaykge1xuICAgICAgICAgIGIuZ2V0KCkucmVtb3ZlQWxsUmFuZ2VzKCksIGkuc2VsZWN0ZWQgPSAhMCwgbi5zZWxlY3RlZCA9ICEwLCBvLmNsZWFyQ2FjaGUoKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG4gPT09IHRoaXMuZmlyc3RTZWxlY3RlZEJsb2NrKSB7XG4gICAgICAgICAgaS5zZWxlY3RlZCA9ICExLCBuLnNlbGVjdGVkID0gITEsIG8uY2xlYXJDYWNoZSgpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLkVkaXRvci5JbmxpbmVUb29sYmFyLmNsb3NlKCksIHRoaXMudG9nZ2xlQmxvY2tzU2VsZWN0ZWRTdGF0ZShpLCBuKSwgdGhpcy5sYXN0U2VsZWN0ZWRCbG9jayA9IG47XG4gICAgICB9XG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogTW9kdWxlIHByZXBhcmF0aW9uXG4gICAqXG4gICAqIEByZXR1cm5zIHtQcm9taXNlfVxuICAgKi9cbiAgYXN5bmMgcHJlcGFyZSgpIHtcbiAgICB0aGlzLmxpc3RlbmVycy5vbihkb2N1bWVudCwgXCJtb3VzZWRvd25cIiwgKGUpID0+IHtcbiAgICAgIHRoaXMuZW5hYmxlQ3Jvc3NCbG9ja1NlbGVjdGlvbihlKTtcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogU2V0cyB1cCBsaXN0ZW5lcnNcbiAgICpcbiAgICogQHBhcmFtIHtNb3VzZUV2ZW50fSBldmVudCAtIG1vdXNlIGRvd24gZXZlbnRcbiAgICovXG4gIHdhdGNoU2VsZWN0aW9uKGUpIHtcbiAgICBpZiAoZS5idXR0b24gIT09IFB0LkxFRlQpXG4gICAgICByZXR1cm47XG4gICAgY29uc3QgeyBCbG9ja01hbmFnZXI6IHQgfSA9IHRoaXMuRWRpdG9yO1xuICAgIHRoaXMuZmlyc3RTZWxlY3RlZEJsb2NrID0gdC5nZXRCbG9jayhlLnRhcmdldCksIHRoaXMubGFzdFNlbGVjdGVkQmxvY2sgPSB0aGlzLmZpcnN0U2VsZWN0ZWRCbG9jaywgdGhpcy5saXN0ZW5lcnMub24oZG9jdW1lbnQsIFwibW91c2VvdmVyXCIsIHRoaXMub25Nb3VzZU92ZXIpLCB0aGlzLmxpc3RlbmVycy5vbihkb2N1bWVudCwgXCJtb3VzZXVwXCIsIHRoaXMub25Nb3VzZVVwKTtcbiAgfVxuICAvKipcbiAgICogcmV0dXJuIGJvb2xlYW4gaXMgY3Jvc3MgYmxvY2sgc2VsZWN0aW9uIHN0YXJ0ZWRcbiAgICovXG4gIGdldCBpc0Nyb3NzQmxvY2tTZWxlY3Rpb25TdGFydGVkKCkge1xuICAgIHJldHVybiAhIXRoaXMuZmlyc3RTZWxlY3RlZEJsb2NrICYmICEhdGhpcy5sYXN0U2VsZWN0ZWRCbG9jaztcbiAgfVxuICAvKipcbiAgICogQ2hhbmdlIHNlbGVjdGlvbiBzdGF0ZSBvZiB0aGUgbmV4dCBCbG9ja1xuICAgKiBVc2VkIGZvciBDQlMgdmlhIFNoaWZ0ICsgYXJyb3cga2V5c1xuICAgKlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IG5leHQgLSBpZiB0cnVlLCB0b2dnbGUgbmV4dCBibG9jay4gUHJldmlvdXMgb3RoZXJ3aXNlXG4gICAqL1xuICB0b2dnbGVCbG9ja1NlbGVjdGVkU3RhdGUoZSA9ICEwKSB7XG4gICAgY29uc3QgeyBCbG9ja01hbmFnZXI6IHQsIEJsb2NrU2VsZWN0aW9uOiBvIH0gPSB0aGlzLkVkaXRvcjtcbiAgICB0aGlzLmxhc3RTZWxlY3RlZEJsb2NrIHx8ICh0aGlzLmxhc3RTZWxlY3RlZEJsb2NrID0gdGhpcy5maXJzdFNlbGVjdGVkQmxvY2sgPSB0LmN1cnJlbnRCbG9jayksIHRoaXMuZmlyc3RTZWxlY3RlZEJsb2NrID09PSB0aGlzLmxhc3RTZWxlY3RlZEJsb2NrICYmICh0aGlzLmZpcnN0U2VsZWN0ZWRCbG9jay5zZWxlY3RlZCA9ICEwLCBvLmNsZWFyQ2FjaGUoKSwgYi5nZXQoKS5yZW1vdmVBbGxSYW5nZXMoKSk7XG4gICAgY29uc3QgaSA9IHQuYmxvY2tzLmluZGV4T2YodGhpcy5sYXN0U2VsZWN0ZWRCbG9jaykgKyAoZSA/IDEgOiAtMSksIG4gPSB0LmJsb2Nrc1tpXTtcbiAgICBuICYmICh0aGlzLmxhc3RTZWxlY3RlZEJsb2NrLnNlbGVjdGVkICE9PSBuLnNlbGVjdGVkID8gKG4uc2VsZWN0ZWQgPSAhMCwgby5jbGVhckNhY2hlKCkpIDogKHRoaXMubGFzdFNlbGVjdGVkQmxvY2suc2VsZWN0ZWQgPSAhMSwgby5jbGVhckNhY2hlKCkpLCB0aGlzLmxhc3RTZWxlY3RlZEJsb2NrID0gbiwgdGhpcy5FZGl0b3IuSW5saW5lVG9vbGJhci5jbG9zZSgpLCBuLmhvbGRlci5zY3JvbGxJbnRvVmlldyh7XG4gICAgICBibG9jazogXCJuZWFyZXN0XCJcbiAgICB9KSk7XG4gIH1cbiAgLyoqXG4gICAqIENsZWFyIHNhdmVkIHN0YXRlXG4gICAqXG4gICAqIEBwYXJhbSB7RXZlbnR9IHJlYXNvbiAtIGV2ZW50IGNhdXNlZCBjbGVhciBvZiBzZWxlY3Rpb25cbiAgICovXG4gIGNsZWFyKGUpIHtcbiAgICBjb25zdCB7IEJsb2NrTWFuYWdlcjogdCwgQmxvY2tTZWxlY3Rpb246IG8sIENhcmV0OiBpIH0gPSB0aGlzLkVkaXRvciwgbiA9IHQuYmxvY2tzLmluZGV4T2YodGhpcy5maXJzdFNlbGVjdGVkQmxvY2spLCByID0gdC5ibG9ja3MuaW5kZXhPZih0aGlzLmxhc3RTZWxlY3RlZEJsb2NrKTtcbiAgICBpZiAoby5hbnlCbG9ja1NlbGVjdGVkICYmIG4gPiAtMSAmJiByID4gLTEgJiYgZSAmJiBlIGluc3RhbmNlb2YgS2V5Ym9hcmRFdmVudClcbiAgICAgIHN3aXRjaCAoZS5rZXlDb2RlKSB7XG4gICAgICAgIGNhc2Ugay5ET1dOOlxuICAgICAgICBjYXNlIGsuUklHSFQ6XG4gICAgICAgICAgaS5zZXRUb0Jsb2NrKHQuYmxvY2tzW01hdGgubWF4KG4sIHIpXSwgaS5wb3NpdGlvbnMuRU5EKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBrLlVQOlxuICAgICAgICBjYXNlIGsuTEVGVDpcbiAgICAgICAgICBpLnNldFRvQmxvY2sodC5ibG9ja3NbTWF0aC5taW4obiwgcildLCBpLnBvc2l0aW9ucy5TVEFSVCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgaS5zZXRUb0Jsb2NrKHQuYmxvY2tzW01hdGgubWF4KG4sIHIpXSwgaS5wb3NpdGlvbnMuRU5EKTtcbiAgICAgIH1cbiAgICB0aGlzLmZpcnN0U2VsZWN0ZWRCbG9jayA9IHRoaXMubGFzdFNlbGVjdGVkQmxvY2sgPSBudWxsO1xuICB9XG4gIC8qKlxuICAgKiBFbmFibGVzIENyb3NzIEJsb2NrIFNlbGVjdGlvblxuICAgKlxuICAgKiBAcGFyYW0ge01vdXNlRXZlbnR9IGV2ZW50IC0gbW91c2UgZG93biBldmVudFxuICAgKi9cbiAgZW5hYmxlQ3Jvc3NCbG9ja1NlbGVjdGlvbihlKSB7XG4gICAgY29uc3QgeyBVSTogdCB9ID0gdGhpcy5FZGl0b3I7XG4gICAgYi5pc0NvbGxhcHNlZCB8fCB0aGlzLkVkaXRvci5CbG9ja1NlbGVjdGlvbi5jbGVhclNlbGVjdGlvbihlKSwgdC5ub2Rlcy5yZWRhY3Rvci5jb250YWlucyhlLnRhcmdldCkgPyB0aGlzLndhdGNoU2VsZWN0aW9uKGUpIDogdGhpcy5FZGl0b3IuQmxvY2tTZWxlY3Rpb24uY2xlYXJTZWxlY3Rpb24oZSk7XG4gIH1cbiAgLyoqXG4gICAqIENoYW5nZSBibG9ja3Mgc2VsZWN0aW9uIHN0YXRlIGJldHdlZW4gcGFzc2VkIHR3byBibG9ja3MuXG4gICAqXG4gICAqIEBwYXJhbSB7QmxvY2t9IGZpcnN0QmxvY2sgLSBmaXJzdCBibG9jayBpbiByYW5nZVxuICAgKiBAcGFyYW0ge0Jsb2NrfSBsYXN0QmxvY2sgLSBsYXN0IGJsb2NrIGluIHJhbmdlXG4gICAqL1xuICB0b2dnbGVCbG9ja3NTZWxlY3RlZFN0YXRlKGUsIHQpIHtcbiAgICBjb25zdCB7IEJsb2NrTWFuYWdlcjogbywgQmxvY2tTZWxlY3Rpb246IGkgfSA9IHRoaXMuRWRpdG9yLCBuID0gby5ibG9ja3MuaW5kZXhPZihlKSwgciA9IG8uYmxvY2tzLmluZGV4T2YodCksIGEgPSBlLnNlbGVjdGVkICE9PSB0LnNlbGVjdGVkO1xuICAgIGZvciAobGV0IGwgPSBNYXRoLm1pbihuLCByKTsgbCA8PSBNYXRoLm1heChuLCByKTsgbCsrKSB7XG4gICAgICBjb25zdCBkID0gby5ibG9ja3NbbF07XG4gICAgICBkICE9PSB0aGlzLmZpcnN0U2VsZWN0ZWRCbG9jayAmJiBkICE9PSAoYSA/IGUgOiB0KSAmJiAoby5ibG9ja3NbbF0uc2VsZWN0ZWQgPSAhby5ibG9ja3NbbF0uc2VsZWN0ZWQsIGkuY2xlYXJDYWNoZSgpKTtcbiAgICB9XG4gIH1cbn1cbmNsYXNzIHNpIGV4dGVuZHMgeSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyksIHRoaXMuaXNTdGFydGVkQXRFZGl0b3IgPSAhMTtcbiAgfVxuICAvKipcbiAgICogVG9nZ2xlIHJlYWQtb25seSBzdGF0ZVxuICAgKlxuICAgKiBpZiBzdGF0ZSBpcyB0cnVlOlxuICAgKiAgLSBkaXNhYmxlIGFsbCBkcmFnLW4tZHJvcCBldmVudCBoYW5kbGVyc1xuICAgKlxuICAgKiBpZiBzdGF0ZSBpcyBmYWxzZTpcbiAgICogIC0gcmVzdG9yZSBkcmFnLW4tZHJvcCBldmVudCBoYW5kbGVyc1xuICAgKlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHJlYWRPbmx5RW5hYmxlZCAtIFwicmVhZCBvbmx5XCIgc3RhdGVcbiAgICovXG4gIHRvZ2dsZVJlYWRPbmx5KGUpIHtcbiAgICBlID8gdGhpcy5kaXNhYmxlTW9kdWxlQmluZGluZ3MoKSA6IHRoaXMuZW5hYmxlTW9kdWxlQmluZGluZ3MoKTtcbiAgfVxuICAvKipcbiAgICogQWRkIGRyYWcgZXZlbnRzIGxpc3RlbmVycyB0byBlZGl0b3Igem9uZVxuICAgKi9cbiAgZW5hYmxlTW9kdWxlQmluZGluZ3MoKSB7XG4gICAgY29uc3QgeyBVSTogZSB9ID0gdGhpcy5FZGl0b3I7XG4gICAgdGhpcy5yZWFkT25seU11dGFibGVMaXN0ZW5lcnMub24oZS5ub2Rlcy5ob2xkZXIsIFwiZHJvcFwiLCBhc3luYyAodCkgPT4ge1xuICAgICAgYXdhaXQgdGhpcy5wcm9jZXNzRHJvcCh0KTtcbiAgICB9LCAhMCksIHRoaXMucmVhZE9ubHlNdXRhYmxlTGlzdGVuZXJzLm9uKGUubm9kZXMuaG9sZGVyLCBcImRyYWdzdGFydFwiLCAoKSA9PiB7XG4gICAgICB0aGlzLnByb2Nlc3NEcmFnU3RhcnQoKTtcbiAgICB9KSwgdGhpcy5yZWFkT25seU11dGFibGVMaXN0ZW5lcnMub24oZS5ub2Rlcy5ob2xkZXIsIFwiZHJhZ292ZXJcIiwgKHQpID0+IHtcbiAgICAgIHRoaXMucHJvY2Vzc0RyYWdPdmVyKHQpO1xuICAgIH0sICEwKTtcbiAgfVxuICAvKipcbiAgICogVW5iaW5kIGRyYWctbi1kcm9wIGV2ZW50IGhhbmRsZXJzXG4gICAqL1xuICBkaXNhYmxlTW9kdWxlQmluZGluZ3MoKSB7XG4gICAgdGhpcy5yZWFkT25seU11dGFibGVMaXN0ZW5lcnMuY2xlYXJBbGwoKTtcbiAgfVxuICAvKipcbiAgICogSGFuZGxlIGRyb3AgZXZlbnRcbiAgICpcbiAgICogQHBhcmFtIHtEcmFnRXZlbnR9IGRyb3BFdmVudCAtIGRyb3AgZXZlbnRcbiAgICovXG4gIGFzeW5jIHByb2Nlc3NEcm9wKGUpIHtcbiAgICBjb25zdCB7XG4gICAgICBCbG9ja01hbmFnZXI6IHQsXG4gICAgICBDYXJldDogbyxcbiAgICAgIFBhc3RlOiBpXG4gICAgfSA9IHRoaXMuRWRpdG9yO1xuICAgIGUucHJldmVudERlZmF1bHQoKSwgdC5ibG9ja3MuZm9yRWFjaCgocikgPT4ge1xuICAgICAgci5kcm9wVGFyZ2V0ID0gITE7XG4gICAgfSksIGIuaXNBdEVkaXRvciAmJiAhYi5pc0NvbGxhcHNlZCAmJiB0aGlzLmlzU3RhcnRlZEF0RWRpdG9yICYmIGRvY3VtZW50LmV4ZWNDb21tYW5kKFwiZGVsZXRlXCIpLCB0aGlzLmlzU3RhcnRlZEF0RWRpdG9yID0gITE7XG4gICAgY29uc3QgbiA9IHQuc2V0Q3VycmVudEJsb2NrQnlDaGlsZE5vZGUoZS50YXJnZXQpO1xuICAgIGlmIChuKVxuICAgICAgdGhpcy5FZGl0b3IuQ2FyZXQuc2V0VG9CbG9jayhuLCBvLnBvc2l0aW9ucy5FTkQpO1xuICAgIGVsc2Uge1xuICAgICAgY29uc3QgciA9IHQuc2V0Q3VycmVudEJsb2NrQnlDaGlsZE5vZGUodC5sYXN0QmxvY2suaG9sZGVyKTtcbiAgICAgIHRoaXMuRWRpdG9yLkNhcmV0LnNldFRvQmxvY2sociwgby5wb3NpdGlvbnMuRU5EKTtcbiAgICB9XG4gICAgYXdhaXQgaS5wcm9jZXNzRGF0YVRyYW5zZmVyKGUuZGF0YVRyYW5zZmVyLCAhMCk7XG4gIH1cbiAgLyoqXG4gICAqIEhhbmRsZSBkcmFnIHN0YXJ0IGV2ZW50XG4gICAqL1xuICBwcm9jZXNzRHJhZ1N0YXJ0KCkge1xuICAgIGIuaXNBdEVkaXRvciAmJiAhYi5pc0NvbGxhcHNlZCAmJiAodGhpcy5pc1N0YXJ0ZWRBdEVkaXRvciA9ICEwKSwgdGhpcy5FZGl0b3IuSW5saW5lVG9vbGJhci5jbG9zZSgpO1xuICB9XG4gIC8qKlxuICAgKiBAcGFyYW0ge0RyYWdFdmVudH0gZHJhZ0V2ZW50IC0gZHJhZyBldmVudFxuICAgKi9cbiAgcHJvY2Vzc0RyYWdPdmVyKGUpIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gIH1cbn1cbmNsYXNzIHJpIGV4dGVuZHMgeSB7XG4gIC8qKlxuICAgKiBQcmVwYXJlIHRoZSBtb2R1bGVcbiAgICpcbiAgICogQHBhcmFtIG9wdGlvbnMgLSBvcHRpb25zIHVzZWQgYnkgdGhlIG1vZGlmaWNhdGlvbiBvYnNlcnZlciBtb2R1bGVcbiAgICogQHBhcmFtIG9wdGlvbnMuY29uZmlnIC0gRWRpdG9yIGNvbmZpZ3VyYXRpb24gb2JqZWN0XG4gICAqIEBwYXJhbSBvcHRpb25zLmV2ZW50c0Rpc3BhdGNoZXIgLSBjb21tb24gRWRpdG9yIGV2ZW50IGJ1c1xuICAgKi9cbiAgY29uc3RydWN0b3IoeyBjb25maWc6IGUsIGV2ZW50c0Rpc3BhdGNoZXI6IHQgfSkge1xuICAgIHN1cGVyKHtcbiAgICAgIGNvbmZpZzogZSxcbiAgICAgIGV2ZW50c0Rpc3BhdGNoZXI6IHRcbiAgICB9KSwgdGhpcy5kaXNhYmxlZCA9ICExLCB0aGlzLmJhdGNoaW5nVGltZW91dCA9IG51bGwsIHRoaXMuYmF0Y2hpbmdPbkNoYW5nZVF1ZXVlID0gLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKSwgdGhpcy5iYXRjaFRpbWUgPSA0MDAsIHRoaXMubXV0YXRpb25PYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKChvKSA9PiB7XG4gICAgICB0aGlzLnJlZGFjdG9yQ2hhbmdlZChvKTtcbiAgICB9KSwgdGhpcy5ldmVudHNEaXNwYXRjaGVyLm9uKHB0LCAobykgPT4ge1xuICAgICAgdGhpcy5wYXJ0aWN1bGFyQmxvY2tDaGFuZ2VkKG8uZXZlbnQpO1xuICAgIH0pLCB0aGlzLmV2ZW50c0Rpc3BhdGNoZXIub24oZnQsICgpID0+IHtcbiAgICAgIHRoaXMuZGlzYWJsZSgpO1xuICAgIH0pLCB0aGlzLmV2ZW50c0Rpc3BhdGNoZXIub24oZ3QsICgpID0+IHtcbiAgICAgIHRoaXMuZW5hYmxlKCk7XG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIEVuYWJsZXMgb25DaGFuZ2UgZXZlbnRcbiAgICovXG4gIGVuYWJsZSgpIHtcbiAgICB0aGlzLm11dGF0aW9uT2JzZXJ2ZXIub2JzZXJ2ZShcbiAgICAgIHRoaXMuRWRpdG9yLlVJLm5vZGVzLnJlZGFjdG9yLFxuICAgICAge1xuICAgICAgICBjaGlsZExpc3Q6ICEwLFxuICAgICAgICBzdWJ0cmVlOiAhMCxcbiAgICAgICAgY2hhcmFjdGVyRGF0YTogITAsXG4gICAgICAgIGF0dHJpYnV0ZXM6ICEwXG4gICAgICB9XG4gICAgKSwgdGhpcy5kaXNhYmxlZCA9ICExO1xuICB9XG4gIC8qKlxuICAgKiBEaXNhYmxlcyBvbkNoYW5nZSBldmVudFxuICAgKi9cbiAgZGlzYWJsZSgpIHtcbiAgICB0aGlzLm11dGF0aW9uT2JzZXJ2ZXIuZGlzY29ubmVjdCgpLCB0aGlzLmRpc2FibGVkID0gITA7XG4gIH1cbiAgLyoqXG4gICAqIENhbGwgb25DaGFuZ2UgZXZlbnQgcGFzc2VkIHRvIEVkaXRvci5qcyBjb25maWd1cmF0aW9uXG4gICAqXG4gICAqIEBwYXJhbSBldmVudCAtIHNvbWUgb2Ygb3VyIGN1c3RvbSBjaGFuZ2UgZXZlbnRzXG4gICAqL1xuICBwYXJ0aWN1bGFyQmxvY2tDaGFuZ2VkKGUpIHtcbiAgICB0aGlzLmRpc2FibGVkIHx8ICFNKHRoaXMuY29uZmlnLm9uQ2hhbmdlKSB8fCAodGhpcy5iYXRjaGluZ09uQ2hhbmdlUXVldWUuc2V0KGBibG9jazoke2UuZGV0YWlsLnRhcmdldC5pZH06ZXZlbnQ6JHtlLnR5cGV9YCwgZSksIHRoaXMuYmF0Y2hpbmdUaW1lb3V0ICYmIGNsZWFyVGltZW91dCh0aGlzLmJhdGNoaW5nVGltZW91dCksIHRoaXMuYmF0Y2hpbmdUaW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBsZXQgdDtcbiAgICAgIHRoaXMuYmF0Y2hpbmdPbkNoYW5nZVF1ZXVlLnNpemUgPT09IDEgPyB0ID0gdGhpcy5iYXRjaGluZ09uQ2hhbmdlUXVldWUudmFsdWVzKCkubmV4dCgpLnZhbHVlIDogdCA9IEFycmF5LmZyb20odGhpcy5iYXRjaGluZ09uQ2hhbmdlUXVldWUudmFsdWVzKCkpLCB0aGlzLmNvbmZpZy5vbkNoYW5nZSAmJiB0aGlzLmNvbmZpZy5vbkNoYW5nZSh0aGlzLkVkaXRvci5BUEkubWV0aG9kcywgdCksIHRoaXMuYmF0Y2hpbmdPbkNoYW5nZVF1ZXVlLmNsZWFyKCk7XG4gICAgfSwgdGhpcy5iYXRjaFRpbWUpKTtcbiAgfVxuICAvKipcbiAgICogRmlyZWQgb24gZXZlcnkgYmxvY2tzIHdyYXBwZXIgZG9tIGNoYW5nZVxuICAgKlxuICAgKiBAcGFyYW0gbXV0YXRpb25zIC0gbXV0YXRpb25zIGhhcHBlbmVkXG4gICAqL1xuICByZWRhY3RvckNoYW5nZWQoZSkge1xuICAgIHRoaXMuZXZlbnRzRGlzcGF0Y2hlci5lbWl0KEFlLCB7XG4gICAgICBtdXRhdGlvbnM6IGVcbiAgICB9KTtcbiAgfVxufVxuY29uc3QgQ3QgPSBjbGFzcyBleHRlbmRzIHkge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlciguLi5hcmd1bWVudHMpLCB0aGlzLk1JTUVfVFlQRSA9IFwiYXBwbGljYXRpb24veC1lZGl0b3ItanNcIiwgdGhpcy50b29sc1RhZ3MgPSB7fSwgdGhpcy50YWdzQnlUb29sID0ge30sIHRoaXMudG9vbHNQYXR0ZXJucyA9IFtdLCB0aGlzLnRvb2xzRmlsZXMgPSB7fSwgdGhpcy5leGNlcHRpb25MaXN0ID0gW10sIHRoaXMucHJvY2Vzc1Rvb2wgPSAocykgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgZSA9IHMuY3JlYXRlKHt9LCB7fSwgITEpO1xuICAgICAgICBpZiAocy5wYXN0ZUNvbmZpZyA9PT0gITEpIHtcbiAgICAgICAgICB0aGlzLmV4Y2VwdGlvbkxpc3QucHVzaChzLm5hbWUpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIU0oZS5vblBhc3RlKSlcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIHRoaXMuZ2V0VGFnc0NvbmZpZyhzKSwgdGhpcy5nZXRGaWxlc0NvbmZpZyhzKSwgdGhpcy5nZXRQYXR0ZXJuc0NvbmZpZyhzKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgVChcbiAgICAgICAgICBgUGFzdGUgaGFuZGxpbmcgZm9yIMKrJHtzLm5hbWV9wrsgVG9vbCBoYXNuJ3QgYmVlbiBzZXQgdXAgYmVjYXVzZSBvZiB0aGUgZXJyb3JgLFxuICAgICAgICAgIFwid2FyblwiLFxuICAgICAgICAgIGVcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9LCB0aGlzLmhhbmRsZVBhc3RlRXZlbnQgPSBhc3luYyAocykgPT4ge1xuICAgICAgY29uc3QgeyBCbG9ja01hbmFnZXI6IGUsIFRvb2xiYXI6IHQgfSA9IHRoaXMuRWRpdG9yLCBvID0gZS5zZXRDdXJyZW50QmxvY2tCeUNoaWxkTm9kZShzLnRhcmdldCk7XG4gICAgICAhbyB8fCB0aGlzLmlzTmF0aXZlQmVoYXZpb3VyKHMudGFyZ2V0KSAmJiAhcy5jbGlwYm9hcmREYXRhLnR5cGVzLmluY2x1ZGVzKFwiRmlsZXNcIikgfHwgbyAmJiB0aGlzLmV4Y2VwdGlvbkxpc3QuaW5jbHVkZXMoby5uYW1lKSB8fCAocy5wcmV2ZW50RGVmYXVsdCgpLCB0aGlzLnByb2Nlc3NEYXRhVHJhbnNmZXIocy5jbGlwYm9hcmREYXRhKSwgdC5jbG9zZSgpKTtcbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBTZXQgb25QYXN0ZSBjYWxsYmFjayBhbmQgY29sbGVjdCB0b29sc2AgcGFzdGUgY29uZmlndXJhdGlvbnNcbiAgICovXG4gIGFzeW5jIHByZXBhcmUoKSB7XG4gICAgdGhpcy5wcm9jZXNzVG9vbHMoKTtcbiAgfVxuICAvKipcbiAgICogU2V0IHJlYWQtb25seSBzdGF0ZVxuICAgKlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHJlYWRPbmx5RW5hYmxlZCAtIHJlYWQgb25seSBmbGFnIHZhbHVlXG4gICAqL1xuICB0b2dnbGVSZWFkT25seShzKSB7XG4gICAgcyA/IHRoaXMudW5zZXRDYWxsYmFjaygpIDogdGhpcy5zZXRDYWxsYmFjaygpO1xuICB9XG4gIC8qKlxuICAgKiBIYW5kbGUgcGFzdGVkIG9yIGRyb3BwZWQgZGF0YSB0cmFuc2ZlciBvYmplY3RcbiAgICpcbiAgICogQHBhcmFtIHtEYXRhVHJhbnNmZXJ9IGRhdGFUcmFuc2ZlciAtIHBhc3RlZCBvciBkcm9wcGVkIGRhdGEgdHJhbnNmZXIgb2JqZWN0XG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gaXNEcmFnTkRyb3AgLSB0cnVlIGlmIGRhdGEgdHJhbnNmZXIgY29tZXMgZnJvbSBkcmFnJ24nZHJvcCBldmVudHNcbiAgICovXG4gIGFzeW5jIHByb2Nlc3NEYXRhVHJhbnNmZXIocywgZSA9ICExKSB7XG4gICAgY29uc3QgeyBUb29sczogdCB9ID0gdGhpcy5FZGl0b3IsIG8gPSBzLnR5cGVzO1xuICAgIGlmICgoby5pbmNsdWRlcyA/IG8uaW5jbHVkZXMoXCJGaWxlc1wiKSA6IG8uY29udGFpbnMoXCJGaWxlc1wiKSkgJiYgIVcodGhpcy50b29sc0ZpbGVzKSkge1xuICAgICAgYXdhaXQgdGhpcy5wcm9jZXNzRmlsZXMocy5maWxlcyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IG4gPSBzLmdldERhdGEodGhpcy5NSU1FX1RZUEUpLCByID0gcy5nZXREYXRhKFwidGV4dC9wbGFpblwiKTtcbiAgICBsZXQgYSA9IHMuZ2V0RGF0YShcInRleHQvaHRtbFwiKTtcbiAgICBpZiAobilcbiAgICAgIHRyeSB7XG4gICAgICAgIHRoaXMuaW5zZXJ0RWRpdG9ySlNEYXRhKEpTT04ucGFyc2UobikpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9IGNhdGNoIHtcbiAgICAgIH1cbiAgICBlICYmIHIudHJpbSgpICYmIGEudHJpbSgpICYmIChhID0gXCI8cD5cIiArIChhLnRyaW0oKSA/IGEgOiByKSArIFwiPC9wPlwiKTtcbiAgICBjb25zdCBsID0gT2JqZWN0LmtleXModGhpcy50b29sc1RhZ3MpLnJlZHVjZSgoaCwgZikgPT4gKGhbZi50b0xvd2VyQ2FzZSgpXSA9IHRoaXMudG9vbHNUYWdzW2ZdLnNhbml0aXphdGlvbkNvbmZpZyA/PyB7fSwgaCksIHt9KSwgZCA9IE9iamVjdC5hc3NpZ24oe30sIGwsIHQuZ2V0QWxsSW5saW5lVG9vbHNTYW5pdGl6ZUNvbmZpZygpLCB7IGJyOiB7fSB9KSwgdSA9IFYoYSwgZCk7XG4gICAgIXUudHJpbSgpIHx8IHUudHJpbSgpID09PSByIHx8ICFjLmlzSFRNTFN0cmluZyh1KSA/IGF3YWl0IHRoaXMucHJvY2Vzc1RleHQocikgOiBhd2FpdCB0aGlzLnByb2Nlc3NUZXh0KHUsICEwKTtcbiAgfVxuICAvKipcbiAgICogUHJvY2VzcyBwYXN0ZWQgdGV4dCBhbmQgZGl2aWRlIHRoZW0gaW50byBCbG9ja3NcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGRhdGEgLSB0ZXh0IHRvIHByb2Nlc3MuIENhbiBiZSBIVE1MIG9yIHBsYWluLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGlzSFRNTCAtIGlmIHBhc3NlZCBzdHJpbmcgaXMgSFRNTCwgdGhpcyBwYXJhbWV0ZXIgc2hvdWxkIGJlIHRydWVcbiAgICovXG4gIGFzeW5jIHByb2Nlc3NUZXh0KHMsIGUgPSAhMSkge1xuICAgIGNvbnN0IHsgQ2FyZXQ6IHQsIEJsb2NrTWFuYWdlcjogbyB9ID0gdGhpcy5FZGl0b3IsIGkgPSBlID8gdGhpcy5wcm9jZXNzSFRNTChzKSA6IHRoaXMucHJvY2Vzc1BsYWluKHMpO1xuICAgIGlmICghaS5sZW5ndGgpXG4gICAgICByZXR1cm47XG4gICAgaWYgKGkubGVuZ3RoID09PSAxKSB7XG4gICAgICBpWzBdLmlzQmxvY2sgPyB0aGlzLnByb2Nlc3NTaW5nbGVCbG9jayhpLnBvcCgpKSA6IHRoaXMucHJvY2Vzc0lubGluZVBhc3RlKGkucG9wKCkpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCByID0gby5jdXJyZW50QmxvY2sgJiYgby5jdXJyZW50QmxvY2sudG9vbC5pc0RlZmF1bHQgJiYgby5jdXJyZW50QmxvY2suaXNFbXB0eTtcbiAgICBpLm1hcChcbiAgICAgIGFzeW5jIChhLCBsKSA9PiB0aGlzLmluc2VydEJsb2NrKGEsIGwgPT09IDAgJiYgcilcbiAgICApLCBvLmN1cnJlbnRCbG9jayAmJiB0LnNldFRvQmxvY2soby5jdXJyZW50QmxvY2ssIHQucG9zaXRpb25zLkVORCk7XG4gIH1cbiAgLyoqXG4gICAqIFNldCBvblBhc3RlIGNhbGxiYWNrIGhhbmRsZXJcbiAgICovXG4gIHNldENhbGxiYWNrKCkge1xuICAgIHRoaXMubGlzdGVuZXJzLm9uKHRoaXMuRWRpdG9yLlVJLm5vZGVzLmhvbGRlciwgXCJwYXN0ZVwiLCB0aGlzLmhhbmRsZVBhc3RlRXZlbnQpO1xuICB9XG4gIC8qKlxuICAgKiBVbnNldCBvblBhc3RlIGNhbGxiYWNrIGhhbmRsZXJcbiAgICovXG4gIHVuc2V0Q2FsbGJhY2soKSB7XG4gICAgdGhpcy5saXN0ZW5lcnMub2ZmKHRoaXMuRWRpdG9yLlVJLm5vZGVzLmhvbGRlciwgXCJwYXN0ZVwiLCB0aGlzLmhhbmRsZVBhc3RlRXZlbnQpO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgYW5kIHByb2Nlc3MgdG9vbGBzIHBhc3RlIGNvbmZpZ3NcbiAgICovXG4gIHByb2Nlc3NUb29scygpIHtcbiAgICBjb25zdCBzID0gdGhpcy5FZGl0b3IuVG9vbHMuYmxvY2tUb29scztcbiAgICBBcnJheS5mcm9tKHMudmFsdWVzKCkpLmZvckVhY2godGhpcy5wcm9jZXNzVG9vbCk7XG4gIH1cbiAgLyoqXG4gICAqIEdldCB0YWdzIG5hbWUgbGlzdCBmcm9tIGVpdGhlciB0YWcgbmFtZSBvciBzYW5pdGl6YXRpb24gY29uZmlnLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZyB8IG9iamVjdH0gdGFnT3JTYW5pdGl6ZUNvbmZpZyAtIHRhZyBuYW1lIG9yIHNhbml0aXplIGNvbmZpZyBvYmplY3QuXG4gICAqIEByZXR1cm5zIHtzdHJpbmdbXX0gYXJyYXkgb2YgdGFncy5cbiAgICovXG4gIGNvbGxlY3RUYWdOYW1lcyhzKSB7XG4gICAgcmV0dXJuIEcocykgPyBbc10gOiBEKHMpID8gT2JqZWN0LmtleXMocykgOiBbXTtcbiAgfVxuICAvKipcbiAgICogR2V0IHRhZ3MgdG8gc3Vic3RpdHV0ZSBieSBUb29sXG4gICAqXG4gICAqIEBwYXJhbSB0b29sIC0gQmxvY2tUb29sIG9iamVjdFxuICAgKi9cbiAgZ2V0VGFnc0NvbmZpZyhzKSB7XG4gICAgaWYgKHMucGFzdGVDb25maWcgPT09ICExKVxuICAgICAgcmV0dXJuO1xuICAgIGNvbnN0IGUgPSBzLnBhc3RlQ29uZmlnLnRhZ3MgfHwgW10sIHQgPSBbXTtcbiAgICBlLmZvckVhY2goKG8pID0+IHtcbiAgICAgIGNvbnN0IGkgPSB0aGlzLmNvbGxlY3RUYWdOYW1lcyhvKTtcbiAgICAgIHQucHVzaCguLi5pKSwgaS5mb3JFYWNoKChuKSA9PiB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodGhpcy50b29sc1RhZ3MsIG4pKSB7XG4gICAgICAgICAgVChcbiAgICAgICAgICAgIGBQYXN0ZSBoYW5kbGVyIGZvciDCqyR7cy5uYW1lfcK7IFRvb2wgb24gwqske259wrsgdGFnIGlzIHNraXBwZWQgYmVjYXVzZSBpdCBpcyBhbHJlYWR5IHVzZWQgYnkgwqske3RoaXMudG9vbHNUYWdzW25dLnRvb2wubmFtZX3CuyBUb29sLmAsXG4gICAgICAgICAgICBcIndhcm5cIlxuICAgICAgICAgICk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHIgPSBEKG8pID8gb1tuXSA6IG51bGw7XG4gICAgICAgIHRoaXMudG9vbHNUYWdzW24udG9VcHBlckNhc2UoKV0gPSB7XG4gICAgICAgICAgdG9vbDogcyxcbiAgICAgICAgICBzYW5pdGl6YXRpb25Db25maWc6IHJcbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICAgIH0pLCB0aGlzLnRhZ3NCeVRvb2xbcy5uYW1lXSA9IHQubWFwKChvKSA9PiBvLnRvVXBwZXJDYXNlKCkpO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgZmlsZXNgIHR5cGVzIGFuZCBleHRlbnNpb25zIHRvIHN1YnN0aXR1dGUgYnkgVG9vbFxuICAgKlxuICAgKiBAcGFyYW0gdG9vbCAtIEJsb2NrVG9vbCBvYmplY3RcbiAgICovXG4gIGdldEZpbGVzQ29uZmlnKHMpIHtcbiAgICBpZiAocy5wYXN0ZUNvbmZpZyA9PT0gITEpXG4gICAgICByZXR1cm47XG4gICAgY29uc3QgeyBmaWxlczogZSA9IHt9IH0gPSBzLnBhc3RlQ29uZmlnO1xuICAgIGxldCB7IGV4dGVuc2lvbnM6IHQsIG1pbWVUeXBlczogbyB9ID0gZTtcbiAgICAhdCAmJiAhbyB8fCAodCAmJiAhQXJyYXkuaXNBcnJheSh0KSAmJiAoVChgwqtleHRlbnNpb25zwrsgcHJvcGVydHkgb2YgdGhlIG9uRHJvcCBjb25maWcgZm9yIMKrJHtzLm5hbWV9wrsgVG9vbCBzaG91bGQgYmUgYW4gYXJyYXlgKSwgdCA9IFtdKSwgbyAmJiAhQXJyYXkuaXNBcnJheShvKSAmJiAoVChgwqttaW1lVHlwZXPCuyBwcm9wZXJ0eSBvZiB0aGUgb25Ecm9wIGNvbmZpZyBmb3Igwqske3MubmFtZX3CuyBUb29sIHNob3VsZCBiZSBhbiBhcnJheWApLCBvID0gW10pLCBvICYmIChvID0gby5maWx0ZXIoKGkpID0+IGp0KGkpID8gITAgOiAoVChgTUlNRSB0eXBlIHZhbHVlIMKrJHtpfcK7IGZvciB0aGUgwqske3MubmFtZX3CuyBUb29sIGlzIG5vdCBhIHZhbGlkIE1JTUUgdHlwZWAsIFwid2FyblwiKSwgITEpKSksIHRoaXMudG9vbHNGaWxlc1tzLm5hbWVdID0ge1xuICAgICAgZXh0ZW5zaW9uczogdCB8fCBbXSxcbiAgICAgIG1pbWVUeXBlczogbyB8fCBbXVxuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgUmVnRXhwIHBhdHRlcm5zIHRvIHN1YnN0aXR1dGUgYnkgVG9vbFxuICAgKlxuICAgKiBAcGFyYW0gdG9vbCAtIEJsb2NrVG9vbCBvYmplY3RcbiAgICovXG4gIGdldFBhdHRlcm5zQ29uZmlnKHMpIHtcbiAgICBzLnBhc3RlQ29uZmlnID09PSAhMSB8fCAhcy5wYXN0ZUNvbmZpZy5wYXR0ZXJucyB8fCBXKHMucGFzdGVDb25maWcucGF0dGVybnMpIHx8IE9iamVjdC5lbnRyaWVzKHMucGFzdGVDb25maWcucGF0dGVybnMpLmZvckVhY2goKFtlLCB0XSkgPT4ge1xuICAgICAgdCBpbnN0YW5jZW9mIFJlZ0V4cCB8fCBUKFxuICAgICAgICBgUGF0dGVybiAke3R9IGZvciDCqyR7cy5uYW1lfcK7IFRvb2wgaXMgc2tpcHBlZCBiZWNhdXNlIGl0IHNob3VsZCBiZSBhIFJlZ2V4cCBpbnN0YW5jZS5gLFxuICAgICAgICBcIndhcm5cIlxuICAgICAgKSwgdGhpcy50b29sc1BhdHRlcm5zLnB1c2goe1xuICAgICAgICBrZXk6IGUsXG4gICAgICAgIHBhdHRlcm46IHQsXG4gICAgICAgIHRvb2w6IHNcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBDaGVjayBpZiBicm93c2VyIGJlaGF2aW9yIHN1aXRzIGJldHRlclxuICAgKlxuICAgKiBAcGFyYW0ge0V2ZW50VGFyZ2V0fSBlbGVtZW50IC0gZWxlbWVudCB3aGVyZSBjb250ZW50IGhhcyBiZWVuIHBhc3RlZFxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICovXG4gIGlzTmF0aXZlQmVoYXZpb3VyKHMpIHtcbiAgICByZXR1cm4gYy5pc05hdGl2ZUlucHV0KHMpO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgZmlsZXMgZnJvbSBkYXRhIHRyYW5zZmVyIG9iamVjdCBhbmQgaW5zZXJ0IHJlbGF0ZWQgVG9vbHNcbiAgICpcbiAgICogQHBhcmFtIHtGaWxlTGlzdH0gaXRlbXMgLSBwYXN0ZWQgb3IgZHJvcHBlZCBpdGVtc1xuICAgKi9cbiAgYXN5bmMgcHJvY2Vzc0ZpbGVzKHMpIHtcbiAgICBjb25zdCB7IEJsb2NrTWFuYWdlcjogZSB9ID0gdGhpcy5FZGl0b3I7XG4gICAgbGV0IHQ7XG4gICAgdCA9IGF3YWl0IFByb21pc2UuYWxsKFxuICAgICAgQXJyYXkuZnJvbShzKS5tYXAoKG4pID0+IHRoaXMucHJvY2Vzc0ZpbGUobikpXG4gICAgKSwgdCA9IHQuZmlsdGVyKChuKSA9PiAhIW4pO1xuICAgIGNvbnN0IGkgPSBlLmN1cnJlbnRCbG9jay50b29sLmlzRGVmYXVsdCAmJiBlLmN1cnJlbnRCbG9jay5pc0VtcHR5O1xuICAgIHQuZm9yRWFjaChcbiAgICAgIChuLCByKSA9PiB7XG4gICAgICAgIGUucGFzdGUobi50eXBlLCBuLmV2ZW50LCByID09PSAwICYmIGkpO1xuICAgICAgfVxuICAgICk7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBpbmZvcm1hdGlvbiBhYm91dCBmaWxlIGFuZCBmaW5kIFRvb2wgdG8gaGFuZGxlIGl0XG4gICAqXG4gICAqIEBwYXJhbSB7RmlsZX0gZmlsZSAtIGZpbGUgdG8gcHJvY2Vzc1xuICAgKi9cbiAgYXN5bmMgcHJvY2Vzc0ZpbGUocykge1xuICAgIGNvbnN0IGUgPSBVdChzKSwgdCA9IE9iamVjdC5lbnRyaWVzKHRoaXMudG9vbHNGaWxlcykuZmluZCgoW24sIHsgbWltZVR5cGVzOiByLCBleHRlbnNpb25zOiBhIH1dKSA9PiB7XG4gICAgICBjb25zdCBbbCwgZF0gPSBzLnR5cGUuc3BsaXQoXCIvXCIpLCB1ID0gYS5maW5kKChmKSA9PiBmLnRvTG93ZXJDYXNlKCkgPT09IGUudG9Mb3dlckNhc2UoKSksIGggPSByLmZpbmQoKGYpID0+IHtcbiAgICAgICAgY29uc3QgW3gsIHBdID0gZi5zcGxpdChcIi9cIik7XG4gICAgICAgIHJldHVybiB4ID09PSBsICYmIChwID09PSBkIHx8IHAgPT09IFwiKlwiKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuICEhdSB8fCAhIWg7XG4gICAgfSk7XG4gICAgaWYgKCF0KVxuICAgICAgcmV0dXJuO1xuICAgIGNvbnN0IFtvXSA9IHQ7XG4gICAgcmV0dXJuIHtcbiAgICAgIGV2ZW50OiB0aGlzLmNvbXBvc2VQYXN0ZUV2ZW50KFwiZmlsZVwiLCB7XG4gICAgICAgIGZpbGU6IHNcbiAgICAgIH0pLFxuICAgICAgdHlwZTogb1xuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIFNwbGl0IEhUTUwgc3RyaW5nIHRvIGJsb2NrcyBhbmQgcmV0dXJuIGl0IGFzIGFycmF5IG9mIEJsb2NrIGRhdGFcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGlubmVySFRNTCAtIGh0bWwgc3RyaW5nIHRvIHByb2Nlc3NcbiAgICogQHJldHVybnMge1Bhc3RlRGF0YVtdfVxuICAgKi9cbiAgcHJvY2Vzc0hUTUwocykge1xuICAgIGNvbnN0IHsgVG9vbHM6IGUgfSA9IHRoaXMuRWRpdG9yLCB0ID0gYy5tYWtlKFwiRElWXCIpO1xuICAgIHJldHVybiB0LmlubmVySFRNTCA9IHMsIHRoaXMuZ2V0Tm9kZXModCkubWFwKChpKSA9PiB7XG4gICAgICBsZXQgbiwgciA9IGUuZGVmYXVsdFRvb2wsIGEgPSAhMTtcbiAgICAgIHN3aXRjaCAoaS5ub2RlVHlwZSkge1xuICAgICAgICBjYXNlIE5vZGUuRE9DVU1FTlRfRlJBR01FTlRfTk9ERTpcbiAgICAgICAgICBuID0gYy5tYWtlKFwiZGl2XCIpLCBuLmFwcGVuZENoaWxkKGkpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIE5vZGUuRUxFTUVOVF9OT0RFOlxuICAgICAgICAgIG4gPSBpLCBhID0gITAsIHRoaXMudG9vbHNUYWdzW24udGFnTmFtZV0gJiYgKHIgPSB0aGlzLnRvb2xzVGFnc1tuLnRhZ05hbWVdLnRvb2wpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY29uc3QgeyB0YWdzOiBsIH0gPSByLnBhc3RlQ29uZmlnIHx8IHsgdGFnczogW10gfSwgZCA9IGwucmVkdWNlKChmLCB4KSA9PiAodGhpcy5jb2xsZWN0VGFnTmFtZXMoeCkuZm9yRWFjaCgobSkgPT4ge1xuICAgICAgICBjb25zdCBMID0gRCh4KSA/IHhbbV0gOiBudWxsO1xuICAgICAgICBmW20udG9Mb3dlckNhc2UoKV0gPSBMIHx8IHt9O1xuICAgICAgfSksIGYpLCB7fSksIHUgPSBPYmplY3QuYXNzaWduKHt9LCBkLCByLmJhc2VTYW5pdGl6ZUNvbmZpZyk7XG4gICAgICBpZiAobi50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwidGFibGVcIikge1xuICAgICAgICBjb25zdCBmID0gVihuLm91dGVySFRNTCwgdSk7XG4gICAgICAgIG4gPSBjLm1ha2UoXCJkaXZcIiwgdm9pZCAwLCB7XG4gICAgICAgICAgaW5uZXJIVE1MOiBmXG4gICAgICAgIH0pLmZpcnN0Q2hpbGQ7XG4gICAgICB9IGVsc2VcbiAgICAgICAgbi5pbm5lckhUTUwgPSBWKG4uaW5uZXJIVE1MLCB1KTtcbiAgICAgIGNvbnN0IGggPSB0aGlzLmNvbXBvc2VQYXN0ZUV2ZW50KFwidGFnXCIsIHtcbiAgICAgICAgZGF0YTogblxuICAgICAgfSk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBjb250ZW50OiBuLFxuICAgICAgICBpc0Jsb2NrOiBhLFxuICAgICAgICB0b29sOiByLm5hbWUsXG4gICAgICAgIGV2ZW50OiBoXG4gICAgICB9O1xuICAgIH0pLmZpbHRlcigoaSkgPT4ge1xuICAgICAgY29uc3QgbiA9IGMuaXNFbXB0eShpLmNvbnRlbnQpLCByID0gYy5pc1NpbmdsZVRhZyhpLmNvbnRlbnQpO1xuICAgICAgcmV0dXJuICFuIHx8IHI7XG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIFNwbGl0IHBsYWluIHRleHQgYnkgbmV3IGxpbmUgc3ltYm9scyBhbmQgcmV0dXJuIGl0IGFzIGFycmF5IG9mIEJsb2NrIGRhdGFcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHBsYWluIC0gc3RyaW5nIHRvIHByb2Nlc3NcbiAgICogQHJldHVybnMge1Bhc3RlRGF0YVtdfVxuICAgKi9cbiAgcHJvY2Vzc1BsYWluKHMpIHtcbiAgICBjb25zdCB7IGRlZmF1bHRCbG9jazogZSB9ID0gdGhpcy5jb25maWc7XG4gICAgaWYgKCFzKVxuICAgICAgcmV0dXJuIFtdO1xuICAgIGNvbnN0IHQgPSBlO1xuICAgIHJldHVybiBzLnNwbGl0KC9cXHI/XFxuLykuZmlsdGVyKChvKSA9PiBvLnRyaW0oKSkubWFwKChvKSA9PiB7XG4gICAgICBjb25zdCBpID0gYy5tYWtlKFwiZGl2XCIpO1xuICAgICAgaS50ZXh0Q29udGVudCA9IG87XG4gICAgICBjb25zdCBuID0gdGhpcy5jb21wb3NlUGFzdGVFdmVudChcInRhZ1wiLCB7XG4gICAgICAgIGRhdGE6IGlcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgY29udGVudDogaSxcbiAgICAgICAgdG9vbDogdCxcbiAgICAgICAgaXNCbG9jazogITEsXG4gICAgICAgIGV2ZW50OiBuXG4gICAgICB9O1xuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBQcm9jZXNzIHBhc3RlIG9mIHNpbmdsZSBCbG9jayB0b29sIGNvbnRlbnRcbiAgICpcbiAgICogQHBhcmFtIHtQYXN0ZURhdGF9IGRhdGFUb0luc2VydCAtIGRhdGEgb2YgQmxvY2sgdG8gaW5zZXJ0XG4gICAqL1xuICBhc3luYyBwcm9jZXNzU2luZ2xlQmxvY2socykge1xuICAgIGNvbnN0IHsgQ2FyZXQ6IGUsIEJsb2NrTWFuYWdlcjogdCB9ID0gdGhpcy5FZGl0b3IsIHsgY3VycmVudEJsb2NrOiBvIH0gPSB0O1xuICAgIGlmICghbyB8fCBzLnRvb2wgIT09IG8ubmFtZSB8fCAhYy5jb250YWluc09ubHlJbmxpbmVFbGVtZW50cyhzLmNvbnRlbnQuaW5uZXJIVE1MKSkge1xuICAgICAgdGhpcy5pbnNlcnRCbG9jayhzLCAobyA9PSBudWxsID8gdm9pZCAwIDogby50b29sLmlzRGVmYXVsdCkgJiYgby5pc0VtcHR5KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZS5pbnNlcnRDb250ZW50QXRDYXJldFBvc2l0aW9uKHMuY29udGVudC5pbm5lckhUTUwpO1xuICB9XG4gIC8qKlxuICAgKiBQcm9jZXNzIHBhc3RlIHRvIHNpbmdsZSBCbG9jazpcbiAgICogMS4gRmluZCBwYXR0ZXJuc2AgbWF0Y2hlc1xuICAgKiAyLiBJbnNlcnQgbmV3IGJsb2NrIGlmIGl0IGlzIG5vdCB0aGUgc2FtZSB0eXBlIGFzIGN1cnJlbnQgb25lXG4gICAqIDMuIEp1c3QgaW5zZXJ0IHRleHQgaWYgdGhlcmUgaXMgbm8gc3Vic3RpdHV0aW9uc1xuICAgKlxuICAgKiBAcGFyYW0ge1Bhc3RlRGF0YX0gZGF0YVRvSW5zZXJ0IC0gZGF0YSBvZiBCbG9jayB0byBpbnNlcnRcbiAgICovXG4gIGFzeW5jIHByb2Nlc3NJbmxpbmVQYXN0ZShzKSB7XG4gICAgY29uc3QgeyBCbG9ja01hbmFnZXI6IGUsIENhcmV0OiB0IH0gPSB0aGlzLkVkaXRvciwgeyBjb250ZW50OiBvIH0gPSBzO1xuICAgIGlmIChlLmN1cnJlbnRCbG9jayAmJiBlLmN1cnJlbnRCbG9jay50b29sLmlzRGVmYXVsdCAmJiBvLnRleHRDb250ZW50Lmxlbmd0aCA8IEN0LlBBVFRFUk5fUFJPQ0VTU0lOR19NQVhfTEVOR1RIKSB7XG4gICAgICBjb25zdCBuID0gYXdhaXQgdGhpcy5wcm9jZXNzUGF0dGVybihvLnRleHRDb250ZW50KTtcbiAgICAgIGlmIChuKSB7XG4gICAgICAgIGNvbnN0IHIgPSBlLmN1cnJlbnRCbG9jayAmJiBlLmN1cnJlbnRCbG9jay50b29sLmlzRGVmYXVsdCAmJiBlLmN1cnJlbnRCbG9jay5pc0VtcHR5LCBhID0gZS5wYXN0ZShuLnRvb2wsIG4uZXZlbnQsIHIpO1xuICAgICAgICB0LnNldFRvQmxvY2soYSwgdC5wb3NpdGlvbnMuRU5EKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZS5jdXJyZW50QmxvY2sgJiYgZS5jdXJyZW50QmxvY2suY3VycmVudElucHV0KSB7XG4gICAgICBjb25zdCBuID0gZS5jdXJyZW50QmxvY2sudG9vbC5iYXNlU2FuaXRpemVDb25maWc7XG4gICAgICBkb2N1bWVudC5leGVjQ29tbWFuZChcbiAgICAgICAgXCJpbnNlcnRIVE1MXCIsXG4gICAgICAgICExLFxuICAgICAgICBWKG8uaW5uZXJIVE1MLCBuKVxuICAgICAgKTtcbiAgICB9IGVsc2VcbiAgICAgIHRoaXMuaW5zZXJ0QmxvY2socyk7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBwYXR0ZXJuc2AgbWF0Y2hlc1xuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdGV4dCAtIHRleHQgdG8gcHJvY2Vzc1xuICAgKiBAcmV0dXJucyB7UHJvbWlzZTx7ZXZlbnQ6IFBhc3RlRXZlbnQsIHRvb2w6IHN0cmluZ30+fVxuICAgKi9cbiAgYXN5bmMgcHJvY2Vzc1BhdHRlcm4ocykge1xuICAgIGNvbnN0IGUgPSB0aGlzLnRvb2xzUGF0dGVybnMuZmluZCgobykgPT4ge1xuICAgICAgY29uc3QgaSA9IG8ucGF0dGVybi5leGVjKHMpO1xuICAgICAgcmV0dXJuIGkgPyBzID09PSBpLnNoaWZ0KCkgOiAhMTtcbiAgICB9KTtcbiAgICByZXR1cm4gZSA/IHtcbiAgICAgIGV2ZW50OiB0aGlzLmNvbXBvc2VQYXN0ZUV2ZW50KFwicGF0dGVyblwiLCB7XG4gICAgICAgIGtleTogZS5rZXksXG4gICAgICAgIGRhdGE6IHNcbiAgICAgIH0pLFxuICAgICAgdG9vbDogZS50b29sLm5hbWVcbiAgICB9IDogdm9pZCAwO1xuICB9XG4gIC8qKlxuICAgKiBJbnNlcnQgcGFzdGVkIEJsb2NrIGNvbnRlbnQgdG8gRWRpdG9yXG4gICAqXG4gICAqIEBwYXJhbSB7UGFzdGVEYXRhfSBkYXRhIC0gZGF0YSB0byBpbnNlcnRcbiAgICogQHBhcmFtIHtib29sZWFufSBjYW5SZXBsYWNlQ3VycmVudEJsb2NrIC0gaWYgdHJ1ZSBhbmQgaXMgY3VycmVudCBCbG9jayBpcyBlbXB0eSwgd2lsbCByZXBsYWNlIGN1cnJlbnQgQmxvY2tcbiAgICogQHJldHVybnMge3ZvaWR9XG4gICAqL1xuICBpbnNlcnRCbG9jayhzLCBlID0gITEpIHtcbiAgICBjb25zdCB7IEJsb2NrTWFuYWdlcjogdCwgQ2FyZXQ6IG8gfSA9IHRoaXMuRWRpdG9yLCB7IGN1cnJlbnRCbG9jazogaSB9ID0gdDtcbiAgICBsZXQgbjtcbiAgICBpZiAoZSAmJiBpICYmIGkuaXNFbXB0eSkge1xuICAgICAgbiA9IHQucGFzdGUocy50b29sLCBzLmV2ZW50LCAhMCksIG8uc2V0VG9CbG9jayhuLCBvLnBvc2l0aW9ucy5FTkQpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBuID0gdC5wYXN0ZShzLnRvb2wsIHMuZXZlbnQpLCBvLnNldFRvQmxvY2sobiwgby5wb3NpdGlvbnMuRU5EKTtcbiAgfVxuICAvKipcbiAgICogSW5zZXJ0IGRhdGEgcGFzc2VkIGFzIGFwcGxpY2F0aW9uL3gtZWRpdG9yLWpzIEpTT05cbiAgICpcbiAgICogQHBhcmFtIHtBcnJheX0gYmxvY2tzIOKAlCBCbG9ja3MnIGRhdGEgdG8gaW5zZXJ0XG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cbiAgaW5zZXJ0RWRpdG9ySlNEYXRhKHMpIHtcbiAgICBjb25zdCB7IEJsb2NrTWFuYWdlcjogZSwgQ2FyZXQ6IHQsIFRvb2xzOiBvIH0gPSB0aGlzLkVkaXRvcjtcbiAgICBidChcbiAgICAgIHMsXG4gICAgICAobikgPT4gby5ibG9ja1Rvb2xzLmdldChuKS5zYW5pdGl6ZUNvbmZpZ1xuICAgICkuZm9yRWFjaCgoeyB0b29sOiBuLCBkYXRhOiByIH0sIGEpID0+IHtcbiAgICAgIGxldCBsID0gITE7XG4gICAgICBhID09PSAwICYmIChsID0gZS5jdXJyZW50QmxvY2sgJiYgZS5jdXJyZW50QmxvY2sudG9vbC5pc0RlZmF1bHQgJiYgZS5jdXJyZW50QmxvY2suaXNFbXB0eSk7XG4gICAgICBjb25zdCBkID0gZS5pbnNlcnQoe1xuICAgICAgICB0b29sOiBuLFxuICAgICAgICBkYXRhOiByLFxuICAgICAgICByZXBsYWNlOiBsXG4gICAgICB9KTtcbiAgICAgIHQuc2V0VG9CbG9jayhkLCB0LnBvc2l0aW9ucy5FTkQpO1xuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBGZXRjaCBub2RlcyBmcm9tIEVsZW1lbnQgbm9kZVxuICAgKlxuICAgKiBAcGFyYW0ge05vZGV9IG5vZGUgLSBjdXJyZW50IG5vZGVcbiAgICogQHBhcmFtIHtOb2RlW119IG5vZGVzIC0gcHJvY2Vzc2VkIG5vZGVzXG4gICAqIEBwYXJhbSB7Tm9kZX0gZGVzdE5vZGUgLSBkZXN0aW5hdGlvbiBub2RlXG4gICAqL1xuICBwcm9jZXNzRWxlbWVudE5vZGUocywgZSwgdCkge1xuICAgIGNvbnN0IG8gPSBPYmplY3Qua2V5cyh0aGlzLnRvb2xzVGFncyksIGkgPSBzLCB7IHRvb2w6IG4gfSA9IHRoaXMudG9vbHNUYWdzW2kudGFnTmFtZV0gfHwge30sIHIgPSB0aGlzLnRhZ3NCeVRvb2xbbiA9PSBudWxsID8gdm9pZCAwIDogbi5uYW1lXSB8fCBbXSwgYSA9IG8uaW5jbHVkZXMoaS50YWdOYW1lKSwgbCA9IGMuYmxvY2tFbGVtZW50cy5pbmNsdWRlcyhpLnRhZ05hbWUudG9Mb3dlckNhc2UoKSksIGQgPSBBcnJheS5mcm9tKGkuY2hpbGRyZW4pLnNvbWUoXG4gICAgICAoeyB0YWdOYW1lOiBoIH0pID0+IG8uaW5jbHVkZXMoaCkgJiYgIXIuaW5jbHVkZXMoaClcbiAgICApLCB1ID0gQXJyYXkuZnJvbShpLmNoaWxkcmVuKS5zb21lKFxuICAgICAgKHsgdGFnTmFtZTogaCB9KSA9PiBjLmJsb2NrRWxlbWVudHMuaW5jbHVkZXMoaC50b0xvd2VyQ2FzZSgpKVxuICAgICk7XG4gICAgaWYgKCFsICYmICFhICYmICFkKVxuICAgICAgcmV0dXJuIHQuYXBwZW5kQ2hpbGQoaSksIFsuLi5lLCB0XTtcbiAgICBpZiAoYSAmJiAhZCB8fCBsICYmICF1ICYmICFkKVxuICAgICAgcmV0dXJuIFsuLi5lLCB0LCBpXTtcbiAgfVxuICAvKipcbiAgICogUmVjdXJzaXZlbHkgZGl2aWRlIEhUTUwgc3RyaW5nIHRvIHR3byB0eXBlcyBvZiBub2RlczpcbiAgICogMS4gQmxvY2sgZWxlbWVudFxuICAgKiAyLiBEb2N1bWVudCBGcmFnbWVudHMgY29udGFpbmVkIHRleHQgYW5kIG1hcmt1cCB0YWdzIGxpa2UgYSwgYiwgaSBldGMuXG4gICAqXG4gICAqIEBwYXJhbSB7Tm9kZX0gd3JhcHBlciAtIHdyYXBwZXIgb2YgcGFzdGVyIEhUTUwgY29udGVudFxuICAgKiBAcmV0dXJucyB7Tm9kZVtdfVxuICAgKi9cbiAgZ2V0Tm9kZXMocykge1xuICAgIGNvbnN0IGUgPSBBcnJheS5mcm9tKHMuY2hpbGROb2Rlcyk7XG4gICAgbGV0IHQ7XG4gICAgY29uc3QgbyA9IChpLCBuKSA9PiB7XG4gICAgICBpZiAoYy5pc0VtcHR5KG4pICYmICFjLmlzU2luZ2xlVGFnKG4pKVxuICAgICAgICByZXR1cm4gaTtcbiAgICAgIGNvbnN0IHIgPSBpW2kubGVuZ3RoIC0gMV07XG4gICAgICBsZXQgYSA9IG5ldyBEb2N1bWVudEZyYWdtZW50KCk7XG4gICAgICBzd2l0Y2ggKHIgJiYgYy5pc0ZyYWdtZW50KHIpICYmIChhID0gaS5wb3AoKSksIG4ubm9kZVR5cGUpIHtcbiAgICAgICAgY2FzZSBOb2RlLkVMRU1FTlRfTk9ERTpcbiAgICAgICAgICBpZiAodCA9IHRoaXMucHJvY2Vzc0VsZW1lbnROb2RlKG4sIGksIGEpLCB0KVxuICAgICAgICAgICAgcmV0dXJuIHQ7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgTm9kZS5URVhUX05PREU6XG4gICAgICAgICAgcmV0dXJuIGEuYXBwZW5kQ2hpbGQobiksIFsuLi5pLCBhXTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gWy4uLmksIGFdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIFsuLi5pLCAuLi5BcnJheS5mcm9tKG4uY2hpbGROb2RlcykucmVkdWNlKG8sIFtdKV07XG4gICAgfTtcbiAgICByZXR1cm4gZS5yZWR1Y2UobywgW10pO1xuICB9XG4gIC8qKlxuICAgKiBDb21wb3NlIHBhc3RlIGV2ZW50IHdpdGggcGFzc2VkIHR5cGUgYW5kIGRldGFpbFxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZSAtIGV2ZW50IHR5cGVcbiAgICogQHBhcmFtIHtQYXN0ZUV2ZW50RGV0YWlsfSBkZXRhaWwgLSBldmVudCBkZXRhaWxcbiAgICovXG4gIGNvbXBvc2VQYXN0ZUV2ZW50KHMsIGUpIHtcbiAgICByZXR1cm4gbmV3IEN1c3RvbUV2ZW50KHMsIHtcbiAgICAgIGRldGFpbDogZVxuICAgIH0pO1xuICB9XG59O1xubGV0IFR0ID0gQ3Q7XG5UdC5QQVRURVJOX1BST0NFU1NJTkdfTUFYX0xFTkdUSCA9IDQ1MDtcbmNsYXNzIGFpIGV4dGVuZHMgeSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyksIHRoaXMudG9vbHNEb250U3VwcG9ydFJlYWRPbmx5ID0gW10sIHRoaXMucmVhZE9ubHlFbmFibGVkID0gITE7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgc3RhdGUgb2YgcmVhZCBvbmx5IG1vZGVcbiAgICovXG4gIGdldCBpc0VuYWJsZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMucmVhZE9ubHlFbmFibGVkO1xuICB9XG4gIC8qKlxuICAgKiBTZXQgaW5pdGlhbCBzdGF0ZVxuICAgKi9cbiAgYXN5bmMgcHJlcGFyZSgpIHtcbiAgICBjb25zdCB7IFRvb2xzOiBlIH0gPSB0aGlzLkVkaXRvciwgeyBibG9ja1Rvb2xzOiB0IH0gPSBlLCBvID0gW107XG4gICAgQXJyYXkuZnJvbSh0LmVudHJpZXMoKSkuZm9yRWFjaCgoW2ksIG5dKSA9PiB7XG4gICAgICBuLmlzUmVhZE9ubHlTdXBwb3J0ZWQgfHwgby5wdXNoKGkpO1xuICAgIH0pLCB0aGlzLnRvb2xzRG9udFN1cHBvcnRSZWFkT25seSA9IG8sIHRoaXMuY29uZmlnLnJlYWRPbmx5ICYmIG8ubGVuZ3RoID4gMCAmJiB0aGlzLnRocm93Q3JpdGljYWxFcnJvcigpLCB0aGlzLnRvZ2dsZSh0aGlzLmNvbmZpZy5yZWFkT25seSk7XG4gIH1cbiAgLyoqXG4gICAqIFNldCByZWFkLW9ubHkgbW9kZSBvciB0b2dnbGUgY3VycmVudCBzdGF0ZVxuICAgKiBDYWxsIGFsbCBNb2R1bGVzIGB0b2dnbGVSZWFkT25seWAgbWV0aG9kIGFuZCByZS1yZW5kZXIgRWRpdG9yXG4gICAqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gc3RhdGUgLSAob3B0aW9uYWwpIHJlYWQtb25seSBzdGF0ZSBvciB0b2dnbGVcbiAgICovXG4gIGFzeW5jIHRvZ2dsZShlID0gIXRoaXMucmVhZE9ubHlFbmFibGVkKSB7XG4gICAgZSAmJiB0aGlzLnRvb2xzRG9udFN1cHBvcnRSZWFkT25seS5sZW5ndGggPiAwICYmIHRoaXMudGhyb3dDcml0aWNhbEVycm9yKCk7XG4gICAgY29uc3QgdCA9IHRoaXMucmVhZE9ubHlFbmFibGVkO1xuICAgIHRoaXMucmVhZE9ubHlFbmFibGVkID0gZTtcbiAgICBmb3IgKGNvbnN0IGkgaW4gdGhpcy5FZGl0b3IpXG4gICAgICB0aGlzLkVkaXRvcltpXS50b2dnbGVSZWFkT25seSAmJiB0aGlzLkVkaXRvcltpXS50b2dnbGVSZWFkT25seShlKTtcbiAgICBpZiAodCA9PT0gZSlcbiAgICAgIHJldHVybiB0aGlzLnJlYWRPbmx5RW5hYmxlZDtcbiAgICBjb25zdCBvID0gYXdhaXQgdGhpcy5FZGl0b3IuU2F2ZXIuc2F2ZSgpO1xuICAgIHJldHVybiBhd2FpdCB0aGlzLkVkaXRvci5CbG9ja01hbmFnZXIuY2xlYXIoKSwgYXdhaXQgdGhpcy5FZGl0b3IuUmVuZGVyZXIucmVuZGVyKG8uYmxvY2tzKSwgdGhpcy5yZWFkT25seUVuYWJsZWQ7XG4gIH1cbiAgLyoqXG4gICAqIFRocm93cyBhbiBlcnJvciBhYm91dCB0b29scyB3aGljaCBkb24ndCBzdXBwb3J0IHJlYWQtb25seSBtb2RlXG4gICAqL1xuICB0aHJvd0NyaXRpY2FsRXJyb3IoKSB7XG4gICAgdGhyb3cgbmV3IHV0KFxuICAgICAgYFRvIGVuYWJsZSByZWFkLW9ubHkgbW9kZSBhbGwgY29ubmVjdGVkIHRvb2xzIHNob3VsZCBzdXBwb3J0IGl0LiBUb29scyAke3RoaXMudG9vbHNEb250U3VwcG9ydFJlYWRPbmx5LmpvaW4oXCIsIFwiKX0gZG9uJ3Qgc3VwcG9ydCByZWFkLW9ubHkgbW9kZS5gXG4gICAgKTtcbiAgfVxufVxuY2xhc3MgZmUgZXh0ZW5kcyB5IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKSwgdGhpcy5pc1JlY3RTZWxlY3Rpb25BY3RpdmF0ZWQgPSAhMSwgdGhpcy5TQ1JPTExfU1BFRUQgPSAzLCB0aGlzLkhFSUdIVF9PRl9TQ1JPTExfWk9ORSA9IDQwLCB0aGlzLkJPVFRPTV9TQ1JPTExfWk9ORSA9IDEsIHRoaXMuVE9QX1NDUk9MTF9aT05FID0gMiwgdGhpcy5NQUlOX01PVVNFX0JVVFRPTiA9IDAsIHRoaXMubW91c2Vkb3duID0gITEsIHRoaXMuaXNTY3JvbGxpbmcgPSAhMSwgdGhpcy5pblNjcm9sbFpvbmUgPSBudWxsLCB0aGlzLnN0YXJ0WCA9IDAsIHRoaXMuc3RhcnRZID0gMCwgdGhpcy5tb3VzZVggPSAwLCB0aGlzLm1vdXNlWSA9IDAsIHRoaXMuc3RhY2tPZlNlbGVjdGVkID0gW10sIHRoaXMubGlzdGVuZXJJZHMgPSBbXTtcbiAgfVxuICAvKipcbiAgICogQ1NTIGNsYXNzZXMgZm9yIHRoZSBCbG9ja1xuICAgKlxuICAgKiBAcmV0dXJucyB7e3dyYXBwZXI6IHN0cmluZywgY29udGVudDogc3RyaW5nfX1cbiAgICovXG4gIHN0YXRpYyBnZXQgQ1NTKCkge1xuICAgIHJldHVybiB7XG4gICAgICBvdmVybGF5OiBcImNvZGV4LWVkaXRvci1vdmVybGF5XCIsXG4gICAgICBvdmVybGF5Q29udGFpbmVyOiBcImNvZGV4LWVkaXRvci1vdmVybGF5X19jb250YWluZXJcIixcbiAgICAgIHJlY3Q6IFwiY29kZXgtZWRpdG9yLW92ZXJsYXlfX3JlY3RhbmdsZVwiLFxuICAgICAgdG9wU2Nyb2xsWm9uZTogXCJjb2RleC1lZGl0b3Itb3ZlcmxheV9fc2Nyb2xsLXpvbmUtLXRvcFwiLFxuICAgICAgYm90dG9tU2Nyb2xsWm9uZTogXCJjb2RleC1lZGl0b3Itb3ZlcmxheV9fc2Nyb2xsLXpvbmUtLWJvdHRvbVwiXG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogTW9kdWxlIFByZXBhcmF0aW9uXG4gICAqIENyZWF0aW5nIHJlY3QgYW5kIGhhbmcgaGFuZGxlcnNcbiAgICovXG4gIHByZXBhcmUoKSB7XG4gICAgdGhpcy5lbmFibGVNb2R1bGVCaW5kaW5ncygpO1xuICB9XG4gIC8qKlxuICAgKiBJbml0IHJlY3QgcGFyYW1zXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBwYWdlWCAtIFggY29vcmQgb2YgbW91c2VcbiAgICogQHBhcmFtIHtudW1iZXJ9IHBhZ2VZIC0gWSBjb29yZCBvZiBtb3VzZVxuICAgKi9cbiAgc3RhcnRTZWxlY3Rpb24oZSwgdCkge1xuICAgIGNvbnN0IG8gPSBkb2N1bWVudC5lbGVtZW50RnJvbVBvaW50KGUgLSB3aW5kb3cucGFnZVhPZmZzZXQsIHQgLSB3aW5kb3cucGFnZVlPZmZzZXQpO1xuICAgIG8uY2xvc2VzdChgLiR7dGhpcy5FZGl0b3IuVG9vbGJhci5DU1MudG9vbGJhcn1gKSB8fCAodGhpcy5FZGl0b3IuQmxvY2tTZWxlY3Rpb24uYWxsQmxvY2tzU2VsZWN0ZWQgPSAhMSwgdGhpcy5jbGVhclNlbGVjdGlvbigpLCB0aGlzLnN0YWNrT2ZTZWxlY3RlZCA9IFtdKTtcbiAgICBjb25zdCBuID0gW1xuICAgICAgYC4ke1IuQ1NTLmNvbnRlbnR9YCxcbiAgICAgIGAuJHt0aGlzLkVkaXRvci5Ub29sYmFyLkNTUy50b29sYmFyfWAsXG4gICAgICBgLiR7dGhpcy5FZGl0b3IuSW5saW5lVG9vbGJhci5DU1MuaW5saW5lVG9vbGJhcn1gXG4gICAgXSwgciA9IG8uY2xvc2VzdChcIi5cIiArIHRoaXMuRWRpdG9yLlVJLkNTUy5lZGl0b3JXcmFwcGVyKSwgYSA9IG4uc29tZSgobCkgPT4gISFvLmNsb3Nlc3QobCkpO1xuICAgICFyIHx8IGEgfHwgKHRoaXMubW91c2Vkb3duID0gITAsIHRoaXMuc3RhcnRYID0gZSwgdGhpcy5zdGFydFkgPSB0KTtcbiAgfVxuICAvKipcbiAgICogQ2xlYXIgYWxsIHBhcmFtcyB0byBlbmQgc2VsZWN0aW9uXG4gICAqL1xuICBlbmRTZWxlY3Rpb24oKSB7XG4gICAgdGhpcy5tb3VzZWRvd24gPSAhMSwgdGhpcy5zdGFydFggPSAwLCB0aGlzLnN0YXJ0WSA9IDAsIHRoaXMub3ZlcmxheVJlY3RhbmdsZS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gIH1cbiAgLyoqXG4gICAqIGlzIFJlY3RTZWxlY3Rpb24gQWN0aXZhdGVkXG4gICAqL1xuICBpc1JlY3RBY3RpdmF0ZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNSZWN0U2VsZWN0aW9uQWN0aXZhdGVkO1xuICB9XG4gIC8qKlxuICAgKiBNYXJrIHRoYXQgc2VsZWN0aW9uIGlzIGVuZFxuICAgKi9cbiAgY2xlYXJTZWxlY3Rpb24oKSB7XG4gICAgdGhpcy5pc1JlY3RTZWxlY3Rpb25BY3RpdmF0ZWQgPSAhMTtcbiAgfVxuICAvKipcbiAgICogU2V0cyBNb2R1bGUgbmVjZXNzYXJ5IGV2ZW50IGhhbmRsZXJzXG4gICAqL1xuICBlbmFibGVNb2R1bGVCaW5kaW5ncygpIHtcbiAgICBjb25zdCB7IGNvbnRhaW5lcjogZSB9ID0gdGhpcy5nZW5IVE1MKCk7XG4gICAgdGhpcy5saXN0ZW5lcnMub24oZSwgXCJtb3VzZWRvd25cIiwgKHQpID0+IHtcbiAgICAgIHRoaXMucHJvY2Vzc01vdXNlRG93bih0KTtcbiAgICB9LCAhMSksIHRoaXMubGlzdGVuZXJzLm9uKGRvY3VtZW50LmJvZHksIFwibW91c2Vtb3ZlXCIsIEllKCh0KSA9PiB7XG4gICAgICB0aGlzLnByb2Nlc3NNb3VzZU1vdmUodCk7XG4gICAgfSwgMTApLCB7XG4gICAgICBwYXNzaXZlOiAhMFxuICAgIH0pLCB0aGlzLmxpc3RlbmVycy5vbihkb2N1bWVudC5ib2R5LCBcIm1vdXNlbGVhdmVcIiwgKCkgPT4ge1xuICAgICAgdGhpcy5wcm9jZXNzTW91c2VMZWF2ZSgpO1xuICAgIH0pLCB0aGlzLmxpc3RlbmVycy5vbih3aW5kb3csIFwic2Nyb2xsXCIsIEllKCh0KSA9PiB7XG4gICAgICB0aGlzLnByb2Nlc3NTY3JvbGwodCk7XG4gICAgfSwgMTApLCB7XG4gICAgICBwYXNzaXZlOiAhMFxuICAgIH0pLCB0aGlzLmxpc3RlbmVycy5vbihkb2N1bWVudC5ib2R5LCBcIm1vdXNldXBcIiwgKCkgPT4ge1xuICAgICAgdGhpcy5wcm9jZXNzTW91c2VVcCgpO1xuICAgIH0sICExKTtcbiAgfVxuICAvKipcbiAgICogSGFuZGxlIG1vdXNlIGRvd24gZXZlbnRzXG4gICAqXG4gICAqIEBwYXJhbSB7TW91c2VFdmVudH0gbW91c2VFdmVudCAtIG1vdXNlIGV2ZW50IHBheWxvYWRcbiAgICovXG4gIHByb2Nlc3NNb3VzZURvd24oZSkge1xuICAgIGlmIChlLmJ1dHRvbiAhPT0gdGhpcy5NQUlOX01PVVNFX0JVVFRPTilcbiAgICAgIHJldHVybjtcbiAgICBlLnRhcmdldC5jbG9zZXN0KGMuYWxsSW5wdXRzU2VsZWN0b3IpICE9PSBudWxsIHx8IHRoaXMuc3RhcnRTZWxlY3Rpb24oZS5wYWdlWCwgZS5wYWdlWSk7XG4gIH1cbiAgLyoqXG4gICAqIEhhbmRsZSBtb3VzZSBtb3ZlIGV2ZW50c1xuICAgKlxuICAgKiBAcGFyYW0ge01vdXNlRXZlbnR9IG1vdXNlRXZlbnQgLSBtb3VzZSBldmVudCBwYXlsb2FkXG4gICAqL1xuICBwcm9jZXNzTW91c2VNb3ZlKGUpIHtcbiAgICB0aGlzLmNoYW5naW5nUmVjdGFuZ2xlKGUpLCB0aGlzLnNjcm9sbEJ5Wm9uZXMoZS5jbGllbnRZKTtcbiAgfVxuICAvKipcbiAgICogSGFuZGxlIG1vdXNlIGxlYXZlXG4gICAqL1xuICBwcm9jZXNzTW91c2VMZWF2ZSgpIHtcbiAgICB0aGlzLmNsZWFyU2VsZWN0aW9uKCksIHRoaXMuZW5kU2VsZWN0aW9uKCk7XG4gIH1cbiAgLyoqXG4gICAqIEBwYXJhbSB7TW91c2VFdmVudH0gbW91c2VFdmVudCAtIG1vdXNlIGV2ZW50IHBheWxvYWRcbiAgICovXG4gIHByb2Nlc3NTY3JvbGwoZSkge1xuICAgIHRoaXMuY2hhbmdpbmdSZWN0YW5nbGUoZSk7XG4gIH1cbiAgLyoqXG4gICAqIEhhbmRsZSBtb3VzZSB1cFxuICAgKi9cbiAgcHJvY2Vzc01vdXNlVXAoKSB7XG4gICAgdGhpcy5jbGVhclNlbGVjdGlvbigpLCB0aGlzLmVuZFNlbGVjdGlvbigpO1xuICB9XG4gIC8qKlxuICAgKiBTY3JvbGwgSWYgbW91c2UgaW4gc2Nyb2xsIHpvbmVcbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IGNsaWVudFkgLSBZIGNvb3JkIG9mIG1vdXNlXG4gICAqL1xuICBzY3JvbGxCeVpvbmVzKGUpIHtcbiAgICBpZiAodGhpcy5pblNjcm9sbFpvbmUgPSBudWxsLCBlIDw9IHRoaXMuSEVJR0hUX09GX1NDUk9MTF9aT05FICYmICh0aGlzLmluU2Nyb2xsWm9uZSA9IHRoaXMuVE9QX1NDUk9MTF9aT05FKSwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodCAtIGUgPD0gdGhpcy5IRUlHSFRfT0ZfU0NST0xMX1pPTkUgJiYgKHRoaXMuaW5TY3JvbGxab25lID0gdGhpcy5CT1RUT01fU0NST0xMX1pPTkUpLCAhdGhpcy5pblNjcm9sbFpvbmUpIHtcbiAgICAgIHRoaXMuaXNTY3JvbGxpbmcgPSAhMTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5pc1Njcm9sbGluZyB8fCAodGhpcy5zY3JvbGxWZXJ0aWNhbCh0aGlzLmluU2Nyb2xsWm9uZSA9PT0gdGhpcy5UT1BfU0NST0xMX1pPTkUgPyAtdGhpcy5TQ1JPTExfU1BFRUQgOiB0aGlzLlNDUk9MTF9TUEVFRCksIHRoaXMuaXNTY3JvbGxpbmcgPSAhMCk7XG4gIH1cbiAgLyoqXG4gICAqIEdlbmVyYXRlcyByZXF1aXJlZCBIVE1MIGVsZW1lbnRzXG4gICAqXG4gICAqIEByZXR1cm5zIHtPYmplY3Q8c3RyaW5nLCBFbGVtZW50Pn1cbiAgICovXG4gIGdlbkhUTUwoKSB7XG4gICAgY29uc3QgeyBVSTogZSB9ID0gdGhpcy5FZGl0b3IsIHQgPSBlLm5vZGVzLmhvbGRlci5xdWVyeVNlbGVjdG9yKFwiLlwiICsgZS5DU1MuZWRpdG9yV3JhcHBlciksIG8gPSBjLm1ha2UoXCJkaXZcIiwgZmUuQ1NTLm92ZXJsYXksIHt9KSwgaSA9IGMubWFrZShcImRpdlwiLCBmZS5DU1Mub3ZlcmxheUNvbnRhaW5lciwge30pLCBuID0gYy5tYWtlKFwiZGl2XCIsIGZlLkNTUy5yZWN0LCB7fSk7XG4gICAgcmV0dXJuIGkuYXBwZW5kQ2hpbGQobiksIG8uYXBwZW5kQ2hpbGQoaSksIHQuYXBwZW5kQ2hpbGQobyksIHRoaXMub3ZlcmxheVJlY3RhbmdsZSA9IG4sIHtcbiAgICAgIGNvbnRhaW5lcjogdCxcbiAgICAgIG92ZXJsYXk6IG9cbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBBY3RpdmF0ZXMgc2Nyb2xsaW5nIGlmIGJsb2NrU2VsZWN0aW9uIGlzIGFjdGl2ZSBhbmQgbW91c2UgaXMgaW4gc2Nyb2xsIHpvbmVcbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IHNwZWVkIC0gc3BlZWQgb2Ygc2Nyb2xsaW5nXG4gICAqL1xuICBzY3JvbGxWZXJ0aWNhbChlKSB7XG4gICAgaWYgKCEodGhpcy5pblNjcm9sbFpvbmUgJiYgdGhpcy5tb3VzZWRvd24pKVxuICAgICAgcmV0dXJuO1xuICAgIGNvbnN0IHQgPSB3aW5kb3cucGFnZVlPZmZzZXQ7XG4gICAgd2luZG93LnNjcm9sbEJ5KDAsIGUpLCB0aGlzLm1vdXNlWSArPSB3aW5kb3cucGFnZVlPZmZzZXQgLSB0LCBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHRoaXMuc2Nyb2xsVmVydGljYWwoZSk7XG4gICAgfSwgMCk7XG4gIH1cbiAgLyoqXG4gICAqIEhhbmRsZXMgdGhlIGNoYW5nZSBpbiB0aGUgcmVjdGFuZ2xlIGFuZCBpdHMgZWZmZWN0XG4gICAqXG4gICAqIEBwYXJhbSB7TW91c2VFdmVudH0gZXZlbnQgLSBtb3VzZSBldmVudFxuICAgKi9cbiAgY2hhbmdpbmdSZWN0YW5nbGUoZSkge1xuICAgIGlmICghdGhpcy5tb3VzZWRvd24pXG4gICAgICByZXR1cm47XG4gICAgZS5wYWdlWSAhPT0gdm9pZCAwICYmICh0aGlzLm1vdXNlWCA9IGUucGFnZVgsIHRoaXMubW91c2VZID0gZS5wYWdlWSk7XG4gICAgY29uc3QgeyByaWdodFBvczogdCwgbGVmdFBvczogbywgaW5kZXg6IGkgfSA9IHRoaXMuZ2VuSW5mb0Zvck1vdXNlU2VsZWN0aW9uKCksIG4gPSB0aGlzLnN0YXJ0WCA+IHQgJiYgdGhpcy5tb3VzZVggPiB0LCByID0gdGhpcy5zdGFydFggPCBvICYmIHRoaXMubW91c2VYIDwgbztcbiAgICB0aGlzLnJlY3RDcm9zc2VzQmxvY2tzID0gIShuIHx8IHIpLCB0aGlzLmlzUmVjdFNlbGVjdGlvbkFjdGl2YXRlZCB8fCAodGhpcy5yZWN0Q3Jvc3Nlc0Jsb2NrcyA9ICExLCB0aGlzLmlzUmVjdFNlbGVjdGlvbkFjdGl2YXRlZCA9ICEwLCB0aGlzLnNocmlua1JlY3RhbmdsZVRvUG9pbnQoKSwgdGhpcy5vdmVybGF5UmVjdGFuZ2xlLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCIpLCB0aGlzLnVwZGF0ZVJlY3RhbmdsZVNpemUoKSwgdGhpcy5FZGl0b3IuVG9vbGJhci5jbG9zZSgpLCBpICE9PSB2b2lkIDAgJiYgKHRoaXMudHJ5U2VsZWN0TmV4dEJsb2NrKGkpLCB0aGlzLmludmVyc2VTZWxlY3Rpb24oKSwgYi5nZXQoKS5yZW1vdmVBbGxSYW5nZXMoKSk7XG4gIH1cbiAgLyoqXG4gICAqIFNocmluayByZWN0IHRvIHNpbmd1bGFyIHBvaW50XG4gICAqL1xuICBzaHJpbmtSZWN0YW5nbGVUb1BvaW50KCkge1xuICAgIHRoaXMub3ZlcmxheVJlY3RhbmdsZS5zdHlsZS5sZWZ0ID0gYCR7dGhpcy5zdGFydFggLSB3aW5kb3cucGFnZVhPZmZzZXR9cHhgLCB0aGlzLm92ZXJsYXlSZWN0YW5nbGUuc3R5bGUudG9wID0gYCR7dGhpcy5zdGFydFkgLSB3aW5kb3cucGFnZVlPZmZzZXR9cHhgLCB0aGlzLm92ZXJsYXlSZWN0YW5nbGUuc3R5bGUuYm90dG9tID0gYGNhbGMoMTAwJSAtICR7dGhpcy5zdGFydFkgLSB3aW5kb3cucGFnZVlPZmZzZXR9cHhgLCB0aGlzLm92ZXJsYXlSZWN0YW5nbGUuc3R5bGUucmlnaHQgPSBgY2FsYygxMDAlIC0gJHt0aGlzLnN0YXJ0WCAtIHdpbmRvdy5wYWdlWE9mZnNldH1weGA7XG4gIH1cbiAgLyoqXG4gICAqIFNlbGVjdCBvciB1bnNlbGVjdCBhbGwgb2YgYmxvY2tzIGluIGFycmF5IGlmIHJlY3QgaXMgb3V0IG9yIGluIHNlbGVjdGFibGUgYXJlYVxuICAgKi9cbiAgaW52ZXJzZVNlbGVjdGlvbigpIHtcbiAgICBjb25zdCB0ID0gdGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLmdldEJsb2NrQnlJbmRleCh0aGlzLnN0YWNrT2ZTZWxlY3RlZFswXSkuc2VsZWN0ZWQ7XG4gICAgaWYgKHRoaXMucmVjdENyb3NzZXNCbG9ja3MgJiYgIXQpXG4gICAgICBmb3IgKGNvbnN0IG8gb2YgdGhpcy5zdGFja09mU2VsZWN0ZWQpXG4gICAgICAgIHRoaXMuRWRpdG9yLkJsb2NrU2VsZWN0aW9uLnNlbGVjdEJsb2NrQnlJbmRleChvKTtcbiAgICBpZiAoIXRoaXMucmVjdENyb3NzZXNCbG9ja3MgJiYgdClcbiAgICAgIGZvciAoY29uc3QgbyBvZiB0aGlzLnN0YWNrT2ZTZWxlY3RlZClcbiAgICAgICAgdGhpcy5FZGl0b3IuQmxvY2tTZWxlY3Rpb24udW5TZWxlY3RCbG9ja0J5SW5kZXgobyk7XG4gIH1cbiAgLyoqXG4gICAqIFVwZGF0ZXMgc2l6ZSBvZiByZWN0YW5nbGVcbiAgICovXG4gIHVwZGF0ZVJlY3RhbmdsZVNpemUoKSB7XG4gICAgdGhpcy5tb3VzZVkgPj0gdGhpcy5zdGFydFkgPyAodGhpcy5vdmVybGF5UmVjdGFuZ2xlLnN0eWxlLnRvcCA9IGAke3RoaXMuc3RhcnRZIC0gd2luZG93LnBhZ2VZT2Zmc2V0fXB4YCwgdGhpcy5vdmVybGF5UmVjdGFuZ2xlLnN0eWxlLmJvdHRvbSA9IGBjYWxjKDEwMCUgLSAke3RoaXMubW91c2VZIC0gd2luZG93LnBhZ2VZT2Zmc2V0fXB4YCkgOiAodGhpcy5vdmVybGF5UmVjdGFuZ2xlLnN0eWxlLmJvdHRvbSA9IGBjYWxjKDEwMCUgLSAke3RoaXMuc3RhcnRZIC0gd2luZG93LnBhZ2VZT2Zmc2V0fXB4YCwgdGhpcy5vdmVybGF5UmVjdGFuZ2xlLnN0eWxlLnRvcCA9IGAke3RoaXMubW91c2VZIC0gd2luZG93LnBhZ2VZT2Zmc2V0fXB4YCksIHRoaXMubW91c2VYID49IHRoaXMuc3RhcnRYID8gKHRoaXMub3ZlcmxheVJlY3RhbmdsZS5zdHlsZS5sZWZ0ID0gYCR7dGhpcy5zdGFydFggLSB3aW5kb3cucGFnZVhPZmZzZXR9cHhgLCB0aGlzLm92ZXJsYXlSZWN0YW5nbGUuc3R5bGUucmlnaHQgPSBgY2FsYygxMDAlIC0gJHt0aGlzLm1vdXNlWCAtIHdpbmRvdy5wYWdlWE9mZnNldH1weGApIDogKHRoaXMub3ZlcmxheVJlY3RhbmdsZS5zdHlsZS5yaWdodCA9IGBjYWxjKDEwMCUgLSAke3RoaXMuc3RhcnRYIC0gd2luZG93LnBhZ2VYT2Zmc2V0fXB4YCwgdGhpcy5vdmVybGF5UmVjdGFuZ2xlLnN0eWxlLmxlZnQgPSBgJHt0aGlzLm1vdXNlWCAtIHdpbmRvdy5wYWdlWE9mZnNldH1weGApO1xuICB9XG4gIC8qKlxuICAgKiBDb2xsZWN0cyBpbmZvcm1hdGlvbiBuZWVkZWQgdG8gZGV0ZXJtaW5lIHRoZSBiZWhhdmlvciBvZiB0aGUgcmVjdGFuZ2xlXG4gICAqXG4gICAqIEByZXR1cm5zIHtvYmplY3R9IGluZGV4IC0gaW5kZXggbmV4dCBCbG9jaywgbGVmdFBvcyAtIHN0YXJ0IG9mIGxlZnQgYm9yZGVyIG9mIEJsb2NrLCByaWdodFBvcyAtIHJpZ2h0IGJvcmRlclxuICAgKi9cbiAgZ2VuSW5mb0Zvck1vdXNlU2VsZWN0aW9uKCkge1xuICAgIGNvbnN0IHQgPSBkb2N1bWVudC5ib2R5Lm9mZnNldFdpZHRoIC8gMiwgbyA9IHRoaXMubW91c2VZIC0gd2luZG93LnBhZ2VZT2Zmc2V0LCBpID0gZG9jdW1lbnQuZWxlbWVudEZyb21Qb2ludCh0LCBvKSwgbiA9IHRoaXMuRWRpdG9yLkJsb2NrTWFuYWdlci5nZXRCbG9ja0J5Q2hpbGROb2RlKGkpO1xuICAgIGxldCByO1xuICAgIG4gIT09IHZvaWQgMCAmJiAociA9IHRoaXMuRWRpdG9yLkJsb2NrTWFuYWdlci5ibG9ja3MuZmluZEluZGV4KChoKSA9PiBoLmhvbGRlciA9PT0gbi5ob2xkZXIpKTtcbiAgICBjb25zdCBhID0gdGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLmxhc3RCbG9jay5ob2xkZXIucXVlcnlTZWxlY3RvcihcIi5cIiArIFIuQ1NTLmNvbnRlbnQpLCBsID0gTnVtYmVyLnBhcnNlSW50KHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGEpLndpZHRoLCAxMCkgLyAyLCBkID0gdCAtIGwsIHUgPSB0ICsgbDtcbiAgICByZXR1cm4ge1xuICAgICAgaW5kZXg6IHIsXG4gICAgICBsZWZ0UG9zOiBkLFxuICAgICAgcmlnaHRQb3M6IHVcbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBTZWxlY3QgYmxvY2sgd2l0aCBpbmRleCBpbmRleFxuICAgKlxuICAgKiBAcGFyYW0gaW5kZXggLSBpbmRleCBvZiBibG9jayBpbiByZWRhY3RvclxuICAgKi9cbiAgYWRkQmxvY2tJblNlbGVjdGlvbihlKSB7XG4gICAgdGhpcy5yZWN0Q3Jvc3Nlc0Jsb2NrcyAmJiB0aGlzLkVkaXRvci5CbG9ja1NlbGVjdGlvbi5zZWxlY3RCbG9ja0J5SW5kZXgoZSksIHRoaXMuc3RhY2tPZlNlbGVjdGVkLnB1c2goZSk7XG4gIH1cbiAgLyoqXG4gICAqIEFkZHMgYSBibG9jayB0byB0aGUgc2VsZWN0aW9uIGFuZCBkZXRlcm1pbmVzIHdoaWNoIGJsb2NrcyBzaG91bGQgYmUgc2VsZWN0ZWRcbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGluZGV4IC0gaW5kZXggb2YgbmV3IGJsb2NrIGluIHRoZSByZWFjdG9yXG4gICAqL1xuICB0cnlTZWxlY3ROZXh0QmxvY2soZSkge1xuICAgIGNvbnN0IHQgPSB0aGlzLnN0YWNrT2ZTZWxlY3RlZFt0aGlzLnN0YWNrT2ZTZWxlY3RlZC5sZW5ndGggLSAxXSA9PT0gZSwgbyA9IHRoaXMuc3RhY2tPZlNlbGVjdGVkLmxlbmd0aCwgaSA9IDEsIG4gPSAtMSwgciA9IDA7XG4gICAgaWYgKHQpXG4gICAgICByZXR1cm47XG4gICAgY29uc3QgYSA9IHRoaXMuc3RhY2tPZlNlbGVjdGVkW28gLSAxXSAtIHRoaXMuc3RhY2tPZlNlbGVjdGVkW28gLSAyXSA+IDA7XG4gICAgbGV0IGwgPSByO1xuICAgIG8gPiAxICYmIChsID0gYSA/IGkgOiBuKTtcbiAgICBjb25zdCBkID0gZSA+IHRoaXMuc3RhY2tPZlNlbGVjdGVkW28gLSAxXSAmJiBsID09PSBpLCB1ID0gZSA8IHRoaXMuc3RhY2tPZlNlbGVjdGVkW28gLSAxXSAmJiBsID09PSBuLCBmID0gIShkIHx8IHUgfHwgbCA9PT0gcik7XG4gICAgaWYgKCFmICYmIChlID4gdGhpcy5zdGFja09mU2VsZWN0ZWRbbyAtIDFdIHx8IHRoaXMuc3RhY2tPZlNlbGVjdGVkW28gLSAxXSA9PT0gdm9pZCAwKSkge1xuICAgICAgbGV0IG0gPSB0aGlzLnN0YWNrT2ZTZWxlY3RlZFtvIC0gMV0gKyAxIHx8IGU7XG4gICAgICBmb3IgKG07IG0gPD0gZTsgbSsrKVxuICAgICAgICB0aGlzLmFkZEJsb2NrSW5TZWxlY3Rpb24obSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICghZiAmJiBlIDwgdGhpcy5zdGFja09mU2VsZWN0ZWRbbyAtIDFdKSB7XG4gICAgICBmb3IgKGxldCBtID0gdGhpcy5zdGFja09mU2VsZWN0ZWRbbyAtIDFdIC0gMTsgbSA+PSBlOyBtLS0pXG4gICAgICAgIHRoaXMuYWRkQmxvY2tJblNlbGVjdGlvbihtKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKCFmKVxuICAgICAgcmV0dXJuO1xuICAgIGxldCB4ID0gbyAtIDEsIHA7XG4gICAgZm9yIChlID4gdGhpcy5zdGFja09mU2VsZWN0ZWRbbyAtIDFdID8gcCA9ICgpID0+IGUgPiB0aGlzLnN0YWNrT2ZTZWxlY3RlZFt4XSA6IHAgPSAoKSA9PiBlIDwgdGhpcy5zdGFja09mU2VsZWN0ZWRbeF07IHAoKTsgKVxuICAgICAgdGhpcy5yZWN0Q3Jvc3Nlc0Jsb2NrcyAmJiB0aGlzLkVkaXRvci5CbG9ja1NlbGVjdGlvbi51blNlbGVjdEJsb2NrQnlJbmRleCh0aGlzLnN0YWNrT2ZTZWxlY3RlZFt4XSksIHRoaXMuc3RhY2tPZlNlbGVjdGVkLnBvcCgpLCB4LS07XG4gIH1cbn1cbmNsYXNzIGxpIGV4dGVuZHMgeSB7XG4gIC8qKlxuICAgKiBSZW5kZXJzIHBhc3NlZCBibG9ja3MgYXMgb25lIGJhdGNoXG4gICAqXG4gICAqIEBwYXJhbSBibG9ja3NEYXRhIC0gYmxvY2tzIHRvIHJlbmRlclxuICAgKi9cbiAgYXN5bmMgcmVuZGVyKGUpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHQpID0+IHtcbiAgICAgIGNvbnN0IHsgVG9vbHM6IG8sIEJsb2NrTWFuYWdlcjogaSB9ID0gdGhpcy5FZGl0b3I7XG4gICAgICBpZiAoZS5sZW5ndGggPT09IDApXG4gICAgICAgIGkuaW5zZXJ0KCk7XG4gICAgICBlbHNlIHtcbiAgICAgICAgY29uc3QgbiA9IGUubWFwKCh7IHR5cGU6IHIsIGRhdGE6IGEsIHR1bmVzOiBsLCBpZDogZCB9KSA9PiB7XG4gICAgICAgICAgby5hdmFpbGFibGUuaGFzKHIpID09PSAhMSAmJiAoWShgVG9vbCDCqyR7cn3CuyBpcyBub3QgZm91bmQuIENoZWNrICd0b29scycgcHJvcGVydHkgYXQgdGhlIEVkaXRvci5qcyBjb25maWcuYCwgXCJ3YXJuXCIpLCBhID0gdGhpcy5jb21wb3NlU3R1YkRhdGFGb3JUb29sKHIsIGEsIGQpLCByID0gby5zdHViVG9vbCk7XG4gICAgICAgICAgbGV0IHU7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHUgPSBpLmNvbXBvc2VCbG9jayh7XG4gICAgICAgICAgICAgIGlkOiBkLFxuICAgICAgICAgICAgICB0b29sOiByLFxuICAgICAgICAgICAgICBkYXRhOiBhLFxuICAgICAgICAgICAgICB0dW5lczogbFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSBjYXRjaCAoaCkge1xuICAgICAgICAgICAgVChgQmxvY2sgwqske3J9wrsgc2tpcHBlZCBiZWNhdXNlIG9mIHBsdWdpbnMgZXJyb3JgLCBcImVycm9yXCIsIHtcbiAgICAgICAgICAgICAgZGF0YTogYSxcbiAgICAgICAgICAgICAgZXJyb3I6IGhcbiAgICAgICAgICAgIH0pLCBhID0gdGhpcy5jb21wb3NlU3R1YkRhdGFGb3JUb29sKHIsIGEsIGQpLCByID0gby5zdHViVG9vbCwgdSA9IGkuY29tcG9zZUJsb2NrKHtcbiAgICAgICAgICAgICAgaWQ6IGQsXG4gICAgICAgICAgICAgIHRvb2w6IHIsXG4gICAgICAgICAgICAgIGRhdGE6IGEsXG4gICAgICAgICAgICAgIHR1bmVzOiBsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHU7XG4gICAgICAgIH0pO1xuICAgICAgICBpLmluc2VydE1hbnkobik7XG4gICAgICB9XG4gICAgICB3aW5kb3cucmVxdWVzdElkbGVDYWxsYmFjaygoKSA9PiB7XG4gICAgICAgIHQoKTtcbiAgICAgIH0sIHsgdGltZW91dDogMmUzIH0pO1xuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgZGF0YSBmb3IgdGhlIFN0dWIgVG9vbCB0aGF0IHdpbGwgYmUgdXNlZCBpbnN0ZWFkIG9mIHVuYXZhaWxhYmxlIHRvb2xcbiAgICpcbiAgICogQHBhcmFtIHRvb2wgLSB1bmF2YWlsYWJsZSB0b29sIG5hbWUgdG8gc3R1YlxuICAgKiBAcGFyYW0gZGF0YSAtIGRhdGEgb2YgdW5hdmFpbGFibGUgYmxvY2tcbiAgICogQHBhcmFtIFtpZF0gLSBpZCBvZiB1bmF2YWlsYWJsZSBibG9ja1xuICAgKi9cbiAgY29tcG9zZVN0dWJEYXRhRm9yVG9vbChlLCB0LCBvKSB7XG4gICAgY29uc3QgeyBUb29sczogaSB9ID0gdGhpcy5FZGl0b3I7XG4gICAgbGV0IG4gPSBlO1xuICAgIGlmIChpLnVuYXZhaWxhYmxlLmhhcyhlKSkge1xuICAgICAgY29uc3QgciA9IGkudW5hdmFpbGFibGUuZ2V0KGUpLnRvb2xib3g7XG4gICAgICByICE9PSB2b2lkIDAgJiYgclswXS50aXRsZSAhPT0gdm9pZCAwICYmIChuID0gclswXS50aXRsZSk7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICBzYXZlZERhdGE6IHtcbiAgICAgICAgaWQ6IG8sXG4gICAgICAgIHR5cGU6IGUsXG4gICAgICAgIGRhdGE6IHRcbiAgICAgIH0sXG4gICAgICB0aXRsZTogblxuICAgIH07XG4gIH1cbn1cbmNsYXNzIGNpIGV4dGVuZHMgeSB7XG4gIC8qKlxuICAgKiBDb21wb3NlcyBuZXcgY2hhaW4gb2YgUHJvbWlzZXMgdG8gZmlyZSB0aGVtIGFsdGVybmF0ZWxseVxuICAgKlxuICAgKiBAcmV0dXJucyB7T3V0cHV0RGF0YX1cbiAgICovXG4gIGFzeW5jIHNhdmUoKSB7XG4gICAgY29uc3QgeyBCbG9ja01hbmFnZXI6IGUsIFRvb2xzOiB0IH0gPSB0aGlzLkVkaXRvciwgbyA9IGUuYmxvY2tzLCBpID0gW107XG4gICAgdHJ5IHtcbiAgICAgIG8uZm9yRWFjaCgoYSkgPT4ge1xuICAgICAgICBpLnB1c2godGhpcy5nZXRTYXZlZERhdGEoYSkpO1xuICAgICAgfSk7XG4gICAgICBjb25zdCBuID0gYXdhaXQgUHJvbWlzZS5hbGwoaSksIHIgPSBhd2FpdCBidChuLCAoYSkgPT4gdC5ibG9ja1Rvb2xzLmdldChhKS5zYW5pdGl6ZUNvbmZpZyk7XG4gICAgICByZXR1cm4gdGhpcy5tYWtlT3V0cHV0KHIpO1xuICAgIH0gY2F0Y2ggKG4pIHtcbiAgICAgIFkoXCJTYXZpbmcgZmFpbGVkIGR1ZSB0byB0aGUgRXJyb3IgJW9cIiwgXCJlcnJvclwiLCBuKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFNhdmVzIGFuZCB2YWxpZGF0ZXNcbiAgICpcbiAgICogQHBhcmFtIHtCbG9ja30gYmxvY2sgLSBFZGl0b3IncyBUb29sXG4gICAqIEByZXR1cm5zIHtWYWxpZGF0ZWREYXRhfSAtIFRvb2wncyB2YWxpZGF0ZWQgZGF0YVxuICAgKi9cbiAgYXN5bmMgZ2V0U2F2ZWREYXRhKGUpIHtcbiAgICBjb25zdCB0ID0gYXdhaXQgZS5zYXZlKCksIG8gPSB0ICYmIGF3YWl0IGUudmFsaWRhdGUodC5kYXRhKTtcbiAgICByZXR1cm4ge1xuICAgICAgLi4udCxcbiAgICAgIGlzVmFsaWQ6IG9cbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGVzIG91dHB1dCBvYmplY3Qgd2l0aCBzYXZlZCBkYXRhLCB0aW1lIGFuZCB2ZXJzaW9uIG9mIGVkaXRvclxuICAgKlxuICAgKiBAcGFyYW0ge1ZhbGlkYXRlZERhdGF9IGFsbEV4dHJhY3RlZERhdGEgLSBkYXRhIGV4dHJhY3RlZCBmcm9tIEJsb2Nrc1xuICAgKiBAcmV0dXJucyB7T3V0cHV0RGF0YX1cbiAgICovXG4gIG1ha2VPdXRwdXQoZSkge1xuICAgIGNvbnN0IHQgPSBbXTtcbiAgICByZXR1cm4gZS5mb3JFYWNoKCh7IGlkOiBvLCB0b29sOiBpLCBkYXRhOiBuLCB0dW5lczogciwgaXNWYWxpZDogYSB9KSA9PiB7XG4gICAgICBpZiAoIWEpIHtcbiAgICAgICAgVChgQmxvY2sgwqske2l9wrsgc2tpcHBlZCBiZWNhdXNlIHNhdmVkIGRhdGEgaXMgaW52YWxpZGApO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoaSA9PT0gdGhpcy5FZGl0b3IuVG9vbHMuc3R1YlRvb2wpIHtcbiAgICAgICAgdC5wdXNoKG4pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjb25zdCBsID0ge1xuICAgICAgICBpZDogbyxcbiAgICAgICAgdHlwZTogaSxcbiAgICAgICAgZGF0YTogbixcbiAgICAgICAgLi4uIVcocikgJiYge1xuICAgICAgICAgIHR1bmVzOiByXG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICB0LnB1c2gobCk7XG4gICAgfSksIHtcbiAgICAgIHRpbWU6ICsvKiBAX19QVVJFX18gKi8gbmV3IERhdGUoKSxcbiAgICAgIGJsb2NrczogdCxcbiAgICAgIHZlcnNpb246IFwiMi4yOS4wXCJcbiAgICB9O1xuICB9XG59XG4oZnVuY3Rpb24oKSB7XG4gIHRyeSB7XG4gICAgaWYgKHR5cGVvZiBkb2N1bWVudCA8IFwidVwiKSB7XG4gICAgICB2YXIgcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgICAgIHMuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoXCIuY2UtcGFyYWdyYXBoe2xpbmUtaGVpZ2h0OjEuNmVtO291dGxpbmU6bm9uZX0uY2UtcGFyYWdyYXBoW2RhdGEtcGxhY2Vob2xkZXJdOmVtcHR5OmJlZm9yZXtjb250ZW50OmF0dHIoZGF0YS1wbGFjZWhvbGRlcik7Y29sb3I6IzcwNzY4NDtmb250LXdlaWdodDo0MDA7b3BhY2l0eTowfS5jb2RleC1lZGl0b3ItLWVtcHR5IC5jZS1ibG9jazpmaXJzdC1jaGlsZCAuY2UtcGFyYWdyYXBoW2RhdGEtcGxhY2Vob2xkZXJdOmVtcHR5OmJlZm9yZXtvcGFjaXR5OjF9LmNvZGV4LWVkaXRvci0tdG9vbGJveC1vcGVuZWQgLmNlLWJsb2NrOmZpcnN0LWNoaWxkIC5jZS1wYXJhZ3JhcGhbZGF0YS1wbGFjZWhvbGRlcl06ZW1wdHk6YmVmb3JlLC5jb2RleC1lZGl0b3ItLWVtcHR5IC5jZS1ibG9jazpmaXJzdC1jaGlsZCAuY2UtcGFyYWdyYXBoW2RhdGEtcGxhY2Vob2xkZXJdOmVtcHR5OmZvY3VzOmJlZm9yZXtvcGFjaXR5OjB9LmNlLXBhcmFncmFwaCBwOmZpcnN0LW9mLXR5cGV7bWFyZ2luLXRvcDowfS5jZS1wYXJhZ3JhcGggcDpsYXN0LW9mLXR5cGV7bWFyZ2luLWJvdHRvbTowfVwiKSksIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQocyk7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgY29uc29sZS5lcnJvcihcInZpdGUtcGx1Z2luLWNzcy1pbmplY3RlZC1ieS1qc1wiLCBlKTtcbiAgfVxufSkoKTtcbmNvbnN0IGRpID0gJzxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHdpZHRoPVwiMjRcIiBoZWlnaHQ9XCIyNFwiIGZpbGw9XCJub25lXCIgdmlld0JveD1cIjAgMCAyNCAyNFwiPjxwYXRoIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIiBzdHJva2Utd2lkdGg9XCIyXCIgZD1cIk04IDlWNy4yQzggNy4wODk1NCA4LjA4OTU0IDcgOC4yIDdMMTIgN00xNiA5VjcuMkMxNiA3LjA4OTU0IDE1LjkxMDUgNyAxNS44IDdMMTIgN00xMiA3TDEyIDE3TTEyIDE3SDEwTTEyIDE3SDE0XCIvPjwvc3ZnPic7XG4vKipcbiAqIEJhc2UgUGFyYWdyYXBoIEJsb2NrIGZvciB0aGUgRWRpdG9yLmpzLlxuICogUmVwcmVzZW50cyBhIHJlZ3VsYXIgdGV4dCBibG9ja1xuICpcbiAqIEBhdXRob3IgQ29kZVggKHRlYW1AY29kZXguc28pXG4gKiBAY29weXJpZ2h0IENvZGVYIDIwMThcbiAqIEBsaWNlbnNlIFRoZSBNSVQgTGljZW5zZSAoTUlUKVxuICovXG5jbGFzcyBLZSB7XG4gIC8qKlxuICAgKiBEZWZhdWx0IHBsYWNlaG9sZGVyIGZvciBQYXJhZ3JhcGggVG9vbFxuICAgKlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKiBAY2xhc3NcbiAgICovXG4gIHN0YXRpYyBnZXQgREVGQVVMVF9QTEFDRUhPTERFUigpIHtcbiAgICByZXR1cm4gXCJcIjtcbiAgfVxuICAvKipcbiAgICogUmVuZGVyIHBsdWdpbmBzIG1haW4gRWxlbWVudCBhbmQgZmlsbCBpdCB3aXRoIHNhdmVkIGRhdGFcbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IHBhcmFtcyAtIGNvbnN0cnVjdG9yIHBhcmFtc1xuICAgKiBAcGFyYW0ge1BhcmFncmFwaERhdGF9IHBhcmFtcy5kYXRhIC0gcHJldmlvdXNseSBzYXZlZCBkYXRhXG4gICAqIEBwYXJhbSB7UGFyYWdyYXBoQ29uZmlnfSBwYXJhbXMuY29uZmlnIC0gdXNlciBjb25maWcgZm9yIFRvb2xcbiAgICogQHBhcmFtIHtvYmplY3R9IHBhcmFtcy5hcGkgLSBlZGl0b3IuanMgYXBpXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gcmVhZE9ubHkgLSByZWFkIG9ubHkgbW9kZSBmbGFnXG4gICAqL1xuICBjb25zdHJ1Y3Rvcih7IGRhdGE6IGUsIGNvbmZpZzogdCwgYXBpOiBvLCByZWFkT25seTogaSB9KSB7XG4gICAgdGhpcy5hcGkgPSBvLCB0aGlzLnJlYWRPbmx5ID0gaSwgdGhpcy5fQ1NTID0ge1xuICAgICAgYmxvY2s6IHRoaXMuYXBpLnN0eWxlcy5ibG9jayxcbiAgICAgIHdyYXBwZXI6IFwiY2UtcGFyYWdyYXBoXCJcbiAgICB9LCB0aGlzLnJlYWRPbmx5IHx8ICh0aGlzLm9uS2V5VXAgPSB0aGlzLm9uS2V5VXAuYmluZCh0aGlzKSksIHRoaXMuX3BsYWNlaG9sZGVyID0gdC5wbGFjZWhvbGRlciA/IHQucGxhY2Vob2xkZXIgOiBLZS5ERUZBVUxUX1BMQUNFSE9MREVSLCB0aGlzLl9kYXRhID0ge30sIHRoaXMuX2VsZW1lbnQgPSBudWxsLCB0aGlzLl9wcmVzZXJ2ZUJsYW5rID0gdC5wcmVzZXJ2ZUJsYW5rICE9PSB2b2lkIDAgPyB0LnByZXNlcnZlQmxhbmsgOiAhMSwgdGhpcy5kYXRhID0gZTtcbiAgfVxuICAvKipcbiAgICogQ2hlY2sgaWYgdGV4dCBjb250ZW50IGlzIGVtcHR5IGFuZCBzZXQgZW1wdHkgc3RyaW5nIHRvIGlubmVyIGh0bWwuXG4gICAqIFdlIG5lZWQgdGhpcyBiZWNhdXNlIHNvbWUgYnJvd3NlcnMgKGUuZy4gU2FmYXJpKSBpbnNlcnQgPGJyPiBpbnRvIGVtcHR5IGNvbnRlbnRlZGl0YW5sZSBlbGVtZW50c1xuICAgKlxuICAgKiBAcGFyYW0ge0tleWJvYXJkRXZlbnR9IGUgLSBrZXkgdXAgZXZlbnRcbiAgICovXG4gIG9uS2V5VXAoZSkge1xuICAgIGlmIChlLmNvZGUgIT09IFwiQmFja3NwYWNlXCIgJiYgZS5jb2RlICE9PSBcIkRlbGV0ZVwiKVxuICAgICAgcmV0dXJuO1xuICAgIGNvbnN0IHsgdGV4dENvbnRlbnQ6IHQgfSA9IHRoaXMuX2VsZW1lbnQ7XG4gICAgdCA9PT0gXCJcIiAmJiAodGhpcy5fZWxlbWVudC5pbm5lckhUTUwgPSBcIlwiKTtcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlIFRvb2wncyB2aWV3XG4gICAqXG4gICAqIEByZXR1cm5zIHtIVE1MRWxlbWVudH1cbiAgICogQHByaXZhdGVcbiAgICovXG4gIGRyYXdWaWV3KCkge1xuICAgIGNvbnN0IGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiRElWXCIpO1xuICAgIHJldHVybiBlLmNsYXNzTGlzdC5hZGQodGhpcy5fQ1NTLndyYXBwZXIsIHRoaXMuX0NTUy5ibG9jayksIGUuY29udGVudEVkaXRhYmxlID0gITEsIGUuZGF0YXNldC5wbGFjZWhvbGRlciA9IHRoaXMuYXBpLmkxOG4udCh0aGlzLl9wbGFjZWhvbGRlciksIHRoaXMuX2RhdGEudGV4dCAmJiAoZS5pbm5lckhUTUwgPSB0aGlzLl9kYXRhLnRleHQpLCB0aGlzLnJlYWRPbmx5IHx8IChlLmNvbnRlbnRFZGl0YWJsZSA9ICEwLCBlLmFkZEV2ZW50TGlzdGVuZXIoXCJrZXl1cFwiLCB0aGlzLm9uS2V5VXApKSwgZTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJuIFRvb2wncyB2aWV3XG4gICAqXG4gICAqIEByZXR1cm5zIHtIVE1MRGl2RWxlbWVudH1cbiAgICovXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gdGhpcy5fZWxlbWVudCA9IHRoaXMuZHJhd1ZpZXcoKSwgdGhpcy5fZWxlbWVudDtcbiAgfVxuICAvKipcbiAgICogTWV0aG9kIHRoYXQgc3BlY2lmaWVkIGhvdyB0byBtZXJnZSB0d28gVGV4dCBibG9ja3MuXG4gICAqIENhbGxlZCBieSBFZGl0b3IuanMgYnkgYmFja3NwYWNlIGF0IHRoZSBiZWdpbm5pbmcgb2YgdGhlIEJsb2NrXG4gICAqXG4gICAqIEBwYXJhbSB7UGFyYWdyYXBoRGF0YX0gZGF0YVxuICAgKiBAcHVibGljXG4gICAqL1xuICBtZXJnZShlKSB7XG4gICAgY29uc3QgdCA9IHtcbiAgICAgIHRleHQ6IHRoaXMuZGF0YS50ZXh0ICsgZS50ZXh0XG4gICAgfTtcbiAgICB0aGlzLmRhdGEgPSB0O1xuICB9XG4gIC8qKlxuICAgKiBWYWxpZGF0ZSBQYXJhZ3JhcGggYmxvY2sgZGF0YTpcbiAgICogLSBjaGVjayBmb3IgZW1wdGluZXNzXG4gICAqXG4gICAqIEBwYXJhbSB7UGFyYWdyYXBoRGF0YX0gc2F2ZWREYXRhIOKAlCBkYXRhIHJlY2VpdmVkIGFmdGVyIHNhdmluZ1xuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gZmFsc2UgaWYgc2F2ZWQgZGF0YSBpcyBub3QgY29ycmVjdCwgb3RoZXJ3aXNlIHRydWVcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgdmFsaWRhdGUoZSkge1xuICAgIHJldHVybiAhKGUudGV4dC50cmltKCkgPT09IFwiXCIgJiYgIXRoaXMuX3ByZXNlcnZlQmxhbmspO1xuICB9XG4gIC8qKlxuICAgKiBFeHRyYWN0IFRvb2wncyBkYXRhIGZyb20gdGhlIHZpZXdcbiAgICpcbiAgICogQHBhcmFtIHtIVE1MRGl2RWxlbWVudH0gdG9vbHNDb250ZW50IC0gUGFyYWdyYXBoIHRvb2xzIHJlbmRlcmVkIHZpZXdcbiAgICogQHJldHVybnMge1BhcmFncmFwaERhdGF9IC0gc2F2ZWQgZGF0YVxuICAgKiBAcHVibGljXG4gICAqL1xuICBzYXZlKGUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdGV4dDogZS5pbm5lckhUTUxcbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBPbiBwYXN0ZSBjYWxsYmFjayBmaXJlZCBmcm9tIEVkaXRvci5cbiAgICpcbiAgICogQHBhcmFtIHtQYXN0ZUV2ZW50fSBldmVudCAtIGV2ZW50IHdpdGggcGFzdGVkIGRhdGFcbiAgICovXG4gIG9uUGFzdGUoZSkge1xuICAgIGNvbnN0IHQgPSB7XG4gICAgICB0ZXh0OiBlLmRldGFpbC5kYXRhLmlubmVySFRNTFxuICAgIH07XG4gICAgdGhpcy5kYXRhID0gdDtcbiAgfVxuICAvKipcbiAgICogRW5hYmxlIENvbnZlcnNpb24gVG9vbGJhci4gUGFyYWdyYXBoIGNhbiBiZSBjb252ZXJ0ZWQgdG8vZnJvbSBvdGhlciB0b29sc1xuICAgKi9cbiAgc3RhdGljIGdldCBjb252ZXJzaW9uQ29uZmlnKCkge1xuICAgIHJldHVybiB7XG4gICAgICBleHBvcnQ6IFwidGV4dFwiLFxuICAgICAgLy8gdG8gY29udmVydCBQYXJhZ3JhcGggdG8gb3RoZXIgYmxvY2ssIHVzZSAndGV4dCcgcHJvcGVydHkgb2Ygc2F2ZWQgZGF0YVxuICAgICAgaW1wb3J0OiBcInRleHRcIlxuICAgICAgLy8gdG8gY292ZXJ0IG90aGVyIGJsb2NrJ3MgZXhwb3J0ZWQgc3RyaW5nIHRvIFBhcmFncmFwaCwgZmlsbCAndGV4dCcgcHJvcGVydHkgb2YgdG9vbCBkYXRhXG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogU2FuaXRpemVyIHJ1bGVzXG4gICAqL1xuICBzdGF0aWMgZ2V0IHNhbml0aXplKCkge1xuICAgIHJldHVybiB7XG4gICAgICB0ZXh0OiB7XG4gICAgICAgIGJyOiAhMFxuICAgICAgfVxuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgdHJ1ZSB0byBub3RpZnkgdGhlIGNvcmUgdGhhdCByZWFkLW9ubHkgbW9kZSBpcyBzdXBwb3J0ZWRcbiAgICpcbiAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAqL1xuICBzdGF0aWMgZ2V0IGlzUmVhZE9ubHlTdXBwb3J0ZWQoKSB7XG4gICAgcmV0dXJuICEwO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgY3VycmVudCBUb29sc2BzIGRhdGFcbiAgICpcbiAgICogQHJldHVybnMge1BhcmFncmFwaERhdGF9IEN1cnJlbnQgZGF0YVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZ2V0IGRhdGEoKSB7XG4gICAgaWYgKHRoaXMuX2VsZW1lbnQgIT09IG51bGwpIHtcbiAgICAgIGNvbnN0IGUgPSB0aGlzLl9lbGVtZW50LmlubmVySFRNTDtcbiAgICAgIHRoaXMuX2RhdGEudGV4dCA9IGU7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9kYXRhO1xuICB9XG4gIC8qKlxuICAgKiBTdG9yZSBkYXRhIGluIHBsdWdpbjpcbiAgICogLSBhdCB0aGUgdGhpcy5fZGF0YSBwcm9wZXJ0eVxuICAgKiAtIGF0IHRoZSBIVE1MXG4gICAqXG4gICAqIEBwYXJhbSB7UGFyYWdyYXBoRGF0YX0gZGF0YSDigJQgZGF0YSB0byBzZXRcbiAgICogQHByaXZhdGVcbiAgICovXG4gIHNldCBkYXRhKGUpIHtcbiAgICB0aGlzLl9kYXRhID0gZSB8fCB7fSwgdGhpcy5fZWxlbWVudCAhPT0gbnVsbCAmJiB0aGlzLmh5ZHJhdGUoKTtcbiAgfVxuICAvKipcbiAgICogRmlsbCB0b29sJ3MgdmlldyB3aXRoIGRhdGFcbiAgICovXG4gIGh5ZHJhdGUoKSB7XG4gICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICB0aGlzLl9lbGVtZW50LmlubmVySFRNTCA9IHRoaXMuX2RhdGEudGV4dCB8fCBcIlwiO1xuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBVc2VkIGJ5IEVkaXRvciBwYXN0ZSBoYW5kbGluZyBBUEkuXG4gICAqIFByb3ZpZGVzIGNvbmZpZ3VyYXRpb24gdG8gaGFuZGxlIFAgdGFncy5cbiAgICpcbiAgICogQHJldHVybnMge3t0YWdzOiBzdHJpbmdbXX19XG4gICAqL1xuICBzdGF0aWMgZ2V0IHBhc3RlQ29uZmlnKCkge1xuICAgIHJldHVybiB7XG4gICAgICB0YWdzOiBbXCJQXCJdXG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogSWNvbiBhbmQgdGl0bGUgZm9yIGRpc3BsYXlpbmcgYXQgdGhlIFRvb2xib3hcbiAgICpcbiAgICogQHJldHVybnMge3tpY29uOiBzdHJpbmcsIHRpdGxlOiBzdHJpbmd9fVxuICAgKi9cbiAgc3RhdGljIGdldCB0b29sYm94KCkge1xuICAgIHJldHVybiB7XG4gICAgICBpY29uOiBkaSxcbiAgICAgIHRpdGxlOiBcIlRleHRcIlxuICAgIH07XG4gIH1cbn1cbmNsYXNzIFhlIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5jb21tYW5kTmFtZSA9IFwiYm9sZFwiLCB0aGlzLkNTUyA9IHtcbiAgICAgIGJ1dHRvbjogXCJjZS1pbmxpbmUtdG9vbFwiLFxuICAgICAgYnV0dG9uQWN0aXZlOiBcImNlLWlubGluZS10b29sLS1hY3RpdmVcIixcbiAgICAgIGJ1dHRvbk1vZGlmaWVyOiBcImNlLWlubGluZS10b29sLS1ib2xkXCJcbiAgICB9LCB0aGlzLm5vZGVzID0ge1xuICAgICAgYnV0dG9uOiB2b2lkIDBcbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBTYW5pdGl6ZXIgUnVsZVxuICAgKiBMZWF2ZSA8Yj4gdGFnc1xuICAgKlxuICAgKiBAcmV0dXJucyB7b2JqZWN0fVxuICAgKi9cbiAgc3RhdGljIGdldCBzYW5pdGl6ZSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgYjoge31cbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgYnV0dG9uIGZvciBJbmxpbmUgVG9vbGJhclxuICAgKi9cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiB0aGlzLm5vZGVzLmJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIiksIHRoaXMubm9kZXMuYnV0dG9uLnR5cGUgPSBcImJ1dHRvblwiLCB0aGlzLm5vZGVzLmJ1dHRvbi5jbGFzc0xpc3QuYWRkKHRoaXMuQ1NTLmJ1dHRvbiwgdGhpcy5DU1MuYnV0dG9uTW9kaWZpZXIpLCB0aGlzLm5vZGVzLmJ1dHRvbi5pbm5lckhUTUwgPSBfbywgdGhpcy5ub2Rlcy5idXR0b247XG4gIH1cbiAgLyoqXG4gICAqIFdyYXAgcmFuZ2Ugd2l0aCA8Yj4gdGFnXG4gICAqL1xuICBzdXJyb3VuZCgpIHtcbiAgICBkb2N1bWVudC5leGVjQ29tbWFuZCh0aGlzLmNvbW1hbmROYW1lKTtcbiAgfVxuICAvKipcbiAgICogQ2hlY2sgc2VsZWN0aW9uIGFuZCBzZXQgYWN0aXZhdGVkIHN0YXRlIHRvIGJ1dHRvbiBpZiB0aGVyZSBhcmUgPGI+IHRhZ1xuICAgKlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICovXG4gIGNoZWNrU3RhdGUoKSB7XG4gICAgY29uc3QgZSA9IGRvY3VtZW50LnF1ZXJ5Q29tbWFuZFN0YXRlKHRoaXMuY29tbWFuZE5hbWUpO1xuICAgIHJldHVybiB0aGlzLm5vZGVzLmJ1dHRvbi5jbGFzc0xpc3QudG9nZ2xlKHRoaXMuQ1NTLmJ1dHRvbkFjdGl2ZSwgZSksIGU7XG4gIH1cbiAgLyoqXG4gICAqIFNldCBhIHNob3J0Y3V0XG4gICAqXG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKi9cbiAgZ2V0IHNob3J0Y3V0KCkge1xuICAgIHJldHVybiBcIkNNRCtCXCI7XG4gIH1cbn1cblhlLmlzSW5saW5lID0gITA7XG5YZS50aXRsZSA9IFwiQm9sZFwiO1xuY2xhc3MgVmUge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmNvbW1hbmROYW1lID0gXCJpdGFsaWNcIiwgdGhpcy5DU1MgPSB7XG4gICAgICBidXR0b246IFwiY2UtaW5saW5lLXRvb2xcIixcbiAgICAgIGJ1dHRvbkFjdGl2ZTogXCJjZS1pbmxpbmUtdG9vbC0tYWN0aXZlXCIsXG4gICAgICBidXR0b25Nb2RpZmllcjogXCJjZS1pbmxpbmUtdG9vbC0taXRhbGljXCJcbiAgICB9LCB0aGlzLm5vZGVzID0ge1xuICAgICAgYnV0dG9uOiBudWxsXG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogU2FuaXRpemVyIFJ1bGVcbiAgICogTGVhdmUgPGk+IHRhZ3NcbiAgICpcbiAgICogQHJldHVybnMge29iamVjdH1cbiAgICovXG4gIHN0YXRpYyBnZXQgc2FuaXRpemUoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGk6IHt9XG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlIGJ1dHRvbiBmb3IgSW5saW5lIFRvb2xiYXJcbiAgICovXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gdGhpcy5ub2Rlcy5idXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpLCB0aGlzLm5vZGVzLmJ1dHRvbi50eXBlID0gXCJidXR0b25cIiwgdGhpcy5ub2Rlcy5idXR0b24uY2xhc3NMaXN0LmFkZCh0aGlzLkNTUy5idXR0b24sIHRoaXMuQ1NTLmJ1dHRvbk1vZGlmaWVyKSwgdGhpcy5ub2Rlcy5idXR0b24uaW5uZXJIVE1MID0gRG8sIHRoaXMubm9kZXMuYnV0dG9uO1xuICB9XG4gIC8qKlxuICAgKiBXcmFwIHJhbmdlIHdpdGggPGk+IHRhZ1xuICAgKi9cbiAgc3Vycm91bmQoKSB7XG4gICAgZG9jdW1lbnQuZXhlY0NvbW1hbmQodGhpcy5jb21tYW5kTmFtZSk7XG4gIH1cbiAgLyoqXG4gICAqIENoZWNrIHNlbGVjdGlvbiBhbmQgc2V0IGFjdGl2YXRlZCBzdGF0ZSB0byBidXR0b24gaWYgdGhlcmUgYXJlIDxpPiB0YWdcbiAgICovXG4gIGNoZWNrU3RhdGUoKSB7XG4gICAgY29uc3QgZSA9IGRvY3VtZW50LnF1ZXJ5Q29tbWFuZFN0YXRlKHRoaXMuY29tbWFuZE5hbWUpO1xuICAgIHJldHVybiB0aGlzLm5vZGVzLmJ1dHRvbi5jbGFzc0xpc3QudG9nZ2xlKHRoaXMuQ1NTLmJ1dHRvbkFjdGl2ZSwgZSksIGU7XG4gIH1cbiAgLyoqXG4gICAqIFNldCBhIHNob3J0Y3V0XG4gICAqL1xuICBnZXQgc2hvcnRjdXQoKSB7XG4gICAgcmV0dXJuIFwiQ01EK0lcIjtcbiAgfVxufVxuVmUuaXNJbmxpbmUgPSAhMDtcblZlLnRpdGxlID0gXCJJdGFsaWNcIjtcbmNsYXNzIHFlIHtcbiAgLyoqXG4gICAqIEBwYXJhbSBhcGkgLSBFZGl0b3IuanMgQVBJXG4gICAqL1xuICBjb25zdHJ1Y3Rvcih7IGFwaTogZSB9KSB7XG4gICAgdGhpcy5jb21tYW5kTGluayA9IFwiY3JlYXRlTGlua1wiLCB0aGlzLmNvbW1hbmRVbmxpbmsgPSBcInVubGlua1wiLCB0aGlzLkVOVEVSX0tFWSA9IDEzLCB0aGlzLkNTUyA9IHtcbiAgICAgIGJ1dHRvbjogXCJjZS1pbmxpbmUtdG9vbFwiLFxuICAgICAgYnV0dG9uQWN0aXZlOiBcImNlLWlubGluZS10b29sLS1hY3RpdmVcIixcbiAgICAgIGJ1dHRvbk1vZGlmaWVyOiBcImNlLWlubGluZS10b29sLS1saW5rXCIsXG4gICAgICBidXR0b25Vbmxpbms6IFwiY2UtaW5saW5lLXRvb2wtLXVubGlua1wiLFxuICAgICAgaW5wdXQ6IFwiY2UtaW5saW5lLXRvb2wtaW5wdXRcIixcbiAgICAgIGlucHV0U2hvd2VkOiBcImNlLWlubGluZS10b29sLWlucHV0LS1zaG93ZWRcIlxuICAgIH0sIHRoaXMubm9kZXMgPSB7XG4gICAgICBidXR0b246IG51bGwsXG4gICAgICBpbnB1dDogbnVsbFxuICAgIH0sIHRoaXMuaW5wdXRPcGVuZWQgPSAhMSwgdGhpcy50b29sYmFyID0gZS50b29sYmFyLCB0aGlzLmlubGluZVRvb2xiYXIgPSBlLmlubGluZVRvb2xiYXIsIHRoaXMubm90aWZpZXIgPSBlLm5vdGlmaWVyLCB0aGlzLmkxOG4gPSBlLmkxOG4sIHRoaXMuc2VsZWN0aW9uID0gbmV3IGIoKTtcbiAgfVxuICAvKipcbiAgICogU2FuaXRpemVyIFJ1bGVcbiAgICogTGVhdmUgPGE+IHRhZ3NcbiAgICpcbiAgICogQHJldHVybnMge29iamVjdH1cbiAgICovXG4gIHN0YXRpYyBnZXQgc2FuaXRpemUoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGE6IHtcbiAgICAgICAgaHJlZjogITAsXG4gICAgICAgIHRhcmdldDogXCJfYmxhbmtcIixcbiAgICAgICAgcmVsOiBcIm5vZm9sbG93XCJcbiAgICAgIH1cbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgYnV0dG9uIGZvciBJbmxpbmUgVG9vbGJhclxuICAgKi9cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiB0aGlzLm5vZGVzLmJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIiksIHRoaXMubm9kZXMuYnV0dG9uLnR5cGUgPSBcImJ1dHRvblwiLCB0aGlzLm5vZGVzLmJ1dHRvbi5jbGFzc0xpc3QuYWRkKHRoaXMuQ1NTLmJ1dHRvbiwgdGhpcy5DU1MuYnV0dG9uTW9kaWZpZXIpLCB0aGlzLm5vZGVzLmJ1dHRvbi5pbm5lckhUTUwgPSBpdCwgdGhpcy5ub2Rlcy5idXR0b247XG4gIH1cbiAgLyoqXG4gICAqIElucHV0IGZvciB0aGUgbGlua1xuICAgKi9cbiAgcmVuZGVyQWN0aW9ucygpIHtcbiAgICByZXR1cm4gdGhpcy5ub2Rlcy5pbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKSwgdGhpcy5ub2Rlcy5pbnB1dC5wbGFjZWhvbGRlciA9IHRoaXMuaTE4bi50KFwiQWRkIGEgbGlua1wiKSwgdGhpcy5ub2Rlcy5pbnB1dC5jbGFzc0xpc3QuYWRkKHRoaXMuQ1NTLmlucHV0KSwgdGhpcy5ub2Rlcy5pbnB1dC5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCAoZSkgPT4ge1xuICAgICAgZS5rZXlDb2RlID09PSB0aGlzLkVOVEVSX0tFWSAmJiB0aGlzLmVudGVyUHJlc3NlZChlKTtcbiAgICB9KSwgdGhpcy5ub2Rlcy5pbnB1dDtcbiAgfVxuICAvKipcbiAgICogSGFuZGxlIGNsaWNrcyBvbiB0aGUgSW5saW5lIFRvb2xiYXIgaWNvblxuICAgKlxuICAgKiBAcGFyYW0ge1JhbmdlfSByYW5nZSAtIHJhbmdlIHRvIHdyYXAgd2l0aCBsaW5rXG4gICAqL1xuICBzdXJyb3VuZChlKSB7XG4gICAgaWYgKGUpIHtcbiAgICAgIHRoaXMuaW5wdXRPcGVuZWQgPyAodGhpcy5zZWxlY3Rpb24ucmVzdG9yZSgpLCB0aGlzLnNlbGVjdGlvbi5yZW1vdmVGYWtlQmFja2dyb3VuZCgpKSA6ICh0aGlzLnNlbGVjdGlvbi5zZXRGYWtlQmFja2dyb3VuZCgpLCB0aGlzLnNlbGVjdGlvbi5zYXZlKCkpO1xuICAgICAgY29uc3QgdCA9IHRoaXMuc2VsZWN0aW9uLmZpbmRQYXJlbnRUYWcoXCJBXCIpO1xuICAgICAgaWYgKHQpIHtcbiAgICAgICAgdGhpcy5zZWxlY3Rpb24uZXhwYW5kVG9UYWcodCksIHRoaXMudW5saW5rKCksIHRoaXMuY2xvc2VBY3Rpb25zKCksIHRoaXMuY2hlY2tTdGF0ZSgpLCB0aGlzLnRvb2xiYXIuY2xvc2UoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLnRvZ2dsZUFjdGlvbnMoKTtcbiAgfVxuICAvKipcbiAgICogQ2hlY2sgc2VsZWN0aW9uIGFuZCBzZXQgYWN0aXZhdGVkIHN0YXRlIHRvIGJ1dHRvbiBpZiB0aGVyZSBhcmUgPGE+IHRhZ1xuICAgKi9cbiAgY2hlY2tTdGF0ZSgpIHtcbiAgICBjb25zdCBlID0gdGhpcy5zZWxlY3Rpb24uZmluZFBhcmVudFRhZyhcIkFcIik7XG4gICAgaWYgKGUpIHtcbiAgICAgIHRoaXMubm9kZXMuYnV0dG9uLmlubmVySFRNTCA9IHpvLCB0aGlzLm5vZGVzLmJ1dHRvbi5jbGFzc0xpc3QuYWRkKHRoaXMuQ1NTLmJ1dHRvblVubGluayksIHRoaXMubm9kZXMuYnV0dG9uLmNsYXNzTGlzdC5hZGQodGhpcy5DU1MuYnV0dG9uQWN0aXZlKSwgdGhpcy5vcGVuQWN0aW9ucygpO1xuICAgICAgY29uc3QgdCA9IGUuZ2V0QXR0cmlidXRlKFwiaHJlZlwiKTtcbiAgICAgIHRoaXMubm9kZXMuaW5wdXQudmFsdWUgPSB0ICE9PSBcIm51bGxcIiA/IHQgOiBcIlwiLCB0aGlzLnNlbGVjdGlvbi5zYXZlKCk7XG4gICAgfSBlbHNlXG4gICAgICB0aGlzLm5vZGVzLmJ1dHRvbi5pbm5lckhUTUwgPSBpdCwgdGhpcy5ub2Rlcy5idXR0b24uY2xhc3NMaXN0LnJlbW92ZSh0aGlzLkNTUy5idXR0b25VbmxpbmspLCB0aGlzLm5vZGVzLmJ1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuQ1NTLmJ1dHRvbkFjdGl2ZSk7XG4gICAgcmV0dXJuICEhZTtcbiAgfVxuICAvKipcbiAgICogRnVuY3Rpb24gY2FsbGVkIHdpdGggSW5saW5lIFRvb2xiYXIgY2xvc2luZ1xuICAgKi9cbiAgY2xlYXIoKSB7XG4gICAgdGhpcy5jbG9zZUFjdGlvbnMoKTtcbiAgfVxuICAvKipcbiAgICogU2V0IGEgc2hvcnRjdXRcbiAgICovXG4gIGdldCBzaG9ydGN1dCgpIHtcbiAgICByZXR1cm4gXCJDTUQrS1wiO1xuICB9XG4gIC8qKlxuICAgKiBTaG93L2Nsb3NlIGxpbmsgaW5wdXRcbiAgICovXG4gIHRvZ2dsZUFjdGlvbnMoKSB7XG4gICAgdGhpcy5pbnB1dE9wZW5lZCA/IHRoaXMuY2xvc2VBY3Rpb25zKCExKSA6IHRoaXMub3BlbkFjdGlvbnMoITApO1xuICB9XG4gIC8qKlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IG5lZWRGb2N1cyAtIG9uIGxpbmsgY3JlYXRpb24gd2UgbmVlZCB0byBmb2N1cyBpbnB1dC4gT24gZWRpdGluZyAtIG5vcGUuXG4gICAqL1xuICBvcGVuQWN0aW9ucyhlID0gITEpIHtcbiAgICB0aGlzLm5vZGVzLmlucHV0LmNsYXNzTGlzdC5hZGQodGhpcy5DU1MuaW5wdXRTaG93ZWQpLCBlICYmIHRoaXMubm9kZXMuaW5wdXQuZm9jdXMoKSwgdGhpcy5pbnB1dE9wZW5lZCA9ICEwO1xuICB9XG4gIC8qKlxuICAgKiBDbG9zZSBpbnB1dFxuICAgKlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGNsZWFyU2F2ZWRTZWxlY3Rpb24g4oCUIHdlIGRvbid0IG5lZWQgdG8gY2xlYXIgc2F2ZWQgc2VsZWN0aW9uXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uIHRvZ2dsZS1jbGlja3Mgb24gdGhlIGljb24gb2Ygb3BlbmVkIFRvb2xiYXJcbiAgICovXG4gIGNsb3NlQWN0aW9ucyhlID0gITApIHtcbiAgICBpZiAodGhpcy5zZWxlY3Rpb24uaXNGYWtlQmFja2dyb3VuZEVuYWJsZWQpIHtcbiAgICAgIGNvbnN0IHQgPSBuZXcgYigpO1xuICAgICAgdC5zYXZlKCksIHRoaXMuc2VsZWN0aW9uLnJlc3RvcmUoKSwgdGhpcy5zZWxlY3Rpb24ucmVtb3ZlRmFrZUJhY2tncm91bmQoKSwgdC5yZXN0b3JlKCk7XG4gICAgfVxuICAgIHRoaXMubm9kZXMuaW5wdXQuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLkNTUy5pbnB1dFNob3dlZCksIHRoaXMubm9kZXMuaW5wdXQudmFsdWUgPSBcIlwiLCBlICYmIHRoaXMuc2VsZWN0aW9uLmNsZWFyU2F2ZWQoKSwgdGhpcy5pbnB1dE9wZW5lZCA9ICExO1xuICB9XG4gIC8qKlxuICAgKiBFbnRlciBwcmVzc2VkIG9uIGlucHV0XG4gICAqXG4gICAqIEBwYXJhbSB7S2V5Ym9hcmRFdmVudH0gZXZlbnQgLSBlbnRlciBrZXlkb3duIGV2ZW50XG4gICAqL1xuICBlbnRlclByZXNzZWQoZSkge1xuICAgIGxldCB0ID0gdGhpcy5ub2Rlcy5pbnB1dC52YWx1ZSB8fCBcIlwiO1xuICAgIGlmICghdC50cmltKCkpIHtcbiAgICAgIHRoaXMuc2VsZWN0aW9uLnJlc3RvcmUoKSwgdGhpcy51bmxpbmsoKSwgZS5wcmV2ZW50RGVmYXVsdCgpLCB0aGlzLmNsb3NlQWN0aW9ucygpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoIXRoaXMudmFsaWRhdGVVUkwodCkpIHtcbiAgICAgIHRoaXMubm90aWZpZXIuc2hvdyh7XG4gICAgICAgIG1lc3NhZ2U6IFwiUGFzdGVkIGxpbmsgaXMgbm90IHZhbGlkLlwiLFxuICAgICAgICBzdHlsZTogXCJlcnJvclwiXG4gICAgICB9KSwgVChcIkluY29ycmVjdCBMaW5rIHBhc3RlZFwiLCBcIndhcm5cIiwgdCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHQgPSB0aGlzLnByZXBhcmVMaW5rKHQpLCB0aGlzLnNlbGVjdGlvbi5yZXN0b3JlKCksIHRoaXMuc2VsZWN0aW9uLnJlbW92ZUZha2VCYWNrZ3JvdW5kKCksIHRoaXMuaW5zZXJ0TGluayh0KSwgZS5wcmV2ZW50RGVmYXVsdCgpLCBlLnN0b3BQcm9wYWdhdGlvbigpLCBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpLCB0aGlzLnNlbGVjdGlvbi5jb2xsYXBzZVRvRW5kKCksIHRoaXMuaW5saW5lVG9vbGJhci5jbG9zZSgpO1xuICB9XG4gIC8qKlxuICAgKiBEZXRlY3RzIGlmIHBhc3NlZCBzdHJpbmcgaXMgVVJMXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgLSBzdHJpbmcgdG8gdmFsaWRhdGVcbiAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAqL1xuICB2YWxpZGF0ZVVSTChlKSB7XG4gICAgcmV0dXJuICEvXFxzLy50ZXN0KGUpO1xuICB9XG4gIC8qKlxuICAgKiBQcm9jZXNzIGxpbmsgYmVmb3JlIGluamVjdGlvblxuICAgKiAtIHNhbml0aXplXG4gICAqIC0gYWRkIHByb3RvY29sIGZvciBsaW5rcyBsaWtlICdnb29nbGUuY29tJ1xuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbGluayAtIHJhdyB1c2VyIGlucHV0XG4gICAqL1xuICBwcmVwYXJlTGluayhlKSB7XG4gICAgcmV0dXJuIGUgPSBlLnRyaW0oKSwgZSA9IHRoaXMuYWRkUHJvdG9jb2woZSksIGU7XG4gIH1cbiAgLyoqXG4gICAqIEFkZCAnaHR0cCcgcHJvdG9jb2wgdG8gdGhlIGxpbmtzIGxpa2UgJ3ZjLnJ1JywgJ2dvb2dsZS5jb20nXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBsaW5rIC0gc3RyaW5nIHRvIHByb2Nlc3NcbiAgICovXG4gIGFkZFByb3RvY29sKGUpIHtcbiAgICBpZiAoL14oXFx3Kyk6KFxcL1xcLyk/Ly50ZXN0KGUpKVxuICAgICAgcmV0dXJuIGU7XG4gICAgY29uc3QgdCA9IC9eXFwvW14vXFxzXS8udGVzdChlKSwgbyA9IGUuc3Vic3RyaW5nKDAsIDEpID09PSBcIiNcIiwgaSA9IC9eXFwvXFwvW14vXFxzXS8udGVzdChlKTtcbiAgICByZXR1cm4gIXQgJiYgIW8gJiYgIWkgJiYgKGUgPSBcImh0dHA6Ly9cIiArIGUpLCBlO1xuICB9XG4gIC8qKlxuICAgKiBJbnNlcnRzIDxhPiB0YWcgd2l0aCBcImhyZWZcIlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbGluayAtIFwiaHJlZlwiIHZhbHVlXG4gICAqL1xuICBpbnNlcnRMaW5rKGUpIHtcbiAgICBjb25zdCB0ID0gdGhpcy5zZWxlY3Rpb24uZmluZFBhcmVudFRhZyhcIkFcIik7XG4gICAgdCAmJiB0aGlzLnNlbGVjdGlvbi5leHBhbmRUb1RhZyh0KSwgZG9jdW1lbnQuZXhlY0NvbW1hbmQodGhpcy5jb21tYW5kTGluaywgITEsIGUpO1xuICB9XG4gIC8qKlxuICAgKiBSZW1vdmVzIDxhPiB0YWdcbiAgICovXG4gIHVubGluaygpIHtcbiAgICBkb2N1bWVudC5leGVjQ29tbWFuZCh0aGlzLmNvbW1hbmRVbmxpbmspO1xuICB9XG59XG5xZS5pc0lubGluZSA9ICEwO1xucWUudGl0bGUgPSBcIkxpbmtcIjtcbmNsYXNzIFN0IHtcbiAgLyoqXG4gICAqIEBwYXJhbSBvcHRpb25zIC0gY29uc3RydWN0b3Igb3B0aW9uc1xuICAgKiBAcGFyYW0gb3B0aW9ucy5kYXRhIC0gc3R1YiB0b29sIGRhdGFcbiAgICogQHBhcmFtIG9wdGlvbnMuYXBpIC0gRWRpdG9yLmpzIEFQSVxuICAgKi9cbiAgY29uc3RydWN0b3IoeyBkYXRhOiBlLCBhcGk6IHQgfSkge1xuICAgIHRoaXMuQ1NTID0ge1xuICAgICAgd3JhcHBlcjogXCJjZS1zdHViXCIsXG4gICAgICBpbmZvOiBcImNlLXN0dWJfX2luZm9cIixcbiAgICAgIHRpdGxlOiBcImNlLXN0dWJfX3RpdGxlXCIsXG4gICAgICBzdWJ0aXRsZTogXCJjZS1zdHViX19zdWJ0aXRsZVwiXG4gICAgfSwgdGhpcy5hcGkgPSB0LCB0aGlzLnRpdGxlID0gZS50aXRsZSB8fCB0aGlzLmFwaS5pMThuLnQoXCJFcnJvclwiKSwgdGhpcy5zdWJ0aXRsZSA9IHRoaXMuYXBpLmkxOG4udChcIlRoZSBibG9jayBjYW4gbm90IGJlIGRpc3BsYXllZCBjb3JyZWN0bHkuXCIpLCB0aGlzLnNhdmVkRGF0YSA9IGUuc2F2ZWREYXRhLCB0aGlzLndyYXBwZXIgPSB0aGlzLm1ha2UoKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBzdHViIGhvbGRlclxuICAgKlxuICAgKiBAcmV0dXJucyB7SFRNTEVsZW1lbnR9XG4gICAqL1xuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIHRoaXMud3JhcHBlcjtcbiAgfVxuICAvKipcbiAgICogUmV0dXJuIG9yaWdpbmFsIFRvb2wgZGF0YVxuICAgKlxuICAgKiBAcmV0dXJucyB7QmxvY2tUb29sRGF0YX1cbiAgICovXG4gIHNhdmUoKSB7XG4gICAgcmV0dXJuIHRoaXMuc2F2ZWREYXRhO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgVG9vbCBodG1sIG1hcmt1cFxuICAgKlxuICAgKiBAcmV0dXJucyB7SFRNTEVsZW1lbnR9XG4gICAqL1xuICBtYWtlKCkge1xuICAgIGNvbnN0IGUgPSBjLm1ha2UoXCJkaXZcIiwgdGhpcy5DU1Mud3JhcHBlciksIHQgPSBVbywgbyA9IGMubWFrZShcImRpdlwiLCB0aGlzLkNTUy5pbmZvKSwgaSA9IGMubWFrZShcImRpdlwiLCB0aGlzLkNTUy50aXRsZSwge1xuICAgICAgdGV4dENvbnRlbnQ6IHRoaXMudGl0bGVcbiAgICB9KSwgbiA9IGMubWFrZShcImRpdlwiLCB0aGlzLkNTUy5zdWJ0aXRsZSwge1xuICAgICAgdGV4dENvbnRlbnQ6IHRoaXMuc3VidGl0bGVcbiAgICB9KTtcbiAgICByZXR1cm4gZS5pbm5lckhUTUwgPSB0LCBvLmFwcGVuZENoaWxkKGkpLCBvLmFwcGVuZENoaWxkKG4pLCBlLmFwcGVuZENoaWxkKG8pLCBlO1xuICB9XG59XG5TdC5pc1JlYWRPbmx5U3VwcG9ydGVkID0gITA7XG5jbGFzcyBoaSBleHRlbmRzIFllIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKSwgdGhpcy50eXBlID0gQmUuSW5saW5lO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIHRpdGxlIGZvciBJbmxpbmUgVG9vbCBpZiBzcGVjaWZpZWQgYnkgdXNlclxuICAgKi9cbiAgZ2V0IHRpdGxlKCkge1xuICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdGFibGVbV2UuVGl0bGVdO1xuICB9XG4gIC8qKlxuICAgKiBDb25zdHJ1Y3RzIG5ldyBJbmxpbmVUb29sIGluc3RhbmNlIGZyb20gY29uc3RydWN0YWJsZVxuICAgKi9cbiAgY3JlYXRlKCkge1xuICAgIHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RhYmxlKHtcbiAgICAgIGFwaTogdGhpcy5hcGkuZ2V0TWV0aG9kc0ZvclRvb2wodGhpcyksXG4gICAgICBjb25maWc6IHRoaXMuc2V0dGluZ3NcbiAgICB9KTtcbiAgfVxufVxuY2xhc3MgdWkgZXh0ZW5kcyBZZSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyksIHRoaXMudHlwZSA9IEJlLlR1bmU7XG4gIH1cbiAgLyoqXG4gICAqIENvbnN0cnVjdHMgbmV3IEJsb2NrVHVuZSBpbnN0YW5jZSBmcm9tIGNvbnN0cnVjdGFibGVcbiAgICpcbiAgICogQHBhcmFtIGRhdGEgLSBUdW5lIGRhdGFcbiAgICogQHBhcmFtIGJsb2NrIC0gQmxvY2sgQVBJIG9iamVjdFxuICAgKi9cbiAgY3JlYXRlKGUsIHQpIHtcbiAgICByZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0YWJsZSh7XG4gICAgICBhcGk6IHRoaXMuYXBpLmdldE1ldGhvZHNGb3JUb29sKHRoaXMpLFxuICAgICAgY29uZmlnOiB0aGlzLnNldHRpbmdzLFxuICAgICAgYmxvY2s6IHQsXG4gICAgICBkYXRhOiBlXG4gICAgfSk7XG4gIH1cbn1cbmNsYXNzIFAgZXh0ZW5kcyBNYXAge1xuICAvKipcbiAgICogUmV0dXJucyBCbG9jayBUb29scyBjb2xsZWN0aW9uXG4gICAqL1xuICBnZXQgYmxvY2tUb29scygpIHtcbiAgICBjb25zdCBlID0gQXJyYXkuZnJvbSh0aGlzLmVudHJpZXMoKSkuZmlsdGVyKChbLCB0XSkgPT4gdC5pc0Jsb2NrKCkpO1xuICAgIHJldHVybiBuZXcgUChlKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBJbmxpbmUgVG9vbHMgY29sbGVjdGlvblxuICAgKi9cbiAgZ2V0IGlubGluZVRvb2xzKCkge1xuICAgIGNvbnN0IGUgPSBBcnJheS5mcm9tKHRoaXMuZW50cmllcygpKS5maWx0ZXIoKFssIHRdKSA9PiB0LmlzSW5saW5lKCkpO1xuICAgIHJldHVybiBuZXcgUChlKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBCbG9jayBUdW5lcyBjb2xsZWN0aW9uXG4gICAqL1xuICBnZXQgYmxvY2tUdW5lcygpIHtcbiAgICBjb25zdCBlID0gQXJyYXkuZnJvbSh0aGlzLmVudHJpZXMoKSkuZmlsdGVyKChbLCB0XSkgPT4gdC5pc1R1bmUoKSk7XG4gICAgcmV0dXJuIG5ldyBQKGUpO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIGludGVybmFsIFRvb2xzIGNvbGxlY3Rpb25cbiAgICovXG4gIGdldCBpbnRlcm5hbFRvb2xzKCkge1xuICAgIGNvbnN0IGUgPSBBcnJheS5mcm9tKHRoaXMuZW50cmllcygpKS5maWx0ZXIoKFssIHRdKSA9PiB0LmlzSW50ZXJuYWwpO1xuICAgIHJldHVybiBuZXcgUChlKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBUb29scyBjb2xsZWN0aW9uIHByb3ZpZGVkIGJ5IHVzZXJcbiAgICovXG4gIGdldCBleHRlcm5hbFRvb2xzKCkge1xuICAgIGNvbnN0IGUgPSBBcnJheS5mcm9tKHRoaXMuZW50cmllcygpKS5maWx0ZXIoKFssIHRdKSA9PiAhdC5pc0ludGVybmFsKTtcbiAgICByZXR1cm4gbmV3IFAoZSk7XG4gIH1cbn1cbnZhciBwaSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSwgZmkgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yLCBJdCA9IChzLCBlLCB0LCBvKSA9PiB7XG4gIGZvciAodmFyIGkgPSBvID4gMSA/IHZvaWQgMCA6IG8gPyBmaShlLCB0KSA6IGUsIG4gPSBzLmxlbmd0aCAtIDEsIHI7IG4gPj0gMDsgbi0tKVxuICAgIChyID0gc1tuXSkgJiYgKGkgPSAobyA/IHIoZSwgdCwgaSkgOiByKGkpKSB8fCBpKTtcbiAgcmV0dXJuIG8gJiYgaSAmJiBwaShlLCB0LCBpKSwgaTtcbn07XG5jbGFzcyBaZSBleHRlbmRzIFllIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKSwgdGhpcy50eXBlID0gQmUuQmxvY2ssIHRoaXMuaW5saW5lVG9vbHMgPSBuZXcgUCgpLCB0aGlzLnR1bmVzID0gbmV3IFAoKTtcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlcyBuZXcgVG9vbCBpbnN0YW5jZVxuICAgKlxuICAgKiBAcGFyYW0gZGF0YSAtIFRvb2wgZGF0YVxuICAgKiBAcGFyYW0gYmxvY2sgLSBCbG9ja0FQSSBmb3IgY3VycmVudCBCbG9ja1xuICAgKiBAcGFyYW0gcmVhZE9ubHkgLSBUcnVlIGlmIEVkaXRvciBpcyBpbiByZWFkLW9ubHkgbW9kZVxuICAgKi9cbiAgY3JlYXRlKGUsIHQsIG8pIHtcbiAgICByZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0YWJsZSh7XG4gICAgICBkYXRhOiBlLFxuICAgICAgYmxvY2s6IHQsXG4gICAgICByZWFkT25seTogbyxcbiAgICAgIGFwaTogdGhpcy5hcGkuZ2V0TWV0aG9kc0ZvclRvb2wodGhpcyksXG4gICAgICBjb25maWc6IHRoaXMuc2V0dGluZ3NcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyB0cnVlIGlmIHJlYWQtb25seSBtb2RlIGlzIHN1cHBvcnRlZCBieSBUb29sXG4gICAqL1xuICBnZXQgaXNSZWFkT25seVN1cHBvcnRlZCgpIHtcbiAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3RhYmxlW3NlLklzUmVhZE9ubHlTdXBwb3J0ZWRdID09PSAhMDtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyB0cnVlIGlmIFRvb2wgc3VwcG9ydHMgbGluZWJyZWFrc1xuICAgKi9cbiAgZ2V0IGlzTGluZUJyZWFrc0VuYWJsZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29uc3RydWN0YWJsZVtzZS5Jc0VuYWJsZWRMaW5lQnJlYWtzXTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBUb29sIHRvb2xib3ggY29uZmlndXJhdGlvbiAoaW50ZXJuYWwgb3IgdXNlci1zcGVjaWZpZWQpLlxuICAgKlxuICAgKiBNZXJnZXMgaW50ZXJuYWwgYW5kIHVzZXItZGVmaW5lZCB0b29sYm94IGNvbmZpZ3MgYmFzZWQgb24gdGhlIGZvbGxvd2luZyBydWxlczpcbiAgICpcbiAgICogLSBJZiBib3RoIGludGVybmFsIGFuZCB1c2VyLWRlZmluZWQgdG9vbGJveCBjb25maWdzIGFyZSBhcnJheXMgdGhlaXIgaXRlbXMgYXJlIG1lcmdlZC5cbiAgICogTGVuZ3RoIG9mIHRoZSBzZWNvbmQgb25lIGlzIGtlcHQuXG4gICAqXG4gICAqIC0gSWYgYm90aCBhcmUgb2JqZWN0cyB0aGVpciBwcm9wZXJ0aWVzIGFyZSBtZXJnZWQuXG4gICAqXG4gICAqIC0gSWYgb25lIGlzIGFuIG9iamVjdCBhbmQgYW5vdGhlciBpcyBhbiBhcnJheSB0aGFuIGludGVybmFsIGNvbmZpZyBpcyByZXBsYWNlZCB3aXRoIHVzZXItZGVmaW5lZFxuICAgKiBjb25maWcuIFRoaXMgaXMgbWFkZSB0byBhbGxvdyB1c2VyIHRvIG92ZXJyaWRlIGRlZmF1bHQgdG9vbCdzIHRvb2xib3ggcmVwcmVzZW50YXRpb24gKHNpbmdsZS9tdWx0aXBsZSBlbnRyaWVzKVxuICAgKi9cbiAgZ2V0IHRvb2xib3goKSB7XG4gICAgY29uc3QgZSA9IHRoaXMuY29uc3RydWN0YWJsZVtzZS5Ub29sYm94XSwgdCA9IHRoaXMuY29uZmlnW3ZlLlRvb2xib3hdO1xuICAgIGlmICghVyhlKSAmJiB0ICE9PSAhMSlcbiAgICAgIHJldHVybiB0ID8gQXJyYXkuaXNBcnJheShlKSA/IEFycmF5LmlzQXJyYXkodCkgPyB0Lm1hcCgobywgaSkgPT4ge1xuICAgICAgICBjb25zdCBuID0gZVtpXTtcbiAgICAgICAgcmV0dXJuIG4gPyB7XG4gICAgICAgICAgLi4ubixcbiAgICAgICAgICAuLi5vXG4gICAgICAgIH0gOiBvO1xuICAgICAgfSkgOiBbdF0gOiBBcnJheS5pc0FycmF5KHQpID8gdCA6IFtcbiAgICAgICAge1xuICAgICAgICAgIC4uLmUsXG4gICAgICAgICAgLi4udFxuICAgICAgICB9XG4gICAgICBdIDogQXJyYXkuaXNBcnJheShlKSA/IGUgOiBbZV07XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgVG9vbCBjb252ZXJzaW9uIGNvbmZpZ3VyYXRpb25cbiAgICovXG4gIGdldCBjb252ZXJzaW9uQ29uZmlnKCkge1xuICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdGFibGVbc2UuQ29udmVyc2lvbkNvbmZpZ107XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgZW5hYmxlZCBpbmxpbmUgdG9vbHMgZm9yIFRvb2xcbiAgICovXG4gIGdldCBlbmFibGVkSW5saW5lVG9vbHMoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29uZmlnW3ZlLkVuYWJsZWRJbmxpbmVUb29sc10gfHwgITE7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgZW5hYmxlZCB0dW5lcyBmb3IgVG9vbFxuICAgKi9cbiAgZ2V0IGVuYWJsZWRCbG9ja1R1bmVzKCkge1xuICAgIHJldHVybiB0aGlzLmNvbmZpZ1t2ZS5FbmFibGVkQmxvY2tUdW5lc107XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgVG9vbCBwYXN0ZSBjb25maWd1cmF0aW9uXG4gICAqL1xuICBnZXQgcGFzdGVDb25maWcoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29uc3RydWN0YWJsZVtzZS5QYXN0ZUNvbmZpZ10gPz8ge307XG4gIH1cbiAgZ2V0IHNhbml0aXplQ29uZmlnKCkge1xuICAgIGNvbnN0IGUgPSBzdXBlci5zYW5pdGl6ZUNvbmZpZywgdCA9IHRoaXMuYmFzZVNhbml0aXplQ29uZmlnO1xuICAgIGlmIChXKGUpKVxuICAgICAgcmV0dXJuIHQ7XG4gICAgY29uc3QgbyA9IHt9O1xuICAgIGZvciAoY29uc3QgaSBpbiBlKVxuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLCBpKSkge1xuICAgICAgICBjb25zdCBuID0gZVtpXTtcbiAgICAgICAgRChuKSA/IG9baV0gPSBPYmplY3QuYXNzaWduKHt9LCB0LCBuKSA6IG9baV0gPSBuO1xuICAgICAgfVxuICAgIHJldHVybiBvO1xuICB9XG4gIGdldCBiYXNlU2FuaXRpemVDb25maWcoKSB7XG4gICAgY29uc3QgZSA9IHt9O1xuICAgIHJldHVybiBBcnJheS5mcm9tKHRoaXMuaW5saW5lVG9vbHMudmFsdWVzKCkpLmZvckVhY2goKHQpID0+IE9iamVjdC5hc3NpZ24oZSwgdC5zYW5pdGl6ZUNvbmZpZykpLCBBcnJheS5mcm9tKHRoaXMudHVuZXMudmFsdWVzKCkpLmZvckVhY2goKHQpID0+IE9iamVjdC5hc3NpZ24oZSwgdC5zYW5pdGl6ZUNvbmZpZykpLCBlO1xuICB9XG59XG5JdChbXG4gIGxlXG5dLCBaZS5wcm90b3R5cGUsIFwic2FuaXRpemVDb25maWdcIiwgMSk7XG5JdChbXG4gIGxlXG5dLCBaZS5wcm90b3R5cGUsIFwiYmFzZVNhbml0aXplQ29uZmlnXCIsIDEpO1xuY2xhc3MgZ2kge1xuICAvKipcbiAgICogQGNsYXNzXG4gICAqIEBwYXJhbSBjb25maWcgLSB0b29scyBjb25maWdcbiAgICogQHBhcmFtIGVkaXRvckNvbmZpZyAtIEVkaXRvckpTIGNvbmZpZ1xuICAgKiBAcGFyYW0gYXBpIC0gRWRpdG9ySlMgQVBJIG1vZHVsZVxuICAgKi9cbiAgY29uc3RydWN0b3IoZSwgdCwgbykge1xuICAgIHRoaXMuYXBpID0gbywgdGhpcy5jb25maWcgPSBlLCB0aGlzLmVkaXRvckNvbmZpZyA9IHQ7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgVG9vbCBvYmplY3QgYmFzZWQgb24gaXQncyB0eXBlXG4gICAqXG4gICAqIEBwYXJhbSBuYW1lIC0gdG9vbCBuYW1lXG4gICAqL1xuICBnZXQoZSkge1xuICAgIGNvbnN0IHsgY2xhc3M6IHQsIGlzSW50ZXJuYWw6IG8gPSAhMSwgLi4uaSB9ID0gdGhpcy5jb25maWdbZV0sIG4gPSB0aGlzLmdldENvbnN0cnVjdG9yKHQpO1xuICAgIHJldHVybiBuZXcgbih7XG4gICAgICBuYW1lOiBlLFxuICAgICAgY29uc3RydWN0YWJsZTogdCxcbiAgICAgIGNvbmZpZzogaSxcbiAgICAgIGFwaTogdGhpcy5hcGksXG4gICAgICBpc0RlZmF1bHQ6IGUgPT09IHRoaXMuZWRpdG9yQ29uZmlnLmRlZmF1bHRCbG9jayxcbiAgICAgIGRlZmF1bHRQbGFjZWhvbGRlcjogdGhpcy5lZGl0b3JDb25maWcucGxhY2Vob2xkZXIsXG4gICAgICBpc0ludGVybmFsOiBvXG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIEZpbmQgYXBwcm9wcmlhdGUgVG9vbCBvYmplY3QgY29uc3RydWN0b3IgZm9yIFRvb2wgY29uc3RydWN0YWJsZVxuICAgKlxuICAgKiBAcGFyYW0gY29uc3RydWN0YWJsZSAtIFRvb2xzIGNvbnN0cnVjdGFibGVcbiAgICovXG4gIGdldENvbnN0cnVjdG9yKGUpIHtcbiAgICBzd2l0Y2ggKCEwKSB7XG4gICAgICBjYXNlIGVbV2UuSXNJbmxpbmVdOlxuICAgICAgICByZXR1cm4gaGk7XG4gICAgICBjYXNlIGVbQnQuSXNUdW5lXTpcbiAgICAgICAgcmV0dXJuIHVpO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIFplO1xuICAgIH1cbiAgfVxufVxuY2xhc3MgTXQge1xuICAvKipcbiAgICogTW92ZURvd25UdW5lIGNvbnN0cnVjdG9yXG4gICAqXG4gICAqIEBwYXJhbSB7QVBJfSBhcGkg4oCUIEVkaXRvcidzIEFQSVxuICAgKi9cbiAgY29uc3RydWN0b3IoeyBhcGk6IGUgfSkge1xuICAgIHRoaXMuQ1NTID0ge1xuICAgICAgYW5pbWF0aW9uOiBcIndvYmJsZVwiXG4gICAgfSwgdGhpcy5hcGkgPSBlO1xuICB9XG4gIC8qKlxuICAgKiBUdW5lJ3MgYXBwZWFyYW5jZSBpbiBibG9jayBzZXR0aW5ncyBtZW51XG4gICAqL1xuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGljb246IGt0LFxuICAgICAgdGl0bGU6IHRoaXMuYXBpLmkxOG4udChcIk1vdmUgZG93blwiKSxcbiAgICAgIG9uQWN0aXZhdGU6ICgpID0+IHRoaXMuaGFuZGxlQ2xpY2soKSxcbiAgICAgIG5hbWU6IFwibW92ZS1kb3duXCJcbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBIYW5kbGUgY2xpY2tzIG9uICdtb3ZlIGRvd24nIGJ1dHRvblxuICAgKi9cbiAgaGFuZGxlQ2xpY2soKSB7XG4gICAgY29uc3QgZSA9IHRoaXMuYXBpLmJsb2Nrcy5nZXRDdXJyZW50QmxvY2tJbmRleCgpLCB0ID0gdGhpcy5hcGkuYmxvY2tzLmdldEJsb2NrQnlJbmRleChlICsgMSk7XG4gICAgaWYgKCF0KVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5hYmxlIHRvIG1vdmUgQmxvY2sgZG93biBzaW5jZSBpdCBpcyBhbHJlYWR5IHRoZSBsYXN0XCIpO1xuICAgIGNvbnN0IG8gPSB0LmhvbGRlciwgaSA9IG8uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgbGV0IG4gPSBNYXRoLmFicyh3aW5kb3cuaW5uZXJIZWlnaHQgLSBvLm9mZnNldEhlaWdodCk7XG4gICAgaS50b3AgPCB3aW5kb3cuaW5uZXJIZWlnaHQgJiYgKG4gPSB3aW5kb3cuc2Nyb2xsWSArIG8ub2Zmc2V0SGVpZ2h0KSwgd2luZG93LnNjcm9sbFRvKDAsIG4pLCB0aGlzLmFwaS5ibG9ja3MubW92ZShlICsgMSksIHRoaXMuYXBpLnRvb2xiYXIudG9nZ2xlQmxvY2tTZXR0aW5ncyghMCk7XG4gIH1cbn1cbk10LmlzVHVuZSA9ICEwO1xuY2xhc3MgTHQge1xuICAvKipcbiAgICogRGVsZXRlVHVuZSBjb25zdHJ1Y3RvclxuICAgKlxuICAgKiBAcGFyYW0ge0FQSX0gYXBpIC0gRWRpdG9yJ3MgQVBJXG4gICAqL1xuICBjb25zdHJ1Y3Rvcih7IGFwaTogZSB9KSB7XG4gICAgdGhpcy5hcGkgPSBlO1xuICB9XG4gIC8qKlxuICAgKiBUdW5lJ3MgYXBwZWFyYW5jZSBpbiBibG9jayBzZXR0aW5ncyBtZW51XG4gICAqL1xuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGljb246IE5vLFxuICAgICAgdGl0bGU6IHRoaXMuYXBpLmkxOG4udChcIkRlbGV0ZVwiKSxcbiAgICAgIG5hbWU6IFwiZGVsZXRlXCIsXG4gICAgICBjb25maXJtYXRpb246IHtcbiAgICAgICAgdGl0bGU6IHRoaXMuYXBpLmkxOG4udChcIkNsaWNrIHRvIGRlbGV0ZVwiKSxcbiAgICAgICAgb25BY3RpdmF0ZTogKCkgPT4gdGhpcy5oYW5kbGVDbGljaygpXG4gICAgICB9XG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogRGVsZXRlIGJsb2NrIGNvbmRpdGlvbnMgcGFzc2VkXG4gICAqL1xuICBoYW5kbGVDbGljaygpIHtcbiAgICB0aGlzLmFwaS5ibG9ja3MuZGVsZXRlKCk7XG4gIH1cbn1cbkx0LmlzVHVuZSA9ICEwO1xuY2xhc3MgQXQge1xuICAvKipcbiAgICogTW92ZVVwVHVuZSBjb25zdHJ1Y3RvclxuICAgKlxuICAgKiBAcGFyYW0ge0FQSX0gYXBpIC0gRWRpdG9yJ3MgQVBJXG4gICAqL1xuICBjb25zdHJ1Y3Rvcih7IGFwaTogZSB9KSB7XG4gICAgdGhpcy5DU1MgPSB7XG4gICAgICBhbmltYXRpb246IFwid29iYmxlXCJcbiAgICB9LCB0aGlzLmFwaSA9IGU7XG4gIH1cbiAgLyoqXG4gICAqIFR1bmUncyBhcHBlYXJhbmNlIGluIGJsb2NrIHNldHRpbmdzIG1lbnVcbiAgICovXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaWNvbjogT28sXG4gICAgICB0aXRsZTogdGhpcy5hcGkuaTE4bi50KFwiTW92ZSB1cFwiKSxcbiAgICAgIG9uQWN0aXZhdGU6ICgpID0+IHRoaXMuaGFuZGxlQ2xpY2soKSxcbiAgICAgIG5hbWU6IFwibW92ZS11cFwiXG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogTW92ZSBjdXJyZW50IGJsb2NrIHVwXG4gICAqL1xuICBoYW5kbGVDbGljaygpIHtcbiAgICBjb25zdCBlID0gdGhpcy5hcGkuYmxvY2tzLmdldEN1cnJlbnRCbG9ja0luZGV4KCksIHQgPSB0aGlzLmFwaS5ibG9ja3MuZ2V0QmxvY2tCeUluZGV4KGUpLCBvID0gdGhpcy5hcGkuYmxvY2tzLmdldEJsb2NrQnlJbmRleChlIC0gMSk7XG4gICAgaWYgKGUgPT09IDAgfHwgIXQgfHwgIW8pXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbmFibGUgdG8gbW92ZSBCbG9jayB1cCBzaW5jZSBpdCBpcyBhbHJlYWR5IHRoZSBmaXJzdFwiKTtcbiAgICBjb25zdCBpID0gdC5ob2xkZXIsIG4gPSBvLmhvbGRlciwgciA9IGkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksIGEgPSBuLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIGxldCBsO1xuICAgIGEudG9wID4gMCA/IGwgPSBNYXRoLmFicyhyLnRvcCkgLSBNYXRoLmFicyhhLnRvcCkgOiBsID0gTWF0aC5hYnMoci50b3ApICsgYS5oZWlnaHQsIHdpbmRvdy5zY3JvbGxCeSgwLCAtMSAqIGwpLCB0aGlzLmFwaS5ibG9ja3MubW92ZShlIC0gMSksIHRoaXMuYXBpLnRvb2xiYXIudG9nZ2xlQmxvY2tTZXR0aW5ncyghMCk7XG4gIH1cbn1cbkF0LmlzVHVuZSA9ICEwO1xudmFyIGJpID0gT2JqZWN0LmRlZmluZVByb3BlcnR5LCBtaSA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IsIGtpID0gKHMsIGUsIHQsIG8pID0+IHtcbiAgZm9yICh2YXIgaSA9IG8gPiAxID8gdm9pZCAwIDogbyA/IG1pKGUsIHQpIDogZSwgbiA9IHMubGVuZ3RoIC0gMSwgcjsgbiA+PSAwOyBuLS0pXG4gICAgKHIgPSBzW25dKSAmJiAoaSA9IChvID8gcihlLCB0LCBpKSA6IHIoaSkpIHx8IGkpO1xuICByZXR1cm4gbyAmJiBpICYmIGJpKGUsIHQsIGkpLCBpO1xufTtcbmNsYXNzIF90IGV4dGVuZHMgeSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyksIHRoaXMuc3R1YlRvb2wgPSBcInN0dWJcIiwgdGhpcy50b29sc0F2YWlsYWJsZSA9IG5ldyBQKCksIHRoaXMudG9vbHNVbmF2YWlsYWJsZSA9IG5ldyBQKCk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgYXZhaWxhYmxlIFRvb2xzXG4gICAqL1xuICBnZXQgYXZhaWxhYmxlKCkge1xuICAgIHJldHVybiB0aGlzLnRvb2xzQXZhaWxhYmxlO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIHVuYXZhaWxhYmxlIFRvb2xzXG4gICAqL1xuICBnZXQgdW5hdmFpbGFibGUoKSB7XG4gICAgcmV0dXJuIHRoaXMudG9vbHNVbmF2YWlsYWJsZTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJuIFRvb2xzIGZvciB0aGUgSW5saW5lIFRvb2xiYXJcbiAgICovXG4gIGdldCBpbmxpbmVUb29scygpIHtcbiAgICByZXR1cm4gdGhpcy5hdmFpbGFibGUuaW5saW5lVG9vbHM7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybiBlZGl0b3IgYmxvY2sgdG9vbHNcbiAgICovXG4gIGdldCBibG9ja1Rvb2xzKCkge1xuICAgIHJldHVybiB0aGlzLmF2YWlsYWJsZS5ibG9ja1Rvb2xzO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm4gYXZhaWxhYmxlIEJsb2NrIFR1bmVzXG4gICAqXG4gICAqIEByZXR1cm5zIHtvYmplY3R9IC0gb2JqZWN0IG9mIElubGluZSBUb29sJ3MgY2xhc3Nlc1xuICAgKi9cbiAgZ2V0IGJsb2NrVHVuZXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuYXZhaWxhYmxlLmJsb2NrVHVuZXM7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgZGVmYXVsdCBUb29sIG9iamVjdFxuICAgKi9cbiAgZ2V0IGRlZmF1bHRUb29sKCkge1xuICAgIHJldHVybiB0aGlzLmJsb2NrVG9vbHMuZ2V0KHRoaXMuY29uZmlnLmRlZmF1bHRCbG9jayk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgaW50ZXJuYWwgdG9vbHNcbiAgICovXG4gIGdldCBpbnRlcm5hbCgpIHtcbiAgICByZXR1cm4gdGhpcy5hdmFpbGFibGUuaW50ZXJuYWxUb29scztcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlcyBpbnN0YW5jZXMgdmlhIHBhc3NlZCBvciBkZWZhdWx0IGNvbmZpZ3VyYXRpb25cbiAgICpcbiAgICogQHJldHVybnMge1Byb21pc2U8dm9pZD59XG4gICAqL1xuICBhc3luYyBwcmVwYXJlKCkge1xuICAgIGlmICh0aGlzLnZhbGlkYXRlVG9vbHMoKSwgdGhpcy5jb25maWcudG9vbHMgPSBNZSh7fSwgdGhpcy5pbnRlcm5hbFRvb2xzLCB0aGlzLmNvbmZpZy50b29scyksICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodGhpcy5jb25maWcsIFwidG9vbHNcIikgfHwgT2JqZWN0LmtleXModGhpcy5jb25maWcudG9vbHMpLmxlbmd0aCA9PT0gMClcbiAgICAgIHRocm93IEVycm9yKFwiQ2FuJ3Qgc3RhcnQgd2l0aG91dCB0b29sc1wiKTtcbiAgICBjb25zdCBlID0gdGhpcy5wcmVwYXJlQ29uZmlnKCk7XG4gICAgdGhpcy5mYWN0b3J5ID0gbmV3IGdpKGUsIHRoaXMuY29uZmlnLCB0aGlzLkVkaXRvci5BUEkpO1xuICAgIGNvbnN0IHQgPSB0aGlzLmdldExpc3RPZlByZXBhcmVGdW5jdGlvbnMoZSk7XG4gICAgaWYgKHQubGVuZ3RoID09PSAwKVxuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgIGF3YWl0IHp0KHQsIChvKSA9PiB7XG4gICAgICB0aGlzLnRvb2xQcmVwYXJlTWV0aG9kU3VjY2VzcyhvKTtcbiAgICB9LCAobykgPT4ge1xuICAgICAgdGhpcy50b29sUHJlcGFyZU1ldGhvZEZhbGxiYWNrKG8pO1xuICAgIH0pLCB0aGlzLnByZXBhcmVCbG9ja1Rvb2xzKCk7XG4gIH1cbiAgZ2V0QWxsSW5saW5lVG9vbHNTYW5pdGl6ZUNvbmZpZygpIHtcbiAgICBjb25zdCBlID0ge307XG4gICAgcmV0dXJuIEFycmF5LmZyb20odGhpcy5pbmxpbmVUb29scy52YWx1ZXMoKSkuZm9yRWFjaCgodCkgPT4ge1xuICAgICAgT2JqZWN0LmFzc2lnbihlLCB0LnNhbml0aXplQ29uZmlnKTtcbiAgICB9KSwgZTtcbiAgfVxuICAvKipcbiAgICogQ2FsbHMgZWFjaCBUb29sIHJlc2V0IG1ldGhvZCB0byBjbGVhbiB1cCBhbnl0aGluZyBzZXQgYnkgVG9vbFxuICAgKi9cbiAgZGVzdHJveSgpIHtcbiAgICBPYmplY3QudmFsdWVzKHRoaXMuYXZhaWxhYmxlKS5mb3JFYWNoKGFzeW5jIChlKSA9PiB7XG4gICAgICBNKGUucmVzZXQpICYmIGF3YWl0IGUucmVzZXQoKTtcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBpbnRlcm5hbCB0b29sc1xuICAgKiBJbmNsdWRlcyBCb2xkLCBJdGFsaWMsIExpbmsgYW5kIFBhcmFncmFwaFxuICAgKi9cbiAgZ2V0IGludGVybmFsVG9vbHMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGJvbGQ6IHtcbiAgICAgICAgY2xhc3M6IFhlLFxuICAgICAgICBpc0ludGVybmFsOiAhMFxuICAgICAgfSxcbiAgICAgIGl0YWxpYzoge1xuICAgICAgICBjbGFzczogVmUsXG4gICAgICAgIGlzSW50ZXJuYWw6ICEwXG4gICAgICB9LFxuICAgICAgbGluazoge1xuICAgICAgICBjbGFzczogcWUsXG4gICAgICAgIGlzSW50ZXJuYWw6ICEwXG4gICAgICB9LFxuICAgICAgcGFyYWdyYXBoOiB7XG4gICAgICAgIGNsYXNzOiBLZSxcbiAgICAgICAgaW5saW5lVG9vbGJhcjogITAsXG4gICAgICAgIGlzSW50ZXJuYWw6ICEwXG4gICAgICB9LFxuICAgICAgc3R1Yjoge1xuICAgICAgICBjbGFzczogU3QsXG4gICAgICAgIGlzSW50ZXJuYWw6ICEwXG4gICAgICB9LFxuICAgICAgbW92ZVVwOiB7XG4gICAgICAgIGNsYXNzOiBBdCxcbiAgICAgICAgaXNJbnRlcm5hbDogITBcbiAgICAgIH0sXG4gICAgICBkZWxldGU6IHtcbiAgICAgICAgY2xhc3M6IEx0LFxuICAgICAgICBpc0ludGVybmFsOiAhMFxuICAgICAgfSxcbiAgICAgIG1vdmVEb3duOiB7XG4gICAgICAgIGNsYXNzOiBNdCxcbiAgICAgICAgaXNJbnRlcm5hbDogITBcbiAgICAgIH1cbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBUb29sIHByZXBhcmUgbWV0aG9kIHN1Y2Nlc3MgY2FsbGJhY2tcbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGRhdGEgLSBhcHBlbmQgdG9vbCB0byBhdmFpbGFibGUgbGlzdFxuICAgKi9cbiAgdG9vbFByZXBhcmVNZXRob2RTdWNjZXNzKGUpIHtcbiAgICBjb25zdCB0ID0gdGhpcy5mYWN0b3J5LmdldChlLnRvb2xOYW1lKTtcbiAgICBpZiAodC5pc0lubGluZSgpKSB7XG4gICAgICBjb25zdCBpID0gW1wicmVuZGVyXCIsIFwic3Vycm91bmRcIiwgXCJjaGVja1N0YXRlXCJdLmZpbHRlcigobikgPT4gIXQuY3JlYXRlKClbbl0pO1xuICAgICAgaWYgKGkubGVuZ3RoKSB7XG4gICAgICAgIFQoXG4gICAgICAgICAgYEluY29ycmVjdCBJbmxpbmUgVG9vbDogJHt0Lm5hbWV9LiBTb21lIG9mIHJlcXVpcmVkIG1ldGhvZHMgaXMgbm90IGltcGxlbWVudGVkICVvYCxcbiAgICAgICAgICBcIndhcm5cIixcbiAgICAgICAgICBpXG4gICAgICAgICksIHRoaXMudG9vbHNVbmF2YWlsYWJsZS5zZXQodC5uYW1lLCB0KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLnRvb2xzQXZhaWxhYmxlLnNldCh0Lm5hbWUsIHQpO1xuICB9XG4gIC8qKlxuICAgKiBUb29sIHByZXBhcmUgbWV0aG9kIGZhaWwgY2FsbGJhY2tcbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGRhdGEgLSBhcHBlbmQgdG9vbCB0byB1bmF2YWlsYWJsZSBsaXN0XG4gICAqL1xuICB0b29sUHJlcGFyZU1ldGhvZEZhbGxiYWNrKGUpIHtcbiAgICB0aGlzLnRvb2xzVW5hdmFpbGFibGUuc2V0KGUudG9vbE5hbWUsIHRoaXMuZmFjdG9yeS5nZXQoZS50b29sTmFtZSkpO1xuICB9XG4gIC8qKlxuICAgKiBCaW5kcyBwcmVwYXJlIGZ1bmN0aW9uIG9mIHBsdWdpbnMgd2l0aCB1c2VyIG9yIGRlZmF1bHQgY29uZmlnXG4gICAqXG4gICAqIEByZXR1cm5zIHtBcnJheX0gbGlzdCBvZiBmdW5jdGlvbnMgdGhhdCBuZWVkcyB0byBiZSBmaXJlZCBzZXF1ZW50aWFsbHlcbiAgICogQHBhcmFtIGNvbmZpZyAtIHRvb2xzIGNvbmZpZ1xuICAgKi9cbiAgZ2V0TGlzdE9mUHJlcGFyZUZ1bmN0aW9ucyhlKSB7XG4gICAgY29uc3QgdCA9IFtdO1xuICAgIHJldHVybiBPYmplY3QuZW50cmllcyhlKS5mb3JFYWNoKChbbywgaV0pID0+IHtcbiAgICAgIHQucHVzaCh7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZW1wdHktZnVuY3Rpb25cbiAgICAgICAgZnVuY3Rpb246IE0oaS5jbGFzcy5wcmVwYXJlKSA/IGkuY2xhc3MucHJlcGFyZSA6ICgpID0+IHtcbiAgICAgICAgfSxcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgIHRvb2xOYW1lOiBvLFxuICAgICAgICAgIGNvbmZpZzogaS5jb25maWdcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSksIHQ7XG4gIH1cbiAgLyoqXG4gICAqIEFzc2lnbiBlbmFibGVkIElubGluZSBUb29scyBhbmQgQmxvY2sgVHVuZXMgZm9yIEJsb2NrIFRvb2xcbiAgICovXG4gIHByZXBhcmVCbG9ja1Rvb2xzKCkge1xuICAgIEFycmF5LmZyb20odGhpcy5ibG9ja1Rvb2xzLnZhbHVlcygpKS5mb3JFYWNoKChlKSA9PiB7XG4gICAgICB0aGlzLmFzc2lnbklubGluZVRvb2xzVG9CbG9ja1Rvb2woZSksIHRoaXMuYXNzaWduQmxvY2tUdW5lc1RvQmxvY2tUb29sKGUpO1xuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBBc3NpZ24gZW5hYmxlZCBJbmxpbmUgVG9vbHMgZm9yIEJsb2NrIFRvb2xcbiAgICpcbiAgICogQHBhcmFtIHRvb2wgLSBCbG9jayBUb29sXG4gICAqL1xuICBhc3NpZ25JbmxpbmVUb29sc1RvQmxvY2tUb29sKGUpIHtcbiAgICBpZiAodGhpcy5jb25maWcuaW5saW5lVG9vbGJhciAhPT0gITEpIHtcbiAgICAgIGlmIChlLmVuYWJsZWRJbmxpbmVUb29scyA9PT0gITApIHtcbiAgICAgICAgZS5pbmxpbmVUb29scyA9IG5ldyBQKFxuICAgICAgICAgIEFycmF5LmlzQXJyYXkodGhpcy5jb25maWcuaW5saW5lVG9vbGJhcikgPyB0aGlzLmNvbmZpZy5pbmxpbmVUb29sYmFyLm1hcCgodCkgPT4gW3QsIHRoaXMuaW5saW5lVG9vbHMuZ2V0KHQpXSkgOiBBcnJheS5mcm9tKHRoaXMuaW5saW5lVG9vbHMuZW50cmllcygpKVxuICAgICAgICApO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBBcnJheS5pc0FycmF5KGUuZW5hYmxlZElubGluZVRvb2xzKSAmJiAoZS5pbmxpbmVUb29scyA9IG5ldyBQKFxuICAgICAgICBlLmVuYWJsZWRJbmxpbmVUb29scy5tYXAoKHQpID0+IFt0LCB0aGlzLmlubGluZVRvb2xzLmdldCh0KV0pXG4gICAgICApKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIEFzc2lnbiBlbmFibGVkIEJsb2NrIFR1bmVzIGZvciBCbG9jayBUb29sXG4gICAqXG4gICAqIEBwYXJhbSB0b29sIOKAlCBCbG9jayBUb29sXG4gICAqL1xuICBhc3NpZ25CbG9ja1R1bmVzVG9CbG9ja1Rvb2woZSkge1xuICAgIGlmIChlLmVuYWJsZWRCbG9ja1R1bmVzICE9PSAhMSkge1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZS5lbmFibGVkQmxvY2tUdW5lcykpIHtcbiAgICAgICAgY29uc3QgdCA9IG5ldyBQKFxuICAgICAgICAgIGUuZW5hYmxlZEJsb2NrVHVuZXMubWFwKChvKSA9PiBbbywgdGhpcy5ibG9ja1R1bmVzLmdldChvKV0pXG4gICAgICAgICk7XG4gICAgICAgIGUudHVuZXMgPSBuZXcgUChbLi4udCwgLi4udGhpcy5ibG9ja1R1bmVzLmludGVybmFsVG9vbHNdKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkodGhpcy5jb25maWcudHVuZXMpKSB7XG4gICAgICAgIGNvbnN0IHQgPSBuZXcgUChcbiAgICAgICAgICB0aGlzLmNvbmZpZy50dW5lcy5tYXAoKG8pID0+IFtvLCB0aGlzLmJsb2NrVHVuZXMuZ2V0KG8pXSlcbiAgICAgICAgKTtcbiAgICAgICAgZS50dW5lcyA9IG5ldyBQKFsuLi50LCAuLi50aGlzLmJsb2NrVHVuZXMuaW50ZXJuYWxUb29sc10pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBlLnR1bmVzID0gdGhpcy5ibG9ja1R1bmVzLmludGVybmFsVG9vbHM7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBWYWxpZGF0ZSBUb29scyBjb25maWd1cmF0aW9uIG9iamVjdHMgYW5kIHRocm93IEVycm9yIGZvciB1c2VyIGlmIGl0IGlzIGludmFsaWRcbiAgICovXG4gIHZhbGlkYXRlVG9vbHMoKSB7XG4gICAgZm9yIChjb25zdCBlIGluIHRoaXMuY29uZmlnLnRvb2xzKVxuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0aGlzLmNvbmZpZy50b29scywgZSkpIHtcbiAgICAgICAgaWYgKGUgaW4gdGhpcy5pbnRlcm5hbFRvb2xzKVxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgY29uc3QgdCA9IHRoaXMuY29uZmlnLnRvb2xzW2VdO1xuICAgICAgICBpZiAoIU0odCkgJiYgIU0odC5jbGFzcykpXG4gICAgICAgICAgdGhyb3cgRXJyb3IoXG4gICAgICAgICAgICBgVG9vbCDCqyR7ZX3CuyBtdXN0IGJlIGEgY29uc3RydWN0b3IgZnVuY3Rpb24gb3IgYW4gb2JqZWN0IHdpdGggZnVuY3Rpb24gaW4gdGhlIMKrY2xhc3PCuyBwcm9wZXJ0eWBcbiAgICAgICAgICApO1xuICAgICAgfVxuICB9XG4gIC8qKlxuICAgKiBVbmlmeSB0b29scyBjb25maWdcbiAgICovXG4gIHByZXBhcmVDb25maWcoKSB7XG4gICAgY29uc3QgZSA9IHt9O1xuICAgIGZvciAoY29uc3QgdCBpbiB0aGlzLmNvbmZpZy50b29scylcbiAgICAgIEQodGhpcy5jb25maWcudG9vbHNbdF0pID8gZVt0XSA9IHRoaXMuY29uZmlnLnRvb2xzW3RdIDogZVt0XSA9IHsgY2xhc3M6IHRoaXMuY29uZmlnLnRvb2xzW3RdIH07XG4gICAgcmV0dXJuIGU7XG4gIH1cbn1cbmtpKFtcbiAgbGVcbl0sIF90LnByb3RvdHlwZSwgXCJnZXRBbGxJbmxpbmVUb29sc1Nhbml0aXplQ29uZmlnXCIsIDEpO1xuY29uc3QgdmkgPSBgOnJvb3R7LS1zZWxlY3Rpb25Db2xvcjogI2UxZjJmZjstLWlubGluZVNlbGVjdGlvbkNvbG9yOiAjZDRlY2ZmOy0tYmctbGlnaHQ6ICNlZmYyZjU7LS1ncmF5VGV4dDogIzcwNzY4NDstLWNvbG9yLWRhcms6ICMxRDIwMkI7LS1jb2xvci1hY3RpdmUtaWNvbjogIzM4OEFFNTstLWNvbG9yLWdyYXktYm9yZGVyOiByZ2JhKDIwMSwgMjAxLCAyMDQsIC40OCk7LS1jb250ZW50LXdpZHRoOiA2NTBweDstLW5hcnJvdy1tb2RlLXJpZ2h0LXBhZGRpbmc6IDUwcHg7LS10b29sYm94LWJ1dHRvbnMtc2l6ZTogMjZweDstLXRvb2xib3gtYnV0dG9ucy1zaXplLS1tb2JpbGU6IDM2cHg7LS1pY29uLXNpemU6IDIwcHg7LS1pY29uLXNpemUtLW1vYmlsZTogMjhweDstLWJsb2NrLXBhZGRpbmctdmVydGljYWw6IC40ZW07LS1jb2xvci1saW5lLWdyYXk6ICNFRkYwRjEgfS5jb2RleC1lZGl0b3J7cG9zaXRpb246cmVsYXRpdmU7LXdlYmtpdC1ib3gtc2l6aW5nOmJvcmRlci1ib3g7Ym94LXNpemluZzpib3JkZXItYm94O3otaW5kZXg6MX0uY29kZXgtZWRpdG9yIC5oaWRle2Rpc3BsYXk6bm9uZX0uY29kZXgtZWRpdG9yX19yZWRhY3RvciBbY29udGVudGVkaXRhYmxlXTplbXB0eTphZnRlcntjb250ZW50OlwiXFxcXGZlZmZcIn1AbWVkaWEgKG1pbi13aWR0aDogNjUxcHgpey5jb2RleC1lZGl0b3ItLW5hcnJvdyAuY29kZXgtZWRpdG9yX19yZWRhY3RvcnttYXJnaW4tcmlnaHQ6NTBweH19QG1lZGlhIChtaW4td2lkdGg6IDY1MXB4KXsuY29kZXgtZWRpdG9yLS1uYXJyb3cuY29kZXgtZWRpdG9yLS1ydGwgLmNvZGV4LWVkaXRvcl9fcmVkYWN0b3J7bWFyZ2luLWxlZnQ6NTBweDttYXJnaW4tcmlnaHQ6MH19QG1lZGlhIChtaW4td2lkdGg6IDY1MXB4KXsuY29kZXgtZWRpdG9yLS1uYXJyb3cgLmNlLXRvb2xiYXJfX2FjdGlvbnN7cmlnaHQ6LTVweH19LmNvZGV4LWVkaXRvci1jb3B5YWJsZXtwb3NpdGlvbjphYnNvbHV0ZTtoZWlnaHQ6MXB4O3dpZHRoOjFweDt0b3A6LTQwMCU7b3BhY2l0eTouMDAxfS5jb2RleC1lZGl0b3Itb3ZlcmxheXtwb3NpdGlvbjpmaXhlZDt0b3A6MHB4O2xlZnQ6MHB4O3JpZ2h0OjBweDtib3R0b206MHB4O3otaW5kZXg6OTk5O3BvaW50ZXItZXZlbnRzOm5vbmU7b3ZlcmZsb3c6aGlkZGVufS5jb2RleC1lZGl0b3Itb3ZlcmxheV9fY29udGFpbmVye3Bvc2l0aW9uOnJlbGF0aXZlO3BvaW50ZXItZXZlbnRzOmF1dG87ei1pbmRleDowfS5jb2RleC1lZGl0b3Itb3ZlcmxheV9fcmVjdGFuZ2xle3Bvc2l0aW9uOmFic29sdXRlO3BvaW50ZXItZXZlbnRzOm5vbmU7YmFja2dyb3VuZC1jb2xvcjojMmVhYWRjMzM7Ym9yZGVyOjFweCBzb2xpZCB0cmFuc3BhcmVudH0uY29kZXgtZWRpdG9yIHN2Z3ttYXgtaGVpZ2h0OjEwMCV9LmNvZGV4LWVkaXRvciBwYXRoe3N0cm9rZTpjdXJyZW50Q29sb3J9LmNvZGV4LWVkaXRvciA6Oi1tb3otc2VsZWN0aW9ue2JhY2tncm91bmQtY29sb3I6I2Q0ZWNmZn0uY29kZXgtZWRpdG9yIDo6c2VsZWN0aW9ue2JhY2tncm91bmQtY29sb3I6I2Q0ZWNmZn0uY29kZXgtZWRpdG9yLS10b29sYm94LW9wZW5lZCBbY29udGVudEVkaXRhYmxlPXRydWVdW2RhdGEtcGxhY2Vob2xkZXJdOmZvY3VzOmJlZm9yZXtvcGFjaXR5OjAhaW1wb3J0YW50fS5jZS1zY3JvbGwtbG9ja2Vke292ZXJmbG93OmhpZGRlbn0uY2Utc2Nyb2xsLWxvY2tlZC0taGFyZHtvdmVyZmxvdzpoaWRkZW47dG9wOmNhbGMoLTEgKiB2YXIoLS13aW5kb3ctc2Nyb2xsLW9mZnNldCkpO3Bvc2l0aW9uOmZpeGVkO3dpZHRoOjEwMCV9LmNlLXRvb2xiYXJ7cG9zaXRpb246YWJzb2x1dGU7bGVmdDowO3JpZ2h0OjA7dG9wOjA7LXdlYmtpdC10cmFuc2l0aW9uOm9wYWNpdHkgLjFzIGVhc2U7dHJhbnNpdGlvbjpvcGFjaXR5IC4xcyBlYXNlO3dpbGwtY2hhbmdlOm9wYWNpdHksdG9wO2Rpc3BsYXk6bm9uZX0uY2UtdG9vbGJhci0tb3BlbmVke2Rpc3BsYXk6YmxvY2t9LmNlLXRvb2xiYXJfX2NvbnRlbnR7bWF4LXdpZHRoOjY1MHB4O21hcmdpbjowIGF1dG87cG9zaXRpb246cmVsYXRpdmV9LmNlLXRvb2xiYXJfX3BsdXN7Y29sb3I6IzFkMjAyYjtjdXJzb3I6cG9pbnRlcjt3aWR0aDoyNnB4O2hlaWdodDoyNnB4O2JvcmRlci1yYWRpdXM6N3B4O2Rpc3BsYXk6LXdlYmtpdC1pbmxpbmUtYm94O2Rpc3BsYXk6LW1zLWlubGluZS1mbGV4Ym94O2Rpc3BsYXk6aW5saW5lLWZsZXg7LXdlYmtpdC1ib3gtcGFjazpjZW50ZXI7LW1zLWZsZXgtcGFjazpjZW50ZXI7anVzdGlmeS1jb250ZW50OmNlbnRlcjstd2Via2l0LWJveC1hbGlnbjpjZW50ZXI7LW1zLWZsZXgtYWxpZ246Y2VudGVyO2FsaWduLWl0ZW1zOmNlbnRlcjstd2Via2l0LXVzZXItc2VsZWN0Om5vbmU7LW1vei11c2VyLXNlbGVjdDpub25lOy1tcy11c2VyLXNlbGVjdDpub25lO3VzZXItc2VsZWN0Om5vbmU7LW1zLWZsZXgtbmVnYXRpdmU6MDtmbGV4LXNocmluazowfUBtZWRpYSAobWF4LXdpZHRoOiA2NTBweCl7LmNlLXRvb2xiYXJfX3BsdXN7d2lkdGg6MzZweDtoZWlnaHQ6MzZweH19QG1lZGlhIChob3ZlcjogaG92ZXIpey5jZS10b29sYmFyX19wbHVzOmhvdmVye2JhY2tncm91bmQtY29sb3I6I2VmZjJmNX19LmNlLXRvb2xiYXJfX3BsdXMtLWFjdGl2ZXtiYWNrZ3JvdW5kLWNvbG9yOiNlZmYyZjU7LXdlYmtpdC1hbmltYXRpb246Ym91bmNlSW4gLjc1cyAxO2FuaW1hdGlvbjpib3VuY2VJbiAuNzVzIDE7LXdlYmtpdC1hbmltYXRpb24tZmlsbC1tb2RlOmZvcndhcmRzO2FuaW1hdGlvbi1maWxsLW1vZGU6Zm9yd2FyZHN9LmNlLXRvb2xiYXJfX3BsdXMtc2hvcnRjdXR7b3BhY2l0eTouNjt3b3JkLXNwYWNpbmc6LTJweDttYXJnaW4tdG9wOjVweH1AbWVkaWEgKG1heC13aWR0aDogNjUwcHgpey5jZS10b29sYmFyX19wbHVze3Bvc2l0aW9uOmFic29sdXRlO2JhY2tncm91bmQtY29sb3I6I2ZmZjtib3JkZXI6MXB4IHNvbGlkICNFOEU4RUI7LXdlYmtpdC1ib3gtc2hhZG93OjAgM3B4IDE1cHggLTNweCByZ2JhKDEzLDIwLDMzLC4xMyk7Ym94LXNoYWRvdzowIDNweCAxNXB4IC0zcHggIzBkMTQyMTIxO2JvcmRlci1yYWRpdXM6NnB4O3otaW5kZXg6Mjtwb3NpdGlvbjpzdGF0aWN9LmNlLXRvb2xiYXJfX3BsdXMtLWxlZnQtb3JpZW50ZWQ6YmVmb3Jle2xlZnQ6MTVweDttYXJnaW4tbGVmdDowfS5jZS10b29sYmFyX19wbHVzLS1yaWdodC1vcmllbnRlZDpiZWZvcmV7bGVmdDphdXRvO3JpZ2h0OjE1cHg7bWFyZ2luLWxlZnQ6MH19LmNlLXRvb2xiYXJfX2FjdGlvbnN7cG9zaXRpb246YWJzb2x1dGU7cmlnaHQ6MTAwJTtvcGFjaXR5OjA7ZGlzcGxheTotd2Via2l0LWJveDtkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6ZmxleDtwYWRkaW5nLXJpZ2h0OjVweH0uY2UtdG9vbGJhcl9fYWN0aW9ucy0tb3BlbmVke29wYWNpdHk6MX1AbWVkaWEgKG1heC13aWR0aDogNjUwcHgpey5jZS10b29sYmFyX19hY3Rpb25ze3JpZ2h0OmF1dG99fS5jZS10b29sYmFyX19zZXR0aW5ncy1idG57Y29sb3I6IzFkMjAyYjt3aWR0aDoyNnB4O2hlaWdodDoyNnB4O2JvcmRlci1yYWRpdXM6N3B4O2Rpc3BsYXk6LXdlYmtpdC1pbmxpbmUtYm94O2Rpc3BsYXk6LW1zLWlubGluZS1mbGV4Ym94O2Rpc3BsYXk6aW5saW5lLWZsZXg7LXdlYmtpdC1ib3gtcGFjazpjZW50ZXI7LW1zLWZsZXgtcGFjazpjZW50ZXI7anVzdGlmeS1jb250ZW50OmNlbnRlcjstd2Via2l0LWJveC1hbGlnbjpjZW50ZXI7LW1zLWZsZXgtYWxpZ246Y2VudGVyO2FsaWduLWl0ZW1zOmNlbnRlcjstd2Via2l0LXVzZXItc2VsZWN0Om5vbmU7LW1vei11c2VyLXNlbGVjdDpub25lOy1tcy11c2VyLXNlbGVjdDpub25lO21hcmdpbi1sZWZ0OjNweDtjdXJzb3I6cG9pbnRlcjt1c2VyLXNlbGVjdDpub25lfUBtZWRpYSAobWF4LXdpZHRoOiA2NTBweCl7LmNlLXRvb2xiYXJfX3NldHRpbmdzLWJ0bnt3aWR0aDozNnB4O2hlaWdodDozNnB4fX1AbWVkaWEgKGhvdmVyOiBob3Zlcil7LmNlLXRvb2xiYXJfX3NldHRpbmdzLWJ0bjpob3ZlcntiYWNrZ3JvdW5kLWNvbG9yOiNlZmYyZjV9fS5jZS10b29sYmFyX19zZXR0aW5ncy1idG4tLWFjdGl2ZXtiYWNrZ3JvdW5kLWNvbG9yOiNlZmYyZjU7LXdlYmtpdC1hbmltYXRpb246Ym91bmNlSW4gLjc1cyAxO2FuaW1hdGlvbjpib3VuY2VJbiAuNzVzIDE7LXdlYmtpdC1hbmltYXRpb24tZmlsbC1tb2RlOmZvcndhcmRzO2FuaW1hdGlvbi1maWxsLW1vZGU6Zm9yd2FyZHN9QG1lZGlhIChtaW4td2lkdGg6IDY1MXB4KXsuY2UtdG9vbGJhcl9fc2V0dGluZ3MtYnRue3dpZHRoOjI0cHh9fS5jZS10b29sYmFyX19zZXR0aW5ncy1idG4tLWhpZGRlbntkaXNwbGF5Om5vbmV9QG1lZGlhIChtYXgtd2lkdGg6IDY1MHB4KXsuY2UtdG9vbGJhcl9fc2V0dGluZ3MtYnRue3Bvc2l0aW9uOmFic29sdXRlO2JhY2tncm91bmQtY29sb3I6I2ZmZjtib3JkZXI6MXB4IHNvbGlkICNFOEU4RUI7LXdlYmtpdC1ib3gtc2hhZG93OjAgM3B4IDE1cHggLTNweCByZ2JhKDEzLDIwLDMzLC4xMyk7Ym94LXNoYWRvdzowIDNweCAxNXB4IC0zcHggIzBkMTQyMTIxO2JvcmRlci1yYWRpdXM6NnB4O3otaW5kZXg6Mjtwb3NpdGlvbjpzdGF0aWN9LmNlLXRvb2xiYXJfX3NldHRpbmdzLWJ0bi0tbGVmdC1vcmllbnRlZDpiZWZvcmV7bGVmdDoxNXB4O21hcmdpbi1sZWZ0OjB9LmNlLXRvb2xiYXJfX3NldHRpbmdzLWJ0bi0tcmlnaHQtb3JpZW50ZWQ6YmVmb3Jle2xlZnQ6YXV0bztyaWdodDoxNXB4O21hcmdpbi1sZWZ0OjB9fS5jZS10b29sYmFyX19wbHVzIHN2ZywuY2UtdG9vbGJhcl9fc2V0dGluZ3MtYnRuIHN2Z3t3aWR0aDoyNHB4O2hlaWdodDoyNHB4fUBtZWRpYSAobWluLXdpZHRoOiA2NTFweCl7LmNvZGV4LWVkaXRvci0tbmFycm93IC5jZS10b29sYmFyX19wbHVze2xlZnQ6NXB4fX1AbWVkaWEgKG1pbi13aWR0aDogNjUxcHgpey5jb2RleC1lZGl0b3ItLW5hcnJvdyAuY2UtdG9vbGJveCAuY2UtcG9wb3ZlcntyaWdodDowO2xlZnQ6YXV0bztsZWZ0OmluaXRpYWx9fS5jZS1pbmxpbmUtdG9vbGJhcnstLXktb2Zmc2V0OiA4cHg7cG9zaXRpb246YWJzb2x1dGU7YmFja2dyb3VuZC1jb2xvcjojZmZmO2JvcmRlcjoxcHggc29saWQgI0U4RThFQjstd2Via2l0LWJveC1zaGFkb3c6MCAzcHggMTVweCAtM3B4IHJnYmEoMTMsMjAsMzMsLjEzKTtib3gtc2hhZG93OjAgM3B4IDE1cHggLTNweCAjMGQxNDIxMjE7Ym9yZGVyLXJhZGl1czo2cHg7ei1pbmRleDoyO29wYWNpdHk6MDt2aXNpYmlsaXR5OmhpZGRlbjstd2Via2l0LXRyYW5zaXRpb246b3BhY2l0eSAuMjVzIGVhc2U7dHJhbnNpdGlvbjpvcGFjaXR5IC4yNXMgZWFzZTt3aWxsLWNoYW5nZTpvcGFjaXR5LGxlZnQsdG9wO3RvcDowO2xlZnQ6MDt6LWluZGV4OjN9LmNlLWlubGluZS10b29sYmFyLS1sZWZ0LW9yaWVudGVkOmJlZm9yZXtsZWZ0OjE1cHg7bWFyZ2luLWxlZnQ6MH0uY2UtaW5saW5lLXRvb2xiYXItLXJpZ2h0LW9yaWVudGVkOmJlZm9yZXtsZWZ0OmF1dG87cmlnaHQ6MTVweDttYXJnaW4tbGVmdDowfS5jZS1pbmxpbmUtdG9vbGJhci0tc2hvd2Vke29wYWNpdHk6MTt2aXNpYmlsaXR5OnZpc2libGV9LmNlLWlubGluZS10b29sYmFyIFtoaWRkZW5de2Rpc3BsYXk6bm9uZSFpbXBvcnRhbnR9LmNlLWlubGluZS10b29sYmFyX190b2dnbGVyLWFuZC1idXR0b24td3JhcHBlcntkaXNwbGF5Oi13ZWJraXQtYm94O2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTpmbGV4O3dpZHRoOjEwMCU7cGFkZGluZzowIDZweH0uY2UtaW5saW5lLXRvb2xiYXJfX2J1dHRvbnN7ZGlzcGxheTotd2Via2l0LWJveDtkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6ZmxleH0uY2UtaW5saW5lLXRvb2xiYXJfX2Ryb3Bkb3due2Rpc3BsYXk6LXdlYmtpdC1ib3g7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5OmZsZXg7cGFkZGluZzo2cHg7bWFyZ2luOjAgNnB4IDAgLTZweDstd2Via2l0LWJveC1hbGlnbjpjZW50ZXI7LW1zLWZsZXgtYWxpZ246Y2VudGVyO2FsaWduLWl0ZW1zOmNlbnRlcjtjdXJzb3I6cG9pbnRlcjtib3JkZXItcmlnaHQ6MXB4IHNvbGlkIHJnYmEoMjAxLDIwMSwyMDQsLjQ4KTstd2Via2l0LWJveC1zaXppbmc6Ym9yZGVyLWJveDtib3gtc2l6aW5nOmJvcmRlci1ib3h9QG1lZGlhIChob3ZlcjogaG92ZXIpey5jZS1pbmxpbmUtdG9vbGJhcl9fZHJvcGRvd246aG92ZXJ7YmFja2dyb3VuZDojZWZmMmY1fX0uY2UtaW5saW5lLXRvb2xiYXJfX2Ryb3Bkb3duLS1oaWRkZW57ZGlzcGxheTpub25lfS5jZS1pbmxpbmUtdG9vbGJhcl9fZHJvcGRvd24tY29udGVudCwuY2UtaW5saW5lLXRvb2xiYXJfX2Ryb3Bkb3duLWFycm93e2Rpc3BsYXk6LXdlYmtpdC1ib3g7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5OmZsZXh9LmNlLWlubGluZS10b29sYmFyX19kcm9wZG93bi1jb250ZW50IHN2ZywuY2UtaW5saW5lLXRvb2xiYXJfX2Ryb3Bkb3duLWFycm93IHN2Z3t3aWR0aDoyMHB4O2hlaWdodDoyMHB4fS5jZS1pbmxpbmUtdG9vbGJhcl9fc2hvcnRjdXR7b3BhY2l0eTouNjt3b3JkLXNwYWNpbmc6LTNweDttYXJnaW4tdG9wOjNweH0uY2UtaW5saW5lLXRvb2x7ZGlzcGxheTotd2Via2l0LWlubGluZS1ib3g7ZGlzcGxheTotbXMtaW5saW5lLWZsZXhib3g7ZGlzcGxheTppbmxpbmUtZmxleDstd2Via2l0LWJveC1hbGlnbjpjZW50ZXI7LW1zLWZsZXgtYWxpZ246Y2VudGVyO2FsaWduLWl0ZW1zOmNlbnRlcjstd2Via2l0LWJveC1wYWNrOmNlbnRlcjstbXMtZmxleC1wYWNrOmNlbnRlcjtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO3BhZGRpbmc6NnB4IDFweDtjdXJzb3I6cG9pbnRlcjtib3JkZXI6MDtvdXRsaW5lOm5vbmU7YmFja2dyb3VuZC1jb2xvcjp0cmFuc3BhcmVudDt2ZXJ0aWNhbC1hbGlnbjpib3R0b207Y29sb3I6aW5oZXJpdDttYXJnaW46MDtib3JkZXItcmFkaXVzOjA7bGluZS1oZWlnaHQ6bm9ybWFsfS5jZS1pbmxpbmUtdG9vbCBzdmd7d2lkdGg6MjBweDtoZWlnaHQ6MjBweH1AbWVkaWEgKG1heC13aWR0aDogNjUwcHgpey5jZS1pbmxpbmUtdG9vbCBzdmd7d2lkdGg6MjhweDtoZWlnaHQ6MjhweH19QG1lZGlhIChob3ZlcjogaG92ZXIpey5jZS1pbmxpbmUtdG9vbDpob3ZlcntiYWNrZ3JvdW5kLWNvbG9yOiNlZmYyZjV9fS5jZS1pbmxpbmUtdG9vbC0tYWN0aXZle2NvbG9yOiMzODhhZTV9LmNlLWlubGluZS10b29sLS1mb2N1c2Vke2JhY2tncm91bmQ6cmdiYSgzNCwxODYsMjU1LC4wOCkhaW1wb3J0YW50fS5jZS1pbmxpbmUtdG9vbC0tZm9jdXNlZHstd2Via2l0LWJveC1zaGFkb3c6aW5zZXQgMCAwIDBweCAxcHggcmdiYSg3LDE2MSwyMjcsLjA4KTtib3gtc2hhZG93Omluc2V0IDAgMCAwIDFweCAjMDdhMWUzMTR9LmNlLWlubGluZS10b29sLS1mb2N1c2VkLWFuaW1hdGVkey13ZWJraXQtYW5pbWF0aW9uLW5hbWU6YnV0dG9uQ2xpY2tlZDthbmltYXRpb24tbmFtZTpidXR0b25DbGlja2VkOy13ZWJraXQtYW5pbWF0aW9uLWR1cmF0aW9uOi4yNXM7YW5pbWF0aW9uLWR1cmF0aW9uOi4yNXN9LmNlLWlubGluZS10b29sLS1saW5rIC5pY29uLS11bmxpbmssLmNlLWlubGluZS10b29sLS11bmxpbmsgLmljb24tLWxpbmt7ZGlzcGxheTpub25lfS5jZS1pbmxpbmUtdG9vbC0tdW5saW5rIC5pY29uLS11bmxpbmt7ZGlzcGxheTppbmxpbmUtYmxvY2s7bWFyZ2luLWJvdHRvbTotMXB4fS5jZS1pbmxpbmUtdG9vbC1pbnB1dHtvdXRsaW5lOm5vbmU7Ym9yZGVyOjA7Ym9yZGVyLXJhZGl1czowIDAgNHB4IDRweDttYXJnaW46MDtmb250LXNpemU6MTNweDtwYWRkaW5nOjEwcHg7d2lkdGg6MTAwJTstd2Via2l0LWJveC1zaXppbmc6Ym9yZGVyLWJveDtib3gtc2l6aW5nOmJvcmRlci1ib3g7ZGlzcGxheTpub25lO2ZvbnQtd2VpZ2h0OjUwMDtib3JkZXItdG9wOjFweCBzb2xpZCByZ2JhKDIwMSwyMDEsMjA0LC40OCk7LXdlYmtpdC1hcHBlYXJhbmNlOm5vbmU7Zm9udC1mYW1pbHk6aW5oZXJpdH1AbWVkaWEgKG1heC13aWR0aDogNjUwcHgpey5jZS1pbmxpbmUtdG9vbC1pbnB1dHtmb250LXNpemU6MTVweDtmb250LXdlaWdodDo1MDB9fS5jZS1pbmxpbmUtdG9vbC1pbnB1dDo6LXdlYmtpdC1pbnB1dC1wbGFjZWhvbGRlcntjb2xvcjojNzA3Njg0fS5jZS1pbmxpbmUtdG9vbC1pbnB1dDo6LW1vei1wbGFjZWhvbGRlcntjb2xvcjojNzA3Njg0fS5jZS1pbmxpbmUtdG9vbC1pbnB1dDotbXMtaW5wdXQtcGxhY2Vob2xkZXJ7Y29sb3I6IzcwNzY4NH0uY2UtaW5saW5lLXRvb2wtaW5wdXQ6Oi1tcy1pbnB1dC1wbGFjZWhvbGRlcntjb2xvcjojNzA3Njg0fS5jZS1pbmxpbmUtdG9vbC1pbnB1dDo6cGxhY2Vob2xkZXJ7Y29sb3I6IzcwNzY4NH0uY2UtaW5saW5lLXRvb2wtaW5wdXQtLXNob3dlZHtkaXNwbGF5OmJsb2NrfS5jZS1jb252ZXJzaW9uLXRvb2xiYXJ7cG9zaXRpb246YWJzb2x1dGU7YmFja2dyb3VuZC1jb2xvcjojZmZmO2JvcmRlcjoxcHggc29saWQgI0U4RThFQjstd2Via2l0LWJveC1zaGFkb3c6MCAzcHggMTVweCAtM3B4IHJnYmEoMTMsMjAsMzMsLjEzKTtib3gtc2hhZG93OjAgM3B4IDE1cHggLTNweCAjMGQxNDIxMjE7Ym9yZGVyLXJhZGl1czo2cHg7ei1pbmRleDoyO29wYWNpdHk6MDt2aXNpYmlsaXR5OmhpZGRlbjt3aWxsLWNoYW5nZTp0cmFuc2Zvcm0sb3BhY2l0eTstd2Via2l0LXRyYW5zaXRpb246b3BhY2l0eSAuMXMgZWFzZSwtd2Via2l0LXRyYW5zZm9ybSAuMXMgZWFzZTt0cmFuc2l0aW9uOm9wYWNpdHkgLjFzIGVhc2UsLXdlYmtpdC10cmFuc2Zvcm0gLjFzIGVhc2U7dHJhbnNpdGlvbjp0cmFuc2Zvcm0gLjFzIGVhc2Usb3BhY2l0eSAuMXMgZWFzZTt0cmFuc2l0aW9uOnRyYW5zZm9ybSAuMXMgZWFzZSxvcGFjaXR5IC4xcyBlYXNlLC13ZWJraXQtdHJhbnNmb3JtIC4xcyBlYXNlOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoLThweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoLThweCk7bGVmdDotMXB4O3dpZHRoOjE5MHB4O21hcmdpbi10b3A6NXB4Oy13ZWJraXQtYm94LXNpemluZzpjb250ZW50LWJveDtib3gtc2l6aW5nOmNvbnRlbnQtYm94fS5jZS1jb252ZXJzaW9uLXRvb2xiYXItLWxlZnQtb3JpZW50ZWQ6YmVmb3Jle2xlZnQ6MTVweDttYXJnaW4tbGVmdDowfS5jZS1jb252ZXJzaW9uLXRvb2xiYXItLXJpZ2h0LW9yaWVudGVkOmJlZm9yZXtsZWZ0OmF1dG87cmlnaHQ6MTVweDttYXJnaW4tbGVmdDowfS5jZS1jb252ZXJzaW9uLXRvb2xiYXItLXNob3dlZHtvcGFjaXR5OjE7dmlzaWJpbGl0eTp2aXNpYmxlOy13ZWJraXQtdHJhbnNmb3JtOm5vbmU7dHJhbnNmb3JtOm5vbmV9LmNlLWNvbnZlcnNpb24tdG9vbGJhciBbaGlkZGVuXXtkaXNwbGF5Om5vbmUhaW1wb3J0YW50fS5jZS1jb252ZXJzaW9uLXRvb2xiYXJfX2J1dHRvbnN7ZGlzcGxheTotd2Via2l0LWJveDtkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6ZmxleH0uY2UtY29udmVyc2lvbi10b29sYmFyX19sYWJlbHtjb2xvcjojNzA3Njg0O2ZvbnQtc2l6ZToxMXB4O2ZvbnQtd2VpZ2h0OjUwMDtsZXR0ZXItc3BhY2luZzouMzNweDtwYWRkaW5nOjEwcHggMTBweCA1cHg7dGV4dC10cmFuc2Zvcm06dXBwZXJjYXNlfS5jZS1jb252ZXJzaW9uLXRvb2x7ZGlzcGxheTotd2Via2l0LWJveDtkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6ZmxleDtwYWRkaW5nOjVweCAxMHB4O2ZvbnQtc2l6ZToxNHB4O2xpbmUtaGVpZ2h0OjIwcHg7Zm9udC13ZWlnaHQ6NTAwO2N1cnNvcjpwb2ludGVyOy13ZWJraXQtYm94LWFsaWduOmNlbnRlcjstbXMtZmxleC1hbGlnbjpjZW50ZXI7YWxpZ24taXRlbXM6Y2VudGVyfS5jZS1jb252ZXJzaW9uLXRvb2wtLWhpZGRlbntkaXNwbGF5Om5vbmV9LmNlLWNvbnZlcnNpb24tdG9vbC0tZm9jdXNlZHtiYWNrZ3JvdW5kOnJnYmEoMzQsMTg2LDI1NSwuMDgpIWltcG9ydGFudH0uY2UtY29udmVyc2lvbi10b29sLS1mb2N1c2Vkey13ZWJraXQtYm94LXNoYWRvdzppbnNldCAwIDAgMHB4IDFweCByZ2JhKDcsMTYxLDIyNywuMDgpO2JveC1zaGFkb3c6aW5zZXQgMCAwIDAgMXB4ICMwN2ExZTMxNH0uY2UtY29udmVyc2lvbi10b29sLS1mb2N1c2VkLWFuaW1hdGVkey13ZWJraXQtYW5pbWF0aW9uLW5hbWU6YnV0dG9uQ2xpY2tlZDthbmltYXRpb24tbmFtZTpidXR0b25DbGlja2VkOy13ZWJraXQtYW5pbWF0aW9uLWR1cmF0aW9uOi4yNXM7YW5pbWF0aW9uLWR1cmF0aW9uOi4yNXN9LmNlLWNvbnZlcnNpb24tdG9vbDpob3ZlcntiYWNrZ3JvdW5kOiNlZmYyZjV9LmNlLWNvbnZlcnNpb24tdG9vbF9faWNvbntkaXNwbGF5Oi13ZWJraXQtaW5saW5lLWJveDtkaXNwbGF5Oi1tcy1pbmxpbmUtZmxleGJveDtkaXNwbGF5OmlubGluZS1mbGV4O3dpZHRoOjI2cHg7aGVpZ2h0OjI2cHg7LXdlYmtpdC1ib3gtc2hhZG93OjAgMCAwIDFweCByZ2JhKDIwMSwyMDEsMjA0LC40OCk7Ym94LXNoYWRvdzowIDAgMCAxcHggI2M5YzljYzdhO2JvcmRlci1yYWRpdXM6NXB4Oy13ZWJraXQtYm94LWFsaWduOmNlbnRlcjstbXMtZmxleC1hbGlnbjpjZW50ZXI7YWxpZ24taXRlbXM6Y2VudGVyOy13ZWJraXQtYm94LXBhY2s6Y2VudGVyOy1tcy1mbGV4LXBhY2s6Y2VudGVyO2p1c3RpZnktY29udGVudDpjZW50ZXI7YmFja2dyb3VuZDojZmZmOy13ZWJraXQtYm94LXNpemluZzpjb250ZW50LWJveDtib3gtc2l6aW5nOmNvbnRlbnQtYm94Oy1tcy1mbGV4LW5lZ2F0aXZlOjA7ZmxleC1zaHJpbms6MDttYXJnaW4tcmlnaHQ6MTBweH0uY2UtY29udmVyc2lvbi10b29sX19pY29uIHN2Z3t3aWR0aDoyMHB4O2hlaWdodDoyMHB4fUBtZWRpYSAobWF4LXdpZHRoOiA2NTBweCl7LmNlLWNvbnZlcnNpb24tdG9vbF9faWNvbnt3aWR0aDozNnB4O2hlaWdodDozNnB4O2JvcmRlci1yYWRpdXM6OHB4fS5jZS1jb252ZXJzaW9uLXRvb2xfX2ljb24gc3Zne3dpZHRoOjI4cHg7aGVpZ2h0OjI4cHh9fS5jZS1jb252ZXJzaW9uLXRvb2wtLWxhc3R7bWFyZ2luLXJpZ2h0OjAhaW1wb3J0YW50fS5jZS1jb252ZXJzaW9uLXRvb2wtLWFjdGl2ZXtjb2xvcjojMzg4YWU1IWltcG9ydGFudH0uY2UtY29udmVyc2lvbi10b29sLS1hY3RpdmV7LXdlYmtpdC1hbmltYXRpb246Ym91bmNlSW4gLjc1cyAxO2FuaW1hdGlvbjpib3VuY2VJbiAuNzVzIDE7LXdlYmtpdC1hbmltYXRpb24tZmlsbC1tb2RlOmZvcndhcmRzO2FuaW1hdGlvbi1maWxsLW1vZGU6Zm9yd2FyZHN9LmNlLWNvbnZlcnNpb24tdG9vbF9fc2Vjb25kYXJ5LWxhYmVse2NvbG9yOiM3MDc2ODQ7Zm9udC1zaXplOjEycHg7bWFyZ2luLWxlZnQ6YXV0bzt3aGl0ZS1zcGFjZTpub3dyYXA7bGV0dGVyLXNwYWNpbmc6LS4xZW07cGFkZGluZy1yaWdodDo1cHg7bWFyZ2luLWJvdHRvbTotMnB4O29wYWNpdHk6LjZ9QG1lZGlhIChtYXgtd2lkdGg6IDY1MHB4KXsuY2UtY29udmVyc2lvbi10b29sX19zZWNvbmRhcnktbGFiZWx7ZGlzcGxheTpub25lfX0uY2Utc2V0dGluZ3NfX2J1dHRvbntkaXNwbGF5Oi13ZWJraXQtaW5saW5lLWJveDtkaXNwbGF5Oi1tcy1pbmxpbmUtZmxleGJveDtkaXNwbGF5OmlubGluZS1mbGV4Oy13ZWJraXQtYm94LWFsaWduOmNlbnRlcjstbXMtZmxleC1hbGlnbjpjZW50ZXI7YWxpZ24taXRlbXM6Y2VudGVyOy13ZWJraXQtYm94LXBhY2s6Y2VudGVyOy1tcy1mbGV4LXBhY2s6Y2VudGVyO2p1c3RpZnktY29udGVudDpjZW50ZXI7cGFkZGluZzo2cHggMXB4O2JvcmRlci1yYWRpdXM6M3B4O2N1cnNvcjpwb2ludGVyO2JvcmRlcjowO291dGxpbmU6bm9uZTtiYWNrZ3JvdW5kLWNvbG9yOnRyYW5zcGFyZW50O3ZlcnRpY2FsLWFsaWduOmJvdHRvbTtjb2xvcjppbmhlcml0O21hcmdpbjowO2xpbmUtaGVpZ2h0OjMycHh9LmNlLXNldHRpbmdzX19idXR0b24gc3Zne3dpZHRoOjIwcHg7aGVpZ2h0OjIwcHh9QG1lZGlhIChtYXgtd2lkdGg6IDY1MHB4KXsuY2Utc2V0dGluZ3NfX2J1dHRvbiBzdmd7d2lkdGg6MjhweDtoZWlnaHQ6MjhweH19QG1lZGlhIChob3ZlcjogaG92ZXIpey5jZS1zZXR0aW5nc19fYnV0dG9uOmhvdmVye2JhY2tncm91bmQtY29sb3I6I2VmZjJmNX19LmNlLXNldHRpbmdzX19idXR0b24tLWFjdGl2ZXtjb2xvcjojMzg4YWU1fS5jZS1zZXR0aW5nc19fYnV0dG9uLS1mb2N1c2Vke2JhY2tncm91bmQ6cmdiYSgzNCwxODYsMjU1LC4wOCkhaW1wb3J0YW50fS5jZS1zZXR0aW5nc19fYnV0dG9uLS1mb2N1c2Vkey13ZWJraXQtYm94LXNoYWRvdzppbnNldCAwIDAgMHB4IDFweCByZ2JhKDcsMTYxLDIyNywuMDgpO2JveC1zaGFkb3c6aW5zZXQgMCAwIDAgMXB4ICMwN2ExZTMxNH0uY2Utc2V0dGluZ3NfX2J1dHRvbi0tZm9jdXNlZC1hbmltYXRlZHstd2Via2l0LWFuaW1hdGlvbi1uYW1lOmJ1dHRvbkNsaWNrZWQ7YW5pbWF0aW9uLW5hbWU6YnV0dG9uQ2xpY2tlZDstd2Via2l0LWFuaW1hdGlvbi1kdXJhdGlvbjouMjVzO2FuaW1hdGlvbi1kdXJhdGlvbjouMjVzfS5jZS1zZXR0aW5nc19fYnV0dG9uOm5vdCg6bnRoLWNoaWxkKDNuKzMpKXttYXJnaW4tcmlnaHQ6M3B4fS5jZS1zZXR0aW5nc19fYnV0dG9uOm50aC1jaGlsZChuKzQpe21hcmdpbi10b3A6M3B4fS5jZS1zZXR0aW5nc19fYnV0dG9uLS1kaXNhYmxlZHtjdXJzb3I6bm90LWFsbG93ZWQhaW1wb3J0YW50fS5jZS1zZXR0aW5nc19fYnV0dG9uLS1kaXNhYmxlZHtvcGFjaXR5Oi4zfS5jZS1zZXR0aW5nc19fYnV0dG9uLS1zZWxlY3RlZHtjb2xvcjojMzg4YWU1fUBtZWRpYSAobWluLXdpZHRoOiA2NTFweCl7LmNvZGV4LWVkaXRvci0tbmFycm93IC5jZS1zZXR0aW5ncyAuY2UtcG9wb3ZlcntyaWdodDowO2xlZnQ6YXV0bztsZWZ0OmluaXRpYWx9fUAtd2Via2l0LWtleWZyYW1lcyBmYWRlLWluezAle29wYWNpdHk6MH10b3tvcGFjaXR5OjF9fUBrZXlmcmFtZXMgZmFkZS1pbnswJXtvcGFjaXR5OjB9dG97b3BhY2l0eToxfX0uY2UtYmxvY2t7LXdlYmtpdC1hbmltYXRpb246ZmFkZS1pbiAuM3MgZWFzZTthbmltYXRpb246ZmFkZS1pbiAuM3MgZWFzZTstd2Via2l0LWFuaW1hdGlvbi1maWxsLW1vZGU6bm9uZTthbmltYXRpb24tZmlsbC1tb2RlOm5vbmU7LXdlYmtpdC1hbmltYXRpb24tZmlsbC1tb2RlOmluaXRpYWw7YW5pbWF0aW9uLWZpbGwtbW9kZTppbml0aWFsfS5jZS1ibG9jazpmaXJzdC1vZi10eXBle21hcmdpbi10b3A6MH0uY2UtYmxvY2stLXNlbGVjdGVkIC5jZS1ibG9ja19fY29udGVudHtiYWNrZ3JvdW5kOiNlMWYyZmZ9LmNlLWJsb2NrLS1zZWxlY3RlZCAuY2UtYmxvY2tfX2NvbnRlbnQgW2NvbnRlbnRlZGl0YWJsZV17LXdlYmtpdC11c2VyLXNlbGVjdDpub25lOy1tb3otdXNlci1zZWxlY3Q6bm9uZTstbXMtdXNlci1zZWxlY3Q6bm9uZTt1c2VyLXNlbGVjdDpub25lfS5jZS1ibG9jay0tc2VsZWN0ZWQgLmNlLWJsb2NrX19jb250ZW50IGltZywuY2UtYmxvY2stLXNlbGVjdGVkIC5jZS1ibG9ja19fY29udGVudCAuY2Utc3R1YntvcGFjaXR5Oi41NX0uY2UtYmxvY2stLXN0cmV0Y2hlZCAuY2UtYmxvY2tfX2NvbnRlbnR7bWF4LXdpZHRoOm5vbmV9LmNlLWJsb2NrX19jb250ZW50e3Bvc2l0aW9uOnJlbGF0aXZlO21heC13aWR0aDo2NTBweDttYXJnaW46MCBhdXRvOy13ZWJraXQtdHJhbnNpdGlvbjpiYWNrZ3JvdW5kLWNvbG9yIC4xNXMgZWFzZTt0cmFuc2l0aW9uOmJhY2tncm91bmQtY29sb3IgLjE1cyBlYXNlfS5jZS1ibG9jay0tZHJvcC10YXJnZXQgLmNlLWJsb2NrX19jb250ZW50OmJlZm9yZXtjb250ZW50OlwiXCI7cG9zaXRpb246YWJzb2x1dGU7dG9wOjEwMCU7bGVmdDotMjBweDttYXJnaW4tdG9wOi0xcHg7aGVpZ2h0OjhweDt3aWR0aDo4cHg7Ym9yZGVyOnNvbGlkICMzODhBRTU7Ym9yZGVyLXdpZHRoOjFweCAxcHggMCAwOy13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjpyaWdodDt0cmFuc2Zvcm0tb3JpZ2luOnJpZ2h0Oy13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZSg0NWRlZyk7dHJhbnNmb3JtOnJvdGF0ZSg0NWRlZyl9LmNlLWJsb2NrLS1kcm9wLXRhcmdldCAuY2UtYmxvY2tfX2NvbnRlbnQ6YWZ0ZXJ7Y29udGVudDpcIlwiO3Bvc2l0aW9uOmFic29sdXRlO3RvcDoxMDAlO2hlaWdodDoxcHg7d2lkdGg6MTAwJTtjb2xvcjojMzg4YWU1O2JhY2tncm91bmQ6cmVwZWF0aW5nLWxpbmVhci1ncmFkaWVudCg5MGRlZywjMzg4QUU1LCMzODhBRTUgMXB4LCNmZmYgMXB4LCNmZmYgNnB4KX0uY2UtYmxvY2sgYXtjdXJzb3I6cG9pbnRlcjstd2Via2l0LXRleHQtZGVjb3JhdGlvbjp1bmRlcmxpbmU7dGV4dC1kZWNvcmF0aW9uOnVuZGVybGluZX0uY2UtYmxvY2sgYntmb250LXdlaWdodDo3MDB9LmNlLWJsb2NrIGl7Zm9udC1zdHlsZTppdGFsaWN9QC13ZWJraXQta2V5ZnJhbWVzIGJvdW5jZUluezAlLDIwJSw0MCUsNjAlLDgwJSx0b3std2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246Y3ViaWMtYmV6aWVyKC4yMTUsLjYxLC4zNTUsMSk7YW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjpjdWJpYy1iZXppZXIoLjIxNSwuNjEsLjM1NSwxKX0wJXstd2Via2l0LXRyYW5zZm9ybTpzY2FsZTNkKC45LC45LC45KTt0cmFuc2Zvcm06c2NhbGUzZCguOSwuOSwuOSl9MjAley13ZWJraXQtdHJhbnNmb3JtOnNjYWxlM2QoMS4wMywxLjAzLDEuMDMpO3RyYW5zZm9ybTpzY2FsZTNkKDEuMDMsMS4wMywxLjAzKX02MCV7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUzZCgxLDEsMSk7dHJhbnNmb3JtOnNjYWxlWigxKX19QGtleWZyYW1lcyBib3VuY2VJbnswJSwyMCUsNDAlLDYwJSw4MCUsdG97LXdlYmtpdC1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmN1YmljLWJlemllciguMjE1LC42MSwuMzU1LDEpO2FuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246Y3ViaWMtYmV6aWVyKC4yMTUsLjYxLC4zNTUsMSl9MCV7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUzZCguOSwuOSwuOSk7dHJhbnNmb3JtOnNjYWxlM2QoLjksLjksLjkpfTIwJXstd2Via2l0LXRyYW5zZm9ybTpzY2FsZTNkKDEuMDMsMS4wMywxLjAzKTt0cmFuc2Zvcm06c2NhbGUzZCgxLjAzLDEuMDMsMS4wMyl9NjAley13ZWJraXQtdHJhbnNmb3JtOnNjYWxlM2QoMSwxLDEpO3RyYW5zZm9ybTpzY2FsZVooMSl9fUAtd2Via2l0LWtleWZyYW1lcyBzZWxlY3Rpb25Cb3VuY2V7MCUsMjAlLDQwJSw2MCUsODAlLHRvey13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjpjdWJpYy1iZXppZXIoLjIxNSwuNjEsLjM1NSwxKTthbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmN1YmljLWJlemllciguMjE1LC42MSwuMzU1LDEpfTUwJXstd2Via2l0LXRyYW5zZm9ybTpzY2FsZTNkKDEuMDEsMS4wMSwxLjAxKTt0cmFuc2Zvcm06c2NhbGUzZCgxLjAxLDEuMDEsMS4wMSl9NzAley13ZWJraXQtdHJhbnNmb3JtOnNjYWxlM2QoMSwxLDEpO3RyYW5zZm9ybTpzY2FsZVooMSl9fUBrZXlmcmFtZXMgc2VsZWN0aW9uQm91bmNlezAlLDIwJSw0MCUsNjAlLDgwJSx0b3std2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246Y3ViaWMtYmV6aWVyKC4yMTUsLjYxLC4zNTUsMSk7YW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjpjdWJpYy1iZXppZXIoLjIxNSwuNjEsLjM1NSwxKX01MCV7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUzZCgxLjAxLDEuMDEsMS4wMSk7dHJhbnNmb3JtOnNjYWxlM2QoMS4wMSwxLjAxLDEuMDEpfTcwJXstd2Via2l0LXRyYW5zZm9ybTpzY2FsZTNkKDEsMSwxKTt0cmFuc2Zvcm06c2NhbGVaKDEpfX1ALXdlYmtpdC1rZXlmcmFtZXMgYnV0dG9uQ2xpY2tlZHswJSwyMCUsNDAlLDYwJSw4MCUsdG97LXdlYmtpdC1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmN1YmljLWJlemllciguMjE1LC42MSwuMzU1LDEpO2FuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246Y3ViaWMtYmV6aWVyKC4yMTUsLjYxLC4zNTUsMSl9MCV7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUzZCguOTUsLjk1LC45NSk7dHJhbnNmb3JtOnNjYWxlM2QoLjk1LC45NSwuOTUpfTYwJXstd2Via2l0LXRyYW5zZm9ybTpzY2FsZTNkKDEuMDIsMS4wMiwxLjAyKTt0cmFuc2Zvcm06c2NhbGUzZCgxLjAyLDEuMDIsMS4wMil9ODAley13ZWJraXQtdHJhbnNmb3JtOnNjYWxlM2QoMSwxLDEpO3RyYW5zZm9ybTpzY2FsZVooMSl9fUBrZXlmcmFtZXMgYnV0dG9uQ2xpY2tlZHswJSwyMCUsNDAlLDYwJSw4MCUsdG97LXdlYmtpdC1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmN1YmljLWJlemllciguMjE1LC42MSwuMzU1LDEpO2FuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246Y3ViaWMtYmV6aWVyKC4yMTUsLjYxLC4zNTUsMSl9MCV7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUzZCguOTUsLjk1LC45NSk7dHJhbnNmb3JtOnNjYWxlM2QoLjk1LC45NSwuOTUpfTYwJXstd2Via2l0LXRyYW5zZm9ybTpzY2FsZTNkKDEuMDIsMS4wMiwxLjAyKTt0cmFuc2Zvcm06c2NhbGUzZCgxLjAyLDEuMDIsMS4wMil9ODAley13ZWJraXQtdHJhbnNmb3JtOnNjYWxlM2QoMSwxLDEpO3RyYW5zZm9ybTpzY2FsZVooMSl9fS5jZHgtYmxvY2t7cGFkZGluZzouNGVtIDB9LmNkeC1ibG9jazo6LXdlYmtpdC1pbnB1dC1wbGFjZWhvbGRlcntsaW5lLWhlaWdodDpub3JtYWwhaW1wb3J0YW50fS5jZHgtaW5wdXR7Ym9yZGVyOjFweCBzb2xpZCByZ2JhKDIwMSwyMDEsMjA0LC40OCk7LXdlYmtpdC1ib3gtc2hhZG93Omluc2V0IDAgMXB4IDJweCAwIHJnYmEoMzUsNDQsNzIsLjA2KTtib3gtc2hhZG93Omluc2V0IDAgMXB4IDJweCAjMjMyYzQ4MGY7Ym9yZGVyLXJhZGl1czozcHg7cGFkZGluZzoxMHB4IDEycHg7b3V0bGluZTpub25lO3dpZHRoOjEwMCU7LXdlYmtpdC1ib3gtc2l6aW5nOmJvcmRlci1ib3g7Ym94LXNpemluZzpib3JkZXItYm94fS5jZHgtaW5wdXRbZGF0YS1wbGFjZWhvbGRlcl06YmVmb3Jle3Bvc2l0aW9uOnN0YXRpYyFpbXBvcnRhbnR9LmNkeC1pbnB1dFtkYXRhLXBsYWNlaG9sZGVyXTpiZWZvcmV7ZGlzcGxheTppbmxpbmUtYmxvY2s7d2lkdGg6MDt3aGl0ZS1zcGFjZTpub3dyYXA7cG9pbnRlci1ldmVudHM6bm9uZX0uY2R4LXNldHRpbmdzLWJ1dHRvbntkaXNwbGF5Oi13ZWJraXQtaW5saW5lLWJveDtkaXNwbGF5Oi1tcy1pbmxpbmUtZmxleGJveDtkaXNwbGF5OmlubGluZS1mbGV4Oy13ZWJraXQtYm94LWFsaWduOmNlbnRlcjstbXMtZmxleC1hbGlnbjpjZW50ZXI7YWxpZ24taXRlbXM6Y2VudGVyOy13ZWJraXQtYm94LXBhY2s6Y2VudGVyOy1tcy1mbGV4LXBhY2s6Y2VudGVyO2p1c3RpZnktY29udGVudDpjZW50ZXI7cGFkZGluZzo2cHggMXB4O2JvcmRlci1yYWRpdXM6M3B4O2N1cnNvcjpwb2ludGVyO2JvcmRlcjowO291dGxpbmU6bm9uZTtiYWNrZ3JvdW5kLWNvbG9yOnRyYW5zcGFyZW50O3ZlcnRpY2FsLWFsaWduOmJvdHRvbTtjb2xvcjppbmhlcml0O21hcmdpbjowO21pbi13aWR0aDoyNnB4O21pbi1oZWlnaHQ6MjZweH0uY2R4LXNldHRpbmdzLWJ1dHRvbiBzdmd7d2lkdGg6MjBweDtoZWlnaHQ6MjBweH1AbWVkaWEgKG1heC13aWR0aDogNjUwcHgpey5jZHgtc2V0dGluZ3MtYnV0dG9uIHN2Z3t3aWR0aDoyOHB4O2hlaWdodDoyOHB4fX1AbWVkaWEgKGhvdmVyOiBob3Zlcil7LmNkeC1zZXR0aW5ncy1idXR0b246aG92ZXJ7YmFja2dyb3VuZC1jb2xvcjojZWZmMmY1fX0uY2R4LXNldHRpbmdzLWJ1dHRvbi0tZm9jdXNlZHtiYWNrZ3JvdW5kOnJnYmEoMzQsMTg2LDI1NSwuMDgpIWltcG9ydGFudH0uY2R4LXNldHRpbmdzLWJ1dHRvbi0tZm9jdXNlZHstd2Via2l0LWJveC1zaGFkb3c6aW5zZXQgMCAwIDBweCAxcHggcmdiYSg3LDE2MSwyMjcsLjA4KTtib3gtc2hhZG93Omluc2V0IDAgMCAwIDFweCAjMDdhMWUzMTR9LmNkeC1zZXR0aW5ncy1idXR0b24tLWZvY3VzZWQtYW5pbWF0ZWR7LXdlYmtpdC1hbmltYXRpb24tbmFtZTpidXR0b25DbGlja2VkO2FuaW1hdGlvbi1uYW1lOmJ1dHRvbkNsaWNrZWQ7LXdlYmtpdC1hbmltYXRpb24tZHVyYXRpb246LjI1czthbmltYXRpb24tZHVyYXRpb246LjI1c30uY2R4LXNldHRpbmdzLWJ1dHRvbi0tYWN0aXZle2NvbG9yOiMzODhhZTV9LmNkeC1zZXR0aW5ncy1idXR0b24gc3Zne3dpZHRoOmF1dG87aGVpZ2h0OmF1dG99QG1lZGlhIChtYXgtd2lkdGg6IDY1MHB4KXsuY2R4LXNldHRpbmdzLWJ1dHRvbnt3aWR0aDozNnB4O2hlaWdodDozNnB4O2JvcmRlci1yYWRpdXM6OHB4fX0uY2R4LWxvYWRlcntwb3NpdGlvbjpyZWxhdGl2ZTtib3JkZXI6MXB4IHNvbGlkIHJnYmEoMjAxLDIwMSwyMDQsLjQ4KX0uY2R4LWxvYWRlcjpiZWZvcmV7Y29udGVudDpcIlwiO3Bvc2l0aW9uOmFic29sdXRlO2xlZnQ6NTAlO3RvcDo1MCU7d2lkdGg6MThweDtoZWlnaHQ6MThweDttYXJnaW46LTExcHggMCAwIC0xMXB4O2JvcmRlcjoycHggc29saWQgcmdiYSgyMDEsMjAxLDIwNCwuNDgpO2JvcmRlci1sZWZ0LWNvbG9yOiMzODhhZTU7Ym9yZGVyLXJhZGl1czo1MCU7LXdlYmtpdC1hbmltYXRpb246Y2R4Um90YXRpb24gMS4ycyBpbmZpbml0ZSBsaW5lYXI7YW5pbWF0aW9uOmNkeFJvdGF0aW9uIDEuMnMgaW5maW5pdGUgbGluZWFyfUAtd2Via2l0LWtleWZyYW1lcyBjZHhSb3RhdGlvbnswJXstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoMGRlZyk7dHJhbnNmb3JtOnJvdGF0ZSgwKX10b3std2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoMzYwZGVnKTt0cmFuc2Zvcm06cm90YXRlKDM2MGRlZyl9fUBrZXlmcmFtZXMgY2R4Um90YXRpb257MCV7LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKDBkZWcpO3RyYW5zZm9ybTpyb3RhdGUoMCl9dG97LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKDM2MGRlZyk7dHJhbnNmb3JtOnJvdGF0ZSgzNjBkZWcpfX0uY2R4LWJ1dHRvbntwYWRkaW5nOjEzcHg7Ym9yZGVyLXJhZGl1czozcHg7Ym9yZGVyOjFweCBzb2xpZCByZ2JhKDIwMSwyMDEsMjA0LC40OCk7Zm9udC1zaXplOjE0LjlweDtiYWNrZ3JvdW5kOiNmZmY7LXdlYmtpdC1ib3gtc2hhZG93OjAgMnB4IDJweCAwIHJnYmEoMTgsMzAsNTcsLjA0KTtib3gtc2hhZG93OjAgMnB4IDJweCAjMTIxZTM5MGE7Y29sb3I6IzcwNzY4NDt0ZXh0LWFsaWduOmNlbnRlcjtjdXJzb3I6cG9pbnRlcn1AbWVkaWEgKGhvdmVyOiBob3Zlcil7LmNkeC1idXR0b246aG92ZXJ7YmFja2dyb3VuZDojRkJGQ0ZFOy13ZWJraXQtYm94LXNoYWRvdzowIDFweCAzcHggMCByZ2JhKDE4LDMwLDU3LC4wOCk7Ym94LXNoYWRvdzowIDFweCAzcHggIzEyMWUzOTE0fX0uY2R4LWJ1dHRvbiBzdmd7aGVpZ2h0OjIwcHg7bWFyZ2luLXJpZ2h0Oi4yZW07bWFyZ2luLXRvcDotMnB4fS5jZS1zdHVie2Rpc3BsYXk6LXdlYmtpdC1ib3g7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5OmZsZXg7LXdlYmtpdC1ib3gtYWxpZ246Y2VudGVyOy1tcy1mbGV4LWFsaWduOmNlbnRlcjthbGlnbi1pdGVtczpjZW50ZXI7cGFkZGluZzoxMnB4IDE4cHg7bWFyZ2luOjEwcHggMDtib3JkZXItcmFkaXVzOjEwcHg7YmFja2dyb3VuZDojZWZmMmY1O2JvcmRlcjoxcHggc29saWQgI0VGRjBGMTtjb2xvcjojNzA3Njg0O2ZvbnQtc2l6ZToxNHB4fS5jZS1zdHViIHN2Z3t3aWR0aDoyMHB4O2hlaWdodDoyMHB4fS5jZS1zdHViX19pbmZve21hcmdpbi1sZWZ0OjE0cHh9LmNlLXN0dWJfX3RpdGxle2ZvbnQtd2VpZ2h0OjUwMDt0ZXh0LXRyYW5zZm9ybTpjYXBpdGFsaXplfS5jb2RleC1lZGl0b3IuY29kZXgtZWRpdG9yLS1ydGx7ZGlyZWN0aW9uOnJ0bH0uY29kZXgtZWRpdG9yLmNvZGV4LWVkaXRvci0tcnRsIC5jZHgtbGlzdHtwYWRkaW5nLWxlZnQ6MDtwYWRkaW5nLXJpZ2h0OjQwcHh9LmNvZGV4LWVkaXRvci5jb2RleC1lZGl0b3ItLXJ0bCAuY2UtdG9vbGJhcl9fcGx1c3tyaWdodDotMjZweDtsZWZ0OmF1dG99LmNvZGV4LWVkaXRvci5jb2RleC1lZGl0b3ItLXJ0bCAuY2UtdG9vbGJhcl9fYWN0aW9uc3tyaWdodDphdXRvO2xlZnQ6LTI2cHh9QG1lZGlhIChtYXgtd2lkdGg6IDY1MHB4KXsuY29kZXgtZWRpdG9yLmNvZGV4LWVkaXRvci0tcnRsIC5jZS10b29sYmFyX19hY3Rpb25ze21hcmdpbi1sZWZ0OjA7bWFyZ2luLXJpZ2h0OmF1dG87cGFkZGluZy1yaWdodDowO3BhZGRpbmctbGVmdDoxMHB4fX0uY29kZXgtZWRpdG9yLmNvZGV4LWVkaXRvci0tcnRsIC5jZS1zZXR0aW5nc3tsZWZ0OjVweDtyaWdodDphdXRvfS5jb2RleC1lZGl0b3IuY29kZXgtZWRpdG9yLS1ydGwgLmNlLXNldHRpbmdzOmJlZm9yZXtyaWdodDphdXRvO2xlZnQ6MjVweH0uY29kZXgtZWRpdG9yLmNvZGV4LWVkaXRvci0tcnRsIC5jZS1zZXR0aW5nc19fYnV0dG9uOm5vdCg6bnRoLWNoaWxkKDNuKzMpKXttYXJnaW4tbGVmdDozcHg7bWFyZ2luLXJpZ2h0OjB9LmNvZGV4LWVkaXRvci5jb2RleC1lZGl0b3ItLXJ0bCAuY2UtY29udmVyc2lvbi10b29sX19pY29ue21hcmdpbi1yaWdodDowO21hcmdpbi1sZWZ0OjEwcHh9LmNvZGV4LWVkaXRvci5jb2RleC1lZGl0b3ItLXJ0bCAuY2UtaW5saW5lLXRvb2xiYXJfX2Ryb3Bkb3due2JvcmRlci1yaWdodDowcHggc29saWQgdHJhbnNwYXJlbnQ7Ym9yZGVyLWxlZnQ6MXB4IHNvbGlkIHJnYmEoMjAxLDIwMSwyMDQsLjQ4KTttYXJnaW46MCAtNnB4IDAgNnB4fS5jb2RleC1lZGl0b3IuY29kZXgtZWRpdG9yLS1ydGwgLmNlLWlubGluZS10b29sYmFyX19kcm9wZG93biAuaWNvbi0tdG9nZ2xlci1kb3due21hcmdpbi1sZWZ0OjA7bWFyZ2luLXJpZ2h0OjRweH1AbWVkaWEgKG1pbi13aWR0aDogNjUxcHgpey5jb2RleC1lZGl0b3ItLW5hcnJvdy5jb2RleC1lZGl0b3ItLXJ0bCAuY2UtdG9vbGJhcl9fcGx1c3tsZWZ0OjBweDtyaWdodDo1cHh9fUBtZWRpYSAobWluLXdpZHRoOiA2NTFweCl7LmNvZGV4LWVkaXRvci0tbmFycm93LmNvZGV4LWVkaXRvci0tcnRsIC5jZS10b29sYmFyX19hY3Rpb25ze2xlZnQ6LTVweH19LmNkeC1zZWFyY2gtZmllbGR7LS1pY29uLW1hcmdpbi1yaWdodDogMTBweDtiYWNrZ3JvdW5kOnJnYmEoMjMyLDIzMiwyMzUsLjQ5KTtib3JkZXI6MXB4IHNvbGlkIHJnYmEoMjI2LDIyNiwyMjksLjIpO2JvcmRlci1yYWRpdXM6NnB4O3BhZGRpbmc6MnB4O2Rpc3BsYXk6Z3JpZDtncmlkLXRlbXBsYXRlLWNvbHVtbnM6YXV0byBhdXRvIDFmcjtncmlkLXRlbXBsYXRlLXJvd3M6YXV0b30uY2R4LXNlYXJjaC1maWVsZF9faWNvbnt3aWR0aDoyNnB4O2hlaWdodDoyNnB4O2Rpc3BsYXk6LXdlYmtpdC1ib3g7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5OmZsZXg7LXdlYmtpdC1ib3gtYWxpZ246Y2VudGVyOy1tcy1mbGV4LWFsaWduOmNlbnRlcjthbGlnbi1pdGVtczpjZW50ZXI7LXdlYmtpdC1ib3gtcGFjazpjZW50ZXI7LW1zLWZsZXgtcGFjazpjZW50ZXI7anVzdGlmeS1jb250ZW50OmNlbnRlcjttYXJnaW4tcmlnaHQ6dmFyKC0taWNvbi1tYXJnaW4tcmlnaHQpfS5jZHgtc2VhcmNoLWZpZWxkX19pY29uIHN2Z3t3aWR0aDoyMHB4O2hlaWdodDoyMHB4O2NvbG9yOiM3MDc2ODR9LmNkeC1zZWFyY2gtZmllbGRfX2lucHV0e2ZvbnQtc2l6ZToxNHB4O291dGxpbmU6bm9uZTtmb250LXdlaWdodDo1MDA7Zm9udC1mYW1pbHk6aW5oZXJpdDtib3JkZXI6MDtiYWNrZ3JvdW5kOnRyYW5zcGFyZW50O21hcmdpbjowO3BhZGRpbmc6MDtsaW5lLWhlaWdodDoyMnB4O21pbi13aWR0aDpjYWxjKDEwMCUgLSAyNnB4IC0gdmFyKC0taWNvbi1tYXJnaW4tcmlnaHQpKX0uY2R4LXNlYXJjaC1maWVsZF9faW5wdXQ6Oi13ZWJraXQtaW5wdXQtcGxhY2Vob2xkZXJ7Y29sb3I6IzcwNzY4NDtmb250LXdlaWdodDo1MDB9LmNkeC1zZWFyY2gtZmllbGRfX2lucHV0OjotbW96LXBsYWNlaG9sZGVye2NvbG9yOiM3MDc2ODQ7Zm9udC13ZWlnaHQ6NTAwfS5jZHgtc2VhcmNoLWZpZWxkX19pbnB1dDotbXMtaW5wdXQtcGxhY2Vob2xkZXJ7Y29sb3I6IzcwNzY4NDtmb250LXdlaWdodDo1MDB9LmNkeC1zZWFyY2gtZmllbGRfX2lucHV0OjotbXMtaW5wdXQtcGxhY2Vob2xkZXJ7Y29sb3I6IzcwNzY4NDtmb250LXdlaWdodDo1MDB9LmNkeC1zZWFyY2gtZmllbGRfX2lucHV0OjpwbGFjZWhvbGRlcntjb2xvcjojNzA3Njg0O2ZvbnQtd2VpZ2h0OjUwMH0uY2UtcG9wb3ZlcnstLWJvcmRlci1yYWRpdXM6IDZweDstLXdpZHRoOiAyMDBweDstLW1heC1oZWlnaHQ6IDI3MHB4Oy0tcGFkZGluZzogNnB4Oy0tb2Zmc2V0LWZyb20tdGFyZ2V0OiA4cHg7LS1jb2xvci1ib3JkZXI6ICNlOGU4ZWI7LS1jb2xvci1zaGFkb3c6IHJnYmEoMTMsMjAsMzMsLjEzKTstLWNvbG9yLWJhY2tncm91bmQ6IHdoaXRlOy0tY29sb3ItdGV4dC1wcmltYXJ5OiBibGFjazstLWNvbG9yLXRleHQtc2Vjb25kYXJ5OiAjNzA3Njg0Oy0tY29sb3ItYm9yZGVyLWljb246IHJnYmEoMjAxLCAyMDEsIDIwNCwgLjQ4KTstLWNvbG9yLWJvcmRlci1pY29uLWRpc2FibGVkOiAjRUZGMEYxOy0tY29sb3ItdGV4dC1pY29uLWFjdGl2ZTogIzM4OEFFNTstLWNvbG9yLWJhY2tncm91bmQtaWNvbi1hY3RpdmU6IHJnYmEoNTYsIDEzOCwgMjI5LCAuMSk7LS1jb2xvci1iYWNrZ3JvdW5kLWl0ZW0tZm9jdXM6IHJnYmEoMzQsIDE4NiwgMjU1LCAuMDgpOy0tY29sb3Itc2hhZG93LWl0ZW0tZm9jdXM6IHJnYmEoNywgMTYxLCAyMjcsIC4wOCk7LS1jb2xvci1iYWNrZ3JvdW5kLWl0ZW0taG92ZXI6ICNlZmYyZjU7LS1jb2xvci1iYWNrZ3JvdW5kLWl0ZW0tY29uZmlybTogI0UyNEE0QTstLWNvbG9yLWJhY2tncm91bmQtaXRlbS1jb25maXJtLWhvdmVyOiAjQ0U0MzQzO21pbi13aWR0aDp2YXIoLS13aWR0aCk7d2lkdGg6dmFyKC0td2lkdGgpO21heC1oZWlnaHQ6dmFyKC0tbWF4LWhlaWdodCk7Ym9yZGVyLXJhZGl1czp2YXIoLS1ib3JkZXItcmFkaXVzKTtvdmVyZmxvdzpoaWRkZW47LXdlYmtpdC1ib3gtc2l6aW5nOmJvcmRlci1ib3g7Ym94LXNpemluZzpib3JkZXItYm94Oy13ZWJraXQtYm94LXNoYWRvdzowIDNweCAxNXB4IC0zcHggdmFyKC0tY29sb3Itc2hhZG93KTtib3gtc2hhZG93OjAgM3B4IDE1cHggLTNweCB2YXIoLS1jb2xvci1zaGFkb3cpO3Bvc2l0aW9uOmFic29sdXRlO2xlZnQ6MDt0b3A6Y2FsYygxMDAlICsgdmFyKC0tb2Zmc2V0LWZyb20tdGFyZ2V0KSk7YmFja2dyb3VuZDp2YXIoLS1jb2xvci1iYWNrZ3JvdW5kKTtkaXNwbGF5Oi13ZWJraXQtYm94O2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTpmbGV4Oy13ZWJraXQtYm94LW9yaWVudDp2ZXJ0aWNhbDstd2Via2l0LWJveC1kaXJlY3Rpb246bm9ybWFsOy1tcy1mbGV4LWRpcmVjdGlvbjpjb2x1bW47ZmxleC1kaXJlY3Rpb246Y29sdW1uO3otaW5kZXg6NDtvcGFjaXR5OjA7bWF4LWhlaWdodDowO3BvaW50ZXItZXZlbnRzOm5vbmU7cGFkZGluZzowO2JvcmRlcjpub25lfS5jZS1wb3BvdmVyLS1vcGVuZWR7b3BhY2l0eToxO3BhZGRpbmc6dmFyKC0tcGFkZGluZyk7bWF4LWhlaWdodDp2YXIoLS1tYXgtaGVpZ2h0KTtwb2ludGVyLWV2ZW50czphdXRvOy13ZWJraXQtYW5pbWF0aW9uOnBhbmVsU2hvd2luZyAuMXMgZWFzZTthbmltYXRpb246cGFuZWxTaG93aW5nIC4xcyBlYXNlO2JvcmRlcjoxcHggc29saWQgdmFyKC0tY29sb3ItYm9yZGVyKX1AbWVkaWEgKG1heC13aWR0aDogNjUwcHgpey5jZS1wb3BvdmVyLS1vcGVuZWR7LXdlYmtpdC1hbmltYXRpb246cGFuZWxTaG93aW5nTW9iaWxlIC4yNXMgZWFzZTthbmltYXRpb246cGFuZWxTaG93aW5nTW9iaWxlIC4yNXMgZWFzZX19LmNlLXBvcG92ZXJfX2l0ZW1ze292ZXJmbG93LXk6YXV0bzstbXMtc2Nyb2xsLWNoYWluaW5nOm5vbmU7b3ZlcnNjcm9sbC1iZWhhdmlvcjpjb250YWlufUBtZWRpYSAobWF4LXdpZHRoOiA2NTBweCl7LmNlLXBvcG92ZXJfX292ZXJsYXl7cG9zaXRpb246Zml4ZWQ7dG9wOjA7Ym90dG9tOjA7bGVmdDowO3JpZ2h0OjA7YmFja2dyb3VuZDojMUQyMDJCO3otaW5kZXg6MztvcGFjaXR5Oi41Oy13ZWJraXQtdHJhbnNpdGlvbjpvcGFjaXR5IC4xMnMgZWFzZS1pbjt0cmFuc2l0aW9uOm9wYWNpdHkgLjEycyBlYXNlLWluO3dpbGwtY2hhbmdlOm9wYWNpdHk7dmlzaWJpbGl0eTp2aXNpYmxlfX0uY2UtcG9wb3Zlcl9fb3ZlcmxheS0taGlkZGVue2Rpc3BsYXk6bm9uZX0uY2UtcG9wb3Zlci0tb3Blbi10b3B7dG9wOmNhbGMoLTEgKiAodmFyKC0tb2Zmc2V0LWZyb20tdGFyZ2V0KSArIHZhcigtLXBvcG92ZXItaGVpZ2h0KSkpfUBtZWRpYSAobWF4LXdpZHRoOiA2NTBweCl7LmNlLXBvcG92ZXJ7LS1vZmZzZXQ6IDVweDtwb3NpdGlvbjpmaXhlZDttYXgtd2lkdGg6bm9uZTttaW4td2lkdGg6Y2FsYygxMDAlIC0gdmFyKC0tb2Zmc2V0KSAqIDIpO2xlZnQ6dmFyKC0tb2Zmc2V0KTtyaWdodDp2YXIoLS1vZmZzZXQpO2JvdHRvbTpjYWxjKHZhcigtLW9mZnNldCkgKyBlbnYoc2FmZS1hcmVhLWluc2V0LWJvdHRvbSkpO3RvcDphdXRvO2JvcmRlci1yYWRpdXM6MTBweH0uY2UtcG9wb3ZlciAuY2UtcG9wb3Zlcl9fc2VhcmNoe2Rpc3BsYXk6bm9uZX19LmNlLXBvcG92ZXJfX3NlYXJjaCwuY2UtcG9wb3Zlcl9fY3VzdG9tLWNvbnRlbnQ6bm90KDplbXB0eSl7bWFyZ2luLWJvdHRvbTo1cHh9LmNlLXBvcG92ZXJfX25vdGhpbmctZm91bmQtbWVzc2FnZXtjb2xvcjojNzA3Njg0O2Rpc3BsYXk6bm9uZTtjdXJzb3I6ZGVmYXVsdDtwYWRkaW5nOjNweDtmb250LXNpemU6MTRweDtsaW5lLWhlaWdodDoyMHB4O2ZvbnQtd2VpZ2h0OjUwMDt3aGl0ZS1zcGFjZTpub3dyYXA7b3ZlcmZsb3c6aGlkZGVuO3RleHQtb3ZlcmZsb3c6ZWxsaXBzaXN9LmNlLXBvcG92ZXJfX25vdGhpbmctZm91bmQtbWVzc2FnZS0tZGlzcGxheWVke2Rpc3BsYXk6YmxvY2t9LmNlLXBvcG92ZXJfX2N1c3RvbS1jb250ZW50Om5vdCg6ZW1wdHkpe3BhZGRpbmc6NHB4fUBtZWRpYSAobWluLXdpZHRoOiA2NTFweCl7LmNlLXBvcG92ZXJfX2N1c3RvbS1jb250ZW50Om5vdCg6ZW1wdHkpe3BhZGRpbmc6MH19LmNlLXBvcG92ZXJfX2N1c3RvbS1jb250ZW50LS1oaWRkZW57ZGlzcGxheTpub25lfS5jZS1wb3BvdmVyLWl0ZW17LS1ib3JkZXItcmFkaXVzOiA2cHg7LS1pY29uLXNpemU6IDIwcHg7LS1pY29uLXNpemUtbW9iaWxlOiAyOHB4O2JvcmRlci1yYWRpdXM6dmFyKC0tYm9yZGVyLXJhZGl1cyk7ZGlzcGxheTotd2Via2l0LWJveDtkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6ZmxleDstd2Via2l0LWJveC1hbGlnbjpjZW50ZXI7LW1zLWZsZXgtYWxpZ246Y2VudGVyO2FsaWduLWl0ZW1zOmNlbnRlcjtwYWRkaW5nOjNweDtjb2xvcjp2YXIoLS1jb2xvci10ZXh0LXByaW1hcnkpOy13ZWJraXQtdXNlci1zZWxlY3Q6bm9uZTstbW96LXVzZXItc2VsZWN0Om5vbmU7LW1zLXVzZXItc2VsZWN0Om5vbmU7dXNlci1zZWxlY3Q6bm9uZX1AbWVkaWEgKG1heC13aWR0aDogNjUwcHgpey5jZS1wb3BvdmVyLWl0ZW17cGFkZGluZzo0cHh9fS5jZS1wb3BvdmVyLWl0ZW06bm90KDpsYXN0LW9mLXR5cGUpe21hcmdpbi1ib3R0b206MXB4fS5jZS1wb3BvdmVyLWl0ZW1fX2ljb257Ym9yZGVyLXJhZGl1czo1cHg7d2lkdGg6MjZweDtoZWlnaHQ6MjZweDstd2Via2l0LWJveC1zaGFkb3c6MCAwIDAgMXB4IHZhcigtLWNvbG9yLWJvcmRlci1pY29uKTtib3gtc2hhZG93OjAgMCAwIDFweCB2YXIoLS1jb2xvci1ib3JkZXItaWNvbik7YmFja2dyb3VuZDojZmZmO2Rpc3BsYXk6LXdlYmtpdC1ib3g7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5OmZsZXg7LXdlYmtpdC1ib3gtYWxpZ246Y2VudGVyOy1tcy1mbGV4LWFsaWduOmNlbnRlcjthbGlnbi1pdGVtczpjZW50ZXI7LXdlYmtpdC1ib3gtcGFjazpjZW50ZXI7LW1zLWZsZXgtcGFjazpjZW50ZXI7anVzdGlmeS1jb250ZW50OmNlbnRlcjttYXJnaW4tcmlnaHQ6MTBweH0uY2UtcG9wb3Zlci1pdGVtX19pY29uIHN2Z3t3aWR0aDoyMHB4O2hlaWdodDoyMHB4fUBtZWRpYSAobWF4LXdpZHRoOiA2NTBweCl7LmNlLXBvcG92ZXItaXRlbV9faWNvbnt3aWR0aDozNnB4O2hlaWdodDozNnB4O2JvcmRlci1yYWRpdXM6OHB4fS5jZS1wb3BvdmVyLWl0ZW1fX2ljb24gc3Zne3dpZHRoOnZhcigtLWljb24tc2l6ZS1tb2JpbGUpO2hlaWdodDp2YXIoLS1pY29uLXNpemUtbW9iaWxlKX19LmNlLXBvcG92ZXItaXRlbV9fdGl0bGV7Zm9udC1zaXplOjE0cHg7bGluZS1oZWlnaHQ6MjBweDtmb250LXdlaWdodDo1MDA7b3ZlcmZsb3c6aGlkZGVuO3doaXRlLXNwYWNlOm5vd3JhcDt0ZXh0LW92ZXJmbG93OmVsbGlwc2lzfUBtZWRpYSAobWF4LXdpZHRoOiA2NTBweCl7LmNlLXBvcG92ZXItaXRlbV9fdGl0bGV7Zm9udC1zaXplOjE2cHh9fS5jZS1wb3BvdmVyLWl0ZW1fX3NlY29uZGFyeS10aXRsZXtjb2xvcjp2YXIoLS1jb2xvci10ZXh0LXNlY29uZGFyeSk7Zm9udC1zaXplOjEycHg7bWFyZ2luLWxlZnQ6YXV0bzt3aGl0ZS1zcGFjZTpub3dyYXA7bGV0dGVyLXNwYWNpbmc6LS4xZW07cGFkZGluZy1yaWdodDo1cHg7bWFyZ2luLWJvdHRvbTotMnB4O29wYWNpdHk6LjZ9QG1lZGlhIChtYXgtd2lkdGg6IDY1MHB4KXsuY2UtcG9wb3Zlci1pdGVtX19zZWNvbmRhcnktdGl0bGV7ZGlzcGxheTpub25lfX0uY2UtcG9wb3Zlci1pdGVtLS1hY3RpdmV7YmFja2dyb3VuZDp2YXIoLS1jb2xvci1iYWNrZ3JvdW5kLWljb24tYWN0aXZlKTtjb2xvcjp2YXIoLS1jb2xvci10ZXh0LWljb24tYWN0aXZlKX0uY2UtcG9wb3Zlci1pdGVtLS1hY3RpdmUgLmNlLXBvcG92ZXItaXRlbV9faWNvbnstd2Via2l0LWJveC1zaGFkb3c6bm9uZTtib3gtc2hhZG93Om5vbmV9LmNlLXBvcG92ZXItaXRlbS0tZGlzYWJsZWR7Y29sb3I6dmFyKC0tY29sb3ItdGV4dC1zZWNvbmRhcnkpO2N1cnNvcjpkZWZhdWx0O3BvaW50ZXItZXZlbnRzOm5vbmV9LmNlLXBvcG92ZXItaXRlbS0tZGlzYWJsZWQgLmNlLXBvcG92ZXItaXRlbV9faWNvbnstd2Via2l0LWJveC1zaGFkb3c6MCAwIDAgMXB4IHZhcigtLWNvbG9yLWJvcmRlci1pY29uLWRpc2FibGVkKTtib3gtc2hhZG93OjAgMCAwIDFweCB2YXIoLS1jb2xvci1ib3JkZXItaWNvbi1kaXNhYmxlZCl9LmNlLXBvcG92ZXItaXRlbS0tZm9jdXNlZDpub3QoLmNlLXBvcG92ZXItaXRlbS0tbm8tZm9jdXMpe2JhY2tncm91bmQ6dmFyKC0tY29sb3ItYmFja2dyb3VuZC1pdGVtLWZvY3VzKSFpbXBvcnRhbnR9LmNlLXBvcG92ZXItaXRlbS0tZm9jdXNlZDpub3QoLmNlLXBvcG92ZXItaXRlbS0tbm8tZm9jdXMpey13ZWJraXQtYm94LXNoYWRvdzppbnNldCAwIDAgMHB4IDFweCB2YXIoLS1jb2xvci1zaGFkb3ctaXRlbS1mb2N1cyk7Ym94LXNoYWRvdzppbnNldCAwIDAgMCAxcHggdmFyKC0tY29sb3Itc2hhZG93LWl0ZW0tZm9jdXMpfS5jZS1wb3BvdmVyLWl0ZW0tLWhpZGRlbntkaXNwbGF5Om5vbmV9QG1lZGlhIChob3ZlcjogaG92ZXIpey5jZS1wb3BvdmVyLWl0ZW06aG92ZXJ7Y3Vyc29yOnBvaW50ZXJ9LmNlLXBvcG92ZXItaXRlbTpob3Zlcjpub3QoLmNlLXBvcG92ZXItaXRlbS0tbm8taG92ZXIpe2JhY2tncm91bmQtY29sb3I6dmFyKC0tY29sb3ItYmFja2dyb3VuZC1pdGVtLWhvdmVyKX0uY2UtcG9wb3Zlci1pdGVtOmhvdmVyIC5jZS1wb3BvdmVyLWl0ZW1fX2ljb257LXdlYmtpdC1ib3gtc2hhZG93Om5vbmU7Ym94LXNoYWRvdzpub25lfX0uY2UtcG9wb3Zlci1pdGVtLS1jb25maXJtYXRpb257YmFja2dyb3VuZDp2YXIoLS1jb2xvci1iYWNrZ3JvdW5kLWl0ZW0tY29uZmlybSl9LmNlLXBvcG92ZXItaXRlbS0tY29uZmlybWF0aW9uIC5jZS1wb3BvdmVyLWl0ZW1fX2ljb257Y29sb3I6dmFyKC0tY29sb3ItYmFja2dyb3VuZC1pdGVtLWNvbmZpcm0pfS5jZS1wb3BvdmVyLWl0ZW0tLWNvbmZpcm1hdGlvbiAuY2UtcG9wb3Zlci1pdGVtX190aXRsZXtjb2xvcjojZmZmfUBtZWRpYSAoaG92ZXI6IGhvdmVyKXsuY2UtcG9wb3Zlci1pdGVtLS1jb25maXJtYXRpb246bm90KC5jZS1wb3BvdmVyLWl0ZW0tLW5vLWhvdmVyKTpob3ZlcntiYWNrZ3JvdW5kOnZhcigtLWNvbG9yLWJhY2tncm91bmQtaXRlbS1jb25maXJtLWhvdmVyKX19LmNlLXBvcG92ZXItaXRlbS0tY29uZmlybWF0aW9uOm5vdCguY2UtcG9wb3Zlci1pdGVtLS1uby1mb2N1cykuY2UtcG9wb3Zlci1pdGVtLS1mb2N1c2Vke2JhY2tncm91bmQ6dmFyKC0tY29sb3ItYmFja2dyb3VuZC1pdGVtLWNvbmZpcm0taG92ZXIpIWltcG9ydGFudH0uY2UtcG9wb3Zlci1pdGVtLS1jb25maXJtYXRpb24gLmNlLXBvcG92ZXItaXRlbV9faWNvbiwuY2UtcG9wb3Zlci1pdGVtLS1hY3RpdmUgLmNlLXBvcG92ZXItaXRlbV9faWNvbiwuY2UtcG9wb3Zlci1pdGVtLS1mb2N1c2VkIC5jZS1wb3BvdmVyLWl0ZW1fX2ljb257LXdlYmtpdC1ib3gtc2hhZG93Om5vbmU7Ym94LXNoYWRvdzpub25lfUAtd2Via2l0LWtleWZyYW1lcyBwYW5lbFNob3dpbmd7MCV7b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoLThweCkgc2NhbGUoLjkpO3RyYW5zZm9ybTp0cmFuc2xhdGVZKC04cHgpIHNjYWxlKC45KX03MCV7b3BhY2l0eToxOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMnB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgycHgpfXRvey13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCl9fUBrZXlmcmFtZXMgcGFuZWxTaG93aW5nezAle29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKC04cHgpIHNjYWxlKC45KTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgtOHB4KSBzY2FsZSguOSl9NzAle29wYWNpdHk6MTstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDJweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMnB4KX10b3std2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDApO3RyYW5zZm9ybTp0cmFuc2xhdGVZKDApfX1ALXdlYmtpdC1rZXlmcmFtZXMgcGFuZWxTaG93aW5nTW9iaWxlezAle29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDE0cHgpIHNjYWxlKC45OCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMTRweCkgc2NhbGUoLjk4KX03MCV7b3BhY2l0eToxOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTRweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTRweCl9dG97LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgwKX19QGtleWZyYW1lcyBwYW5lbFNob3dpbmdNb2JpbGV7MCV7b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMTRweCkgc2NhbGUoLjk4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgxNHB4KSBzY2FsZSguOTgpfTcwJXtvcGFjaXR5OjE7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgtNHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgtNHB4KX10b3std2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDApO3RyYW5zZm9ybTp0cmFuc2xhdGVZKDApfX0ud29iYmxley13ZWJraXQtYW5pbWF0aW9uLW5hbWU6d29iYmxlO2FuaW1hdGlvbi1uYW1lOndvYmJsZTstd2Via2l0LWFuaW1hdGlvbi1kdXJhdGlvbjouNHM7YW5pbWF0aW9uLWR1cmF0aW9uOi40c31ALXdlYmtpdC1rZXlmcmFtZXMgd29iYmxlezAley13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDAsMCwwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWigwKX0xNSV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlM2QoLTklLDAsMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZTNkKC05JSwwLDApfTMwJXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGUzZCg5JSwwLDApO3RyYW5zZm9ybTp0cmFuc2xhdGUzZCg5JSwwLDApfTQ1JXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGUzZCgtNCUsMCwwKTt0cmFuc2Zvcm06dHJhbnNsYXRlM2QoLTQlLDAsMCl9NjAley13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDQlLDAsMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDQlLDAsMCl9NzUley13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZTNkKC0xJSwwLDApO3RyYW5zZm9ybTp0cmFuc2xhdGUzZCgtMSUsMCwwKX10b3std2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGUzZCgwLDAsMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVooMCl9fUBrZXlmcmFtZXMgd29iYmxlezAley13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDAsMCwwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWigwKX0xNSV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlM2QoLTklLDAsMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZTNkKC05JSwwLDApfTMwJXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGUzZCg5JSwwLDApO3RyYW5zZm9ybTp0cmFuc2xhdGUzZCg5JSwwLDApfTQ1JXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGUzZCgtNCUsMCwwKTt0cmFuc2Zvcm06dHJhbnNsYXRlM2QoLTQlLDAsMCl9NjAley13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDQlLDAsMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDQlLDAsMCl9NzUley13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZTNkKC0xJSwwLDApO3RyYW5zZm9ybTp0cmFuc2xhdGUzZCgtMSUsMCwwKX10b3std2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGUzZCgwLDAsMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVooMCl9fVxuYDtcbmNsYXNzIHhpIGV4dGVuZHMgeSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKC4uLmFyZ3VtZW50cyksIHRoaXMuaXNNb2JpbGUgPSAhMSwgdGhpcy5jb250ZW50UmVjdENhY2hlID0gdm9pZCAwLCB0aGlzLnJlc2l6ZURlYm91bmNlciA9IGV0KCgpID0+IHtcbiAgICAgIHRoaXMud2luZG93UmVzaXplKCk7XG4gICAgfSwgMjAwKTtcbiAgfVxuICAvKipcbiAgICogRWRpdG9yLmpzIFVJIENTUyBjbGFzcyBuYW1lc1xuICAgKlxuICAgKiBAcmV0dXJucyB7e2VkaXRvcldyYXBwZXI6IHN0cmluZywgZWRpdG9yWm9uZTogc3RyaW5nfX1cbiAgICovXG4gIGdldCBDU1MoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGVkaXRvcldyYXBwZXI6IFwiY29kZXgtZWRpdG9yXCIsXG4gICAgICBlZGl0b3JXcmFwcGVyTmFycm93OiBcImNvZGV4LWVkaXRvci0tbmFycm93XCIsXG4gICAgICBlZGl0b3Jab25lOiBcImNvZGV4LWVkaXRvcl9fcmVkYWN0b3JcIixcbiAgICAgIGVkaXRvclpvbmVIaWRkZW46IFwiY29kZXgtZWRpdG9yX19yZWRhY3Rvci0taGlkZGVuXCIsXG4gICAgICBlZGl0b3JFbXB0eTogXCJjb2RleC1lZGl0b3ItLWVtcHR5XCIsXG4gICAgICBlZGl0b3JSdGxGaXg6IFwiY29kZXgtZWRpdG9yLS1ydGxcIlxuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybiBXaWR0aCBvZiBjZW50ZXIgY29sdW1uIG9mIEVkaXRvclxuICAgKlxuICAgKiBAcmV0dXJucyB7RE9NUmVjdH1cbiAgICovXG4gIGdldCBjb250ZW50UmVjdCgpIHtcbiAgICBpZiAodGhpcy5jb250ZW50UmVjdENhY2hlKVxuICAgICAgcmV0dXJuIHRoaXMuY29udGVudFJlY3RDYWNoZTtcbiAgICBjb25zdCBlID0gdGhpcy5ub2Rlcy53cmFwcGVyLnF1ZXJ5U2VsZWN0b3IoYC4ke1IuQ1NTLmNvbnRlbnR9YCk7XG4gICAgcmV0dXJuIGUgPyAodGhpcy5jb250ZW50UmVjdENhY2hlID0gZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSwgdGhpcy5jb250ZW50UmVjdENhY2hlKSA6IHtcbiAgICAgIHdpZHRoOiA2NTAsXG4gICAgICBsZWZ0OiAwLFxuICAgICAgcmlnaHQ6IDBcbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBNYWtpbmcgbWFpbiBpbnRlcmZhY2VcbiAgICovXG4gIGFzeW5jIHByZXBhcmUoKSB7XG4gICAgdGhpcy5jaGVja0lzTW9iaWxlKCksIHRoaXMubWFrZSgpLCB0aGlzLmxvYWRTdHlsZXMoKTtcbiAgfVxuICAvKipcbiAgICogVG9nZ2xlIHJlYWQtb25seSBzdGF0ZVxuICAgKlxuICAgKiBJZiByZWFkT25seSBpcyB0cnVlOlxuICAgKiAgLSByZW1vdmVzIGFsbCBsaXN0ZW5lcnMgZnJvbSBtYWluIFVJIG1vZHVsZSBlbGVtZW50c1xuICAgKlxuICAgKiBpZiByZWFkT25seSBpcyBmYWxzZTpcbiAgICogIC0gZW5hYmxlcyBhbGwgbGlzdGVuZXJzIHRvIFVJIG1vZHVsZSBlbGVtZW50c1xuICAgKlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHJlYWRPbmx5RW5hYmxlZCAtIFwicmVhZCBvbmx5XCIgc3RhdGVcbiAgICovXG4gIHRvZ2dsZVJlYWRPbmx5KGUpIHtcbiAgICBlID8gdGhpcy5kaXNhYmxlTW9kdWxlQmluZGluZ3MoKSA6IHdpbmRvdy5yZXF1ZXN0SWRsZUNhbGxiYWNrKCgpID0+IHtcbiAgICAgIHRoaXMuZW5hYmxlTW9kdWxlQmluZGluZ3MoKTtcbiAgICB9LCB7XG4gICAgICB0aW1lb3V0OiAyZTNcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogQ2hlY2sgaWYgRWRpdG9yIGlzIGVtcHR5IGFuZCBzZXQgQ1NTIGNsYXNzIHRvIHdyYXBwZXJcbiAgICovXG4gIGNoZWNrRW1wdGluZXNzKCkge1xuICAgIGNvbnN0IHsgQmxvY2tNYW5hZ2VyOiBlIH0gPSB0aGlzLkVkaXRvcjtcbiAgICB0aGlzLm5vZGVzLndyYXBwZXIuY2xhc3NMaXN0LnRvZ2dsZSh0aGlzLkNTUy5lZGl0b3JFbXB0eSwgZS5pc0VkaXRvckVtcHR5KTtcbiAgfVxuICAvKipcbiAgICogQ2hlY2sgaWYgb25lIG9mIFRvb2xiYXIgaXMgb3BlbmVkXG4gICAqIFVzZWQgdG8gcHJldmVudCBnbG9iYWwga2V5ZG93bnMgKGZvciBleGFtcGxlLCBFbnRlcikgY29uZmxpY3RzIHdpdGggRW50ZXItb24tdG9vbGJhclxuICAgKlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICovXG4gIGdldCBzb21lVG9vbGJhck9wZW5lZCgpIHtcbiAgICBjb25zdCB7IFRvb2xiYXI6IGUsIEJsb2NrU2V0dGluZ3M6IHQsIElubGluZVRvb2xiYXI6IG8sIENvbnZlcnNpb25Ub29sYmFyOiBpIH0gPSB0aGlzLkVkaXRvcjtcbiAgICByZXR1cm4gdC5vcGVuZWQgfHwgby5vcGVuZWQgfHwgaS5vcGVuZWQgfHwgZS50b29sYm94Lm9wZW5lZDtcbiAgfVxuICAvKipcbiAgICogQ2hlY2sgZm9yIHNvbWUgRmxpcHBlci1idXR0b25zIGlzIHVuZGVyIGZvY3VzXG4gICAqL1xuICBnZXQgc29tZUZsaXBwZXJCdXR0b25Gb2N1c2VkKCkge1xuICAgIHJldHVybiB0aGlzLkVkaXRvci5Ub29sYmFyLnRvb2xib3guaGFzRm9jdXMoKSA/ICEwIDogT2JqZWN0LmVudHJpZXModGhpcy5FZGl0b3IpLmZpbHRlcigoW2UsIHRdKSA9PiB0LmZsaXBwZXIgaW5zdGFuY2VvZiBxKS5zb21lKChbZSwgdF0pID0+IHQuZmxpcHBlci5oYXNGb2N1cygpKTtcbiAgfVxuICAvKipcbiAgICogQ2xlYW4gZWRpdG9yYHMgVUlcbiAgICovXG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy5ub2Rlcy5ob2xkZXIuaW5uZXJIVE1MID0gXCJcIjtcbiAgfVxuICAvKipcbiAgICogQ2xvc2UgYWxsIEVkaXRvcidzIHRvb2xiYXJzXG4gICAqL1xuICBjbG9zZUFsbFRvb2xiYXJzKCkge1xuICAgIGNvbnN0IHsgVG9vbGJhcjogZSwgQmxvY2tTZXR0aW5nczogdCwgSW5saW5lVG9vbGJhcjogbywgQ29udmVyc2lvblRvb2xiYXI6IGkgfSA9IHRoaXMuRWRpdG9yO1xuICAgIHQuY2xvc2UoKSwgby5jbG9zZSgpLCBpLmNsb3NlKCksIGUudG9vbGJveC5jbG9zZSgpO1xuICB9XG4gIC8qKlxuICAgKiBDaGVjayBmb3IgbW9iaWxlIG1vZGUgYW5kIGNhY2hlIGEgcmVzdWx0XG4gICAqL1xuICBjaGVja0lzTW9iaWxlKCkge1xuICAgIHRoaXMuaXNNb2JpbGUgPSB3aW5kb3cuaW5uZXJXaWR0aCA8IGR0O1xuICB9XG4gIC8qKlxuICAgKiBNYWtlcyBFZGl0b3IuanMgaW50ZXJmYWNlXG4gICAqL1xuICBtYWtlKCkge1xuICAgIHRoaXMubm9kZXMuaG9sZGVyID0gYy5nZXRIb2xkZXIodGhpcy5jb25maWcuaG9sZGVyKSwgdGhpcy5ub2Rlcy53cmFwcGVyID0gYy5tYWtlKFwiZGl2XCIsIFtcbiAgICAgIHRoaXMuQ1NTLmVkaXRvcldyYXBwZXIsXG4gICAgICAuLi50aGlzLmlzUnRsID8gW3RoaXMuQ1NTLmVkaXRvclJ0bEZpeF0gOiBbXVxuICAgIF0pLCB0aGlzLm5vZGVzLnJlZGFjdG9yID0gYy5tYWtlKFwiZGl2XCIsIHRoaXMuQ1NTLmVkaXRvclpvbmUpLCB0aGlzLm5vZGVzLmhvbGRlci5vZmZzZXRXaWR0aCA8IHRoaXMuY29udGVudFJlY3Qud2lkdGggJiYgdGhpcy5ub2Rlcy53cmFwcGVyLmNsYXNzTGlzdC5hZGQodGhpcy5DU1MuZWRpdG9yV3JhcHBlck5hcnJvdyksIHRoaXMubm9kZXMucmVkYWN0b3Iuc3R5bGUucGFkZGluZ0JvdHRvbSA9IHRoaXMuY29uZmlnLm1pbkhlaWdodCArIFwicHhcIiwgdGhpcy5ub2Rlcy53cmFwcGVyLmFwcGVuZENoaWxkKHRoaXMubm9kZXMucmVkYWN0b3IpLCB0aGlzLm5vZGVzLmhvbGRlci5hcHBlbmRDaGlsZCh0aGlzLm5vZGVzLndyYXBwZXIpO1xuICB9XG4gIC8qKlxuICAgKiBBcHBlbmRzIENTU1xuICAgKi9cbiAgbG9hZFN0eWxlcygpIHtcbiAgICBjb25zdCBlID0gXCJlZGl0b3ItanMtc3R5bGVzXCI7XG4gICAgaWYgKGMuZ2V0KGUpKVxuICAgICAgcmV0dXJuO1xuICAgIGNvbnN0IHQgPSBjLm1ha2UoXCJzdHlsZVwiLCBudWxsLCB7XG4gICAgICBpZDogZSxcbiAgICAgIHRleHRDb250ZW50OiB2aS50b1N0cmluZygpXG4gICAgfSk7XG4gICAgdGhpcy5jb25maWcuc3R5bGUgJiYgIVcodGhpcy5jb25maWcuc3R5bGUpICYmIHRoaXMuY29uZmlnLnN0eWxlLm5vbmNlICYmIHQuc2V0QXR0cmlidXRlKFwibm9uY2VcIiwgdGhpcy5jb25maWcuc3R5bGUubm9uY2UpLCBjLnByZXBlbmQoZG9jdW1lbnQuaGVhZCwgdCk7XG4gIH1cbiAgLyoqXG4gICAqIEJpbmQgZXZlbnRzIG9uIHRoZSBFZGl0b3IuanMgaW50ZXJmYWNlXG4gICAqL1xuICBlbmFibGVNb2R1bGVCaW5kaW5ncygpIHtcbiAgICB0aGlzLnJlYWRPbmx5TXV0YWJsZUxpc3RlbmVycy5vbih0aGlzLm5vZGVzLnJlZGFjdG9yLCBcImNsaWNrXCIsIChvKSA9PiB7XG4gICAgICB0aGlzLnJlZGFjdG9yQ2xpY2tlZChvKTtcbiAgICB9LCAhMSksIHRoaXMucmVhZE9ubHlNdXRhYmxlTGlzdGVuZXJzLm9uKHRoaXMubm9kZXMucmVkYWN0b3IsIFwibW91c2Vkb3duXCIsIChvKSA9PiB7XG4gICAgICB0aGlzLmRvY3VtZW50VG91Y2hlZChvKTtcbiAgICB9LCB7XG4gICAgICBjYXB0dXJlOiAhMCxcbiAgICAgIHBhc3NpdmU6ICEwXG4gICAgfSksIHRoaXMucmVhZE9ubHlNdXRhYmxlTGlzdGVuZXJzLm9uKHRoaXMubm9kZXMucmVkYWN0b3IsIFwidG91Y2hzdGFydFwiLCAobykgPT4ge1xuICAgICAgdGhpcy5kb2N1bWVudFRvdWNoZWQobyk7XG4gICAgfSwge1xuICAgICAgY2FwdHVyZTogITAsXG4gICAgICBwYXNzaXZlOiAhMFxuICAgIH0pLCB0aGlzLnJlYWRPbmx5TXV0YWJsZUxpc3RlbmVycy5vbihkb2N1bWVudCwgXCJrZXlkb3duXCIsIChvKSA9PiB7XG4gICAgICB0aGlzLmRvY3VtZW50S2V5ZG93bihvKTtcbiAgICB9LCAhMCksIHRoaXMucmVhZE9ubHlNdXRhYmxlTGlzdGVuZXJzLm9uKGRvY3VtZW50LCBcIm1vdXNlZG93blwiLCAobykgPT4ge1xuICAgICAgdGhpcy5kb2N1bWVudENsaWNrZWQobyk7XG4gICAgfSwgITApO1xuICAgIGNvbnN0IHQgPSBldCgoKSA9PiB7XG4gICAgICB0aGlzLnNlbGVjdGlvbkNoYW5nZWQoKTtcbiAgICB9LCAxODApO1xuICAgIHRoaXMucmVhZE9ubHlNdXRhYmxlTGlzdGVuZXJzLm9uKGRvY3VtZW50LCBcInNlbGVjdGlvbmNoYW5nZVwiLCB0LCAhMCksIHRoaXMucmVhZE9ubHlNdXRhYmxlTGlzdGVuZXJzLm9uKHdpbmRvdywgXCJyZXNpemVcIiwgKCkgPT4ge1xuICAgICAgdGhpcy5yZXNpemVEZWJvdW5jZXIoKTtcbiAgICB9LCB7XG4gICAgICBwYXNzaXZlOiAhMFxuICAgIH0pLCB0aGlzLndhdGNoQmxvY2tIb3ZlcmVkRXZlbnRzKCk7XG4gIH1cbiAgLyoqXG4gICAqIExpc3RlbiByZWRhY3RvciBtb3VzZW1vdmUgdG8gZW1pdCAnYmxvY2staG92ZXJlZCcgZXZlbnRcbiAgICovXG4gIHdhdGNoQmxvY2tIb3ZlcmVkRXZlbnRzKCkge1xuICAgIGxldCBlO1xuICAgIHRoaXMucmVhZE9ubHlNdXRhYmxlTGlzdGVuZXJzLm9uKHRoaXMubm9kZXMucmVkYWN0b3IsIFwibW91c2Vtb3ZlXCIsIEllKCh0KSA9PiB7XG4gICAgICBjb25zdCBvID0gdC50YXJnZXQuY2xvc2VzdChcIi5jZS1ibG9ja1wiKTtcbiAgICAgIHRoaXMuRWRpdG9yLkJsb2NrU2VsZWN0aW9uLmFueUJsb2NrU2VsZWN0ZWQgfHwgbyAmJiBlICE9PSBvICYmIChlID0gbywgdGhpcy5ldmVudHNEaXNwYXRjaGVyLmVtaXQoeXQsIHtcbiAgICAgICAgYmxvY2s6IHRoaXMuRWRpdG9yLkJsb2NrTWFuYWdlci5nZXRCbG9ja0J5Q2hpbGROb2RlKG8pXG4gICAgICB9KSk7XG4gICAgfSwgMjApLCB7XG4gICAgICBwYXNzaXZlOiAhMFxuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBVbmJpbmQgZXZlbnRzIG9uIHRoZSBFZGl0b3IuanMgaW50ZXJmYWNlXG4gICAqL1xuICBkaXNhYmxlTW9kdWxlQmluZGluZ3MoKSB7XG4gICAgdGhpcy5yZWFkT25seU11dGFibGVMaXN0ZW5lcnMuY2xlYXJBbGwoKTtcbiAgfVxuICAvKipcbiAgICogUmVzaXplIHdpbmRvdyBoYW5kbGVyXG4gICAqL1xuICB3aW5kb3dSZXNpemUoKSB7XG4gICAgdGhpcy5jb250ZW50UmVjdENhY2hlID0gbnVsbCwgdGhpcy5jaGVja0lzTW9iaWxlKCk7XG4gIH1cbiAgLyoqXG4gICAqIEFsbCBrZXlkb3ducyBvbiBkb2N1bWVudFxuICAgKlxuICAgKiBAcGFyYW0ge0tleWJvYXJkRXZlbnR9IGV2ZW50IC0ga2V5Ym9hcmQgZXZlbnRcbiAgICovXG4gIGRvY3VtZW50S2V5ZG93bihlKSB7XG4gICAgc3dpdGNoIChlLmtleUNvZGUpIHtcbiAgICAgIGNhc2Ugay5FTlRFUjpcbiAgICAgICAgdGhpcy5lbnRlclByZXNzZWQoZSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBrLkJBQ0tTUEFDRTpcbiAgICAgIGNhc2Ugay5ERUxFVEU6XG4gICAgICAgIHRoaXMuYmFja3NwYWNlUHJlc3NlZChlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIGsuRVNDOlxuICAgICAgICB0aGlzLmVzY2FwZVByZXNzZWQoZSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhpcy5kZWZhdWx0QmVoYXZpb3VyKGUpO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIElnbm9yZSBhbGwgb3RoZXIgZG9jdW1lbnQncyBrZXlkb3duIGV2ZW50c1xuICAgKlxuICAgKiBAcGFyYW0ge0tleWJvYXJkRXZlbnR9IGV2ZW50IC0ga2V5Ym9hcmQgZXZlbnRcbiAgICovXG4gIGRlZmF1bHRCZWhhdmlvdXIoZSkge1xuICAgIGNvbnN0IHsgY3VycmVudEJsb2NrOiB0IH0gPSB0aGlzLkVkaXRvci5CbG9ja01hbmFnZXIsIG8gPSBlLnRhcmdldC5jbG9zZXN0KGAuJHt0aGlzLkNTUy5lZGl0b3JXcmFwcGVyfWApLCBpID0gZS5hbHRLZXkgfHwgZS5jdHJsS2V5IHx8IGUubWV0YUtleSB8fCBlLnNoaWZ0S2V5O1xuICAgIGlmICh0ICE9PSB2b2lkIDAgJiYgbyA9PT0gbnVsbCkge1xuICAgICAgdGhpcy5FZGl0b3IuQmxvY2tFdmVudHMua2V5ZG93bihlKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbyB8fCB0ICYmIGkgfHwgKHRoaXMuRWRpdG9yLkJsb2NrTWFuYWdlci5kcm9wUG9pbnRlcigpLCB0aGlzLkVkaXRvci5Ub29sYmFyLmNsb3NlKCkpO1xuICB9XG4gIC8qKlxuICAgKiBAcGFyYW0ge0tleWJvYXJkRXZlbnR9IGV2ZW50IC0ga2V5Ym9hcmQgZXZlbnRcbiAgICovXG4gIGJhY2tzcGFjZVByZXNzZWQoZSkge1xuICAgIGNvbnN0IHsgQmxvY2tNYW5hZ2VyOiB0LCBCbG9ja1NlbGVjdGlvbjogbywgQ2FyZXQ6IGkgfSA9IHRoaXMuRWRpdG9yO1xuICAgIGlmIChvLmFueUJsb2NrU2VsZWN0ZWQgJiYgIWIuaXNTZWxlY3Rpb25FeGlzdHMpIHtcbiAgICAgIGNvbnN0IG4gPSB0LnJlbW92ZVNlbGVjdGVkQmxvY2tzKCksIHIgPSB0Lmluc2VydERlZmF1bHRCbG9ja0F0SW5kZXgobiwgITApO1xuICAgICAgaS5zZXRUb0Jsb2NrKHIsIGkucG9zaXRpb25zLlNUQVJUKSwgby5jbGVhclNlbGVjdGlvbihlKSwgZS5wcmV2ZW50RGVmYXVsdCgpLCBlLnN0b3BQcm9wYWdhdGlvbigpLCBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogRXNjYXBlIHByZXNzZWRcbiAgICogSWYgc29tZSBvZiBUb29sYmFyIGNvbXBvbmVudHMgYXJlIG9wZW5lZCwgdGhlbiBjbG9zZSBpdCBvdGhlcndpc2UgY2xvc2UgVG9vbGJhclxuICAgKlxuICAgKiBAcGFyYW0ge0V2ZW50fSBldmVudCAtIGVzY2FwZSBrZXlkb3duIGV2ZW50XG4gICAqL1xuICBlc2NhcGVQcmVzc2VkKGUpIHtcbiAgICB0aGlzLkVkaXRvci5CbG9ja1NlbGVjdGlvbi5jbGVhclNlbGVjdGlvbihlKSwgdGhpcy5FZGl0b3IuVG9vbGJhci50b29sYm94Lm9wZW5lZCA/ICh0aGlzLkVkaXRvci5Ub29sYmFyLnRvb2xib3guY2xvc2UoKSwgdGhpcy5FZGl0b3IuQ2FyZXQuc2V0VG9CbG9jayh0aGlzLkVkaXRvci5CbG9ja01hbmFnZXIuY3VycmVudEJsb2NrLCB0aGlzLkVkaXRvci5DYXJldC5wb3NpdGlvbnMuRU5EKSkgOiB0aGlzLkVkaXRvci5CbG9ja1NldHRpbmdzLm9wZW5lZCA/IHRoaXMuRWRpdG9yLkJsb2NrU2V0dGluZ3MuY2xvc2UoKSA6IHRoaXMuRWRpdG9yLkNvbnZlcnNpb25Ub29sYmFyLm9wZW5lZCA/IHRoaXMuRWRpdG9yLkNvbnZlcnNpb25Ub29sYmFyLmNsb3NlKCkgOiB0aGlzLkVkaXRvci5JbmxpbmVUb29sYmFyLm9wZW5lZCA/IHRoaXMuRWRpdG9yLklubGluZVRvb2xiYXIuY2xvc2UoKSA6IHRoaXMuRWRpdG9yLlRvb2xiYXIuY2xvc2UoKTtcbiAgfVxuICAvKipcbiAgICogRW50ZXIgcHJlc3NlZCBvbiBkb2N1bWVudFxuICAgKlxuICAgKiBAcGFyYW0ge0tleWJvYXJkRXZlbnR9IGV2ZW50IC0ga2V5Ym9hcmQgZXZlbnRcbiAgICovXG4gIGVudGVyUHJlc3NlZChlKSB7XG4gICAgY29uc3QgeyBCbG9ja01hbmFnZXI6IHQsIEJsb2NrU2VsZWN0aW9uOiBvIH0gPSB0aGlzLkVkaXRvciwgaSA9IHQuY3VycmVudEJsb2NrSW5kZXggPj0gMDtcbiAgICBpZiAoby5hbnlCbG9ja1NlbGVjdGVkICYmICFiLmlzU2VsZWN0aW9uRXhpc3RzKSB7XG4gICAgICBvLmNsZWFyU2VsZWN0aW9uKGUpLCBlLnByZXZlbnREZWZhdWx0KCksIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCksIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICghdGhpcy5zb21lVG9vbGJhck9wZW5lZCAmJiBpICYmIGUudGFyZ2V0LnRhZ05hbWUgPT09IFwiQk9EWVwiKSB7XG4gICAgICBjb25zdCBuID0gdGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLmluc2VydCgpO1xuICAgICAgdGhpcy5FZGl0b3IuQ2FyZXQuc2V0VG9CbG9jayhuKSwgdGhpcy5FZGl0b3IuVG9vbGJhci5tb3ZlQW5kT3BlbihuKTtcbiAgICB9XG4gICAgdGhpcy5FZGl0b3IuQmxvY2tTZWxlY3Rpb24uY2xlYXJTZWxlY3Rpb24oZSk7XG4gIH1cbiAgLyoqXG4gICAqIEFsbCBjbGlja3Mgb24gZG9jdW1lbnRcbiAgICpcbiAgICogQHBhcmFtIHtNb3VzZUV2ZW50fSBldmVudCAtIENsaWNrIGV2ZW50XG4gICAqL1xuICBkb2N1bWVudENsaWNrZWQoZSkge1xuICAgIHZhciBhLCBsO1xuICAgIGlmICghZS5pc1RydXN0ZWQpXG4gICAgICByZXR1cm47XG4gICAgY29uc3QgdCA9IGUudGFyZ2V0O1xuICAgIHRoaXMubm9kZXMuaG9sZGVyLmNvbnRhaW5zKHQpIHx8IGIuaXNBdEVkaXRvciB8fCAodGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLmRyb3BQb2ludGVyKCksIHRoaXMuRWRpdG9yLlRvb2xiYXIuY2xvc2UoKSk7XG4gICAgY29uc3QgaSA9IChhID0gdGhpcy5FZGl0b3IuQmxvY2tTZXR0aW5ncy5ub2Rlcy53cmFwcGVyKSA9PSBudWxsID8gdm9pZCAwIDogYS5jb250YWlucyh0KSwgbiA9IChsID0gdGhpcy5FZGl0b3IuVG9vbGJhci5ub2Rlcy5zZXR0aW5nc1RvZ2dsZXIpID09IG51bGwgPyB2b2lkIDAgOiBsLmNvbnRhaW5zKHQpLCByID0gaSB8fCBuO1xuICAgIGlmICh0aGlzLkVkaXRvci5CbG9ja1NldHRpbmdzLm9wZW5lZCAmJiAhcikge1xuICAgICAgdGhpcy5FZGl0b3IuQmxvY2tTZXR0aW5ncy5jbG9zZSgpO1xuICAgICAgY29uc3QgZCA9IHRoaXMuRWRpdG9yLkJsb2NrTWFuYWdlci5nZXRCbG9ja0J5Q2hpbGROb2RlKHQpO1xuICAgICAgdGhpcy5FZGl0b3IuVG9vbGJhci5tb3ZlQW5kT3BlbihkKTtcbiAgICB9XG4gICAgdGhpcy5FZGl0b3IuQmxvY2tTZWxlY3Rpb24uY2xlYXJTZWxlY3Rpb24oZSk7XG4gIH1cbiAgLyoqXG4gICAqIEZpcnN0IHRvdWNoIG9uIGVkaXRvclxuICAgKiBGaXJlZCBiZWZvcmUgY2xpY2tcbiAgICpcbiAgICogVXNlZCB0byBjaGFuZ2UgY3VycmVudCBibG9jayDigJQgd2UgbmVlZCB0byBkbyBpdCBiZWZvcmUgJ3NlbGVjdGlvbkNoYW5nZScgZXZlbnQuXG4gICAqIEFsc286XG4gICAqIC0gTW92ZSBhbmQgc2hvdyB0aGUgVG9vbGJhclxuICAgKiAtIFNldCBhIENhcmV0XG4gICAqXG4gICAqIEBwYXJhbSB7TW91c2VFdmVudCB8IFRvdWNoRXZlbnR9IGV2ZW50IC0gdG91Y2ggb3IgbW91c2UgZXZlbnRcbiAgICovXG4gIGRvY3VtZW50VG91Y2hlZChlKSB7XG4gICAgbGV0IHQgPSBlLnRhcmdldDtcbiAgICBpZiAodCA9PT0gdGhpcy5ub2Rlcy5yZWRhY3Rvcikge1xuICAgICAgY29uc3QgbyA9IGUgaW5zdGFuY2VvZiBNb3VzZUV2ZW50ID8gZS5jbGllbnRYIDogZS50b3VjaGVzWzBdLmNsaWVudFgsIGkgPSBlIGluc3RhbmNlb2YgTW91c2VFdmVudCA/IGUuY2xpZW50WSA6IGUudG91Y2hlc1swXS5jbGllbnRZO1xuICAgICAgdCA9IGRvY3VtZW50LmVsZW1lbnRGcm9tUG9pbnQobywgaSk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICB0aGlzLkVkaXRvci5CbG9ja01hbmFnZXIuc2V0Q3VycmVudEJsb2NrQnlDaGlsZE5vZGUodCk7XG4gICAgfSBjYXRjaCB7XG4gICAgICB0aGlzLkVkaXRvci5SZWN0YW5nbGVTZWxlY3Rpb24uaXNSZWN0QWN0aXZhdGVkKCkgfHwgdGhpcy5FZGl0b3IuQ2FyZXQuc2V0VG9UaGVMYXN0QmxvY2soKTtcbiAgICB9XG4gICAgdGhpcy5FZGl0b3IuVG9vbGJhci5tb3ZlQW5kT3BlbigpO1xuICB9XG4gIC8qKlxuICAgKiBBbGwgY2xpY2tzIG9uIHRoZSByZWRhY3RvciB6b25lXG4gICAqXG4gICAqIEBwYXJhbSB7TW91c2VFdmVudH0gZXZlbnQgLSBjbGljayBldmVudFxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogLSBCeSBjbGlja3Mgb24gdGhlIEVkaXRvcidzIGJvdHRvbSB6b25lOlxuICAgKiAgICAgIC0gaWYgbGFzdCBCbG9jayBpcyBlbXB0eSwgc2V0IGEgQ2FyZXQgdG8gdGhpc1xuICAgKiAgICAgIC0gb3RoZXJ3aXNlLCBhZGQgYSBuZXcgZW1wdHkgQmxvY2sgYW5kIHNldCBhIENhcmV0IHRvIHRoYXRcbiAgICovXG4gIHJlZGFjdG9yQ2xpY2tlZChlKSB7XG4gICAgaWYgKCFiLmlzQ29sbGFwc2VkKVxuICAgICAgcmV0dXJuO1xuICAgIGNvbnN0IHQgPSBlLnRhcmdldCwgbyA9IGUubWV0YUtleSB8fCBlLmN0cmxLZXk7XG4gICAgaWYgKGMuaXNBbmNob3IodCkgJiYgbykge1xuICAgICAgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKSwgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIGNvbnN0IGkgPSB0LmdldEF0dHJpYnV0ZShcImhyZWZcIiksIG4gPSBXdChpKTtcbiAgICAgIEt0KG4pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLnByb2Nlc3NCb3R0b21ab25lQ2xpY2soZSk7XG4gIH1cbiAgLyoqXG4gICAqIENoZWNrIGlmIHVzZXIgY2xpY2tzIG9uIHRoZSBFZGl0b3IncyBib3R0b20gem9uZTpcbiAgICogIC0gc2V0IGNhcmV0IHRvIHRoZSBsYXN0IGJsb2NrXG4gICAqICAtIG9yIGFkZCBuZXcgZW1wdHkgYmxvY2tcbiAgICpcbiAgICogQHBhcmFtIGV2ZW50IC0gY2xpY2sgZXZlbnRcbiAgICovXG4gIHByb2Nlc3NCb3R0b21ab25lQ2xpY2soZSkge1xuICAgIGNvbnN0IHQgPSB0aGlzLkVkaXRvci5CbG9ja01hbmFnZXIuZ2V0QmxvY2tCeUluZGV4KC0xKSwgbyA9IGMub2Zmc2V0KHQuaG9sZGVyKS5ib3R0b20sIGkgPSBlLnBhZ2VZLCB7IEJsb2NrU2VsZWN0aW9uOiBuIH0gPSB0aGlzLkVkaXRvcjtcbiAgICBpZiAoZS50YXJnZXQgaW5zdGFuY2VvZiBFbGVtZW50ICYmIGUudGFyZ2V0LmlzRXF1YWxOb2RlKHRoaXMubm9kZXMucmVkYWN0b3IpICYmIC8qKlxuICAgICogSWYgdGhlcmUgaXMgY3Jvc3MgYmxvY2sgc2VsZWN0aW9uIHN0YXJ0ZWQsIHRhcmdldCB3aWxsIGJlIGVxdWFsIHRvIHJlZGFjdG9yIHNvIHdlIG5lZWQgYWRkaXRpb25hbCBjaGVja1xuICAgICovXG4gICAgIW4uYW55QmxvY2tTZWxlY3RlZCAmJiAvKipcbiAgICAqIFByZXZlbnQgY2FyZXQganVtcGluZyAodG8gbGFzdCBibG9jaykgd2hlbiBjbGlja2luZyBiZXR3ZWVuIGJsb2Nrc1xuICAgICovXG4gICAgbyA8IGkpIHtcbiAgICAgIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCksIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICBjb25zdCB7IEJsb2NrTWFuYWdlcjogYSwgQ2FyZXQ6IGwsIFRvb2xiYXI6IGQgfSA9IHRoaXMuRWRpdG9yO1xuICAgICAgKCFhLmxhc3RCbG9jay50b29sLmlzRGVmYXVsdCB8fCAhYS5sYXN0QmxvY2suaXNFbXB0eSkgJiYgYS5pbnNlcnRBdEVuZCgpLCBsLnNldFRvVGhlTGFzdEJsb2NrKCksIGQubW92ZUFuZE9wZW4oYS5sYXN0QmxvY2spO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogSGFuZGxlIHNlbGVjdGlvbiBjaGFuZ2VzIG9uIG1vYmlsZSBkZXZpY2VzXG4gICAqIFVzZXMgZm9yIHNob3dpbmcgdGhlIElubGluZSBUb29sYmFyXG4gICAqL1xuICBzZWxlY3Rpb25DaGFuZ2VkKCkge1xuICAgIGNvbnN0IHsgQ3Jvc3NCbG9ja1NlbGVjdGlvbjogZSwgQmxvY2tTZWxlY3Rpb246IHQgfSA9IHRoaXMuRWRpdG9yLCBvID0gYi5hbmNob3JFbGVtZW50O1xuICAgIGlmIChlLmlzQ3Jvc3NCbG9ja1NlbGVjdGlvblN0YXJ0ZWQgJiYgdC5hbnlCbG9ja1NlbGVjdGVkICYmIGIuZ2V0KCkucmVtb3ZlQWxsUmFuZ2VzKCksICFvKSB7XG4gICAgICBiLnJhbmdlIHx8IHRoaXMuRWRpdG9yLklubGluZVRvb2xiYXIuY2xvc2UoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgaSA9IG8uY2xvc2VzdChgLiR7Ui5DU1MuY29udGVudH1gKSA9PT0gbnVsbDtcbiAgICBpZiAoaSAmJiAodGhpcy5FZGl0b3IuSW5saW5lVG9vbGJhci5jb250YWluc05vZGUobykgfHwgdGhpcy5FZGl0b3IuSW5saW5lVG9vbGJhci5jbG9zZSgpLCAhKG8uZGF0YXNldC5pbmxpbmVUb29sYmFyID09PSBcInRydWVcIikpKVxuICAgICAgcmV0dXJuO1xuICAgIHRoaXMuRWRpdG9yLkJsb2NrTWFuYWdlci5jdXJyZW50QmxvY2sgfHwgdGhpcy5FZGl0b3IuQmxvY2tNYW5hZ2VyLnNldEN1cnJlbnRCbG9ja0J5Q2hpbGROb2RlKG8pO1xuICAgIGNvbnN0IG4gPSBpICE9PSAhMDtcbiAgICB0aGlzLkVkaXRvci5JbmxpbmVUb29sYmFyLnRyeVRvU2hvdyghMCwgbik7XG4gIH1cbn1cbmNvbnN0IHdpID0ge1xuICAvLyBBUEkgTW9kdWxlc1xuICBCbG9ja3NBUEk6IG9vLFxuICBDYXJldEFQSTogaW8sXG4gIEV2ZW50c0FQSTogbm8sXG4gIEkxOG5BUEk6IEhlLFxuICBBUEk6IHNvLFxuICBJbmxpbmVUb29sYmFyQVBJOiBybyxcbiAgTGlzdGVuZXJzQVBJOiBhbyxcbiAgTm90aWZpZXJBUEk6IHVvLFxuICBSZWFkT25seUFQSTogcG8sXG4gIFNhbml0aXplckFQSTogeG8sXG4gIFNhdmVyQVBJOiB3byxcbiAgU2VsZWN0aW9uQVBJOiB5byxcbiAgU3R5bGVzQVBJOiBFbyxcbiAgVG9vbGJhckFQSTogQm8sXG4gIFRvb2x0aXBBUEk6IE1vLFxuICBVaUFQSTogTG8sXG4gIC8vIFRvb2xiYXIgTW9kdWxlc1xuICBCbG9ja1NldHRpbmdzOiBZbyxcbiAgQ29udmVyc2lvblRvb2xiYXI6ICQsXG4gIFRvb2xiYXI6IEdvLFxuICBJbmxpbmVUb29sYmFyOiBKbyxcbiAgLy8gTW9kdWxlc1xuICBCbG9ja0V2ZW50czogUW8sXG4gIEJsb2NrTWFuYWdlcjogb2ksXG4gIEJsb2NrU2VsZWN0aW9uOiBpaSxcbiAgQ2FyZXQ6IHdlLFxuICBDcm9zc0Jsb2NrU2VsZWN0aW9uOiBuaSxcbiAgRHJhZ05Ecm9wOiBzaSxcbiAgTW9kaWZpY2F0aW9uc09ic2VydmVyOiByaSxcbiAgUGFzdGU6IFR0LFxuICBSZWFkT25seTogYWksXG4gIFJlY3RhbmdsZVNlbGVjdGlvbjogZmUsXG4gIFJlbmRlcmVyOiBsaSxcbiAgU2F2ZXI6IGNpLFxuICBUb29sczogX3QsXG4gIFVJOiB4aVxufTtcbmNsYXNzIHlpIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7RWRpdG9yQ29uZmlnfSBjb25maWcgLSB1c2VyIGNvbmZpZ3VyYXRpb25cbiAgICovXG4gIGNvbnN0cnVjdG9yKGUpIHtcbiAgICB0aGlzLm1vZHVsZUluc3RhbmNlcyA9IHt9LCB0aGlzLmV2ZW50c0Rpc3BhdGNoZXIgPSBuZXcgRWUoKTtcbiAgICBsZXQgdCwgbztcbiAgICB0aGlzLmlzUmVhZHkgPSBuZXcgUHJvbWlzZSgoaSwgbikgPT4ge1xuICAgICAgdCA9IGksIG8gPSBuO1xuICAgIH0pLCBQcm9taXNlLnJlc29sdmUoKS50aGVuKGFzeW5jICgpID0+IHtcbiAgICAgIHRoaXMuY29uZmlndXJhdGlvbiA9IGUsIHRoaXMudmFsaWRhdGUoKSwgdGhpcy5pbml0KCksIGF3YWl0IHRoaXMuc3RhcnQoKSwgYXdhaXQgdGhpcy5yZW5kZXIoKTtcbiAgICAgIGNvbnN0IHsgQmxvY2tNYW5hZ2VyOiBpLCBDYXJldDogbiwgVUk6IHIsIE1vZGlmaWNhdGlvbnNPYnNlcnZlcjogYSB9ID0gdGhpcy5tb2R1bGVJbnN0YW5jZXM7XG4gICAgICByLmNoZWNrRW1wdGluZXNzKCksIGEuZW5hYmxlKCksIHRoaXMuY29uZmlndXJhdGlvbi5hdXRvZm9jdXMgJiYgbi5zZXRUb0Jsb2NrKGkuYmxvY2tzWzBdLCBuLnBvc2l0aW9ucy5TVEFSVCksIHQoKTtcbiAgICB9KS5jYXRjaCgoaSkgPT4ge1xuICAgICAgVChgRWRpdG9yLmpzIGlzIG5vdCByZWFkeSBiZWNhdXNlIG9mICR7aX1gLCBcImVycm9yXCIpLCBvKGkpO1xuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBTZXR0aW5nIGZvciBjb25maWd1cmF0aW9uXG4gICAqXG4gICAqIEBwYXJhbSB7RWRpdG9yQ29uZmlnfHN0cmluZ30gY29uZmlnIC0gRWRpdG9yJ3MgY29uZmlnIHRvIHNldFxuICAgKi9cbiAgc2V0IGNvbmZpZ3VyYXRpb24oZSkge1xuICAgIHZhciBvLCBpO1xuICAgIEQoZSkgPyB0aGlzLmNvbmZpZyA9IHtcbiAgICAgIC4uLmVcbiAgICB9IDogdGhpcy5jb25maWcgPSB7XG4gICAgICBob2xkZXI6IGVcbiAgICB9LCBMZSghIXRoaXMuY29uZmlnLmhvbGRlcklkLCBcImNvbmZpZy5ob2xkZXJJZFwiLCBcImNvbmZpZy5ob2xkZXJcIiksIHRoaXMuY29uZmlnLmhvbGRlcklkICYmICF0aGlzLmNvbmZpZy5ob2xkZXIgJiYgKHRoaXMuY29uZmlnLmhvbGRlciA9IHRoaXMuY29uZmlnLmhvbGRlcklkLCB0aGlzLmNvbmZpZy5ob2xkZXJJZCA9IG51bGwpLCB0aGlzLmNvbmZpZy5ob2xkZXIgPT0gbnVsbCAmJiAodGhpcy5jb25maWcuaG9sZGVyID0gXCJlZGl0b3Jqc1wiKSwgdGhpcy5jb25maWcubG9nTGV2ZWwgfHwgKHRoaXMuY29uZmlnLmxvZ0xldmVsID0gYXQuVkVSQk9TRSksIEZ0KHRoaXMuY29uZmlnLmxvZ0xldmVsKSwgTGUoISF0aGlzLmNvbmZpZy5pbml0aWFsQmxvY2ssIFwiY29uZmlnLmluaXRpYWxCbG9ja1wiLCBcImNvbmZpZy5kZWZhdWx0QmxvY2tcIiksIHRoaXMuY29uZmlnLmRlZmF1bHRCbG9jayA9IHRoaXMuY29uZmlnLmRlZmF1bHRCbG9jayB8fCB0aGlzLmNvbmZpZy5pbml0aWFsQmxvY2sgfHwgXCJwYXJhZ3JhcGhcIiwgdGhpcy5jb25maWcubWluSGVpZ2h0ID0gdGhpcy5jb25maWcubWluSGVpZ2h0ICE9PSB2b2lkIDAgPyB0aGlzLmNvbmZpZy5taW5IZWlnaHQgOiAzMDA7XG4gICAgY29uc3QgdCA9IHtcbiAgICAgIHR5cGU6IHRoaXMuY29uZmlnLmRlZmF1bHRCbG9jayxcbiAgICAgIGRhdGE6IHt9XG4gICAgfTtcbiAgICB0aGlzLmNvbmZpZy5wbGFjZWhvbGRlciA9IHRoaXMuY29uZmlnLnBsYWNlaG9sZGVyIHx8ICExLCB0aGlzLmNvbmZpZy5zYW5pdGl6ZXIgPSB0aGlzLmNvbmZpZy5zYW5pdGl6ZXIgfHwge1xuICAgICAgcDogITAsXG4gICAgICBiOiAhMCxcbiAgICAgIGE6ICEwXG4gICAgfSwgdGhpcy5jb25maWcuaGlkZVRvb2xiYXIgPSB0aGlzLmNvbmZpZy5oaWRlVG9vbGJhciA/IHRoaXMuY29uZmlnLmhpZGVUb29sYmFyIDogITEsIHRoaXMuY29uZmlnLnRvb2xzID0gdGhpcy5jb25maWcudG9vbHMgfHwge30sIHRoaXMuY29uZmlnLmkxOG4gPSB0aGlzLmNvbmZpZy5pMThuIHx8IHt9LCB0aGlzLmNvbmZpZy5kYXRhID0gdGhpcy5jb25maWcuZGF0YSB8fCB7IGJsb2NrczogW10gfSwgdGhpcy5jb25maWcub25SZWFkeSA9IHRoaXMuY29uZmlnLm9uUmVhZHkgfHwgKCgpID0+IHtcbiAgICB9KSwgdGhpcy5jb25maWcub25DaGFuZ2UgPSB0aGlzLmNvbmZpZy5vbkNoYW5nZSB8fCAoKCkgPT4ge1xuICAgIH0pLCB0aGlzLmNvbmZpZy5pbmxpbmVUb29sYmFyID0gdGhpcy5jb25maWcuaW5saW5lVG9vbGJhciAhPT0gdm9pZCAwID8gdGhpcy5jb25maWcuaW5saW5lVG9vbGJhciA6ICEwLCAoVyh0aGlzLmNvbmZpZy5kYXRhKSB8fCAhdGhpcy5jb25maWcuZGF0YS5ibG9ja3MgfHwgdGhpcy5jb25maWcuZGF0YS5ibG9ja3MubGVuZ3RoID09PSAwKSAmJiAodGhpcy5jb25maWcuZGF0YSA9IHsgYmxvY2tzOiBbdF0gfSksIHRoaXMuY29uZmlnLnJlYWRPbmx5ID0gdGhpcy5jb25maWcucmVhZE9ubHkgfHwgITEsIChvID0gdGhpcy5jb25maWcuaTE4bikgIT0gbnVsbCAmJiBvLm1lc3NhZ2VzICYmIHouc2V0RGljdGlvbmFyeSh0aGlzLmNvbmZpZy5pMThuLm1lc3NhZ2VzKSwgdGhpcy5jb25maWcuaTE4bi5kaXJlY3Rpb24gPSAoKGkgPSB0aGlzLmNvbmZpZy5pMThuKSA9PSBudWxsID8gdm9pZCAwIDogaS5kaXJlY3Rpb24pIHx8IFwibHRyXCI7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgcHJpdmF0ZSBwcm9wZXJ0eVxuICAgKlxuICAgKiBAcmV0dXJucyB7RWRpdG9yQ29uZmlnfVxuICAgKi9cbiAgZ2V0IGNvbmZpZ3VyYXRpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuY29uZmlnO1xuICB9XG4gIC8qKlxuICAgKiBDaGVja3MgZm9yIHJlcXVpcmVkIGZpZWxkcyBpbiBFZGl0b3IncyBjb25maWdcbiAgICovXG4gIHZhbGlkYXRlKCkge1xuICAgIGNvbnN0IHsgaG9sZGVySWQ6IGUsIGhvbGRlcjogdCB9ID0gdGhpcy5jb25maWc7XG4gICAgaWYgKGUgJiYgdClcbiAgICAgIHRocm93IEVycm9yKFwiwqtob2xkZXJJZMK7IGFuZCDCq2hvbGRlcsK7IHBhcmFtIGNhbid0IGFzc2lnbiBhdCB0aGUgc2FtZSB0aW1lLlwiKTtcbiAgICBpZiAoRyh0KSAmJiAhYy5nZXQodCkpXG4gICAgICB0aHJvdyBFcnJvcihgZWxlbWVudCB3aXRoIElEIMKrJHt0fcK7IGlzIG1pc3NpbmcuIFBhc3MgY29ycmVjdCBob2xkZXIncyBJRC5gKTtcbiAgICBpZiAodCAmJiBEKHQpICYmICFjLmlzRWxlbWVudCh0KSlcbiAgICAgIHRocm93IEVycm9yKFwiwqtob2xkZXLCuyB2YWx1ZSBtdXN0IGJlIGFuIEVsZW1lbnQgbm9kZVwiKTtcbiAgfVxuICAvKipcbiAgICogSW5pdGlhbGl6ZXMgbW9kdWxlczpcbiAgICogIC0gbWFrZSBhbmQgc2F2ZSBpbnN0YW5jZXNcbiAgICogIC0gY29uZmlndXJlXG4gICAqL1xuICBpbml0KCkge1xuICAgIHRoaXMuY29uc3RydWN0TW9kdWxlcygpLCB0aGlzLmNvbmZpZ3VyZU1vZHVsZXMoKTtcbiAgfVxuICAvKipcbiAgICogU3RhcnQgRWRpdG9yIVxuICAgKlxuICAgKiBHZXQgbGlzdCBvZiBtb2R1bGVzIHRoYXQgbmVlZHMgdG8gYmUgcHJlcGFyZWQgYW5kIHJldHVybiBhIHNlcXVlbmNlIChQcm9taXNlKVxuICAgKlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTx2b2lkPn1cbiAgICovXG4gIGFzeW5jIHN0YXJ0KCkge1xuICAgIGF3YWl0IFtcbiAgICAgIFwiVG9vbHNcIixcbiAgICAgIFwiVUlcIixcbiAgICAgIFwiQmxvY2tNYW5hZ2VyXCIsXG4gICAgICBcIlBhc3RlXCIsXG4gICAgICBcIkJsb2NrU2VsZWN0aW9uXCIsXG4gICAgICBcIlJlY3RhbmdsZVNlbGVjdGlvblwiLFxuICAgICAgXCJDcm9zc0Jsb2NrU2VsZWN0aW9uXCIsXG4gICAgICBcIlJlYWRPbmx5XCJcbiAgICBdLnJlZHVjZShcbiAgICAgICh0LCBvKSA9PiB0LnRoZW4oYXN5bmMgKCkgPT4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGF3YWl0IHRoaXMubW9kdWxlSW5zdGFuY2VzW29dLnByZXBhcmUoKTtcbiAgICAgICAgfSBjYXRjaCAoaSkge1xuICAgICAgICAgIGlmIChpIGluc3RhbmNlb2YgdXQpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoaS5tZXNzYWdlKTtcbiAgICAgICAgICBUKGBNb2R1bGUgJHtvfSB3YXMgc2tpcHBlZCBiZWNhdXNlIG9mICVvYCwgXCJ3YXJuXCIsIGkpO1xuICAgICAgICB9XG4gICAgICB9KSxcbiAgICAgIFByb21pc2UucmVzb2x2ZSgpXG4gICAgKTtcbiAgfVxuICAvKipcbiAgICogUmVuZGVyIGluaXRpYWwgZGF0YVxuICAgKi9cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiB0aGlzLm1vZHVsZUluc3RhbmNlcy5SZW5kZXJlci5yZW5kZXIodGhpcy5jb25maWcuZGF0YS5ibG9ja3MpO1xuICB9XG4gIC8qKlxuICAgKiBNYWtlIG1vZHVsZXMgaW5zdGFuY2VzIGFuZCBzYXZlIGl0IHRvIHRoZSBAcHJvcGVydHkgdGhpcy5tb2R1bGVJbnN0YW5jZXNcbiAgICovXG4gIGNvbnN0cnVjdE1vZHVsZXMoKSB7XG4gICAgT2JqZWN0LmVudHJpZXMod2kpLmZvckVhY2goKFtlLCB0XSkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgdGhpcy5tb2R1bGVJbnN0YW5jZXNbZV0gPSBuZXcgdCh7XG4gICAgICAgICAgY29uZmlnOiB0aGlzLmNvbmZpZ3VyYXRpb24sXG4gICAgICAgICAgZXZlbnRzRGlzcGF0Y2hlcjogdGhpcy5ldmVudHNEaXNwYXRjaGVyXG4gICAgICAgIH0pO1xuICAgICAgfSBjYXRjaCAobykge1xuICAgICAgICBUKFwiW2NvbnN0cnVjdE1vZHVsZXNdXCIsIGBNb2R1bGUgJHtlfSBza2lwcGVkIGJlY2F1c2VgLCBcImVycm9yXCIsIG8pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBNb2R1bGVzIGluc3RhbmNlcyBjb25maWd1cmF0aW9uOlxuICAgKiAgLSBwYXNzIG90aGVyIG1vZHVsZXMgdG8gdGhlICdzdGF0ZScgcHJvcGVydHlcbiAgICogIC0gLi4uXG4gICAqL1xuICBjb25maWd1cmVNb2R1bGVzKCkge1xuICAgIGZvciAoY29uc3QgZSBpbiB0aGlzLm1vZHVsZUluc3RhbmNlcylcbiAgICAgIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0aGlzLm1vZHVsZUluc3RhbmNlcywgZSkgJiYgKHRoaXMubW9kdWxlSW5zdGFuY2VzW2VdLnN0YXRlID0gdGhpcy5nZXRNb2R1bGVzRGlmZihlKSk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybiBtb2R1bGVzIHdpdGhvdXQgcGFzc2VkIG5hbWVcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSBtb2R1bGUgZm9yIHdpdGNoIG1vZHVsZXMgZGlmZmVyZW5jZSBzaG91bGQgYmUgY2FsY3VsYXRlZFxuICAgKi9cbiAgZ2V0TW9kdWxlc0RpZmYoZSkge1xuICAgIGNvbnN0IHQgPSB7fTtcbiAgICBmb3IgKGNvbnN0IG8gaW4gdGhpcy5tb2R1bGVJbnN0YW5jZXMpXG4gICAgICBvICE9PSBlICYmICh0W29dID0gdGhpcy5tb2R1bGVJbnN0YW5jZXNbb10pO1xuICAgIHJldHVybiB0O1xuICB9XG59XG4vKipcbiAqIEVkaXRvci5qc1xuICpcbiAqIEBsaWNlbnNlIEFwYWNoZS0yLjBcbiAqIEBzZWUgRWRpdG9yLmpzIDxodHRwczovL2VkaXRvcmpzLmlvPlxuICogQGF1dGhvciBDb2RlWCBUZWFtIDxodHRwczovL2NvZGV4LnNvPlxuICovXG5jbGFzcyBFaSB7XG4gIC8qKiBFZGl0b3IgdmVyc2lvbiAqL1xuICBzdGF0aWMgZ2V0IHZlcnNpb24oKSB7XG4gICAgcmV0dXJuIFwiMi4yOS4wXCI7XG4gIH1cbiAgLyoqXG4gICAqIEBwYXJhbSB7RWRpdG9yQ29uZmlnfHN0cmluZ3x1bmRlZmluZWR9IFtjb25maWd1cmF0aW9uXSAtIHVzZXIgY29uZmlndXJhdGlvblxuICAgKi9cbiAgY29uc3RydWN0b3IoZSkge1xuICAgIGxldCB0ID0gKCkgPT4ge1xuICAgIH07XG4gICAgRChlKSAmJiBNKGUub25SZWFkeSkgJiYgKHQgPSBlLm9uUmVhZHkpO1xuICAgIGNvbnN0IG8gPSBuZXcgeWkoZSk7XG4gICAgdGhpcy5pc1JlYWR5ID0gby5pc1JlYWR5LnRoZW4oKCkgPT4ge1xuICAgICAgdGhpcy5leHBvcnRBUEkobyksIHQoKTtcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogRXhwb3J0IGV4dGVybmFsIEFQSSBtZXRob2RzXG4gICAqXG4gICAqIEBwYXJhbSB7Q29yZX0gZWRpdG9yIOKAlCBFZGl0b3IncyBpbnN0YW5jZVxuICAgKi9cbiAgZXhwb3J0QVBJKGUpIHtcbiAgICBjb25zdCB0ID0gW1wiY29uZmlndXJhdGlvblwiXSwgbyA9ICgpID0+IHtcbiAgICAgIE9iamVjdC52YWx1ZXMoZS5tb2R1bGVJbnN0YW5jZXMpLmZvckVhY2goKG4pID0+IHtcbiAgICAgICAgTShuLmRlc3Ryb3kpICYmIG4uZGVzdHJveSgpLCBuLmxpc3RlbmVycy5yZW1vdmVBbGwoKTtcbiAgICAgIH0pLCBJbygpLCBlID0gbnVsbDtcbiAgICAgIGZvciAoY29uc3QgbiBpbiB0aGlzKVxuICAgICAgICBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodGhpcywgbikgJiYgZGVsZXRlIHRoaXNbbl07XG4gICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgbnVsbCk7XG4gICAgfTtcbiAgICB0LmZvckVhY2goKG4pID0+IHtcbiAgICAgIHRoaXNbbl0gPSBlW25dO1xuICAgIH0pLCB0aGlzLmRlc3Ryb3kgPSBvLCBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgZS5tb2R1bGVJbnN0YW5jZXMuQVBJLm1ldGhvZHMpLCBkZWxldGUgdGhpcy5leHBvcnRBUEksIE9iamVjdC5lbnRyaWVzKHtcbiAgICAgIGJsb2Nrczoge1xuICAgICAgICBjbGVhcjogXCJjbGVhclwiLFxuICAgICAgICByZW5kZXI6IFwicmVuZGVyXCJcbiAgICAgIH0sXG4gICAgICBjYXJldDoge1xuICAgICAgICBmb2N1czogXCJmb2N1c1wiXG4gICAgICB9LFxuICAgICAgZXZlbnRzOiB7XG4gICAgICAgIG9uOiBcIm9uXCIsXG4gICAgICAgIG9mZjogXCJvZmZcIixcbiAgICAgICAgZW1pdDogXCJlbWl0XCJcbiAgICAgIH0sXG4gICAgICBzYXZlcjoge1xuICAgICAgICBzYXZlOiBcInNhdmVcIlxuICAgICAgfVxuICAgIH0pLmZvckVhY2goKFtuLCByXSkgPT4ge1xuICAgICAgT2JqZWN0LmVudHJpZXMocikuZm9yRWFjaCgoW2EsIGxdKSA9PiB7XG4gICAgICAgIHRoaXNbbF0gPSBlLm1vZHVsZUluc3RhbmNlcy5BUEkubWV0aG9kc1tuXVthXTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG59XG5leHBvcnQge1xuICBFaSBhcyBkZWZhdWx0XG59O1xuIiwiKGZ1bmN0aW9uKCl7XCJ1c2Ugc3RyaWN0XCI7dHJ5e2lmKHR5cGVvZiBkb2N1bWVudDxcInVcIil7dmFyIGU9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO2UuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoXCIuY2UtaGVhZGVye3BhZGRpbmc6LjZlbSAwIDNweDttYXJnaW46MDtsaW5lLWhlaWdodDoxLjI1ZW07b3V0bGluZTpub25lfS5jZS1oZWFkZXIgcCwuY2UtaGVhZGVyIGRpdntwYWRkaW5nOjAhaW1wb3J0YW50O21hcmdpbjowIWltcG9ydGFudH0uY2UtaGVhZGVyW2NvbnRlbnRFZGl0YWJsZT10cnVlXVtkYXRhLXBsYWNlaG9sZGVyXTpiZWZvcmV7cG9zaXRpb246YWJzb2x1dGU7Y29udGVudDphdHRyKGRhdGEtcGxhY2Vob2xkZXIpO2NvbG9yOiM3MDc2ODQ7Zm9udC13ZWlnaHQ6NDAwO2Rpc3BsYXk6bm9uZTtjdXJzb3I6dGV4dH0uY2UtaGVhZGVyW2NvbnRlbnRFZGl0YWJsZT10cnVlXVtkYXRhLXBsYWNlaG9sZGVyXTplbXB0eTpiZWZvcmV7ZGlzcGxheTpibG9ja30uY2UtaGVhZGVyW2NvbnRlbnRFZGl0YWJsZT10cnVlXVtkYXRhLXBsYWNlaG9sZGVyXTplbXB0eTpmb2N1czpiZWZvcmV7ZGlzcGxheTpub25lfVwiKSksZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChlKX19Y2F0Y2godCl7Y29uc29sZS5lcnJvcihcInZpdGUtcGx1Z2luLWNzcy1pbmplY3RlZC1ieS1qc1wiLHQpfX0pKCk7XG5jb25zdCBpID0gJzxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHdpZHRoPVwiMjRcIiBoZWlnaHQ9XCIyNFwiIGZpbGw9XCJub25lXCIgdmlld0JveD1cIjAgMCAyNCAyNFwiPjxwYXRoIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIiBzdHJva2Utd2lkdGg9XCIyXCIgZD1cIk02IDdMNiAxMk02IDE3TDYgMTJNNiAxMkwxMiAxMk0xMiA3VjEyTTEyIDE3TDEyIDEyXCIvPjxwYXRoIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIiBzdHJva2Utd2lkdGg9XCIyXCIgZD1cIk0xOSAxN1YxMC4yMTM1QzE5IDEwLjEyODcgMTguOTAxMSAxMC4wODI0IDE4LjgzNiAxMC4xMzY3TDE2IDEyLjVcIi8+PC9zdmc+JywgYSA9ICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB3aWR0aD1cIjI0XCIgaGVpZ2h0PVwiMjRcIiBmaWxsPVwibm9uZVwiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIj48cGF0aCBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIgc3Ryb2tlLXdpZHRoPVwiMlwiIGQ9XCJNNiA3TDYgMTJNNiAxN0w2IDEyTTYgMTJMMTIgMTJNMTIgN1YxMk0xMiAxN0wxMiAxMlwiLz48cGF0aCBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIgc3Ryb2tlLXdpZHRoPVwiMlwiIGQ9XCJNMTYgMTFDMTYgMTAgMTkgOS41IDE5IDEyQzE5IDEzLjk3NzEgMTYuMDY4NCAxMy45OTk3IDE2LjAwMTIgMTYuODk4MUMxNS45OTk5IDE2Ljk1MzMgMTYuMDQ0OCAxNyAxNi4xIDE3TDE5LjMgMTdcIi8+PC9zdmc+JywgbCA9ICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB3aWR0aD1cIjI0XCIgaGVpZ2h0PVwiMjRcIiBmaWxsPVwibm9uZVwiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIj48cGF0aCBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIgc3Ryb2tlLXdpZHRoPVwiMlwiIGQ9XCJNNiA3TDYgMTJNNiAxN0w2IDEyTTYgMTJMMTIgMTJNMTIgN1YxMk0xMiAxN0wxMiAxMlwiLz48cGF0aCBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIgc3Ryb2tlLXdpZHRoPVwiMlwiIGQ9XCJNMTYgMTFDMTYgMTAuNSAxNi44MzIzIDEwIDE3LjYgMTBDMTguMzY3NyAxMCAxOS41IDEwLjMxMSAxOS41IDExLjVDMTkuNSAxMi41MzE1IDE4Ljc0NzQgMTIuOTAyMiAxOC41NDggMTIuOTgyM0MxOC41Mzc4IDEyLjk4NjQgMTguNTM5NSAxMy4wMDQ3IDE4LjU1MDMgMTMuMDA2M0MxOC44MTE1IDEzLjA0NTYgMjAgMTMuMzA2NSAyMCAxNC44QzIwIDE2IDE5LjUgMTcgMTcuOCAxN0MxNy44IDE3IDE2IDE3IDE2IDE2LjNcIi8+PC9zdmc+JywgbyA9ICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB3aWR0aD1cIjI0XCIgaGVpZ2h0PVwiMjRcIiBmaWxsPVwibm9uZVwiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIj48cGF0aCBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIgc3Ryb2tlLXdpZHRoPVwiMlwiIGQ9XCJNNiA3TDYgMTJNNiAxN0w2IDEyTTYgMTJMMTIgMTJNMTIgN1YxMk0xMiAxN0wxMiAxMlwiLz48cGF0aCBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIgc3Ryb2tlLXdpZHRoPVwiMlwiIGQ9XCJNMTggMTBMMTUuMjgzNCAxNC44NTExQzE1LjI0NiAxNC45MTc4IDE1LjI5NCAxNSAxNS4zNzA0IDE1QzE2Ljg0ODkgMTUgMTguNzU2MSAxNSAyMC4yIDE1TTE5IDE3QzE5IDE1LjcxODcgMTkgMTQuODgxMyAxOSAxMy42XCIvPjwvc3ZnPicsIGggPSAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgd2lkdGg9XCIyNFwiIGhlaWdodD1cIjI0XCIgZmlsbD1cIm5vbmVcIiB2aWV3Qm94PVwiMCAwIDI0IDI0XCI+PHBhdGggc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgc3Ryb2tlLWxpbmVjYXA9XCJyb3VuZFwiIHN0cm9rZS13aWR0aD1cIjJcIiBkPVwiTTYgN0w2IDEyTTYgMTdMNiAxMk02IDEyTDEyIDEyTTEyIDdWMTJNMTIgMTdMMTIgMTJcIi8+PHBhdGggc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgc3Ryb2tlLWxpbmVjYXA9XCJyb3VuZFwiIHN0cm9rZS13aWR0aD1cIjJcIiBkPVwiTTE2IDE1LjlDMTYgMTUuOSAxNi4zNzY4IDE3IDE3LjggMTdDMTkuNSAxNyAyMCAxNS42MTk5IDIwIDE0LjdDMjAgMTIuNzMyMyAxNy42NzQ1IDEyLjA0ODYgMTYuMTYzNSAxMi45ODk0QzE2LjA5NCAxMy4wMzI3IDE2IDEyLjk4NDYgMTYgMTIuOTAyN1YxMC4xQzE2IDEwLjA0NDggMTYuMDQ0OCAxMCAxNi4xIDEwSDE5LjhcIi8+PC9zdmc+JywgZCA9ICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB3aWR0aD1cIjI0XCIgaGVpZ2h0PVwiMjRcIiBmaWxsPVwibm9uZVwiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIj48cGF0aCBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIgc3Ryb2tlLXdpZHRoPVwiMlwiIGQ9XCJNNiA3TDYgMTJNNiAxN0w2IDEyTTYgMTJMMTIgMTJNMTIgN1YxMk0xMiAxN0wxMiAxMlwiLz48cGF0aCBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIgc3Ryb2tlLXdpZHRoPVwiMlwiIGQ9XCJNMTkuNSAxMEMxNi41IDEwLjUgMTYgMTMuMzI4NSAxNiAxNU0xNiAxNVYxNUMxNiAxNi4xMDQ2IDE2Ljg5NTQgMTcgMTggMTdIMTguMzI0NkMxOS4zMjUxIDE3IDIwLjMxOTEgMTYuMzQ5MiAyMC4yNTIyIDE1LjM1MDlDMjAuMDYxMiAxMi40OTU4IDE2IDEyLjY2MTEgMTYgMTVaXCIvPjwvc3ZnPicsIHUgPSAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgd2lkdGg9XCIyNFwiIGhlaWdodD1cIjI0XCIgZmlsbD1cIm5vbmVcIiB2aWV3Qm94PVwiMCAwIDI0IDI0XCI+PHBhdGggc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgc3Ryb2tlLWxpbmVjYXA9XCJyb3VuZFwiIHN0cm9rZS13aWR0aD1cIjJcIiBkPVwiTTkgN0w5IDEyTTkgMTdWMTJNOSAxMkwxNSAxMk0xNSA3VjEyTTE1IDE3TDE1IDEyXCIvPjwvc3ZnPic7XG4vKipcbiAqIEhlYWRlciBibG9jayBmb3IgdGhlIEVkaXRvci5qcy5cbiAqXG4gKiBAYXV0aG9yIENvZGVYICh0ZWFtQGlmbW8uc3UpXG4gKiBAY29weXJpZ2h0IENvZGVYIDIwMThcbiAqIEBsaWNlbnNlIE1JVFxuICogQHZlcnNpb24gMi4wLjBcbiAqL1xuY2xhc3MgYyB7XG4gIC8qKlxuICAgKiBSZW5kZXIgcGx1Z2luYHMgbWFpbiBFbGVtZW50IGFuZCBmaWxsIGl0IHdpdGggc2F2ZWQgZGF0YVxuICAgKlxuICAgKiBAcGFyYW0ge3tkYXRhOiBIZWFkZXJEYXRhLCBjb25maWc6IEhlYWRlckNvbmZpZywgYXBpOiBvYmplY3R9fVxuICAgKiAgIGRhdGEg4oCUIHByZXZpb3VzbHkgc2F2ZWQgZGF0YVxuICAgKiAgIGNvbmZpZyAtIHVzZXIgY29uZmlnIGZvciBUb29sXG4gICAqICAgYXBpIC0gRWRpdG9yLmpzIEFQSVxuICAgKiAgIHJlYWRPbmx5IC0gcmVhZCBvbmx5IG1vZGUgZmxhZ1xuICAgKi9cbiAgY29uc3RydWN0b3IoeyBkYXRhOiBlLCBjb25maWc6IHQsIGFwaTogcywgcmVhZE9ubHk6IHIgfSkge1xuICAgIHRoaXMuYXBpID0gcywgdGhpcy5yZWFkT25seSA9IHIsIHRoaXMuX0NTUyA9IHtcbiAgICAgIGJsb2NrOiB0aGlzLmFwaS5zdHlsZXMuYmxvY2ssXG4gICAgICB3cmFwcGVyOiBcImNlLWhlYWRlclwiXG4gICAgfSwgdGhpcy5fc2V0dGluZ3MgPSB0LCB0aGlzLl9kYXRhID0gdGhpcy5ub3JtYWxpemVEYXRhKGUpLCB0aGlzLl9lbGVtZW50ID0gdGhpcy5nZXRUYWcoKTtcbiAgfVxuICAvKipcbiAgICogTm9ybWFsaXplIGlucHV0IGRhdGFcbiAgICpcbiAgICogQHBhcmFtIHtIZWFkZXJEYXRhfSBkYXRhIC0gc2F2ZWQgZGF0YSB0byBwcm9jZXNzXG4gICAqXG4gICAqIEByZXR1cm5zIHtIZWFkZXJEYXRhfVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgbm9ybWFsaXplRGF0YShlKSB7XG4gICAgY29uc3QgdCA9IHt9O1xuICAgIHJldHVybiB0eXBlb2YgZSAhPSBcIm9iamVjdFwiICYmIChlID0ge30pLCB0LnRleHQgPSBlLnRleHQgfHwgXCJcIiwgdC5sZXZlbCA9IHBhcnNlSW50KGUubGV2ZWwpIHx8IHRoaXMuZGVmYXVsdExldmVsLm51bWJlciwgdDtcbiAgfVxuICAvKipcbiAgICogUmV0dXJuIFRvb2wncyB2aWV3XG4gICAqXG4gICAqIEByZXR1cm5zIHtIVE1MSGVhZGluZ0VsZW1lbnR9XG4gICAqIEBwdWJsaWNcbiAgICovXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gdGhpcy5fZWxlbWVudDtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBoZWFkZXIgYmxvY2sgdHVuZXMgY29uZmlnXG4gICAqXG4gICAqIEByZXR1cm5zIHtBcnJheX1cbiAgICovXG4gIHJlbmRlclNldHRpbmdzKCkge1xuICAgIHJldHVybiB0aGlzLmxldmVscy5tYXAoKGUpID0+ICh7XG4gICAgICBpY29uOiBlLnN2ZyxcbiAgICAgIGxhYmVsOiB0aGlzLmFwaS5pMThuLnQoYEhlYWRpbmcgJHtlLm51bWJlcn1gKSxcbiAgICAgIG9uQWN0aXZhdGU6ICgpID0+IHRoaXMuc2V0TGV2ZWwoZS5udW1iZXIpLFxuICAgICAgY2xvc2VPbkFjdGl2YXRlOiAhMCxcbiAgICAgIGlzQWN0aXZlOiB0aGlzLmN1cnJlbnRMZXZlbC5udW1iZXIgPT09IGUubnVtYmVyXG4gICAgfSkpO1xuICB9XG4gIC8qKlxuICAgKiBDYWxsYmFjayBmb3IgQmxvY2sncyBzZXR0aW5ncyBidXR0b25zXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBsZXZlbCAtIGxldmVsIHRvIHNldFxuICAgKi9cbiAgc2V0TGV2ZWwoZSkge1xuICAgIHRoaXMuZGF0YSA9IHtcbiAgICAgIGxldmVsOiBlLFxuICAgICAgdGV4dDogdGhpcy5kYXRhLnRleHRcbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBNZXRob2QgdGhhdCBzcGVjaWZpZWQgaG93IHRvIG1lcmdlIHR3byBUZXh0IGJsb2Nrcy5cbiAgICogQ2FsbGVkIGJ5IEVkaXRvci5qcyBieSBiYWNrc3BhY2UgYXQgdGhlIGJlZ2lubmluZyBvZiB0aGUgQmxvY2tcbiAgICpcbiAgICogQHBhcmFtIHtIZWFkZXJEYXRhfSBkYXRhIC0gc2F2ZWQgZGF0YSB0byBtZXJnZXIgd2l0aCBjdXJyZW50IGJsb2NrXG4gICAqIEBwdWJsaWNcbiAgICovXG4gIG1lcmdlKGUpIHtcbiAgICBjb25zdCB0ID0ge1xuICAgICAgdGV4dDogdGhpcy5kYXRhLnRleHQgKyBlLnRleHQsXG4gICAgICBsZXZlbDogdGhpcy5kYXRhLmxldmVsXG4gICAgfTtcbiAgICB0aGlzLmRhdGEgPSB0O1xuICB9XG4gIC8qKlxuICAgKiBWYWxpZGF0ZSBUZXh0IGJsb2NrIGRhdGE6XG4gICAqIC0gY2hlY2sgZm9yIGVtcHRpbmVzc1xuICAgKlxuICAgKiBAcGFyYW0ge0hlYWRlckRhdGF9IGJsb2NrRGF0YSDigJQgZGF0YSByZWNlaXZlZCBhZnRlciBzYXZpbmdcbiAgICogQHJldHVybnMge2Jvb2xlYW59IGZhbHNlIGlmIHNhdmVkIGRhdGEgaXMgbm90IGNvcnJlY3QsIG90aGVyd2lzZSB0cnVlXG4gICAqIEBwdWJsaWNcbiAgICovXG4gIHZhbGlkYXRlKGUpIHtcbiAgICByZXR1cm4gZS50ZXh0LnRyaW0oKSAhPT0gXCJcIjtcbiAgfVxuICAvKipcbiAgICogRXh0cmFjdCBUb29sJ3MgZGF0YSBmcm9tIHRoZSB2aWV3XG4gICAqXG4gICAqIEBwYXJhbSB7SFRNTEhlYWRpbmdFbGVtZW50fSB0b29sc0NvbnRlbnQgLSBUZXh0IHRvb2xzIHJlbmRlcmVkIHZpZXdcbiAgICogQHJldHVybnMge0hlYWRlckRhdGF9IC0gc2F2ZWQgZGF0YVxuICAgKiBAcHVibGljXG4gICAqL1xuICBzYXZlKGUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdGV4dDogZS5pbm5lckhUTUwsXG4gICAgICBsZXZlbDogdGhpcy5jdXJyZW50TGV2ZWwubnVtYmVyXG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogQWxsb3cgSGVhZGVyIHRvIGJlIGNvbnZlcnRlZCB0by9mcm9tIG90aGVyIGJsb2Nrc1xuICAgKi9cbiAgc3RhdGljIGdldCBjb252ZXJzaW9uQ29uZmlnKCkge1xuICAgIHJldHVybiB7XG4gICAgICBleHBvcnQ6IFwidGV4dFwiLFxuICAgICAgLy8gdXNlICd0ZXh0JyBwcm9wZXJ0eSBmb3Igb3RoZXIgYmxvY2tzXG4gICAgICBpbXBvcnQ6IFwidGV4dFwiXG4gICAgICAvLyBmaWxsICd0ZXh0JyBwcm9wZXJ0eSBmcm9tIG90aGVyIGJsb2NrJ3MgZXhwb3J0IHN0cmluZ1xuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIFNhbml0aXplciBSdWxlc1xuICAgKi9cbiAgc3RhdGljIGdldCBzYW5pdGl6ZSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbGV2ZWw6ICExLFxuICAgICAgdGV4dDoge31cbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIHRydWUgdG8gbm90aWZ5IGNvcmUgdGhhdCByZWFkLW9ubHkgaXMgc3VwcG9ydGVkXG4gICAqXG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKi9cbiAgc3RhdGljIGdldCBpc1JlYWRPbmx5U3VwcG9ydGVkKCkge1xuICAgIHJldHVybiAhMDtcbiAgfVxuICAvKipcbiAgICogR2V0IGN1cnJlbnQgVG9vbHNgcyBkYXRhXG4gICAqXG4gICAqIEByZXR1cm5zIHtIZWFkZXJEYXRhfSBDdXJyZW50IGRhdGFcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGdldCBkYXRhKCkge1xuICAgIHJldHVybiB0aGlzLl9kYXRhLnRleHQgPSB0aGlzLl9lbGVtZW50LmlubmVySFRNTCwgdGhpcy5fZGF0YS5sZXZlbCA9IHRoaXMuY3VycmVudExldmVsLm51bWJlciwgdGhpcy5fZGF0YTtcbiAgfVxuICAvKipcbiAgICogU3RvcmUgZGF0YSBpbiBwbHVnaW46XG4gICAqIC0gYXQgdGhlIHRoaXMuX2RhdGEgcHJvcGVydHlcbiAgICogLSBhdCB0aGUgSFRNTFxuICAgKlxuICAgKiBAcGFyYW0ge0hlYWRlckRhdGF9IGRhdGEg4oCUIGRhdGEgdG8gc2V0XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBzZXQgZGF0YShlKSB7XG4gICAgaWYgKHRoaXMuX2RhdGEgPSB0aGlzLm5vcm1hbGl6ZURhdGEoZSksIGUubGV2ZWwgIT09IHZvaWQgMCAmJiB0aGlzLl9lbGVtZW50LnBhcmVudE5vZGUpIHtcbiAgICAgIGNvbnN0IHQgPSB0aGlzLmdldFRhZygpO1xuICAgICAgdC5pbm5lckhUTUwgPSB0aGlzLl9lbGVtZW50LmlubmVySFRNTCwgdGhpcy5fZWxlbWVudC5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZCh0LCB0aGlzLl9lbGVtZW50KSwgdGhpcy5fZWxlbWVudCA9IHQ7XG4gICAgfVxuICAgIGUudGV4dCAhPT0gdm9pZCAwICYmICh0aGlzLl9lbGVtZW50LmlubmVySFRNTCA9IHRoaXMuX2RhdGEudGV4dCB8fCBcIlwiKTtcbiAgfVxuICAvKipcbiAgICogR2V0IHRhZyBmb3IgdGFyZ2V0IGxldmVsXG4gICAqIEJ5IGRlZmF1bHQgcmV0dXJucyBzZWNvbmQtbGV2ZWxlZCBoZWFkZXJcbiAgICpcbiAgICogQHJldHVybnMge0hUTUxFbGVtZW50fVxuICAgKi9cbiAgZ2V0VGFnKCkge1xuICAgIGNvbnN0IGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRoaXMuY3VycmVudExldmVsLnRhZyk7XG4gICAgcmV0dXJuIGUuaW5uZXJIVE1MID0gdGhpcy5fZGF0YS50ZXh0IHx8IFwiXCIsIGUuY2xhc3NMaXN0LmFkZCh0aGlzLl9DU1Mud3JhcHBlciksIGUuY29udGVudEVkaXRhYmxlID0gdGhpcy5yZWFkT25seSA/IFwiZmFsc2VcIiA6IFwidHJ1ZVwiLCBlLmRhdGFzZXQucGxhY2Vob2xkZXIgPSB0aGlzLmFwaS5pMThuLnQodGhpcy5fc2V0dGluZ3MucGxhY2Vob2xkZXIgfHwgXCJcIiksIGU7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBjdXJyZW50IGxldmVsXG4gICAqXG4gICAqIEByZXR1cm5zIHtsZXZlbH1cbiAgICovXG4gIGdldCBjdXJyZW50TGV2ZWwoKSB7XG4gICAgbGV0IGUgPSB0aGlzLmxldmVscy5maW5kKCh0KSA9PiB0Lm51bWJlciA9PT0gdGhpcy5fZGF0YS5sZXZlbCk7XG4gICAgcmV0dXJuIGUgfHwgKGUgPSB0aGlzLmRlZmF1bHRMZXZlbCksIGU7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybiBkZWZhdWx0IGxldmVsXG4gICAqXG4gICAqIEByZXR1cm5zIHtsZXZlbH1cbiAgICovXG4gIGdldCBkZWZhdWx0TGV2ZWwoKSB7XG4gICAgaWYgKHRoaXMuX3NldHRpbmdzLmRlZmF1bHRMZXZlbCkge1xuICAgICAgY29uc3QgZSA9IHRoaXMubGV2ZWxzLmZpbmQoKHQpID0+IHQubnVtYmVyID09PSB0aGlzLl9zZXR0aW5ncy5kZWZhdWx0TGV2ZWwpO1xuICAgICAgaWYgKGUpXG4gICAgICAgIHJldHVybiBlO1xuICAgICAgY29uc29sZS53YXJuKFwiKOC4hyfMgC0nzIEp4LiHIEhlYWRpbmcgVG9vbDogdGhlIGRlZmF1bHQgbGV2ZWwgc3BlY2lmaWVkIHdhcyBub3QgZm91bmQgaW4gYXZhaWxhYmxlIGxldmVsc1wiKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMubGV2ZWxzWzFdO1xuICB9XG4gIC8qKlxuICAgKiBAdHlwZWRlZiB7b2JqZWN0fSBsZXZlbFxuICAgKiBAcHJvcGVydHkge251bWJlcn0gbnVtYmVyIC0gbGV2ZWwgbnVtYmVyXG4gICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSB0YWcgLSB0YWcgY29ycmVzcG9uZHMgd2l0aCBsZXZlbCBudW1iZXJcbiAgICogQHByb3BlcnR5IHtzdHJpbmd9IHN2ZyAtIGljb25cbiAgICovXG4gIC8qKlxuICAgKiBBdmFpbGFibGUgaGVhZGVyIGxldmVsc1xuICAgKlxuICAgKiBAcmV0dXJucyB7bGV2ZWxbXX1cbiAgICovXG4gIGdldCBsZXZlbHMoKSB7XG4gICAgY29uc3QgZSA9IFtcbiAgICAgIHtcbiAgICAgICAgbnVtYmVyOiAxLFxuICAgICAgICB0YWc6IFwiSDFcIixcbiAgICAgICAgc3ZnOiBpXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBudW1iZXI6IDIsXG4gICAgICAgIHRhZzogXCJIMlwiLFxuICAgICAgICBzdmc6IGFcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIG51bWJlcjogMyxcbiAgICAgICAgdGFnOiBcIkgzXCIsXG4gICAgICAgIHN2ZzogbFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgbnVtYmVyOiA0LFxuICAgICAgICB0YWc6IFwiSDRcIixcbiAgICAgICAgc3ZnOiBvXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBudW1iZXI6IDUsXG4gICAgICAgIHRhZzogXCJINVwiLFxuICAgICAgICBzdmc6IGhcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIG51bWJlcjogNixcbiAgICAgICAgdGFnOiBcIkg2XCIsXG4gICAgICAgIHN2ZzogZFxuICAgICAgfVxuICAgIF07XG4gICAgcmV0dXJuIHRoaXMuX3NldHRpbmdzLmxldmVscyA/IGUuZmlsdGVyKFxuICAgICAgKHQpID0+IHRoaXMuX3NldHRpbmdzLmxldmVscy5pbmNsdWRlcyh0Lm51bWJlcilcbiAgICApIDogZTtcbiAgfVxuICAvKipcbiAgICogSGFuZGxlIEgxLUg2IHRhZ3Mgb24gcGFzdGUgdG8gc3Vic3RpdHV0ZSBpdCB3aXRoIGhlYWRlciBUb29sXG4gICAqXG4gICAqIEBwYXJhbSB7UGFzdGVFdmVudH0gZXZlbnQgLSBldmVudCB3aXRoIHBhc3RlZCBjb250ZW50XG4gICAqL1xuICBvblBhc3RlKGUpIHtcbiAgICBjb25zdCB0ID0gZS5kZXRhaWwuZGF0YTtcbiAgICBsZXQgcyA9IHRoaXMuZGVmYXVsdExldmVsLm51bWJlcjtcbiAgICBzd2l0Y2ggKHQudGFnTmFtZSkge1xuICAgICAgY2FzZSBcIkgxXCI6XG4gICAgICAgIHMgPSAxO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJIMlwiOlxuICAgICAgICBzID0gMjtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwiSDNcIjpcbiAgICAgICAgcyA9IDM7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcIkg0XCI6XG4gICAgICAgIHMgPSA0O1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJINVwiOlxuICAgICAgICBzID0gNTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwiSDZcIjpcbiAgICAgICAgcyA9IDY7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICB0aGlzLl9zZXR0aW5ncy5sZXZlbHMgJiYgKHMgPSB0aGlzLl9zZXR0aW5ncy5sZXZlbHMucmVkdWNlKChyLCBuKSA9PiBNYXRoLmFicyhuIC0gcykgPCBNYXRoLmFicyhyIC0gcykgPyBuIDogcikpLCB0aGlzLmRhdGEgPSB7XG4gICAgICBsZXZlbDogcyxcbiAgICAgIHRleHQ6IHQuaW5uZXJIVE1MXG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogVXNlZCBieSBFZGl0b3IuanMgcGFzdGUgaGFuZGxpbmcgQVBJLlxuICAgKiBQcm92aWRlcyBjb25maWd1cmF0aW9uIHRvIGhhbmRsZSBIMS1INiB0YWdzLlxuICAgKlxuICAgKiBAcmV0dXJucyB7e2hhbmRsZXI6IChmdW5jdGlvbihIVE1MRWxlbWVudCk6IHt0ZXh0OiBzdHJpbmd9KSwgdGFnczogc3RyaW5nW119fVxuICAgKi9cbiAgc3RhdGljIGdldCBwYXN0ZUNvbmZpZygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdGFnczogW1wiSDFcIiwgXCJIMlwiLCBcIkgzXCIsIFwiSDRcIiwgXCJINVwiLCBcIkg2XCJdXG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogR2V0IFRvb2wgdG9vbGJveCBzZXR0aW5nc1xuICAgKiBpY29uIC0gVG9vbCBpY29uJ3MgU1ZHXG4gICAqIHRpdGxlIC0gdGl0bGUgdG8gc2hvdyBpbiB0b29sYm94XG4gICAqXG4gICAqIEByZXR1cm5zIHt7aWNvbjogc3RyaW5nLCB0aXRsZTogc3RyaW5nfX1cbiAgICovXG4gIHN0YXRpYyBnZXQgdG9vbGJveCgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaWNvbjogdSxcbiAgICAgIHRpdGxlOiBcIkhlYWRpbmdcIlxuICAgIH07XG4gIH1cbn1cbmV4cG9ydCB7XG4gIGMgYXMgZGVmYXVsdFxufTtcbiIsIihmdW5jdGlvbigpe1widXNlIHN0cmljdFwiO3RyeXtpZih0eXBlb2YgZG9jdW1lbnQ8XCJ1XCIpe3ZhciBlPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKFwiLmNkeC1saXN0e21hcmdpbjowO3BhZGRpbmctbGVmdDo0MHB4O291dGxpbmU6bm9uZX0uY2R4LWxpc3RfX2l0ZW17cGFkZGluZzo1LjVweCAwIDUuNXB4IDNweDtsaW5lLWhlaWdodDoxLjZlbX0uY2R4LWxpc3QtLXVub3JkZXJlZHtsaXN0LXN0eWxlOmRpc2N9LmNkeC1saXN0LS1vcmRlcmVke2xpc3Qtc3R5bGU6ZGVjaW1hbH0uY2R4LWxpc3Qtc2V0dGluZ3N7ZGlzcGxheTpmbGV4fS5jZHgtbGlzdC1zZXR0aW5ncyAuY2R4LXNldHRpbmdzLWJ1dHRvbnt3aWR0aDo1MCV9XCIpKSxkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKGUpfX1jYXRjaCh0KXtjb25zb2xlLmVycm9yKFwidml0ZS1wbHVnaW4tY3NzLWluamVjdGVkLWJ5LWpzXCIsdCl9fSkoKTtcbmNvbnN0IGEgPSAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgd2lkdGg9XCIyNFwiIGhlaWdodD1cIjI0XCIgZmlsbD1cIm5vbmVcIiB2aWV3Qm94PVwiMCAwIDI0IDI0XCI+PGxpbmUgeDE9XCI5XCIgeDI9XCIxOVwiIHkxPVwiN1wiIHkyPVwiN1wiIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIiBzdHJva2Utd2lkdGg9XCIyXCIvPjxsaW5lIHgxPVwiOVwiIHgyPVwiMTlcIiB5MT1cIjEyXCIgeTI9XCIxMlwiIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIiBzdHJva2Utd2lkdGg9XCIyXCIvPjxsaW5lIHgxPVwiOVwiIHgyPVwiMTlcIiB5MT1cIjE3XCIgeTI9XCIxN1wiIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIiBzdHJva2Utd2lkdGg9XCIyXCIvPjxwYXRoIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIiBzdHJva2Utd2lkdGg9XCIyXCIgZD1cIk01LjAwMDAxIDE3SDQuOTkwMDJcIi8+PHBhdGggc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgc3Ryb2tlLWxpbmVjYXA9XCJyb3VuZFwiIHN0cm9rZS13aWR0aD1cIjJcIiBkPVwiTTUuMDAwMDEgMTJINC45OTAwMlwiLz48cGF0aCBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIgc3Ryb2tlLXdpZHRoPVwiMlwiIGQ9XCJNNS4wMDAwMSA3SDQuOTkwMDJcIi8+PC9zdmc+JywgbyA9ICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB3aWR0aD1cIjI0XCIgaGVpZ2h0PVwiMjRcIiBmaWxsPVwibm9uZVwiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIj48bGluZSB4MT1cIjEyXCIgeDI9XCIxOVwiIHkxPVwiN1wiIHkyPVwiN1wiIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIiBzdHJva2Utd2lkdGg9XCIyXCIvPjxsaW5lIHgxPVwiMTJcIiB4Mj1cIjE5XCIgeTE9XCIxMlwiIHkyPVwiMTJcIiBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIgc3Ryb2tlLXdpZHRoPVwiMlwiLz48bGluZSB4MT1cIjEyXCIgeDI9XCIxOVwiIHkxPVwiMTdcIiB5Mj1cIjE3XCIgc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgc3Ryb2tlLWxpbmVjYXA9XCJyb3VuZFwiIHN0cm9rZS13aWR0aD1cIjJcIi8+PHBhdGggc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgc3Ryb2tlLWxpbmVjYXA9XCJyb3VuZFwiIHN0cm9rZS13aWR0aD1cIjJcIiBkPVwiTTcuNzk5OTkgMTRMNy43OTk5OSA3LjIxMzVDNy43OTk5OSA3LjEyODcyIDcuNzAxMSA3LjA4MjQgNy42MzU5NyA3LjEzNjY4TDQuNzk5OTkgOS41XCIvPjwvc3ZnPic7XG5jbGFzcyBkIHtcbiAgLyoqXG4gICAqIE5vdGlmeSBjb3JlIHRoYXQgcmVhZC1vbmx5IG1vZGUgaXMgc3VwcG9ydGVkXG4gICAqXG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKi9cbiAgc3RhdGljIGdldCBpc1JlYWRPbmx5U3VwcG9ydGVkKCkge1xuICAgIHJldHVybiAhMDtcbiAgfVxuICAvKipcbiAgICogQWxsb3cgdG8gdXNlIG5hdGl2ZSBFbnRlciBiZWhhdmlvdXJcbiAgICpcbiAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAqIEBwdWJsaWNcbiAgICovXG4gIHN0YXRpYyBnZXQgZW5hYmxlTGluZUJyZWFrcygpIHtcbiAgICByZXR1cm4gITA7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBUb29sIHRvb2xib3ggc2V0dGluZ3NcbiAgICogaWNvbiAtIFRvb2wgaWNvbidzIFNWR1xuICAgKiB0aXRsZSAtIHRpdGxlIHRvIHNob3cgaW4gdG9vbGJveFxuICAgKlxuICAgKiBAcmV0dXJucyB7e2ljb246IHN0cmluZywgdGl0bGU6IHN0cmluZ319XG4gICAqL1xuICBzdGF0aWMgZ2V0IHRvb2xib3goKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGljb246IGEsXG4gICAgICB0aXRsZTogXCJMaXN0XCJcbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBSZW5kZXIgcGx1Z2luYHMgbWFpbiBFbGVtZW50IGFuZCBmaWxsIGl0IHdpdGggc2F2ZWQgZGF0YVxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gcGFyYW1zIC0gdG9vbCBjb25zdHJ1Y3RvciBvcHRpb25zXG4gICAqIEBwYXJhbSB7TGlzdERhdGF9IHBhcmFtcy5kYXRhIC0gcHJldmlvdXNseSBzYXZlZCBkYXRhXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBwYXJhbXMuY29uZmlnIC0gdXNlciBjb25maWcgZm9yIFRvb2xcbiAgICogQHBhcmFtIHtvYmplY3R9IHBhcmFtcy5hcGkgLSBFZGl0b3IuanMgQVBJXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gcGFyYW1zLnJlYWRPbmx5IC0gcmVhZC1vbmx5IG1vZGUgZmxhZ1xuICAgKi9cbiAgY29uc3RydWN0b3IoeyBkYXRhOiBlLCBjb25maWc6IHQsIGFwaTogciwgcmVhZE9ubHk6IHMgfSkge1xuICAgIHRoaXMuX2VsZW1lbnRzID0ge1xuICAgICAgd3JhcHBlcjogbnVsbFxuICAgIH0sIHRoaXMuYXBpID0gciwgdGhpcy5yZWFkT25seSA9IHMsIHRoaXMuc2V0dGluZ3MgPSBbXG4gICAgICB7XG4gICAgICAgIG5hbWU6IFwidW5vcmRlcmVkXCIsXG4gICAgICAgIGxhYmVsOiB0aGlzLmFwaS5pMThuLnQoXCJVbm9yZGVyZWRcIiksXG4gICAgICAgIGljb246IGEsXG4gICAgICAgIGRlZmF1bHQ6IHQuZGVmYXVsdFN0eWxlID09PSBcInVub3JkZXJlZFwiIHx8ICExXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBuYW1lOiBcIm9yZGVyZWRcIixcbiAgICAgICAgbGFiZWw6IHRoaXMuYXBpLmkxOG4udChcIk9yZGVyZWRcIiksXG4gICAgICAgIGljb246IG8sXG4gICAgICAgIGRlZmF1bHQ6IHQuZGVmYXVsdFN0eWxlID09PSBcIm9yZGVyZWRcIiB8fCAhMFxuICAgICAgfVxuICAgIF0sIHRoaXMuX2RhdGEgPSB7XG4gICAgICBzdHlsZTogdGhpcy5zZXR0aW5ncy5maW5kKChpKSA9PiBpLmRlZmF1bHQgPT09ICEwKS5uYW1lLFxuICAgICAgaXRlbXM6IFtdXG4gICAgfSwgdGhpcy5kYXRhID0gZTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBsaXN0IHRhZyB3aXRoIGl0ZW1zXG4gICAqXG4gICAqIEByZXR1cm5zIHtFbGVtZW50fVxuICAgKiBAcHVibGljXG4gICAqL1xuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2VsZW1lbnRzLndyYXBwZXIgPSB0aGlzLm1ha2VNYWluVGFnKHRoaXMuX2RhdGEuc3R5bGUpLCB0aGlzLl9kYXRhLml0ZW1zLmxlbmd0aCA/IHRoaXMuX2RhdGEuaXRlbXMuZm9yRWFjaCgoZSkgPT4ge1xuICAgICAgdGhpcy5fZWxlbWVudHMud3JhcHBlci5hcHBlbmRDaGlsZCh0aGlzLl9tYWtlKFwibGlcIiwgdGhpcy5DU1MuaXRlbSwge1xuICAgICAgICBpbm5lckhUTUw6IGVcbiAgICAgIH0pKTtcbiAgICB9KSA6IHRoaXMuX2VsZW1lbnRzLndyYXBwZXIuYXBwZW5kQ2hpbGQodGhpcy5fbWFrZShcImxpXCIsIHRoaXMuQ1NTLml0ZW0pKSwgdGhpcy5yZWFkT25seSB8fCB0aGlzLl9lbGVtZW50cy53cmFwcGVyLmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIChlKSA9PiB7XG4gICAgICBjb25zdCBbdCwgcl0gPSBbMTMsIDhdO1xuICAgICAgc3dpdGNoIChlLmtleUNvZGUpIHtcbiAgICAgICAgY2FzZSB0OlxuICAgICAgICAgIHRoaXMuZ2V0T3V0b2ZMaXN0KGUpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIHI6XG4gICAgICAgICAgdGhpcy5iYWNrc3BhY2UoZSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfSwgITEpLCB0aGlzLl9lbGVtZW50cy53cmFwcGVyO1xuICB9XG4gIC8qKlxuICAgKiBAcmV0dXJucyB7TGlzdERhdGF9XG4gICAqIEBwdWJsaWNcbiAgICovXG4gIHNhdmUoKSB7XG4gICAgcmV0dXJuIHRoaXMuZGF0YTtcbiAgfVxuICAvKipcbiAgICogQWxsb3cgTGlzdCBUb29sIHRvIGJlIGNvbnZlcnRlZCB0by9mcm9tIG90aGVyIGJsb2NrXG4gICAqXG4gICAqIEByZXR1cm5zIHt7ZXhwb3J0OiBGdW5jdGlvbiwgaW1wb3J0OiBGdW5jdGlvbn19XG4gICAqL1xuICBzdGF0aWMgZ2V0IGNvbnZlcnNpb25Db25maWcoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC8qKlxuICAgICAgICogVG8gY3JlYXRlIGV4cG9ydGVkIHN0cmluZyBmcm9tIGxpc3QsIGNvbmNhdGVuYXRlIGl0ZW1zIGJ5IGRvdC1zeW1ib2wuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtMaXN0RGF0YX0gZGF0YSAtIGxpc3QgZGF0YSB0byBjcmVhdGUgYSBzdHJpbmcgZnJvbSB0aGF0c1xuICAgICAgICogQHJldHVybnMge3N0cmluZ31cbiAgICAgICAqL1xuICAgICAgZXhwb3J0OiAoZSkgPT4gZS5pdGVtcy5qb2luKFwiLiBcIiksXG4gICAgICAvKipcbiAgICAgICAqIFRvIGNyZWF0ZSBhIGxpc3QgZnJvbSBvdGhlciBibG9jaydzIHN0cmluZywganVzdCBwdXQgaXQgYXQgdGhlIGZpcnN0IGl0ZW1cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIC0gc3RyaW5nIHRvIGNyZWF0ZSBsaXN0IHRvb2wgZGF0YSBmcm9tIHRoYXRcbiAgICAgICAqIEByZXR1cm5zIHtMaXN0RGF0YX1cbiAgICAgICAqL1xuICAgICAgaW1wb3J0OiAoZSkgPT4gKHtcbiAgICAgICAgaXRlbXM6IFtlXSxcbiAgICAgICAgc3R5bGU6IFwidW5vcmRlcmVkXCJcbiAgICAgIH0pXG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogU2FuaXRpemVyIHJ1bGVzXG4gICAqXG4gICAqIEByZXR1cm5zIHtvYmplY3R9XG4gICAqL1xuICBzdGF0aWMgZ2V0IHNhbml0aXplKCkge1xuICAgIHJldHVybiB7XG4gICAgICBzdHlsZToge30sXG4gICAgICBpdGVtczoge1xuICAgICAgICBicjogITBcbiAgICAgIH1cbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBTZXR0aW5nc1xuICAgKlxuICAgKiBAcHVibGljXG4gICAqIEByZXR1cm5zIHtBcnJheX1cbiAgICovXG4gIHJlbmRlclNldHRpbmdzKCkge1xuICAgIHJldHVybiB0aGlzLnNldHRpbmdzLm1hcCgoZSkgPT4gKHtcbiAgICAgIC4uLmUsXG4gICAgICBpc0FjdGl2ZTogdGhpcy5fZGF0YS5zdHlsZSA9PT0gZS5uYW1lLFxuICAgICAgY2xvc2VPbkFjdGl2YXRlOiAhMCxcbiAgICAgIG9uQWN0aXZhdGU6ICgpID0+IHRoaXMudG9nZ2xlVHVuZShlLm5hbWUpXG4gICAgfSkpO1xuICB9XG4gIC8qKlxuICAgKiBPbiBwYXN0ZSBjYWxsYmFjayB0aGF0IGlzIGZpcmVkIGZyb20gRWRpdG9yXG4gICAqXG4gICAqIEBwYXJhbSB7UGFzdGVFdmVudH0gZXZlbnQgLSBldmVudCB3aXRoIHBhc3RlZCBkYXRhXG4gICAqL1xuICBvblBhc3RlKGUpIHtcbiAgICBjb25zdCB0ID0gZS5kZXRhaWwuZGF0YTtcbiAgICB0aGlzLmRhdGEgPSB0aGlzLnBhc3RlSGFuZGxlcih0KTtcbiAgfVxuICAvKipcbiAgICogTGlzdCBUb29sIG9uIHBhc3RlIGNvbmZpZ3VyYXRpb25cbiAgICpcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgc3RhdGljIGdldCBwYXN0ZUNvbmZpZygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdGFnczogW1wiT0xcIiwgXCJVTFwiLCBcIkxJXCJdXG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlcyBtYWluIDx1bD4gb3IgPG9sPiB0YWcgZGVwZW5kZWQgb24gc3R5bGVcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0eWxlIC0gJ29yZGVyZWQnIG9yICd1bm9yZGVyZWQnXG4gICAqIEByZXR1cm5zIHtIVE1MT0xpc3RFbGVtZW50fEhUTUxVTGlzdEVsZW1lbnR9XG4gICAqL1xuICBtYWtlTWFpblRhZyhlKSB7XG4gICAgY29uc3QgdCA9IGUgPT09IFwib3JkZXJlZFwiID8gdGhpcy5DU1Mud3JhcHBlck9yZGVyZWQgOiB0aGlzLkNTUy53cmFwcGVyVW5vcmRlcmVkLCByID0gZSA9PT0gXCJvcmRlcmVkXCIgPyBcIm9sXCIgOiBcInVsXCI7XG4gICAgcmV0dXJuIHRoaXMuX21ha2UociwgW3RoaXMuQ1NTLmJhc2VCbG9jaywgdGhpcy5DU1Mud3JhcHBlciwgdF0sIHtcbiAgICAgIGNvbnRlbnRFZGl0YWJsZTogIXRoaXMucmVhZE9ubHlcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogVG9nZ2xlcyBMaXN0IHN0eWxlXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHlsZSAtICdvcmRlcmVkJ3wndW5vcmRlcmVkJ1xuICAgKi9cbiAgdG9nZ2xlVHVuZShlKSB7XG4gICAgY29uc3QgdCA9IHRoaXMubWFrZU1haW5UYWcoZSk7XG4gICAgZm9yICg7IHRoaXMuX2VsZW1lbnRzLndyYXBwZXIuaGFzQ2hpbGROb2RlcygpOyApXG4gICAgICB0LmFwcGVuZENoaWxkKHRoaXMuX2VsZW1lbnRzLndyYXBwZXIuZmlyc3RDaGlsZCk7XG4gICAgdGhpcy5fZWxlbWVudHMud3JhcHBlci5yZXBsYWNlV2l0aCh0KSwgdGhpcy5fZWxlbWVudHMud3JhcHBlciA9IHQsIHRoaXMuX2RhdGEuc3R5bGUgPSBlO1xuICB9XG4gIC8qKlxuICAgKiBTdHlsZXNcbiAgICpcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGdldCBDU1MoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGJhc2VCbG9jazogdGhpcy5hcGkuc3R5bGVzLmJsb2NrLFxuICAgICAgd3JhcHBlcjogXCJjZHgtbGlzdFwiLFxuICAgICAgd3JhcHBlck9yZGVyZWQ6IFwiY2R4LWxpc3QtLW9yZGVyZWRcIixcbiAgICAgIHdyYXBwZXJVbm9yZGVyZWQ6IFwiY2R4LWxpc3QtLXVub3JkZXJlZFwiLFxuICAgICAgaXRlbTogXCJjZHgtbGlzdF9faXRlbVwiXG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogTGlzdCBkYXRhIHNldHRlclxuICAgKlxuICAgKiBAcGFyYW0ge0xpc3REYXRhfSBsaXN0RGF0YVxuICAgKi9cbiAgc2V0IGRhdGEoZSkge1xuICAgIGUgfHwgKGUgPSB7fSksIHRoaXMuX2RhdGEuc3R5bGUgPSBlLnN0eWxlIHx8IHRoaXMuc2V0dGluZ3MuZmluZCgocikgPT4gci5kZWZhdWx0ID09PSAhMCkubmFtZSwgdGhpcy5fZGF0YS5pdGVtcyA9IGUuaXRlbXMgfHwgW107XG4gICAgY29uc3QgdCA9IHRoaXMuX2VsZW1lbnRzLndyYXBwZXI7XG4gICAgdCAmJiB0LnBhcmVudE5vZGUucmVwbGFjZUNoaWxkKHRoaXMucmVuZGVyKCksIHQpO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm4gTGlzdCBkYXRhXG4gICAqXG4gICAqIEByZXR1cm5zIHtMaXN0RGF0YX1cbiAgICovXG4gIGdldCBkYXRhKCkge1xuICAgIHRoaXMuX2RhdGEuaXRlbXMgPSBbXTtcbiAgICBjb25zdCBlID0gdGhpcy5fZWxlbWVudHMud3JhcHBlci5xdWVyeVNlbGVjdG9yQWxsKGAuJHt0aGlzLkNTUy5pdGVtfWApO1xuICAgIGZvciAobGV0IHQgPSAwOyB0IDwgZS5sZW5ndGg7IHQrKylcbiAgICAgIGVbdF0uaW5uZXJIVE1MLnJlcGxhY2UoXCI8YnI+XCIsIFwiIFwiKS50cmltKCkgJiYgdGhpcy5fZGF0YS5pdGVtcy5wdXNoKGVbdF0uaW5uZXJIVE1MKTtcbiAgICByZXR1cm4gdGhpcy5fZGF0YTtcbiAgfVxuICAvKipcbiAgICogSGVscGVyIGZvciBtYWtpbmcgRWxlbWVudHMgd2l0aCBhdHRyaWJ1dGVzXG4gICAqXG4gICAqIEBwYXJhbSAge3N0cmluZ30gdGFnTmFtZSAgICAgICAgICAgLSBuZXcgRWxlbWVudCB0YWcgbmFtZVxuICAgKiBAcGFyYW0gIHtBcnJheXxzdHJpbmd9IGNsYXNzTmFtZXMgIC0gbGlzdCBvciBuYW1lIG9mIENTUyBjbGFzc25hbWUocylcbiAgICogQHBhcmFtICB7b2JqZWN0fSBhdHRyaWJ1dGVzICAgICAgICAtIGFueSBhdHRyaWJ1dGVzXG4gICAqIEByZXR1cm5zIHtFbGVtZW50fVxuICAgKi9cbiAgX21ha2UoZSwgdCA9IG51bGwsIHIgPSB7fSkge1xuICAgIGNvbnN0IHMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGUpO1xuICAgIEFycmF5LmlzQXJyYXkodCkgPyBzLmNsYXNzTGlzdC5hZGQoLi4udCkgOiB0ICYmIHMuY2xhc3NMaXN0LmFkZCh0KTtcbiAgICBmb3IgKGNvbnN0IGkgaW4gcilcbiAgICAgIHNbaV0gPSByW2ldO1xuICAgIHJldHVybiBzO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIGN1cnJlbnQgTGlzdCBpdGVtIGJ5IHRoZSBjYXJldCBwb3NpdGlvblxuICAgKlxuICAgKiBAcmV0dXJucyB7RWxlbWVudH1cbiAgICovXG4gIGdldCBjdXJyZW50SXRlbSgpIHtcbiAgICBsZXQgZSA9IHdpbmRvdy5nZXRTZWxlY3Rpb24oKS5hbmNob3JOb2RlO1xuICAgIHJldHVybiBlLm5vZGVUeXBlICE9PSBOb2RlLkVMRU1FTlRfTk9ERSAmJiAoZSA9IGUucGFyZW50Tm9kZSksIGUuY2xvc2VzdChgLiR7dGhpcy5DU1MuaXRlbX1gKTtcbiAgfVxuICAvKipcbiAgICogR2V0IG91dCBmcm9tIExpc3QgVG9vbFxuICAgKiBieSBFbnRlciBvbiB0aGUgZW1wdHkgbGFzdCBpdGVtXG4gICAqXG4gICAqIEBwYXJhbSB7S2V5Ym9hcmRFdmVudH0gZXZlbnRcbiAgICovXG4gIGdldE91dG9mTGlzdChlKSB7XG4gICAgY29uc3QgdCA9IHRoaXMuX2VsZW1lbnRzLndyYXBwZXIucXVlcnlTZWxlY3RvckFsbChcIi5cIiArIHRoaXMuQ1NTLml0ZW0pO1xuICAgIGlmICh0Lmxlbmd0aCA8IDIpXG4gICAgICByZXR1cm47XG4gICAgY29uc3QgciA9IHRbdC5sZW5ndGggLSAxXSwgcyA9IHRoaXMuY3VycmVudEl0ZW07XG4gICAgcyA9PT0gciAmJiAhci50ZXh0Q29udGVudC50cmltKCkubGVuZ3RoICYmIChzLnBhcmVudEVsZW1lbnQucmVtb3ZlQ2hpbGQocyksIHRoaXMuYXBpLmJsb2Nrcy5pbnNlcnQoKSwgdGhpcy5hcGkuY2FyZXQuc2V0VG9CbG9jayh0aGlzLmFwaS5ibG9ja3MuZ2V0Q3VycmVudEJsb2NrSW5kZXgoKSksIGUucHJldmVudERlZmF1bHQoKSwgZS5zdG9wUHJvcGFnYXRpb24oKSk7XG4gIH1cbiAgLyoqXG4gICAqIEhhbmRsZSBiYWNrc3BhY2VcbiAgICpcbiAgICogQHBhcmFtIHtLZXlib2FyZEV2ZW50fSBldmVudFxuICAgKi9cbiAgYmFja3NwYWNlKGUpIHtcbiAgICBjb25zdCB0ID0gdGhpcy5fZWxlbWVudHMud3JhcHBlci5xdWVyeVNlbGVjdG9yQWxsKFwiLlwiICsgdGhpcy5DU1MuaXRlbSksIHIgPSB0WzBdO1xuICAgIHIgJiYgdC5sZW5ndGggPCAyICYmICFyLmlubmVySFRNTC5yZXBsYWNlKFwiPGJyPlwiLCBcIiBcIikudHJpbSgpICYmIGUucHJldmVudERlZmF1bHQoKTtcbiAgfVxuICAvKipcbiAgICogU2VsZWN0IExJIGNvbnRlbnQgYnkgQ01EK0FcbiAgICpcbiAgICogQHBhcmFtIHtLZXlib2FyZEV2ZW50fSBldmVudFxuICAgKi9cbiAgc2VsZWN0SXRlbShlKSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGNvbnN0IHQgPSB3aW5kb3cuZ2V0U2VsZWN0aW9uKCksIHIgPSB0LmFuY2hvck5vZGUucGFyZW50Tm9kZSwgcyA9IHIuY2xvc2VzdChcIi5cIiArIHRoaXMuQ1NTLml0ZW0pLCBpID0gbmV3IFJhbmdlKCk7XG4gICAgaS5zZWxlY3ROb2RlQ29udGVudHMocyksIHQucmVtb3ZlQWxsUmFuZ2VzKCksIHQuYWRkUmFuZ2UoaSk7XG4gIH1cbiAgLyoqXG4gICAqIEhhbmRsZSBVTCwgT0wgYW5kIExJIHRhZ3MgcGFzdGUgYW5kIHJldHVybnMgTGlzdCBkYXRhXG4gICAqXG4gICAqIEBwYXJhbSB7SFRNTFVMaXN0RWxlbWVudHxIVE1MT0xpc3RFbGVtZW50fEhUTUxMSUVsZW1lbnR9IGVsZW1lbnRcbiAgICogQHJldHVybnMge0xpc3REYXRhfVxuICAgKi9cbiAgcGFzdGVIYW5kbGVyKGUpIHtcbiAgICBjb25zdCB7IHRhZ05hbWU6IHQgfSA9IGU7XG4gICAgbGV0IHI7XG4gICAgc3dpdGNoICh0KSB7XG4gICAgICBjYXNlIFwiT0xcIjpcbiAgICAgICAgciA9IFwib3JkZXJlZFwiO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJVTFwiOlxuICAgICAgY2FzZSBcIkxJXCI6XG4gICAgICAgIHIgPSBcInVub3JkZXJlZFwiO1xuICAgIH1cbiAgICBjb25zdCBzID0ge1xuICAgICAgc3R5bGU6IHIsXG4gICAgICBpdGVtczogW11cbiAgICB9O1xuICAgIGlmICh0ID09PSBcIkxJXCIpXG4gICAgICBzLml0ZW1zID0gW2UuaW5uZXJIVE1MXTtcbiAgICBlbHNlIHtcbiAgICAgIGNvbnN0IGkgPSBBcnJheS5mcm9tKGUucXVlcnlTZWxlY3RvckFsbChcIkxJXCIpKTtcbiAgICAgIHMuaXRlbXMgPSBpLm1hcCgobikgPT4gbi5pbm5lckhUTUwpLmZpbHRlcigobikgPT4gISFuLnRyaW0oKSk7XG4gICAgfVxuICAgIHJldHVybiBzO1xuICB9XG59XG5leHBvcnQge1xuICBkIGFzIGRlZmF1bHRcbn07XG4iLCIoZnVuY3Rpb24oKXtcInVzZSBzdHJpY3RcIjt0cnl7aWYodHlwZW9mIGRvY3VtZW50PFwidVwiKXt2YXIgZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7ZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShcIi5jZS1yYXd0b29sX190ZXh0YXJlYXttaW4taGVpZ2h0OjIwMHB4O3Jlc2l6ZTp2ZXJ0aWNhbDtib3JkZXItcmFkaXVzOjhweDtib3JkZXI6MDtiYWNrZ3JvdW5kLWNvbG9yOiMxZTIxMjg7Zm9udC1mYW1pbHk6TWVubG8sTW9uYWNvLENvbnNvbGFzLENvdXJpZXIgTmV3LG1vbm9zcGFjZTtmb250LXNpemU6MTJweDtsaW5lLWhlaWdodDoxLjY7bGV0dGVyLXNwYWNpbmc6LS4ycHg7Y29sb3I6I2ExYTdiNjtvdmVyc2Nyb2xsLWJlaGF2aW9yOmNvbnRhaW59XCIpKSxkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKGUpfX1jYXRjaChvKXtjb25zb2xlLmVycm9yKFwidml0ZS1wbHVnaW4tY3NzLWluamVjdGVkLWJ5LWpzXCIsbyl9fSkoKTtcbmNvbnN0IGEgPSAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgd2lkdGg9XCIyNFwiIGhlaWdodD1cIjI0XCIgZmlsbD1cIm5vbmVcIiB2aWV3Qm94PVwiMCAwIDI0IDI0XCI+PHBhdGggc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgc3Ryb2tlLWxpbmVjYXA9XCJyb3VuZFwiIHN0cm9rZS1saW5lam9pbj1cInJvdW5kXCIgc3Ryb2tlLXdpZHRoPVwiMlwiIGQ9XCJNMTYuNjk1NCA1QzE3LjkxMiA1IDE4Ljg0NjggNi4wNzcxNiAxOC42NzU1IDcuMjgxNjVMMTcuNDI2IDE2LjA2NTlDMTcuMzE4MyAxNi44MjI5IDE2Ljc4ODUgMTcuNDUyMiAxNi4wNjEgMTcuNjg3M0wxMi42MTUxIDE4LjgwMTJDMTIuMjE1MiAxOC45MzA0IDExLjc4NDggMTguOTMwNCAxMS4zODQ5IDE4LjgwMTJMNy45Mzg5OCAxNy42ODczQzcuMjExNDggMTcuNDUyMiA2LjY4MTcgMTYuODIyOSA2LjU3NDAzIDE2LjA2NTlMNS4zMjQ1NCA3LjI4MTY1QzUuMTUzMjIgNi4wNzcxNiA2LjA4OCA1IDcuMzA0NjEgNUgxNi42OTU0WlwiLz48cGF0aCBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIgc3Ryb2tlLWxpbmVqb2luPVwicm91bmRcIiBzdHJva2Utd2lkdGg9XCIyXCIgZD1cIk0xNSA4LjRIOUw5LjQyODU3IDExLjc5MzlIMTQuNTcxNEwxNC4zNTcxIDEzLjI3ODhMMTQuMTQyOSAxNC43NjM2TDEyIDE1LjRMOS44NTcxNCAxNC43NjM2TDkuNzcxNDMgMTQuMzM5NFwiLz48L3N2Zz4nO1xuLyoqXG4gKiBSYXcgSFRNTCBUb29sIGZvciBDb2RlWCBFZGl0b3JcbiAqXG4gKiBAYXV0aG9yIENvZGVYICh0ZWFtQGNvZGV4LnNvKVxuICogQGNvcHlyaWdodCBDb2RlWCAyMDE4XG4gKiBAbGljZW5zZSBUaGUgTUlUIExpY2Vuc2UgKE1JVClcbiAqL1xuY2xhc3MgciB7XG4gIC8qKlxuICAgKiBOb3RpZnkgY29yZSB0aGF0IHJlYWQtb25seSBtb2RlIGlzIHN1cHBvcnRlZFxuICAgKlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICovXG4gIHN0YXRpYyBnZXQgaXNSZWFkT25seVN1cHBvcnRlZCgpIHtcbiAgICByZXR1cm4gITA7XG4gIH1cbiAgLyoqXG4gICAqIFNob3VsZCB0aGlzIHRvb2wgYmUgZGlzcGxheWVkIGF0IHRoZSBFZGl0b3IncyBUb29sYm94XG4gICAqXG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKiBAcHVibGljXG4gICAqL1xuICBzdGF0aWMgZ2V0IGRpc3BsYXlJblRvb2xib3goKSB7XG4gICAgcmV0dXJuICEwO1xuICB9XG4gIC8qKlxuICAgKiBBbGxvdyB0byBwcmVzcyBFbnRlciBpbnNpZGUgdGhlIFJhd1Rvb2wgdGV4dGFyZWFcbiAgICpcbiAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAqIEBwdWJsaWNcbiAgICovXG4gIHN0YXRpYyBnZXQgZW5hYmxlTGluZUJyZWFrcygpIHtcbiAgICByZXR1cm4gITA7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBUb29sIHRvb2xib3ggc2V0dGluZ3NcbiAgICogaWNvbiAtIFRvb2wgaWNvbidzIFNWR1xuICAgKiB0aXRsZSAtIHRpdGxlIHRvIHNob3cgaW4gdG9vbGJveFxuICAgKlxuICAgKiBAcmV0dXJucyB7e2ljb246IHN0cmluZywgdGl0bGU6IHN0cmluZ319XG4gICAqL1xuICBzdGF0aWMgZ2V0IHRvb2xib3goKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGljb246IGEsXG4gICAgICB0aXRsZTogXCJSYXcgSFRNTFwiXG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogQHR5cGVkZWYge29iamVjdH0gUmF3RGF0YSDigJQgcGx1Z2luIHNhdmVkIGRhdGFcbiAgICogQHBhcmFtIHtzdHJpbmd9IGh0bWwgLSBwcmV2aW91c2x5IHNhdmVkIEhUTUwgY29kZVxuICAgKiBAcHJvcGVydHlcbiAgICovXG4gIC8qKlxuICAgKiBSZW5kZXIgcGx1Z2luYHMgbWFpbiBFbGVtZW50IGFuZCBmaWxsIGl0IHdpdGggc2F2ZWQgZGF0YVxuICAgKlxuICAgKiBAcGFyYW0ge1Jhd0RhdGF9IGRhdGEg4oCUIHByZXZpb3VzbHkgc2F2ZWQgSFRNTCBkYXRhXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBjb25maWcgLSB1c2VyIGNvbmZpZyBmb3IgVG9vbFxuICAgKiBAcGFyYW0ge29iamVjdH0gYXBpIC0gQ29kZVggRWRpdG9yIEFQSVxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHJlYWRPbmx5IC0gcmVhZC1vbmx5IG1vZGUgZmxhZ1xuICAgKi9cbiAgY29uc3RydWN0b3IoeyBkYXRhOiB0LCBjb25maWc6IGUsIGFwaTogcywgcmVhZE9ubHk6IGkgfSkge1xuICAgIHRoaXMuYXBpID0gcywgdGhpcy5yZWFkT25seSA9IGksIHRoaXMucGxhY2Vob2xkZXIgPSBlLnBsYWNlaG9sZGVyIHx8IHIuREVGQVVMVF9QTEFDRUhPTERFUiwgdGhpcy5DU1MgPSB7XG4gICAgICBiYXNlQ2xhc3M6IHRoaXMuYXBpLnN0eWxlcy5ibG9jayxcbiAgICAgIGlucHV0OiB0aGlzLmFwaS5zdHlsZXMuaW5wdXQsXG4gICAgICB3cmFwcGVyOiBcImNlLXJhd3Rvb2xcIixcbiAgICAgIHRleHRhcmVhOiBcImNlLXJhd3Rvb2xfX3RleHRhcmVhXCJcbiAgICB9LCB0aGlzLmRhdGEgPSB7XG4gICAgICBodG1sOiB0Lmh0bWwgfHwgXCJcIlxuICAgIH0sIHRoaXMudGV4dGFyZWEgPSBudWxsLCB0aGlzLnJlc2l6ZURlYm91bmNlID0gbnVsbDtcbiAgfVxuICAvKipcbiAgICogUmV0dXJuIFRvb2wncyB2aWV3XG4gICAqXG4gICAqIEByZXR1cm5zIHtIVE1MRGl2RWxlbWVudH0gdGhpcy5lbGVtZW50IC0gUmF3VG9vbCdzIHdyYXBwZXJcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLCBlID0gMTAwO1xuICAgIHJldHVybiB0aGlzLnRleHRhcmVhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRleHRhcmVhXCIpLCB0LmNsYXNzTGlzdC5hZGQodGhpcy5DU1MuYmFzZUNsYXNzLCB0aGlzLkNTUy53cmFwcGVyKSwgdGhpcy50ZXh0YXJlYS5jbGFzc0xpc3QuYWRkKHRoaXMuQ1NTLnRleHRhcmVhLCB0aGlzLkNTUy5pbnB1dCksIHRoaXMudGV4dGFyZWEudGV4dENvbnRlbnQgPSB0aGlzLmRhdGEuaHRtbCwgdGhpcy50ZXh0YXJlYS5wbGFjZWhvbGRlciA9IHRoaXMucGxhY2Vob2xkZXIsIHRoaXMucmVhZE9ubHkgPyB0aGlzLnRleHRhcmVhLmRpc2FibGVkID0gITAgOiB0aGlzLnRleHRhcmVhLmFkZEV2ZW50TGlzdGVuZXIoXCJpbnB1dFwiLCAoKSA9PiB7XG4gICAgICB0aGlzLm9uSW5wdXQoKTtcbiAgICB9KSwgdC5hcHBlbmRDaGlsZCh0aGlzLnRleHRhcmVhKSwgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICB0aGlzLnJlc2l6ZSgpO1xuICAgIH0sIGUpLCB0O1xuICB9XG4gIC8qKlxuICAgKiBFeHRyYWN0IFRvb2wncyBkYXRhIGZyb20gdGhlIHZpZXdcbiAgICpcbiAgICogQHBhcmFtIHtIVE1MRGl2RWxlbWVudH0gcmF3VG9vbHNXcmFwcGVyIC0gUmF3VG9vbCdzIHdyYXBwZXIsIGNvbnRhaW5pbmcgdGV4dGFyZWEgd2l0aCByYXcgSFRNTCBjb2RlXG4gICAqIEByZXR1cm5zIHtSYXdEYXRhfSAtIHJhdyBIVE1MIGNvZGVcbiAgICogQHB1YmxpY1xuICAgKi9cbiAgc2F2ZSh0KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGh0bWw6IHQucXVlcnlTZWxlY3RvcihcInRleHRhcmVhXCIpLnZhbHVlXG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogRGVmYXVsdCBwbGFjZWhvbGRlciBmb3IgUmF3VG9vbCdzIHRleHRhcmVhXG4gICAqXG4gICAqIEBwdWJsaWNcbiAgICogQHJldHVybnMge3N0cmluZ31cbiAgICovXG4gIHN0YXRpYyBnZXQgREVGQVVMVF9QTEFDRUhPTERFUigpIHtcbiAgICByZXR1cm4gXCJFbnRlciBIVE1MIGNvZGVcIjtcbiAgfVxuICAvKipcbiAgICogQXV0b21hdGljIHNhbml0aXplIGNvbmZpZ1xuICAgKi9cbiAgc3RhdGljIGdldCBzYW5pdGl6ZSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaHRtbDogITBcbiAgICAgIC8vIEFsbG93IEhUTUwgdGFnc1xuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIFRleHRhcmVhIGNoYW5nZSBldmVudFxuICAgKlxuICAgKiBAcmV0dXJucyB7dm9pZH1cbiAgICovXG4gIG9uSW5wdXQoKSB7XG4gICAgdGhpcy5yZXNpemVEZWJvdW5jZSAmJiBjbGVhclRpbWVvdXQodGhpcy5yZXNpemVEZWJvdW5jZSksIHRoaXMucmVzaXplRGVib3VuY2UgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHRoaXMucmVzaXplKCk7XG4gICAgfSwgMjAwKTtcbiAgfVxuICAvKipcbiAgICogUmVzaXplIHRleHRhcmVhIHRvIGZpdCB3aG9sZSBoZWlnaHRcbiAgICpcbiAgICogQHJldHVybnMge3ZvaWR9XG4gICAqL1xuICByZXNpemUoKSB7XG4gICAgdGhpcy50ZXh0YXJlYS5zdHlsZS5oZWlnaHQgPSBcImF1dG9cIiwgdGhpcy50ZXh0YXJlYS5zdHlsZS5oZWlnaHQgPSB0aGlzLnRleHRhcmVhLnNjcm9sbEhlaWdodCArIFwicHhcIjtcbiAgfVxufVxuZXhwb3J0IHtcbiAgciBhcyBkZWZhdWx0XG59O1xuIiwiLyoqXG4gKiBAbGljc3RhcnQgVGhlIGZvbGxvd2luZyBpcyB0aGUgZW50aXJlIGxpY2Vuc2Ugbm90aWNlIGZvciB0aGVcbiAqIEphdmFTY3JpcHQgY29kZSBpbiB0aGlzIHBhZ2VcbiAqXG4gKiBDb3B5cmlnaHQgMjAyMyBNb3ppbGxhIEZvdW5kYXRpb25cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKlxuICogQGxpY2VuZCBUaGUgYWJvdmUgaXMgdGhlIGVudGlyZSBsaWNlbnNlIG5vdGljZSBmb3IgdGhlXG4gKiBKYXZhU2NyaXB0IGNvZGUgaW4gdGhpcyBwYWdlXG4gKi9cblxuLyoqKioqKi8gdmFyIF9fd2VicGFja19tb2R1bGVzX18gPSAoe1xuXG4vKioqLyA2NDA6XG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfX193ZWJwYWNrX21vZHVsZV9fLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cblxuLy8gRVhQT1JUU1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIHtcbiAgQW5ub3RhdGlvbkxheWVyOiAoKSA9PiAoLyogYmluZGluZyAqLyBBbm5vdGF0aW9uTGF5ZXIpLFxuICBGcmVlVGV4dEFubm90YXRpb25FbGVtZW50OiAoKSA9PiAoLyogYmluZGluZyAqLyBGcmVlVGV4dEFubm90YXRpb25FbGVtZW50KSxcbiAgSW5rQW5ub3RhdGlvbkVsZW1lbnQ6ICgpID0+ICgvKiBiaW5kaW5nICovIElua0Fubm90YXRpb25FbGVtZW50KSxcbiAgU3RhbXBBbm5vdGF0aW9uRWxlbWVudDogKCkgPT4gKC8qIGJpbmRpbmcgKi8gU3RhbXBBbm5vdGF0aW9uRWxlbWVudClcbn0pO1xuXG4vLyBFWFRFUk5BTCBNT0RVTEU6IC4vc3JjL3NoYXJlZC91dGlsLmpzXG52YXIgdXRpbCA9IF9fd2VicGFja19yZXF1aXJlX18oMjY2KTtcbi8vIEVYVEVSTkFMIE1PRFVMRTogLi9zcmMvZGlzcGxheS9kaXNwbGF5X3V0aWxzLmpzXG52YXIgZGlzcGxheV91dGlscyA9IF9fd2VicGFja19yZXF1aXJlX18oNDczKTtcbi8vIEVYVEVSTkFMIE1PRFVMRTogLi9zcmMvZGlzcGxheS9hbm5vdGF0aW9uX3N0b3JhZ2UuanNcbnZhciBhbm5vdGF0aW9uX3N0b3JhZ2UgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDc4MCk7XG47Ly8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvc2hhcmVkL3NjcmlwdGluZ191dGlscy5qc1xuZnVuY3Rpb24gbWFrZUNvbG9yQ29tcChuKSB7XG4gIHJldHVybiBNYXRoLmZsb29yKE1hdGgubWF4KDAsIE1hdGgubWluKDEsIG4pKSAqIDI1NSkudG9TdHJpbmcoMTYpLnBhZFN0YXJ0KDIsIFwiMFwiKTtcbn1cbmZ1bmN0aW9uIHNjYWxlQW5kQ2xhbXAoeCkge1xuICByZXR1cm4gTWF0aC5tYXgoMCwgTWF0aC5taW4oMjU1LCAyNTUgKiB4KSk7XG59XG5jbGFzcyBDb2xvckNvbnZlcnRlcnMge1xuICBzdGF0aWMgQ01ZS19HKFtjLCB5LCBtLCBrXSkge1xuICAgIHJldHVybiBbXCJHXCIsIDEgLSBNYXRoLm1pbigxLCAwLjMgKiBjICsgMC41OSAqIG0gKyAwLjExICogeSArIGspXTtcbiAgfVxuICBzdGF0aWMgR19DTVlLKFtnXSkge1xuICAgIHJldHVybiBbXCJDTVlLXCIsIDAsIDAsIDAsIDEgLSBnXTtcbiAgfVxuICBzdGF0aWMgR19SR0IoW2ddKSB7XG4gICAgcmV0dXJuIFtcIlJHQlwiLCBnLCBnLCBnXTtcbiAgfVxuICBzdGF0aWMgR19yZ2IoW2ddKSB7XG4gICAgZyA9IHNjYWxlQW5kQ2xhbXAoZyk7XG4gICAgcmV0dXJuIFtnLCBnLCBnXTtcbiAgfVxuICBzdGF0aWMgR19IVE1MKFtnXSkge1xuICAgIGNvbnN0IEcgPSBtYWtlQ29sb3JDb21wKGcpO1xuICAgIHJldHVybiBgIyR7R30ke0d9JHtHfWA7XG4gIH1cbiAgc3RhdGljIFJHQl9HKFtyLCBnLCBiXSkge1xuICAgIHJldHVybiBbXCJHXCIsIDAuMyAqIHIgKyAwLjU5ICogZyArIDAuMTEgKiBiXTtcbiAgfVxuICBzdGF0aWMgUkdCX3JnYihjb2xvcikge1xuICAgIHJldHVybiBjb2xvci5tYXAoc2NhbGVBbmRDbGFtcCk7XG4gIH1cbiAgc3RhdGljIFJHQl9IVE1MKGNvbG9yKSB7XG4gICAgcmV0dXJuIGAjJHtjb2xvci5tYXAobWFrZUNvbG9yQ29tcCkuam9pbihcIlwiKX1gO1xuICB9XG4gIHN0YXRpYyBUX0hUTUwoKSB7XG4gICAgcmV0dXJuIFwiIzAwMDAwMDAwXCI7XG4gIH1cbiAgc3RhdGljIFRfcmdiKCkge1xuICAgIHJldHVybiBbbnVsbF07XG4gIH1cbiAgc3RhdGljIENNWUtfUkdCKFtjLCB5LCBtLCBrXSkge1xuICAgIHJldHVybiBbXCJSR0JcIiwgMSAtIE1hdGgubWluKDEsIGMgKyBrKSwgMSAtIE1hdGgubWluKDEsIG0gKyBrKSwgMSAtIE1hdGgubWluKDEsIHkgKyBrKV07XG4gIH1cbiAgc3RhdGljIENNWUtfcmdiKFtjLCB5LCBtLCBrXSkge1xuICAgIHJldHVybiBbc2NhbGVBbmRDbGFtcCgxIC0gTWF0aC5taW4oMSwgYyArIGspKSwgc2NhbGVBbmRDbGFtcCgxIC0gTWF0aC5taW4oMSwgbSArIGspKSwgc2NhbGVBbmRDbGFtcCgxIC0gTWF0aC5taW4oMSwgeSArIGspKV07XG4gIH1cbiAgc3RhdGljIENNWUtfSFRNTChjb21wb25lbnRzKSB7XG4gICAgY29uc3QgcmdiID0gdGhpcy5DTVlLX1JHQihjb21wb25lbnRzKS5zbGljZSgxKTtcbiAgICByZXR1cm4gdGhpcy5SR0JfSFRNTChyZ2IpO1xuICB9XG4gIHN0YXRpYyBSR0JfQ01ZSyhbciwgZywgYl0pIHtcbiAgICBjb25zdCBjID0gMSAtIHI7XG4gICAgY29uc3QgbSA9IDEgLSBnO1xuICAgIGNvbnN0IHkgPSAxIC0gYjtcbiAgICBjb25zdCBrID0gTWF0aC5taW4oYywgbSwgeSk7XG4gICAgcmV0dXJuIFtcIkNNWUtcIiwgYywgbSwgeSwga107XG4gIH1cbn1cblxuLy8gRVhURVJOQUwgTU9EVUxFOiAuL3NyYy9kaXNwbGF5L3hmYV9sYXllci5qc1xudmFyIHhmYV9sYXllciA9IF9fd2VicGFja19yZXF1aXJlX18oMTYwKTtcbjsvLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9kaXNwbGF5L2Fubm90YXRpb25fbGF5ZXIuanNcblxuXG5cblxuXG5jb25zdCBERUZBVUxUX1RBQl9JTkRFWCA9IDEwMDA7XG5jb25zdCBERUZBVUxUX0ZPTlRfU0laRSA9IDk7XG5jb25zdCBHZXRFbGVtZW50c0J5TmFtZVNldCA9IG5ldyBXZWFrU2V0KCk7XG5mdW5jdGlvbiBnZXRSZWN0RGltcyhyZWN0KSB7XG4gIHJldHVybiB7XG4gICAgd2lkdGg6IHJlY3RbMl0gLSByZWN0WzBdLFxuICAgIGhlaWdodDogcmVjdFszXSAtIHJlY3RbMV1cbiAgfTtcbn1cbmNsYXNzIEFubm90YXRpb25FbGVtZW50RmFjdG9yeSB7XG4gIHN0YXRpYyBjcmVhdGUocGFyYW1ldGVycykge1xuICAgIGNvbnN0IHN1YnR5cGUgPSBwYXJhbWV0ZXJzLmRhdGEuYW5ub3RhdGlvblR5cGU7XG4gICAgc3dpdGNoIChzdWJ0eXBlKSB7XG4gICAgICBjYXNlIHV0aWwuQW5ub3RhdGlvblR5cGUuTElOSzpcbiAgICAgICAgcmV0dXJuIG5ldyBMaW5rQW5ub3RhdGlvbkVsZW1lbnQocGFyYW1ldGVycyk7XG4gICAgICBjYXNlIHV0aWwuQW5ub3RhdGlvblR5cGUuVEVYVDpcbiAgICAgICAgcmV0dXJuIG5ldyBUZXh0QW5ub3RhdGlvbkVsZW1lbnQocGFyYW1ldGVycyk7XG4gICAgICBjYXNlIHV0aWwuQW5ub3RhdGlvblR5cGUuV0lER0VUOlxuICAgICAgICBjb25zdCBmaWVsZFR5cGUgPSBwYXJhbWV0ZXJzLmRhdGEuZmllbGRUeXBlO1xuICAgICAgICBzd2l0Y2ggKGZpZWxkVHlwZSkge1xuICAgICAgICAgIGNhc2UgXCJUeFwiOlxuICAgICAgICAgICAgcmV0dXJuIG5ldyBUZXh0V2lkZ2V0QW5ub3RhdGlvbkVsZW1lbnQocGFyYW1ldGVycyk7XG4gICAgICAgICAgY2FzZSBcIkJ0blwiOlxuICAgICAgICAgICAgaWYgKHBhcmFtZXRlcnMuZGF0YS5yYWRpb0J1dHRvbikge1xuICAgICAgICAgICAgICByZXR1cm4gbmV3IFJhZGlvQnV0dG9uV2lkZ2V0QW5ub3RhdGlvbkVsZW1lbnQocGFyYW1ldGVycyk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHBhcmFtZXRlcnMuZGF0YS5jaGVja0JveCkge1xuICAgICAgICAgICAgICByZXR1cm4gbmV3IENoZWNrYm94V2lkZ2V0QW5ub3RhdGlvbkVsZW1lbnQocGFyYW1ldGVycyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbmV3IFB1c2hCdXR0b25XaWRnZXRBbm5vdGF0aW9uRWxlbWVudChwYXJhbWV0ZXJzKTtcbiAgICAgICAgICBjYXNlIFwiQ2hcIjpcbiAgICAgICAgICAgIHJldHVybiBuZXcgQ2hvaWNlV2lkZ2V0QW5ub3RhdGlvbkVsZW1lbnQocGFyYW1ldGVycyk7XG4gICAgICAgICAgY2FzZSBcIlNpZ1wiOlxuICAgICAgICAgICAgcmV0dXJuIG5ldyBTaWduYXR1cmVXaWRnZXRBbm5vdGF0aW9uRWxlbWVudChwYXJhbWV0ZXJzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IFdpZGdldEFubm90YXRpb25FbGVtZW50KHBhcmFtZXRlcnMpO1xuICAgICAgY2FzZSB1dGlsLkFubm90YXRpb25UeXBlLlBPUFVQOlxuICAgICAgICByZXR1cm4gbmV3IFBvcHVwQW5ub3RhdGlvbkVsZW1lbnQocGFyYW1ldGVycyk7XG4gICAgICBjYXNlIHV0aWwuQW5ub3RhdGlvblR5cGUuRlJFRVRFWFQ6XG4gICAgICAgIHJldHVybiBuZXcgRnJlZVRleHRBbm5vdGF0aW9uRWxlbWVudChwYXJhbWV0ZXJzKTtcbiAgICAgIGNhc2UgdXRpbC5Bbm5vdGF0aW9uVHlwZS5MSU5FOlxuICAgICAgICByZXR1cm4gbmV3IExpbmVBbm5vdGF0aW9uRWxlbWVudChwYXJhbWV0ZXJzKTtcbiAgICAgIGNhc2UgdXRpbC5Bbm5vdGF0aW9uVHlwZS5TUVVBUkU6XG4gICAgICAgIHJldHVybiBuZXcgU3F1YXJlQW5ub3RhdGlvbkVsZW1lbnQocGFyYW1ldGVycyk7XG4gICAgICBjYXNlIHV0aWwuQW5ub3RhdGlvblR5cGUuQ0lSQ0xFOlxuICAgICAgICByZXR1cm4gbmV3IENpcmNsZUFubm90YXRpb25FbGVtZW50KHBhcmFtZXRlcnMpO1xuICAgICAgY2FzZSB1dGlsLkFubm90YXRpb25UeXBlLlBPTFlMSU5FOlxuICAgICAgICByZXR1cm4gbmV3IFBvbHlsaW5lQW5ub3RhdGlvbkVsZW1lbnQocGFyYW1ldGVycyk7XG4gICAgICBjYXNlIHV0aWwuQW5ub3RhdGlvblR5cGUuQ0FSRVQ6XG4gICAgICAgIHJldHVybiBuZXcgQ2FyZXRBbm5vdGF0aW9uRWxlbWVudChwYXJhbWV0ZXJzKTtcbiAgICAgIGNhc2UgdXRpbC5Bbm5vdGF0aW9uVHlwZS5JTks6XG4gICAgICAgIHJldHVybiBuZXcgSW5rQW5ub3RhdGlvbkVsZW1lbnQocGFyYW1ldGVycyk7XG4gICAgICBjYXNlIHV0aWwuQW5ub3RhdGlvblR5cGUuUE9MWUdPTjpcbiAgICAgICAgcmV0dXJuIG5ldyBQb2x5Z29uQW5ub3RhdGlvbkVsZW1lbnQocGFyYW1ldGVycyk7XG4gICAgICBjYXNlIHV0aWwuQW5ub3RhdGlvblR5cGUuSElHSExJR0hUOlxuICAgICAgICByZXR1cm4gbmV3IEhpZ2hsaWdodEFubm90YXRpb25FbGVtZW50KHBhcmFtZXRlcnMpO1xuICAgICAgY2FzZSB1dGlsLkFubm90YXRpb25UeXBlLlVOREVSTElORTpcbiAgICAgICAgcmV0dXJuIG5ldyBVbmRlcmxpbmVBbm5vdGF0aW9uRWxlbWVudChwYXJhbWV0ZXJzKTtcbiAgICAgIGNhc2UgdXRpbC5Bbm5vdGF0aW9uVHlwZS5TUVVJR0dMWTpcbiAgICAgICAgcmV0dXJuIG5ldyBTcXVpZ2dseUFubm90YXRpb25FbGVtZW50KHBhcmFtZXRlcnMpO1xuICAgICAgY2FzZSB1dGlsLkFubm90YXRpb25UeXBlLlNUUklLRU9VVDpcbiAgICAgICAgcmV0dXJuIG5ldyBTdHJpa2VPdXRBbm5vdGF0aW9uRWxlbWVudChwYXJhbWV0ZXJzKTtcbiAgICAgIGNhc2UgdXRpbC5Bbm5vdGF0aW9uVHlwZS5TVEFNUDpcbiAgICAgICAgcmV0dXJuIG5ldyBTdGFtcEFubm90YXRpb25FbGVtZW50KHBhcmFtZXRlcnMpO1xuICAgICAgY2FzZSB1dGlsLkFubm90YXRpb25UeXBlLkZJTEVBVFRBQ0hNRU5UOlxuICAgICAgICByZXR1cm4gbmV3IEZpbGVBdHRhY2htZW50QW5ub3RhdGlvbkVsZW1lbnQocGFyYW1ldGVycyk7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbmV3IEFubm90YXRpb25FbGVtZW50KHBhcmFtZXRlcnMpO1xuICAgIH1cbiAgfVxufVxuY2xhc3MgQW5ub3RhdGlvbkVsZW1lbnQge1xuICAjaGFzQm9yZGVyID0gZmFsc2U7XG4gIGNvbnN0cnVjdG9yKHBhcmFtZXRlcnMsIHtcbiAgICBpc1JlbmRlcmFibGUgPSBmYWxzZSxcbiAgICBpZ25vcmVCb3JkZXIgPSBmYWxzZSxcbiAgICBjcmVhdGVRdWFkcmlsYXRlcmFscyA9IGZhbHNlXG4gIH0gPSB7fSkge1xuICAgIHRoaXMuaXNSZW5kZXJhYmxlID0gaXNSZW5kZXJhYmxlO1xuICAgIHRoaXMuZGF0YSA9IHBhcmFtZXRlcnMuZGF0YTtcbiAgICB0aGlzLmxheWVyID0gcGFyYW1ldGVycy5sYXllcjtcbiAgICB0aGlzLmxpbmtTZXJ2aWNlID0gcGFyYW1ldGVycy5saW5rU2VydmljZTtcbiAgICB0aGlzLmRvd25sb2FkTWFuYWdlciA9IHBhcmFtZXRlcnMuZG93bmxvYWRNYW5hZ2VyO1xuICAgIHRoaXMuaW1hZ2VSZXNvdXJjZXNQYXRoID0gcGFyYW1ldGVycy5pbWFnZVJlc291cmNlc1BhdGg7XG4gICAgdGhpcy5yZW5kZXJGb3JtcyA9IHBhcmFtZXRlcnMucmVuZGVyRm9ybXM7XG4gICAgdGhpcy5zdmdGYWN0b3J5ID0gcGFyYW1ldGVycy5zdmdGYWN0b3J5O1xuICAgIHRoaXMuYW5ub3RhdGlvblN0b3JhZ2UgPSBwYXJhbWV0ZXJzLmFubm90YXRpb25TdG9yYWdlO1xuICAgIHRoaXMuZW5hYmxlU2NyaXB0aW5nID0gcGFyYW1ldGVycy5lbmFibGVTY3JpcHRpbmc7XG4gICAgdGhpcy5oYXNKU0FjdGlvbnMgPSBwYXJhbWV0ZXJzLmhhc0pTQWN0aW9ucztcbiAgICB0aGlzLl9maWVsZE9iamVjdHMgPSBwYXJhbWV0ZXJzLmZpZWxkT2JqZWN0cztcbiAgICB0aGlzLnBhcmVudCA9IHBhcmFtZXRlcnMucGFyZW50O1xuICAgIGlmIChpc1JlbmRlcmFibGUpIHtcbiAgICAgIHRoaXMuY29udGFpbmVyID0gdGhpcy5fY3JlYXRlQ29udGFpbmVyKGlnbm9yZUJvcmRlcik7XG4gICAgfVxuICAgIGlmIChjcmVhdGVRdWFkcmlsYXRlcmFscykge1xuICAgICAgdGhpcy5fY3JlYXRlUXVhZHJpbGF0ZXJhbHMoKTtcbiAgICB9XG4gIH1cbiAgc3RhdGljIF9oYXNQb3B1cERhdGEoe1xuICAgIHRpdGxlT2JqLFxuICAgIGNvbnRlbnRzT2JqLFxuICAgIHJpY2hUZXh0XG4gIH0pIHtcbiAgICByZXR1cm4gISEodGl0bGVPYmo/LnN0ciB8fCBjb250ZW50c09iaj8uc3RyIHx8IHJpY2hUZXh0Py5zdHIpO1xuICB9XG4gIGdldCBoYXNQb3B1cERhdGEoKSB7XG4gICAgcmV0dXJuIEFubm90YXRpb25FbGVtZW50Ll9oYXNQb3B1cERhdGEodGhpcy5kYXRhKTtcbiAgfVxuICBfY3JlYXRlQ29udGFpbmVyKGlnbm9yZUJvcmRlcikge1xuICAgIGNvbnN0IHtcbiAgICAgIGRhdGEsXG4gICAgICBwYXJlbnQ6IHtcbiAgICAgICAgcGFnZSxcbiAgICAgICAgdmlld3BvcnRcbiAgICAgIH1cbiAgICB9ID0gdGhpcztcbiAgICBjb25zdCBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic2VjdGlvblwiKTtcbiAgICBjb250YWluZXIuc2V0QXR0cmlidXRlKFwiZGF0YS1hbm5vdGF0aW9uLWlkXCIsIGRhdGEuaWQpO1xuICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBXaWRnZXRBbm5vdGF0aW9uRWxlbWVudCkpIHtcbiAgICAgIGNvbnRhaW5lci50YWJJbmRleCA9IERFRkFVTFRfVEFCX0lOREVYO1xuICAgIH1cbiAgICBjb250YWluZXIuc3R5bGUuekluZGV4ID0gdGhpcy5wYXJlbnQuekluZGV4Kys7XG4gICAgaWYgKHRoaXMuZGF0YS5wb3B1cFJlZikge1xuICAgICAgY29udGFpbmVyLnNldEF0dHJpYnV0ZShcImFyaWEtaGFzcG9wdXBcIiwgXCJkaWFsb2dcIik7XG4gICAgfVxuICAgIGlmIChkYXRhLm5vUm90YXRlKSB7XG4gICAgICBjb250YWluZXIuY2xhc3NMaXN0LmFkZChcIm5vcm90YXRlXCIpO1xuICAgIH1cbiAgICBjb25zdCB7XG4gICAgICBwYWdlV2lkdGgsXG4gICAgICBwYWdlSGVpZ2h0LFxuICAgICAgcGFnZVgsXG4gICAgICBwYWdlWVxuICAgIH0gPSB2aWV3cG9ydC5yYXdEaW1zO1xuICAgIGlmICghZGF0YS5yZWN0IHx8IHRoaXMgaW5zdGFuY2VvZiBQb3B1cEFubm90YXRpb25FbGVtZW50KSB7XG4gICAgICBjb25zdCB7XG4gICAgICAgIHJvdGF0aW9uXG4gICAgICB9ID0gZGF0YTtcbiAgICAgIGlmICghZGF0YS5oYXNPd25DYW52YXMgJiYgcm90YXRpb24gIT09IDApIHtcbiAgICAgICAgdGhpcy5zZXRSb3RhdGlvbihyb3RhdGlvbiwgY29udGFpbmVyKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjb250YWluZXI7XG4gICAgfVxuICAgIGNvbnN0IHtcbiAgICAgIHdpZHRoLFxuICAgICAgaGVpZ2h0XG4gICAgfSA9IGdldFJlY3REaW1zKGRhdGEucmVjdCk7XG4gICAgY29uc3QgcmVjdCA9IHV0aWwuVXRpbC5ub3JtYWxpemVSZWN0KFtkYXRhLnJlY3RbMF0sIHBhZ2Uudmlld1szXSAtIGRhdGEucmVjdFsxXSArIHBhZ2Uudmlld1sxXSwgZGF0YS5yZWN0WzJdLCBwYWdlLnZpZXdbM10gLSBkYXRhLnJlY3RbM10gKyBwYWdlLnZpZXdbMV1dKTtcbiAgICBpZiAoIWlnbm9yZUJvcmRlciAmJiBkYXRhLmJvcmRlclN0eWxlLndpZHRoID4gMCkge1xuICAgICAgY29udGFpbmVyLnN0eWxlLmJvcmRlcldpZHRoID0gYCR7ZGF0YS5ib3JkZXJTdHlsZS53aWR0aH1weGA7XG4gICAgICBjb25zdCBob3Jpem9udGFsUmFkaXVzID0gZGF0YS5ib3JkZXJTdHlsZS5ob3Jpem9udGFsQ29ybmVyUmFkaXVzO1xuICAgICAgY29uc3QgdmVydGljYWxSYWRpdXMgPSBkYXRhLmJvcmRlclN0eWxlLnZlcnRpY2FsQ29ybmVyUmFkaXVzO1xuICAgICAgaWYgKGhvcml6b250YWxSYWRpdXMgPiAwIHx8IHZlcnRpY2FsUmFkaXVzID4gMCkge1xuICAgICAgICBjb25zdCByYWRpdXMgPSBgY2FsYygke2hvcml6b250YWxSYWRpdXN9cHggKiB2YXIoLS1zY2FsZS1mYWN0b3IpKSAvIGNhbGMoJHt2ZXJ0aWNhbFJhZGl1c31weCAqIHZhcigtLXNjYWxlLWZhY3RvcikpYDtcbiAgICAgICAgY29udGFpbmVyLnN0eWxlLmJvcmRlclJhZGl1cyA9IHJhZGl1cztcbiAgICAgIH0gZWxzZSBpZiAodGhpcyBpbnN0YW5jZW9mIFJhZGlvQnV0dG9uV2lkZ2V0QW5ub3RhdGlvbkVsZW1lbnQpIHtcbiAgICAgICAgY29uc3QgcmFkaXVzID0gYGNhbGMoJHt3aWR0aH1weCAqIHZhcigtLXNjYWxlLWZhY3RvcikpIC8gY2FsYygke2hlaWdodH1weCAqIHZhcigtLXNjYWxlLWZhY3RvcikpYDtcbiAgICAgICAgY29udGFpbmVyLnN0eWxlLmJvcmRlclJhZGl1cyA9IHJhZGl1cztcbiAgICAgIH1cbiAgICAgIHN3aXRjaCAoZGF0YS5ib3JkZXJTdHlsZS5zdHlsZSkge1xuICAgICAgICBjYXNlIHV0aWwuQW5ub3RhdGlvbkJvcmRlclN0eWxlVHlwZS5TT0xJRDpcbiAgICAgICAgICBjb250YWluZXIuc3R5bGUuYm9yZGVyU3R5bGUgPSBcInNvbGlkXCI7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgdXRpbC5Bbm5vdGF0aW9uQm9yZGVyU3R5bGVUeXBlLkRBU0hFRDpcbiAgICAgICAgICBjb250YWluZXIuc3R5bGUuYm9yZGVyU3R5bGUgPSBcImRhc2hlZFwiO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIHV0aWwuQW5ub3RhdGlvbkJvcmRlclN0eWxlVHlwZS5CRVZFTEVEOlxuICAgICAgICAgICgwLHV0aWwud2FybikoXCJVbmltcGxlbWVudGVkIGJvcmRlciBzdHlsZTogYmV2ZWxlZFwiKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSB1dGlsLkFubm90YXRpb25Cb3JkZXJTdHlsZVR5cGUuSU5TRVQ6XG4gICAgICAgICAgKDAsdXRpbC53YXJuKShcIlVuaW1wbGVtZW50ZWQgYm9yZGVyIHN0eWxlOiBpbnNldFwiKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSB1dGlsLkFubm90YXRpb25Cb3JkZXJTdHlsZVR5cGUuVU5ERVJMSU5FOlxuICAgICAgICAgIGNvbnRhaW5lci5zdHlsZS5ib3JkZXJCb3R0b21TdHlsZSA9IFwic29saWRcIjtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNvbnN0IGJvcmRlckNvbG9yID0gZGF0YS5ib3JkZXJDb2xvciB8fCBudWxsO1xuICAgICAgaWYgKGJvcmRlckNvbG9yKSB7XG4gICAgICAgIHRoaXMuI2hhc0JvcmRlciA9IHRydWU7XG4gICAgICAgIGNvbnRhaW5lci5zdHlsZS5ib3JkZXJDb2xvciA9IHV0aWwuVXRpbC5tYWtlSGV4Q29sb3IoYm9yZGVyQ29sb3JbMF0gfCAwLCBib3JkZXJDb2xvclsxXSB8IDAsIGJvcmRlckNvbG9yWzJdIHwgMCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb250YWluZXIuc3R5bGUuYm9yZGVyV2lkdGggPSAwO1xuICAgICAgfVxuICAgIH1cbiAgICBjb250YWluZXIuc3R5bGUubGVmdCA9IGAkezEwMCAqIChyZWN0WzBdIC0gcGFnZVgpIC8gcGFnZVdpZHRofSVgO1xuICAgIGNvbnRhaW5lci5zdHlsZS50b3AgPSBgJHsxMDAgKiAocmVjdFsxXSAtIHBhZ2VZKSAvIHBhZ2VIZWlnaHR9JWA7XG4gICAgY29uc3Qge1xuICAgICAgcm90YXRpb25cbiAgICB9ID0gZGF0YTtcbiAgICBpZiAoZGF0YS5oYXNPd25DYW52YXMgfHwgcm90YXRpb24gPT09IDApIHtcbiAgICAgIGNvbnRhaW5lci5zdHlsZS53aWR0aCA9IGAkezEwMCAqIHdpZHRoIC8gcGFnZVdpZHRofSVgO1xuICAgICAgY29udGFpbmVyLnN0eWxlLmhlaWdodCA9IGAkezEwMCAqIGhlaWdodCAvIHBhZ2VIZWlnaHR9JWA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2V0Um90YXRpb24ocm90YXRpb24sIGNvbnRhaW5lcik7XG4gICAgfVxuICAgIHJldHVybiBjb250YWluZXI7XG4gIH1cbiAgc2V0Um90YXRpb24oYW5nbGUsIGNvbnRhaW5lciA9IHRoaXMuY29udGFpbmVyKSB7XG4gICAgaWYgKCF0aGlzLmRhdGEucmVjdCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCB7XG4gICAgICBwYWdlV2lkdGgsXG4gICAgICBwYWdlSGVpZ2h0XG4gICAgfSA9IHRoaXMucGFyZW50LnZpZXdwb3J0LnJhd0RpbXM7XG4gICAgY29uc3Qge1xuICAgICAgd2lkdGgsXG4gICAgICBoZWlnaHRcbiAgICB9ID0gZ2V0UmVjdERpbXModGhpcy5kYXRhLnJlY3QpO1xuICAgIGxldCBlbGVtZW50V2lkdGgsIGVsZW1lbnRIZWlnaHQ7XG4gICAgaWYgKGFuZ2xlICUgMTgwID09PSAwKSB7XG4gICAgICBlbGVtZW50V2lkdGggPSAxMDAgKiB3aWR0aCAvIHBhZ2VXaWR0aDtcbiAgICAgIGVsZW1lbnRIZWlnaHQgPSAxMDAgKiBoZWlnaHQgLyBwYWdlSGVpZ2h0O1xuICAgIH0gZWxzZSB7XG4gICAgICBlbGVtZW50V2lkdGggPSAxMDAgKiBoZWlnaHQgLyBwYWdlV2lkdGg7XG4gICAgICBlbGVtZW50SGVpZ2h0ID0gMTAwICogd2lkdGggLyBwYWdlSGVpZ2h0O1xuICAgIH1cbiAgICBjb250YWluZXIuc3R5bGUud2lkdGggPSBgJHtlbGVtZW50V2lkdGh9JWA7XG4gICAgY29udGFpbmVyLnN0eWxlLmhlaWdodCA9IGAke2VsZW1lbnRIZWlnaHR9JWA7XG4gICAgY29udGFpbmVyLnNldEF0dHJpYnV0ZShcImRhdGEtbWFpbi1yb3RhdGlvblwiLCAoMzYwIC0gYW5nbGUpICUgMzYwKTtcbiAgfVxuICBnZXQgX2NvbW1vbkFjdGlvbnMoKSB7XG4gICAgY29uc3Qgc2V0Q29sb3IgPSAoanNOYW1lLCBzdHlsZU5hbWUsIGV2ZW50KSA9PiB7XG4gICAgICBjb25zdCBjb2xvciA9IGV2ZW50LmRldGFpbFtqc05hbWVdO1xuICAgICAgY29uc3QgY29sb3JUeXBlID0gY29sb3JbMF07XG4gICAgICBjb25zdCBjb2xvckFycmF5ID0gY29sb3Iuc2xpY2UoMSk7XG4gICAgICBldmVudC50YXJnZXQuc3R5bGVbc3R5bGVOYW1lXSA9IENvbG9yQ29udmVydGVyc1tgJHtjb2xvclR5cGV9X0hUTUxgXShjb2xvckFycmF5KTtcbiAgICAgIHRoaXMuYW5ub3RhdGlvblN0b3JhZ2Uuc2V0VmFsdWUodGhpcy5kYXRhLmlkLCB7XG4gICAgICAgIFtzdHlsZU5hbWVdOiBDb2xvckNvbnZlcnRlcnNbYCR7Y29sb3JUeXBlfV9yZ2JgXShjb2xvckFycmF5KVxuICAgICAgfSk7XG4gICAgfTtcbiAgICByZXR1cm4gKDAsdXRpbC5zaGFkb3cpKHRoaXMsIFwiX2NvbW1vbkFjdGlvbnNcIiwge1xuICAgICAgZGlzcGxheTogZXZlbnQgPT4ge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgZGlzcGxheVxuICAgICAgICB9ID0gZXZlbnQuZGV0YWlsO1xuICAgICAgICBjb25zdCBoaWRkZW4gPSBkaXNwbGF5ICUgMiA9PT0gMTtcbiAgICAgICAgdGhpcy5jb250YWluZXIuc3R5bGUudmlzaWJpbGl0eSA9IGhpZGRlbiA/IFwiaGlkZGVuXCIgOiBcInZpc2libGVcIjtcbiAgICAgICAgdGhpcy5hbm5vdGF0aW9uU3RvcmFnZS5zZXRWYWx1ZSh0aGlzLmRhdGEuaWQsIHtcbiAgICAgICAgICBub1ZpZXc6IGhpZGRlbixcbiAgICAgICAgICBub1ByaW50OiBkaXNwbGF5ID09PSAxIHx8IGRpc3BsYXkgPT09IDJcbiAgICAgICAgfSk7XG4gICAgICB9LFxuICAgICAgcHJpbnQ6IGV2ZW50ID0+IHtcbiAgICAgICAgdGhpcy5hbm5vdGF0aW9uU3RvcmFnZS5zZXRWYWx1ZSh0aGlzLmRhdGEuaWQsIHtcbiAgICAgICAgICBub1ByaW50OiAhZXZlbnQuZGV0YWlsLnByaW50XG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICAgIGhpZGRlbjogZXZlbnQgPT4ge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgaGlkZGVuXG4gICAgICAgIH0gPSBldmVudC5kZXRhaWw7XG4gICAgICAgIHRoaXMuY29udGFpbmVyLnN0eWxlLnZpc2liaWxpdHkgPSBoaWRkZW4gPyBcImhpZGRlblwiIDogXCJ2aXNpYmxlXCI7XG4gICAgICAgIHRoaXMuYW5ub3RhdGlvblN0b3JhZ2Uuc2V0VmFsdWUodGhpcy5kYXRhLmlkLCB7XG4gICAgICAgICAgbm9QcmludDogaGlkZGVuLFxuICAgICAgICAgIG5vVmlldzogaGlkZGVuXG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICAgIGZvY3VzOiBldmVudCA9PiB7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4gZXZlbnQudGFyZ2V0LmZvY3VzKHtcbiAgICAgICAgICBwcmV2ZW50U2Nyb2xsOiBmYWxzZVxuICAgICAgICB9KSwgMCk7XG4gICAgICB9LFxuICAgICAgdXNlck5hbWU6IGV2ZW50ID0+IHtcbiAgICAgICAgZXZlbnQudGFyZ2V0LnRpdGxlID0gZXZlbnQuZGV0YWlsLnVzZXJOYW1lO1xuICAgICAgfSxcbiAgICAgIHJlYWRvbmx5OiBldmVudCA9PiB7XG4gICAgICAgIGV2ZW50LnRhcmdldC5kaXNhYmxlZCA9IGV2ZW50LmRldGFpbC5yZWFkb25seTtcbiAgICAgIH0sXG4gICAgICByZXF1aXJlZDogZXZlbnQgPT4ge1xuICAgICAgICB0aGlzLl9zZXRSZXF1aXJlZChldmVudC50YXJnZXQsIGV2ZW50LmRldGFpbC5yZXF1aXJlZCk7XG4gICAgICB9LFxuICAgICAgYmdDb2xvcjogZXZlbnQgPT4ge1xuICAgICAgICBzZXRDb2xvcihcImJnQ29sb3JcIiwgXCJiYWNrZ3JvdW5kQ29sb3JcIiwgZXZlbnQpO1xuICAgICAgfSxcbiAgICAgIGZpbGxDb2xvcjogZXZlbnQgPT4ge1xuICAgICAgICBzZXRDb2xvcihcImZpbGxDb2xvclwiLCBcImJhY2tncm91bmRDb2xvclwiLCBldmVudCk7XG4gICAgICB9LFxuICAgICAgZmdDb2xvcjogZXZlbnQgPT4ge1xuICAgICAgICBzZXRDb2xvcihcImZnQ29sb3JcIiwgXCJjb2xvclwiLCBldmVudCk7XG4gICAgICB9LFxuICAgICAgdGV4dENvbG9yOiBldmVudCA9PiB7XG4gICAgICAgIHNldENvbG9yKFwidGV4dENvbG9yXCIsIFwiY29sb3JcIiwgZXZlbnQpO1xuICAgICAgfSxcbiAgICAgIGJvcmRlckNvbG9yOiBldmVudCA9PiB7XG4gICAgICAgIHNldENvbG9yKFwiYm9yZGVyQ29sb3JcIiwgXCJib3JkZXJDb2xvclwiLCBldmVudCk7XG4gICAgICB9LFxuICAgICAgc3Ryb2tlQ29sb3I6IGV2ZW50ID0+IHtcbiAgICAgICAgc2V0Q29sb3IoXCJzdHJva2VDb2xvclwiLCBcImJvcmRlckNvbG9yXCIsIGV2ZW50KTtcbiAgICAgIH0sXG4gICAgICByb3RhdGlvbjogZXZlbnQgPT4ge1xuICAgICAgICBjb25zdCBhbmdsZSA9IGV2ZW50LmRldGFpbC5yb3RhdGlvbjtcbiAgICAgICAgdGhpcy5zZXRSb3RhdGlvbihhbmdsZSk7XG4gICAgICAgIHRoaXMuYW5ub3RhdGlvblN0b3JhZ2Uuc2V0VmFsdWUodGhpcy5kYXRhLmlkLCB7XG4gICAgICAgICAgcm90YXRpb246IGFuZ2xlXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIF9kaXNwYXRjaEV2ZW50RnJvbVNhbmRib3goYWN0aW9ucywganNFdmVudCkge1xuICAgIGNvbnN0IGNvbW1vbkFjdGlvbnMgPSB0aGlzLl9jb21tb25BY3Rpb25zO1xuICAgIGZvciAoY29uc3QgbmFtZSBvZiBPYmplY3Qua2V5cyhqc0V2ZW50LmRldGFpbCkpIHtcbiAgICAgIGNvbnN0IGFjdGlvbiA9IGFjdGlvbnNbbmFtZV0gfHwgY29tbW9uQWN0aW9uc1tuYW1lXTtcbiAgICAgIGFjdGlvbj8uKGpzRXZlbnQpO1xuICAgIH1cbiAgfVxuICBfc2V0RGVmYXVsdFByb3BlcnRpZXNGcm9tSlMoZWxlbWVudCkge1xuICAgIGlmICghdGhpcy5lbmFibGVTY3JpcHRpbmcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3Qgc3RvcmVkRGF0YSA9IHRoaXMuYW5ub3RhdGlvblN0b3JhZ2UuZ2V0UmF3VmFsdWUodGhpcy5kYXRhLmlkKTtcbiAgICBpZiAoIXN0b3JlZERhdGEpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgY29tbW9uQWN0aW9ucyA9IHRoaXMuX2NvbW1vbkFjdGlvbnM7XG4gICAgZm9yIChjb25zdCBbYWN0aW9uTmFtZSwgZGV0YWlsXSBvZiBPYmplY3QuZW50cmllcyhzdG9yZWREYXRhKSkge1xuICAgICAgY29uc3QgYWN0aW9uID0gY29tbW9uQWN0aW9uc1thY3Rpb25OYW1lXTtcbiAgICAgIGlmIChhY3Rpb24pIHtcbiAgICAgICAgY29uc3QgZXZlbnRQcm94eSA9IHtcbiAgICAgICAgICBkZXRhaWw6IHtcbiAgICAgICAgICAgIFthY3Rpb25OYW1lXTogZGV0YWlsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB0YXJnZXQ6IGVsZW1lbnRcbiAgICAgICAgfTtcbiAgICAgICAgYWN0aW9uKGV2ZW50UHJveHkpO1xuICAgICAgICBkZWxldGUgc3RvcmVkRGF0YVthY3Rpb25OYW1lXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgX2NyZWF0ZVF1YWRyaWxhdGVyYWxzKCkge1xuICAgIGlmICghdGhpcy5jb250YWluZXIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3Qge1xuICAgICAgcXVhZFBvaW50c1xuICAgIH0gPSB0aGlzLmRhdGE7XG4gICAgaWYgKCFxdWFkUG9pbnRzKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IFtyZWN0QmxYLCByZWN0QmxZLCByZWN0VHJYLCByZWN0VHJZXSA9IHRoaXMuZGF0YS5yZWN0O1xuICAgIGlmIChxdWFkUG9pbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgY29uc3QgWywge1xuICAgICAgICB4OiB0clgsXG4gICAgICAgIHk6IHRyWVxuICAgICAgfSwge1xuICAgICAgICB4OiBibFgsXG4gICAgICAgIHk6IGJsWVxuICAgICAgfV0gPSBxdWFkUG9pbnRzWzBdO1xuICAgICAgaWYgKHJlY3RUclggPT09IHRyWCAmJiByZWN0VHJZID09PSB0clkgJiYgcmVjdEJsWCA9PT0gYmxYICYmIHJlY3RCbFkgPT09IGJsWSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IHtcbiAgICAgIHN0eWxlXG4gICAgfSA9IHRoaXMuY29udGFpbmVyO1xuICAgIGxldCBzdmdCdWZmZXI7XG4gICAgaWYgKHRoaXMuI2hhc0JvcmRlcikge1xuICAgICAgY29uc3Qge1xuICAgICAgICBib3JkZXJDb2xvcixcbiAgICAgICAgYm9yZGVyV2lkdGhcbiAgICAgIH0gPSBzdHlsZTtcbiAgICAgIHN0eWxlLmJvcmRlcldpZHRoID0gMDtcbiAgICAgIHN2Z0J1ZmZlciA9IFtcInVybCgnZGF0YTppbWFnZS9zdmcreG1sO3V0ZjgsXCIsIGA8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcImAsIGAgcHJlc2VydmVBc3BlY3RSYXRpbz1cIm5vbmVcIiB2aWV3Qm94PVwiMCAwIDEgMVwiPmAsIGA8ZyBmaWxsPVwidHJhbnNwYXJlbnRcIiBzdHJva2U9XCIke2JvcmRlckNvbG9yfVwiIHN0cm9rZS13aWR0aD1cIiR7Ym9yZGVyV2lkdGh9XCI+YF07XG4gICAgICB0aGlzLmNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKFwiaGFzQm9yZGVyXCIpO1xuICAgIH1cbiAgICBjb25zdCB3aWR0aCA9IHJlY3RUclggLSByZWN0QmxYO1xuICAgIGNvbnN0IGhlaWdodCA9IHJlY3RUclkgLSByZWN0QmxZO1xuICAgIGNvbnN0IHtcbiAgICAgIHN2Z0ZhY3RvcnlcbiAgICB9ID0gdGhpcztcbiAgICBjb25zdCBzdmcgPSBzdmdGYWN0b3J5LmNyZWF0ZUVsZW1lbnQoXCJzdmdcIik7XG4gICAgc3ZnLmNsYXNzTGlzdC5hZGQoXCJxdWFkcmlsYXRlcmFsc0NvbnRhaW5lclwiKTtcbiAgICBzdmcuc2V0QXR0cmlidXRlKFwid2lkdGhcIiwgMCk7XG4gICAgc3ZnLnNldEF0dHJpYnV0ZShcImhlaWdodFwiLCAwKTtcbiAgICBjb25zdCBkZWZzID0gc3ZnRmFjdG9yeS5jcmVhdGVFbGVtZW50KFwiZGVmc1wiKTtcbiAgICBzdmcuYXBwZW5kKGRlZnMpO1xuICAgIGNvbnN0IGNsaXBQYXRoID0gc3ZnRmFjdG9yeS5jcmVhdGVFbGVtZW50KFwiY2xpcFBhdGhcIik7XG4gICAgY29uc3QgaWQgPSBgY2xpcHBhdGhfJHt0aGlzLmRhdGEuaWR9YDtcbiAgICBjbGlwUGF0aC5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBpZCk7XG4gICAgY2xpcFBhdGguc2V0QXR0cmlidXRlKFwiY2xpcFBhdGhVbml0c1wiLCBcIm9iamVjdEJvdW5kaW5nQm94XCIpO1xuICAgIGRlZnMuYXBwZW5kKGNsaXBQYXRoKTtcbiAgICBmb3IgKGNvbnN0IFssIHtcbiAgICAgIHg6IHRyWCxcbiAgICAgIHk6IHRyWVxuICAgIH0sIHtcbiAgICAgIHg6IGJsWCxcbiAgICAgIHk6IGJsWVxuICAgIH1dIG9mIHF1YWRQb2ludHMpIHtcbiAgICAgIGNvbnN0IHJlY3QgPSBzdmdGYWN0b3J5LmNyZWF0ZUVsZW1lbnQoXCJyZWN0XCIpO1xuICAgICAgY29uc3QgeCA9IChibFggLSByZWN0QmxYKSAvIHdpZHRoO1xuICAgICAgY29uc3QgeSA9IChyZWN0VHJZIC0gdHJZKSAvIGhlaWdodDtcbiAgICAgIGNvbnN0IHJlY3RXaWR0aCA9ICh0clggLSBibFgpIC8gd2lkdGg7XG4gICAgICBjb25zdCByZWN0SGVpZ2h0ID0gKHRyWSAtIGJsWSkgLyBoZWlnaHQ7XG4gICAgICByZWN0LnNldEF0dHJpYnV0ZShcInhcIiwgeCk7XG4gICAgICByZWN0LnNldEF0dHJpYnV0ZShcInlcIiwgeSk7XG4gICAgICByZWN0LnNldEF0dHJpYnV0ZShcIndpZHRoXCIsIHJlY3RXaWR0aCk7XG4gICAgICByZWN0LnNldEF0dHJpYnV0ZShcImhlaWdodFwiLCByZWN0SGVpZ2h0KTtcbiAgICAgIGNsaXBQYXRoLmFwcGVuZChyZWN0KTtcbiAgICAgIHN2Z0J1ZmZlcj8ucHVzaChgPHJlY3QgdmVjdG9yLWVmZmVjdD1cIm5vbi1zY2FsaW5nLXN0cm9rZVwiIHg9XCIke3h9XCIgeT1cIiR7eX1cIiB3aWR0aD1cIiR7cmVjdFdpZHRofVwiIGhlaWdodD1cIiR7cmVjdEhlaWdodH1cIi8+YCk7XG4gICAgfVxuICAgIGlmICh0aGlzLiNoYXNCb3JkZXIpIHtcbiAgICAgIHN2Z0J1ZmZlci5wdXNoKGA8L2c+PC9zdmc+JylgKTtcbiAgICAgIHN0eWxlLmJhY2tncm91bmRJbWFnZSA9IHN2Z0J1ZmZlci5qb2luKFwiXCIpO1xuICAgIH1cbiAgICB0aGlzLmNvbnRhaW5lci5hcHBlbmQoc3ZnKTtcbiAgICB0aGlzLmNvbnRhaW5lci5zdHlsZS5jbGlwUGF0aCA9IGB1cmwoIyR7aWR9KWA7XG4gIH1cbiAgX2NyZWF0ZVBvcHVwKCkge1xuICAgIGNvbnN0IHtcbiAgICAgIGNvbnRhaW5lcixcbiAgICAgIGRhdGFcbiAgICB9ID0gdGhpcztcbiAgICBjb250YWluZXIuc2V0QXR0cmlidXRlKFwiYXJpYS1oYXNwb3B1cFwiLCBcImRpYWxvZ1wiKTtcbiAgICBjb25zdCBwb3B1cCA9IG5ldyBQb3B1cEFubm90YXRpb25FbGVtZW50KHtcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgY29sb3I6IGRhdGEuY29sb3IsXG4gICAgICAgIHRpdGxlT2JqOiBkYXRhLnRpdGxlT2JqLFxuICAgICAgICBtb2RpZmljYXRpb25EYXRlOiBkYXRhLm1vZGlmaWNhdGlvbkRhdGUsXG4gICAgICAgIGNvbnRlbnRzT2JqOiBkYXRhLmNvbnRlbnRzT2JqLFxuICAgICAgICByaWNoVGV4dDogZGF0YS5yaWNoVGV4dCxcbiAgICAgICAgcGFyZW50UmVjdDogZGF0YS5yZWN0LFxuICAgICAgICBib3JkZXJTdHlsZTogMCxcbiAgICAgICAgaWQ6IGBwb3B1cF8ke2RhdGEuaWR9YCxcbiAgICAgICAgcm90YXRpb246IGRhdGEucm90YXRpb25cbiAgICAgIH0sXG4gICAgICBwYXJlbnQ6IHRoaXMucGFyZW50LFxuICAgICAgZWxlbWVudHM6IFt0aGlzXVxuICAgIH0pO1xuICAgIHRoaXMucGFyZW50LmRpdi5hcHBlbmQocG9wdXAucmVuZGVyKCkpO1xuICB9XG4gIHJlbmRlcigpIHtcbiAgICAoMCx1dGlsLnVucmVhY2hhYmxlKShcIkFic3RyYWN0IG1ldGhvZCBgQW5ub3RhdGlvbkVsZW1lbnQucmVuZGVyYCBjYWxsZWRcIik7XG4gIH1cbiAgX2dldEVsZW1lbnRzQnlOYW1lKG5hbWUsIHNraXBJZCA9IG51bGwpIHtcbiAgICBjb25zdCBmaWVsZHMgPSBbXTtcbiAgICBpZiAodGhpcy5fZmllbGRPYmplY3RzKSB7XG4gICAgICBjb25zdCBmaWVsZE9iaiA9IHRoaXMuX2ZpZWxkT2JqZWN0c1tuYW1lXTtcbiAgICAgIGlmIChmaWVsZE9iaikge1xuICAgICAgICBmb3IgKGNvbnN0IHtcbiAgICAgICAgICBwYWdlLFxuICAgICAgICAgIGlkLFxuICAgICAgICAgIGV4cG9ydFZhbHVlc1xuICAgICAgICB9IG9mIGZpZWxkT2JqKSB7XG4gICAgICAgICAgaWYgKHBhZ2UgPT09IC0xKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGlkID09PSBza2lwSWQpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb25zdCBleHBvcnRWYWx1ZSA9IHR5cGVvZiBleHBvcnRWYWx1ZXMgPT09IFwic3RyaW5nXCIgPyBleHBvcnRWYWx1ZXMgOiBudWxsO1xuICAgICAgICAgIGNvbnN0IGRvbUVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGBbZGF0YS1lbGVtZW50LWlkPVwiJHtpZH1cIl1gKTtcbiAgICAgICAgICBpZiAoZG9tRWxlbWVudCAmJiAhR2V0RWxlbWVudHNCeU5hbWVTZXQuaGFzKGRvbUVsZW1lbnQpKSB7XG4gICAgICAgICAgICAoMCx1dGlsLndhcm4pKGBfZ2V0RWxlbWVudHNCeU5hbWUgLSBlbGVtZW50IG5vdCBhbGxvd2VkOiAke2lkfWApO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZpZWxkcy5wdXNoKHtcbiAgICAgICAgICAgIGlkLFxuICAgICAgICAgICAgZXhwb3J0VmFsdWUsXG4gICAgICAgICAgICBkb21FbGVtZW50XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBmaWVsZHM7XG4gICAgfVxuICAgIGZvciAoY29uc3QgZG9tRWxlbWVudCBvZiBkb2N1bWVudC5nZXRFbGVtZW50c0J5TmFtZShuYW1lKSkge1xuICAgICAgY29uc3Qge1xuICAgICAgICBleHBvcnRWYWx1ZVxuICAgICAgfSA9IGRvbUVsZW1lbnQ7XG4gICAgICBjb25zdCBpZCA9IGRvbUVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiZGF0YS1lbGVtZW50LWlkXCIpO1xuICAgICAgaWYgKGlkID09PSBza2lwSWQpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAoIUdldEVsZW1lbnRzQnlOYW1lU2V0Lmhhcyhkb21FbGVtZW50KSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGZpZWxkcy5wdXNoKHtcbiAgICAgICAgaWQsXG4gICAgICAgIGV4cG9ydFZhbHVlLFxuICAgICAgICBkb21FbGVtZW50XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGZpZWxkcztcbiAgfVxuICBzaG93KCkge1xuICAgIGlmICh0aGlzLmNvbnRhaW5lcikge1xuICAgICAgdGhpcy5jb250YWluZXIuaGlkZGVuID0gZmFsc2U7XG4gICAgfVxuICAgIHRoaXMucG9wdXA/Lm1heWJlU2hvdygpO1xuICB9XG4gIGhpZGUoKSB7XG4gICAgaWYgKHRoaXMuY29udGFpbmVyKSB7XG4gICAgICB0aGlzLmNvbnRhaW5lci5oaWRkZW4gPSB0cnVlO1xuICAgIH1cbiAgICB0aGlzLnBvcHVwPy5mb3JjZUhpZGUoKTtcbiAgfVxuICBnZXRFbGVtZW50c1RvVHJpZ2dlclBvcHVwKCkge1xuICAgIHJldHVybiB0aGlzLmNvbnRhaW5lcjtcbiAgfVxuICBhZGRIaWdobGlnaHRBcmVhKCkge1xuICAgIGNvbnN0IHRyaWdnZXJzID0gdGhpcy5nZXRFbGVtZW50c1RvVHJpZ2dlclBvcHVwKCk7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodHJpZ2dlcnMpKSB7XG4gICAgICBmb3IgKGNvbnN0IGVsZW1lbnQgb2YgdHJpZ2dlcnMpIHtcbiAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QuYWRkKFwiaGlnaGxpZ2h0QXJlYVwiKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdHJpZ2dlcnMuY2xhc3NMaXN0LmFkZChcImhpZ2hsaWdodEFyZWFcIik7XG4gICAgfVxuICB9XG4gIGdldCBfaXNFZGl0YWJsZSgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgX2VkaXRPbkRvdWJsZUNsaWNrKCkge1xuICAgIGlmICghdGhpcy5faXNFZGl0YWJsZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCB7XG4gICAgICBhbm5vdGF0aW9uRWRpdG9yVHlwZTogbW9kZSxcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgaWQ6IGVkaXRJZFxuICAgICAgfVxuICAgIH0gPSB0aGlzO1xuICAgIHRoaXMuY29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoXCJkYmxjbGlja1wiLCAoKSA9PiB7XG4gICAgICB0aGlzLmxpbmtTZXJ2aWNlLmV2ZW50QnVzPy5kaXNwYXRjaChcInN3aXRjaGFubm90YXRpb25lZGl0b3Jtb2RlXCIsIHtcbiAgICAgICAgc291cmNlOiB0aGlzLFxuICAgICAgICBtb2RlLFxuICAgICAgICBlZGl0SWRcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG59XG5jbGFzcyBMaW5rQW5ub3RhdGlvbkVsZW1lbnQgZXh0ZW5kcyBBbm5vdGF0aW9uRWxlbWVudCB7XG4gIGNvbnN0cnVjdG9yKHBhcmFtZXRlcnMsIG9wdGlvbnMgPSBudWxsKSB7XG4gICAgc3VwZXIocGFyYW1ldGVycywge1xuICAgICAgaXNSZW5kZXJhYmxlOiB0cnVlLFxuICAgICAgaWdub3JlQm9yZGVyOiAhIW9wdGlvbnM/Lmlnbm9yZUJvcmRlcixcbiAgICAgIGNyZWF0ZVF1YWRyaWxhdGVyYWxzOiB0cnVlXG4gICAgfSk7XG4gICAgdGhpcy5pc1Rvb2x0aXBPbmx5ID0gcGFyYW1ldGVycy5kYXRhLmlzVG9vbHRpcE9ubHk7XG4gIH1cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHtcbiAgICAgIGRhdGEsXG4gICAgICBsaW5rU2VydmljZVxuICAgIH0gPSB0aGlzO1xuICAgIGNvbnN0IGxpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYVwiKTtcbiAgICBsaW5rLnNldEF0dHJpYnV0ZShcImRhdGEtZWxlbWVudC1pZFwiLCBkYXRhLmlkKTtcbiAgICBsZXQgaXNCb3VuZCA9IGZhbHNlO1xuICAgIGlmIChkYXRhLnVybCkge1xuICAgICAgbGlua1NlcnZpY2UuYWRkTGlua0F0dHJpYnV0ZXMobGluaywgZGF0YS51cmwsIGRhdGEubmV3V2luZG93KTtcbiAgICAgIGlzQm91bmQgPSB0cnVlO1xuICAgIH0gZWxzZSBpZiAoZGF0YS5hY3Rpb24pIHtcbiAgICAgIHRoaXMuX2JpbmROYW1lZEFjdGlvbihsaW5rLCBkYXRhLmFjdGlvbik7XG4gICAgICBpc0JvdW5kID0gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKGRhdGEuYXR0YWNobWVudCkge1xuICAgICAgdGhpcy4jYmluZEF0dGFjaG1lbnQobGluaywgZGF0YS5hdHRhY2htZW50LCBkYXRhLmF0dGFjaG1lbnREZXN0KTtcbiAgICAgIGlzQm91bmQgPSB0cnVlO1xuICAgIH0gZWxzZSBpZiAoZGF0YS5zZXRPQ0dTdGF0ZSkge1xuICAgICAgdGhpcy4jYmluZFNldE9DR1N0YXRlKGxpbmssIGRhdGEuc2V0T0NHU3RhdGUpO1xuICAgICAgaXNCb3VuZCA9IHRydWU7XG4gICAgfSBlbHNlIGlmIChkYXRhLmRlc3QpIHtcbiAgICAgIHRoaXMuX2JpbmRMaW5rKGxpbmssIGRhdGEuZGVzdCk7XG4gICAgICBpc0JvdW5kID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGRhdGEuYWN0aW9ucyAmJiAoZGF0YS5hY3Rpb25zLkFjdGlvbiB8fCBkYXRhLmFjdGlvbnNbXCJNb3VzZSBVcFwiXSB8fCBkYXRhLmFjdGlvbnNbXCJNb3VzZSBEb3duXCJdKSAmJiB0aGlzLmVuYWJsZVNjcmlwdGluZyAmJiB0aGlzLmhhc0pTQWN0aW9ucykge1xuICAgICAgICB0aGlzLl9iaW5kSlNBY3Rpb24obGluaywgZGF0YSk7XG4gICAgICAgIGlzQm91bmQgPSB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKGRhdGEucmVzZXRGb3JtKSB7XG4gICAgICAgIHRoaXMuX2JpbmRSZXNldEZvcm1BY3Rpb24obGluaywgZGF0YS5yZXNldEZvcm0pO1xuICAgICAgICBpc0JvdW5kID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5pc1Rvb2x0aXBPbmx5ICYmICFpc0JvdW5kKSB7XG4gICAgICAgIHRoaXMuX2JpbmRMaW5rKGxpbmssIFwiXCIpO1xuICAgICAgICBpc0JvdW5kID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5jb250YWluZXIuY2xhc3NMaXN0LmFkZChcImxpbmtBbm5vdGF0aW9uXCIpO1xuICAgIGlmIChpc0JvdW5kKSB7XG4gICAgICB0aGlzLmNvbnRhaW5lci5hcHBlbmQobGluayk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmNvbnRhaW5lcjtcbiAgfVxuICAjc2V0SW50ZXJuYWxMaW5rKCkge1xuICAgIHRoaXMuY29udGFpbmVyLnNldEF0dHJpYnV0ZShcImRhdGEtaW50ZXJuYWwtbGlua1wiLCBcIlwiKTtcbiAgfVxuICBfYmluZExpbmsobGluaywgZGVzdGluYXRpb24pIHtcbiAgICBsaW5rLmhyZWYgPSB0aGlzLmxpbmtTZXJ2aWNlLmdldERlc3RpbmF0aW9uSGFzaChkZXN0aW5hdGlvbik7XG4gICAgbGluay5vbmNsaWNrID0gKCkgPT4ge1xuICAgICAgaWYgKGRlc3RpbmF0aW9uKSB7XG4gICAgICAgIHRoaXMubGlua1NlcnZpY2UuZ29Ub0Rlc3RpbmF0aW9uKGRlc3RpbmF0aW9uKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xuICAgIGlmIChkZXN0aW5hdGlvbiB8fCBkZXN0aW5hdGlvbiA9PT0gXCJcIikge1xuICAgICAgdGhpcy4jc2V0SW50ZXJuYWxMaW5rKCk7XG4gICAgfVxuICB9XG4gIF9iaW5kTmFtZWRBY3Rpb24obGluaywgYWN0aW9uKSB7XG4gICAgbGluay5ocmVmID0gdGhpcy5saW5rU2VydmljZS5nZXRBbmNob3JVcmwoXCJcIik7XG4gICAgbGluay5vbmNsaWNrID0gKCkgPT4ge1xuICAgICAgdGhpcy5saW5rU2VydmljZS5leGVjdXRlTmFtZWRBY3Rpb24oYWN0aW9uKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xuICAgIHRoaXMuI3NldEludGVybmFsTGluaygpO1xuICB9XG4gICNiaW5kQXR0YWNobWVudChsaW5rLCBhdHRhY2htZW50LCBkZXN0ID0gbnVsbCkge1xuICAgIGxpbmsuaHJlZiA9IHRoaXMubGlua1NlcnZpY2UuZ2V0QW5jaG9yVXJsKFwiXCIpO1xuICAgIGxpbmsub25jbGljayA9ICgpID0+IHtcbiAgICAgIHRoaXMuZG93bmxvYWRNYW5hZ2VyPy5vcGVuT3JEb3dubG9hZERhdGEoYXR0YWNobWVudC5jb250ZW50LCBhdHRhY2htZW50LmZpbGVuYW1lLCBkZXN0KTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xuICAgIHRoaXMuI3NldEludGVybmFsTGluaygpO1xuICB9XG4gICNiaW5kU2V0T0NHU3RhdGUobGluaywgYWN0aW9uKSB7XG4gICAgbGluay5ocmVmID0gdGhpcy5saW5rU2VydmljZS5nZXRBbmNob3JVcmwoXCJcIik7XG4gICAgbGluay5vbmNsaWNrID0gKCkgPT4ge1xuICAgICAgdGhpcy5saW5rU2VydmljZS5leGVjdXRlU2V0T0NHU3RhdGUoYWN0aW9uKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xuICAgIHRoaXMuI3NldEludGVybmFsTGluaygpO1xuICB9XG4gIF9iaW5kSlNBY3Rpb24obGluaywgZGF0YSkge1xuICAgIGxpbmsuaHJlZiA9IHRoaXMubGlua1NlcnZpY2UuZ2V0QW5jaG9yVXJsKFwiXCIpO1xuICAgIGNvbnN0IG1hcCA9IG5ldyBNYXAoW1tcIkFjdGlvblwiLCBcIm9uY2xpY2tcIl0sIFtcIk1vdXNlIFVwXCIsIFwib25tb3VzZXVwXCJdLCBbXCJNb3VzZSBEb3duXCIsIFwib25tb3VzZWRvd25cIl1dKTtcbiAgICBmb3IgKGNvbnN0IG5hbWUgb2YgT2JqZWN0LmtleXMoZGF0YS5hY3Rpb25zKSkge1xuICAgICAgY29uc3QganNOYW1lID0gbWFwLmdldChuYW1lKTtcbiAgICAgIGlmICghanNOYW1lKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgbGlua1tqc05hbWVdID0gKCkgPT4ge1xuICAgICAgICB0aGlzLmxpbmtTZXJ2aWNlLmV2ZW50QnVzPy5kaXNwYXRjaChcImRpc3BhdGNoZXZlbnRpbnNhbmRib3hcIiwge1xuICAgICAgICAgIHNvdXJjZTogdGhpcyxcbiAgICAgICAgICBkZXRhaWw6IHtcbiAgICAgICAgICAgIGlkOiBkYXRhLmlkLFxuICAgICAgICAgICAgbmFtZVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH07XG4gICAgfVxuICAgIGlmICghbGluay5vbmNsaWNrKSB7XG4gICAgICBsaW5rLm9uY2xpY2sgPSAoKSA9PiBmYWxzZTtcbiAgICB9XG4gICAgdGhpcy4jc2V0SW50ZXJuYWxMaW5rKCk7XG4gIH1cbiAgX2JpbmRSZXNldEZvcm1BY3Rpb24obGluaywgcmVzZXRGb3JtKSB7XG4gICAgY29uc3Qgb3RoZXJDbGlja0FjdGlvbiA9IGxpbmsub25jbGljaztcbiAgICBpZiAoIW90aGVyQ2xpY2tBY3Rpb24pIHtcbiAgICAgIGxpbmsuaHJlZiA9IHRoaXMubGlua1NlcnZpY2UuZ2V0QW5jaG9yVXJsKFwiXCIpO1xuICAgIH1cbiAgICB0aGlzLiNzZXRJbnRlcm5hbExpbmsoKTtcbiAgICBpZiAoIXRoaXMuX2ZpZWxkT2JqZWN0cykge1xuICAgICAgKDAsdXRpbC53YXJuKShgX2JpbmRSZXNldEZvcm1BY3Rpb24gLSBcInJlc2V0Rm9ybVwiIGFjdGlvbiBub3Qgc3VwcG9ydGVkLCBgICsgXCJlbnN1cmUgdGhhdCB0aGUgYGZpZWxkT2JqZWN0c2AgcGFyYW1ldGVyIGlzIHByb3ZpZGVkLlwiKTtcbiAgICAgIGlmICghb3RoZXJDbGlja0FjdGlvbikge1xuICAgICAgICBsaW5rLm9uY2xpY2sgPSAoKSA9PiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbGluay5vbmNsaWNrID0gKCkgPT4ge1xuICAgICAgb3RoZXJDbGlja0FjdGlvbj8uKCk7XG4gICAgICBjb25zdCB7XG4gICAgICAgIGZpZWxkczogcmVzZXRGb3JtRmllbGRzLFxuICAgICAgICByZWZzOiByZXNldEZvcm1SZWZzLFxuICAgICAgICBpbmNsdWRlXG4gICAgICB9ID0gcmVzZXRGb3JtO1xuICAgICAgY29uc3QgYWxsRmllbGRzID0gW107XG4gICAgICBpZiAocmVzZXRGb3JtRmllbGRzLmxlbmd0aCAhPT0gMCB8fCByZXNldEZvcm1SZWZzLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICBjb25zdCBmaWVsZElkcyA9IG5ldyBTZXQocmVzZXRGb3JtUmVmcyk7XG4gICAgICAgIGZvciAoY29uc3QgZmllbGROYW1lIG9mIHJlc2V0Rm9ybUZpZWxkcykge1xuICAgICAgICAgIGNvbnN0IGZpZWxkcyA9IHRoaXMuX2ZpZWxkT2JqZWN0c1tmaWVsZE5hbWVdIHx8IFtdO1xuICAgICAgICAgIGZvciAoY29uc3Qge1xuICAgICAgICAgICAgaWRcbiAgICAgICAgICB9IG9mIGZpZWxkcykge1xuICAgICAgICAgICAgZmllbGRJZHMuYWRkKGlkKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCBmaWVsZHMgb2YgT2JqZWN0LnZhbHVlcyh0aGlzLl9maWVsZE9iamVjdHMpKSB7XG4gICAgICAgICAgZm9yIChjb25zdCBmaWVsZCBvZiBmaWVsZHMpIHtcbiAgICAgICAgICAgIGlmIChmaWVsZElkcy5oYXMoZmllbGQuaWQpID09PSBpbmNsdWRlKSB7XG4gICAgICAgICAgICAgIGFsbEZpZWxkcy5wdXNoKGZpZWxkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZvciAoY29uc3QgZmllbGRzIG9mIE9iamVjdC52YWx1ZXModGhpcy5fZmllbGRPYmplY3RzKSkge1xuICAgICAgICAgIGFsbEZpZWxkcy5wdXNoKC4uLmZpZWxkcyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGNvbnN0IHN0b3JhZ2UgPSB0aGlzLmFubm90YXRpb25TdG9yYWdlO1xuICAgICAgY29uc3QgYWxsSWRzID0gW107XG4gICAgICBmb3IgKGNvbnN0IGZpZWxkIG9mIGFsbEZpZWxkcykge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgaWRcbiAgICAgICAgfSA9IGZpZWxkO1xuICAgICAgICBhbGxJZHMucHVzaChpZCk7XG4gICAgICAgIHN3aXRjaCAoZmllbGQudHlwZSkge1xuICAgICAgICAgIGNhc2UgXCJ0ZXh0XCI6XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gZmllbGQuZGVmYXVsdFZhbHVlIHx8IFwiXCI7XG4gICAgICAgICAgICAgIHN0b3JhZ2Uuc2V0VmFsdWUoaWQsIHtcbiAgICAgICAgICAgICAgICB2YWx1ZVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgY2FzZSBcImNoZWNrYm94XCI6XG4gICAgICAgICAgY2FzZSBcInJhZGlvYnV0dG9uXCI6XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gZmllbGQuZGVmYXVsdFZhbHVlID09PSBmaWVsZC5leHBvcnRWYWx1ZXM7XG4gICAgICAgICAgICAgIHN0b3JhZ2Uuc2V0VmFsdWUoaWQsIHtcbiAgICAgICAgICAgICAgICB2YWx1ZVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgY2FzZSBcImNvbWJvYm94XCI6XG4gICAgICAgICAgY2FzZSBcImxpc3Rib3hcIjpcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBmaWVsZC5kZWZhdWx0VmFsdWUgfHwgXCJcIjtcbiAgICAgICAgICAgICAgc3RvcmFnZS5zZXRWYWx1ZShpZCwge1xuICAgICAgICAgICAgICAgIHZhbHVlXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZG9tRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYFtkYXRhLWVsZW1lbnQtaWQ9XCIke2lkfVwiXWApO1xuICAgICAgICBpZiAoIWRvbUVsZW1lbnQpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfSBlbHNlIGlmICghR2V0RWxlbWVudHNCeU5hbWVTZXQuaGFzKGRvbUVsZW1lbnQpKSB7XG4gICAgICAgICAgKDAsdXRpbC53YXJuKShgX2JpbmRSZXNldEZvcm1BY3Rpb24gLSBlbGVtZW50IG5vdCBhbGxvd2VkOiAke2lkfWApO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGRvbUVsZW1lbnQuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoXCJyZXNldGZvcm1cIikpO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuZW5hYmxlU2NyaXB0aW5nKSB7XG4gICAgICAgIHRoaXMubGlua1NlcnZpY2UuZXZlbnRCdXM/LmRpc3BhdGNoKFwiZGlzcGF0Y2hldmVudGluc2FuZGJveFwiLCB7XG4gICAgICAgICAgc291cmNlOiB0aGlzLFxuICAgICAgICAgIGRldGFpbDoge1xuICAgICAgICAgICAgaWQ6IFwiYXBwXCIsXG4gICAgICAgICAgICBpZHM6IGFsbElkcyxcbiAgICAgICAgICAgIG5hbWU6IFwiUmVzZXRGb3JtXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG4gIH1cbn1cbmNsYXNzIFRleHRBbm5vdGF0aW9uRWxlbWVudCBleHRlbmRzIEFubm90YXRpb25FbGVtZW50IHtcbiAgY29uc3RydWN0b3IocGFyYW1ldGVycykge1xuICAgIHN1cGVyKHBhcmFtZXRlcnMsIHtcbiAgICAgIGlzUmVuZGVyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9XG4gIHJlbmRlcigpIHtcbiAgICB0aGlzLmNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKFwidGV4dEFubm90YXRpb25cIik7XG4gICAgY29uc3QgaW1hZ2UgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW1nXCIpO1xuICAgIGltYWdlLnNyYyA9IHRoaXMuaW1hZ2VSZXNvdXJjZXNQYXRoICsgXCJhbm5vdGF0aW9uLVwiICsgdGhpcy5kYXRhLm5hbWUudG9Mb3dlckNhc2UoKSArIFwiLnN2Z1wiO1xuICAgIGltYWdlLnNldEF0dHJpYnV0ZShcImRhdGEtbDEwbi1pZFwiLCBcInBkZmpzLXRleHQtYW5ub3RhdGlvbi10eXBlXCIpO1xuICAgIGltYWdlLnNldEF0dHJpYnV0ZShcImRhdGEtbDEwbi1hcmdzXCIsIEpTT04uc3RyaW5naWZ5KHtcbiAgICAgIHR5cGU6IHRoaXMuZGF0YS5uYW1lXG4gICAgfSkpO1xuICAgIGlmICghdGhpcy5kYXRhLnBvcHVwUmVmICYmIHRoaXMuaGFzUG9wdXBEYXRhKSB7XG4gICAgICB0aGlzLl9jcmVhdGVQb3B1cCgpO1xuICAgIH1cbiAgICB0aGlzLmNvbnRhaW5lci5hcHBlbmQoaW1hZ2UpO1xuICAgIHJldHVybiB0aGlzLmNvbnRhaW5lcjtcbiAgfVxufVxuY2xhc3MgV2lkZ2V0QW5ub3RhdGlvbkVsZW1lbnQgZXh0ZW5kcyBBbm5vdGF0aW9uRWxlbWVudCB7XG4gIHJlbmRlcigpIHtcbiAgICBpZiAodGhpcy5kYXRhLmFsdGVybmF0aXZlVGV4dCkge1xuICAgICAgdGhpcy5jb250YWluZXIudGl0bGUgPSB0aGlzLmRhdGEuYWx0ZXJuYXRpdmVUZXh0O1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5jb250YWluZXI7XG4gIH1cbiAgc2hvd0VsZW1lbnRBbmRIaWRlQ2FudmFzKGVsZW1lbnQpIHtcbiAgICBpZiAodGhpcy5kYXRhLmhhc093bkNhbnZhcykge1xuICAgICAgaWYgKGVsZW1lbnQucHJldmlvdXNTaWJsaW5nPy5ub2RlTmFtZSA9PT0gXCJDQU5WQVNcIikge1xuICAgICAgICBlbGVtZW50LnByZXZpb3VzU2libGluZy5oaWRkZW4gPSB0cnVlO1xuICAgICAgfVxuICAgICAgZWxlbWVudC5oaWRkZW4gPSBmYWxzZTtcbiAgICB9XG4gIH1cbiAgX2dldEtleU1vZGlmaWVyKGV2ZW50KSB7XG4gICAgcmV0dXJuIHV0aWwuRmVhdHVyZVRlc3QucGxhdGZvcm0uaXNNYWMgPyBldmVudC5tZXRhS2V5IDogZXZlbnQuY3RybEtleTtcbiAgfVxuICBfc2V0RXZlbnRMaXN0ZW5lcihlbGVtZW50LCBlbGVtZW50RGF0YSwgYmFzZU5hbWUsIGV2ZW50TmFtZSwgdmFsdWVHZXR0ZXIpIHtcbiAgICBpZiAoYmFzZU5hbWUuaW5jbHVkZXMoXCJtb3VzZVwiKSkge1xuICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKGJhc2VOYW1lLCBldmVudCA9PiB7XG4gICAgICAgIHRoaXMubGlua1NlcnZpY2UuZXZlbnRCdXM/LmRpc3BhdGNoKFwiZGlzcGF0Y2hldmVudGluc2FuZGJveFwiLCB7XG4gICAgICAgICAgc291cmNlOiB0aGlzLFxuICAgICAgICAgIGRldGFpbDoge1xuICAgICAgICAgICAgaWQ6IHRoaXMuZGF0YS5pZCxcbiAgICAgICAgICAgIG5hbWU6IGV2ZW50TmFtZSxcbiAgICAgICAgICAgIHZhbHVlOiB2YWx1ZUdldHRlcihldmVudCksXG4gICAgICAgICAgICBzaGlmdDogZXZlbnQuc2hpZnRLZXksXG4gICAgICAgICAgICBtb2RpZmllcjogdGhpcy5fZ2V0S2V5TW9kaWZpZXIoZXZlbnQpXG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoYmFzZU5hbWUsIGV2ZW50ID0+IHtcbiAgICAgICAgaWYgKGJhc2VOYW1lID09PSBcImJsdXJcIikge1xuICAgICAgICAgIGlmICghZWxlbWVudERhdGEuZm9jdXNlZCB8fCAhZXZlbnQucmVsYXRlZFRhcmdldCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbGVtZW50RGF0YS5mb2N1c2VkID0gZmFsc2U7XG4gICAgICAgIH0gZWxzZSBpZiAoYmFzZU5hbWUgPT09IFwiZm9jdXNcIikge1xuICAgICAgICAgIGlmIChlbGVtZW50RGF0YS5mb2N1c2VkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsZW1lbnREYXRhLmZvY3VzZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdmFsdWVHZXR0ZXIpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5saW5rU2VydmljZS5ldmVudEJ1cz8uZGlzcGF0Y2goXCJkaXNwYXRjaGV2ZW50aW5zYW5kYm94XCIsIHtcbiAgICAgICAgICBzb3VyY2U6IHRoaXMsXG4gICAgICAgICAgZGV0YWlsOiB7XG4gICAgICAgICAgICBpZDogdGhpcy5kYXRhLmlkLFxuICAgICAgICAgICAgbmFtZTogZXZlbnROYW1lLFxuICAgICAgICAgICAgdmFsdWU6IHZhbHVlR2V0dGVyKGV2ZW50KVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgX3NldEV2ZW50TGlzdGVuZXJzKGVsZW1lbnQsIGVsZW1lbnREYXRhLCBuYW1lcywgZ2V0dGVyKSB7XG4gICAgZm9yIChjb25zdCBbYmFzZU5hbWUsIGV2ZW50TmFtZV0gb2YgbmFtZXMpIHtcbiAgICAgIGlmIChldmVudE5hbWUgPT09IFwiQWN0aW9uXCIgfHwgdGhpcy5kYXRhLmFjdGlvbnM/LltldmVudE5hbWVdKSB7XG4gICAgICAgIGlmIChldmVudE5hbWUgPT09IFwiRm9jdXNcIiB8fCBldmVudE5hbWUgPT09IFwiQmx1clwiKSB7XG4gICAgICAgICAgZWxlbWVudERhdGEgfHw9IHtcbiAgICAgICAgICAgIGZvY3VzZWQ6IGZhbHNlXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9zZXRFdmVudExpc3RlbmVyKGVsZW1lbnQsIGVsZW1lbnREYXRhLCBiYXNlTmFtZSwgZXZlbnROYW1lLCBnZXR0ZXIpO1xuICAgICAgICBpZiAoZXZlbnROYW1lID09PSBcIkZvY3VzXCIgJiYgIXRoaXMuZGF0YS5hY3Rpb25zPy5CbHVyKSB7XG4gICAgICAgICAgdGhpcy5fc2V0RXZlbnRMaXN0ZW5lcihlbGVtZW50LCBlbGVtZW50RGF0YSwgXCJibHVyXCIsIFwiQmx1clwiLCBudWxsKTtcbiAgICAgICAgfSBlbHNlIGlmIChldmVudE5hbWUgPT09IFwiQmx1clwiICYmICF0aGlzLmRhdGEuYWN0aW9ucz8uRm9jdXMpIHtcbiAgICAgICAgICB0aGlzLl9zZXRFdmVudExpc3RlbmVyKGVsZW1lbnQsIGVsZW1lbnREYXRhLCBcImZvY3VzXCIsIFwiRm9jdXNcIiwgbnVsbCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgX3NldEJhY2tncm91bmRDb2xvcihlbGVtZW50KSB7XG4gICAgY29uc3QgY29sb3IgPSB0aGlzLmRhdGEuYmFja2dyb3VuZENvbG9yIHx8IG51bGw7XG4gICAgZWxlbWVudC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBjb2xvciA9PT0gbnVsbCA/IFwidHJhbnNwYXJlbnRcIiA6IHV0aWwuVXRpbC5tYWtlSGV4Q29sb3IoY29sb3JbMF0sIGNvbG9yWzFdLCBjb2xvclsyXSk7XG4gIH1cbiAgX3NldFRleHRTdHlsZShlbGVtZW50KSB7XG4gICAgY29uc3QgVEVYVF9BTElHTk1FTlQgPSBbXCJsZWZ0XCIsIFwiY2VudGVyXCIsIFwicmlnaHRcIl07XG4gICAgY29uc3Qge1xuICAgICAgZm9udENvbG9yXG4gICAgfSA9IHRoaXMuZGF0YS5kZWZhdWx0QXBwZWFyYW5jZURhdGE7XG4gICAgY29uc3QgZm9udFNpemUgPSB0aGlzLmRhdGEuZGVmYXVsdEFwcGVhcmFuY2VEYXRhLmZvbnRTaXplIHx8IERFRkFVTFRfRk9OVF9TSVpFO1xuICAgIGNvbnN0IHN0eWxlID0gZWxlbWVudC5zdHlsZTtcbiAgICBsZXQgY29tcHV0ZWRGb250U2l6ZTtcbiAgICBjb25zdCBCT1JERVJfU0laRSA9IDI7XG4gICAgY29uc3Qgcm91bmRUb09uZURlY2ltYWwgPSB4ID0+IE1hdGgucm91bmQoMTAgKiB4KSAvIDEwO1xuICAgIGlmICh0aGlzLmRhdGEubXVsdGlMaW5lKSB7XG4gICAgICBjb25zdCBoZWlnaHQgPSBNYXRoLmFicyh0aGlzLmRhdGEucmVjdFszXSAtIHRoaXMuZGF0YS5yZWN0WzFdIC0gQk9SREVSX1NJWkUpO1xuICAgICAgY29uc3QgbnVtYmVyT2ZMaW5lcyA9IE1hdGgucm91bmQoaGVpZ2h0IC8gKHV0aWwuTElORV9GQUNUT1IgKiBmb250U2l6ZSkpIHx8IDE7XG4gICAgICBjb25zdCBsaW5lSGVpZ2h0ID0gaGVpZ2h0IC8gbnVtYmVyT2ZMaW5lcztcbiAgICAgIGNvbXB1dGVkRm9udFNpemUgPSBNYXRoLm1pbihmb250U2l6ZSwgcm91bmRUb09uZURlY2ltYWwobGluZUhlaWdodCAvIHV0aWwuTElORV9GQUNUT1IpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgaGVpZ2h0ID0gTWF0aC5hYnModGhpcy5kYXRhLnJlY3RbM10gLSB0aGlzLmRhdGEucmVjdFsxXSAtIEJPUkRFUl9TSVpFKTtcbiAgICAgIGNvbXB1dGVkRm9udFNpemUgPSBNYXRoLm1pbihmb250U2l6ZSwgcm91bmRUb09uZURlY2ltYWwoaGVpZ2h0IC8gdXRpbC5MSU5FX0ZBQ1RPUikpO1xuICAgIH1cbiAgICBzdHlsZS5mb250U2l6ZSA9IGBjYWxjKCR7Y29tcHV0ZWRGb250U2l6ZX1weCAqIHZhcigtLXNjYWxlLWZhY3RvcikpYDtcbiAgICBzdHlsZS5jb2xvciA9IHV0aWwuVXRpbC5tYWtlSGV4Q29sb3IoZm9udENvbG9yWzBdLCBmb250Q29sb3JbMV0sIGZvbnRDb2xvclsyXSk7XG4gICAgaWYgKHRoaXMuZGF0YS50ZXh0QWxpZ25tZW50ICE9PSBudWxsKSB7XG4gICAgICBzdHlsZS50ZXh0QWxpZ24gPSBURVhUX0FMSUdOTUVOVFt0aGlzLmRhdGEudGV4dEFsaWdubWVudF07XG4gICAgfVxuICB9XG4gIF9zZXRSZXF1aXJlZChlbGVtZW50LCBpc1JlcXVpcmVkKSB7XG4gICAgaWYgKGlzUmVxdWlyZWQpIHtcbiAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKFwicmVxdWlyZWRcIiwgdHJ1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKFwicmVxdWlyZWRcIik7XG4gICAgfVxuICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKFwiYXJpYS1yZXF1aXJlZFwiLCBpc1JlcXVpcmVkKTtcbiAgfVxufVxuY2xhc3MgVGV4dFdpZGdldEFubm90YXRpb25FbGVtZW50IGV4dGVuZHMgV2lkZ2V0QW5ub3RhdGlvbkVsZW1lbnQge1xuICBjb25zdHJ1Y3RvcihwYXJhbWV0ZXJzKSB7XG4gICAgY29uc3QgaXNSZW5kZXJhYmxlID0gcGFyYW1ldGVycy5yZW5kZXJGb3JtcyB8fCBwYXJhbWV0ZXJzLmRhdGEuaGFzT3duQ2FudmFzIHx8ICFwYXJhbWV0ZXJzLmRhdGEuaGFzQXBwZWFyYW5jZSAmJiAhIXBhcmFtZXRlcnMuZGF0YS5maWVsZFZhbHVlO1xuICAgIHN1cGVyKHBhcmFtZXRlcnMsIHtcbiAgICAgIGlzUmVuZGVyYWJsZVxuICAgIH0pO1xuICB9XG4gIHNldFByb3BlcnR5T25TaWJsaW5ncyhiYXNlLCBrZXksIHZhbHVlLCBrZXlJblN0b3JhZ2UpIHtcbiAgICBjb25zdCBzdG9yYWdlID0gdGhpcy5hbm5vdGF0aW9uU3RvcmFnZTtcbiAgICBmb3IgKGNvbnN0IGVsZW1lbnQgb2YgdGhpcy5fZ2V0RWxlbWVudHNCeU5hbWUoYmFzZS5uYW1lLCBiYXNlLmlkKSkge1xuICAgICAgaWYgKGVsZW1lbnQuZG9tRWxlbWVudCkge1xuICAgICAgICBlbGVtZW50LmRvbUVsZW1lbnRba2V5XSA9IHZhbHVlO1xuICAgICAgfVxuICAgICAgc3RvcmFnZS5zZXRWYWx1ZShlbGVtZW50LmlkLCB7XG4gICAgICAgIFtrZXlJblN0b3JhZ2VdOiB2YWx1ZVxuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCBzdG9yYWdlID0gdGhpcy5hbm5vdGF0aW9uU3RvcmFnZTtcbiAgICBjb25zdCBpZCA9IHRoaXMuZGF0YS5pZDtcbiAgICB0aGlzLmNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKFwidGV4dFdpZGdldEFubm90YXRpb25cIik7XG4gICAgbGV0IGVsZW1lbnQgPSBudWxsO1xuICAgIGlmICh0aGlzLnJlbmRlckZvcm1zKSB7XG4gICAgICBjb25zdCBzdG9yZWREYXRhID0gc3RvcmFnZS5nZXRWYWx1ZShpZCwge1xuICAgICAgICB2YWx1ZTogdGhpcy5kYXRhLmZpZWxkVmFsdWVcbiAgICAgIH0pO1xuICAgICAgbGV0IHRleHRDb250ZW50ID0gc3RvcmVkRGF0YS52YWx1ZSB8fCBcIlwiO1xuICAgICAgY29uc3QgbWF4TGVuID0gc3RvcmFnZS5nZXRWYWx1ZShpZCwge1xuICAgICAgICBjaGFyTGltaXQ6IHRoaXMuZGF0YS5tYXhMZW5cbiAgICAgIH0pLmNoYXJMaW1pdDtcbiAgICAgIGlmIChtYXhMZW4gJiYgdGV4dENvbnRlbnQubGVuZ3RoID4gbWF4TGVuKSB7XG4gICAgICAgIHRleHRDb250ZW50ID0gdGV4dENvbnRlbnQuc2xpY2UoMCwgbWF4TGVuKTtcbiAgICAgIH1cbiAgICAgIGxldCBmaWVsZEZvcm1hdHRlZFZhbHVlcyA9IHN0b3JlZERhdGEuZm9ybWF0dGVkVmFsdWUgfHwgdGhpcy5kYXRhLnRleHRDb250ZW50Py5qb2luKFwiXFxuXCIpIHx8IG51bGw7XG4gICAgICBpZiAoZmllbGRGb3JtYXR0ZWRWYWx1ZXMgJiYgdGhpcy5kYXRhLmNvbWIpIHtcbiAgICAgICAgZmllbGRGb3JtYXR0ZWRWYWx1ZXMgPSBmaWVsZEZvcm1hdHRlZFZhbHVlcy5yZXBsYWNlQWxsKC9cXHMrL2csIFwiXCIpO1xuICAgICAgfVxuICAgICAgY29uc3QgZWxlbWVudERhdGEgPSB7XG4gICAgICAgIHVzZXJWYWx1ZTogdGV4dENvbnRlbnQsXG4gICAgICAgIGZvcm1hdHRlZFZhbHVlOiBmaWVsZEZvcm1hdHRlZFZhbHVlcyxcbiAgICAgICAgbGFzdENvbW1pdHRlZFZhbHVlOiBudWxsLFxuICAgICAgICBjb21taXRLZXk6IDEsXG4gICAgICAgIGZvY3VzZWQ6IGZhbHNlXG4gICAgICB9O1xuICAgICAgaWYgKHRoaXMuZGF0YS5tdWx0aUxpbmUpIHtcbiAgICAgICAgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0ZXh0YXJlYVwiKTtcbiAgICAgICAgZWxlbWVudC50ZXh0Q29udGVudCA9IGZpZWxkRm9ybWF0dGVkVmFsdWVzID8/IHRleHRDb250ZW50O1xuICAgICAgICBpZiAodGhpcy5kYXRhLmRvTm90U2Nyb2xsKSB7XG4gICAgICAgICAgZWxlbWVudC5zdHlsZS5vdmVyZmxvd1kgPSBcImhpZGRlblwiO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuICAgICAgICBlbGVtZW50LnR5cGUgPSBcInRleHRcIjtcbiAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiLCBmaWVsZEZvcm1hdHRlZFZhbHVlcyA/PyB0ZXh0Q29udGVudCk7XG4gICAgICAgIGlmICh0aGlzLmRhdGEuZG9Ob3RTY3JvbGwpIHtcbiAgICAgICAgICBlbGVtZW50LnN0eWxlLm92ZXJmbG93WCA9IFwiaGlkZGVuXCI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLmRhdGEuaGFzT3duQ2FudmFzKSB7XG4gICAgICAgIGVsZW1lbnQuaGlkZGVuID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIEdldEVsZW1lbnRzQnlOYW1lU2V0LmFkZChlbGVtZW50KTtcbiAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKFwiZGF0YS1lbGVtZW50LWlkXCIsIGlkKTtcbiAgICAgIGVsZW1lbnQuZGlzYWJsZWQgPSB0aGlzLmRhdGEucmVhZE9ubHk7XG4gICAgICBlbGVtZW50Lm5hbWUgPSB0aGlzLmRhdGEuZmllbGROYW1lO1xuICAgICAgZWxlbWVudC50YWJJbmRleCA9IERFRkFVTFRfVEFCX0lOREVYO1xuICAgICAgdGhpcy5fc2V0UmVxdWlyZWQoZWxlbWVudCwgdGhpcy5kYXRhLnJlcXVpcmVkKTtcbiAgICAgIGlmIChtYXhMZW4pIHtcbiAgICAgICAgZWxlbWVudC5tYXhMZW5ndGggPSBtYXhMZW47XG4gICAgICB9XG4gICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJpbnB1dFwiLCBldmVudCA9PiB7XG4gICAgICAgIHN0b3JhZ2Uuc2V0VmFsdWUoaWQsIHtcbiAgICAgICAgICB2YWx1ZTogZXZlbnQudGFyZ2V0LnZhbHVlXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnNldFByb3BlcnR5T25TaWJsaW5ncyhlbGVtZW50LCBcInZhbHVlXCIsIGV2ZW50LnRhcmdldC52YWx1ZSwgXCJ2YWx1ZVwiKTtcbiAgICAgICAgZWxlbWVudERhdGEuZm9ybWF0dGVkVmFsdWUgPSBudWxsO1xuICAgICAgfSk7XG4gICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJyZXNldGZvcm1cIiwgZXZlbnQgPT4ge1xuICAgICAgICBjb25zdCBkZWZhdWx0VmFsdWUgPSB0aGlzLmRhdGEuZGVmYXVsdEZpZWxkVmFsdWUgPz8gXCJcIjtcbiAgICAgICAgZWxlbWVudC52YWx1ZSA9IGVsZW1lbnREYXRhLnVzZXJWYWx1ZSA9IGRlZmF1bHRWYWx1ZTtcbiAgICAgICAgZWxlbWVudERhdGEuZm9ybWF0dGVkVmFsdWUgPSBudWxsO1xuICAgICAgfSk7XG4gICAgICBsZXQgYmx1ckxpc3RlbmVyID0gZXZlbnQgPT4ge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgZm9ybWF0dGVkVmFsdWVcbiAgICAgICAgfSA9IGVsZW1lbnREYXRhO1xuICAgICAgICBpZiAoZm9ybWF0dGVkVmFsdWUgIT09IG51bGwgJiYgZm9ybWF0dGVkVmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGV2ZW50LnRhcmdldC52YWx1ZSA9IGZvcm1hdHRlZFZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGV2ZW50LnRhcmdldC5zY3JvbGxMZWZ0ID0gMDtcbiAgICAgIH07XG4gICAgICBpZiAodGhpcy5lbmFibGVTY3JpcHRpbmcgJiYgdGhpcy5oYXNKU0FjdGlvbnMpIHtcbiAgICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiZm9jdXNcIiwgZXZlbnQgPT4ge1xuICAgICAgICAgIGlmIChlbGVtZW50RGF0YS5mb2N1c2VkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIHRhcmdldFxuICAgICAgICAgIH0gPSBldmVudDtcbiAgICAgICAgICBpZiAoZWxlbWVudERhdGEudXNlclZhbHVlKSB7XG4gICAgICAgICAgICB0YXJnZXQudmFsdWUgPSBlbGVtZW50RGF0YS51c2VyVmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsZW1lbnREYXRhLmxhc3RDb21taXR0ZWRWYWx1ZSA9IHRhcmdldC52YWx1ZTtcbiAgICAgICAgICBlbGVtZW50RGF0YS5jb21taXRLZXkgPSAxO1xuICAgICAgICAgIGlmICghdGhpcy5kYXRhLmFjdGlvbnM/LkZvY3VzKSB7XG4gICAgICAgICAgICBlbGVtZW50RGF0YS5mb2N1c2VkID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJ1cGRhdGVmcm9tc2FuZGJveFwiLCBqc0V2ZW50ID0+IHtcbiAgICAgICAgICB0aGlzLnNob3dFbGVtZW50QW5kSGlkZUNhbnZhcyhqc0V2ZW50LnRhcmdldCk7XG4gICAgICAgICAgY29uc3QgYWN0aW9ucyA9IHtcbiAgICAgICAgICAgIHZhbHVlKGV2ZW50KSB7XG4gICAgICAgICAgICAgIGVsZW1lbnREYXRhLnVzZXJWYWx1ZSA9IGV2ZW50LmRldGFpbC52YWx1ZSA/PyBcIlwiO1xuICAgICAgICAgICAgICBzdG9yYWdlLnNldFZhbHVlKGlkLCB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IGVsZW1lbnREYXRhLnVzZXJWYWx1ZS50b1N0cmluZygpXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICBldmVudC50YXJnZXQudmFsdWUgPSBlbGVtZW50RGF0YS51c2VyVmFsdWU7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZm9ybWF0dGVkVmFsdWUoZXZlbnQpIHtcbiAgICAgICAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgICAgIGZvcm1hdHRlZFZhbHVlXG4gICAgICAgICAgICAgIH0gPSBldmVudC5kZXRhaWw7XG4gICAgICAgICAgICAgIGVsZW1lbnREYXRhLmZvcm1hdHRlZFZhbHVlID0gZm9ybWF0dGVkVmFsdWU7XG4gICAgICAgICAgICAgIGlmIChmb3JtYXR0ZWRWYWx1ZSAhPT0gbnVsbCAmJiBmb3JtYXR0ZWRWYWx1ZSAhPT0gdW5kZWZpbmVkICYmIGV2ZW50LnRhcmdldCAhPT0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCkge1xuICAgICAgICAgICAgICAgIGV2ZW50LnRhcmdldC52YWx1ZSA9IGZvcm1hdHRlZFZhbHVlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHN0b3JhZ2Uuc2V0VmFsdWUoaWQsIHtcbiAgICAgICAgICAgICAgICBmb3JtYXR0ZWRWYWx1ZVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZWxSYW5nZShldmVudCkge1xuICAgICAgICAgICAgICBldmVudC50YXJnZXQuc2V0U2VsZWN0aW9uUmFuZ2UoLi4uZXZlbnQuZGV0YWlsLnNlbFJhbmdlKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjaGFyTGltaXQ6IGV2ZW50ID0+IHtcbiAgICAgICAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgICAgIGNoYXJMaW1pdFxuICAgICAgICAgICAgICB9ID0gZXZlbnQuZGV0YWlsO1xuICAgICAgICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0XG4gICAgICAgICAgICAgIH0gPSBldmVudDtcbiAgICAgICAgICAgICAgaWYgKGNoYXJMaW1pdCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHRhcmdldC5yZW1vdmVBdHRyaWJ1dGUoXCJtYXhMZW5ndGhcIik7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHRhcmdldC5zZXRBdHRyaWJ1dGUoXCJtYXhMZW5ndGhcIiwgY2hhckxpbWl0KTtcbiAgICAgICAgICAgICAgbGV0IHZhbHVlID0gZWxlbWVudERhdGEudXNlclZhbHVlO1xuICAgICAgICAgICAgICBpZiAoIXZhbHVlIHx8IHZhbHVlLmxlbmd0aCA8PSBjaGFyTGltaXQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS5zbGljZSgwLCBjaGFyTGltaXQpO1xuICAgICAgICAgICAgICB0YXJnZXQudmFsdWUgPSBlbGVtZW50RGF0YS51c2VyVmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgc3RvcmFnZS5zZXRWYWx1ZShpZCwge1xuICAgICAgICAgICAgICAgIHZhbHVlXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB0aGlzLmxpbmtTZXJ2aWNlLmV2ZW50QnVzPy5kaXNwYXRjaChcImRpc3BhdGNoZXZlbnRpbnNhbmRib3hcIiwge1xuICAgICAgICAgICAgICAgIHNvdXJjZTogdGhpcyxcbiAgICAgICAgICAgICAgICBkZXRhaWw6IHtcbiAgICAgICAgICAgICAgICAgIGlkLFxuICAgICAgICAgICAgICAgICAgbmFtZTogXCJLZXlzdHJva2VcIixcbiAgICAgICAgICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgICAgICAgICAgd2lsbENvbW1pdDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgIGNvbW1pdEtleTogMSxcbiAgICAgICAgICAgICAgICAgIHNlbFN0YXJ0OiB0YXJnZXQuc2VsZWN0aW9uU3RhcnQsXG4gICAgICAgICAgICAgICAgICBzZWxFbmQ6IHRhcmdldC5zZWxlY3Rpb25FbmRcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH07XG4gICAgICAgICAgdGhpcy5fZGlzcGF0Y2hFdmVudEZyb21TYW5kYm94KGFjdGlvbnMsIGpzRXZlbnQpO1xuICAgICAgICB9KTtcbiAgICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCBldmVudCA9PiB7XG4gICAgICAgICAgZWxlbWVudERhdGEuY29tbWl0S2V5ID0gMTtcbiAgICAgICAgICBsZXQgY29tbWl0S2V5ID0gLTE7XG4gICAgICAgICAgaWYgKGV2ZW50LmtleSA9PT0gXCJFc2NhcGVcIikge1xuICAgICAgICAgICAgY29tbWl0S2V5ID0gMDtcbiAgICAgICAgICB9IGVsc2UgaWYgKGV2ZW50LmtleSA9PT0gXCJFbnRlclwiICYmICF0aGlzLmRhdGEubXVsdGlMaW5lKSB7XG4gICAgICAgICAgICBjb21taXRLZXkgPSAyO1xuICAgICAgICAgIH0gZWxzZSBpZiAoZXZlbnQua2V5ID09PSBcIlRhYlwiKSB7XG4gICAgICAgICAgICBlbGVtZW50RGF0YS5jb21taXRLZXkgPSAzO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoY29tbWl0S2V5ID09PSAtMSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICB2YWx1ZVxuICAgICAgICAgIH0gPSBldmVudC50YXJnZXQ7XG4gICAgICAgICAgaWYgKGVsZW1lbnREYXRhLmxhc3RDb21taXR0ZWRWYWx1ZSA9PT0gdmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxlbWVudERhdGEubGFzdENvbW1pdHRlZFZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgZWxlbWVudERhdGEudXNlclZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgdGhpcy5saW5rU2VydmljZS5ldmVudEJ1cz8uZGlzcGF0Y2goXCJkaXNwYXRjaGV2ZW50aW5zYW5kYm94XCIsIHtcbiAgICAgICAgICAgIHNvdXJjZTogdGhpcyxcbiAgICAgICAgICAgIGRldGFpbDoge1xuICAgICAgICAgICAgICBpZCxcbiAgICAgICAgICAgICAgbmFtZTogXCJLZXlzdHJva2VcIixcbiAgICAgICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgICAgIHdpbGxDb21taXQ6IHRydWUsXG4gICAgICAgICAgICAgIGNvbW1pdEtleSxcbiAgICAgICAgICAgICAgc2VsU3RhcnQ6IGV2ZW50LnRhcmdldC5zZWxlY3Rpb25TdGFydCxcbiAgICAgICAgICAgICAgc2VsRW5kOiBldmVudC50YXJnZXQuc2VsZWN0aW9uRW5kXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBfYmx1ckxpc3RlbmVyID0gYmx1ckxpc3RlbmVyO1xuICAgICAgICBibHVyTGlzdGVuZXIgPSBudWxsO1xuICAgICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJibHVyXCIsIGV2ZW50ID0+IHtcbiAgICAgICAgICBpZiAoIWVsZW1lbnREYXRhLmZvY3VzZWQgfHwgIWV2ZW50LnJlbGF0ZWRUYXJnZXQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCF0aGlzLmRhdGEuYWN0aW9ucz8uQmx1cikge1xuICAgICAgICAgICAgZWxlbWVudERhdGEuZm9jdXNlZCA9IGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICB2YWx1ZVxuICAgICAgICAgIH0gPSBldmVudC50YXJnZXQ7XG4gICAgICAgICAgZWxlbWVudERhdGEudXNlclZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgaWYgKGVsZW1lbnREYXRhLmxhc3RDb21taXR0ZWRWYWx1ZSAhPT0gdmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMubGlua1NlcnZpY2UuZXZlbnRCdXM/LmRpc3BhdGNoKFwiZGlzcGF0Y2hldmVudGluc2FuZGJveFwiLCB7XG4gICAgICAgICAgICAgIHNvdXJjZTogdGhpcyxcbiAgICAgICAgICAgICAgZGV0YWlsOiB7XG4gICAgICAgICAgICAgICAgaWQsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJLZXlzdHJva2VcIixcbiAgICAgICAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICAgICAgICB3aWxsQ29tbWl0OiB0cnVlLFxuICAgICAgICAgICAgICAgIGNvbW1pdEtleTogZWxlbWVudERhdGEuY29tbWl0S2V5LFxuICAgICAgICAgICAgICAgIHNlbFN0YXJ0OiBldmVudC50YXJnZXQuc2VsZWN0aW9uU3RhcnQsXG4gICAgICAgICAgICAgICAgc2VsRW5kOiBldmVudC50YXJnZXQuc2VsZWN0aW9uRW5kXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBfYmx1ckxpc3RlbmVyKGV2ZW50KTtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmICh0aGlzLmRhdGEuYWN0aW9ucz8uS2V5c3Ryb2tlKSB7XG4gICAgICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiYmVmb3JlaW5wdXRcIiwgZXZlbnQgPT4ge1xuICAgICAgICAgICAgZWxlbWVudERhdGEubGFzdENvbW1pdHRlZFZhbHVlID0gbnVsbDtcbiAgICAgICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgICAgZGF0YSxcbiAgICAgICAgICAgICAgdGFyZ2V0XG4gICAgICAgICAgICB9ID0gZXZlbnQ7XG4gICAgICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgICAgICBzZWxlY3Rpb25TdGFydCxcbiAgICAgICAgICAgICAgc2VsZWN0aW9uRW5kXG4gICAgICAgICAgICB9ID0gdGFyZ2V0O1xuICAgICAgICAgICAgbGV0IHNlbFN0YXJ0ID0gc2VsZWN0aW9uU3RhcnQsXG4gICAgICAgICAgICAgIHNlbEVuZCA9IHNlbGVjdGlvbkVuZDtcbiAgICAgICAgICAgIHN3aXRjaCAoZXZlbnQuaW5wdXRUeXBlKSB7XG4gICAgICAgICAgICAgIGNhc2UgXCJkZWxldGVXb3JkQmFja3dhcmRcIjpcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBjb25zdCBtYXRjaCA9IHZhbHVlLnN1YnN0cmluZygwLCBzZWxlY3Rpb25TdGFydCkubWF0Y2goL1xcdypbXlxcd10qJC8pO1xuICAgICAgICAgICAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbFN0YXJ0IC09IG1hdGNoWzBdLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgY2FzZSBcImRlbGV0ZVdvcmRGb3J3YXJkXCI6XG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgY29uc3QgbWF0Y2ggPSB2YWx1ZS5zdWJzdHJpbmcoc2VsZWN0aW9uU3RhcnQpLm1hdGNoKC9eW15cXHddKlxcdyovKTtcbiAgICAgICAgICAgICAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICAgICAgICAgICAgICBzZWxFbmQgKz0gbWF0Y2hbMF0ubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBjYXNlIFwiZGVsZXRlQ29udGVudEJhY2t3YXJkXCI6XG4gICAgICAgICAgICAgICAgaWYgKHNlbGVjdGlvblN0YXJ0ID09PSBzZWxlY3Rpb25FbmQpIHtcbiAgICAgICAgICAgICAgICAgIHNlbFN0YXJ0IC09IDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIFwiZGVsZXRlQ29udGVudEZvcndhcmRcIjpcbiAgICAgICAgICAgICAgICBpZiAoc2VsZWN0aW9uU3RhcnQgPT09IHNlbGVjdGlvbkVuZCkge1xuICAgICAgICAgICAgICAgICAgc2VsRW5kICs9IDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIHRoaXMubGlua1NlcnZpY2UuZXZlbnRCdXM/LmRpc3BhdGNoKFwiZGlzcGF0Y2hldmVudGluc2FuZGJveFwiLCB7XG4gICAgICAgICAgICAgIHNvdXJjZTogdGhpcyxcbiAgICAgICAgICAgICAgZGV0YWlsOiB7XG4gICAgICAgICAgICAgICAgaWQsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJLZXlzdHJva2VcIixcbiAgICAgICAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICAgICAgICBjaGFuZ2U6IGRhdGEgfHwgXCJcIixcbiAgICAgICAgICAgICAgICB3aWxsQ29tbWl0OiBmYWxzZSxcbiAgICAgICAgICAgICAgICBzZWxTdGFydCxcbiAgICAgICAgICAgICAgICBzZWxFbmRcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fc2V0RXZlbnRMaXN0ZW5lcnMoZWxlbWVudCwgZWxlbWVudERhdGEsIFtbXCJmb2N1c1wiLCBcIkZvY3VzXCJdLCBbXCJibHVyXCIsIFwiQmx1clwiXSwgW1wibW91c2Vkb3duXCIsIFwiTW91c2UgRG93blwiXSwgW1wibW91c2VlbnRlclwiLCBcIk1vdXNlIEVudGVyXCJdLCBbXCJtb3VzZWxlYXZlXCIsIFwiTW91c2UgRXhpdFwiXSwgW1wibW91c2V1cFwiLCBcIk1vdXNlIFVwXCJdXSwgZXZlbnQgPT4gZXZlbnQudGFyZ2V0LnZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGlmIChibHVyTGlzdGVuZXIpIHtcbiAgICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiYmx1clwiLCBibHVyTGlzdGVuZXIpO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuZGF0YS5jb21iKSB7XG4gICAgICAgIGNvbnN0IGZpZWxkV2lkdGggPSB0aGlzLmRhdGEucmVjdFsyXSAtIHRoaXMuZGF0YS5yZWN0WzBdO1xuICAgICAgICBjb25zdCBjb21iV2lkdGggPSBmaWVsZFdpZHRoIC8gbWF4TGVuO1xuICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJjb21iXCIpO1xuICAgICAgICBlbGVtZW50LnN0eWxlLmxldHRlclNwYWNpbmcgPSBgY2FsYygke2NvbWJXaWR0aH1weCAqIHZhcigtLXNjYWxlLWZhY3RvcikgLSAxY2gpYDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICBlbGVtZW50LnRleHRDb250ZW50ID0gdGhpcy5kYXRhLmZpZWxkVmFsdWU7XG4gICAgICBlbGVtZW50LnN0eWxlLnZlcnRpY2FsQWxpZ24gPSBcIm1pZGRsZVwiO1xuICAgICAgZWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gXCJ0YWJsZS1jZWxsXCI7XG4gICAgICBpZiAodGhpcy5kYXRhLmhhc093bkNhbnZhcykge1xuICAgICAgICBlbGVtZW50LmhpZGRlbiA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuX3NldFRleHRTdHlsZShlbGVtZW50KTtcbiAgICB0aGlzLl9zZXRCYWNrZ3JvdW5kQ29sb3IoZWxlbWVudCk7XG4gICAgdGhpcy5fc2V0RGVmYXVsdFByb3BlcnRpZXNGcm9tSlMoZWxlbWVudCk7XG4gICAgdGhpcy5jb250YWluZXIuYXBwZW5kKGVsZW1lbnQpO1xuICAgIHJldHVybiB0aGlzLmNvbnRhaW5lcjtcbiAgfVxufVxuY2xhc3MgU2lnbmF0dXJlV2lkZ2V0QW5ub3RhdGlvbkVsZW1lbnQgZXh0ZW5kcyBXaWRnZXRBbm5vdGF0aW9uRWxlbWVudCB7XG4gIGNvbnN0cnVjdG9yKHBhcmFtZXRlcnMpIHtcbiAgICBzdXBlcihwYXJhbWV0ZXJzLCB7XG4gICAgICBpc1JlbmRlcmFibGU6ICEhcGFyYW1ldGVycy5kYXRhLmhhc093bkNhbnZhc1xuICAgIH0pO1xuICB9XG59XG5jbGFzcyBDaGVja2JveFdpZGdldEFubm90YXRpb25FbGVtZW50IGV4dGVuZHMgV2lkZ2V0QW5ub3RhdGlvbkVsZW1lbnQge1xuICBjb25zdHJ1Y3RvcihwYXJhbWV0ZXJzKSB7XG4gICAgc3VwZXIocGFyYW1ldGVycywge1xuICAgICAgaXNSZW5kZXJhYmxlOiBwYXJhbWV0ZXJzLnJlbmRlckZvcm1zXG4gICAgfSk7XG4gIH1cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHN0b3JhZ2UgPSB0aGlzLmFubm90YXRpb25TdG9yYWdlO1xuICAgIGNvbnN0IGRhdGEgPSB0aGlzLmRhdGE7XG4gICAgY29uc3QgaWQgPSBkYXRhLmlkO1xuICAgIGxldCB2YWx1ZSA9IHN0b3JhZ2UuZ2V0VmFsdWUoaWQsIHtcbiAgICAgIHZhbHVlOiBkYXRhLmV4cG9ydFZhbHVlID09PSBkYXRhLmZpZWxkVmFsdWVcbiAgICB9KS52YWx1ZTtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiKSB7XG4gICAgICB2YWx1ZSA9IHZhbHVlICE9PSBcIk9mZlwiO1xuICAgICAgc3RvcmFnZS5zZXRWYWx1ZShpZCwge1xuICAgICAgICB2YWx1ZVxuICAgICAgfSk7XG4gICAgfVxuICAgIHRoaXMuY29udGFpbmVyLmNsYXNzTGlzdC5hZGQoXCJidXR0b25XaWRnZXRBbm5vdGF0aW9uXCIsIFwiY2hlY2tCb3hcIik7XG4gICAgY29uc3QgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcbiAgICBHZXRFbGVtZW50c0J5TmFtZVNldC5hZGQoZWxlbWVudCk7XG4gICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJkYXRhLWVsZW1lbnQtaWRcIiwgaWQpO1xuICAgIGVsZW1lbnQuZGlzYWJsZWQgPSBkYXRhLnJlYWRPbmx5O1xuICAgIHRoaXMuX3NldFJlcXVpcmVkKGVsZW1lbnQsIHRoaXMuZGF0YS5yZXF1aXJlZCk7XG4gICAgZWxlbWVudC50eXBlID0gXCJjaGVja2JveFwiO1xuICAgIGVsZW1lbnQubmFtZSA9IGRhdGEuZmllbGROYW1lO1xuICAgIGlmICh2YWx1ZSkge1xuICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJjaGVja2VkXCIsIHRydWUpO1xuICAgIH1cbiAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShcImV4cG9ydFZhbHVlXCIsIGRhdGEuZXhwb3J0VmFsdWUpO1xuICAgIGVsZW1lbnQudGFiSW5kZXggPSBERUZBVUxUX1RBQl9JTkRFWDtcbiAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIiwgZXZlbnQgPT4ge1xuICAgICAgY29uc3Qge1xuICAgICAgICBuYW1lLFxuICAgICAgICBjaGVja2VkXG4gICAgICB9ID0gZXZlbnQudGFyZ2V0O1xuICAgICAgZm9yIChjb25zdCBjaGVja2JveCBvZiB0aGlzLl9nZXRFbGVtZW50c0J5TmFtZShuYW1lLCBpZCkpIHtcbiAgICAgICAgY29uc3QgY3VyQ2hlY2tlZCA9IGNoZWNrZWQgJiYgY2hlY2tib3guZXhwb3J0VmFsdWUgPT09IGRhdGEuZXhwb3J0VmFsdWU7XG4gICAgICAgIGlmIChjaGVja2JveC5kb21FbGVtZW50KSB7XG4gICAgICAgICAgY2hlY2tib3guZG9tRWxlbWVudC5jaGVja2VkID0gY3VyQ2hlY2tlZDtcbiAgICAgICAgfVxuICAgICAgICBzdG9yYWdlLnNldFZhbHVlKGNoZWNrYm94LmlkLCB7XG4gICAgICAgICAgdmFsdWU6IGN1ckNoZWNrZWRcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBzdG9yYWdlLnNldFZhbHVlKGlkLCB7XG4gICAgICAgIHZhbHVlOiBjaGVja2VkXG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJyZXNldGZvcm1cIiwgZXZlbnQgPT4ge1xuICAgICAgY29uc3QgZGVmYXVsdFZhbHVlID0gZGF0YS5kZWZhdWx0RmllbGRWYWx1ZSB8fCBcIk9mZlwiO1xuICAgICAgZXZlbnQudGFyZ2V0LmNoZWNrZWQgPSBkZWZhdWx0VmFsdWUgPT09IGRhdGEuZXhwb3J0VmFsdWU7XG4gICAgfSk7XG4gICAgaWYgKHRoaXMuZW5hYmxlU2NyaXB0aW5nICYmIHRoaXMuaGFzSlNBY3Rpb25zKSB7XG4gICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJ1cGRhdGVmcm9tc2FuZGJveFwiLCBqc0V2ZW50ID0+IHtcbiAgICAgICAgY29uc3QgYWN0aW9ucyA9IHtcbiAgICAgICAgICB2YWx1ZShldmVudCkge1xuICAgICAgICAgICAgZXZlbnQudGFyZ2V0LmNoZWNrZWQgPSBldmVudC5kZXRhaWwudmFsdWUgIT09IFwiT2ZmXCI7XG4gICAgICAgICAgICBzdG9yYWdlLnNldFZhbHVlKGlkLCB7XG4gICAgICAgICAgICAgIHZhbHVlOiBldmVudC50YXJnZXQuY2hlY2tlZFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLl9kaXNwYXRjaEV2ZW50RnJvbVNhbmRib3goYWN0aW9ucywganNFdmVudCk7XG4gICAgICB9KTtcbiAgICAgIHRoaXMuX3NldEV2ZW50TGlzdGVuZXJzKGVsZW1lbnQsIG51bGwsIFtbXCJjaGFuZ2VcIiwgXCJWYWxpZGF0ZVwiXSwgW1wiY2hhbmdlXCIsIFwiQWN0aW9uXCJdLCBbXCJmb2N1c1wiLCBcIkZvY3VzXCJdLCBbXCJibHVyXCIsIFwiQmx1clwiXSwgW1wibW91c2Vkb3duXCIsIFwiTW91c2UgRG93blwiXSwgW1wibW91c2VlbnRlclwiLCBcIk1vdXNlIEVudGVyXCJdLCBbXCJtb3VzZWxlYXZlXCIsIFwiTW91c2UgRXhpdFwiXSwgW1wibW91c2V1cFwiLCBcIk1vdXNlIFVwXCJdXSwgZXZlbnQgPT4gZXZlbnQudGFyZ2V0LmNoZWNrZWQpO1xuICAgIH1cbiAgICB0aGlzLl9zZXRCYWNrZ3JvdW5kQ29sb3IoZWxlbWVudCk7XG4gICAgdGhpcy5fc2V0RGVmYXVsdFByb3BlcnRpZXNGcm9tSlMoZWxlbWVudCk7XG4gICAgdGhpcy5jb250YWluZXIuYXBwZW5kKGVsZW1lbnQpO1xuICAgIHJldHVybiB0aGlzLmNvbnRhaW5lcjtcbiAgfVxufVxuY2xhc3MgUmFkaW9CdXR0b25XaWRnZXRBbm5vdGF0aW9uRWxlbWVudCBleHRlbmRzIFdpZGdldEFubm90YXRpb25FbGVtZW50IHtcbiAgY29uc3RydWN0b3IocGFyYW1ldGVycykge1xuICAgIHN1cGVyKHBhcmFtZXRlcnMsIHtcbiAgICAgIGlzUmVuZGVyYWJsZTogcGFyYW1ldGVycy5yZW5kZXJGb3Jtc1xuICAgIH0pO1xuICB9XG4gIHJlbmRlcigpIHtcbiAgICB0aGlzLmNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKFwiYnV0dG9uV2lkZ2V0QW5ub3RhdGlvblwiLCBcInJhZGlvQnV0dG9uXCIpO1xuICAgIGNvbnN0IHN0b3JhZ2UgPSB0aGlzLmFubm90YXRpb25TdG9yYWdlO1xuICAgIGNvbnN0IGRhdGEgPSB0aGlzLmRhdGE7XG4gICAgY29uc3QgaWQgPSBkYXRhLmlkO1xuICAgIGxldCB2YWx1ZSA9IHN0b3JhZ2UuZ2V0VmFsdWUoaWQsIHtcbiAgICAgIHZhbHVlOiBkYXRhLmZpZWxkVmFsdWUgPT09IGRhdGEuYnV0dG9uVmFsdWVcbiAgICB9KS52YWx1ZTtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiKSB7XG4gICAgICB2YWx1ZSA9IHZhbHVlICE9PSBkYXRhLmJ1dHRvblZhbHVlO1xuICAgICAgc3RvcmFnZS5zZXRWYWx1ZShpZCwge1xuICAgICAgICB2YWx1ZVxuICAgICAgfSk7XG4gICAgfVxuICAgIGlmICh2YWx1ZSkge1xuICAgICAgZm9yIChjb25zdCByYWRpbyBvZiB0aGlzLl9nZXRFbGVtZW50c0J5TmFtZShkYXRhLmZpZWxkTmFtZSwgaWQpKSB7XG4gICAgICAgIHN0b3JhZ2Uuc2V0VmFsdWUocmFkaW8uaWQsIHtcbiAgICAgICAgICB2YWx1ZTogZmFsc2VcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG4gICAgR2V0RWxlbWVudHNCeU5hbWVTZXQuYWRkKGVsZW1lbnQpO1xuICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKFwiZGF0YS1lbGVtZW50LWlkXCIsIGlkKTtcbiAgICBlbGVtZW50LmRpc2FibGVkID0gZGF0YS5yZWFkT25seTtcbiAgICB0aGlzLl9zZXRSZXF1aXJlZChlbGVtZW50LCB0aGlzLmRhdGEucmVxdWlyZWQpO1xuICAgIGVsZW1lbnQudHlwZSA9IFwicmFkaW9cIjtcbiAgICBlbGVtZW50Lm5hbWUgPSBkYXRhLmZpZWxkTmFtZTtcbiAgICBpZiAodmFsdWUpIHtcbiAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKFwiY2hlY2tlZFwiLCB0cnVlKTtcbiAgICB9XG4gICAgZWxlbWVudC50YWJJbmRleCA9IERFRkFVTFRfVEFCX0lOREVYO1xuICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLCBldmVudCA9PiB7XG4gICAgICBjb25zdCB7XG4gICAgICAgIG5hbWUsXG4gICAgICAgIGNoZWNrZWRcbiAgICAgIH0gPSBldmVudC50YXJnZXQ7XG4gICAgICBmb3IgKGNvbnN0IHJhZGlvIG9mIHRoaXMuX2dldEVsZW1lbnRzQnlOYW1lKG5hbWUsIGlkKSkge1xuICAgICAgICBzdG9yYWdlLnNldFZhbHVlKHJhZGlvLmlkLCB7XG4gICAgICAgICAgdmFsdWU6IGZhbHNlXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgc3RvcmFnZS5zZXRWYWx1ZShpZCwge1xuICAgICAgICB2YWx1ZTogY2hlY2tlZFxuICAgICAgfSk7XG4gICAgfSk7XG4gICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwicmVzZXRmb3JtXCIsIGV2ZW50ID0+IHtcbiAgICAgIGNvbnN0IGRlZmF1bHRWYWx1ZSA9IGRhdGEuZGVmYXVsdEZpZWxkVmFsdWU7XG4gICAgICBldmVudC50YXJnZXQuY2hlY2tlZCA9IGRlZmF1bHRWYWx1ZSAhPT0gbnVsbCAmJiBkZWZhdWx0VmFsdWUgIT09IHVuZGVmaW5lZCAmJiBkZWZhdWx0VmFsdWUgPT09IGRhdGEuYnV0dG9uVmFsdWU7XG4gICAgfSk7XG4gICAgaWYgKHRoaXMuZW5hYmxlU2NyaXB0aW5nICYmIHRoaXMuaGFzSlNBY3Rpb25zKSB7XG4gICAgICBjb25zdCBwZGZCdXR0b25WYWx1ZSA9IGRhdGEuYnV0dG9uVmFsdWU7XG4gICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJ1cGRhdGVmcm9tc2FuZGJveFwiLCBqc0V2ZW50ID0+IHtcbiAgICAgICAgY29uc3QgYWN0aW9ucyA9IHtcbiAgICAgICAgICB2YWx1ZTogZXZlbnQgPT4ge1xuICAgICAgICAgICAgY29uc3QgY2hlY2tlZCA9IHBkZkJ1dHRvblZhbHVlID09PSBldmVudC5kZXRhaWwudmFsdWU7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHJhZGlvIG9mIHRoaXMuX2dldEVsZW1lbnRzQnlOYW1lKGV2ZW50LnRhcmdldC5uYW1lKSkge1xuICAgICAgICAgICAgICBjb25zdCBjdXJDaGVja2VkID0gY2hlY2tlZCAmJiByYWRpby5pZCA9PT0gaWQ7XG4gICAgICAgICAgICAgIGlmIChyYWRpby5kb21FbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgcmFkaW8uZG9tRWxlbWVudC5jaGVja2VkID0gY3VyQ2hlY2tlZDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBzdG9yYWdlLnNldFZhbHVlKHJhZGlvLmlkLCB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IGN1ckNoZWNrZWRcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLl9kaXNwYXRjaEV2ZW50RnJvbVNhbmRib3goYWN0aW9ucywganNFdmVudCk7XG4gICAgICB9KTtcbiAgICAgIHRoaXMuX3NldEV2ZW50TGlzdGVuZXJzKGVsZW1lbnQsIG51bGwsIFtbXCJjaGFuZ2VcIiwgXCJWYWxpZGF0ZVwiXSwgW1wiY2hhbmdlXCIsIFwiQWN0aW9uXCJdLCBbXCJmb2N1c1wiLCBcIkZvY3VzXCJdLCBbXCJibHVyXCIsIFwiQmx1clwiXSwgW1wibW91c2Vkb3duXCIsIFwiTW91c2UgRG93blwiXSwgW1wibW91c2VlbnRlclwiLCBcIk1vdXNlIEVudGVyXCJdLCBbXCJtb3VzZWxlYXZlXCIsIFwiTW91c2UgRXhpdFwiXSwgW1wibW91c2V1cFwiLCBcIk1vdXNlIFVwXCJdXSwgZXZlbnQgPT4gZXZlbnQudGFyZ2V0LmNoZWNrZWQpO1xuICAgIH1cbiAgICB0aGlzLl9zZXRCYWNrZ3JvdW5kQ29sb3IoZWxlbWVudCk7XG4gICAgdGhpcy5fc2V0RGVmYXVsdFByb3BlcnRpZXNGcm9tSlMoZWxlbWVudCk7XG4gICAgdGhpcy5jb250YWluZXIuYXBwZW5kKGVsZW1lbnQpO1xuICAgIHJldHVybiB0aGlzLmNvbnRhaW5lcjtcbiAgfVxufVxuY2xhc3MgUHVzaEJ1dHRvbldpZGdldEFubm90YXRpb25FbGVtZW50IGV4dGVuZHMgTGlua0Fubm90YXRpb25FbGVtZW50IHtcbiAgY29uc3RydWN0b3IocGFyYW1ldGVycykge1xuICAgIHN1cGVyKHBhcmFtZXRlcnMsIHtcbiAgICAgIGlnbm9yZUJvcmRlcjogcGFyYW1ldGVycy5kYXRhLmhhc0FwcGVhcmFuY2VcbiAgICB9KTtcbiAgfVxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgY29udGFpbmVyID0gc3VwZXIucmVuZGVyKCk7XG4gICAgY29udGFpbmVyLmNsYXNzTGlzdC5hZGQoXCJidXR0b25XaWRnZXRBbm5vdGF0aW9uXCIsIFwicHVzaEJ1dHRvblwiKTtcbiAgICBpZiAodGhpcy5kYXRhLmFsdGVybmF0aXZlVGV4dCkge1xuICAgICAgY29udGFpbmVyLnRpdGxlID0gdGhpcy5kYXRhLmFsdGVybmF0aXZlVGV4dDtcbiAgICB9XG4gICAgY29uc3QgbGlua0VsZW1lbnQgPSBjb250YWluZXIubGFzdENoaWxkO1xuICAgIGlmICh0aGlzLmVuYWJsZVNjcmlwdGluZyAmJiB0aGlzLmhhc0pTQWN0aW9ucyAmJiBsaW5rRWxlbWVudCkge1xuICAgICAgdGhpcy5fc2V0RGVmYXVsdFByb3BlcnRpZXNGcm9tSlMobGlua0VsZW1lbnQpO1xuICAgICAgbGlua0VsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInVwZGF0ZWZyb21zYW5kYm94XCIsIGpzRXZlbnQgPT4ge1xuICAgICAgICB0aGlzLl9kaXNwYXRjaEV2ZW50RnJvbVNhbmRib3goe30sIGpzRXZlbnQpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBjb250YWluZXI7XG4gIH1cbn1cbmNsYXNzIENob2ljZVdpZGdldEFubm90YXRpb25FbGVtZW50IGV4dGVuZHMgV2lkZ2V0QW5ub3RhdGlvbkVsZW1lbnQge1xuICBjb25zdHJ1Y3RvcihwYXJhbWV0ZXJzKSB7XG4gICAgc3VwZXIocGFyYW1ldGVycywge1xuICAgICAgaXNSZW5kZXJhYmxlOiBwYXJhbWV0ZXJzLnJlbmRlckZvcm1zXG4gICAgfSk7XG4gIH1cbiAgcmVuZGVyKCkge1xuICAgIHRoaXMuY29udGFpbmVyLmNsYXNzTGlzdC5hZGQoXCJjaG9pY2VXaWRnZXRBbm5vdGF0aW9uXCIpO1xuICAgIGNvbnN0IHN0b3JhZ2UgPSB0aGlzLmFubm90YXRpb25TdG9yYWdlO1xuICAgIGNvbnN0IGlkID0gdGhpcy5kYXRhLmlkO1xuICAgIGNvbnN0IHN0b3JlZERhdGEgPSBzdG9yYWdlLmdldFZhbHVlKGlkLCB7XG4gICAgICB2YWx1ZTogdGhpcy5kYXRhLmZpZWxkVmFsdWVcbiAgICB9KTtcbiAgICBjb25zdCBzZWxlY3RFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNlbGVjdFwiKTtcbiAgICBHZXRFbGVtZW50c0J5TmFtZVNldC5hZGQoc2VsZWN0RWxlbWVudCk7XG4gICAgc2VsZWN0RWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJkYXRhLWVsZW1lbnQtaWRcIiwgaWQpO1xuICAgIHNlbGVjdEVsZW1lbnQuZGlzYWJsZWQgPSB0aGlzLmRhdGEucmVhZE9ubHk7XG4gICAgdGhpcy5fc2V0UmVxdWlyZWQoc2VsZWN0RWxlbWVudCwgdGhpcy5kYXRhLnJlcXVpcmVkKTtcbiAgICBzZWxlY3RFbGVtZW50Lm5hbWUgPSB0aGlzLmRhdGEuZmllbGROYW1lO1xuICAgIHNlbGVjdEVsZW1lbnQudGFiSW5kZXggPSBERUZBVUxUX1RBQl9JTkRFWDtcbiAgICBsZXQgYWRkQW5FbXB0eUVudHJ5ID0gdGhpcy5kYXRhLmNvbWJvICYmIHRoaXMuZGF0YS5vcHRpb25zLmxlbmd0aCA+IDA7XG4gICAgaWYgKCF0aGlzLmRhdGEuY29tYm8pIHtcbiAgICAgIHNlbGVjdEVsZW1lbnQuc2l6ZSA9IHRoaXMuZGF0YS5vcHRpb25zLmxlbmd0aDtcbiAgICAgIGlmICh0aGlzLmRhdGEubXVsdGlTZWxlY3QpIHtcbiAgICAgICAgc2VsZWN0RWxlbWVudC5tdWx0aXBsZSA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIHNlbGVjdEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInJlc2V0Zm9ybVwiLCBldmVudCA9PiB7XG4gICAgICBjb25zdCBkZWZhdWx0VmFsdWUgPSB0aGlzLmRhdGEuZGVmYXVsdEZpZWxkVmFsdWU7XG4gICAgICBmb3IgKGNvbnN0IG9wdGlvbiBvZiBzZWxlY3RFbGVtZW50Lm9wdGlvbnMpIHtcbiAgICAgICAgb3B0aW9uLnNlbGVjdGVkID0gb3B0aW9uLnZhbHVlID09PSBkZWZhdWx0VmFsdWU7XG4gICAgICB9XG4gICAgfSk7XG4gICAgZm9yIChjb25zdCBvcHRpb24gb2YgdGhpcy5kYXRhLm9wdGlvbnMpIHtcbiAgICAgIGNvbnN0IG9wdGlvbkVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwib3B0aW9uXCIpO1xuICAgICAgb3B0aW9uRWxlbWVudC50ZXh0Q29udGVudCA9IG9wdGlvbi5kaXNwbGF5VmFsdWU7XG4gICAgICBvcHRpb25FbGVtZW50LnZhbHVlID0gb3B0aW9uLmV4cG9ydFZhbHVlO1xuICAgICAgaWYgKHN0b3JlZERhdGEudmFsdWUuaW5jbHVkZXMob3B0aW9uLmV4cG9ydFZhbHVlKSkge1xuICAgICAgICBvcHRpb25FbGVtZW50LnNldEF0dHJpYnV0ZShcInNlbGVjdGVkXCIsIHRydWUpO1xuICAgICAgICBhZGRBbkVtcHR5RW50cnkgPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHNlbGVjdEVsZW1lbnQuYXBwZW5kKG9wdGlvbkVsZW1lbnQpO1xuICAgIH1cbiAgICBsZXQgcmVtb3ZlRW1wdHlFbnRyeSA9IG51bGw7XG4gICAgaWYgKGFkZEFuRW1wdHlFbnRyeSkge1xuICAgICAgY29uc3Qgbm9uZU9wdGlvbkVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwib3B0aW9uXCIpO1xuICAgICAgbm9uZU9wdGlvbkVsZW1lbnQudmFsdWUgPSBcIiBcIjtcbiAgICAgIG5vbmVPcHRpb25FbGVtZW50LnNldEF0dHJpYnV0ZShcImhpZGRlblwiLCB0cnVlKTtcbiAgICAgIG5vbmVPcHRpb25FbGVtZW50LnNldEF0dHJpYnV0ZShcInNlbGVjdGVkXCIsIHRydWUpO1xuICAgICAgc2VsZWN0RWxlbWVudC5wcmVwZW5kKG5vbmVPcHRpb25FbGVtZW50KTtcbiAgICAgIHJlbW92ZUVtcHR5RW50cnkgPSAoKSA9PiB7XG4gICAgICAgIG5vbmVPcHRpb25FbGVtZW50LnJlbW92ZSgpO1xuICAgICAgICBzZWxlY3RFbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJpbnB1dFwiLCByZW1vdmVFbXB0eUVudHJ5KTtcbiAgICAgICAgcmVtb3ZlRW1wdHlFbnRyeSA9IG51bGw7XG4gICAgICB9O1xuICAgICAgc2VsZWN0RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiaW5wdXRcIiwgcmVtb3ZlRW1wdHlFbnRyeSk7XG4gICAgfVxuICAgIGNvbnN0IGdldFZhbHVlID0gaXNFeHBvcnQgPT4ge1xuICAgICAgY29uc3QgbmFtZSA9IGlzRXhwb3J0ID8gXCJ2YWx1ZVwiIDogXCJ0ZXh0Q29udGVudFwiO1xuICAgICAgY29uc3Qge1xuICAgICAgICBvcHRpb25zLFxuICAgICAgICBtdWx0aXBsZVxuICAgICAgfSA9IHNlbGVjdEVsZW1lbnQ7XG4gICAgICBpZiAoIW11bHRpcGxlKSB7XG4gICAgICAgIHJldHVybiBvcHRpb25zLnNlbGVjdGVkSW5kZXggPT09IC0xID8gbnVsbCA6IG9wdGlvbnNbb3B0aW9ucy5zZWxlY3RlZEluZGV4XVtuYW1lXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBBcnJheS5wcm90b3R5cGUuZmlsdGVyLmNhbGwob3B0aW9ucywgb3B0aW9uID0+IG9wdGlvbi5zZWxlY3RlZCkubWFwKG9wdGlvbiA9PiBvcHRpb25bbmFtZV0pO1xuICAgIH07XG4gICAgbGV0IHNlbGVjdGVkVmFsdWVzID0gZ2V0VmFsdWUoZmFsc2UpO1xuICAgIGNvbnN0IGdldEl0ZW1zID0gZXZlbnQgPT4ge1xuICAgICAgY29uc3Qgb3B0aW9ucyA9IGV2ZW50LnRhcmdldC5vcHRpb25zO1xuICAgICAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5tYXAuY2FsbChvcHRpb25zLCBvcHRpb24gPT4ge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGRpc3BsYXlWYWx1ZTogb3B0aW9uLnRleHRDb250ZW50LFxuICAgICAgICAgIGV4cG9ydFZhbHVlOiBvcHRpb24udmFsdWVcbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICAgIH07XG4gICAgaWYgKHRoaXMuZW5hYmxlU2NyaXB0aW5nICYmIHRoaXMuaGFzSlNBY3Rpb25zKSB7XG4gICAgICBzZWxlY3RFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJ1cGRhdGVmcm9tc2FuZGJveFwiLCBqc0V2ZW50ID0+IHtcbiAgICAgICAgY29uc3QgYWN0aW9ucyA9IHtcbiAgICAgICAgICB2YWx1ZShldmVudCkge1xuICAgICAgICAgICAgcmVtb3ZlRW1wdHlFbnRyeT8uKCk7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IGV2ZW50LmRldGFpbC52YWx1ZTtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlcyA9IG5ldyBTZXQoQXJyYXkuaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZSA6IFt2YWx1ZV0pO1xuICAgICAgICAgICAgZm9yIChjb25zdCBvcHRpb24gb2Ygc2VsZWN0RWxlbWVudC5vcHRpb25zKSB7XG4gICAgICAgICAgICAgIG9wdGlvbi5zZWxlY3RlZCA9IHZhbHVlcy5oYXMob3B0aW9uLnZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN0b3JhZ2Uuc2V0VmFsdWUoaWQsIHtcbiAgICAgICAgICAgICAgdmFsdWU6IGdldFZhbHVlKHRydWUpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHNlbGVjdGVkVmFsdWVzID0gZ2V0VmFsdWUoZmFsc2UpO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgbXVsdGlwbGVTZWxlY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgIHNlbGVjdEVsZW1lbnQubXVsdGlwbGUgPSB0cnVlO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgcmVtb3ZlKGV2ZW50KSB7XG4gICAgICAgICAgICBjb25zdCBvcHRpb25zID0gc2VsZWN0RWxlbWVudC5vcHRpb25zO1xuICAgICAgICAgICAgY29uc3QgaW5kZXggPSBldmVudC5kZXRhaWwucmVtb3ZlO1xuICAgICAgICAgICAgb3B0aW9uc1tpbmRleF0uc2VsZWN0ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIHNlbGVjdEVsZW1lbnQucmVtb3ZlKGluZGV4KTtcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgY29uc3QgaSA9IEFycmF5LnByb3RvdHlwZS5maW5kSW5kZXguY2FsbChvcHRpb25zLCBvcHRpb24gPT4gb3B0aW9uLnNlbGVjdGVkKTtcbiAgICAgICAgICAgICAgaWYgKGkgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgb3B0aW9uc1swXS5zZWxlY3RlZCA9IHRydWU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN0b3JhZ2Uuc2V0VmFsdWUoaWQsIHtcbiAgICAgICAgICAgICAgdmFsdWU6IGdldFZhbHVlKHRydWUpLFxuICAgICAgICAgICAgICBpdGVtczogZ2V0SXRlbXMoZXZlbnQpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHNlbGVjdGVkVmFsdWVzID0gZ2V0VmFsdWUoZmFsc2UpO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgY2xlYXIoZXZlbnQpIHtcbiAgICAgICAgICAgIHdoaWxlIChzZWxlY3RFbGVtZW50Lmxlbmd0aCAhPT0gMCkge1xuICAgICAgICAgICAgICBzZWxlY3RFbGVtZW50LnJlbW92ZSgwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN0b3JhZ2Uuc2V0VmFsdWUoaWQsIHtcbiAgICAgICAgICAgICAgdmFsdWU6IG51bGwsXG4gICAgICAgICAgICAgIGl0ZW1zOiBbXVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBzZWxlY3RlZFZhbHVlcyA9IGdldFZhbHVlKGZhbHNlKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIGluc2VydChldmVudCkge1xuICAgICAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgICBpbmRleCxcbiAgICAgICAgICAgICAgZGlzcGxheVZhbHVlLFxuICAgICAgICAgICAgICBleHBvcnRWYWx1ZVxuICAgICAgICAgICAgfSA9IGV2ZW50LmRldGFpbC5pbnNlcnQ7XG4gICAgICAgICAgICBjb25zdCBzZWxlY3RDaGlsZCA9IHNlbGVjdEVsZW1lbnQuY2hpbGRyZW5baW5kZXhdO1xuICAgICAgICAgICAgY29uc3Qgb3B0aW9uRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJvcHRpb25cIik7XG4gICAgICAgICAgICBvcHRpb25FbGVtZW50LnRleHRDb250ZW50ID0gZGlzcGxheVZhbHVlO1xuICAgICAgICAgICAgb3B0aW9uRWxlbWVudC52YWx1ZSA9IGV4cG9ydFZhbHVlO1xuICAgICAgICAgICAgaWYgKHNlbGVjdENoaWxkKSB7XG4gICAgICAgICAgICAgIHNlbGVjdENoaWxkLmJlZm9yZShvcHRpb25FbGVtZW50KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHNlbGVjdEVsZW1lbnQuYXBwZW5kKG9wdGlvbkVsZW1lbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3RvcmFnZS5zZXRWYWx1ZShpZCwge1xuICAgICAgICAgICAgICB2YWx1ZTogZ2V0VmFsdWUodHJ1ZSksXG4gICAgICAgICAgICAgIGl0ZW1zOiBnZXRJdGVtcyhldmVudClcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgc2VsZWN0ZWRWYWx1ZXMgPSBnZXRWYWx1ZShmYWxzZSk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBpdGVtcyhldmVudCkge1xuICAgICAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgICBpdGVtc1xuICAgICAgICAgICAgfSA9IGV2ZW50LmRldGFpbDtcbiAgICAgICAgICAgIHdoaWxlIChzZWxlY3RFbGVtZW50Lmxlbmd0aCAhPT0gMCkge1xuICAgICAgICAgICAgICBzZWxlY3RFbGVtZW50LnJlbW92ZSgwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAoY29uc3QgaXRlbSBvZiBpdGVtcykge1xuICAgICAgICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICAgICAgZGlzcGxheVZhbHVlLFxuICAgICAgICAgICAgICAgIGV4cG9ydFZhbHVlXG4gICAgICAgICAgICAgIH0gPSBpdGVtO1xuICAgICAgICAgICAgICBjb25zdCBvcHRpb25FbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIm9wdGlvblwiKTtcbiAgICAgICAgICAgICAgb3B0aW9uRWxlbWVudC50ZXh0Q29udGVudCA9IGRpc3BsYXlWYWx1ZTtcbiAgICAgICAgICAgICAgb3B0aW9uRWxlbWVudC52YWx1ZSA9IGV4cG9ydFZhbHVlO1xuICAgICAgICAgICAgICBzZWxlY3RFbGVtZW50LmFwcGVuZChvcHRpb25FbGVtZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzZWxlY3RFbGVtZW50Lm9wdGlvbnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICBzZWxlY3RFbGVtZW50Lm9wdGlvbnNbMF0uc2VsZWN0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3RvcmFnZS5zZXRWYWx1ZShpZCwge1xuICAgICAgICAgICAgICB2YWx1ZTogZ2V0VmFsdWUodHJ1ZSksXG4gICAgICAgICAgICAgIGl0ZW1zOiBnZXRJdGVtcyhldmVudClcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgc2VsZWN0ZWRWYWx1ZXMgPSBnZXRWYWx1ZShmYWxzZSk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBpbmRpY2VzKGV2ZW50KSB7XG4gICAgICAgICAgICBjb25zdCBpbmRpY2VzID0gbmV3IFNldChldmVudC5kZXRhaWwuaW5kaWNlcyk7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IG9wdGlvbiBvZiBldmVudC50YXJnZXQub3B0aW9ucykge1xuICAgICAgICAgICAgICBvcHRpb24uc2VsZWN0ZWQgPSBpbmRpY2VzLmhhcyhvcHRpb24uaW5kZXgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3RvcmFnZS5zZXRWYWx1ZShpZCwge1xuICAgICAgICAgICAgICB2YWx1ZTogZ2V0VmFsdWUodHJ1ZSlcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgc2VsZWN0ZWRWYWx1ZXMgPSBnZXRWYWx1ZShmYWxzZSk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBlZGl0YWJsZShldmVudCkge1xuICAgICAgICAgICAgZXZlbnQudGFyZ2V0LmRpc2FibGVkID0gIWV2ZW50LmRldGFpbC5lZGl0YWJsZTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuX2Rpc3BhdGNoRXZlbnRGcm9tU2FuZGJveChhY3Rpb25zLCBqc0V2ZW50KTtcbiAgICAgIH0pO1xuICAgICAgc2VsZWN0RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiaW5wdXRcIiwgZXZlbnQgPT4ge1xuICAgICAgICBjb25zdCBleHBvcnRWYWx1ZSA9IGdldFZhbHVlKHRydWUpO1xuICAgICAgICBzdG9yYWdlLnNldFZhbHVlKGlkLCB7XG4gICAgICAgICAgdmFsdWU6IGV4cG9ydFZhbHVlXG4gICAgICAgIH0pO1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB0aGlzLmxpbmtTZXJ2aWNlLmV2ZW50QnVzPy5kaXNwYXRjaChcImRpc3BhdGNoZXZlbnRpbnNhbmRib3hcIiwge1xuICAgICAgICAgIHNvdXJjZTogdGhpcyxcbiAgICAgICAgICBkZXRhaWw6IHtcbiAgICAgICAgICAgIGlkLFxuICAgICAgICAgICAgbmFtZTogXCJLZXlzdHJva2VcIixcbiAgICAgICAgICAgIHZhbHVlOiBzZWxlY3RlZFZhbHVlcyxcbiAgICAgICAgICAgIGNoYW5nZUV4OiBleHBvcnRWYWx1ZSxcbiAgICAgICAgICAgIHdpbGxDb21taXQ6IGZhbHNlLFxuICAgICAgICAgICAgY29tbWl0S2V5OiAxLFxuICAgICAgICAgICAga2V5RG93bjogZmFsc2VcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgICB0aGlzLl9zZXRFdmVudExpc3RlbmVycyhzZWxlY3RFbGVtZW50LCBudWxsLCBbW1wiZm9jdXNcIiwgXCJGb2N1c1wiXSwgW1wiYmx1clwiLCBcIkJsdXJcIl0sIFtcIm1vdXNlZG93blwiLCBcIk1vdXNlIERvd25cIl0sIFtcIm1vdXNlZW50ZXJcIiwgXCJNb3VzZSBFbnRlclwiXSwgW1wibW91c2VsZWF2ZVwiLCBcIk1vdXNlIEV4aXRcIl0sIFtcIm1vdXNldXBcIiwgXCJNb3VzZSBVcFwiXSwgW1wiaW5wdXRcIiwgXCJBY3Rpb25cIl0sIFtcImlucHV0XCIsIFwiVmFsaWRhdGVcIl1dLCBldmVudCA9PiBldmVudC50YXJnZXQudmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZWxlY3RFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJpbnB1dFwiLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgc3RvcmFnZS5zZXRWYWx1ZShpZCwge1xuICAgICAgICAgIHZhbHVlOiBnZXRWYWx1ZSh0cnVlKVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAodGhpcy5kYXRhLmNvbWJvKSB7XG4gICAgICB0aGlzLl9zZXRUZXh0U3R5bGUoc2VsZWN0RWxlbWVudCk7XG4gICAgfSBlbHNlIHt9XG4gICAgdGhpcy5fc2V0QmFja2dyb3VuZENvbG9yKHNlbGVjdEVsZW1lbnQpO1xuICAgIHRoaXMuX3NldERlZmF1bHRQcm9wZXJ0aWVzRnJvbUpTKHNlbGVjdEVsZW1lbnQpO1xuICAgIHRoaXMuY29udGFpbmVyLmFwcGVuZChzZWxlY3RFbGVtZW50KTtcbiAgICByZXR1cm4gdGhpcy5jb250YWluZXI7XG4gIH1cbn1cbmNsYXNzIFBvcHVwQW5ub3RhdGlvbkVsZW1lbnQgZXh0ZW5kcyBBbm5vdGF0aW9uRWxlbWVudCB7XG4gIGNvbnN0cnVjdG9yKHBhcmFtZXRlcnMpIHtcbiAgICBjb25zdCB7XG4gICAgICBkYXRhLFxuICAgICAgZWxlbWVudHNcbiAgICB9ID0gcGFyYW1ldGVycztcbiAgICBzdXBlcihwYXJhbWV0ZXJzLCB7XG4gICAgICBpc1JlbmRlcmFibGU6IEFubm90YXRpb25FbGVtZW50Ll9oYXNQb3B1cERhdGEoZGF0YSlcbiAgICB9KTtcbiAgICB0aGlzLmVsZW1lbnRzID0gZWxlbWVudHM7XG4gIH1cbiAgcmVuZGVyKCkge1xuICAgIHRoaXMuY29udGFpbmVyLmNsYXNzTGlzdC5hZGQoXCJwb3B1cEFubm90YXRpb25cIik7XG4gICAgY29uc3QgcG9wdXAgPSBuZXcgUG9wdXBFbGVtZW50KHtcbiAgICAgIGNvbnRhaW5lcjogdGhpcy5jb250YWluZXIsXG4gICAgICBjb2xvcjogdGhpcy5kYXRhLmNvbG9yLFxuICAgICAgdGl0bGVPYmo6IHRoaXMuZGF0YS50aXRsZU9iaixcbiAgICAgIG1vZGlmaWNhdGlvbkRhdGU6IHRoaXMuZGF0YS5tb2RpZmljYXRpb25EYXRlLFxuICAgICAgY29udGVudHNPYmo6IHRoaXMuZGF0YS5jb250ZW50c09iaixcbiAgICAgIHJpY2hUZXh0OiB0aGlzLmRhdGEucmljaFRleHQsXG4gICAgICByZWN0OiB0aGlzLmRhdGEucmVjdCxcbiAgICAgIHBhcmVudFJlY3Q6IHRoaXMuZGF0YS5wYXJlbnRSZWN0IHx8IG51bGwsXG4gICAgICBwYXJlbnQ6IHRoaXMucGFyZW50LFxuICAgICAgZWxlbWVudHM6IHRoaXMuZWxlbWVudHMsXG4gICAgICBvcGVuOiB0aGlzLmRhdGEub3BlblxuICAgIH0pO1xuICAgIGNvbnN0IGVsZW1lbnRJZHMgPSBbXTtcbiAgICBmb3IgKGNvbnN0IGVsZW1lbnQgb2YgdGhpcy5lbGVtZW50cykge1xuICAgICAgZWxlbWVudC5wb3B1cCA9IHBvcHVwO1xuICAgICAgZWxlbWVudElkcy5wdXNoKGVsZW1lbnQuZGF0YS5pZCk7XG4gICAgICBlbGVtZW50LmFkZEhpZ2hsaWdodEFyZWEoKTtcbiAgICB9XG4gICAgdGhpcy5jb250YWluZXIuc2V0QXR0cmlidXRlKFwiYXJpYS1jb250cm9sc1wiLCBlbGVtZW50SWRzLm1hcChpZCA9PiBgJHt1dGlsLkFubm90YXRpb25QcmVmaXh9JHtpZH1gKS5qb2luKFwiLFwiKSk7XG4gICAgcmV0dXJuIHRoaXMuY29udGFpbmVyO1xuICB9XG59XG5jbGFzcyBQb3B1cEVsZW1lbnQge1xuICAjYm91bmRLZXlEb3duID0gdGhpcy4ja2V5RG93bi5iaW5kKHRoaXMpO1xuICAjYm91bmRIaWRlID0gdGhpcy4jaGlkZS5iaW5kKHRoaXMpO1xuICAjYm91bmRTaG93ID0gdGhpcy4jc2hvdy5iaW5kKHRoaXMpO1xuICAjYm91bmRUb2dnbGUgPSB0aGlzLiN0b2dnbGUuYmluZCh0aGlzKTtcbiAgI2NvbG9yID0gbnVsbDtcbiAgI2NvbnRhaW5lciA9IG51bGw7XG4gICNjb250ZW50c09iaiA9IG51bGw7XG4gICNkYXRlT2JqID0gbnVsbDtcbiAgI2VsZW1lbnRzID0gbnVsbDtcbiAgI3BhcmVudCA9IG51bGw7XG4gICNwYXJlbnRSZWN0ID0gbnVsbDtcbiAgI3Bpbm5lZCA9IGZhbHNlO1xuICAjcG9wdXAgPSBudWxsO1xuICAjcmVjdCA9IG51bGw7XG4gICNyaWNoVGV4dCA9IG51bGw7XG4gICN0aXRsZU9iaiA9IG51bGw7XG4gICN3YXNWaXNpYmxlID0gZmFsc2U7XG4gIGNvbnN0cnVjdG9yKHtcbiAgICBjb250YWluZXIsXG4gICAgY29sb3IsXG4gICAgZWxlbWVudHMsXG4gICAgdGl0bGVPYmosXG4gICAgbW9kaWZpY2F0aW9uRGF0ZSxcbiAgICBjb250ZW50c09iaixcbiAgICByaWNoVGV4dCxcbiAgICBwYXJlbnQsXG4gICAgcmVjdCxcbiAgICBwYXJlbnRSZWN0LFxuICAgIG9wZW5cbiAgfSkge1xuICAgIHRoaXMuI2NvbnRhaW5lciA9IGNvbnRhaW5lcjtcbiAgICB0aGlzLiN0aXRsZU9iaiA9IHRpdGxlT2JqO1xuICAgIHRoaXMuI2NvbnRlbnRzT2JqID0gY29udGVudHNPYmo7XG4gICAgdGhpcy4jcmljaFRleHQgPSByaWNoVGV4dDtcbiAgICB0aGlzLiNwYXJlbnQgPSBwYXJlbnQ7XG4gICAgdGhpcy4jY29sb3IgPSBjb2xvcjtcbiAgICB0aGlzLiNyZWN0ID0gcmVjdDtcbiAgICB0aGlzLiNwYXJlbnRSZWN0ID0gcGFyZW50UmVjdDtcbiAgICB0aGlzLiNlbGVtZW50cyA9IGVsZW1lbnRzO1xuICAgIHRoaXMuI2RhdGVPYmogPSBkaXNwbGF5X3V0aWxzLlBERkRhdGVTdHJpbmcudG9EYXRlT2JqZWN0KG1vZGlmaWNhdGlvbkRhdGUpO1xuICAgIHRoaXMudHJpZ2dlciA9IGVsZW1lbnRzLmZsYXRNYXAoZSA9PiBlLmdldEVsZW1lbnRzVG9UcmlnZ2VyUG9wdXAoKSk7XG4gICAgZm9yIChjb25zdCBlbGVtZW50IG9mIHRoaXMudHJpZ2dlcikge1xuICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgdGhpcy4jYm91bmRUb2dnbGUpO1xuICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwibW91c2VlbnRlclwiLCB0aGlzLiNib3VuZFNob3cpO1xuICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwibW91c2VsZWF2ZVwiLCB0aGlzLiNib3VuZEhpZGUpO1xuICAgICAgZWxlbWVudC5jbGFzc0xpc3QuYWRkKFwicG9wdXBUcmlnZ2VyQXJlYVwiKTtcbiAgICB9XG4gICAgZm9yIChjb25zdCBlbGVtZW50IG9mIGVsZW1lbnRzKSB7XG4gICAgICBlbGVtZW50LmNvbnRhaW5lcj8uYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgdGhpcy4jYm91bmRLZXlEb3duKTtcbiAgICB9XG4gICAgdGhpcy4jY29udGFpbmVyLmhpZGRlbiA9IHRydWU7XG4gICAgaWYgKG9wZW4pIHtcbiAgICAgIHRoaXMuI3RvZ2dsZSgpO1xuICAgIH1cbiAgfVxuICByZW5kZXIoKSB7XG4gICAgaWYgKHRoaXMuI3BvcHVwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHtcbiAgICAgIHBhZ2U6IHtcbiAgICAgICAgdmlld1xuICAgICAgfSxcbiAgICAgIHZpZXdwb3J0OiB7XG4gICAgICAgIHJhd0RpbXM6IHtcbiAgICAgICAgICBwYWdlV2lkdGgsXG4gICAgICAgICAgcGFnZUhlaWdodCxcbiAgICAgICAgICBwYWdlWCxcbiAgICAgICAgICBwYWdlWVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSA9IHRoaXMuI3BhcmVudDtcbiAgICBjb25zdCBwb3B1cCA9IHRoaXMuI3BvcHVwID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICBwb3B1cC5jbGFzc05hbWUgPSBcInBvcHVwXCI7XG4gICAgaWYgKHRoaXMuI2NvbG9yKSB7XG4gICAgICBjb25zdCBiYXNlQ29sb3IgPSBwb3B1cC5zdHlsZS5vdXRsaW5lQ29sb3IgPSB1dGlsLlV0aWwubWFrZUhleENvbG9yKC4uLnRoaXMuI2NvbG9yKTtcbiAgICAgIGlmIChDU1Muc3VwcG9ydHMoXCJiYWNrZ3JvdW5kLWNvbG9yXCIsIFwiY29sb3ItbWl4KGluIHNyZ2IsIHJlZCAzMCUsIHdoaXRlKVwiKSkge1xuICAgICAgICBwb3B1cC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBgY29sb3ItbWl4KGluIHNyZ2IsICR7YmFzZUNvbG9yfSAzMCUsIHdoaXRlKWA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBCQUNLR1JPVU5EX0VOTElHSFQgPSAwLjc7XG4gICAgICAgIHBvcHVwLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IHV0aWwuVXRpbC5tYWtlSGV4Q29sb3IoLi4udGhpcy4jY29sb3IubWFwKGMgPT4gTWF0aC5mbG9vcihCQUNLR1JPVU5EX0VOTElHSFQgKiAoMjU1IC0gYykgKyBjKSkpO1xuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBoZWFkZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcbiAgICBoZWFkZXIuY2xhc3NOYW1lID0gXCJoZWFkZXJcIjtcbiAgICBjb25zdCB0aXRsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJoMVwiKTtcbiAgICBoZWFkZXIuYXBwZW5kKHRpdGxlKTtcbiAgICAoe1xuICAgICAgZGlyOiB0aXRsZS5kaXIsXG4gICAgICBzdHI6IHRpdGxlLnRleHRDb250ZW50XG4gICAgfSA9IHRoaXMuI3RpdGxlT2JqKTtcbiAgICBwb3B1cC5hcHBlbmQoaGVhZGVyKTtcbiAgICBpZiAodGhpcy4jZGF0ZU9iaikge1xuICAgICAgY29uc3QgbW9kaWZpY2F0aW9uRGF0ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO1xuICAgICAgbW9kaWZpY2F0aW9uRGF0ZS5jbGFzc0xpc3QuYWRkKFwicG9wdXBEYXRlXCIpO1xuICAgICAgbW9kaWZpY2F0aW9uRGF0ZS5zZXRBdHRyaWJ1dGUoXCJkYXRhLWwxMG4taWRcIiwgXCJwZGZqcy1hbm5vdGF0aW9uLWRhdGUtc3RyaW5nXCIpO1xuICAgICAgbW9kaWZpY2F0aW9uRGF0ZS5zZXRBdHRyaWJ1dGUoXCJkYXRhLWwxMG4tYXJnc1wiLCBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgIGRhdGU6IHRoaXMuI2RhdGVPYmoudG9Mb2NhbGVEYXRlU3RyaW5nKCksXG4gICAgICAgIHRpbWU6IHRoaXMuI2RhdGVPYmoudG9Mb2NhbGVUaW1lU3RyaW5nKClcbiAgICAgIH0pKTtcbiAgICAgIGhlYWRlci5hcHBlbmQobW9kaWZpY2F0aW9uRGF0ZSk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnRzT2JqID0gdGhpcy4jY29udGVudHNPYmo7XG4gICAgY29uc3QgcmljaFRleHQgPSB0aGlzLiNyaWNoVGV4dDtcbiAgICBpZiAocmljaFRleHQ/LnN0ciAmJiAoIWNvbnRlbnRzT2JqPy5zdHIgfHwgY29udGVudHNPYmouc3RyID09PSByaWNoVGV4dC5zdHIpKSB7XG4gICAgICB4ZmFfbGF5ZXIuWGZhTGF5ZXIucmVuZGVyKHtcbiAgICAgICAgeGZhSHRtbDogcmljaFRleHQuaHRtbCxcbiAgICAgICAgaW50ZW50OiBcInJpY2hUZXh0XCIsXG4gICAgICAgIGRpdjogcG9wdXBcbiAgICAgIH0pO1xuICAgICAgcG9wdXAubGFzdENoaWxkLmNsYXNzTGlzdC5hZGQoXCJyaWNoVGV4dFwiLCBcInBvcHVwQ29udGVudFwiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgY29udGVudHMgPSB0aGlzLl9mb3JtYXRDb250ZW50cyhjb250ZW50c09iaik7XG4gICAgICBwb3B1cC5hcHBlbmQoY29udGVudHMpO1xuICAgIH1cbiAgICBsZXQgdXNlUGFyZW50UmVjdCA9ICEhdGhpcy4jcGFyZW50UmVjdDtcbiAgICBsZXQgcmVjdCA9IHVzZVBhcmVudFJlY3QgPyB0aGlzLiNwYXJlbnRSZWN0IDogdGhpcy4jcmVjdDtcbiAgICBmb3IgKGNvbnN0IGVsZW1lbnQgb2YgdGhpcy4jZWxlbWVudHMpIHtcbiAgICAgIGlmICghcmVjdCB8fCB1dGlsLlV0aWwuaW50ZXJzZWN0KGVsZW1lbnQuZGF0YS5yZWN0LCByZWN0KSAhPT0gbnVsbCkge1xuICAgICAgICByZWN0ID0gZWxlbWVudC5kYXRhLnJlY3Q7XG4gICAgICAgIHVzZVBhcmVudFJlY3QgPSB0cnVlO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3Qgbm9ybWFsaXplZFJlY3QgPSB1dGlsLlV0aWwubm9ybWFsaXplUmVjdChbcmVjdFswXSwgdmlld1szXSAtIHJlY3RbMV0gKyB2aWV3WzFdLCByZWN0WzJdLCB2aWV3WzNdIC0gcmVjdFszXSArIHZpZXdbMV1dKTtcbiAgICBjb25zdCBIT1JJWk9OVEFMX1NQQUNFX0FGVEVSX0FOTk9UQVRJT04gPSA1O1xuICAgIGNvbnN0IHBhcmVudFdpZHRoID0gdXNlUGFyZW50UmVjdCA/IHJlY3RbMl0gLSByZWN0WzBdICsgSE9SSVpPTlRBTF9TUEFDRV9BRlRFUl9BTk5PVEFUSU9OIDogMDtcbiAgICBjb25zdCBwb3B1cExlZnQgPSBub3JtYWxpemVkUmVjdFswXSArIHBhcmVudFdpZHRoO1xuICAgIGNvbnN0IHBvcHVwVG9wID0gbm9ybWFsaXplZFJlY3RbMV07XG4gICAgY29uc3Qge1xuICAgICAgc3R5bGVcbiAgICB9ID0gdGhpcy4jY29udGFpbmVyO1xuICAgIHN0eWxlLmxlZnQgPSBgJHsxMDAgKiAocG9wdXBMZWZ0IC0gcGFnZVgpIC8gcGFnZVdpZHRofSVgO1xuICAgIHN0eWxlLnRvcCA9IGAkezEwMCAqIChwb3B1cFRvcCAtIHBhZ2VZKSAvIHBhZ2VIZWlnaHR9JWA7XG4gICAgdGhpcy4jY29udGFpbmVyLmFwcGVuZChwb3B1cCk7XG4gIH1cbiAgX2Zvcm1hdENvbnRlbnRzKHtcbiAgICBzdHIsXG4gICAgZGlyXG4gIH0pIHtcbiAgICBjb25zdCBwID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInBcIik7XG4gICAgcC5jbGFzc0xpc3QuYWRkKFwicG9wdXBDb250ZW50XCIpO1xuICAgIHAuZGlyID0gZGlyO1xuICAgIGNvbnN0IGxpbmVzID0gc3RyLnNwbGl0KC8oPzpcXHJcXG4/fFxcbikvKTtcbiAgICBmb3IgKGxldCBpID0gMCwgaWkgPSBsaW5lcy5sZW5ndGg7IGkgPCBpaTsgKytpKSB7XG4gICAgICBjb25zdCBsaW5lID0gbGluZXNbaV07XG4gICAgICBwLmFwcGVuZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShsaW5lKSk7XG4gICAgICBpZiAoaSA8IGlpIC0gMSkge1xuICAgICAgICBwLmFwcGVuZChkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnJcIikpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcDtcbiAgfVxuICAja2V5RG93bihldmVudCkge1xuICAgIGlmIChldmVudC5hbHRLZXkgfHwgZXZlbnQuc2hpZnRLZXkgfHwgZXZlbnQuY3RybEtleSB8fCBldmVudC5tZXRhS2V5KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChldmVudC5rZXkgPT09IFwiRW50ZXJcIiB8fCBldmVudC5rZXkgPT09IFwiRXNjYXBlXCIgJiYgdGhpcy4jcGlubmVkKSB7XG4gICAgICB0aGlzLiN0b2dnbGUoKTtcbiAgICB9XG4gIH1cbiAgI3RvZ2dsZSgpIHtcbiAgICB0aGlzLiNwaW5uZWQgPSAhdGhpcy4jcGlubmVkO1xuICAgIGlmICh0aGlzLiNwaW5uZWQpIHtcbiAgICAgIHRoaXMuI3Nob3coKTtcbiAgICAgIHRoaXMuI2NvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgdGhpcy4jYm91bmRUb2dnbGUpO1xuICAgICAgdGhpcy4jY29udGFpbmVyLmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIHRoaXMuI2JvdW5kS2V5RG93bik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuI2hpZGUoKTtcbiAgICAgIHRoaXMuI2NvbnRhaW5lci5yZW1vdmVFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgdGhpcy4jYm91bmRUb2dnbGUpO1xuICAgICAgdGhpcy4jY29udGFpbmVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIHRoaXMuI2JvdW5kS2V5RG93bik7XG4gICAgfVxuICB9XG4gICNzaG93KCkge1xuICAgIGlmICghdGhpcy4jcG9wdXApIHtcbiAgICAgIHRoaXMucmVuZGVyKCk7XG4gICAgfVxuICAgIGlmICghdGhpcy5pc1Zpc2libGUpIHtcbiAgICAgIHRoaXMuI2NvbnRhaW5lci5oaWRkZW4gPSBmYWxzZTtcbiAgICAgIHRoaXMuI2NvbnRhaW5lci5zdHlsZS56SW5kZXggPSBwYXJzZUludCh0aGlzLiNjb250YWluZXIuc3R5bGUuekluZGV4KSArIDEwMDA7XG4gICAgfSBlbHNlIGlmICh0aGlzLiNwaW5uZWQpIHtcbiAgICAgIHRoaXMuI2NvbnRhaW5lci5jbGFzc0xpc3QuYWRkKFwiZm9jdXNlZFwiKTtcbiAgICB9XG4gIH1cbiAgI2hpZGUoKSB7XG4gICAgdGhpcy4jY29udGFpbmVyLmNsYXNzTGlzdC5yZW1vdmUoXCJmb2N1c2VkXCIpO1xuICAgIGlmICh0aGlzLiNwaW5uZWQgfHwgIXRoaXMuaXNWaXNpYmxlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuI2NvbnRhaW5lci5oaWRkZW4gPSB0cnVlO1xuICAgIHRoaXMuI2NvbnRhaW5lci5zdHlsZS56SW5kZXggPSBwYXJzZUludCh0aGlzLiNjb250YWluZXIuc3R5bGUuekluZGV4KSAtIDEwMDA7XG4gIH1cbiAgZm9yY2VIaWRlKCkge1xuICAgIHRoaXMuI3dhc1Zpc2libGUgPSB0aGlzLmlzVmlzaWJsZTtcbiAgICBpZiAoIXRoaXMuI3dhc1Zpc2libGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy4jY29udGFpbmVyLmhpZGRlbiA9IHRydWU7XG4gIH1cbiAgbWF5YmVTaG93KCkge1xuICAgIGlmICghdGhpcy4jd2FzVmlzaWJsZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLiN3YXNWaXNpYmxlID0gZmFsc2U7XG4gICAgdGhpcy4jY29udGFpbmVyLmhpZGRlbiA9IGZhbHNlO1xuICB9XG4gIGdldCBpc1Zpc2libGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuI2NvbnRhaW5lci5oaWRkZW4gPT09IGZhbHNlO1xuICB9XG59XG5jbGFzcyBGcmVlVGV4dEFubm90YXRpb25FbGVtZW50IGV4dGVuZHMgQW5ub3RhdGlvbkVsZW1lbnQge1xuICBjb25zdHJ1Y3RvcihwYXJhbWV0ZXJzKSB7XG4gICAgc3VwZXIocGFyYW1ldGVycywge1xuICAgICAgaXNSZW5kZXJhYmxlOiB0cnVlLFxuICAgICAgaWdub3JlQm9yZGVyOiB0cnVlXG4gICAgfSk7XG4gICAgdGhpcy50ZXh0Q29udGVudCA9IHBhcmFtZXRlcnMuZGF0YS50ZXh0Q29udGVudDtcbiAgICB0aGlzLnRleHRQb3NpdGlvbiA9IHBhcmFtZXRlcnMuZGF0YS50ZXh0UG9zaXRpb247XG4gICAgdGhpcy5hbm5vdGF0aW9uRWRpdG9yVHlwZSA9IHV0aWwuQW5ub3RhdGlvbkVkaXRvclR5cGUuRlJFRVRFWFQ7XG4gIH1cbiAgcmVuZGVyKCkge1xuICAgIHRoaXMuY29udGFpbmVyLmNsYXNzTGlzdC5hZGQoXCJmcmVlVGV4dEFubm90YXRpb25cIik7XG4gICAgaWYgKHRoaXMudGV4dENvbnRlbnQpIHtcbiAgICAgIGNvbnN0IGNvbnRlbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgY29udGVudC5jbGFzc0xpc3QuYWRkKFwiYW5ub3RhdGlvblRleHRDb250ZW50XCIpO1xuICAgICAgY29udGVudC5zZXRBdHRyaWJ1dGUoXCJyb2xlXCIsIFwiY29tbWVudFwiKTtcbiAgICAgIGZvciAoY29uc3QgbGluZSBvZiB0aGlzLnRleHRDb250ZW50KSB7XG4gICAgICAgIGNvbnN0IGxpbmVTcGFuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XG4gICAgICAgIGxpbmVTcGFuLnRleHRDb250ZW50ID0gbGluZTtcbiAgICAgICAgY29udGVudC5hcHBlbmQobGluZVNwYW4pO1xuICAgICAgfVxuICAgICAgdGhpcy5jb250YWluZXIuYXBwZW5kKGNvbnRlbnQpO1xuICAgIH1cbiAgICBpZiAoIXRoaXMuZGF0YS5wb3B1cFJlZiAmJiB0aGlzLmhhc1BvcHVwRGF0YSkge1xuICAgICAgdGhpcy5fY3JlYXRlUG9wdXAoKTtcbiAgICB9XG4gICAgdGhpcy5fZWRpdE9uRG91YmxlQ2xpY2soKTtcbiAgICByZXR1cm4gdGhpcy5jb250YWluZXI7XG4gIH1cbiAgZ2V0IF9pc0VkaXRhYmxlKCkge1xuICAgIHJldHVybiB0aGlzLmRhdGEuaGFzT3duQ2FudmFzO1xuICB9XG59XG5jbGFzcyBMaW5lQW5ub3RhdGlvbkVsZW1lbnQgZXh0ZW5kcyBBbm5vdGF0aW9uRWxlbWVudCB7XG4gICNsaW5lID0gbnVsbDtcbiAgY29uc3RydWN0b3IocGFyYW1ldGVycykge1xuICAgIHN1cGVyKHBhcmFtZXRlcnMsIHtcbiAgICAgIGlzUmVuZGVyYWJsZTogdHJ1ZSxcbiAgICAgIGlnbm9yZUJvcmRlcjogdHJ1ZVxuICAgIH0pO1xuICB9XG4gIHJlbmRlcigpIHtcbiAgICB0aGlzLmNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKFwibGluZUFubm90YXRpb25cIik7XG4gICAgY29uc3QgZGF0YSA9IHRoaXMuZGF0YTtcbiAgICBjb25zdCB7XG4gICAgICB3aWR0aCxcbiAgICAgIGhlaWdodFxuICAgIH0gPSBnZXRSZWN0RGltcyhkYXRhLnJlY3QpO1xuICAgIGNvbnN0IHN2ZyA9IHRoaXMuc3ZnRmFjdG9yeS5jcmVhdGUod2lkdGgsIGhlaWdodCwgdHJ1ZSk7XG4gICAgY29uc3QgbGluZSA9IHRoaXMuI2xpbmUgPSB0aGlzLnN2Z0ZhY3RvcnkuY3JlYXRlRWxlbWVudChcInN2ZzpsaW5lXCIpO1xuICAgIGxpbmUuc2V0QXR0cmlidXRlKFwieDFcIiwgZGF0YS5yZWN0WzJdIC0gZGF0YS5saW5lQ29vcmRpbmF0ZXNbMF0pO1xuICAgIGxpbmUuc2V0QXR0cmlidXRlKFwieTFcIiwgZGF0YS5yZWN0WzNdIC0gZGF0YS5saW5lQ29vcmRpbmF0ZXNbMV0pO1xuICAgIGxpbmUuc2V0QXR0cmlidXRlKFwieDJcIiwgZGF0YS5yZWN0WzJdIC0gZGF0YS5saW5lQ29vcmRpbmF0ZXNbMl0pO1xuICAgIGxpbmUuc2V0QXR0cmlidXRlKFwieTJcIiwgZGF0YS5yZWN0WzNdIC0gZGF0YS5saW5lQ29vcmRpbmF0ZXNbM10pO1xuICAgIGxpbmUuc2V0QXR0cmlidXRlKFwic3Ryb2tlLXdpZHRoXCIsIGRhdGEuYm9yZGVyU3R5bGUud2lkdGggfHwgMSk7XG4gICAgbGluZS5zZXRBdHRyaWJ1dGUoXCJzdHJva2VcIiwgXCJ0cmFuc3BhcmVudFwiKTtcbiAgICBsaW5lLnNldEF0dHJpYnV0ZShcImZpbGxcIiwgXCJ0cmFuc3BhcmVudFwiKTtcbiAgICBzdmcuYXBwZW5kKGxpbmUpO1xuICAgIHRoaXMuY29udGFpbmVyLmFwcGVuZChzdmcpO1xuICAgIGlmICghZGF0YS5wb3B1cFJlZiAmJiB0aGlzLmhhc1BvcHVwRGF0YSkge1xuICAgICAgdGhpcy5fY3JlYXRlUG9wdXAoKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuY29udGFpbmVyO1xuICB9XG4gIGdldEVsZW1lbnRzVG9UcmlnZ2VyUG9wdXAoKSB7XG4gICAgcmV0dXJuIHRoaXMuI2xpbmU7XG4gIH1cbiAgYWRkSGlnaGxpZ2h0QXJlYSgpIHtcbiAgICB0aGlzLmNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKFwiaGlnaGxpZ2h0QXJlYVwiKTtcbiAgfVxufVxuY2xhc3MgU3F1YXJlQW5ub3RhdGlvbkVsZW1lbnQgZXh0ZW5kcyBBbm5vdGF0aW9uRWxlbWVudCB7XG4gICNzcXVhcmUgPSBudWxsO1xuICBjb25zdHJ1Y3RvcihwYXJhbWV0ZXJzKSB7XG4gICAgc3VwZXIocGFyYW1ldGVycywge1xuICAgICAgaXNSZW5kZXJhYmxlOiB0cnVlLFxuICAgICAgaWdub3JlQm9yZGVyOiB0cnVlXG4gICAgfSk7XG4gIH1cbiAgcmVuZGVyKCkge1xuICAgIHRoaXMuY29udGFpbmVyLmNsYXNzTGlzdC5hZGQoXCJzcXVhcmVBbm5vdGF0aW9uXCIpO1xuICAgIGNvbnN0IGRhdGEgPSB0aGlzLmRhdGE7XG4gICAgY29uc3Qge1xuICAgICAgd2lkdGgsXG4gICAgICBoZWlnaHRcbiAgICB9ID0gZ2V0UmVjdERpbXMoZGF0YS5yZWN0KTtcbiAgICBjb25zdCBzdmcgPSB0aGlzLnN2Z0ZhY3RvcnkuY3JlYXRlKHdpZHRoLCBoZWlnaHQsIHRydWUpO1xuICAgIGNvbnN0IGJvcmRlcldpZHRoID0gZGF0YS5ib3JkZXJTdHlsZS53aWR0aDtcbiAgICBjb25zdCBzcXVhcmUgPSB0aGlzLiNzcXVhcmUgPSB0aGlzLnN2Z0ZhY3RvcnkuY3JlYXRlRWxlbWVudChcInN2ZzpyZWN0XCIpO1xuICAgIHNxdWFyZS5zZXRBdHRyaWJ1dGUoXCJ4XCIsIGJvcmRlcldpZHRoIC8gMik7XG4gICAgc3F1YXJlLnNldEF0dHJpYnV0ZShcInlcIiwgYm9yZGVyV2lkdGggLyAyKTtcbiAgICBzcXVhcmUuc2V0QXR0cmlidXRlKFwid2lkdGhcIiwgd2lkdGggLSBib3JkZXJXaWR0aCk7XG4gICAgc3F1YXJlLnNldEF0dHJpYnV0ZShcImhlaWdodFwiLCBoZWlnaHQgLSBib3JkZXJXaWR0aCk7XG4gICAgc3F1YXJlLnNldEF0dHJpYnV0ZShcInN0cm9rZS13aWR0aFwiLCBib3JkZXJXaWR0aCB8fCAxKTtcbiAgICBzcXVhcmUuc2V0QXR0cmlidXRlKFwic3Ryb2tlXCIsIFwidHJhbnNwYXJlbnRcIik7XG4gICAgc3F1YXJlLnNldEF0dHJpYnV0ZShcImZpbGxcIiwgXCJ0cmFuc3BhcmVudFwiKTtcbiAgICBzdmcuYXBwZW5kKHNxdWFyZSk7XG4gICAgdGhpcy5jb250YWluZXIuYXBwZW5kKHN2Zyk7XG4gICAgaWYgKCFkYXRhLnBvcHVwUmVmICYmIHRoaXMuaGFzUG9wdXBEYXRhKSB7XG4gICAgICB0aGlzLl9jcmVhdGVQb3B1cCgpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5jb250YWluZXI7XG4gIH1cbiAgZ2V0RWxlbWVudHNUb1RyaWdnZXJQb3B1cCgpIHtcbiAgICByZXR1cm4gdGhpcy4jc3F1YXJlO1xuICB9XG4gIGFkZEhpZ2hsaWdodEFyZWEoKSB7XG4gICAgdGhpcy5jb250YWluZXIuY2xhc3NMaXN0LmFkZChcImhpZ2hsaWdodEFyZWFcIik7XG4gIH1cbn1cbmNsYXNzIENpcmNsZUFubm90YXRpb25FbGVtZW50IGV4dGVuZHMgQW5ub3RhdGlvbkVsZW1lbnQge1xuICAjY2lyY2xlID0gbnVsbDtcbiAgY29uc3RydWN0b3IocGFyYW1ldGVycykge1xuICAgIHN1cGVyKHBhcmFtZXRlcnMsIHtcbiAgICAgIGlzUmVuZGVyYWJsZTogdHJ1ZSxcbiAgICAgIGlnbm9yZUJvcmRlcjogdHJ1ZVxuICAgIH0pO1xuICB9XG4gIHJlbmRlcigpIHtcbiAgICB0aGlzLmNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKFwiY2lyY2xlQW5ub3RhdGlvblwiKTtcbiAgICBjb25zdCBkYXRhID0gdGhpcy5kYXRhO1xuICAgIGNvbnN0IHtcbiAgICAgIHdpZHRoLFxuICAgICAgaGVpZ2h0XG4gICAgfSA9IGdldFJlY3REaW1zKGRhdGEucmVjdCk7XG4gICAgY29uc3Qgc3ZnID0gdGhpcy5zdmdGYWN0b3J5LmNyZWF0ZSh3aWR0aCwgaGVpZ2h0LCB0cnVlKTtcbiAgICBjb25zdCBib3JkZXJXaWR0aCA9IGRhdGEuYm9yZGVyU3R5bGUud2lkdGg7XG4gICAgY29uc3QgY2lyY2xlID0gdGhpcy4jY2lyY2xlID0gdGhpcy5zdmdGYWN0b3J5LmNyZWF0ZUVsZW1lbnQoXCJzdmc6ZWxsaXBzZVwiKTtcbiAgICBjaXJjbGUuc2V0QXR0cmlidXRlKFwiY3hcIiwgd2lkdGggLyAyKTtcbiAgICBjaXJjbGUuc2V0QXR0cmlidXRlKFwiY3lcIiwgaGVpZ2h0IC8gMik7XG4gICAgY2lyY2xlLnNldEF0dHJpYnV0ZShcInJ4XCIsIHdpZHRoIC8gMiAtIGJvcmRlcldpZHRoIC8gMik7XG4gICAgY2lyY2xlLnNldEF0dHJpYnV0ZShcInJ5XCIsIGhlaWdodCAvIDIgLSBib3JkZXJXaWR0aCAvIDIpO1xuICAgIGNpcmNsZS5zZXRBdHRyaWJ1dGUoXCJzdHJva2Utd2lkdGhcIiwgYm9yZGVyV2lkdGggfHwgMSk7XG4gICAgY2lyY2xlLnNldEF0dHJpYnV0ZShcInN0cm9rZVwiLCBcInRyYW5zcGFyZW50XCIpO1xuICAgIGNpcmNsZS5zZXRBdHRyaWJ1dGUoXCJmaWxsXCIsIFwidHJhbnNwYXJlbnRcIik7XG4gICAgc3ZnLmFwcGVuZChjaXJjbGUpO1xuICAgIHRoaXMuY29udGFpbmVyLmFwcGVuZChzdmcpO1xuICAgIGlmICghZGF0YS5wb3B1cFJlZiAmJiB0aGlzLmhhc1BvcHVwRGF0YSkge1xuICAgICAgdGhpcy5fY3JlYXRlUG9wdXAoKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuY29udGFpbmVyO1xuICB9XG4gIGdldEVsZW1lbnRzVG9UcmlnZ2VyUG9wdXAoKSB7XG4gICAgcmV0dXJuIHRoaXMuI2NpcmNsZTtcbiAgfVxuICBhZGRIaWdobGlnaHRBcmVhKCkge1xuICAgIHRoaXMuY29udGFpbmVyLmNsYXNzTGlzdC5hZGQoXCJoaWdobGlnaHRBcmVhXCIpO1xuICB9XG59XG5jbGFzcyBQb2x5bGluZUFubm90YXRpb25FbGVtZW50IGV4dGVuZHMgQW5ub3RhdGlvbkVsZW1lbnQge1xuICAjcG9seWxpbmUgPSBudWxsO1xuICBjb25zdHJ1Y3RvcihwYXJhbWV0ZXJzKSB7XG4gICAgc3VwZXIocGFyYW1ldGVycywge1xuICAgICAgaXNSZW5kZXJhYmxlOiB0cnVlLFxuICAgICAgaWdub3JlQm9yZGVyOiB0cnVlXG4gICAgfSk7XG4gICAgdGhpcy5jb250YWluZXJDbGFzc05hbWUgPSBcInBvbHlsaW5lQW5ub3RhdGlvblwiO1xuICAgIHRoaXMuc3ZnRWxlbWVudE5hbWUgPSBcInN2Zzpwb2x5bGluZVwiO1xuICB9XG4gIHJlbmRlcigpIHtcbiAgICB0aGlzLmNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKHRoaXMuY29udGFpbmVyQ2xhc3NOYW1lKTtcbiAgICBjb25zdCBkYXRhID0gdGhpcy5kYXRhO1xuICAgIGNvbnN0IHtcbiAgICAgIHdpZHRoLFxuICAgICAgaGVpZ2h0XG4gICAgfSA9IGdldFJlY3REaW1zKGRhdGEucmVjdCk7XG4gICAgY29uc3Qgc3ZnID0gdGhpcy5zdmdGYWN0b3J5LmNyZWF0ZSh3aWR0aCwgaGVpZ2h0LCB0cnVlKTtcbiAgICBsZXQgcG9pbnRzID0gW107XG4gICAgZm9yIChjb25zdCBjb29yZGluYXRlIG9mIGRhdGEudmVydGljZXMpIHtcbiAgICAgIGNvbnN0IHggPSBjb29yZGluYXRlLnggLSBkYXRhLnJlY3RbMF07XG4gICAgICBjb25zdCB5ID0gZGF0YS5yZWN0WzNdIC0gY29vcmRpbmF0ZS55O1xuICAgICAgcG9pbnRzLnB1c2goeCArIFwiLFwiICsgeSk7XG4gICAgfVxuICAgIHBvaW50cyA9IHBvaW50cy5qb2luKFwiIFwiKTtcbiAgICBjb25zdCBwb2x5bGluZSA9IHRoaXMuI3BvbHlsaW5lID0gdGhpcy5zdmdGYWN0b3J5LmNyZWF0ZUVsZW1lbnQodGhpcy5zdmdFbGVtZW50TmFtZSk7XG4gICAgcG9seWxpbmUuc2V0QXR0cmlidXRlKFwicG9pbnRzXCIsIHBvaW50cyk7XG4gICAgcG9seWxpbmUuc2V0QXR0cmlidXRlKFwic3Ryb2tlLXdpZHRoXCIsIGRhdGEuYm9yZGVyU3R5bGUud2lkdGggfHwgMSk7XG4gICAgcG9seWxpbmUuc2V0QXR0cmlidXRlKFwic3Ryb2tlXCIsIFwidHJhbnNwYXJlbnRcIik7XG4gICAgcG9seWxpbmUuc2V0QXR0cmlidXRlKFwiZmlsbFwiLCBcInRyYW5zcGFyZW50XCIpO1xuICAgIHN2Zy5hcHBlbmQocG9seWxpbmUpO1xuICAgIHRoaXMuY29udGFpbmVyLmFwcGVuZChzdmcpO1xuICAgIGlmICghZGF0YS5wb3B1cFJlZiAmJiB0aGlzLmhhc1BvcHVwRGF0YSkge1xuICAgICAgdGhpcy5fY3JlYXRlUG9wdXAoKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuY29udGFpbmVyO1xuICB9XG4gIGdldEVsZW1lbnRzVG9UcmlnZ2VyUG9wdXAoKSB7XG4gICAgcmV0dXJuIHRoaXMuI3BvbHlsaW5lO1xuICB9XG4gIGFkZEhpZ2hsaWdodEFyZWEoKSB7XG4gICAgdGhpcy5jb250YWluZXIuY2xhc3NMaXN0LmFkZChcImhpZ2hsaWdodEFyZWFcIik7XG4gIH1cbn1cbmNsYXNzIFBvbHlnb25Bbm5vdGF0aW9uRWxlbWVudCBleHRlbmRzIFBvbHlsaW5lQW5ub3RhdGlvbkVsZW1lbnQge1xuICBjb25zdHJ1Y3RvcihwYXJhbWV0ZXJzKSB7XG4gICAgc3VwZXIocGFyYW1ldGVycyk7XG4gICAgdGhpcy5jb250YWluZXJDbGFzc05hbWUgPSBcInBvbHlnb25Bbm5vdGF0aW9uXCI7XG4gICAgdGhpcy5zdmdFbGVtZW50TmFtZSA9IFwic3ZnOnBvbHlnb25cIjtcbiAgfVxufVxuY2xhc3MgQ2FyZXRBbm5vdGF0aW9uRWxlbWVudCBleHRlbmRzIEFubm90YXRpb25FbGVtZW50IHtcbiAgY29uc3RydWN0b3IocGFyYW1ldGVycykge1xuICAgIHN1cGVyKHBhcmFtZXRlcnMsIHtcbiAgICAgIGlzUmVuZGVyYWJsZTogdHJ1ZSxcbiAgICAgIGlnbm9yZUJvcmRlcjogdHJ1ZVxuICAgIH0pO1xuICB9XG4gIHJlbmRlcigpIHtcbiAgICB0aGlzLmNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKFwiY2FyZXRBbm5vdGF0aW9uXCIpO1xuICAgIGlmICghdGhpcy5kYXRhLnBvcHVwUmVmICYmIHRoaXMuaGFzUG9wdXBEYXRhKSB7XG4gICAgICB0aGlzLl9jcmVhdGVQb3B1cCgpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5jb250YWluZXI7XG4gIH1cbn1cbmNsYXNzIElua0Fubm90YXRpb25FbGVtZW50IGV4dGVuZHMgQW5ub3RhdGlvbkVsZW1lbnQge1xuICAjcG9seWxpbmVzID0gW107XG4gIGNvbnN0cnVjdG9yKHBhcmFtZXRlcnMpIHtcbiAgICBzdXBlcihwYXJhbWV0ZXJzLCB7XG4gICAgICBpc1JlbmRlcmFibGU6IHRydWUsXG4gICAgICBpZ25vcmVCb3JkZXI6IHRydWVcbiAgICB9KTtcbiAgICB0aGlzLmNvbnRhaW5lckNsYXNzTmFtZSA9IFwiaW5rQW5ub3RhdGlvblwiO1xuICAgIHRoaXMuc3ZnRWxlbWVudE5hbWUgPSBcInN2Zzpwb2x5bGluZVwiO1xuICAgIHRoaXMuYW5ub3RhdGlvbkVkaXRvclR5cGUgPSB1dGlsLkFubm90YXRpb25FZGl0b3JUeXBlLklOSztcbiAgfVxuICByZW5kZXIoKSB7XG4gICAgdGhpcy5jb250YWluZXIuY2xhc3NMaXN0LmFkZCh0aGlzLmNvbnRhaW5lckNsYXNzTmFtZSk7XG4gICAgY29uc3QgZGF0YSA9IHRoaXMuZGF0YTtcbiAgICBjb25zdCB7XG4gICAgICB3aWR0aCxcbiAgICAgIGhlaWdodFxuICAgIH0gPSBnZXRSZWN0RGltcyhkYXRhLnJlY3QpO1xuICAgIGNvbnN0IHN2ZyA9IHRoaXMuc3ZnRmFjdG9yeS5jcmVhdGUod2lkdGgsIGhlaWdodCwgdHJ1ZSk7XG4gICAgZm9yIChjb25zdCBpbmtMaXN0IG9mIGRhdGEuaW5rTGlzdHMpIHtcbiAgICAgIGxldCBwb2ludHMgPSBbXTtcbiAgICAgIGZvciAoY29uc3QgY29vcmRpbmF0ZSBvZiBpbmtMaXN0KSB7XG4gICAgICAgIGNvbnN0IHggPSBjb29yZGluYXRlLnggLSBkYXRhLnJlY3RbMF07XG4gICAgICAgIGNvbnN0IHkgPSBkYXRhLnJlY3RbM10gLSBjb29yZGluYXRlLnk7XG4gICAgICAgIHBvaW50cy5wdXNoKGAke3h9LCR7eX1gKTtcbiAgICAgIH1cbiAgICAgIHBvaW50cyA9IHBvaW50cy5qb2luKFwiIFwiKTtcbiAgICAgIGNvbnN0IHBvbHlsaW5lID0gdGhpcy5zdmdGYWN0b3J5LmNyZWF0ZUVsZW1lbnQodGhpcy5zdmdFbGVtZW50TmFtZSk7XG4gICAgICB0aGlzLiNwb2x5bGluZXMucHVzaChwb2x5bGluZSk7XG4gICAgICBwb2x5bGluZS5zZXRBdHRyaWJ1dGUoXCJwb2ludHNcIiwgcG9pbnRzKTtcbiAgICAgIHBvbHlsaW5lLnNldEF0dHJpYnV0ZShcInN0cm9rZS13aWR0aFwiLCBkYXRhLmJvcmRlclN0eWxlLndpZHRoIHx8IDEpO1xuICAgICAgcG9seWxpbmUuc2V0QXR0cmlidXRlKFwic3Ryb2tlXCIsIFwidHJhbnNwYXJlbnRcIik7XG4gICAgICBwb2x5bGluZS5zZXRBdHRyaWJ1dGUoXCJmaWxsXCIsIFwidHJhbnNwYXJlbnRcIik7XG4gICAgICBpZiAoIWRhdGEucG9wdXBSZWYgJiYgdGhpcy5oYXNQb3B1cERhdGEpIHtcbiAgICAgICAgdGhpcy5fY3JlYXRlUG9wdXAoKTtcbiAgICAgIH1cbiAgICAgIHN2Zy5hcHBlbmQocG9seWxpbmUpO1xuICAgIH1cbiAgICB0aGlzLmNvbnRhaW5lci5hcHBlbmQoc3ZnKTtcbiAgICByZXR1cm4gdGhpcy5jb250YWluZXI7XG4gIH1cbiAgZ2V0RWxlbWVudHNUb1RyaWdnZXJQb3B1cCgpIHtcbiAgICByZXR1cm4gdGhpcy4jcG9seWxpbmVzO1xuICB9XG4gIGFkZEhpZ2hsaWdodEFyZWEoKSB7XG4gICAgdGhpcy5jb250YWluZXIuY2xhc3NMaXN0LmFkZChcImhpZ2hsaWdodEFyZWFcIik7XG4gIH1cbn1cbmNsYXNzIEhpZ2hsaWdodEFubm90YXRpb25FbGVtZW50IGV4dGVuZHMgQW5ub3RhdGlvbkVsZW1lbnQge1xuICBjb25zdHJ1Y3RvcihwYXJhbWV0ZXJzKSB7XG4gICAgc3VwZXIocGFyYW1ldGVycywge1xuICAgICAgaXNSZW5kZXJhYmxlOiB0cnVlLFxuICAgICAgaWdub3JlQm9yZGVyOiB0cnVlLFxuICAgICAgY3JlYXRlUXVhZHJpbGF0ZXJhbHM6IHRydWVcbiAgICB9KTtcbiAgfVxuICByZW5kZXIoKSB7XG4gICAgaWYgKCF0aGlzLmRhdGEucG9wdXBSZWYgJiYgdGhpcy5oYXNQb3B1cERhdGEpIHtcbiAgICAgIHRoaXMuX2NyZWF0ZVBvcHVwKCk7XG4gICAgfVxuICAgIHRoaXMuY29udGFpbmVyLmNsYXNzTGlzdC5hZGQoXCJoaWdobGlnaHRBbm5vdGF0aW9uXCIpO1xuICAgIHJldHVybiB0aGlzLmNvbnRhaW5lcjtcbiAgfVxufVxuY2xhc3MgVW5kZXJsaW5lQW5ub3RhdGlvbkVsZW1lbnQgZXh0ZW5kcyBBbm5vdGF0aW9uRWxlbWVudCB7XG4gIGNvbnN0cnVjdG9yKHBhcmFtZXRlcnMpIHtcbiAgICBzdXBlcihwYXJhbWV0ZXJzLCB7XG4gICAgICBpc1JlbmRlcmFibGU6IHRydWUsXG4gICAgICBpZ25vcmVCb3JkZXI6IHRydWUsXG4gICAgICBjcmVhdGVRdWFkcmlsYXRlcmFsczogdHJ1ZVxuICAgIH0pO1xuICB9XG4gIHJlbmRlcigpIHtcbiAgICBpZiAoIXRoaXMuZGF0YS5wb3B1cFJlZiAmJiB0aGlzLmhhc1BvcHVwRGF0YSkge1xuICAgICAgdGhpcy5fY3JlYXRlUG9wdXAoKTtcbiAgICB9XG4gICAgdGhpcy5jb250YWluZXIuY2xhc3NMaXN0LmFkZChcInVuZGVybGluZUFubm90YXRpb25cIik7XG4gICAgcmV0dXJuIHRoaXMuY29udGFpbmVyO1xuICB9XG59XG5jbGFzcyBTcXVpZ2dseUFubm90YXRpb25FbGVtZW50IGV4dGVuZHMgQW5ub3RhdGlvbkVsZW1lbnQge1xuICBjb25zdHJ1Y3RvcihwYXJhbWV0ZXJzKSB7XG4gICAgc3VwZXIocGFyYW1ldGVycywge1xuICAgICAgaXNSZW5kZXJhYmxlOiB0cnVlLFxuICAgICAgaWdub3JlQm9yZGVyOiB0cnVlLFxuICAgICAgY3JlYXRlUXVhZHJpbGF0ZXJhbHM6IHRydWVcbiAgICB9KTtcbiAgfVxuICByZW5kZXIoKSB7XG4gICAgaWYgKCF0aGlzLmRhdGEucG9wdXBSZWYgJiYgdGhpcy5oYXNQb3B1cERhdGEpIHtcbiAgICAgIHRoaXMuX2NyZWF0ZVBvcHVwKCk7XG4gICAgfVxuICAgIHRoaXMuY29udGFpbmVyLmNsYXNzTGlzdC5hZGQoXCJzcXVpZ2dseUFubm90YXRpb25cIik7XG4gICAgcmV0dXJuIHRoaXMuY29udGFpbmVyO1xuICB9XG59XG5jbGFzcyBTdHJpa2VPdXRBbm5vdGF0aW9uRWxlbWVudCBleHRlbmRzIEFubm90YXRpb25FbGVtZW50IHtcbiAgY29uc3RydWN0b3IocGFyYW1ldGVycykge1xuICAgIHN1cGVyKHBhcmFtZXRlcnMsIHtcbiAgICAgIGlzUmVuZGVyYWJsZTogdHJ1ZSxcbiAgICAgIGlnbm9yZUJvcmRlcjogdHJ1ZSxcbiAgICAgIGNyZWF0ZVF1YWRyaWxhdGVyYWxzOiB0cnVlXG4gICAgfSk7XG4gIH1cbiAgcmVuZGVyKCkge1xuICAgIGlmICghdGhpcy5kYXRhLnBvcHVwUmVmICYmIHRoaXMuaGFzUG9wdXBEYXRhKSB7XG4gICAgICB0aGlzLl9jcmVhdGVQb3B1cCgpO1xuICAgIH1cbiAgICB0aGlzLmNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKFwic3RyaWtlb3V0QW5ub3RhdGlvblwiKTtcbiAgICByZXR1cm4gdGhpcy5jb250YWluZXI7XG4gIH1cbn1cbmNsYXNzIFN0YW1wQW5ub3RhdGlvbkVsZW1lbnQgZXh0ZW5kcyBBbm5vdGF0aW9uRWxlbWVudCB7XG4gIGNvbnN0cnVjdG9yKHBhcmFtZXRlcnMpIHtcbiAgICBzdXBlcihwYXJhbWV0ZXJzLCB7XG4gICAgICBpc1JlbmRlcmFibGU6IHRydWUsXG4gICAgICBpZ25vcmVCb3JkZXI6IHRydWVcbiAgICB9KTtcbiAgfVxuICByZW5kZXIoKSB7XG4gICAgdGhpcy5jb250YWluZXIuY2xhc3NMaXN0LmFkZChcInN0YW1wQW5ub3RhdGlvblwiKTtcbiAgICBpZiAoIXRoaXMuZGF0YS5wb3B1cFJlZiAmJiB0aGlzLmhhc1BvcHVwRGF0YSkge1xuICAgICAgdGhpcy5fY3JlYXRlUG9wdXAoKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuY29udGFpbmVyO1xuICB9XG59XG5jbGFzcyBGaWxlQXR0YWNobWVudEFubm90YXRpb25FbGVtZW50IGV4dGVuZHMgQW5ub3RhdGlvbkVsZW1lbnQge1xuICAjdHJpZ2dlciA9IG51bGw7XG4gIGNvbnN0cnVjdG9yKHBhcmFtZXRlcnMpIHtcbiAgICBzdXBlcihwYXJhbWV0ZXJzLCB7XG4gICAgICBpc1JlbmRlcmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBjb25zdCB7XG4gICAgICBmaWxlbmFtZSxcbiAgICAgIGNvbnRlbnRcbiAgICB9ID0gdGhpcy5kYXRhLmZpbGU7XG4gICAgdGhpcy5maWxlbmFtZSA9ICgwLGRpc3BsYXlfdXRpbHMuZ2V0RmlsZW5hbWVGcm9tVXJsKShmaWxlbmFtZSwgdHJ1ZSk7XG4gICAgdGhpcy5jb250ZW50ID0gY29udGVudDtcbiAgICB0aGlzLmxpbmtTZXJ2aWNlLmV2ZW50QnVzPy5kaXNwYXRjaChcImZpbGVhdHRhY2htZW50YW5ub3RhdGlvblwiLCB7XG4gICAgICBzb3VyY2U6IHRoaXMsXG4gICAgICBmaWxlbmFtZSxcbiAgICAgIGNvbnRlbnRcbiAgICB9KTtcbiAgfVxuICByZW5kZXIoKSB7XG4gICAgdGhpcy5jb250YWluZXIuY2xhc3NMaXN0LmFkZChcImZpbGVBdHRhY2htZW50QW5ub3RhdGlvblwiKTtcbiAgICBjb25zdCB7XG4gICAgICBjb250YWluZXIsXG4gICAgICBkYXRhXG4gICAgfSA9IHRoaXM7XG4gICAgbGV0IHRyaWdnZXI7XG4gICAgaWYgKGRhdGEuaGFzQXBwZWFyYW5jZSB8fCBkYXRhLmZpbGxBbHBoYSA9PT0gMCkge1xuICAgICAgdHJpZ2dlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRyaWdnZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW1nXCIpO1xuICAgICAgdHJpZ2dlci5zcmMgPSBgJHt0aGlzLmltYWdlUmVzb3VyY2VzUGF0aH1hbm5vdGF0aW9uLSR7L3BhcGVyY2xpcC9pLnRlc3QoZGF0YS5uYW1lKSA/IFwicGFwZXJjbGlwXCIgOiBcInB1c2hwaW5cIn0uc3ZnYDtcbiAgICAgIGlmIChkYXRhLmZpbGxBbHBoYSAmJiBkYXRhLmZpbGxBbHBoYSA8IDEpIHtcbiAgICAgICAgdHJpZ2dlci5zdHlsZSA9IGBmaWx0ZXI6IG9wYWNpdHkoJHtNYXRoLnJvdW5kKGRhdGEuZmlsbEFscGhhICogMTAwKX0lKTtgO1xuICAgICAgfVxuICAgIH1cbiAgICB0cmlnZ2VyLmFkZEV2ZW50TGlzdGVuZXIoXCJkYmxjbGlja1wiLCB0aGlzLiNkb3dubG9hZC5iaW5kKHRoaXMpKTtcbiAgICB0aGlzLiN0cmlnZ2VyID0gdHJpZ2dlcjtcbiAgICBjb25zdCB7XG4gICAgICBpc01hY1xuICAgIH0gPSB1dGlsLkZlYXR1cmVUZXN0LnBsYXRmb3JtO1xuICAgIGNvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCBldnQgPT4ge1xuICAgICAgaWYgKGV2dC5rZXkgPT09IFwiRW50ZXJcIiAmJiAoaXNNYWMgPyBldnQubWV0YUtleSA6IGV2dC5jdHJsS2V5KSkge1xuICAgICAgICB0aGlzLiNkb3dubG9hZCgpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGlmICghZGF0YS5wb3B1cFJlZiAmJiB0aGlzLmhhc1BvcHVwRGF0YSkge1xuICAgICAgdGhpcy5fY3JlYXRlUG9wdXAoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdHJpZ2dlci5jbGFzc0xpc3QuYWRkKFwicG9wdXBUcmlnZ2VyQXJlYVwiKTtcbiAgICB9XG4gICAgY29udGFpbmVyLmFwcGVuZCh0cmlnZ2VyKTtcbiAgICByZXR1cm4gY29udGFpbmVyO1xuICB9XG4gIGdldEVsZW1lbnRzVG9UcmlnZ2VyUG9wdXAoKSB7XG4gICAgcmV0dXJuIHRoaXMuI3RyaWdnZXI7XG4gIH1cbiAgYWRkSGlnaGxpZ2h0QXJlYSgpIHtcbiAgICB0aGlzLmNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKFwiaGlnaGxpZ2h0QXJlYVwiKTtcbiAgfVxuICAjZG93bmxvYWQoKSB7XG4gICAgdGhpcy5kb3dubG9hZE1hbmFnZXI/Lm9wZW5PckRvd25sb2FkRGF0YSh0aGlzLmNvbnRlbnQsIHRoaXMuZmlsZW5hbWUpO1xuICB9XG59XG5jbGFzcyBBbm5vdGF0aW9uTGF5ZXIge1xuICAjYWNjZXNzaWJpbGl0eU1hbmFnZXIgPSBudWxsO1xuICAjYW5ub3RhdGlvbkNhbnZhc01hcCA9IG51bGw7XG4gICNlZGl0YWJsZUFubm90YXRpb25zID0gbmV3IE1hcCgpO1xuICBjb25zdHJ1Y3Rvcih7XG4gICAgZGl2LFxuICAgIGFjY2Vzc2liaWxpdHlNYW5hZ2VyLFxuICAgIGFubm90YXRpb25DYW52YXNNYXAsXG4gICAgcGFnZSxcbiAgICB2aWV3cG9ydFxuICB9KSB7XG4gICAgdGhpcy5kaXYgPSBkaXY7XG4gICAgdGhpcy4jYWNjZXNzaWJpbGl0eU1hbmFnZXIgPSBhY2Nlc3NpYmlsaXR5TWFuYWdlcjtcbiAgICB0aGlzLiNhbm5vdGF0aW9uQ2FudmFzTWFwID0gYW5ub3RhdGlvbkNhbnZhc01hcDtcbiAgICB0aGlzLnBhZ2UgPSBwYWdlO1xuICAgIHRoaXMudmlld3BvcnQgPSB2aWV3cG9ydDtcbiAgICB0aGlzLnpJbmRleCA9IDA7XG4gIH1cbiAgI2FwcGVuZEVsZW1lbnQoZWxlbWVudCwgaWQpIHtcbiAgICBjb25zdCBjb250ZW50RWxlbWVudCA9IGVsZW1lbnQuZmlyc3RDaGlsZCB8fCBlbGVtZW50O1xuICAgIGNvbnRlbnRFbGVtZW50LmlkID0gYCR7dXRpbC5Bbm5vdGF0aW9uUHJlZml4fSR7aWR9YDtcbiAgICB0aGlzLmRpdi5hcHBlbmQoZWxlbWVudCk7XG4gICAgdGhpcy4jYWNjZXNzaWJpbGl0eU1hbmFnZXI/Lm1vdmVFbGVtZW50SW5ET00odGhpcy5kaXYsIGVsZW1lbnQsIGNvbnRlbnRFbGVtZW50LCBmYWxzZSk7XG4gIH1cbiAgYXN5bmMgcmVuZGVyKHBhcmFtcykge1xuICAgIGNvbnN0IHtcbiAgICAgIGFubm90YXRpb25zXG4gICAgfSA9IHBhcmFtcztcbiAgICBjb25zdCBsYXllciA9IHRoaXMuZGl2O1xuICAgICgwLGRpc3BsYXlfdXRpbHMuc2V0TGF5ZXJEaW1lbnNpb25zKShsYXllciwgdGhpcy52aWV3cG9ydCk7XG4gICAgY29uc3QgcG9wdXBUb0VsZW1lbnRzID0gbmV3IE1hcCgpO1xuICAgIGNvbnN0IGVsZW1lbnRQYXJhbXMgPSB7XG4gICAgICBkYXRhOiBudWxsLFxuICAgICAgbGF5ZXIsXG4gICAgICBsaW5rU2VydmljZTogcGFyYW1zLmxpbmtTZXJ2aWNlLFxuICAgICAgZG93bmxvYWRNYW5hZ2VyOiBwYXJhbXMuZG93bmxvYWRNYW5hZ2VyLFxuICAgICAgaW1hZ2VSZXNvdXJjZXNQYXRoOiBwYXJhbXMuaW1hZ2VSZXNvdXJjZXNQYXRoIHx8IFwiXCIsXG4gICAgICByZW5kZXJGb3JtczogcGFyYW1zLnJlbmRlckZvcm1zICE9PSBmYWxzZSxcbiAgICAgIHN2Z0ZhY3Rvcnk6IG5ldyBkaXNwbGF5X3V0aWxzLkRPTVNWR0ZhY3RvcnkoKSxcbiAgICAgIGFubm90YXRpb25TdG9yYWdlOiBwYXJhbXMuYW5ub3RhdGlvblN0b3JhZ2UgfHwgbmV3IGFubm90YXRpb25fc3RvcmFnZS5Bbm5vdGF0aW9uU3RvcmFnZSgpLFxuICAgICAgZW5hYmxlU2NyaXB0aW5nOiBwYXJhbXMuZW5hYmxlU2NyaXB0aW5nID09PSB0cnVlLFxuICAgICAgaGFzSlNBY3Rpb25zOiBwYXJhbXMuaGFzSlNBY3Rpb25zLFxuICAgICAgZmllbGRPYmplY3RzOiBwYXJhbXMuZmllbGRPYmplY3RzLFxuICAgICAgcGFyZW50OiB0aGlzLFxuICAgICAgZWxlbWVudHM6IG51bGxcbiAgICB9O1xuICAgIGZvciAoY29uc3QgZGF0YSBvZiBhbm5vdGF0aW9ucykge1xuICAgICAgaWYgKGRhdGEubm9IVE1MKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgY29uc3QgaXNQb3B1cEFubm90YXRpb24gPSBkYXRhLmFubm90YXRpb25UeXBlID09PSB1dGlsLkFubm90YXRpb25UeXBlLlBPUFVQO1xuICAgICAgaWYgKCFpc1BvcHVwQW5ub3RhdGlvbikge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgd2lkdGgsXG4gICAgICAgICAgaGVpZ2h0XG4gICAgICAgIH0gPSBnZXRSZWN0RGltcyhkYXRhLnJlY3QpO1xuICAgICAgICBpZiAod2lkdGggPD0gMCB8fCBoZWlnaHQgPD0gMCkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBlbGVtZW50cyA9IHBvcHVwVG9FbGVtZW50cy5nZXQoZGF0YS5pZCk7XG4gICAgICAgIGlmICghZWxlbWVudHMpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBlbGVtZW50UGFyYW1zLmVsZW1lbnRzID0gZWxlbWVudHM7XG4gICAgICB9XG4gICAgICBlbGVtZW50UGFyYW1zLmRhdGEgPSBkYXRhO1xuICAgICAgY29uc3QgZWxlbWVudCA9IEFubm90YXRpb25FbGVtZW50RmFjdG9yeS5jcmVhdGUoZWxlbWVudFBhcmFtcyk7XG4gICAgICBpZiAoIWVsZW1lbnQuaXNSZW5kZXJhYmxlKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaWYgKCFpc1BvcHVwQW5ub3RhdGlvbiAmJiBkYXRhLnBvcHVwUmVmKSB7XG4gICAgICAgIGNvbnN0IGVsZW1lbnRzID0gcG9wdXBUb0VsZW1lbnRzLmdldChkYXRhLnBvcHVwUmVmKTtcbiAgICAgICAgaWYgKCFlbGVtZW50cykge1xuICAgICAgICAgIHBvcHVwVG9FbGVtZW50cy5zZXQoZGF0YS5wb3B1cFJlZiwgW2VsZW1lbnRdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBlbGVtZW50cy5wdXNoKGVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoZWxlbWVudC5hbm5vdGF0aW9uRWRpdG9yVHlwZSA+IDApIHtcbiAgICAgICAgdGhpcy4jZWRpdGFibGVBbm5vdGF0aW9ucy5zZXQoZWxlbWVudC5kYXRhLmlkLCBlbGVtZW50KTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHJlbmRlcmVkID0gZWxlbWVudC5yZW5kZXIoKTtcbiAgICAgIGlmIChkYXRhLmhpZGRlbikge1xuICAgICAgICByZW5kZXJlZC5zdHlsZS52aXNpYmlsaXR5ID0gXCJoaWRkZW5cIjtcbiAgICAgIH1cbiAgICAgIHRoaXMuI2FwcGVuZEVsZW1lbnQocmVuZGVyZWQsIGRhdGEuaWQpO1xuICAgIH1cbiAgICB0aGlzLiNzZXRBbm5vdGF0aW9uQ2FudmFzTWFwKCk7XG4gIH1cbiAgdXBkYXRlKHtcbiAgICB2aWV3cG9ydFxuICB9KSB7XG4gICAgY29uc3QgbGF5ZXIgPSB0aGlzLmRpdjtcbiAgICB0aGlzLnZpZXdwb3J0ID0gdmlld3BvcnQ7XG4gICAgKDAsZGlzcGxheV91dGlscy5zZXRMYXllckRpbWVuc2lvbnMpKGxheWVyLCB7XG4gICAgICByb3RhdGlvbjogdmlld3BvcnQucm90YXRpb25cbiAgICB9KTtcbiAgICB0aGlzLiNzZXRBbm5vdGF0aW9uQ2FudmFzTWFwKCk7XG4gICAgbGF5ZXIuaGlkZGVuID0gZmFsc2U7XG4gIH1cbiAgI3NldEFubm90YXRpb25DYW52YXNNYXAoKSB7XG4gICAgaWYgKCF0aGlzLiNhbm5vdGF0aW9uQ2FudmFzTWFwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGxheWVyID0gdGhpcy5kaXY7XG4gICAgZm9yIChjb25zdCBbaWQsIGNhbnZhc10gb2YgdGhpcy4jYW5ub3RhdGlvbkNhbnZhc01hcCkge1xuICAgICAgY29uc3QgZWxlbWVudCA9IGxheWVyLnF1ZXJ5U2VsZWN0b3IoYFtkYXRhLWFubm90YXRpb24taWQ9XCIke2lkfVwiXWApO1xuICAgICAgaWYgKCFlbGVtZW50KSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgY29uc3Qge1xuICAgICAgICBmaXJzdENoaWxkXG4gICAgICB9ID0gZWxlbWVudDtcbiAgICAgIGlmICghZmlyc3RDaGlsZCkge1xuICAgICAgICBlbGVtZW50LmFwcGVuZChjYW52YXMpO1xuICAgICAgfSBlbHNlIGlmIChmaXJzdENoaWxkLm5vZGVOYW1lID09PSBcIkNBTlZBU1wiKSB7XG4gICAgICAgIGZpcnN0Q2hpbGQucmVwbGFjZVdpdGgoY2FudmFzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZpcnN0Q2hpbGQuYmVmb3JlKGNhbnZhcyk7XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuI2Fubm90YXRpb25DYW52YXNNYXAuY2xlYXIoKTtcbiAgfVxuICBnZXRFZGl0YWJsZUFubm90YXRpb25zKCkge1xuICAgIHJldHVybiBBcnJheS5mcm9tKHRoaXMuI2VkaXRhYmxlQW5ub3RhdGlvbnMudmFsdWVzKCkpO1xuICB9XG4gIGdldEVkaXRhYmxlQW5ub3RhdGlvbihpZCkge1xuICAgIHJldHVybiB0aGlzLiNlZGl0YWJsZUFubm90YXRpb25zLmdldChpZCk7XG4gIH1cbn1cblxuXG4vKioqLyB9KSxcblxuLyoqKi8gNzgwOlxuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX19fd2VicGFja19tb2R1bGVfXywgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG4vKiBoYXJtb255IGV4cG9ydCAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywge1xuLyogaGFybW9ueSBleHBvcnQgKi8gICBBbm5vdGF0aW9uU3RvcmFnZTogKCkgPT4gKC8qIGJpbmRpbmcgKi8gQW5ub3RhdGlvblN0b3JhZ2UpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBQcmludEFubm90YXRpb25TdG9yYWdlOiAoKSA9PiAoLyogYmluZGluZyAqLyBQcmludEFubm90YXRpb25TdG9yYWdlKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgU2VyaWFsaXphYmxlRW1wdHk6ICgpID0+ICgvKiBiaW5kaW5nICovIFNlcmlhbGl6YWJsZUVtcHR5KVxuLyogaGFybW9ueSBleHBvcnQgKi8gfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX3NoYXJlZF91dGlsX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI2Nik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX2VkaXRvcl9lZGl0b3JfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMTE1KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfc2hhcmVkX211cm11cmhhc2gzX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgyNSk7XG5cblxuXG5jb25zdCBTZXJpYWxpemFibGVFbXB0eSA9IE9iamVjdC5mcmVlemUoe1xuICBtYXA6IG51bGwsXG4gIGhhc2g6IFwiXCIsXG4gIHRyYW5zZmVyOiB1bmRlZmluZWRcbn0pO1xuY2xhc3MgQW5ub3RhdGlvblN0b3JhZ2Uge1xuICAjbW9kaWZpZWQgPSBmYWxzZTtcbiAgI3N0b3JhZ2UgPSBuZXcgTWFwKCk7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMub25TZXRNb2RpZmllZCA9IG51bGw7XG4gICAgdGhpcy5vblJlc2V0TW9kaWZpZWQgPSBudWxsO1xuICAgIHRoaXMub25Bbm5vdGF0aW9uRWRpdG9yID0gbnVsbDtcbiAgfVxuICBnZXRWYWx1ZShrZXksIGRlZmF1bHRWYWx1ZSkge1xuICAgIGNvbnN0IHZhbHVlID0gdGhpcy4jc3RvcmFnZS5nZXQoa2V5KTtcbiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGRlZmF1bHRWYWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oZGVmYXVsdFZhbHVlLCB2YWx1ZSk7XG4gIH1cbiAgZ2V0UmF3VmFsdWUoa2V5KSB7XG4gICAgcmV0dXJuIHRoaXMuI3N0b3JhZ2UuZ2V0KGtleSk7XG4gIH1cbiAgcmVtb3ZlKGtleSkge1xuICAgIHRoaXMuI3N0b3JhZ2UuZGVsZXRlKGtleSk7XG4gICAgaWYgKHRoaXMuI3N0b3JhZ2Uuc2l6ZSA9PT0gMCkge1xuICAgICAgdGhpcy5yZXNldE1vZGlmaWVkKCk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgdGhpcy5vbkFubm90YXRpb25FZGl0b3IgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgZm9yIChjb25zdCB2YWx1ZSBvZiB0aGlzLiNzdG9yYWdlLnZhbHVlcygpKSB7XG4gICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIF9lZGl0b3JfZWRpdG9yX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uQW5ub3RhdGlvbkVkaXRvcikge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhpcy5vbkFubm90YXRpb25FZGl0b3IobnVsbCk7XG4gICAgfVxuICB9XG4gIHNldFZhbHVlKGtleSwgdmFsdWUpIHtcbiAgICBjb25zdCBvYmogPSB0aGlzLiNzdG9yYWdlLmdldChrZXkpO1xuICAgIGxldCBtb2RpZmllZCA9IGZhbHNlO1xuICAgIGlmIChvYmogIT09IHVuZGVmaW5lZCkge1xuICAgICAgZm9yIChjb25zdCBbZW50cnksIHZhbF0gb2YgT2JqZWN0LmVudHJpZXModmFsdWUpKSB7XG4gICAgICAgIGlmIChvYmpbZW50cnldICE9PSB2YWwpIHtcbiAgICAgICAgICBtb2RpZmllZCA9IHRydWU7XG4gICAgICAgICAgb2JqW2VudHJ5XSA9IHZhbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBtb2RpZmllZCA9IHRydWU7XG4gICAgICB0aGlzLiNzdG9yYWdlLnNldChrZXksIHZhbHVlKTtcbiAgICB9XG4gICAgaWYgKG1vZGlmaWVkKSB7XG4gICAgICB0aGlzLiNzZXRNb2RpZmllZCgpO1xuICAgIH1cbiAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBfZWRpdG9yX2VkaXRvcl9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLkFubm90YXRpb25FZGl0b3IgJiYgdHlwZW9mIHRoaXMub25Bbm5vdGF0aW9uRWRpdG9yID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIHRoaXMub25Bbm5vdGF0aW9uRWRpdG9yKHZhbHVlLmNvbnN0cnVjdG9yLl90eXBlKTtcbiAgICB9XG4gIH1cbiAgaGFzKGtleSkge1xuICAgIHJldHVybiB0aGlzLiNzdG9yYWdlLmhhcyhrZXkpO1xuICB9XG4gIGdldEFsbCgpIHtcbiAgICByZXR1cm4gdGhpcy4jc3RvcmFnZS5zaXplID4gMCA/ICgwLF9zaGFyZWRfdXRpbF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLm9iamVjdEZyb21NYXApKHRoaXMuI3N0b3JhZ2UpIDogbnVsbDtcbiAgfVxuICBzZXRBbGwob2JqKSB7XG4gICAgZm9yIChjb25zdCBba2V5LCB2YWxdIG9mIE9iamVjdC5lbnRyaWVzKG9iaikpIHtcbiAgICAgIHRoaXMuc2V0VmFsdWUoa2V5LCB2YWwpO1xuICAgIH1cbiAgfVxuICBnZXQgc2l6ZSgpIHtcbiAgICByZXR1cm4gdGhpcy4jc3RvcmFnZS5zaXplO1xuICB9XG4gICNzZXRNb2RpZmllZCgpIHtcbiAgICBpZiAoIXRoaXMuI21vZGlmaWVkKSB7XG4gICAgICB0aGlzLiNtb2RpZmllZCA9IHRydWU7XG4gICAgICBpZiAodHlwZW9mIHRoaXMub25TZXRNb2RpZmllZCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHRoaXMub25TZXRNb2RpZmllZCgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXNldE1vZGlmaWVkKCkge1xuICAgIGlmICh0aGlzLiNtb2RpZmllZCkge1xuICAgICAgdGhpcy4jbW9kaWZpZWQgPSBmYWxzZTtcbiAgICAgIGlmICh0eXBlb2YgdGhpcy5vblJlc2V0TW9kaWZpZWQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICB0aGlzLm9uUmVzZXRNb2RpZmllZCgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBnZXQgcHJpbnQoKSB7XG4gICAgcmV0dXJuIG5ldyBQcmludEFubm90YXRpb25TdG9yYWdlKHRoaXMpO1xuICB9XG4gIGdldCBzZXJpYWxpemFibGUoKSB7XG4gICAgaWYgKHRoaXMuI3N0b3JhZ2Uuc2l6ZSA9PT0gMCkge1xuICAgICAgcmV0dXJuIFNlcmlhbGl6YWJsZUVtcHR5O1xuICAgIH1cbiAgICBjb25zdCBtYXAgPSBuZXcgTWFwKCksXG4gICAgICBoYXNoID0gbmV3IF9zaGFyZWRfbXVybXVyaGFzaDNfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXy5NdXJtdXJIYXNoM182NCgpLFxuICAgICAgdHJhbnNmZXIgPSBbXTtcbiAgICBjb25zdCBjb250ZXh0ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICBsZXQgaGFzQml0bWFwID0gZmFsc2U7XG4gICAgZm9yIChjb25zdCBba2V5LCB2YWxdIG9mIHRoaXMuI3N0b3JhZ2UpIHtcbiAgICAgIGNvbnN0IHNlcmlhbGl6ZWQgPSB2YWwgaW5zdGFuY2VvZiBfZWRpdG9yX2VkaXRvcl9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLkFubm90YXRpb25FZGl0b3IgPyB2YWwuc2VyaWFsaXplKGZhbHNlLCBjb250ZXh0KSA6IHZhbDtcbiAgICAgIGlmIChzZXJpYWxpemVkKSB7XG4gICAgICAgIG1hcC5zZXQoa2V5LCBzZXJpYWxpemVkKTtcbiAgICAgICAgaGFzaC51cGRhdGUoYCR7a2V5fToke0pTT04uc3RyaW5naWZ5KHNlcmlhbGl6ZWQpfWApO1xuICAgICAgICBoYXNCaXRtYXAgfHw9ICEhc2VyaWFsaXplZC5iaXRtYXA7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChoYXNCaXRtYXApIHtcbiAgICAgIGZvciAoY29uc3QgdmFsdWUgb2YgbWFwLnZhbHVlcygpKSB7XG4gICAgICAgIGlmICh2YWx1ZS5iaXRtYXApIHtcbiAgICAgICAgICB0cmFuc2Zlci5wdXNoKHZhbHVlLmJpdG1hcCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG1hcC5zaXplID4gMCA/IHtcbiAgICAgIG1hcCxcbiAgICAgIGhhc2g6IGhhc2guaGV4ZGlnZXN0KCksXG4gICAgICB0cmFuc2ZlclxuICAgIH0gOiBTZXJpYWxpemFibGVFbXB0eTtcbiAgfVxufVxuY2xhc3MgUHJpbnRBbm5vdGF0aW9uU3RvcmFnZSBleHRlbmRzIEFubm90YXRpb25TdG9yYWdlIHtcbiAgI3NlcmlhbGl6YWJsZTtcbiAgY29uc3RydWN0b3IocGFyZW50KSB7XG4gICAgc3VwZXIoKTtcbiAgICBjb25zdCB7XG4gICAgICBtYXAsXG4gICAgICBoYXNoLFxuICAgICAgdHJhbnNmZXJcbiAgICB9ID0gcGFyZW50LnNlcmlhbGl6YWJsZTtcbiAgICBjb25zdCBjbG9uZSA9IHN0cnVjdHVyZWRDbG9uZShtYXAsIHRyYW5zZmVyID8ge1xuICAgICAgdHJhbnNmZXJcbiAgICB9IDogbnVsbCk7XG4gICAgdGhpcy4jc2VyaWFsaXphYmxlID0ge1xuICAgICAgbWFwOiBjbG9uZSxcbiAgICAgIGhhc2gsXG4gICAgICB0cmFuc2ZlclxuICAgIH07XG4gIH1cbiAgZ2V0IHByaW50KCkge1xuICAgICgwLF9zaGFyZWRfdXRpbF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLnVucmVhY2hhYmxlKShcIlNob3VsZCBub3QgY2FsbCBQcmludEFubm90YXRpb25TdG9yYWdlLnByaW50XCIpO1xuICB9XG4gIGdldCBzZXJpYWxpemFibGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuI3NlcmlhbGl6YWJsZTtcbiAgfVxufVxuXG5cbi8qKiovIH0pLFxuXG4vKioqLyA0MDY6XG4vKioqLyAoKF9fd2VicGFja19tb2R1bGVfXywgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmEoX193ZWJwYWNrX21vZHVsZV9fLCBhc3luYyAoX193ZWJwYWNrX2hhbmRsZV9hc3luY19kZXBlbmRlbmNpZXNfXywgX193ZWJwYWNrX2FzeW5jX3Jlc3VsdF9fKSA9PiB7IHRyeSB7XG4vKiBoYXJtb255IGV4cG9ydCAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywge1xuLyogaGFybW9ueSBleHBvcnQgKi8gICBQREZEYXRhUmFuZ2VUcmFuc3BvcnQ6ICgpID0+ICgvKiBiaW5kaW5nICovIFBERkRhdGFSYW5nZVRyYW5zcG9ydCksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFBERldvcmtlcjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gUERGV29ya2VyKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgYnVpbGQ6ICgpID0+ICgvKiBiaW5kaW5nICovIGJ1aWxkKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgZ2V0RG9jdW1lbnQ6ICgpID0+ICgvKiBiaW5kaW5nICovIGdldERvY3VtZW50KSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgdmVyc2lvbjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gdmVyc2lvbilcbi8qIGhhcm1vbnkgZXhwb3J0ICovIH0pO1xuLyogdW51c2VkIGhhcm1vbnkgZXhwb3J0cyBEZWZhdWx0Q2FudmFzRmFjdG9yeSwgRGVmYXVsdENNYXBSZWFkZXJGYWN0b3J5LCBEZWZhdWx0RmlsdGVyRmFjdG9yeSwgRGVmYXVsdFN0YW5kYXJkRm9udERhdGFGYWN0b3J5LCBMb29wYmFja1BvcnQsIFBERkRvY3VtZW50TG9hZGluZ1Rhc2ssIFBERkRvY3VtZW50UHJveHksIFBERlBhZ2VQcm94eSwgUERGV29ya2VyVXRpbCwgUmVuZGVyVGFzayAqL1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9zaGFyZWRfdXRpbF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNjYpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9hbm5vdGF0aW9uX3N0b3JhZ2VfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyA9IF9fd2VicGFja19yZXF1aXJlX18oNzgwKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfZGlzcGxheV91dGlsc19qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0NzMpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9mb250X2xvYWRlcl9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3NDIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIGRpc3BsYXlfbm9kZV91dGlsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3MzgpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9jYW52YXNfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMjUwKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfd29ya2VyX29wdGlvbnNfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzZfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMzY4KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfc2hhcmVkX21lc3NhZ2VfaGFuZGxlcl9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfN19fID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2OTQpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9tZXRhZGF0YV9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfOF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0NzIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9vcHRpb25hbF9jb250ZW50X2NvbmZpZ19qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfOV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4OTApO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF90cmFuc3BvcnRfc3RyZWFtX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xMF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5Mik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgZGlzcGxheV9mZXRjaF9zdHJlYW1fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzExX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE3MSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgZGlzcGxheV9uZXR3b3JrX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xMl9fID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0NzQpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIGRpc3BsYXlfbm9kZV9zdHJlYW1fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzEzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ5OCk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX3hmYV90ZXh0X2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xNF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1MjEpO1xudmFyIF9fd2VicGFja19hc3luY19kZXBlbmRlbmNpZXNfXyA9IF9fd2VicGFja19oYW5kbGVfYXN5bmNfZGVwZW5kZW5jaWVzX18oW2Rpc3BsYXlfbm9kZV91dGlsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fLCBkaXNwbGF5X25vZGVfc3RyZWFtX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xM19fXSk7XG4oW2Rpc3BsYXlfbm9kZV91dGlsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fLCBkaXNwbGF5X25vZGVfc3RyZWFtX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xM19fXSA9IF9fd2VicGFja19hc3luY19kZXBlbmRlbmNpZXNfXy50aGVuID8gKGF3YWl0IF9fd2VicGFja19hc3luY19kZXBlbmRlbmNpZXNfXykoKSA6IF9fd2VicGFja19hc3luY19kZXBlbmRlbmNpZXNfXyk7XG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5jb25zdCBERUZBVUxUX1JBTkdFX0NIVU5LX1NJWkUgPSA2NTUzNjtcbmNvbnN0IFJFTkRFUklOR19DQU5DRUxMRURfVElNRU9VVCA9IDEwMDtcbmNvbnN0IERFTEFZRURfQ0xFQU5VUF9USU1FT1VUID0gNTAwMDtcbmNvbnN0IERlZmF1bHRDYW52YXNGYWN0b3J5ID0gX3NoYXJlZF91dGlsX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uaXNOb2RlSlMgPyBkaXNwbGF5X25vZGVfdXRpbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfXy5Ob2RlQ2FudmFzRmFjdG9yeSA6IF9kaXNwbGF5X3V0aWxzX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18uRE9NQ2FudmFzRmFjdG9yeTtcbmNvbnN0IERlZmF1bHRDTWFwUmVhZGVyRmFjdG9yeSA9IF9zaGFyZWRfdXRpbF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLmlzTm9kZUpTID8gZGlzcGxheV9ub2RlX3V0aWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X18uTm9kZUNNYXBSZWFkZXJGYWN0b3J5IDogX2Rpc3BsYXlfdXRpbHNfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXy5ET01DTWFwUmVhZGVyRmFjdG9yeTtcbmNvbnN0IERlZmF1bHRGaWx0ZXJGYWN0b3J5ID0gX3NoYXJlZF91dGlsX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uaXNOb2RlSlMgPyBkaXNwbGF5X25vZGVfdXRpbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfXy5Ob2RlRmlsdGVyRmFjdG9yeSA6IF9kaXNwbGF5X3V0aWxzX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18uRE9NRmlsdGVyRmFjdG9yeTtcbmNvbnN0IERlZmF1bHRTdGFuZGFyZEZvbnREYXRhRmFjdG9yeSA9IF9zaGFyZWRfdXRpbF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLmlzTm9kZUpTID8gZGlzcGxheV9ub2RlX3V0aWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X18uTm9kZVN0YW5kYXJkRm9udERhdGFGYWN0b3J5IDogX2Rpc3BsYXlfdXRpbHNfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXy5ET01TdGFuZGFyZEZvbnREYXRhRmFjdG9yeTtcbmZ1bmN0aW9uIGdldERvY3VtZW50KHNyYykge1xuICBpZiAodHlwZW9mIHNyYyA9PT0gXCJzdHJpbmdcIiB8fCBzcmMgaW5zdGFuY2VvZiBVUkwpIHtcbiAgICBzcmMgPSB7XG4gICAgICB1cmw6IHNyY1xuICAgIH07XG4gIH0gZWxzZSBpZiAoKDAsX3NoYXJlZF91dGlsX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uaXNBcnJheUJ1ZmZlcikoc3JjKSkge1xuICAgIHNyYyA9IHtcbiAgICAgIGRhdGE6IHNyY1xuICAgIH07XG4gIH1cbiAgaWYgKHR5cGVvZiBzcmMgIT09IFwib2JqZWN0XCIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIHBhcmFtZXRlciBpbiBnZXREb2N1bWVudCwgbmVlZCBwYXJhbWV0ZXIgb2JqZWN0LlwiKTtcbiAgfVxuICBpZiAoIXNyYy51cmwgJiYgIXNyYy5kYXRhICYmICFzcmMucmFuZ2UpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIHBhcmFtZXRlciBvYmplY3Q6IG5lZWQgZWl0aGVyIC5kYXRhLCAucmFuZ2Ugb3IgLnVybFwiKTtcbiAgfVxuICBjb25zdCB0YXNrID0gbmV3IFBERkRvY3VtZW50TG9hZGluZ1Rhc2soKTtcbiAgY29uc3Qge1xuICAgIGRvY0lkXG4gIH0gPSB0YXNrO1xuICBjb25zdCB1cmwgPSBzcmMudXJsID8gZ2V0VXJsUHJvcChzcmMudXJsKSA6IG51bGw7XG4gIGNvbnN0IGRhdGEgPSBzcmMuZGF0YSA/IGdldERhdGFQcm9wKHNyYy5kYXRhKSA6IG51bGw7XG4gIGNvbnN0IGh0dHBIZWFkZXJzID0gc3JjLmh0dHBIZWFkZXJzIHx8IG51bGw7XG4gIGNvbnN0IHdpdGhDcmVkZW50aWFscyA9IHNyYy53aXRoQ3JlZGVudGlhbHMgPT09IHRydWU7XG4gIGNvbnN0IHBhc3N3b3JkID0gc3JjLnBhc3N3b3JkID8/IG51bGw7XG4gIGNvbnN0IHJhbmdlVHJhbnNwb3J0ID0gc3JjLnJhbmdlIGluc3RhbmNlb2YgUERGRGF0YVJhbmdlVHJhbnNwb3J0ID8gc3JjLnJhbmdlIDogbnVsbDtcbiAgY29uc3QgcmFuZ2VDaHVua1NpemUgPSBOdW1iZXIuaXNJbnRlZ2VyKHNyYy5yYW5nZUNodW5rU2l6ZSkgJiYgc3JjLnJhbmdlQ2h1bmtTaXplID4gMCA/IHNyYy5yYW5nZUNodW5rU2l6ZSA6IERFRkFVTFRfUkFOR0VfQ0hVTktfU0laRTtcbiAgbGV0IHdvcmtlciA9IHNyYy53b3JrZXIgaW5zdGFuY2VvZiBQREZXb3JrZXIgPyBzcmMud29ya2VyIDogbnVsbDtcbiAgY29uc3QgdmVyYm9zaXR5ID0gc3JjLnZlcmJvc2l0eTtcbiAgY29uc3QgZG9jQmFzZVVybCA9IHR5cGVvZiBzcmMuZG9jQmFzZVVybCA9PT0gXCJzdHJpbmdcIiAmJiAhKDAsX2Rpc3BsYXlfdXRpbHNfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXy5pc0RhdGFTY2hlbWUpKHNyYy5kb2NCYXNlVXJsKSA/IHNyYy5kb2NCYXNlVXJsIDogbnVsbDtcbiAgY29uc3QgY01hcFVybCA9IHR5cGVvZiBzcmMuY01hcFVybCA9PT0gXCJzdHJpbmdcIiA/IHNyYy5jTWFwVXJsIDogbnVsbDtcbiAgY29uc3QgY01hcFBhY2tlZCA9IHNyYy5jTWFwUGFja2VkICE9PSBmYWxzZTtcbiAgY29uc3QgQ01hcFJlYWRlckZhY3RvcnkgPSBzcmMuQ01hcFJlYWRlckZhY3RvcnkgfHwgRGVmYXVsdENNYXBSZWFkZXJGYWN0b3J5O1xuICBjb25zdCBzdGFuZGFyZEZvbnREYXRhVXJsID0gdHlwZW9mIHNyYy5zdGFuZGFyZEZvbnREYXRhVXJsID09PSBcInN0cmluZ1wiID8gc3JjLnN0YW5kYXJkRm9udERhdGFVcmwgOiBudWxsO1xuICBjb25zdCBTdGFuZGFyZEZvbnREYXRhRmFjdG9yeSA9IHNyYy5TdGFuZGFyZEZvbnREYXRhRmFjdG9yeSB8fCBEZWZhdWx0U3RhbmRhcmRGb250RGF0YUZhY3Rvcnk7XG4gIGNvbnN0IGlnbm9yZUVycm9ycyA9IHNyYy5zdG9wQXRFcnJvcnMgIT09IHRydWU7XG4gIGNvbnN0IG1heEltYWdlU2l6ZSA9IE51bWJlci5pc0ludGVnZXIoc3JjLm1heEltYWdlU2l6ZSkgJiYgc3JjLm1heEltYWdlU2l6ZSA+IC0xID8gc3JjLm1heEltYWdlU2l6ZSA6IC0xO1xuICBjb25zdCBpc0V2YWxTdXBwb3J0ZWQgPSBzcmMuaXNFdmFsU3VwcG9ydGVkICE9PSBmYWxzZTtcbiAgY29uc3QgaXNPZmZzY3JlZW5DYW52YXNTdXBwb3J0ZWQgPSB0eXBlb2Ygc3JjLmlzT2Zmc2NyZWVuQ2FudmFzU3VwcG9ydGVkID09PSBcImJvb2xlYW5cIiA/IHNyYy5pc09mZnNjcmVlbkNhbnZhc1N1cHBvcnRlZCA6ICFfc2hhcmVkX3V0aWxfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5pc05vZGVKUztcbiAgY29uc3QgY2FudmFzTWF4QXJlYUluQnl0ZXMgPSBOdW1iZXIuaXNJbnRlZ2VyKHNyYy5jYW52YXNNYXhBcmVhSW5CeXRlcykgPyBzcmMuY2FudmFzTWF4QXJlYUluQnl0ZXMgOiAtMTtcbiAgY29uc3QgZGlzYWJsZUZvbnRGYWNlID0gdHlwZW9mIHNyYy5kaXNhYmxlRm9udEZhY2UgPT09IFwiYm9vbGVhblwiID8gc3JjLmRpc2FibGVGb250RmFjZSA6IF9zaGFyZWRfdXRpbF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLmlzTm9kZUpTO1xuICBjb25zdCBmb250RXh0cmFQcm9wZXJ0aWVzID0gc3JjLmZvbnRFeHRyYVByb3BlcnRpZXMgPT09IHRydWU7XG4gIGNvbnN0IGVuYWJsZVhmYSA9IHNyYy5lbmFibGVYZmEgPT09IHRydWU7XG4gIGNvbnN0IG93bmVyRG9jdW1lbnQgPSBzcmMub3duZXJEb2N1bWVudCB8fCBnbG9iYWxUaGlzLmRvY3VtZW50O1xuICBjb25zdCBkaXNhYmxlUmFuZ2UgPSBzcmMuZGlzYWJsZVJhbmdlID09PSB0cnVlO1xuICBjb25zdCBkaXNhYmxlU3RyZWFtID0gc3JjLmRpc2FibGVTdHJlYW0gPT09IHRydWU7XG4gIGNvbnN0IGRpc2FibGVBdXRvRmV0Y2ggPSBzcmMuZGlzYWJsZUF1dG9GZXRjaCA9PT0gdHJ1ZTtcbiAgY29uc3QgcGRmQnVnID0gc3JjLnBkZkJ1ZyA9PT0gdHJ1ZTtcbiAgY29uc3QgbGVuZ3RoID0gcmFuZ2VUcmFuc3BvcnQgPyByYW5nZVRyYW5zcG9ydC5sZW5ndGggOiBzcmMubGVuZ3RoID8/IE5hTjtcbiAgY29uc3QgdXNlU3lzdGVtRm9udHMgPSB0eXBlb2Ygc3JjLnVzZVN5c3RlbUZvbnRzID09PSBcImJvb2xlYW5cIiA/IHNyYy51c2VTeXN0ZW1Gb250cyA6ICFfc2hhcmVkX3V0aWxfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5pc05vZGVKUyAmJiAhZGlzYWJsZUZvbnRGYWNlO1xuICBjb25zdCB1c2VXb3JrZXJGZXRjaCA9IHR5cGVvZiBzcmMudXNlV29ya2VyRmV0Y2ggPT09IFwiYm9vbGVhblwiID8gc3JjLnVzZVdvcmtlckZldGNoIDogQ01hcFJlYWRlckZhY3RvcnkgPT09IF9kaXNwbGF5X3V0aWxzX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18uRE9NQ01hcFJlYWRlckZhY3RvcnkgJiYgU3RhbmRhcmRGb250RGF0YUZhY3RvcnkgPT09IF9kaXNwbGF5X3V0aWxzX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18uRE9NU3RhbmRhcmRGb250RGF0YUZhY3RvcnkgJiYgY01hcFVybCAmJiBzdGFuZGFyZEZvbnREYXRhVXJsICYmICgwLF9kaXNwbGF5X3V0aWxzX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18uaXNWYWxpZEZldGNoVXJsKShjTWFwVXJsLCBkb2N1bWVudC5iYXNlVVJJKSAmJiAoMCxfZGlzcGxheV91dGlsc19qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fLmlzVmFsaWRGZXRjaFVybCkoc3RhbmRhcmRGb250RGF0YVVybCwgZG9jdW1lbnQuYmFzZVVSSSk7XG4gIGNvbnN0IGNhbnZhc0ZhY3RvcnkgPSBzcmMuY2FudmFzRmFjdG9yeSB8fCBuZXcgRGVmYXVsdENhbnZhc0ZhY3Rvcnkoe1xuICAgIG93bmVyRG9jdW1lbnRcbiAgfSk7XG4gIGNvbnN0IGZpbHRlckZhY3RvcnkgPSBzcmMuZmlsdGVyRmFjdG9yeSB8fCBuZXcgRGVmYXVsdEZpbHRlckZhY3Rvcnkoe1xuICAgIGRvY0lkLFxuICAgIG93bmVyRG9jdW1lbnRcbiAgfSk7XG4gIGNvbnN0IHN0eWxlRWxlbWVudCA9IG51bGw7XG4gICgwLF9zaGFyZWRfdXRpbF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLnNldFZlcmJvc2l0eUxldmVsKSh2ZXJib3NpdHkpO1xuICBjb25zdCB0cmFuc3BvcnRGYWN0b3J5ID0ge1xuICAgIGNhbnZhc0ZhY3RvcnksXG4gICAgZmlsdGVyRmFjdG9yeVxuICB9O1xuICBpZiAoIXVzZVdvcmtlckZldGNoKSB7XG4gICAgdHJhbnNwb3J0RmFjdG9yeS5jTWFwUmVhZGVyRmFjdG9yeSA9IG5ldyBDTWFwUmVhZGVyRmFjdG9yeSh7XG4gICAgICBiYXNlVXJsOiBjTWFwVXJsLFxuICAgICAgaXNDb21wcmVzc2VkOiBjTWFwUGFja2VkXG4gICAgfSk7XG4gICAgdHJhbnNwb3J0RmFjdG9yeS5zdGFuZGFyZEZvbnREYXRhRmFjdG9yeSA9IG5ldyBTdGFuZGFyZEZvbnREYXRhRmFjdG9yeSh7XG4gICAgICBiYXNlVXJsOiBzdGFuZGFyZEZvbnREYXRhVXJsXG4gICAgfSk7XG4gIH1cbiAgaWYgKCF3b3JrZXIpIHtcbiAgICBjb25zdCB3b3JrZXJQYXJhbXMgPSB7XG4gICAgICB2ZXJib3NpdHksXG4gICAgICBwb3J0OiBfd29ya2VyX29wdGlvbnNfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzZfXy5HbG9iYWxXb3JrZXJPcHRpb25zLndvcmtlclBvcnRcbiAgICB9O1xuICAgIHdvcmtlciA9IHdvcmtlclBhcmFtcy5wb3J0ID8gUERGV29ya2VyLmZyb21Qb3J0KHdvcmtlclBhcmFtcykgOiBuZXcgUERGV29ya2VyKHdvcmtlclBhcmFtcyk7XG4gICAgdGFzay5fd29ya2VyID0gd29ya2VyO1xuICB9XG4gIGNvbnN0IGZldGNoRG9jUGFyYW1zID0ge1xuICAgIGRvY0lkLFxuICAgIGFwaVZlcnNpb246ICc0LjAuMzc5JyxcbiAgICBkYXRhLFxuICAgIHBhc3N3b3JkLFxuICAgIGRpc2FibGVBdXRvRmV0Y2gsXG4gICAgcmFuZ2VDaHVua1NpemUsXG4gICAgbGVuZ3RoLFxuICAgIGRvY0Jhc2VVcmwsXG4gICAgZW5hYmxlWGZhLFxuICAgIGV2YWx1YXRvck9wdGlvbnM6IHtcbiAgICAgIG1heEltYWdlU2l6ZSxcbiAgICAgIGRpc2FibGVGb250RmFjZSxcbiAgICAgIGlnbm9yZUVycm9ycyxcbiAgICAgIGlzRXZhbFN1cHBvcnRlZCxcbiAgICAgIGlzT2Zmc2NyZWVuQ2FudmFzU3VwcG9ydGVkLFxuICAgICAgY2FudmFzTWF4QXJlYUluQnl0ZXMsXG4gICAgICBmb250RXh0cmFQcm9wZXJ0aWVzLFxuICAgICAgdXNlU3lzdGVtRm9udHMsXG4gICAgICBjTWFwVXJsOiB1c2VXb3JrZXJGZXRjaCA/IGNNYXBVcmwgOiBudWxsLFxuICAgICAgc3RhbmRhcmRGb250RGF0YVVybDogdXNlV29ya2VyRmV0Y2ggPyBzdGFuZGFyZEZvbnREYXRhVXJsIDogbnVsbFxuICAgIH1cbiAgfTtcbiAgY29uc3QgdHJhbnNwb3J0UGFyYW1zID0ge1xuICAgIGlnbm9yZUVycm9ycyxcbiAgICBpc0V2YWxTdXBwb3J0ZWQsXG4gICAgZGlzYWJsZUZvbnRGYWNlLFxuICAgIGZvbnRFeHRyYVByb3BlcnRpZXMsXG4gICAgZW5hYmxlWGZhLFxuICAgIG93bmVyRG9jdW1lbnQsXG4gICAgZGlzYWJsZUF1dG9GZXRjaCxcbiAgICBwZGZCdWcsXG4gICAgc3R5bGVFbGVtZW50XG4gIH07XG4gIHdvcmtlci5wcm9taXNlLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgIGlmICh0YXNrLmRlc3Ryb3llZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTG9hZGluZyBhYm9ydGVkXCIpO1xuICAgIH1cbiAgICBjb25zdCB3b3JrZXJJZFByb21pc2UgPSBfZmV0Y2hEb2N1bWVudCh3b3JrZXIsIGZldGNoRG9jUGFyYW1zKTtcbiAgICBjb25zdCBuZXR3b3JrU3RyZWFtUHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICBsZXQgbmV0d29ya1N0cmVhbTtcbiAgICAgIGlmIChyYW5nZVRyYW5zcG9ydCkge1xuICAgICAgICBuZXR3b3JrU3RyZWFtID0gbmV3IF90cmFuc3BvcnRfc3RyZWFtX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xMF9fLlBERkRhdGFUcmFuc3BvcnRTdHJlYW0oe1xuICAgICAgICAgIGxlbmd0aCxcbiAgICAgICAgICBpbml0aWFsRGF0YTogcmFuZ2VUcmFuc3BvcnQuaW5pdGlhbERhdGEsXG4gICAgICAgICAgcHJvZ3Jlc3NpdmVEb25lOiByYW5nZVRyYW5zcG9ydC5wcm9ncmVzc2l2ZURvbmUsXG4gICAgICAgICAgY29udGVudERpc3Bvc2l0aW9uRmlsZW5hbWU6IHJhbmdlVHJhbnNwb3J0LmNvbnRlbnREaXNwb3NpdGlvbkZpbGVuYW1lLFxuICAgICAgICAgIGRpc2FibGVSYW5nZSxcbiAgICAgICAgICBkaXNhYmxlU3RyZWFtXG4gICAgICAgIH0sIHJhbmdlVHJhbnNwb3J0KTtcbiAgICAgIH0gZWxzZSBpZiAoIWRhdGEpIHtcbiAgICAgICAgY29uc3QgY3JlYXRlUERGTmV0d29ya1N0cmVhbSA9IHBhcmFtcyA9PiB7XG4gICAgICAgICAgaWYgKF9zaGFyZWRfdXRpbF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLmlzTm9kZUpTKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IGRpc3BsYXlfbm9kZV9zdHJlYW1fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzEzX18uUERGTm9kZVN0cmVhbShwYXJhbXMpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gKDAsX2Rpc3BsYXlfdXRpbHNfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXy5pc1ZhbGlkRmV0Y2hVcmwpKHBhcmFtcy51cmwpID8gbmV3IGRpc3BsYXlfZmV0Y2hfc3RyZWFtX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xMV9fLlBERkZldGNoU3RyZWFtKHBhcmFtcykgOiBuZXcgZGlzcGxheV9uZXR3b3JrX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xMl9fLlBERk5ldHdvcmtTdHJlYW0ocGFyYW1zKTtcbiAgICAgICAgfTtcbiAgICAgICAgbmV0d29ya1N0cmVhbSA9IGNyZWF0ZVBERk5ldHdvcmtTdHJlYW0oe1xuICAgICAgICAgIHVybCxcbiAgICAgICAgICBsZW5ndGgsXG4gICAgICAgICAgaHR0cEhlYWRlcnMsXG4gICAgICAgICAgd2l0aENyZWRlbnRpYWxzLFxuICAgICAgICAgIHJhbmdlQ2h1bmtTaXplLFxuICAgICAgICAgIGRpc2FibGVSYW5nZSxcbiAgICAgICAgICBkaXNhYmxlU3RyZWFtXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgcmVzb2x2ZShuZXR3b3JrU3RyZWFtKTtcbiAgICB9KTtcbiAgICByZXR1cm4gUHJvbWlzZS5hbGwoW3dvcmtlcklkUHJvbWlzZSwgbmV0d29ya1N0cmVhbVByb21pc2VdKS50aGVuKGZ1bmN0aW9uIChbd29ya2VySWQsIG5ldHdvcmtTdHJlYW1dKSB7XG4gICAgICBpZiAodGFzay5kZXN0cm95ZWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTG9hZGluZyBhYm9ydGVkXCIpO1xuICAgICAgfVxuICAgICAgY29uc3QgbWVzc2FnZUhhbmRsZXIgPSBuZXcgX3NoYXJlZF9tZXNzYWdlX2hhbmRsZXJfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzdfXy5NZXNzYWdlSGFuZGxlcihkb2NJZCwgd29ya2VySWQsIHdvcmtlci5wb3J0KTtcbiAgICAgIGNvbnN0IHRyYW5zcG9ydCA9IG5ldyBXb3JrZXJUcmFuc3BvcnQobWVzc2FnZUhhbmRsZXIsIHRhc2ssIG5ldHdvcmtTdHJlYW0sIHRyYW5zcG9ydFBhcmFtcywgdHJhbnNwb3J0RmFjdG9yeSk7XG4gICAgICB0YXNrLl90cmFuc3BvcnQgPSB0cmFuc3BvcnQ7XG4gICAgICBtZXNzYWdlSGFuZGxlci5zZW5kKFwiUmVhZHlcIiwgbnVsbCk7XG4gICAgfSk7XG4gIH0pLmNhdGNoKHRhc2suX2NhcGFiaWxpdHkucmVqZWN0KTtcbiAgcmV0dXJuIHRhc2s7XG59XG5hc3luYyBmdW5jdGlvbiBfZmV0Y2hEb2N1bWVudCh3b3JrZXIsIHNvdXJjZSkge1xuICBpZiAod29ya2VyLmRlc3Ryb3llZCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIldvcmtlciB3YXMgZGVzdHJveWVkXCIpO1xuICB9XG4gIGNvbnN0IHdvcmtlcklkID0gYXdhaXQgd29ya2VyLm1lc3NhZ2VIYW5kbGVyLnNlbmRXaXRoUHJvbWlzZShcIkdldERvY1JlcXVlc3RcIiwgc291cmNlLCBzb3VyY2UuZGF0YSA/IFtzb3VyY2UuZGF0YS5idWZmZXJdIDogbnVsbCk7XG4gIGlmICh3b3JrZXIuZGVzdHJveWVkKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiV29ya2VyIHdhcyBkZXN0cm95ZWRcIik7XG4gIH1cbiAgcmV0dXJuIHdvcmtlcklkO1xufVxuZnVuY3Rpb24gZ2V0VXJsUHJvcCh2YWwpIHtcbiAgaWYgKHZhbCBpbnN0YW5jZW9mIFVSTCkge1xuICAgIHJldHVybiB2YWwuaHJlZjtcbiAgfVxuICB0cnkge1xuICAgIHJldHVybiBuZXcgVVJMKHZhbCwgd2luZG93LmxvY2F0aW9uKS5ocmVmO1xuICB9IGNhdGNoIHtcbiAgICBpZiAoX3NoYXJlZF91dGlsX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uaXNOb2RlSlMgJiYgdHlwZW9mIHZhbCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgcmV0dXJuIHZhbDtcbiAgICB9XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBQREYgdXJsIGRhdGE6IFwiICsgXCJlaXRoZXIgc3RyaW5nIG9yIFVSTC1vYmplY3QgaXMgZXhwZWN0ZWQgaW4gdGhlIHVybCBwcm9wZXJ0eS5cIik7XG59XG5mdW5jdGlvbiBnZXREYXRhUHJvcCh2YWwpIHtcbiAgaWYgKF9zaGFyZWRfdXRpbF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLmlzTm9kZUpTICYmIHR5cGVvZiBCdWZmZXIgIT09IFwidW5kZWZpbmVkXCIgJiYgdmFsIGluc3RhbmNlb2YgQnVmZmVyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiUGxlYXNlIHByb3ZpZGUgYmluYXJ5IGRhdGEgYXMgYFVpbnQ4QXJyYXlgLCByYXRoZXIgdGhhbiBgQnVmZmVyYC5cIik7XG4gIH1cbiAgaWYgKHZhbCBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkgJiYgdmFsLmJ5dGVMZW5ndGggPT09IHZhbC5idWZmZXIuYnl0ZUxlbmd0aCkge1xuICAgIHJldHVybiB2YWw7XG4gIH1cbiAgaWYgKHR5cGVvZiB2YWwgPT09IFwic3RyaW5nXCIpIHtcbiAgICByZXR1cm4gKDAsX3NoYXJlZF91dGlsX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uc3RyaW5nVG9CeXRlcykodmFsKTtcbiAgfVxuICBpZiAodHlwZW9mIHZhbCA9PT0gXCJvYmplY3RcIiAmJiAhaXNOYU4odmFsPy5sZW5ndGgpIHx8ICgwLF9zaGFyZWRfdXRpbF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLmlzQXJyYXlCdWZmZXIpKHZhbCkpIHtcbiAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkodmFsKTtcbiAgfVxuICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIFBERiBiaW5hcnkgZGF0YTogZWl0aGVyIFR5cGVkQXJyYXksIFwiICsgXCJzdHJpbmcsIG9yIGFycmF5LWxpa2Ugb2JqZWN0IGlzIGV4cGVjdGVkIGluIHRoZSBkYXRhIHByb3BlcnR5LlwiKTtcbn1cbmNsYXNzIFBERkRvY3VtZW50TG9hZGluZ1Rhc2sge1xuICBzdGF0aWMgI2RvY0lkID0gMDtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5fY2FwYWJpbGl0eSA9IG5ldyBfc2hhcmVkX3V0aWxfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5Qcm9taXNlQ2FwYWJpbGl0eSgpO1xuICAgIHRoaXMuX3RyYW5zcG9ydCA9IG51bGw7XG4gICAgdGhpcy5fd29ya2VyID0gbnVsbDtcbiAgICB0aGlzLmRvY0lkID0gYGQke1BERkRvY3VtZW50TG9hZGluZ1Rhc2suI2RvY0lkKyt9YDtcbiAgICB0aGlzLmRlc3Ryb3llZCA9IGZhbHNlO1xuICAgIHRoaXMub25QYXNzd29yZCA9IG51bGw7XG4gICAgdGhpcy5vblByb2dyZXNzID0gbnVsbDtcbiAgfVxuICBnZXQgcHJvbWlzZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9XG4gIGFzeW5jIGRlc3Ryb3koKSB7XG4gICAgdGhpcy5kZXN0cm95ZWQgPSB0cnVlO1xuICAgIHRyeSB7XG4gICAgICBpZiAodGhpcy5fd29ya2VyPy5wb3J0KSB7XG4gICAgICAgIHRoaXMuX3dvcmtlci5fcGVuZGluZ0Rlc3Ryb3kgPSB0cnVlO1xuICAgICAgfVxuICAgICAgYXdhaXQgdGhpcy5fdHJhbnNwb3J0Py5kZXN0cm95KCk7XG4gICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgIGlmICh0aGlzLl93b3JrZXI/LnBvcnQpIHtcbiAgICAgICAgZGVsZXRlIHRoaXMuX3dvcmtlci5fcGVuZGluZ0Rlc3Ryb3k7XG4gICAgICB9XG4gICAgICB0aHJvdyBleDtcbiAgICB9XG4gICAgdGhpcy5fdHJhbnNwb3J0ID0gbnVsbDtcbiAgICBpZiAodGhpcy5fd29ya2VyKSB7XG4gICAgICB0aGlzLl93b3JrZXIuZGVzdHJveSgpO1xuICAgICAgdGhpcy5fd29ya2VyID0gbnVsbDtcbiAgICB9XG4gIH1cbn1cbmNsYXNzIFBERkRhdGFSYW5nZVRyYW5zcG9ydCB7XG4gIGNvbnN0cnVjdG9yKGxlbmd0aCwgaW5pdGlhbERhdGEsIHByb2dyZXNzaXZlRG9uZSA9IGZhbHNlLCBjb250ZW50RGlzcG9zaXRpb25GaWxlbmFtZSA9IG51bGwpIHtcbiAgICB0aGlzLmxlbmd0aCA9IGxlbmd0aDtcbiAgICB0aGlzLmluaXRpYWxEYXRhID0gaW5pdGlhbERhdGE7XG4gICAgdGhpcy5wcm9ncmVzc2l2ZURvbmUgPSBwcm9ncmVzc2l2ZURvbmU7XG4gICAgdGhpcy5jb250ZW50RGlzcG9zaXRpb25GaWxlbmFtZSA9IGNvbnRlbnREaXNwb3NpdGlvbkZpbGVuYW1lO1xuICAgIHRoaXMuX3JhbmdlTGlzdGVuZXJzID0gW107XG4gICAgdGhpcy5fcHJvZ3Jlc3NMaXN0ZW5lcnMgPSBbXTtcbiAgICB0aGlzLl9wcm9ncmVzc2l2ZVJlYWRMaXN0ZW5lcnMgPSBbXTtcbiAgICB0aGlzLl9wcm9ncmVzc2l2ZURvbmVMaXN0ZW5lcnMgPSBbXTtcbiAgICB0aGlzLl9yZWFkeUNhcGFiaWxpdHkgPSBuZXcgX3NoYXJlZF91dGlsX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uUHJvbWlzZUNhcGFiaWxpdHkoKTtcbiAgfVxuICBhZGRSYW5nZUxpc3RlbmVyKGxpc3RlbmVyKSB7XG4gICAgdGhpcy5fcmFuZ2VMaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG4gIH1cbiAgYWRkUHJvZ3Jlc3NMaXN0ZW5lcihsaXN0ZW5lcikge1xuICAgIHRoaXMuX3Byb2dyZXNzTGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICB9XG4gIGFkZFByb2dyZXNzaXZlUmVhZExpc3RlbmVyKGxpc3RlbmVyKSB7XG4gICAgdGhpcy5fcHJvZ3Jlc3NpdmVSZWFkTGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICB9XG4gIGFkZFByb2dyZXNzaXZlRG9uZUxpc3RlbmVyKGxpc3RlbmVyKSB7XG4gICAgdGhpcy5fcHJvZ3Jlc3NpdmVEb25lTGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICB9XG4gIG9uRGF0YVJhbmdlKGJlZ2luLCBjaHVuaykge1xuICAgIGZvciAoY29uc3QgbGlzdGVuZXIgb2YgdGhpcy5fcmFuZ2VMaXN0ZW5lcnMpIHtcbiAgICAgIGxpc3RlbmVyKGJlZ2luLCBjaHVuayk7XG4gICAgfVxuICB9XG4gIG9uRGF0YVByb2dyZXNzKGxvYWRlZCwgdG90YWwpIHtcbiAgICB0aGlzLl9yZWFkeUNhcGFiaWxpdHkucHJvbWlzZS50aGVuKCgpID0+IHtcbiAgICAgIGZvciAoY29uc3QgbGlzdGVuZXIgb2YgdGhpcy5fcHJvZ3Jlc3NMaXN0ZW5lcnMpIHtcbiAgICAgICAgbGlzdGVuZXIobG9hZGVkLCB0b3RhbCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgb25EYXRhUHJvZ3Jlc3NpdmVSZWFkKGNodW5rKSB7XG4gICAgdGhpcy5fcmVhZHlDYXBhYmlsaXR5LnByb21pc2UudGhlbigoKSA9PiB7XG4gICAgICBmb3IgKGNvbnN0IGxpc3RlbmVyIG9mIHRoaXMuX3Byb2dyZXNzaXZlUmVhZExpc3RlbmVycykge1xuICAgICAgICBsaXN0ZW5lcihjaHVuayk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgb25EYXRhUHJvZ3Jlc3NpdmVEb25lKCkge1xuICAgIHRoaXMuX3JlYWR5Q2FwYWJpbGl0eS5wcm9taXNlLnRoZW4oKCkgPT4ge1xuICAgICAgZm9yIChjb25zdCBsaXN0ZW5lciBvZiB0aGlzLl9wcm9ncmVzc2l2ZURvbmVMaXN0ZW5lcnMpIHtcbiAgICAgICAgbGlzdGVuZXIoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICB0cmFuc3BvcnRSZWFkeSgpIHtcbiAgICB0aGlzLl9yZWFkeUNhcGFiaWxpdHkucmVzb2x2ZSgpO1xuICB9XG4gIHJlcXVlc3REYXRhUmFuZ2UoYmVnaW4sIGVuZCkge1xuICAgICgwLF9zaGFyZWRfdXRpbF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLnVucmVhY2hhYmxlKShcIkFic3RyYWN0IG1ldGhvZCBQREZEYXRhUmFuZ2VUcmFuc3BvcnQucmVxdWVzdERhdGFSYW5nZVwiKTtcbiAgfVxuICBhYm9ydCgpIHt9XG59XG5jbGFzcyBQREZEb2N1bWVudFByb3h5IHtcbiAgY29uc3RydWN0b3IocGRmSW5mbywgdHJhbnNwb3J0KSB7XG4gICAgdGhpcy5fcGRmSW5mbyA9IHBkZkluZm87XG4gICAgdGhpcy5fdHJhbnNwb3J0ID0gdHJhbnNwb3J0O1xuICB9XG4gIGdldCBhbm5vdGF0aW9uU3RvcmFnZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fdHJhbnNwb3J0LmFubm90YXRpb25TdG9yYWdlO1xuICB9XG4gIGdldCBmaWx0ZXJGYWN0b3J5KCkge1xuICAgIHJldHVybiB0aGlzLl90cmFuc3BvcnQuZmlsdGVyRmFjdG9yeTtcbiAgfVxuICBnZXQgbnVtUGFnZXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3BkZkluZm8ubnVtUGFnZXM7XG4gIH1cbiAgZ2V0IGZpbmdlcnByaW50cygpIHtcbiAgICByZXR1cm4gdGhpcy5fcGRmSW5mby5maW5nZXJwcmludHM7XG4gIH1cbiAgZ2V0IGlzUHVyZVhmYSgpIHtcbiAgICByZXR1cm4gKDAsX3NoYXJlZF91dGlsX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uc2hhZG93KSh0aGlzLCBcImlzUHVyZVhmYVwiLCAhIXRoaXMuX3RyYW5zcG9ydC5faHRtbEZvclhmYSk7XG4gIH1cbiAgZ2V0IGFsbFhmYUh0bWwoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3RyYW5zcG9ydC5faHRtbEZvclhmYTtcbiAgfVxuICBnZXRQYWdlKHBhZ2VOdW1iZXIpIHtcbiAgICByZXR1cm4gdGhpcy5fdHJhbnNwb3J0LmdldFBhZ2UocGFnZU51bWJlcik7XG4gIH1cbiAgZ2V0UGFnZUluZGV4KHJlZikge1xuICAgIHJldHVybiB0aGlzLl90cmFuc3BvcnQuZ2V0UGFnZUluZGV4KHJlZik7XG4gIH1cbiAgZ2V0RGVzdGluYXRpb25zKCkge1xuICAgIHJldHVybiB0aGlzLl90cmFuc3BvcnQuZ2V0RGVzdGluYXRpb25zKCk7XG4gIH1cbiAgZ2V0RGVzdGluYXRpb24oaWQpIHtcbiAgICByZXR1cm4gdGhpcy5fdHJhbnNwb3J0LmdldERlc3RpbmF0aW9uKGlkKTtcbiAgfVxuICBnZXRQYWdlTGFiZWxzKCkge1xuICAgIHJldHVybiB0aGlzLl90cmFuc3BvcnQuZ2V0UGFnZUxhYmVscygpO1xuICB9XG4gIGdldFBhZ2VMYXlvdXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3RyYW5zcG9ydC5nZXRQYWdlTGF5b3V0KCk7XG4gIH1cbiAgZ2V0UGFnZU1vZGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3RyYW5zcG9ydC5nZXRQYWdlTW9kZSgpO1xuICB9XG4gIGdldFZpZXdlclByZWZlcmVuY2VzKCkge1xuICAgIHJldHVybiB0aGlzLl90cmFuc3BvcnQuZ2V0Vmlld2VyUHJlZmVyZW5jZXMoKTtcbiAgfVxuICBnZXRPcGVuQWN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLl90cmFuc3BvcnQuZ2V0T3BlbkFjdGlvbigpO1xuICB9XG4gIGdldEF0dGFjaG1lbnRzKCkge1xuICAgIHJldHVybiB0aGlzLl90cmFuc3BvcnQuZ2V0QXR0YWNobWVudHMoKTtcbiAgfVxuICBnZXRKU0FjdGlvbnMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3RyYW5zcG9ydC5nZXREb2NKU0FjdGlvbnMoKTtcbiAgfVxuICBnZXRPdXRsaW5lKCkge1xuICAgIHJldHVybiB0aGlzLl90cmFuc3BvcnQuZ2V0T3V0bGluZSgpO1xuICB9XG4gIGdldE9wdGlvbmFsQ29udGVudENvbmZpZygpIHtcbiAgICByZXR1cm4gdGhpcy5fdHJhbnNwb3J0LmdldE9wdGlvbmFsQ29udGVudENvbmZpZygpO1xuICB9XG4gIGdldFBlcm1pc3Npb25zKCkge1xuICAgIHJldHVybiB0aGlzLl90cmFuc3BvcnQuZ2V0UGVybWlzc2lvbnMoKTtcbiAgfVxuICBnZXRNZXRhZGF0YSgpIHtcbiAgICByZXR1cm4gdGhpcy5fdHJhbnNwb3J0LmdldE1ldGFkYXRhKCk7XG4gIH1cbiAgZ2V0TWFya0luZm8oKSB7XG4gICAgcmV0dXJuIHRoaXMuX3RyYW5zcG9ydC5nZXRNYXJrSW5mbygpO1xuICB9XG4gIGdldERhdGEoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3RyYW5zcG9ydC5nZXREYXRhKCk7XG4gIH1cbiAgc2F2ZURvY3VtZW50KCkge1xuICAgIHJldHVybiB0aGlzLl90cmFuc3BvcnQuc2F2ZURvY3VtZW50KCk7XG4gIH1cbiAgZ2V0RG93bmxvYWRJbmZvKCkge1xuICAgIHJldHVybiB0aGlzLl90cmFuc3BvcnQuZG93bmxvYWRJbmZvQ2FwYWJpbGl0eS5wcm9taXNlO1xuICB9XG4gIGNsZWFudXAoa2VlcExvYWRlZEZvbnRzID0gZmFsc2UpIHtcbiAgICByZXR1cm4gdGhpcy5fdHJhbnNwb3J0LnN0YXJ0Q2xlYW51cChrZWVwTG9hZGVkRm9udHMgfHwgdGhpcy5pc1B1cmVYZmEpO1xuICB9XG4gIGRlc3Ryb3koKSB7XG4gICAgcmV0dXJuIHRoaXMubG9hZGluZ1Rhc2suZGVzdHJveSgpO1xuICB9XG4gIGdldCBsb2FkaW5nUGFyYW1zKCkge1xuICAgIHJldHVybiB0aGlzLl90cmFuc3BvcnQubG9hZGluZ1BhcmFtcztcbiAgfVxuICBnZXQgbG9hZGluZ1Rhc2soKSB7XG4gICAgcmV0dXJuIHRoaXMuX3RyYW5zcG9ydC5sb2FkaW5nVGFzaztcbiAgfVxuICBnZXRGaWVsZE9iamVjdHMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3RyYW5zcG9ydC5nZXRGaWVsZE9iamVjdHMoKTtcbiAgfVxuICBoYXNKU0FjdGlvbnMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3RyYW5zcG9ydC5oYXNKU0FjdGlvbnMoKTtcbiAgfVxuICBnZXRDYWxjdWxhdGlvbk9yZGVySWRzKCkge1xuICAgIHJldHVybiB0aGlzLl90cmFuc3BvcnQuZ2V0Q2FsY3VsYXRpb25PcmRlcklkcygpO1xuICB9XG59XG5jbGFzcyBQREZQYWdlUHJveHkge1xuICAjZGVsYXllZENsZWFudXBUaW1lb3V0ID0gbnVsbDtcbiAgI3BlbmRpbmdDbGVhbnVwID0gZmFsc2U7XG4gIGNvbnN0cnVjdG9yKHBhZ2VJbmRleCwgcGFnZUluZm8sIHRyYW5zcG9ydCwgcGRmQnVnID0gZmFsc2UpIHtcbiAgICB0aGlzLl9wYWdlSW5kZXggPSBwYWdlSW5kZXg7XG4gICAgdGhpcy5fcGFnZUluZm8gPSBwYWdlSW5mbztcbiAgICB0aGlzLl90cmFuc3BvcnQgPSB0cmFuc3BvcnQ7XG4gICAgdGhpcy5fc3RhdHMgPSBwZGZCdWcgPyBuZXcgX2Rpc3BsYXlfdXRpbHNfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXy5TdGF0VGltZXIoKSA6IG51bGw7XG4gICAgdGhpcy5fcGRmQnVnID0gcGRmQnVnO1xuICAgIHRoaXMuY29tbW9uT2JqcyA9IHRyYW5zcG9ydC5jb21tb25PYmpzO1xuICAgIHRoaXMub2JqcyA9IG5ldyBQREZPYmplY3RzKCk7XG4gICAgdGhpcy5fbWF5YmVDbGVhbnVwQWZ0ZXJSZW5kZXIgPSBmYWxzZTtcbiAgICB0aGlzLl9pbnRlbnRTdGF0ZXMgPSBuZXcgTWFwKCk7XG4gICAgdGhpcy5kZXN0cm95ZWQgPSBmYWxzZTtcbiAgfVxuICBnZXQgcGFnZU51bWJlcigpIHtcbiAgICByZXR1cm4gdGhpcy5fcGFnZUluZGV4ICsgMTtcbiAgfVxuICBnZXQgcm90YXRlKCkge1xuICAgIHJldHVybiB0aGlzLl9wYWdlSW5mby5yb3RhdGU7XG4gIH1cbiAgZ2V0IHJlZigpIHtcbiAgICByZXR1cm4gdGhpcy5fcGFnZUluZm8ucmVmO1xuICB9XG4gIGdldCB1c2VyVW5pdCgpIHtcbiAgICByZXR1cm4gdGhpcy5fcGFnZUluZm8udXNlclVuaXQ7XG4gIH1cbiAgZ2V0IHZpZXcoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3BhZ2VJbmZvLnZpZXc7XG4gIH1cbiAgZ2V0Vmlld3BvcnQoe1xuICAgIHNjYWxlLFxuICAgIHJvdGF0aW9uID0gdGhpcy5yb3RhdGUsXG4gICAgb2Zmc2V0WCA9IDAsXG4gICAgb2Zmc2V0WSA9IDAsXG4gICAgZG9udEZsaXAgPSBmYWxzZVxuICB9ID0ge30pIHtcbiAgICByZXR1cm4gbmV3IF9kaXNwbGF5X3V0aWxzX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18uUGFnZVZpZXdwb3J0KHtcbiAgICAgIHZpZXdCb3g6IHRoaXMudmlldyxcbiAgICAgIHNjYWxlLFxuICAgICAgcm90YXRpb24sXG4gICAgICBvZmZzZXRYLFxuICAgICAgb2Zmc2V0WSxcbiAgICAgIGRvbnRGbGlwXG4gICAgfSk7XG4gIH1cbiAgZ2V0QW5ub3RhdGlvbnMoe1xuICAgIGludGVudCA9IFwiZGlzcGxheVwiXG4gIH0gPSB7fSkge1xuICAgIGNvbnN0IGludGVudEFyZ3MgPSB0aGlzLl90cmFuc3BvcnQuZ2V0UmVuZGVyaW5nSW50ZW50KGludGVudCk7XG4gICAgcmV0dXJuIHRoaXMuX3RyYW5zcG9ydC5nZXRBbm5vdGF0aW9ucyh0aGlzLl9wYWdlSW5kZXgsIGludGVudEFyZ3MucmVuZGVyaW5nSW50ZW50KTtcbiAgfVxuICBnZXRKU0FjdGlvbnMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3RyYW5zcG9ydC5nZXRQYWdlSlNBY3Rpb25zKHRoaXMuX3BhZ2VJbmRleCk7XG4gIH1cbiAgZ2V0IGZpbHRlckZhY3RvcnkoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3RyYW5zcG9ydC5maWx0ZXJGYWN0b3J5O1xuICB9XG4gIGdldCBpc1B1cmVYZmEoKSB7XG4gICAgcmV0dXJuICgwLF9zaGFyZWRfdXRpbF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLnNoYWRvdykodGhpcywgXCJpc1B1cmVYZmFcIiwgISF0aGlzLl90cmFuc3BvcnQuX2h0bWxGb3JYZmEpO1xuICB9XG4gIGFzeW5jIGdldFhmYSgpIHtcbiAgICByZXR1cm4gdGhpcy5fdHJhbnNwb3J0Ll9odG1sRm9yWGZhPy5jaGlsZHJlblt0aGlzLl9wYWdlSW5kZXhdIHx8IG51bGw7XG4gIH1cbiAgcmVuZGVyKHtcbiAgICBjYW52YXNDb250ZXh0LFxuICAgIHZpZXdwb3J0LFxuICAgIGludGVudCA9IFwiZGlzcGxheVwiLFxuICAgIGFubm90YXRpb25Nb2RlID0gX3NoYXJlZF91dGlsX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uQW5ub3RhdGlvbk1vZGUuRU5BQkxFLFxuICAgIHRyYW5zZm9ybSA9IG51bGwsXG4gICAgYmFja2dyb3VuZCA9IG51bGwsXG4gICAgb3B0aW9uYWxDb250ZW50Q29uZmlnUHJvbWlzZSA9IG51bGwsXG4gICAgYW5ub3RhdGlvbkNhbnZhc01hcCA9IG51bGwsXG4gICAgcGFnZUNvbG9ycyA9IG51bGwsXG4gICAgcHJpbnRBbm5vdGF0aW9uU3RvcmFnZSA9IG51bGxcbiAgfSkge1xuICAgIHRoaXMuX3N0YXRzPy50aW1lKFwiT3ZlcmFsbFwiKTtcbiAgICBjb25zdCBpbnRlbnRBcmdzID0gdGhpcy5fdHJhbnNwb3J0LmdldFJlbmRlcmluZ0ludGVudChpbnRlbnQsIGFubm90YXRpb25Nb2RlLCBwcmludEFubm90YXRpb25TdG9yYWdlKTtcbiAgICB0aGlzLiNwZW5kaW5nQ2xlYW51cCA9IGZhbHNlO1xuICAgIHRoaXMuI2Fib3J0RGVsYXllZENsZWFudXAoKTtcbiAgICBpZiAoIW9wdGlvbmFsQ29udGVudENvbmZpZ1Byb21pc2UpIHtcbiAgICAgIG9wdGlvbmFsQ29udGVudENvbmZpZ1Byb21pc2UgPSB0aGlzLl90cmFuc3BvcnQuZ2V0T3B0aW9uYWxDb250ZW50Q29uZmlnKCk7XG4gICAgfVxuICAgIGxldCBpbnRlbnRTdGF0ZSA9IHRoaXMuX2ludGVudFN0YXRlcy5nZXQoaW50ZW50QXJncy5jYWNoZUtleSk7XG4gICAgaWYgKCFpbnRlbnRTdGF0ZSkge1xuICAgICAgaW50ZW50U3RhdGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgdGhpcy5faW50ZW50U3RhdGVzLnNldChpbnRlbnRBcmdzLmNhY2hlS2V5LCBpbnRlbnRTdGF0ZSk7XG4gICAgfVxuICAgIGlmIChpbnRlbnRTdGF0ZS5zdHJlYW1SZWFkZXJDYW5jZWxUaW1lb3V0KSB7XG4gICAgICBjbGVhclRpbWVvdXQoaW50ZW50U3RhdGUuc3RyZWFtUmVhZGVyQ2FuY2VsVGltZW91dCk7XG4gICAgICBpbnRlbnRTdGF0ZS5zdHJlYW1SZWFkZXJDYW5jZWxUaW1lb3V0ID0gbnVsbDtcbiAgICB9XG4gICAgY29uc3QgaW50ZW50UHJpbnQgPSAhIShpbnRlbnRBcmdzLnJlbmRlcmluZ0ludGVudCAmIF9zaGFyZWRfdXRpbF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLlJlbmRlcmluZ0ludGVudEZsYWcuUFJJTlQpO1xuICAgIGlmICghaW50ZW50U3RhdGUuZGlzcGxheVJlYWR5Q2FwYWJpbGl0eSkge1xuICAgICAgaW50ZW50U3RhdGUuZGlzcGxheVJlYWR5Q2FwYWJpbGl0eSA9IG5ldyBfc2hhcmVkX3V0aWxfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5Qcm9taXNlQ2FwYWJpbGl0eSgpO1xuICAgICAgaW50ZW50U3RhdGUub3BlcmF0b3JMaXN0ID0ge1xuICAgICAgICBmbkFycmF5OiBbXSxcbiAgICAgICAgYXJnc0FycmF5OiBbXSxcbiAgICAgICAgbGFzdENodW5rOiBmYWxzZSxcbiAgICAgICAgc2VwYXJhdGVBbm5vdHM6IG51bGxcbiAgICAgIH07XG4gICAgICB0aGlzLl9zdGF0cz8udGltZShcIlBhZ2UgUmVxdWVzdFwiKTtcbiAgICAgIHRoaXMuX3B1bXBPcGVyYXRvckxpc3QoaW50ZW50QXJncyk7XG4gICAgfVxuICAgIGNvbnN0IGNvbXBsZXRlID0gZXJyb3IgPT4ge1xuICAgICAgaW50ZW50U3RhdGUucmVuZGVyVGFza3MuZGVsZXRlKGludGVybmFsUmVuZGVyVGFzayk7XG4gICAgICBpZiAodGhpcy5fbWF5YmVDbGVhbnVwQWZ0ZXJSZW5kZXIgfHwgaW50ZW50UHJpbnQpIHtcbiAgICAgICAgdGhpcy4jcGVuZGluZ0NsZWFudXAgPSB0cnVlO1xuICAgICAgfVxuICAgICAgdGhpcy4jdHJ5Q2xlYW51cCghaW50ZW50UHJpbnQpO1xuICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgIGludGVybmFsUmVuZGVyVGFzay5jYXBhYmlsaXR5LnJlamVjdChlcnJvcik7XG4gICAgICAgIHRoaXMuX2Fib3J0T3BlcmF0b3JMaXN0KHtcbiAgICAgICAgICBpbnRlbnRTdGF0ZSxcbiAgICAgICAgICByZWFzb246IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvciA6IG5ldyBFcnJvcihlcnJvcilcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpbnRlcm5hbFJlbmRlclRhc2suY2FwYWJpbGl0eS5yZXNvbHZlKCk7XG4gICAgICB9XG4gICAgICB0aGlzLl9zdGF0cz8udGltZUVuZChcIlJlbmRlcmluZ1wiKTtcbiAgICAgIHRoaXMuX3N0YXRzPy50aW1lRW5kKFwiT3ZlcmFsbFwiKTtcbiAgICB9O1xuICAgIGNvbnN0IGludGVybmFsUmVuZGVyVGFzayA9IG5ldyBJbnRlcm5hbFJlbmRlclRhc2soe1xuICAgICAgY2FsbGJhY2s6IGNvbXBsZXRlLFxuICAgICAgcGFyYW1zOiB7XG4gICAgICAgIGNhbnZhc0NvbnRleHQsXG4gICAgICAgIHZpZXdwb3J0LFxuICAgICAgICB0cmFuc2Zvcm0sXG4gICAgICAgIGJhY2tncm91bmRcbiAgICAgIH0sXG4gICAgICBvYmpzOiB0aGlzLm9ianMsXG4gICAgICBjb21tb25PYmpzOiB0aGlzLmNvbW1vbk9ianMsXG4gICAgICBhbm5vdGF0aW9uQ2FudmFzTWFwLFxuICAgICAgb3BlcmF0b3JMaXN0OiBpbnRlbnRTdGF0ZS5vcGVyYXRvckxpc3QsXG4gICAgICBwYWdlSW5kZXg6IHRoaXMuX3BhZ2VJbmRleCxcbiAgICAgIGNhbnZhc0ZhY3Rvcnk6IHRoaXMuX3RyYW5zcG9ydC5jYW52YXNGYWN0b3J5LFxuICAgICAgZmlsdGVyRmFjdG9yeTogdGhpcy5fdHJhbnNwb3J0LmZpbHRlckZhY3RvcnksXG4gICAgICB1c2VSZXF1ZXN0QW5pbWF0aW9uRnJhbWU6ICFpbnRlbnRQcmludCxcbiAgICAgIHBkZkJ1ZzogdGhpcy5fcGRmQnVnLFxuICAgICAgcGFnZUNvbG9yc1xuICAgIH0pO1xuICAgIChpbnRlbnRTdGF0ZS5yZW5kZXJUYXNrcyB8fD0gbmV3IFNldCgpKS5hZGQoaW50ZXJuYWxSZW5kZXJUYXNrKTtcbiAgICBjb25zdCByZW5kZXJUYXNrID0gaW50ZXJuYWxSZW5kZXJUYXNrLnRhc2s7XG4gICAgUHJvbWlzZS5hbGwoW2ludGVudFN0YXRlLmRpc3BsYXlSZWFkeUNhcGFiaWxpdHkucHJvbWlzZSwgb3B0aW9uYWxDb250ZW50Q29uZmlnUHJvbWlzZV0pLnRoZW4oKFt0cmFuc3BhcmVuY3ksIG9wdGlvbmFsQ29udGVudENvbmZpZ10pID0+IHtcbiAgICAgIGlmICh0aGlzLmRlc3Ryb3llZCkge1xuICAgICAgICBjb21wbGV0ZSgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB0aGlzLl9zdGF0cz8udGltZShcIlJlbmRlcmluZ1wiKTtcbiAgICAgIGludGVybmFsUmVuZGVyVGFzay5pbml0aWFsaXplR3JhcGhpY3Moe1xuICAgICAgICB0cmFuc3BhcmVuY3ksXG4gICAgICAgIG9wdGlvbmFsQ29udGVudENvbmZpZ1xuICAgICAgfSk7XG4gICAgICBpbnRlcm5hbFJlbmRlclRhc2sub3BlcmF0b3JMaXN0Q2hhbmdlZCgpO1xuICAgIH0pLmNhdGNoKGNvbXBsZXRlKTtcbiAgICByZXR1cm4gcmVuZGVyVGFzaztcbiAgfVxuICBnZXRPcGVyYXRvckxpc3Qoe1xuICAgIGludGVudCA9IFwiZGlzcGxheVwiLFxuICAgIGFubm90YXRpb25Nb2RlID0gX3NoYXJlZF91dGlsX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uQW5ub3RhdGlvbk1vZGUuRU5BQkxFLFxuICAgIHByaW50QW5ub3RhdGlvblN0b3JhZ2UgPSBudWxsXG4gIH0gPSB7fSkge1xuICAgIGZ1bmN0aW9uIG9wZXJhdG9yTGlzdENoYW5nZWQoKSB7XG4gICAgICBpZiAoaW50ZW50U3RhdGUub3BlcmF0b3JMaXN0Lmxhc3RDaHVuaykge1xuICAgICAgICBpbnRlbnRTdGF0ZS5vcExpc3RSZWFkQ2FwYWJpbGl0eS5yZXNvbHZlKGludGVudFN0YXRlLm9wZXJhdG9yTGlzdCk7XG4gICAgICAgIGludGVudFN0YXRlLnJlbmRlclRhc2tzLmRlbGV0ZShvcExpc3RUYXNrKTtcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgaW50ZW50QXJncyA9IHRoaXMuX3RyYW5zcG9ydC5nZXRSZW5kZXJpbmdJbnRlbnQoaW50ZW50LCBhbm5vdGF0aW9uTW9kZSwgcHJpbnRBbm5vdGF0aW9uU3RvcmFnZSwgdHJ1ZSk7XG4gICAgbGV0IGludGVudFN0YXRlID0gdGhpcy5faW50ZW50U3RhdGVzLmdldChpbnRlbnRBcmdzLmNhY2hlS2V5KTtcbiAgICBpZiAoIWludGVudFN0YXRlKSB7XG4gICAgICBpbnRlbnRTdGF0ZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICB0aGlzLl9pbnRlbnRTdGF0ZXMuc2V0KGludGVudEFyZ3MuY2FjaGVLZXksIGludGVudFN0YXRlKTtcbiAgICB9XG4gICAgbGV0IG9wTGlzdFRhc2s7XG4gICAgaWYgKCFpbnRlbnRTdGF0ZS5vcExpc3RSZWFkQ2FwYWJpbGl0eSkge1xuICAgICAgb3BMaXN0VGFzayA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICBvcExpc3RUYXNrLm9wZXJhdG9yTGlzdENoYW5nZWQgPSBvcGVyYXRvckxpc3RDaGFuZ2VkO1xuICAgICAgaW50ZW50U3RhdGUub3BMaXN0UmVhZENhcGFiaWxpdHkgPSBuZXcgX3NoYXJlZF91dGlsX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uUHJvbWlzZUNhcGFiaWxpdHkoKTtcbiAgICAgIChpbnRlbnRTdGF0ZS5yZW5kZXJUYXNrcyB8fD0gbmV3IFNldCgpKS5hZGQob3BMaXN0VGFzayk7XG4gICAgICBpbnRlbnRTdGF0ZS5vcGVyYXRvckxpc3QgPSB7XG4gICAgICAgIGZuQXJyYXk6IFtdLFxuICAgICAgICBhcmdzQXJyYXk6IFtdLFxuICAgICAgICBsYXN0Q2h1bms6IGZhbHNlLFxuICAgICAgICBzZXBhcmF0ZUFubm90czogbnVsbFxuICAgICAgfTtcbiAgICAgIHRoaXMuX3N0YXRzPy50aW1lKFwiUGFnZSBSZXF1ZXN0XCIpO1xuICAgICAgdGhpcy5fcHVtcE9wZXJhdG9yTGlzdChpbnRlbnRBcmdzKTtcbiAgICB9XG4gICAgcmV0dXJuIGludGVudFN0YXRlLm9wTGlzdFJlYWRDYXBhYmlsaXR5LnByb21pc2U7XG4gIH1cbiAgc3RyZWFtVGV4dENvbnRlbnQoe1xuICAgIGluY2x1ZGVNYXJrZWRDb250ZW50ID0gZmFsc2UsXG4gICAgZGlzYWJsZU5vcm1hbGl6YXRpb24gPSBmYWxzZVxuICB9ID0ge30pIHtcbiAgICBjb25zdCBURVhUX0NPTlRFTlRfQ0hVTktfU0laRSA9IDEwMDtcbiAgICByZXR1cm4gdGhpcy5fdHJhbnNwb3J0Lm1lc3NhZ2VIYW5kbGVyLnNlbmRXaXRoU3RyZWFtKFwiR2V0VGV4dENvbnRlbnRcIiwge1xuICAgICAgcGFnZUluZGV4OiB0aGlzLl9wYWdlSW5kZXgsXG4gICAgICBpbmNsdWRlTWFya2VkQ29udGVudDogaW5jbHVkZU1hcmtlZENvbnRlbnQgPT09IHRydWUsXG4gICAgICBkaXNhYmxlTm9ybWFsaXphdGlvbjogZGlzYWJsZU5vcm1hbGl6YXRpb24gPT09IHRydWVcbiAgICB9LCB7XG4gICAgICBoaWdoV2F0ZXJNYXJrOiBURVhUX0NPTlRFTlRfQ0hVTktfU0laRSxcbiAgICAgIHNpemUodGV4dENvbnRlbnQpIHtcbiAgICAgICAgcmV0dXJuIHRleHRDb250ZW50Lml0ZW1zLmxlbmd0aDtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBnZXRUZXh0Q29udGVudChwYXJhbXMgPSB7fSkge1xuICAgIGlmICh0aGlzLl90cmFuc3BvcnQuX2h0bWxGb3JYZmEpIHtcbiAgICAgIHJldHVybiB0aGlzLmdldFhmYSgpLnRoZW4oeGZhID0+IHtcbiAgICAgICAgcmV0dXJuIF94ZmFfdGV4dF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTRfXy5YZmFUZXh0LnRleHRDb250ZW50KHhmYSk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgY29uc3QgcmVhZGFibGVTdHJlYW0gPSB0aGlzLnN0cmVhbVRleHRDb250ZW50KHBhcmFtcyk7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIGZ1bmN0aW9uIHB1bXAoKSB7XG4gICAgICAgIHJlYWRlci5yZWFkKCkudGhlbihmdW5jdGlvbiAoe1xuICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgIGRvbmVcbiAgICAgICAgfSkge1xuICAgICAgICAgIGlmIChkb25lKSB7XG4gICAgICAgICAgICByZXNvbHZlKHRleHRDb250ZW50KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgT2JqZWN0LmFzc2lnbih0ZXh0Q29udGVudC5zdHlsZXMsIHZhbHVlLnN0eWxlcyk7XG4gICAgICAgICAgdGV4dENvbnRlbnQuaXRlbXMucHVzaCguLi52YWx1ZS5pdGVtcyk7XG4gICAgICAgICAgcHVtcCgpO1xuICAgICAgICB9LCByZWplY3QpO1xuICAgICAgfVxuICAgICAgY29uc3QgcmVhZGVyID0gcmVhZGFibGVTdHJlYW0uZ2V0UmVhZGVyKCk7XG4gICAgICBjb25zdCB0ZXh0Q29udGVudCA9IHtcbiAgICAgICAgaXRlbXM6IFtdLFxuICAgICAgICBzdHlsZXM6IE9iamVjdC5jcmVhdGUobnVsbClcbiAgICAgIH07XG4gICAgICBwdW1wKCk7XG4gICAgfSk7XG4gIH1cbiAgZ2V0U3RydWN0VHJlZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fdHJhbnNwb3J0LmdldFN0cnVjdFRyZWUodGhpcy5fcGFnZUluZGV4KTtcbiAgfVxuICBfZGVzdHJveSgpIHtcbiAgICB0aGlzLmRlc3Ryb3llZCA9IHRydWU7XG4gICAgY29uc3Qgd2FpdE9uID0gW107XG4gICAgZm9yIChjb25zdCBpbnRlbnRTdGF0ZSBvZiB0aGlzLl9pbnRlbnRTdGF0ZXMudmFsdWVzKCkpIHtcbiAgICAgIHRoaXMuX2Fib3J0T3BlcmF0b3JMaXN0KHtcbiAgICAgICAgaW50ZW50U3RhdGUsXG4gICAgICAgIHJlYXNvbjogbmV3IEVycm9yKFwiUGFnZSB3YXMgZGVzdHJveWVkLlwiKSxcbiAgICAgICAgZm9yY2U6IHRydWVcbiAgICAgIH0pO1xuICAgICAgaWYgKGludGVudFN0YXRlLm9wTGlzdFJlYWRDYXBhYmlsaXR5KSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgZm9yIChjb25zdCBpbnRlcm5hbFJlbmRlclRhc2sgb2YgaW50ZW50U3RhdGUucmVuZGVyVGFza3MpIHtcbiAgICAgICAgd2FpdE9uLnB1c2goaW50ZXJuYWxSZW5kZXJUYXNrLmNvbXBsZXRlZCk7XG4gICAgICAgIGludGVybmFsUmVuZGVyVGFzay5jYW5jZWwoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5vYmpzLmNsZWFyKCk7XG4gICAgdGhpcy4jcGVuZGluZ0NsZWFudXAgPSBmYWxzZTtcbiAgICB0aGlzLiNhYm9ydERlbGF5ZWRDbGVhbnVwKCk7XG4gICAgcmV0dXJuIFByb21pc2UuYWxsKHdhaXRPbik7XG4gIH1cbiAgY2xlYW51cChyZXNldFN0YXRzID0gZmFsc2UpIHtcbiAgICB0aGlzLiNwZW5kaW5nQ2xlYW51cCA9IHRydWU7XG4gICAgY29uc3Qgc3VjY2VzcyA9IHRoaXMuI3RyeUNsZWFudXAoZmFsc2UpO1xuICAgIGlmIChyZXNldFN0YXRzICYmIHN1Y2Nlc3MpIHtcbiAgICAgIHRoaXMuX3N0YXRzICYmPSBuZXcgX2Rpc3BsYXlfdXRpbHNfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXy5TdGF0VGltZXIoKTtcbiAgICB9XG4gICAgcmV0dXJuIHN1Y2Nlc3M7XG4gIH1cbiAgI3RyeUNsZWFudXAoZGVsYXllZCA9IGZhbHNlKSB7XG4gICAgdGhpcy4jYWJvcnREZWxheWVkQ2xlYW51cCgpO1xuICAgIGlmICghdGhpcy4jcGVuZGluZ0NsZWFudXAgfHwgdGhpcy5kZXN0cm95ZWQpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKGRlbGF5ZWQpIHtcbiAgICAgIHRoaXMuI2RlbGF5ZWRDbGVhbnVwVGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICB0aGlzLiNkZWxheWVkQ2xlYW51cFRpbWVvdXQgPSBudWxsO1xuICAgICAgICB0aGlzLiN0cnlDbGVhbnVwKGZhbHNlKTtcbiAgICAgIH0sIERFTEFZRURfQ0xFQU5VUF9USU1FT1VUKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZm9yIChjb25zdCB7XG4gICAgICByZW5kZXJUYXNrcyxcbiAgICAgIG9wZXJhdG9yTGlzdFxuICAgIH0gb2YgdGhpcy5faW50ZW50U3RhdGVzLnZhbHVlcygpKSB7XG4gICAgICBpZiAocmVuZGVyVGFza3Muc2l6ZSA+IDAgfHwgIW9wZXJhdG9yTGlzdC5sYXN0Q2h1bmspIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLl9pbnRlbnRTdGF0ZXMuY2xlYXIoKTtcbiAgICB0aGlzLm9ianMuY2xlYXIoKTtcbiAgICB0aGlzLiNwZW5kaW5nQ2xlYW51cCA9IGZhbHNlO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gICNhYm9ydERlbGF5ZWRDbGVhbnVwKCkge1xuICAgIGlmICh0aGlzLiNkZWxheWVkQ2xlYW51cFRpbWVvdXQpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLiNkZWxheWVkQ2xlYW51cFRpbWVvdXQpO1xuICAgICAgdGhpcy4jZGVsYXllZENsZWFudXBUaW1lb3V0ID0gbnVsbDtcbiAgICB9XG4gIH1cbiAgX3N0YXJ0UmVuZGVyUGFnZSh0cmFuc3BhcmVuY3ksIGNhY2hlS2V5KSB7XG4gICAgY29uc3QgaW50ZW50U3RhdGUgPSB0aGlzLl9pbnRlbnRTdGF0ZXMuZ2V0KGNhY2hlS2V5KTtcbiAgICBpZiAoIWludGVudFN0YXRlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuX3N0YXRzPy50aW1lRW5kKFwiUGFnZSBSZXF1ZXN0XCIpO1xuICAgIGludGVudFN0YXRlLmRpc3BsYXlSZWFkeUNhcGFiaWxpdHk/LnJlc29sdmUodHJhbnNwYXJlbmN5KTtcbiAgfVxuICBfcmVuZGVyUGFnZUNodW5rKG9wZXJhdG9yTGlzdENodW5rLCBpbnRlbnRTdGF0ZSkge1xuICAgIGZvciAobGV0IGkgPSAwLCBpaSA9IG9wZXJhdG9yTGlzdENodW5rLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgIGludGVudFN0YXRlLm9wZXJhdG9yTGlzdC5mbkFycmF5LnB1c2gob3BlcmF0b3JMaXN0Q2h1bmsuZm5BcnJheVtpXSk7XG4gICAgICBpbnRlbnRTdGF0ZS5vcGVyYXRvckxpc3QuYXJnc0FycmF5LnB1c2gob3BlcmF0b3JMaXN0Q2h1bmsuYXJnc0FycmF5W2ldKTtcbiAgICB9XG4gICAgaW50ZW50U3RhdGUub3BlcmF0b3JMaXN0Lmxhc3RDaHVuayA9IG9wZXJhdG9yTGlzdENodW5rLmxhc3RDaHVuaztcbiAgICBpbnRlbnRTdGF0ZS5vcGVyYXRvckxpc3Quc2VwYXJhdGVBbm5vdHMgPSBvcGVyYXRvckxpc3RDaHVuay5zZXBhcmF0ZUFubm90cztcbiAgICBmb3IgKGNvbnN0IGludGVybmFsUmVuZGVyVGFzayBvZiBpbnRlbnRTdGF0ZS5yZW5kZXJUYXNrcykge1xuICAgICAgaW50ZXJuYWxSZW5kZXJUYXNrLm9wZXJhdG9yTGlzdENoYW5nZWQoKTtcbiAgICB9XG4gICAgaWYgKG9wZXJhdG9yTGlzdENodW5rLmxhc3RDaHVuaykge1xuICAgICAgdGhpcy4jdHJ5Q2xlYW51cCh0cnVlKTtcbiAgICB9XG4gIH1cbiAgX3B1bXBPcGVyYXRvckxpc3Qoe1xuICAgIHJlbmRlcmluZ0ludGVudCxcbiAgICBjYWNoZUtleSxcbiAgICBhbm5vdGF0aW9uU3RvcmFnZVNlcmlhbGl6YWJsZVxuICB9KSB7XG4gICAgY29uc3Qge1xuICAgICAgbWFwLFxuICAgICAgdHJhbnNmZXJcbiAgICB9ID0gYW5ub3RhdGlvblN0b3JhZ2VTZXJpYWxpemFibGU7XG4gICAgY29uc3QgcmVhZGFibGVTdHJlYW0gPSB0aGlzLl90cmFuc3BvcnQubWVzc2FnZUhhbmRsZXIuc2VuZFdpdGhTdHJlYW0oXCJHZXRPcGVyYXRvckxpc3RcIiwge1xuICAgICAgcGFnZUluZGV4OiB0aGlzLl9wYWdlSW5kZXgsXG4gICAgICBpbnRlbnQ6IHJlbmRlcmluZ0ludGVudCxcbiAgICAgIGNhY2hlS2V5LFxuICAgICAgYW5ub3RhdGlvblN0b3JhZ2U6IG1hcFxuICAgIH0sIHRyYW5zZmVyKTtcbiAgICBjb25zdCByZWFkZXIgPSByZWFkYWJsZVN0cmVhbS5nZXRSZWFkZXIoKTtcbiAgICBjb25zdCBpbnRlbnRTdGF0ZSA9IHRoaXMuX2ludGVudFN0YXRlcy5nZXQoY2FjaGVLZXkpO1xuICAgIGludGVudFN0YXRlLnN0cmVhbVJlYWRlciA9IHJlYWRlcjtcbiAgICBjb25zdCBwdW1wID0gKCkgPT4ge1xuICAgICAgcmVhZGVyLnJlYWQoKS50aGVuKCh7XG4gICAgICAgIHZhbHVlLFxuICAgICAgICBkb25lXG4gICAgICB9KSA9PiB7XG4gICAgICAgIGlmIChkb25lKSB7XG4gICAgICAgICAgaW50ZW50U3RhdGUuc3RyZWFtUmVhZGVyID0gbnVsbDtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX3RyYW5zcG9ydC5kZXN0cm95ZWQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcmVuZGVyUGFnZUNodW5rKHZhbHVlLCBpbnRlbnRTdGF0ZSk7XG4gICAgICAgIHB1bXAoKTtcbiAgICAgIH0sIHJlYXNvbiA9PiB7XG4gICAgICAgIGludGVudFN0YXRlLnN0cmVhbVJlYWRlciA9IG51bGw7XG4gICAgICAgIGlmICh0aGlzLl90cmFuc3BvcnQuZGVzdHJveWVkKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpbnRlbnRTdGF0ZS5vcGVyYXRvckxpc3QpIHtcbiAgICAgICAgICBpbnRlbnRTdGF0ZS5vcGVyYXRvckxpc3QubGFzdENodW5rID0gdHJ1ZTtcbiAgICAgICAgICBmb3IgKGNvbnN0IGludGVybmFsUmVuZGVyVGFzayBvZiBpbnRlbnRTdGF0ZS5yZW5kZXJUYXNrcykge1xuICAgICAgICAgICAgaW50ZXJuYWxSZW5kZXJUYXNrLm9wZXJhdG9yTGlzdENoYW5nZWQoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy4jdHJ5Q2xlYW51cCh0cnVlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaW50ZW50U3RhdGUuZGlzcGxheVJlYWR5Q2FwYWJpbGl0eSkge1xuICAgICAgICAgIGludGVudFN0YXRlLmRpc3BsYXlSZWFkeUNhcGFiaWxpdHkucmVqZWN0KHJlYXNvbik7XG4gICAgICAgIH0gZWxzZSBpZiAoaW50ZW50U3RhdGUub3BMaXN0UmVhZENhcGFiaWxpdHkpIHtcbiAgICAgICAgICBpbnRlbnRTdGF0ZS5vcExpc3RSZWFkQ2FwYWJpbGl0eS5yZWplY3QocmVhc29uKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyByZWFzb247XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG4gICAgcHVtcCgpO1xuICB9XG4gIF9hYm9ydE9wZXJhdG9yTGlzdCh7XG4gICAgaW50ZW50U3RhdGUsXG4gICAgcmVhc29uLFxuICAgIGZvcmNlID0gZmFsc2VcbiAgfSkge1xuICAgIGlmICghaW50ZW50U3RhdGUuc3RyZWFtUmVhZGVyKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChpbnRlbnRTdGF0ZS5zdHJlYW1SZWFkZXJDYW5jZWxUaW1lb3V0KSB7XG4gICAgICBjbGVhclRpbWVvdXQoaW50ZW50U3RhdGUuc3RyZWFtUmVhZGVyQ2FuY2VsVGltZW91dCk7XG4gICAgICBpbnRlbnRTdGF0ZS5zdHJlYW1SZWFkZXJDYW5jZWxUaW1lb3V0ID0gbnVsbDtcbiAgICB9XG4gICAgaWYgKCFmb3JjZSkge1xuICAgICAgaWYgKGludGVudFN0YXRlLnJlbmRlclRhc2tzLnNpemUgPiAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChyZWFzb24gaW5zdGFuY2VvZiBfZGlzcGxheV91dGlsc19qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fLlJlbmRlcmluZ0NhbmNlbGxlZEV4Y2VwdGlvbikge1xuICAgICAgICBsZXQgZGVsYXkgPSBSRU5ERVJJTkdfQ0FOQ0VMTEVEX1RJTUVPVVQ7XG4gICAgICAgIGlmIChyZWFzb24uZXh0cmFEZWxheSA+IDAgJiYgcmVhc29uLmV4dHJhRGVsYXkgPCAxMDAwKSB7XG4gICAgICAgICAgZGVsYXkgKz0gcmVhc29uLmV4dHJhRGVsYXk7XG4gICAgICAgIH1cbiAgICAgICAgaW50ZW50U3RhdGUuc3RyZWFtUmVhZGVyQ2FuY2VsVGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIGludGVudFN0YXRlLnN0cmVhbVJlYWRlckNhbmNlbFRpbWVvdXQgPSBudWxsO1xuICAgICAgICAgIHRoaXMuX2Fib3J0T3BlcmF0b3JMaXN0KHtcbiAgICAgICAgICAgIGludGVudFN0YXRlLFxuICAgICAgICAgICAgcmVhc29uLFxuICAgICAgICAgICAgZm9yY2U6IHRydWVcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSwgZGVsYXkpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICAgIGludGVudFN0YXRlLnN0cmVhbVJlYWRlci5jYW5jZWwobmV3IF9zaGFyZWRfdXRpbF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLkFib3J0RXhjZXB0aW9uKHJlYXNvbi5tZXNzYWdlKSkuY2F0Y2goKCkgPT4ge30pO1xuICAgIGludGVudFN0YXRlLnN0cmVhbVJlYWRlciA9IG51bGw7XG4gICAgaWYgKHRoaXMuX3RyYW5zcG9ydC5kZXN0cm95ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZm9yIChjb25zdCBbY3VyQ2FjaGVLZXksIGN1ckludGVudFN0YXRlXSBvZiB0aGlzLl9pbnRlbnRTdGF0ZXMpIHtcbiAgICAgIGlmIChjdXJJbnRlbnRTdGF0ZSA9PT0gaW50ZW50U3RhdGUpIHtcbiAgICAgICAgdGhpcy5faW50ZW50U3RhdGVzLmRlbGV0ZShjdXJDYWNoZUtleSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLmNsZWFudXAoKTtcbiAgfVxuICBnZXQgc3RhdHMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3N0YXRzO1xuICB9XG59XG5jbGFzcyBMb29wYmFja1BvcnQge1xuICAjbGlzdGVuZXJzID0gbmV3IFNldCgpO1xuICAjZGVmZXJyZWQgPSBQcm9taXNlLnJlc29sdmUoKTtcbiAgcG9zdE1lc3NhZ2Uob2JqLCB0cmFuc2Zlcikge1xuICAgIGNvbnN0IGV2ZW50ID0ge1xuICAgICAgZGF0YTogc3RydWN0dXJlZENsb25lKG9iaiwgdHJhbnNmZXIgPyB7XG4gICAgICAgIHRyYW5zZmVyXG4gICAgICB9IDogbnVsbClcbiAgICB9O1xuICAgIHRoaXMuI2RlZmVycmVkLnRoZW4oKCkgPT4ge1xuICAgICAgZm9yIChjb25zdCBsaXN0ZW5lciBvZiB0aGlzLiNsaXN0ZW5lcnMpIHtcbiAgICAgICAgbGlzdGVuZXIuY2FsbCh0aGlzLCBldmVudCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgYWRkRXZlbnRMaXN0ZW5lcihuYW1lLCBsaXN0ZW5lcikge1xuICAgIHRoaXMuI2xpc3RlbmVycy5hZGQobGlzdGVuZXIpO1xuICB9XG4gIHJlbW92ZUV2ZW50TGlzdGVuZXIobmFtZSwgbGlzdGVuZXIpIHtcbiAgICB0aGlzLiNsaXN0ZW5lcnMuZGVsZXRlKGxpc3RlbmVyKTtcbiAgfVxuICB0ZXJtaW5hdGUoKSB7XG4gICAgdGhpcy4jbGlzdGVuZXJzLmNsZWFyKCk7XG4gIH1cbn1cbmNvbnN0IFBERldvcmtlclV0aWwgPSB7XG4gIGlzV29ya2VyRGlzYWJsZWQ6IGZhbHNlLFxuICBmYWtlV29ya2VySWQ6IDBcbn07XG57XG4gIGlmIChfc2hhcmVkX3V0aWxfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5pc05vZGVKUykge1xuICAgIFBERldvcmtlclV0aWwuaXNXb3JrZXJEaXNhYmxlZCA9IHRydWU7XG4gICAgX3dvcmtlcl9vcHRpb25zX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV82X18uR2xvYmFsV29ya2VyT3B0aW9ucy53b3JrZXJTcmMgfHw9IFwiLi9wZGYud29ya2VyLm1qc1wiO1xuICB9XG4gIFBERldvcmtlclV0aWwuaXNTYW1lT3JpZ2luID0gZnVuY3Rpb24gKGJhc2VVcmwsIG90aGVyVXJsKSB7XG4gICAgbGV0IGJhc2U7XG4gICAgdHJ5IHtcbiAgICAgIGJhc2UgPSBuZXcgVVJMKGJhc2VVcmwpO1xuICAgICAgaWYgKCFiYXNlLm9yaWdpbiB8fCBiYXNlLm9yaWdpbiA9PT0gXCJudWxsXCIpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH0gY2F0Y2gge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBjb25zdCBvdGhlciA9IG5ldyBVUkwob3RoZXJVcmwsIGJhc2UpO1xuICAgIHJldHVybiBiYXNlLm9yaWdpbiA9PT0gb3RoZXIub3JpZ2luO1xuICB9O1xuICBQREZXb3JrZXJVdGlsLmNyZWF0ZUNETldyYXBwZXIgPSBmdW5jdGlvbiAodXJsKSB7XG4gICAgY29uc3Qgd3JhcHBlciA9IGBhd2FpdCBpbXBvcnQoXCIke3VybH1cIik7YDtcbiAgICByZXR1cm4gVVJMLmNyZWF0ZU9iamVjdFVSTChuZXcgQmxvYihbd3JhcHBlcl0sIHtcbiAgICAgIHR5cGU6IFwidGV4dC9qYXZhc2NyaXB0XCJcbiAgICB9KSk7XG4gIH07XG59XG5jbGFzcyBQREZXb3JrZXIge1xuICBzdGF0aWMgI3dvcmtlclBvcnRzO1xuICBjb25zdHJ1Y3Rvcih7XG4gICAgbmFtZSA9IG51bGwsXG4gICAgcG9ydCA9IG51bGwsXG4gICAgdmVyYm9zaXR5ID0gKDAsX3NoYXJlZF91dGlsX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uZ2V0VmVyYm9zaXR5TGV2ZWwpKClcbiAgfSA9IHt9KSB7XG4gICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICB0aGlzLmRlc3Ryb3llZCA9IGZhbHNlO1xuICAgIHRoaXMudmVyYm9zaXR5ID0gdmVyYm9zaXR5O1xuICAgIHRoaXMuX3JlYWR5Q2FwYWJpbGl0eSA9IG5ldyBfc2hhcmVkX3V0aWxfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5Qcm9taXNlQ2FwYWJpbGl0eSgpO1xuICAgIHRoaXMuX3BvcnQgPSBudWxsO1xuICAgIHRoaXMuX3dlYldvcmtlciA9IG51bGw7XG4gICAgdGhpcy5fbWVzc2FnZUhhbmRsZXIgPSBudWxsO1xuICAgIGlmIChwb3J0KSB7XG4gICAgICBpZiAoUERGV29ya2VyLiN3b3JrZXJQb3J0cz8uaGFzKHBvcnQpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCB1c2UgbW9yZSB0aGFuIG9uZSBQREZXb3JrZXIgcGVyIHBvcnQuXCIpO1xuICAgICAgfVxuICAgICAgKFBERldvcmtlci4jd29ya2VyUG9ydHMgfHw9IG5ldyBXZWFrTWFwKCkpLnNldChwb3J0LCB0aGlzKTtcbiAgICAgIHRoaXMuX2luaXRpYWxpemVGcm9tUG9ydChwb3J0KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5faW5pdGlhbGl6ZSgpO1xuICB9XG4gIGdldCBwcm9taXNlKCkge1xuICAgIHJldHVybiB0aGlzLl9yZWFkeUNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfVxuICBnZXQgcG9ydCgpIHtcbiAgICByZXR1cm4gdGhpcy5fcG9ydDtcbiAgfVxuICBnZXQgbWVzc2FnZUhhbmRsZXIoKSB7XG4gICAgcmV0dXJuIHRoaXMuX21lc3NhZ2VIYW5kbGVyO1xuICB9XG4gIF9pbml0aWFsaXplRnJvbVBvcnQocG9ydCkge1xuICAgIHRoaXMuX3BvcnQgPSBwb3J0O1xuICAgIHRoaXMuX21lc3NhZ2VIYW5kbGVyID0gbmV3IF9zaGFyZWRfbWVzc2FnZV9oYW5kbGVyX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV83X18uTWVzc2FnZUhhbmRsZXIoXCJtYWluXCIsIFwid29ya2VyXCIsIHBvcnQpO1xuICAgIHRoaXMuX21lc3NhZ2VIYW5kbGVyLm9uKFwicmVhZHlcIiwgZnVuY3Rpb24gKCkge30pO1xuICAgIHRoaXMuX3JlYWR5Q2FwYWJpbGl0eS5yZXNvbHZlKCk7XG4gICAgdGhpcy5fbWVzc2FnZUhhbmRsZXIuc2VuZChcImNvbmZpZ3VyZVwiLCB7XG4gICAgICB2ZXJib3NpdHk6IHRoaXMudmVyYm9zaXR5XG4gICAgfSk7XG4gIH1cbiAgX2luaXRpYWxpemUoKSB7XG4gICAgaWYgKCFQREZXb3JrZXJVdGlsLmlzV29ya2VyRGlzYWJsZWQgJiYgIVBERldvcmtlci4jbWFpblRocmVhZFdvcmtlck1lc3NhZ2VIYW5kbGVyKSB7XG4gICAgICBsZXQge1xuICAgICAgICB3b3JrZXJTcmNcbiAgICAgIH0gPSBQREZXb3JrZXI7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAoIVBERldvcmtlclV0aWwuaXNTYW1lT3JpZ2luKHdpbmRvdy5sb2NhdGlvbi5ocmVmLCB3b3JrZXJTcmMpKSB7XG4gICAgICAgICAgd29ya2VyU3JjID0gUERGV29ya2VyVXRpbC5jcmVhdGVDRE5XcmFwcGVyKG5ldyBVUkwod29ya2VyU3JjLCB3aW5kb3cubG9jYXRpb24pLmhyZWYpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHdvcmtlciA9IG5ldyBXb3JrZXIod29ya2VyU3JjLCB7XG4gICAgICAgICAgdHlwZTogXCJtb2R1bGVcIlxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgbWVzc2FnZUhhbmRsZXIgPSBuZXcgX3NoYXJlZF9tZXNzYWdlX2hhbmRsZXJfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzdfXy5NZXNzYWdlSGFuZGxlcihcIm1haW5cIiwgXCJ3b3JrZXJcIiwgd29ya2VyKTtcbiAgICAgICAgY29uc3QgdGVybWluYXRlRWFybHkgPSAoKSA9PiB7XG4gICAgICAgICAgd29ya2VyLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJlcnJvclwiLCBvbldvcmtlckVycm9yKTtcbiAgICAgICAgICBtZXNzYWdlSGFuZGxlci5kZXN0cm95KCk7XG4gICAgICAgICAgd29ya2VyLnRlcm1pbmF0ZSgpO1xuICAgICAgICAgIGlmICh0aGlzLmRlc3Ryb3llZCkge1xuICAgICAgICAgICAgdGhpcy5fcmVhZHlDYXBhYmlsaXR5LnJlamVjdChuZXcgRXJyb3IoXCJXb3JrZXIgd2FzIGRlc3Ryb3llZFwiKSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX3NldHVwRmFrZVdvcmtlcigpO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgY29uc3Qgb25Xb3JrZXJFcnJvciA9ICgpID0+IHtcbiAgICAgICAgICBpZiAoIXRoaXMuX3dlYldvcmtlcikge1xuICAgICAgICAgICAgdGVybWluYXRlRWFybHkoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHdvcmtlci5hZGRFdmVudExpc3RlbmVyKFwiZXJyb3JcIiwgb25Xb3JrZXJFcnJvcik7XG4gICAgICAgIG1lc3NhZ2VIYW5kbGVyLm9uKFwidGVzdFwiLCBkYXRhID0+IHtcbiAgICAgICAgICB3b3JrZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImVycm9yXCIsIG9uV29ya2VyRXJyb3IpO1xuICAgICAgICAgIGlmICh0aGlzLmRlc3Ryb3llZCkge1xuICAgICAgICAgICAgdGVybWluYXRlRWFybHkoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGRhdGEpIHtcbiAgICAgICAgICAgIHRoaXMuX21lc3NhZ2VIYW5kbGVyID0gbWVzc2FnZUhhbmRsZXI7XG4gICAgICAgICAgICB0aGlzLl9wb3J0ID0gd29ya2VyO1xuICAgICAgICAgICAgdGhpcy5fd2ViV29ya2VyID0gd29ya2VyO1xuICAgICAgICAgICAgdGhpcy5fcmVhZHlDYXBhYmlsaXR5LnJlc29sdmUoKTtcbiAgICAgICAgICAgIG1lc3NhZ2VIYW5kbGVyLnNlbmQoXCJjb25maWd1cmVcIiwge1xuICAgICAgICAgICAgICB2ZXJib3NpdHk6IHRoaXMudmVyYm9zaXR5XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fc2V0dXBGYWtlV29ya2VyKCk7XG4gICAgICAgICAgICBtZXNzYWdlSGFuZGxlci5kZXN0cm95KCk7XG4gICAgICAgICAgICB3b3JrZXIudGVybWluYXRlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgbWVzc2FnZUhhbmRsZXIub24oXCJyZWFkeVwiLCBkYXRhID0+IHtcbiAgICAgICAgICB3b3JrZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImVycm9yXCIsIG9uV29ya2VyRXJyb3IpO1xuICAgICAgICAgIGlmICh0aGlzLmRlc3Ryb3llZCkge1xuICAgICAgICAgICAgdGVybWluYXRlRWFybHkoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHNlbmRUZXN0KCk7XG4gICAgICAgICAgfSBjYXRjaCB7XG4gICAgICAgICAgICB0aGlzLl9zZXR1cEZha2VXb3JrZXIoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBzZW5kVGVzdCA9ICgpID0+IHtcbiAgICAgICAgICBjb25zdCB0ZXN0T2JqID0gbmV3IFVpbnQ4QXJyYXkoKTtcbiAgICAgICAgICBtZXNzYWdlSGFuZGxlci5zZW5kKFwidGVzdFwiLCB0ZXN0T2JqLCBbdGVzdE9iai5idWZmZXJdKTtcbiAgICAgICAgfTtcbiAgICAgICAgc2VuZFRlc3QoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSBjYXRjaCB7XG4gICAgICAgICgwLF9zaGFyZWRfdXRpbF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLmluZm8pKFwiVGhlIHdvcmtlciBoYXMgYmVlbiBkaXNhYmxlZC5cIik7XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuX3NldHVwRmFrZVdvcmtlcigpO1xuICB9XG4gIF9zZXR1cEZha2VXb3JrZXIoKSB7XG4gICAgaWYgKCFQREZXb3JrZXJVdGlsLmlzV29ya2VyRGlzYWJsZWQpIHtcbiAgICAgICgwLF9zaGFyZWRfdXRpbF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLndhcm4pKFwiU2V0dGluZyB1cCBmYWtlIHdvcmtlci5cIik7XG4gICAgICBQREZXb3JrZXJVdGlsLmlzV29ya2VyRGlzYWJsZWQgPSB0cnVlO1xuICAgIH1cbiAgICBQREZXb3JrZXIuX3NldHVwRmFrZVdvcmtlckdsb2JhbC50aGVuKFdvcmtlck1lc3NhZ2VIYW5kbGVyID0+IHtcbiAgICAgIGlmICh0aGlzLmRlc3Ryb3llZCkge1xuICAgICAgICB0aGlzLl9yZWFkeUNhcGFiaWxpdHkucmVqZWN0KG5ldyBFcnJvcihcIldvcmtlciB3YXMgZGVzdHJveWVkXCIpKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY29uc3QgcG9ydCA9IG5ldyBMb29wYmFja1BvcnQoKTtcbiAgICAgIHRoaXMuX3BvcnQgPSBwb3J0O1xuICAgICAgY29uc3QgaWQgPSBgZmFrZSR7UERGV29ya2VyVXRpbC5mYWtlV29ya2VySWQrK31gO1xuICAgICAgY29uc3Qgd29ya2VySGFuZGxlciA9IG5ldyBfc2hhcmVkX21lc3NhZ2VfaGFuZGxlcl9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfN19fLk1lc3NhZ2VIYW5kbGVyKGlkICsgXCJfd29ya2VyXCIsIGlkLCBwb3J0KTtcbiAgICAgIFdvcmtlck1lc3NhZ2VIYW5kbGVyLnNldHVwKHdvcmtlckhhbmRsZXIsIHBvcnQpO1xuICAgICAgY29uc3QgbWVzc2FnZUhhbmRsZXIgPSBuZXcgX3NoYXJlZF9tZXNzYWdlX2hhbmRsZXJfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzdfXy5NZXNzYWdlSGFuZGxlcihpZCwgaWQgKyBcIl93b3JrZXJcIiwgcG9ydCk7XG4gICAgICB0aGlzLl9tZXNzYWdlSGFuZGxlciA9IG1lc3NhZ2VIYW5kbGVyO1xuICAgICAgdGhpcy5fcmVhZHlDYXBhYmlsaXR5LnJlc29sdmUoKTtcbiAgICAgIG1lc3NhZ2VIYW5kbGVyLnNlbmQoXCJjb25maWd1cmVcIiwge1xuICAgICAgICB2ZXJib3NpdHk6IHRoaXMudmVyYm9zaXR5XG4gICAgICB9KTtcbiAgICB9KS5jYXRjaChyZWFzb24gPT4ge1xuICAgICAgdGhpcy5fcmVhZHlDYXBhYmlsaXR5LnJlamVjdChuZXcgRXJyb3IoYFNldHRpbmcgdXAgZmFrZSB3b3JrZXIgZmFpbGVkOiBcIiR7cmVhc29uLm1lc3NhZ2V9XCIuYCkpO1xuICAgIH0pO1xuICB9XG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy5kZXN0cm95ZWQgPSB0cnVlO1xuICAgIGlmICh0aGlzLl93ZWJXb3JrZXIpIHtcbiAgICAgIHRoaXMuX3dlYldvcmtlci50ZXJtaW5hdGUoKTtcbiAgICAgIHRoaXMuX3dlYldvcmtlciA9IG51bGw7XG4gICAgfVxuICAgIFBERldvcmtlci4jd29ya2VyUG9ydHM/LmRlbGV0ZSh0aGlzLl9wb3J0KTtcbiAgICB0aGlzLl9wb3J0ID0gbnVsbDtcbiAgICBpZiAodGhpcy5fbWVzc2FnZUhhbmRsZXIpIHtcbiAgICAgIHRoaXMuX21lc3NhZ2VIYW5kbGVyLmRlc3Ryb3koKTtcbiAgICAgIHRoaXMuX21lc3NhZ2VIYW5kbGVyID0gbnVsbDtcbiAgICB9XG4gIH1cbiAgc3RhdGljIGZyb21Qb3J0KHBhcmFtcykge1xuICAgIGlmICghcGFyYW1zPy5wb3J0KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJQREZXb3JrZXIuZnJvbVBvcnQgLSBpbnZhbGlkIG1ldGhvZCBzaWduYXR1cmUuXCIpO1xuICAgIH1cbiAgICBjb25zdCBjYWNoZWRQb3J0ID0gdGhpcy4jd29ya2VyUG9ydHM/LmdldChwYXJhbXMucG9ydCk7XG4gICAgaWYgKGNhY2hlZFBvcnQpIHtcbiAgICAgIGlmIChjYWNoZWRQb3J0Ll9wZW5kaW5nRGVzdHJveSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJQREZXb3JrZXIuZnJvbVBvcnQgLSB0aGUgd29ya2VyIGlzIGJlaW5nIGRlc3Ryb3llZC5cXG5cIiArIFwiUGxlYXNlIHJlbWVtYmVyIHRvIGF3YWl0IGBQREZEb2N1bWVudExvYWRpbmdUYXNrLmRlc3Ryb3koKWAtY2FsbHMuXCIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNhY2hlZFBvcnQ7XG4gICAgfVxuICAgIHJldHVybiBuZXcgUERGV29ya2VyKHBhcmFtcyk7XG4gIH1cbiAgc3RhdGljIGdldCB3b3JrZXJTcmMoKSB7XG4gICAgaWYgKF93b3JrZXJfb3B0aW9uc19qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNl9fLkdsb2JhbFdvcmtlck9wdGlvbnMud29ya2VyU3JjKSB7XG4gICAgICByZXR1cm4gX3dvcmtlcl9vcHRpb25zX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV82X18uR2xvYmFsV29ya2VyT3B0aW9ucy53b3JrZXJTcmM7XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcignTm8gXCJHbG9iYWxXb3JrZXJPcHRpb25zLndvcmtlclNyY1wiIHNwZWNpZmllZC4nKTtcbiAgfVxuICBzdGF0aWMgZ2V0ICNtYWluVGhyZWFkV29ya2VyTWVzc2FnZUhhbmRsZXIoKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBnbG9iYWxUaGlzLnBkZmpzV29ya2VyPy5Xb3JrZXJNZXNzYWdlSGFuZGxlciB8fCBudWxsO1xuICAgIH0gY2F0Y2gge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XG4gIHN0YXRpYyBnZXQgX3NldHVwRmFrZVdvcmtlckdsb2JhbCgpIHtcbiAgICBjb25zdCBsb2FkZXIgPSBhc3luYyAoKSA9PiB7XG4gICAgICBpZiAodGhpcy4jbWFpblRocmVhZFdvcmtlck1lc3NhZ2VIYW5kbGVyKSB7XG4gICAgICAgIHJldHVybiB0aGlzLiNtYWluVGhyZWFkV29ya2VyTWVzc2FnZUhhbmRsZXI7XG4gICAgICB9XG4gICAgICBjb25zdCB3b3JrZXIgPSBhd2FpdCBpbXBvcnQoLyogd2VicGFja0lnbm9yZTogdHJ1ZSAqLyB0aGlzLndvcmtlclNyYyk7XG4gICAgICByZXR1cm4gd29ya2VyLldvcmtlck1lc3NhZ2VIYW5kbGVyO1xuICAgIH07XG4gICAgcmV0dXJuICgwLF9zaGFyZWRfdXRpbF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLnNoYWRvdykodGhpcywgXCJfc2V0dXBGYWtlV29ya2VyR2xvYmFsXCIsIGxvYWRlcigpKTtcbiAgfVxufVxuY2xhc3MgV29ya2VyVHJhbnNwb3J0IHtcbiAgI21ldGhvZFByb21pc2VzID0gbmV3IE1hcCgpO1xuICAjcGFnZUNhY2hlID0gbmV3IE1hcCgpO1xuICAjcGFnZVByb21pc2VzID0gbmV3IE1hcCgpO1xuICAjcGFzc3dvcmRDYXBhYmlsaXR5ID0gbnVsbDtcbiAgY29uc3RydWN0b3IobWVzc2FnZUhhbmRsZXIsIGxvYWRpbmdUYXNrLCBuZXR3b3JrU3RyZWFtLCBwYXJhbXMsIGZhY3RvcnkpIHtcbiAgICB0aGlzLm1lc3NhZ2VIYW5kbGVyID0gbWVzc2FnZUhhbmRsZXI7XG4gICAgdGhpcy5sb2FkaW5nVGFzayA9IGxvYWRpbmdUYXNrO1xuICAgIHRoaXMuY29tbW9uT2JqcyA9IG5ldyBQREZPYmplY3RzKCk7XG4gICAgdGhpcy5mb250TG9hZGVyID0gbmV3IF9mb250X2xvYWRlcl9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fLkZvbnRMb2FkZXIoe1xuICAgICAgb3duZXJEb2N1bWVudDogcGFyYW1zLm93bmVyRG9jdW1lbnQsXG4gICAgICBzdHlsZUVsZW1lbnQ6IHBhcmFtcy5zdHlsZUVsZW1lbnRcbiAgICB9KTtcbiAgICB0aGlzLl9wYXJhbXMgPSBwYXJhbXM7XG4gICAgdGhpcy5jYW52YXNGYWN0b3J5ID0gZmFjdG9yeS5jYW52YXNGYWN0b3J5O1xuICAgIHRoaXMuZmlsdGVyRmFjdG9yeSA9IGZhY3RvcnkuZmlsdGVyRmFjdG9yeTtcbiAgICB0aGlzLmNNYXBSZWFkZXJGYWN0b3J5ID0gZmFjdG9yeS5jTWFwUmVhZGVyRmFjdG9yeTtcbiAgICB0aGlzLnN0YW5kYXJkRm9udERhdGFGYWN0b3J5ID0gZmFjdG9yeS5zdGFuZGFyZEZvbnREYXRhRmFjdG9yeTtcbiAgICB0aGlzLmRlc3Ryb3llZCA9IGZhbHNlO1xuICAgIHRoaXMuZGVzdHJveUNhcGFiaWxpdHkgPSBudWxsO1xuICAgIHRoaXMuX25ldHdvcmtTdHJlYW0gPSBuZXR3b3JrU3RyZWFtO1xuICAgIHRoaXMuX2Z1bGxSZWFkZXIgPSBudWxsO1xuICAgIHRoaXMuX2xhc3RQcm9ncmVzcyA9IG51bGw7XG4gICAgdGhpcy5kb3dubG9hZEluZm9DYXBhYmlsaXR5ID0gbmV3IF9zaGFyZWRfdXRpbF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLlByb21pc2VDYXBhYmlsaXR5KCk7XG4gICAgdGhpcy5zZXR1cE1lc3NhZ2VIYW5kbGVyKCk7XG4gIH1cbiAgI2NhY2hlU2ltcGxlTWV0aG9kKG5hbWUsIGRhdGEgPSBudWxsKSB7XG4gICAgY29uc3QgY2FjaGVkUHJvbWlzZSA9IHRoaXMuI21ldGhvZFByb21pc2VzLmdldChuYW1lKTtcbiAgICBpZiAoY2FjaGVkUHJvbWlzZSkge1xuICAgICAgcmV0dXJuIGNhY2hlZFByb21pc2U7XG4gICAgfVxuICAgIGNvbnN0IHByb21pc2UgPSB0aGlzLm1lc3NhZ2VIYW5kbGVyLnNlbmRXaXRoUHJvbWlzZShuYW1lLCBkYXRhKTtcbiAgICB0aGlzLiNtZXRob2RQcm9taXNlcy5zZXQobmFtZSwgcHJvbWlzZSk7XG4gICAgcmV0dXJuIHByb21pc2U7XG4gIH1cbiAgZ2V0IGFubm90YXRpb25TdG9yYWdlKCkge1xuICAgIHJldHVybiAoMCxfc2hhcmVkX3V0aWxfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5zaGFkb3cpKHRoaXMsIFwiYW5ub3RhdGlvblN0b3JhZ2VcIiwgbmV3IF9hbm5vdGF0aW9uX3N0b3JhZ2VfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5Bbm5vdGF0aW9uU3RvcmFnZSgpKTtcbiAgfVxuICBnZXRSZW5kZXJpbmdJbnRlbnQoaW50ZW50LCBhbm5vdGF0aW9uTW9kZSA9IF9zaGFyZWRfdXRpbF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLkFubm90YXRpb25Nb2RlLkVOQUJMRSwgcHJpbnRBbm5vdGF0aW9uU3RvcmFnZSA9IG51bGwsIGlzT3BMaXN0ID0gZmFsc2UpIHtcbiAgICBsZXQgcmVuZGVyaW5nSW50ZW50ID0gX3NoYXJlZF91dGlsX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uUmVuZGVyaW5nSW50ZW50RmxhZy5ESVNQTEFZO1xuICAgIGxldCBhbm5vdGF0aW9uU3RvcmFnZVNlcmlhbGl6YWJsZSA9IF9hbm5vdGF0aW9uX3N0b3JhZ2VfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5TZXJpYWxpemFibGVFbXB0eTtcbiAgICBzd2l0Y2ggKGludGVudCkge1xuICAgICAgY2FzZSBcImFueVwiOlxuICAgICAgICByZW5kZXJpbmdJbnRlbnQgPSBfc2hhcmVkX3V0aWxfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5SZW5kZXJpbmdJbnRlbnRGbGFnLkFOWTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwiZGlzcGxheVwiOlxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJwcmludFwiOlxuICAgICAgICByZW5kZXJpbmdJbnRlbnQgPSBfc2hhcmVkX3V0aWxfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5SZW5kZXJpbmdJbnRlbnRGbGFnLlBSSU5UO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgICgwLF9zaGFyZWRfdXRpbF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLndhcm4pKGBnZXRSZW5kZXJpbmdJbnRlbnQgLSBpbnZhbGlkIGludGVudDogJHtpbnRlbnR9YCk7XG4gICAgfVxuICAgIHN3aXRjaCAoYW5ub3RhdGlvbk1vZGUpIHtcbiAgICAgIGNhc2UgX3NoYXJlZF91dGlsX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uQW5ub3RhdGlvbk1vZGUuRElTQUJMRTpcbiAgICAgICAgcmVuZGVyaW5nSW50ZW50ICs9IF9zaGFyZWRfdXRpbF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLlJlbmRlcmluZ0ludGVudEZsYWcuQU5OT1RBVElPTlNfRElTQUJMRTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIF9zaGFyZWRfdXRpbF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLkFubm90YXRpb25Nb2RlLkVOQUJMRTpcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIF9zaGFyZWRfdXRpbF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLkFubm90YXRpb25Nb2RlLkVOQUJMRV9GT1JNUzpcbiAgICAgICAgcmVuZGVyaW5nSW50ZW50ICs9IF9zaGFyZWRfdXRpbF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLlJlbmRlcmluZ0ludGVudEZsYWcuQU5OT1RBVElPTlNfRk9STVM7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBfc2hhcmVkX3V0aWxfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5Bbm5vdGF0aW9uTW9kZS5FTkFCTEVfU1RPUkFHRTpcbiAgICAgICAgcmVuZGVyaW5nSW50ZW50ICs9IF9zaGFyZWRfdXRpbF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLlJlbmRlcmluZ0ludGVudEZsYWcuQU5OT1RBVElPTlNfU1RPUkFHRTtcbiAgICAgICAgY29uc3QgYW5ub3RhdGlvblN0b3JhZ2UgPSByZW5kZXJpbmdJbnRlbnQgJiBfc2hhcmVkX3V0aWxfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5SZW5kZXJpbmdJbnRlbnRGbGFnLlBSSU5UICYmIHByaW50QW5ub3RhdGlvblN0b3JhZ2UgaW5zdGFuY2VvZiBfYW5ub3RhdGlvbl9zdG9yYWdlX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uUHJpbnRBbm5vdGF0aW9uU3RvcmFnZSA/IHByaW50QW5ub3RhdGlvblN0b3JhZ2UgOiB0aGlzLmFubm90YXRpb25TdG9yYWdlO1xuICAgICAgICBhbm5vdGF0aW9uU3RvcmFnZVNlcmlhbGl6YWJsZSA9IGFubm90YXRpb25TdG9yYWdlLnNlcmlhbGl6YWJsZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICAoMCxfc2hhcmVkX3V0aWxfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy53YXJuKShgZ2V0UmVuZGVyaW5nSW50ZW50IC0gaW52YWxpZCBhbm5vdGF0aW9uTW9kZTogJHthbm5vdGF0aW9uTW9kZX1gKTtcbiAgICB9XG4gICAgaWYgKGlzT3BMaXN0KSB7XG4gICAgICByZW5kZXJpbmdJbnRlbnQgKz0gX3NoYXJlZF91dGlsX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uUmVuZGVyaW5nSW50ZW50RmxhZy5PUExJU1Q7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICByZW5kZXJpbmdJbnRlbnQsXG4gICAgICBjYWNoZUtleTogYCR7cmVuZGVyaW5nSW50ZW50fV8ke2Fubm90YXRpb25TdG9yYWdlU2VyaWFsaXphYmxlLmhhc2h9YCxcbiAgICAgIGFubm90YXRpb25TdG9yYWdlU2VyaWFsaXphYmxlXG4gICAgfTtcbiAgfVxuICBkZXN0cm95KCkge1xuICAgIGlmICh0aGlzLmRlc3Ryb3lDYXBhYmlsaXR5KSB7XG4gICAgICByZXR1cm4gdGhpcy5kZXN0cm95Q2FwYWJpbGl0eS5wcm9taXNlO1xuICAgIH1cbiAgICB0aGlzLmRlc3Ryb3llZCA9IHRydWU7XG4gICAgdGhpcy5kZXN0cm95Q2FwYWJpbGl0eSA9IG5ldyBfc2hhcmVkX3V0aWxfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5Qcm9taXNlQ2FwYWJpbGl0eSgpO1xuICAgIHRoaXMuI3Bhc3N3b3JkQ2FwYWJpbGl0eT8ucmVqZWN0KG5ldyBFcnJvcihcIldvcmtlciB3YXMgZGVzdHJveWVkIGR1cmluZyBvblBhc3N3b3JkIGNhbGxiYWNrXCIpKTtcbiAgICBjb25zdCB3YWl0T24gPSBbXTtcbiAgICBmb3IgKGNvbnN0IHBhZ2Ugb2YgdGhpcy4jcGFnZUNhY2hlLnZhbHVlcygpKSB7XG4gICAgICB3YWl0T24ucHVzaChwYWdlLl9kZXN0cm95KCkpO1xuICAgIH1cbiAgICB0aGlzLiNwYWdlQ2FjaGUuY2xlYXIoKTtcbiAgICB0aGlzLiNwYWdlUHJvbWlzZXMuY2xlYXIoKTtcbiAgICBpZiAodGhpcy5oYXNPd25Qcm9wZXJ0eShcImFubm90YXRpb25TdG9yYWdlXCIpKSB7XG4gICAgICB0aGlzLmFubm90YXRpb25TdG9yYWdlLnJlc2V0TW9kaWZpZWQoKTtcbiAgICB9XG4gICAgY29uc3QgdGVybWluYXRlZCA9IHRoaXMubWVzc2FnZUhhbmRsZXIuc2VuZFdpdGhQcm9taXNlKFwiVGVybWluYXRlXCIsIG51bGwpO1xuICAgIHdhaXRPbi5wdXNoKHRlcm1pbmF0ZWQpO1xuICAgIFByb21pc2UuYWxsKHdhaXRPbikudGhlbigoKSA9PiB7XG4gICAgICB0aGlzLmNvbW1vbk9ianMuY2xlYXIoKTtcbiAgICAgIHRoaXMuZm9udExvYWRlci5jbGVhcigpO1xuICAgICAgdGhpcy4jbWV0aG9kUHJvbWlzZXMuY2xlYXIoKTtcbiAgICAgIHRoaXMuZmlsdGVyRmFjdG9yeS5kZXN0cm95KCk7XG4gICAgICB0aGlzLl9uZXR3b3JrU3RyZWFtPy5jYW5jZWxBbGxSZXF1ZXN0cyhuZXcgX3NoYXJlZF91dGlsX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uQWJvcnRFeGNlcHRpb24oXCJXb3JrZXIgd2FzIHRlcm1pbmF0ZWQuXCIpKTtcbiAgICAgIGlmICh0aGlzLm1lc3NhZ2VIYW5kbGVyKSB7XG4gICAgICAgIHRoaXMubWVzc2FnZUhhbmRsZXIuZGVzdHJveSgpO1xuICAgICAgICB0aGlzLm1lc3NhZ2VIYW5kbGVyID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIHRoaXMuZGVzdHJveUNhcGFiaWxpdHkucmVzb2x2ZSgpO1xuICAgIH0sIHRoaXMuZGVzdHJveUNhcGFiaWxpdHkucmVqZWN0KTtcbiAgICByZXR1cm4gdGhpcy5kZXN0cm95Q2FwYWJpbGl0eS5wcm9taXNlO1xuICB9XG4gIHNldHVwTWVzc2FnZUhhbmRsZXIoKSB7XG4gICAgY29uc3Qge1xuICAgICAgbWVzc2FnZUhhbmRsZXIsXG4gICAgICBsb2FkaW5nVGFza1xuICAgIH0gPSB0aGlzO1xuICAgIG1lc3NhZ2VIYW5kbGVyLm9uKFwiR2V0UmVhZGVyXCIsIChkYXRhLCBzaW5rKSA9PiB7XG4gICAgICAoMCxfc2hhcmVkX3V0aWxfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5hc3NlcnQpKHRoaXMuX25ldHdvcmtTdHJlYW0sIFwiR2V0UmVhZGVyIC0gbm8gYElQREZTdHJlYW1gIGluc3RhbmNlIGF2YWlsYWJsZS5cIik7XG4gICAgICB0aGlzLl9mdWxsUmVhZGVyID0gdGhpcy5fbmV0d29ya1N0cmVhbS5nZXRGdWxsUmVhZGVyKCk7XG4gICAgICB0aGlzLl9mdWxsUmVhZGVyLm9uUHJvZ3Jlc3MgPSBldnQgPT4ge1xuICAgICAgICB0aGlzLl9sYXN0UHJvZ3Jlc3MgPSB7XG4gICAgICAgICAgbG9hZGVkOiBldnQubG9hZGVkLFxuICAgICAgICAgIHRvdGFsOiBldnQudG90YWxcbiAgICAgICAgfTtcbiAgICAgIH07XG4gICAgICBzaW5rLm9uUHVsbCA9ICgpID0+IHtcbiAgICAgICAgdGhpcy5fZnVsbFJlYWRlci5yZWFkKCkudGhlbihmdW5jdGlvbiAoe1xuICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgIGRvbmVcbiAgICAgICAgfSkge1xuICAgICAgICAgIGlmIChkb25lKSB7XG4gICAgICAgICAgICBzaW5rLmNsb3NlKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgICgwLF9zaGFyZWRfdXRpbF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLmFzc2VydCkodmFsdWUgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlciwgXCJHZXRSZWFkZXIgLSBleHBlY3RlZCBhbiBBcnJheUJ1ZmZlci5cIik7XG4gICAgICAgICAgc2luay5lbnF1ZXVlKG5ldyBVaW50OEFycmF5KHZhbHVlKSwgMSwgW3ZhbHVlXSk7XG4gICAgICAgIH0pLmNhdGNoKHJlYXNvbiA9PiB7XG4gICAgICAgICAgc2luay5lcnJvcihyZWFzb24pO1xuICAgICAgICB9KTtcbiAgICAgIH07XG4gICAgICBzaW5rLm9uQ2FuY2VsID0gcmVhc29uID0+IHtcbiAgICAgICAgdGhpcy5fZnVsbFJlYWRlci5jYW5jZWwocmVhc29uKTtcbiAgICAgICAgc2luay5yZWFkeS5jYXRjaChyZWFkeVJlYXNvbiA9PiB7XG4gICAgICAgICAgaWYgKHRoaXMuZGVzdHJveWVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIHRocm93IHJlYWR5UmVhc29uO1xuICAgICAgICB9KTtcbiAgICAgIH07XG4gICAgfSk7XG4gICAgbWVzc2FnZUhhbmRsZXIub24oXCJSZWFkZXJIZWFkZXJzUmVhZHlcIiwgZGF0YSA9PiB7XG4gICAgICBjb25zdCBoZWFkZXJzQ2FwYWJpbGl0eSA9IG5ldyBfc2hhcmVkX3V0aWxfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5Qcm9taXNlQ2FwYWJpbGl0eSgpO1xuICAgICAgY29uc3QgZnVsbFJlYWRlciA9IHRoaXMuX2Z1bGxSZWFkZXI7XG4gICAgICBmdWxsUmVhZGVyLmhlYWRlcnNSZWFkeS50aGVuKCgpID0+IHtcbiAgICAgICAgaWYgKCFmdWxsUmVhZGVyLmlzU3RyZWFtaW5nU3VwcG9ydGVkIHx8ICFmdWxsUmVhZGVyLmlzUmFuZ2VTdXBwb3J0ZWQpIHtcbiAgICAgICAgICBpZiAodGhpcy5fbGFzdFByb2dyZXNzKSB7XG4gICAgICAgICAgICBsb2FkaW5nVGFzay5vblByb2dyZXNzPy4odGhpcy5fbGFzdFByb2dyZXNzKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZnVsbFJlYWRlci5vblByb2dyZXNzID0gZXZ0ID0+IHtcbiAgICAgICAgICAgIGxvYWRpbmdUYXNrLm9uUHJvZ3Jlc3M/Lih7XG4gICAgICAgICAgICAgIGxvYWRlZDogZXZ0LmxvYWRlZCxcbiAgICAgICAgICAgICAgdG90YWw6IGV2dC50b3RhbFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBoZWFkZXJzQ2FwYWJpbGl0eS5yZXNvbHZlKHtcbiAgICAgICAgICBpc1N0cmVhbWluZ1N1cHBvcnRlZDogZnVsbFJlYWRlci5pc1N0cmVhbWluZ1N1cHBvcnRlZCxcbiAgICAgICAgICBpc1JhbmdlU3VwcG9ydGVkOiBmdWxsUmVhZGVyLmlzUmFuZ2VTdXBwb3J0ZWQsXG4gICAgICAgICAgY29udGVudExlbmd0aDogZnVsbFJlYWRlci5jb250ZW50TGVuZ3RoXG4gICAgICAgIH0pO1xuICAgICAgfSwgaGVhZGVyc0NhcGFiaWxpdHkucmVqZWN0KTtcbiAgICAgIHJldHVybiBoZWFkZXJzQ2FwYWJpbGl0eS5wcm9taXNlO1xuICAgIH0pO1xuICAgIG1lc3NhZ2VIYW5kbGVyLm9uKFwiR2V0UmFuZ2VSZWFkZXJcIiwgKGRhdGEsIHNpbmspID0+IHtcbiAgICAgICgwLF9zaGFyZWRfdXRpbF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLmFzc2VydCkodGhpcy5fbmV0d29ya1N0cmVhbSwgXCJHZXRSYW5nZVJlYWRlciAtIG5vIGBJUERGU3RyZWFtYCBpbnN0YW5jZSBhdmFpbGFibGUuXCIpO1xuICAgICAgY29uc3QgcmFuZ2VSZWFkZXIgPSB0aGlzLl9uZXR3b3JrU3RyZWFtLmdldFJhbmdlUmVhZGVyKGRhdGEuYmVnaW4sIGRhdGEuZW5kKTtcbiAgICAgIGlmICghcmFuZ2VSZWFkZXIpIHtcbiAgICAgICAgc2luay5jbG9zZSgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBzaW5rLm9uUHVsbCA9ICgpID0+IHtcbiAgICAgICAgcmFuZ2VSZWFkZXIucmVhZCgpLnRoZW4oZnVuY3Rpb24gKHtcbiAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICBkb25lXG4gICAgICAgIH0pIHtcbiAgICAgICAgICBpZiAoZG9uZSkge1xuICAgICAgICAgICAgc2luay5jbG9zZSgpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICAoMCxfc2hhcmVkX3V0aWxfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5hc3NlcnQpKHZhbHVlIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIsIFwiR2V0UmFuZ2VSZWFkZXIgLSBleHBlY3RlZCBhbiBBcnJheUJ1ZmZlci5cIik7XG4gICAgICAgICAgc2luay5lbnF1ZXVlKG5ldyBVaW50OEFycmF5KHZhbHVlKSwgMSwgW3ZhbHVlXSk7XG4gICAgICAgIH0pLmNhdGNoKHJlYXNvbiA9PiB7XG4gICAgICAgICAgc2luay5lcnJvcihyZWFzb24pO1xuICAgICAgICB9KTtcbiAgICAgIH07XG4gICAgICBzaW5rLm9uQ2FuY2VsID0gcmVhc29uID0+IHtcbiAgICAgICAgcmFuZ2VSZWFkZXIuY2FuY2VsKHJlYXNvbik7XG4gICAgICAgIHNpbmsucmVhZHkuY2F0Y2gocmVhZHlSZWFzb24gPT4ge1xuICAgICAgICAgIGlmICh0aGlzLmRlc3Ryb3llZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aHJvdyByZWFkeVJlYXNvbjtcbiAgICAgICAgfSk7XG4gICAgICB9O1xuICAgIH0pO1xuICAgIG1lc3NhZ2VIYW5kbGVyLm9uKFwiR2V0RG9jXCIsICh7XG4gICAgICBwZGZJbmZvXG4gICAgfSkgPT4ge1xuICAgICAgdGhpcy5fbnVtUGFnZXMgPSBwZGZJbmZvLm51bVBhZ2VzO1xuICAgICAgdGhpcy5faHRtbEZvclhmYSA9IHBkZkluZm8uaHRtbEZvclhmYTtcbiAgICAgIGRlbGV0ZSBwZGZJbmZvLmh0bWxGb3JYZmE7XG4gICAgICBsb2FkaW5nVGFzay5fY2FwYWJpbGl0eS5yZXNvbHZlKG5ldyBQREZEb2N1bWVudFByb3h5KHBkZkluZm8sIHRoaXMpKTtcbiAgICB9KTtcbiAgICBtZXNzYWdlSGFuZGxlci5vbihcIkRvY0V4Y2VwdGlvblwiLCBmdW5jdGlvbiAoZXgpIHtcbiAgICAgIGxldCByZWFzb247XG4gICAgICBzd2l0Y2ggKGV4Lm5hbWUpIHtcbiAgICAgICAgY2FzZSBcIlBhc3N3b3JkRXhjZXB0aW9uXCI6XG4gICAgICAgICAgcmVhc29uID0gbmV3IF9zaGFyZWRfdXRpbF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLlBhc3N3b3JkRXhjZXB0aW9uKGV4Lm1lc3NhZ2UsIGV4LmNvZGUpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwiSW52YWxpZFBERkV4Y2VwdGlvblwiOlxuICAgICAgICAgIHJlYXNvbiA9IG5ldyBfc2hhcmVkX3V0aWxfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5JbnZhbGlkUERGRXhjZXB0aW9uKGV4Lm1lc3NhZ2UpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwiTWlzc2luZ1BERkV4Y2VwdGlvblwiOlxuICAgICAgICAgIHJlYXNvbiA9IG5ldyBfc2hhcmVkX3V0aWxfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5NaXNzaW5nUERGRXhjZXB0aW9uKGV4Lm1lc3NhZ2UpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwiVW5leHBlY3RlZFJlc3BvbnNlRXhjZXB0aW9uXCI6XG4gICAgICAgICAgcmVhc29uID0gbmV3IF9zaGFyZWRfdXRpbF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLlVuZXhwZWN0ZWRSZXNwb25zZUV4Y2VwdGlvbihleC5tZXNzYWdlLCBleC5zdGF0dXMpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwiVW5rbm93bkVycm9yRXhjZXB0aW9uXCI6XG4gICAgICAgICAgcmVhc29uID0gbmV3IF9zaGFyZWRfdXRpbF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLlVua25vd25FcnJvckV4Y2VwdGlvbihleC5tZXNzYWdlLCBleC5kZXRhaWxzKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAoMCxfc2hhcmVkX3V0aWxfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy51bnJlYWNoYWJsZSkoXCJEb2NFeGNlcHRpb24gLSBleHBlY3RlZCBhIHZhbGlkIEVycm9yLlwiKTtcbiAgICAgIH1cbiAgICAgIGxvYWRpbmdUYXNrLl9jYXBhYmlsaXR5LnJlamVjdChyZWFzb24pO1xuICAgIH0pO1xuICAgIG1lc3NhZ2VIYW5kbGVyLm9uKFwiUGFzc3dvcmRSZXF1ZXN0XCIsIGV4Y2VwdGlvbiA9PiB7XG4gICAgICB0aGlzLiNwYXNzd29yZENhcGFiaWxpdHkgPSBuZXcgX3NoYXJlZF91dGlsX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uUHJvbWlzZUNhcGFiaWxpdHkoKTtcbiAgICAgIGlmIChsb2FkaW5nVGFzay5vblBhc3N3b3JkKSB7XG4gICAgICAgIGNvbnN0IHVwZGF0ZVBhc3N3b3JkID0gcGFzc3dvcmQgPT4ge1xuICAgICAgICAgIGlmIChwYXNzd29yZCBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgICAgICB0aGlzLiNwYXNzd29yZENhcGFiaWxpdHkucmVqZWN0KHBhc3N3b3JkKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy4jcGFzc3dvcmRDYXBhYmlsaXR5LnJlc29sdmUoe1xuICAgICAgICAgICAgICBwYXNzd29yZFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGxvYWRpbmdUYXNrLm9uUGFzc3dvcmQodXBkYXRlUGFzc3dvcmQsIGV4Y2VwdGlvbi5jb2RlKTtcbiAgICAgICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgICAgICB0aGlzLiNwYXNzd29yZENhcGFiaWxpdHkucmVqZWN0KGV4KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy4jcGFzc3dvcmRDYXBhYmlsaXR5LnJlamVjdChuZXcgX3NoYXJlZF91dGlsX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uUGFzc3dvcmRFeGNlcHRpb24oZXhjZXB0aW9uLm1lc3NhZ2UsIGV4Y2VwdGlvbi5jb2RlKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy4jcGFzc3dvcmRDYXBhYmlsaXR5LnByb21pc2U7XG4gICAgfSk7XG4gICAgbWVzc2FnZUhhbmRsZXIub24oXCJEYXRhTG9hZGVkXCIsIGRhdGEgPT4ge1xuICAgICAgbG9hZGluZ1Rhc2sub25Qcm9ncmVzcz8uKHtcbiAgICAgICAgbG9hZGVkOiBkYXRhLmxlbmd0aCxcbiAgICAgICAgdG90YWw6IGRhdGEubGVuZ3RoXG4gICAgICB9KTtcbiAgICAgIHRoaXMuZG93bmxvYWRJbmZvQ2FwYWJpbGl0eS5yZXNvbHZlKGRhdGEpO1xuICAgIH0pO1xuICAgIG1lc3NhZ2VIYW5kbGVyLm9uKFwiU3RhcnRSZW5kZXJQYWdlXCIsIGRhdGEgPT4ge1xuICAgICAgaWYgKHRoaXMuZGVzdHJveWVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHBhZ2UgPSB0aGlzLiNwYWdlQ2FjaGUuZ2V0KGRhdGEucGFnZUluZGV4KTtcbiAgICAgIHBhZ2UuX3N0YXJ0UmVuZGVyUGFnZShkYXRhLnRyYW5zcGFyZW5jeSwgZGF0YS5jYWNoZUtleSk7XG4gICAgfSk7XG4gICAgbWVzc2FnZUhhbmRsZXIub24oXCJjb21tb25vYmpcIiwgKFtpZCwgdHlwZSwgZXhwb3J0ZWREYXRhXSkgPT4ge1xuICAgICAgaWYgKHRoaXMuZGVzdHJveWVkKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuY29tbW9uT2Jqcy5oYXMoaWQpKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgIGNhc2UgXCJGb250XCI6XG4gICAgICAgICAgY29uc3QgcGFyYW1zID0gdGhpcy5fcGFyYW1zO1xuICAgICAgICAgIGlmIChcImVycm9yXCIgaW4gZXhwb3J0ZWREYXRhKSB7XG4gICAgICAgICAgICBjb25zdCBleHBvcnRlZEVycm9yID0gZXhwb3J0ZWREYXRhLmVycm9yO1xuICAgICAgICAgICAgKDAsX3NoYXJlZF91dGlsX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18ud2FybikoYEVycm9yIGR1cmluZyBmb250IGxvYWRpbmc6ICR7ZXhwb3J0ZWRFcnJvcn1gKTtcbiAgICAgICAgICAgIHRoaXMuY29tbW9uT2Jqcy5yZXNvbHZlKGlkLCBleHBvcnRlZEVycm9yKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb25zdCBpbnNwZWN0Rm9udCA9IHBhcmFtcy5wZGZCdWcgJiYgZ2xvYmFsVGhpcy5Gb250SW5zcGVjdG9yPy5lbmFibGVkID8gKGZvbnQsIHVybCkgPT4gZ2xvYmFsVGhpcy5Gb250SW5zcGVjdG9yLmZvbnRBZGRlZChmb250LCB1cmwpIDogbnVsbDtcbiAgICAgICAgICBjb25zdCBmb250ID0gbmV3IF9mb250X2xvYWRlcl9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fLkZvbnRGYWNlT2JqZWN0KGV4cG9ydGVkRGF0YSwge1xuICAgICAgICAgICAgaXNFdmFsU3VwcG9ydGVkOiBwYXJhbXMuaXNFdmFsU3VwcG9ydGVkLFxuICAgICAgICAgICAgZGlzYWJsZUZvbnRGYWNlOiBwYXJhbXMuZGlzYWJsZUZvbnRGYWNlLFxuICAgICAgICAgICAgaWdub3JlRXJyb3JzOiBwYXJhbXMuaWdub3JlRXJyb3JzLFxuICAgICAgICAgICAgaW5zcGVjdEZvbnRcbiAgICAgICAgICB9KTtcbiAgICAgICAgICB0aGlzLmZvbnRMb2FkZXIuYmluZChmb250KS5jYXRjaChyZWFzb24gPT4ge1xuICAgICAgICAgICAgcmV0dXJuIG1lc3NhZ2VIYW5kbGVyLnNlbmRXaXRoUHJvbWlzZShcIkZvbnRGYWxsYmFja1wiLCB7XG4gICAgICAgICAgICAgIGlkXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KS5maW5hbGx5KCgpID0+IHtcbiAgICAgICAgICAgIGlmICghcGFyYW1zLmZvbnRFeHRyYVByb3BlcnRpZXMgJiYgZm9udC5kYXRhKSB7XG4gICAgICAgICAgICAgIGZvbnQuZGF0YSA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmNvbW1vbk9ianMucmVzb2x2ZShpZCwgZm9udCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJDb3B5TG9jYWxJbWFnZVwiOlxuICAgICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIGltYWdlUmVmXG4gICAgICAgICAgfSA9IGV4cG9ydGVkRGF0YTtcbiAgICAgICAgICAoMCxfc2hhcmVkX3V0aWxfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5hc3NlcnQpKGltYWdlUmVmLCBcIlRoZSBpbWFnZVJlZiBtdXN0IGJlIGRlZmluZWQuXCIpO1xuICAgICAgICAgIGZvciAoY29uc3QgcGFnZVByb3h5IG9mIHRoaXMuI3BhZ2VDYWNoZS52YWx1ZXMoKSkge1xuICAgICAgICAgICAgZm9yIChjb25zdCBbLCBkYXRhXSBvZiBwYWdlUHJveHkub2Jqcykge1xuICAgICAgICAgICAgICBpZiAoZGF0YS5yZWYgIT09IGltYWdlUmVmKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKCFkYXRhLmRhdGFMZW4pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB0aGlzLmNvbW1vbk9ianMucmVzb2x2ZShpZCwgc3RydWN0dXJlZENsb25lKGRhdGEpKTtcbiAgICAgICAgICAgICAgcmV0dXJuIGRhdGEuZGF0YUxlbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJGb250UGF0aFwiOlxuICAgICAgICBjYXNlIFwiSW1hZ2VcIjpcbiAgICAgICAgY2FzZSBcIlBhdHRlcm5cIjpcbiAgICAgICAgICB0aGlzLmNvbW1vbk9ianMucmVzb2x2ZShpZCwgZXhwb3J0ZWREYXRhKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEdvdCB1bmtub3duIGNvbW1vbiBvYmplY3QgdHlwZSAke3R5cGV9YCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9KTtcbiAgICBtZXNzYWdlSGFuZGxlci5vbihcIm9ialwiLCAoW2lkLCBwYWdlSW5kZXgsIHR5cGUsIGltYWdlRGF0YV0pID0+IHtcbiAgICAgIGlmICh0aGlzLmRlc3Ryb3llZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjb25zdCBwYWdlUHJveHkgPSB0aGlzLiNwYWdlQ2FjaGUuZ2V0KHBhZ2VJbmRleCk7XG4gICAgICBpZiAocGFnZVByb3h5Lm9ianMuaGFzKGlkKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAocGFnZVByb3h5Ll9pbnRlbnRTdGF0ZXMuc2l6ZSA9PT0gMCkge1xuICAgICAgICBpbWFnZURhdGE/LmJpdG1hcD8uY2xvc2UoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgIGNhc2UgXCJJbWFnZVwiOlxuICAgICAgICAgIHBhZ2VQcm94eS5vYmpzLnJlc29sdmUoaWQsIGltYWdlRGF0YSk7XG4gICAgICAgICAgaWYgKGltYWdlRGF0YT8uZGF0YUxlbiA+IF9zaGFyZWRfdXRpbF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLk1BWF9JTUFHRV9TSVpFX1RPX0NBQ0hFKSB7XG4gICAgICAgICAgICBwYWdlUHJveHkuX21heWJlQ2xlYW51cEFmdGVyUmVuZGVyID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJQYXR0ZXJuXCI6XG4gICAgICAgICAgcGFnZVByb3h5Lm9ianMucmVzb2x2ZShpZCwgaW1hZ2VEYXRhKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEdvdCB1bmtub3duIG9iamVjdCB0eXBlICR7dHlwZX1gKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBtZXNzYWdlSGFuZGxlci5vbihcIkRvY1Byb2dyZXNzXCIsIGRhdGEgPT4ge1xuICAgICAgaWYgKHRoaXMuZGVzdHJveWVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGxvYWRpbmdUYXNrLm9uUHJvZ3Jlc3M/Lih7XG4gICAgICAgIGxvYWRlZDogZGF0YS5sb2FkZWQsXG4gICAgICAgIHRvdGFsOiBkYXRhLnRvdGFsXG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBtZXNzYWdlSGFuZGxlci5vbihcIkZldGNoQnVpbHRJbkNNYXBcIiwgZGF0YSA9PiB7XG4gICAgICBpZiAodGhpcy5kZXN0cm95ZWQpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIldvcmtlciB3YXMgZGVzdHJveWVkLlwiKSk7XG4gICAgICB9XG4gICAgICBpZiAoIXRoaXMuY01hcFJlYWRlckZhY3RvcnkpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIkNNYXBSZWFkZXJGYWN0b3J5IG5vdCBpbml0aWFsaXplZCwgc2VlIHRoZSBgdXNlV29ya2VyRmV0Y2hgIHBhcmFtZXRlci5cIikpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuY01hcFJlYWRlckZhY3RvcnkuZmV0Y2goZGF0YSk7XG4gICAgfSk7XG4gICAgbWVzc2FnZUhhbmRsZXIub24oXCJGZXRjaFN0YW5kYXJkRm9udERhdGFcIiwgZGF0YSA9PiB7XG4gICAgICBpZiAodGhpcy5kZXN0cm95ZWQpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIldvcmtlciB3YXMgZGVzdHJveWVkLlwiKSk7XG4gICAgICB9XG4gICAgICBpZiAoIXRoaXMuc3RhbmRhcmRGb250RGF0YUZhY3RvcnkpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIlN0YW5kYXJkRm9udERhdGFGYWN0b3J5IG5vdCBpbml0aWFsaXplZCwgc2VlIHRoZSBgdXNlV29ya2VyRmV0Y2hgIHBhcmFtZXRlci5cIikpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuc3RhbmRhcmRGb250RGF0YUZhY3RvcnkuZmV0Y2goZGF0YSk7XG4gICAgfSk7XG4gIH1cbiAgZ2V0RGF0YSgpIHtcbiAgICByZXR1cm4gdGhpcy5tZXNzYWdlSGFuZGxlci5zZW5kV2l0aFByb21pc2UoXCJHZXREYXRhXCIsIG51bGwpO1xuICB9XG4gIHNhdmVEb2N1bWVudCgpIHtcbiAgICBpZiAodGhpcy5hbm5vdGF0aW9uU3RvcmFnZS5zaXplIDw9IDApIHtcbiAgICAgICgwLF9zaGFyZWRfdXRpbF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLndhcm4pKFwic2F2ZURvY3VtZW50IGNhbGxlZCB3aGlsZSBgYW5ub3RhdGlvblN0b3JhZ2VgIGlzIGVtcHR5LCBcIiArIFwicGxlYXNlIHVzZSB0aGUgZ2V0RGF0YS1tZXRob2QgaW5zdGVhZC5cIik7XG4gICAgfVxuICAgIGNvbnN0IHtcbiAgICAgIG1hcCxcbiAgICAgIHRyYW5zZmVyXG4gICAgfSA9IHRoaXMuYW5ub3RhdGlvblN0b3JhZ2Uuc2VyaWFsaXphYmxlO1xuICAgIHJldHVybiB0aGlzLm1lc3NhZ2VIYW5kbGVyLnNlbmRXaXRoUHJvbWlzZShcIlNhdmVEb2N1bWVudFwiLCB7XG4gICAgICBpc1B1cmVYZmE6ICEhdGhpcy5faHRtbEZvclhmYSxcbiAgICAgIG51bVBhZ2VzOiB0aGlzLl9udW1QYWdlcyxcbiAgICAgIGFubm90YXRpb25TdG9yYWdlOiBtYXAsXG4gICAgICBmaWxlbmFtZTogdGhpcy5fZnVsbFJlYWRlcj8uZmlsZW5hbWUgPz8gbnVsbFxuICAgIH0sIHRyYW5zZmVyKS5maW5hbGx5KCgpID0+IHtcbiAgICAgIHRoaXMuYW5ub3RhdGlvblN0b3JhZ2UucmVzZXRNb2RpZmllZCgpO1xuICAgIH0pO1xuICB9XG4gIGdldFBhZ2UocGFnZU51bWJlcikge1xuICAgIGlmICghTnVtYmVyLmlzSW50ZWdlcihwYWdlTnVtYmVyKSB8fCBwYWdlTnVtYmVyIDw9IDAgfHwgcGFnZU51bWJlciA+IHRoaXMuX251bVBhZ2VzKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiSW52YWxpZCBwYWdlIHJlcXVlc3QuXCIpKTtcbiAgICB9XG4gICAgY29uc3QgcGFnZUluZGV4ID0gcGFnZU51bWJlciAtIDEsXG4gICAgICBjYWNoZWRQcm9taXNlID0gdGhpcy4jcGFnZVByb21pc2VzLmdldChwYWdlSW5kZXgpO1xuICAgIGlmIChjYWNoZWRQcm9taXNlKSB7XG4gICAgICByZXR1cm4gY2FjaGVkUHJvbWlzZTtcbiAgICB9XG4gICAgY29uc3QgcHJvbWlzZSA9IHRoaXMubWVzc2FnZUhhbmRsZXIuc2VuZFdpdGhQcm9taXNlKFwiR2V0UGFnZVwiLCB7XG4gICAgICBwYWdlSW5kZXhcbiAgICB9KS50aGVuKHBhZ2VJbmZvID0+IHtcbiAgICAgIGlmICh0aGlzLmRlc3Ryb3llZCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUcmFuc3BvcnQgZGVzdHJveWVkXCIpO1xuICAgICAgfVxuICAgICAgY29uc3QgcGFnZSA9IG5ldyBQREZQYWdlUHJveHkocGFnZUluZGV4LCBwYWdlSW5mbywgdGhpcywgdGhpcy5fcGFyYW1zLnBkZkJ1Zyk7XG4gICAgICB0aGlzLiNwYWdlQ2FjaGUuc2V0KHBhZ2VJbmRleCwgcGFnZSk7XG4gICAgICByZXR1cm4gcGFnZTtcbiAgICB9KTtcbiAgICB0aGlzLiNwYWdlUHJvbWlzZXMuc2V0KHBhZ2VJbmRleCwgcHJvbWlzZSk7XG4gICAgcmV0dXJuIHByb21pc2U7XG4gIH1cbiAgZ2V0UGFnZUluZGV4KHJlZikge1xuICAgIGlmICh0eXBlb2YgcmVmICE9PSBcIm9iamVjdFwiIHx8IHJlZiA9PT0gbnVsbCB8fCAhTnVtYmVyLmlzSW50ZWdlcihyZWYubnVtKSB8fCByZWYubnVtIDwgMCB8fCAhTnVtYmVyLmlzSW50ZWdlcihyZWYuZ2VuKSB8fCByZWYuZ2VuIDwgMCkge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIkludmFsaWQgcGFnZUluZGV4IHJlcXVlc3QuXCIpKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMubWVzc2FnZUhhbmRsZXIuc2VuZFdpdGhQcm9taXNlKFwiR2V0UGFnZUluZGV4XCIsIHtcbiAgICAgIG51bTogcmVmLm51bSxcbiAgICAgIGdlbjogcmVmLmdlblxuICAgIH0pO1xuICB9XG4gIGdldEFubm90YXRpb25zKHBhZ2VJbmRleCwgaW50ZW50KSB7XG4gICAgcmV0dXJuIHRoaXMubWVzc2FnZUhhbmRsZXIuc2VuZFdpdGhQcm9taXNlKFwiR2V0QW5ub3RhdGlvbnNcIiwge1xuICAgICAgcGFnZUluZGV4LFxuICAgICAgaW50ZW50XG4gICAgfSk7XG4gIH1cbiAgZ2V0RmllbGRPYmplY3RzKCkge1xuICAgIHJldHVybiB0aGlzLiNjYWNoZVNpbXBsZU1ldGhvZChcIkdldEZpZWxkT2JqZWN0c1wiKTtcbiAgfVxuICBoYXNKU0FjdGlvbnMoKSB7XG4gICAgcmV0dXJuIHRoaXMuI2NhY2hlU2ltcGxlTWV0aG9kKFwiSGFzSlNBY3Rpb25zXCIpO1xuICB9XG4gIGdldENhbGN1bGF0aW9uT3JkZXJJZHMoKSB7XG4gICAgcmV0dXJuIHRoaXMubWVzc2FnZUhhbmRsZXIuc2VuZFdpdGhQcm9taXNlKFwiR2V0Q2FsY3VsYXRpb25PcmRlcklkc1wiLCBudWxsKTtcbiAgfVxuICBnZXREZXN0aW5hdGlvbnMoKSB7XG4gICAgcmV0dXJuIHRoaXMubWVzc2FnZUhhbmRsZXIuc2VuZFdpdGhQcm9taXNlKFwiR2V0RGVzdGluYXRpb25zXCIsIG51bGwpO1xuICB9XG4gIGdldERlc3RpbmF0aW9uKGlkKSB7XG4gICAgaWYgKHR5cGVvZiBpZCAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIkludmFsaWQgZGVzdGluYXRpb24gcmVxdWVzdC5cIikpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5tZXNzYWdlSGFuZGxlci5zZW5kV2l0aFByb21pc2UoXCJHZXREZXN0aW5hdGlvblwiLCB7XG4gICAgICBpZFxuICAgIH0pO1xuICB9XG4gIGdldFBhZ2VMYWJlbHMoKSB7XG4gICAgcmV0dXJuIHRoaXMubWVzc2FnZUhhbmRsZXIuc2VuZFdpdGhQcm9taXNlKFwiR2V0UGFnZUxhYmVsc1wiLCBudWxsKTtcbiAgfVxuICBnZXRQYWdlTGF5b3V0KCkge1xuICAgIHJldHVybiB0aGlzLm1lc3NhZ2VIYW5kbGVyLnNlbmRXaXRoUHJvbWlzZShcIkdldFBhZ2VMYXlvdXRcIiwgbnVsbCk7XG4gIH1cbiAgZ2V0UGFnZU1vZGUoKSB7XG4gICAgcmV0dXJuIHRoaXMubWVzc2FnZUhhbmRsZXIuc2VuZFdpdGhQcm9taXNlKFwiR2V0UGFnZU1vZGVcIiwgbnVsbCk7XG4gIH1cbiAgZ2V0Vmlld2VyUHJlZmVyZW5jZXMoKSB7XG4gICAgcmV0dXJuIHRoaXMubWVzc2FnZUhhbmRsZXIuc2VuZFdpdGhQcm9taXNlKFwiR2V0Vmlld2VyUHJlZmVyZW5jZXNcIiwgbnVsbCk7XG4gIH1cbiAgZ2V0T3BlbkFjdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5tZXNzYWdlSGFuZGxlci5zZW5kV2l0aFByb21pc2UoXCJHZXRPcGVuQWN0aW9uXCIsIG51bGwpO1xuICB9XG4gIGdldEF0dGFjaG1lbnRzKCkge1xuICAgIHJldHVybiB0aGlzLm1lc3NhZ2VIYW5kbGVyLnNlbmRXaXRoUHJvbWlzZShcIkdldEF0dGFjaG1lbnRzXCIsIG51bGwpO1xuICB9XG4gIGdldERvY0pTQWN0aW9ucygpIHtcbiAgICByZXR1cm4gdGhpcy4jY2FjaGVTaW1wbGVNZXRob2QoXCJHZXREb2NKU0FjdGlvbnNcIik7XG4gIH1cbiAgZ2V0UGFnZUpTQWN0aW9ucyhwYWdlSW5kZXgpIHtcbiAgICByZXR1cm4gdGhpcy5tZXNzYWdlSGFuZGxlci5zZW5kV2l0aFByb21pc2UoXCJHZXRQYWdlSlNBY3Rpb25zXCIsIHtcbiAgICAgIHBhZ2VJbmRleFxuICAgIH0pO1xuICB9XG4gIGdldFN0cnVjdFRyZWUocGFnZUluZGV4KSB7XG4gICAgcmV0dXJuIHRoaXMubWVzc2FnZUhhbmRsZXIuc2VuZFdpdGhQcm9taXNlKFwiR2V0U3RydWN0VHJlZVwiLCB7XG4gICAgICBwYWdlSW5kZXhcbiAgICB9KTtcbiAgfVxuICBnZXRPdXRsaW5lKCkge1xuICAgIHJldHVybiB0aGlzLm1lc3NhZ2VIYW5kbGVyLnNlbmRXaXRoUHJvbWlzZShcIkdldE91dGxpbmVcIiwgbnVsbCk7XG4gIH1cbiAgZ2V0T3B0aW9uYWxDb250ZW50Q29uZmlnKCkge1xuICAgIHJldHVybiB0aGlzLm1lc3NhZ2VIYW5kbGVyLnNlbmRXaXRoUHJvbWlzZShcIkdldE9wdGlvbmFsQ29udGVudENvbmZpZ1wiLCBudWxsKS50aGVuKHJlc3VsdHMgPT4ge1xuICAgICAgcmV0dXJuIG5ldyBfb3B0aW9uYWxfY29udGVudF9jb25maWdfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzlfXy5PcHRpb25hbENvbnRlbnRDb25maWcocmVzdWx0cyk7XG4gICAgfSk7XG4gIH1cbiAgZ2V0UGVybWlzc2lvbnMoKSB7XG4gICAgcmV0dXJuIHRoaXMubWVzc2FnZUhhbmRsZXIuc2VuZFdpdGhQcm9taXNlKFwiR2V0UGVybWlzc2lvbnNcIiwgbnVsbCk7XG4gIH1cbiAgZ2V0TWV0YWRhdGEoKSB7XG4gICAgY29uc3QgbmFtZSA9IFwiR2V0TWV0YWRhdGFcIixcbiAgICAgIGNhY2hlZFByb21pc2UgPSB0aGlzLiNtZXRob2RQcm9taXNlcy5nZXQobmFtZSk7XG4gICAgaWYgKGNhY2hlZFByb21pc2UpIHtcbiAgICAgIHJldHVybiBjYWNoZWRQcm9taXNlO1xuICAgIH1cbiAgICBjb25zdCBwcm9taXNlID0gdGhpcy5tZXNzYWdlSGFuZGxlci5zZW5kV2l0aFByb21pc2UobmFtZSwgbnVsbCkudGhlbihyZXN1bHRzID0+IHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGluZm86IHJlc3VsdHNbMF0sXG4gICAgICAgIG1ldGFkYXRhOiByZXN1bHRzWzFdID8gbmV3IF9tZXRhZGF0YV9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfOF9fLk1ldGFkYXRhKHJlc3VsdHNbMV0pIDogbnVsbCxcbiAgICAgICAgY29udGVudERpc3Bvc2l0aW9uRmlsZW5hbWU6IHRoaXMuX2Z1bGxSZWFkZXI/LmZpbGVuYW1lID8/IG51bGwsXG4gICAgICAgIGNvbnRlbnRMZW5ndGg6IHRoaXMuX2Z1bGxSZWFkZXI/LmNvbnRlbnRMZW5ndGggPz8gbnVsbFxuICAgICAgfTtcbiAgICB9KTtcbiAgICB0aGlzLiNtZXRob2RQcm9taXNlcy5zZXQobmFtZSwgcHJvbWlzZSk7XG4gICAgcmV0dXJuIHByb21pc2U7XG4gIH1cbiAgZ2V0TWFya0luZm8oKSB7XG4gICAgcmV0dXJuIHRoaXMubWVzc2FnZUhhbmRsZXIuc2VuZFdpdGhQcm9taXNlKFwiR2V0TWFya0luZm9cIiwgbnVsbCk7XG4gIH1cbiAgYXN5bmMgc3RhcnRDbGVhbnVwKGtlZXBMb2FkZWRGb250cyA9IGZhbHNlKSB7XG4gICAgaWYgKHRoaXMuZGVzdHJveWVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGF3YWl0IHRoaXMubWVzc2FnZUhhbmRsZXIuc2VuZFdpdGhQcm9taXNlKFwiQ2xlYW51cFwiLCBudWxsKTtcbiAgICBmb3IgKGNvbnN0IHBhZ2Ugb2YgdGhpcy4jcGFnZUNhY2hlLnZhbHVlcygpKSB7XG4gICAgICBjb25zdCBjbGVhbnVwU3VjY2Vzc2Z1bCA9IHBhZ2UuY2xlYW51cCgpO1xuICAgICAgaWYgKCFjbGVhbnVwU3VjY2Vzc2Z1bCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYHN0YXJ0Q2xlYW51cDogUGFnZSAke3BhZ2UucGFnZU51bWJlcn0gaXMgY3VycmVudGx5IHJlbmRlcmluZy5gKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5jb21tb25PYmpzLmNsZWFyKCk7XG4gICAgaWYgKCFrZWVwTG9hZGVkRm9udHMpIHtcbiAgICAgIHRoaXMuZm9udExvYWRlci5jbGVhcigpO1xuICAgIH1cbiAgICB0aGlzLiNtZXRob2RQcm9taXNlcy5jbGVhcigpO1xuICAgIHRoaXMuZmlsdGVyRmFjdG9yeS5kZXN0cm95KHRydWUpO1xuICB9XG4gIGdldCBsb2FkaW5nUGFyYW1zKCkge1xuICAgIGNvbnN0IHtcbiAgICAgIGRpc2FibGVBdXRvRmV0Y2gsXG4gICAgICBlbmFibGVYZmFcbiAgICB9ID0gdGhpcy5fcGFyYW1zO1xuICAgIHJldHVybiAoMCxfc2hhcmVkX3V0aWxfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5zaGFkb3cpKHRoaXMsIFwibG9hZGluZ1BhcmFtc1wiLCB7XG4gICAgICBkaXNhYmxlQXV0b0ZldGNoLFxuICAgICAgZW5hYmxlWGZhXG4gICAgfSk7XG4gIH1cbn1cbmNsYXNzIFBERk9iamVjdHMge1xuICAjb2JqcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICNlbnN1cmVPYmoob2JqSWQpIHtcbiAgICByZXR1cm4gdGhpcy4jb2Jqc1tvYmpJZF0gfHw9IHtcbiAgICAgIGNhcGFiaWxpdHk6IG5ldyBfc2hhcmVkX3V0aWxfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5Qcm9taXNlQ2FwYWJpbGl0eSgpLFxuICAgICAgZGF0YTogbnVsbFxuICAgIH07XG4gIH1cbiAgZ2V0KG9iaklkLCBjYWxsYmFjayA9IG51bGwpIHtcbiAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgIGNvbnN0IG9iaiA9IHRoaXMuI2Vuc3VyZU9iaihvYmpJZCk7XG4gICAgICBvYmouY2FwYWJpbGl0eS5wcm9taXNlLnRoZW4oKCkgPT4gY2FsbGJhY2sob2JqLmRhdGEpKTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBjb25zdCBvYmogPSB0aGlzLiNvYmpzW29iaklkXTtcbiAgICBpZiAoIW9iaj8uY2FwYWJpbGl0eS5zZXR0bGVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFJlcXVlc3Rpbmcgb2JqZWN0IHRoYXQgaXNuJ3QgcmVzb2x2ZWQgeWV0ICR7b2JqSWR9LmApO1xuICAgIH1cbiAgICByZXR1cm4gb2JqLmRhdGE7XG4gIH1cbiAgaGFzKG9iaklkKSB7XG4gICAgY29uc3Qgb2JqID0gdGhpcy4jb2Jqc1tvYmpJZF07XG4gICAgcmV0dXJuIG9iaj8uY2FwYWJpbGl0eS5zZXR0bGVkID8/IGZhbHNlO1xuICB9XG4gIHJlc29sdmUob2JqSWQsIGRhdGEgPSBudWxsKSB7XG4gICAgY29uc3Qgb2JqID0gdGhpcy4jZW5zdXJlT2JqKG9iaklkKTtcbiAgICBvYmouZGF0YSA9IGRhdGE7XG4gICAgb2JqLmNhcGFiaWxpdHkucmVzb2x2ZSgpO1xuICB9XG4gIGNsZWFyKCkge1xuICAgIGZvciAoY29uc3Qgb2JqSWQgaW4gdGhpcy4jb2Jqcykge1xuICAgICAgY29uc3Qge1xuICAgICAgICBkYXRhXG4gICAgICB9ID0gdGhpcy4jb2Jqc1tvYmpJZF07XG4gICAgICBkYXRhPy5iaXRtYXA/LmNsb3NlKCk7XG4gICAgfVxuICAgIHRoaXMuI29ianMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB9XG4gICpbU3ltYm9sLml0ZXJhdG9yXSgpIHtcbiAgICBmb3IgKGNvbnN0IG9iaklkIGluIHRoaXMuI29ianMpIHtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgY2FwYWJpbGl0eSxcbiAgICAgICAgZGF0YVxuICAgICAgfSA9IHRoaXMuI29ianNbb2JqSWRdO1xuICAgICAgaWYgKCFjYXBhYmlsaXR5LnNldHRsZWQpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICB5aWVsZCBbb2JqSWQsIGRhdGFdO1xuICAgIH1cbiAgfVxufVxuY2xhc3MgUmVuZGVyVGFzayB7XG4gICNpbnRlcm5hbFJlbmRlclRhc2sgPSBudWxsO1xuICBjb25zdHJ1Y3RvcihpbnRlcm5hbFJlbmRlclRhc2spIHtcbiAgICB0aGlzLiNpbnRlcm5hbFJlbmRlclRhc2sgPSBpbnRlcm5hbFJlbmRlclRhc2s7XG4gICAgdGhpcy5vbkNvbnRpbnVlID0gbnVsbDtcbiAgfVxuICBnZXQgcHJvbWlzZSgpIHtcbiAgICByZXR1cm4gdGhpcy4jaW50ZXJuYWxSZW5kZXJUYXNrLmNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfVxuICBjYW5jZWwoZXh0cmFEZWxheSA9IDApIHtcbiAgICB0aGlzLiNpbnRlcm5hbFJlbmRlclRhc2suY2FuY2VsKG51bGwsIGV4dHJhRGVsYXkpO1xuICB9XG4gIGdldCBzZXBhcmF0ZUFubm90cygpIHtcbiAgICBjb25zdCB7XG4gICAgICBzZXBhcmF0ZUFubm90c1xuICAgIH0gPSB0aGlzLiNpbnRlcm5hbFJlbmRlclRhc2sub3BlcmF0b3JMaXN0O1xuICAgIGlmICghc2VwYXJhdGVBbm5vdHMpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgY29uc3Qge1xuICAgICAgYW5ub3RhdGlvbkNhbnZhc01hcFxuICAgIH0gPSB0aGlzLiNpbnRlcm5hbFJlbmRlclRhc2s7XG4gICAgcmV0dXJuIHNlcGFyYXRlQW5ub3RzLmZvcm0gfHwgc2VwYXJhdGVBbm5vdHMuY2FudmFzICYmIGFubm90YXRpb25DYW52YXNNYXA/LnNpemUgPiAwO1xuICB9XG59XG5jbGFzcyBJbnRlcm5hbFJlbmRlclRhc2sge1xuICBzdGF0aWMgI2NhbnZhc0luVXNlID0gbmV3IFdlYWtTZXQoKTtcbiAgY29uc3RydWN0b3Ioe1xuICAgIGNhbGxiYWNrLFxuICAgIHBhcmFtcyxcbiAgICBvYmpzLFxuICAgIGNvbW1vbk9ianMsXG4gICAgYW5ub3RhdGlvbkNhbnZhc01hcCxcbiAgICBvcGVyYXRvckxpc3QsXG4gICAgcGFnZUluZGV4LFxuICAgIGNhbnZhc0ZhY3RvcnksXG4gICAgZmlsdGVyRmFjdG9yeSxcbiAgICB1c2VSZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPSBmYWxzZSxcbiAgICBwZGZCdWcgPSBmYWxzZSxcbiAgICBwYWdlQ29sb3JzID0gbnVsbFxuICB9KSB7XG4gICAgdGhpcy5jYWxsYmFjayA9IGNhbGxiYWNrO1xuICAgIHRoaXMucGFyYW1zID0gcGFyYW1zO1xuICAgIHRoaXMub2JqcyA9IG9ianM7XG4gICAgdGhpcy5jb21tb25PYmpzID0gY29tbW9uT2JqcztcbiAgICB0aGlzLmFubm90YXRpb25DYW52YXNNYXAgPSBhbm5vdGF0aW9uQ2FudmFzTWFwO1xuICAgIHRoaXMub3BlcmF0b3JMaXN0SWR4ID0gbnVsbDtcbiAgICB0aGlzLm9wZXJhdG9yTGlzdCA9IG9wZXJhdG9yTGlzdDtcbiAgICB0aGlzLl9wYWdlSW5kZXggPSBwYWdlSW5kZXg7XG4gICAgdGhpcy5jYW52YXNGYWN0b3J5ID0gY2FudmFzRmFjdG9yeTtcbiAgICB0aGlzLmZpbHRlckZhY3RvcnkgPSBmaWx0ZXJGYWN0b3J5O1xuICAgIHRoaXMuX3BkZkJ1ZyA9IHBkZkJ1ZztcbiAgICB0aGlzLnBhZ2VDb2xvcnMgPSBwYWdlQ29sb3JzO1xuICAgIHRoaXMucnVubmluZyA9IGZhbHNlO1xuICAgIHRoaXMuZ3JhcGhpY3NSZWFkeUNhbGxiYWNrID0gbnVsbDtcbiAgICB0aGlzLmdyYXBoaWNzUmVhZHkgPSBmYWxzZTtcbiAgICB0aGlzLl91c2VSZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPSB1c2VSZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPT09IHRydWUgJiYgdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIjtcbiAgICB0aGlzLmNhbmNlbGxlZCA9IGZhbHNlO1xuICAgIHRoaXMuY2FwYWJpbGl0eSA9IG5ldyBfc2hhcmVkX3V0aWxfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5Qcm9taXNlQ2FwYWJpbGl0eSgpO1xuICAgIHRoaXMudGFzayA9IG5ldyBSZW5kZXJUYXNrKHRoaXMpO1xuICAgIHRoaXMuX2NhbmNlbEJvdW5kID0gdGhpcy5jYW5jZWwuYmluZCh0aGlzKTtcbiAgICB0aGlzLl9jb250aW51ZUJvdW5kID0gdGhpcy5fY29udGludWUuYmluZCh0aGlzKTtcbiAgICB0aGlzLl9zY2hlZHVsZU5leHRCb3VuZCA9IHRoaXMuX3NjaGVkdWxlTmV4dC5iaW5kKHRoaXMpO1xuICAgIHRoaXMuX25leHRCb3VuZCA9IHRoaXMuX25leHQuYmluZCh0aGlzKTtcbiAgICB0aGlzLl9jYW52YXMgPSBwYXJhbXMuY2FudmFzQ29udGV4dC5jYW52YXM7XG4gIH1cbiAgZ2V0IGNvbXBsZXRlZCgpIHtcbiAgICByZXR1cm4gdGhpcy5jYXBhYmlsaXR5LnByb21pc2UuY2F0Y2goZnVuY3Rpb24gKCkge30pO1xuICB9XG4gIGluaXRpYWxpemVHcmFwaGljcyh7XG4gICAgdHJhbnNwYXJlbmN5ID0gZmFsc2UsXG4gICAgb3B0aW9uYWxDb250ZW50Q29uZmlnXG4gIH0pIHtcbiAgICBpZiAodGhpcy5jYW5jZWxsZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHRoaXMuX2NhbnZhcykge1xuICAgICAgaWYgKEludGVybmFsUmVuZGVyVGFzay4jY2FudmFzSW5Vc2UuaGFzKHRoaXMuX2NhbnZhcykpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IHVzZSB0aGUgc2FtZSBjYW52YXMgZHVyaW5nIG11bHRpcGxlIHJlbmRlcigpIG9wZXJhdGlvbnMuIFwiICsgXCJVc2UgZGlmZmVyZW50IGNhbnZhcyBvciBlbnN1cmUgcHJldmlvdXMgb3BlcmF0aW9ucyB3ZXJlIFwiICsgXCJjYW5jZWxsZWQgb3IgY29tcGxldGVkLlwiKTtcbiAgICAgIH1cbiAgICAgIEludGVybmFsUmVuZGVyVGFzay4jY2FudmFzSW5Vc2UuYWRkKHRoaXMuX2NhbnZhcyk7XG4gICAgfVxuICAgIGlmICh0aGlzLl9wZGZCdWcgJiYgZ2xvYmFsVGhpcy5TdGVwcGVyTWFuYWdlcj8uZW5hYmxlZCkge1xuICAgICAgdGhpcy5zdGVwcGVyID0gZ2xvYmFsVGhpcy5TdGVwcGVyTWFuYWdlci5jcmVhdGUodGhpcy5fcGFnZUluZGV4KTtcbiAgICAgIHRoaXMuc3RlcHBlci5pbml0KHRoaXMub3BlcmF0b3JMaXN0KTtcbiAgICAgIHRoaXMuc3RlcHBlci5uZXh0QnJlYWtQb2ludCA9IHRoaXMuc3RlcHBlci5nZXROZXh0QnJlYWtQb2ludCgpO1xuICAgIH1cbiAgICBjb25zdCB7XG4gICAgICBjYW52YXNDb250ZXh0LFxuICAgICAgdmlld3BvcnQsXG4gICAgICB0cmFuc2Zvcm0sXG4gICAgICBiYWNrZ3JvdW5kXG4gICAgfSA9IHRoaXMucGFyYW1zO1xuICAgIHRoaXMuZ2Z4ID0gbmV3IF9jYW52YXNfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfXy5DYW52YXNHcmFwaGljcyhjYW52YXNDb250ZXh0LCB0aGlzLmNvbW1vbk9ianMsIHRoaXMub2JqcywgdGhpcy5jYW52YXNGYWN0b3J5LCB0aGlzLmZpbHRlckZhY3RvcnksIHtcbiAgICAgIG9wdGlvbmFsQ29udGVudENvbmZpZ1xuICAgIH0sIHRoaXMuYW5ub3RhdGlvbkNhbnZhc01hcCwgdGhpcy5wYWdlQ29sb3JzKTtcbiAgICB0aGlzLmdmeC5iZWdpbkRyYXdpbmcoe1xuICAgICAgdHJhbnNmb3JtLFxuICAgICAgdmlld3BvcnQsXG4gICAgICB0cmFuc3BhcmVuY3ksXG4gICAgICBiYWNrZ3JvdW5kXG4gICAgfSk7XG4gICAgdGhpcy5vcGVyYXRvckxpc3RJZHggPSAwO1xuICAgIHRoaXMuZ3JhcGhpY3NSZWFkeSA9IHRydWU7XG4gICAgdGhpcy5ncmFwaGljc1JlYWR5Q2FsbGJhY2s/LigpO1xuICB9XG4gIGNhbmNlbChlcnJvciA9IG51bGwsIGV4dHJhRGVsYXkgPSAwKSB7XG4gICAgdGhpcy5ydW5uaW5nID0gZmFsc2U7XG4gICAgdGhpcy5jYW5jZWxsZWQgPSB0cnVlO1xuICAgIHRoaXMuZ2Z4Py5lbmREcmF3aW5nKCk7XG4gICAgSW50ZXJuYWxSZW5kZXJUYXNrLiNjYW52YXNJblVzZS5kZWxldGUodGhpcy5fY2FudmFzKTtcbiAgICB0aGlzLmNhbGxiYWNrKGVycm9yIHx8IG5ldyBfZGlzcGxheV91dGlsc19qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fLlJlbmRlcmluZ0NhbmNlbGxlZEV4Y2VwdGlvbihgUmVuZGVyaW5nIGNhbmNlbGxlZCwgcGFnZSAke3RoaXMuX3BhZ2VJbmRleCArIDF9YCwgZXh0cmFEZWxheSkpO1xuICB9XG4gIG9wZXJhdG9yTGlzdENoYW5nZWQoKSB7XG4gICAgaWYgKCF0aGlzLmdyYXBoaWNzUmVhZHkpIHtcbiAgICAgIHRoaXMuZ3JhcGhpY3NSZWFkeUNhbGxiYWNrIHx8PSB0aGlzLl9jb250aW51ZUJvdW5kO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLnN0ZXBwZXI/LnVwZGF0ZU9wZXJhdG9yTGlzdCh0aGlzLm9wZXJhdG9yTGlzdCk7XG4gICAgaWYgKHRoaXMucnVubmluZykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLl9jb250aW51ZSgpO1xuICB9XG4gIF9jb250aW51ZSgpIHtcbiAgICB0aGlzLnJ1bm5pbmcgPSB0cnVlO1xuICAgIGlmICh0aGlzLmNhbmNlbGxlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAodGhpcy50YXNrLm9uQ29udGludWUpIHtcbiAgICAgIHRoaXMudGFzay5vbkNvbnRpbnVlKHRoaXMuX3NjaGVkdWxlTmV4dEJvdW5kKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fc2NoZWR1bGVOZXh0KCk7XG4gICAgfVxuICB9XG4gIF9zY2hlZHVsZU5leHQoKSB7XG4gICAgaWYgKHRoaXMuX3VzZVJlcXVlc3RBbmltYXRpb25GcmFtZSkge1xuICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgIHRoaXMuX25leHRCb3VuZCgpLmNhdGNoKHRoaXMuX2NhbmNlbEJvdW5kKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBQcm9taXNlLnJlc29sdmUoKS50aGVuKHRoaXMuX25leHRCb3VuZCkuY2F0Y2godGhpcy5fY2FuY2VsQm91bmQpO1xuICAgIH1cbiAgfVxuICBhc3luYyBfbmV4dCgpIHtcbiAgICBpZiAodGhpcy5jYW5jZWxsZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5vcGVyYXRvckxpc3RJZHggPSB0aGlzLmdmeC5leGVjdXRlT3BlcmF0b3JMaXN0KHRoaXMub3BlcmF0b3JMaXN0LCB0aGlzLm9wZXJhdG9yTGlzdElkeCwgdGhpcy5fY29udGludWVCb3VuZCwgdGhpcy5zdGVwcGVyKTtcbiAgICBpZiAodGhpcy5vcGVyYXRvckxpc3RJZHggPT09IHRoaXMub3BlcmF0b3JMaXN0LmFyZ3NBcnJheS5sZW5ndGgpIHtcbiAgICAgIHRoaXMucnVubmluZyA9IGZhbHNlO1xuICAgICAgaWYgKHRoaXMub3BlcmF0b3JMaXN0Lmxhc3RDaHVuaykge1xuICAgICAgICB0aGlzLmdmeC5lbmREcmF3aW5nKCk7XG4gICAgICAgIEludGVybmFsUmVuZGVyVGFzay4jY2FudmFzSW5Vc2UuZGVsZXRlKHRoaXMuX2NhbnZhcyk7XG4gICAgICAgIHRoaXMuY2FsbGJhY2soKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbmNvbnN0IHZlcnNpb24gPSAnNC4wLjM3OSc7XG5jb25zdCBidWlsZCA9ICc5ZTE0ZDA0ZmQnO1xuXG5fX3dlYnBhY2tfYXN5bmNfcmVzdWx0X18oKTtcbn0gY2F0Y2goZSkgeyBfX3dlYnBhY2tfYXN5bmNfcmVzdWx0X18oZSk7IH0gfSk7XG5cbi8qKiovIH0pLFxuXG4vKioqLyA4MjI6XG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfX193ZWJwYWNrX21vZHVsZV9fLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cbi8qIGhhcm1vbnkgZXhwb3J0ICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCB7XG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIEJhc2VDTWFwUmVhZGVyRmFjdG9yeTogKCkgPT4gKC8qIGJpbmRpbmcgKi8gQmFzZUNNYXBSZWFkZXJGYWN0b3J5KSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgQmFzZUNhbnZhc0ZhY3Rvcnk6ICgpID0+ICgvKiBiaW5kaW5nICovIEJhc2VDYW52YXNGYWN0b3J5KSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgQmFzZUZpbHRlckZhY3Rvcnk6ICgpID0+ICgvKiBiaW5kaW5nICovIEJhc2VGaWx0ZXJGYWN0b3J5KSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgQmFzZVNWR0ZhY3Rvcnk6ICgpID0+ICgvKiBiaW5kaW5nICovIEJhc2VTVkdGYWN0b3J5KSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgQmFzZVN0YW5kYXJkRm9udERhdGFGYWN0b3J5OiAoKSA9PiAoLyogYmluZGluZyAqLyBCYXNlU3RhbmRhcmRGb250RGF0YUZhY3RvcnkpXG4vKiBoYXJtb255IGV4cG9ydCAqLyB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfc2hhcmVkX3V0aWxfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMjY2KTtcblxuY2xhc3MgQmFzZUZpbHRlckZhY3Rvcnkge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBpZiAodGhpcy5jb25zdHJ1Y3RvciA9PT0gQmFzZUZpbHRlckZhY3RvcnkpIHtcbiAgICAgICgwLF9zaGFyZWRfdXRpbF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLnVucmVhY2hhYmxlKShcIkNhbm5vdCBpbml0aWFsaXplIEJhc2VGaWx0ZXJGYWN0b3J5LlwiKTtcbiAgICB9XG4gIH1cbiAgYWRkRmlsdGVyKG1hcHMpIHtcbiAgICByZXR1cm4gXCJub25lXCI7XG4gIH1cbiAgYWRkSENNRmlsdGVyKGZnQ29sb3IsIGJnQ29sb3IpIHtcbiAgICByZXR1cm4gXCJub25lXCI7XG4gIH1cbiAgYWRkSGlnaGxpZ2h0SENNRmlsdGVyKGZnQ29sb3IsIGJnQ29sb3IsIG5ld0ZnQ29sb3IsIG5ld0JnQ29sb3IpIHtcbiAgICByZXR1cm4gXCJub25lXCI7XG4gIH1cbiAgZGVzdHJveShrZWVwSENNID0gZmFsc2UpIHt9XG59XG5jbGFzcyBCYXNlQ2FudmFzRmFjdG9yeSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIGlmICh0aGlzLmNvbnN0cnVjdG9yID09PSBCYXNlQ2FudmFzRmFjdG9yeSkge1xuICAgICAgKDAsX3NoYXJlZF91dGlsX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18udW5yZWFjaGFibGUpKFwiQ2Fubm90IGluaXRpYWxpemUgQmFzZUNhbnZhc0ZhY3RvcnkuXCIpO1xuICAgIH1cbiAgfVxuICBjcmVhdGUod2lkdGgsIGhlaWdodCkge1xuICAgIGlmICh3aWR0aCA8PSAwIHx8IGhlaWdodCA8PSAwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGNhbnZhcyBzaXplXCIpO1xuICAgIH1cbiAgICBjb25zdCBjYW52YXMgPSB0aGlzLl9jcmVhdGVDYW52YXMod2lkdGgsIGhlaWdodCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNhbnZhcyxcbiAgICAgIGNvbnRleHQ6IGNhbnZhcy5nZXRDb250ZXh0KFwiMmRcIilcbiAgICB9O1xuICB9XG4gIHJlc2V0KGNhbnZhc0FuZENvbnRleHQsIHdpZHRoLCBoZWlnaHQpIHtcbiAgICBpZiAoIWNhbnZhc0FuZENvbnRleHQuY2FudmFzKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW52YXMgaXMgbm90IHNwZWNpZmllZFwiKTtcbiAgICB9XG4gICAgaWYgKHdpZHRoIDw9IDAgfHwgaGVpZ2h0IDw9IDApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgY2FudmFzIHNpemVcIik7XG4gICAgfVxuICAgIGNhbnZhc0FuZENvbnRleHQuY2FudmFzLndpZHRoID0gd2lkdGg7XG4gICAgY2FudmFzQW5kQ29udGV4dC5jYW52YXMuaGVpZ2h0ID0gaGVpZ2h0O1xuICB9XG4gIGRlc3Ryb3koY2FudmFzQW5kQ29udGV4dCkge1xuICAgIGlmICghY2FudmFzQW5kQ29udGV4dC5jYW52YXMpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbnZhcyBpcyBub3Qgc3BlY2lmaWVkXCIpO1xuICAgIH1cbiAgICBjYW52YXNBbmRDb250ZXh0LmNhbnZhcy53aWR0aCA9IDA7XG4gICAgY2FudmFzQW5kQ29udGV4dC5jYW52YXMuaGVpZ2h0ID0gMDtcbiAgICBjYW52YXNBbmRDb250ZXh0LmNhbnZhcyA9IG51bGw7XG4gICAgY2FudmFzQW5kQ29udGV4dC5jb250ZXh0ID0gbnVsbDtcbiAgfVxuICBfY3JlYXRlQ2FudmFzKHdpZHRoLCBoZWlnaHQpIHtcbiAgICAoMCxfc2hhcmVkX3V0aWxfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy51bnJlYWNoYWJsZSkoXCJBYnN0cmFjdCBtZXRob2QgYF9jcmVhdGVDYW52YXNgIGNhbGxlZC5cIik7XG4gIH1cbn1cbmNsYXNzIEJhc2VDTWFwUmVhZGVyRmFjdG9yeSB7XG4gIGNvbnN0cnVjdG9yKHtcbiAgICBiYXNlVXJsID0gbnVsbCxcbiAgICBpc0NvbXByZXNzZWQgPSB0cnVlXG4gIH0pIHtcbiAgICBpZiAodGhpcy5jb25zdHJ1Y3RvciA9PT0gQmFzZUNNYXBSZWFkZXJGYWN0b3J5KSB7XG4gICAgICAoMCxfc2hhcmVkX3V0aWxfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy51bnJlYWNoYWJsZSkoXCJDYW5ub3QgaW5pdGlhbGl6ZSBCYXNlQ01hcFJlYWRlckZhY3RvcnkuXCIpO1xuICAgIH1cbiAgICB0aGlzLmJhc2VVcmwgPSBiYXNlVXJsO1xuICAgIHRoaXMuaXNDb21wcmVzc2VkID0gaXNDb21wcmVzc2VkO1xuICB9XG4gIGFzeW5jIGZldGNoKHtcbiAgICBuYW1lXG4gIH0pIHtcbiAgICBpZiAoIXRoaXMuYmFzZVVybCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgQ01hcCBcImJhc2VVcmxcIiBwYXJhbWV0ZXIgbXVzdCBiZSBzcGVjaWZpZWQsIGVuc3VyZSB0aGF0ICcgKyAndGhlIFwiY01hcFVybFwiIGFuZCBcImNNYXBQYWNrZWRcIiBBUEkgcGFyYW1ldGVycyBhcmUgcHJvdmlkZWQuJyk7XG4gICAgfVxuICAgIGlmICghbmFtZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ01hcCBuYW1lIG11c3QgYmUgc3BlY2lmaWVkLlwiKTtcbiAgICB9XG4gICAgY29uc3QgdXJsID0gdGhpcy5iYXNlVXJsICsgbmFtZSArICh0aGlzLmlzQ29tcHJlc3NlZCA/IFwiLmJjbWFwXCIgOiBcIlwiKTtcbiAgICBjb25zdCBjb21wcmVzc2lvblR5cGUgPSB0aGlzLmlzQ29tcHJlc3NlZCA/IF9zaGFyZWRfdXRpbF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLkNNYXBDb21wcmVzc2lvblR5cGUuQklOQVJZIDogX3NoYXJlZF91dGlsX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uQ01hcENvbXByZXNzaW9uVHlwZS5OT05FO1xuICAgIHJldHVybiB0aGlzLl9mZXRjaERhdGEodXJsLCBjb21wcmVzc2lvblR5cGUpLmNhdGNoKHJlYXNvbiA9PiB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuYWJsZSB0byBsb2FkICR7dGhpcy5pc0NvbXByZXNzZWQgPyBcImJpbmFyeSBcIiA6IFwiXCJ9Q01hcCBhdDogJHt1cmx9YCk7XG4gICAgfSk7XG4gIH1cbiAgX2ZldGNoRGF0YSh1cmwsIGNvbXByZXNzaW9uVHlwZSkge1xuICAgICgwLF9zaGFyZWRfdXRpbF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLnVucmVhY2hhYmxlKShcIkFic3RyYWN0IG1ldGhvZCBgX2ZldGNoRGF0YWAgY2FsbGVkLlwiKTtcbiAgfVxufVxuY2xhc3MgQmFzZVN0YW5kYXJkRm9udERhdGFGYWN0b3J5IHtcbiAgY29uc3RydWN0b3Ioe1xuICAgIGJhc2VVcmwgPSBudWxsXG4gIH0pIHtcbiAgICBpZiAodGhpcy5jb25zdHJ1Y3RvciA9PT0gQmFzZVN0YW5kYXJkRm9udERhdGFGYWN0b3J5KSB7XG4gICAgICAoMCxfc2hhcmVkX3V0aWxfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy51bnJlYWNoYWJsZSkoXCJDYW5ub3QgaW5pdGlhbGl6ZSBCYXNlU3RhbmRhcmRGb250RGF0YUZhY3RvcnkuXCIpO1xuICAgIH1cbiAgICB0aGlzLmJhc2VVcmwgPSBiYXNlVXJsO1xuICB9XG4gIGFzeW5jIGZldGNoKHtcbiAgICBmaWxlbmFtZVxuICB9KSB7XG4gICAgaWYgKCF0aGlzLmJhc2VVcmwpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignVGhlIHN0YW5kYXJkIGZvbnQgXCJiYXNlVXJsXCIgcGFyYW1ldGVyIG11c3QgYmUgc3BlY2lmaWVkLCBlbnN1cmUgdGhhdCAnICsgJ3RoZSBcInN0YW5kYXJkRm9udERhdGFVcmxcIiBBUEkgcGFyYW1ldGVyIGlzIHByb3ZpZGVkLicpO1xuICAgIH1cbiAgICBpZiAoIWZpbGVuYW1lKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJGb250IGZpbGVuYW1lIG11c3QgYmUgc3BlY2lmaWVkLlwiKTtcbiAgICB9XG4gICAgY29uc3QgdXJsID0gYCR7dGhpcy5iYXNlVXJsfSR7ZmlsZW5hbWV9YDtcbiAgICByZXR1cm4gdGhpcy5fZmV0Y2hEYXRhKHVybCkuY2F0Y2gocmVhc29uID0+IHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgVW5hYmxlIHRvIGxvYWQgZm9udCBkYXRhIGF0OiAke3VybH1gKTtcbiAgICB9KTtcbiAgfVxuICBfZmV0Y2hEYXRhKHVybCkge1xuICAgICgwLF9zaGFyZWRfdXRpbF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLnVucmVhY2hhYmxlKShcIkFic3RyYWN0IG1ldGhvZCBgX2ZldGNoRGF0YWAgY2FsbGVkLlwiKTtcbiAgfVxufVxuY2xhc3MgQmFzZVNWR0ZhY3Rvcnkge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBpZiAodGhpcy5jb25zdHJ1Y3RvciA9PT0gQmFzZVNWR0ZhY3RvcnkpIHtcbiAgICAgICgwLF9zaGFyZWRfdXRpbF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLnVucmVhY2hhYmxlKShcIkNhbm5vdCBpbml0aWFsaXplIEJhc2VTVkdGYWN0b3J5LlwiKTtcbiAgICB9XG4gIH1cbiAgY3JlYXRlKHdpZHRoLCBoZWlnaHQsIHNraXBEaW1lbnNpb25zID0gZmFsc2UpIHtcbiAgICBpZiAod2lkdGggPD0gMCB8fCBoZWlnaHQgPD0gMCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBTVkcgZGltZW5zaW9uc1wiKTtcbiAgICB9XG4gICAgY29uc3Qgc3ZnID0gdGhpcy5fY3JlYXRlU1ZHKFwic3ZnOnN2Z1wiKTtcbiAgICBzdmcuc2V0QXR0cmlidXRlKFwidmVyc2lvblwiLCBcIjEuMVwiKTtcbiAgICBpZiAoIXNraXBEaW1lbnNpb25zKSB7XG4gICAgICBzdmcuc2V0QXR0cmlidXRlKFwid2lkdGhcIiwgYCR7d2lkdGh9cHhgKTtcbiAgICAgIHN2Zy5zZXRBdHRyaWJ1dGUoXCJoZWlnaHRcIiwgYCR7aGVpZ2h0fXB4YCk7XG4gICAgfVxuICAgIHN2Zy5zZXRBdHRyaWJ1dGUoXCJwcmVzZXJ2ZUFzcGVjdFJhdGlvXCIsIFwibm9uZVwiKTtcbiAgICBzdmcuc2V0QXR0cmlidXRlKFwidmlld0JveFwiLCBgMCAwICR7d2lkdGh9ICR7aGVpZ2h0fWApO1xuICAgIHJldHVybiBzdmc7XG4gIH1cbiAgY3JlYXRlRWxlbWVudCh0eXBlKSB7XG4gICAgaWYgKHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIFNWRyBlbGVtZW50IHR5cGVcIik7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9jcmVhdGVTVkcodHlwZSk7XG4gIH1cbiAgX2NyZWF0ZVNWRyh0eXBlKSB7XG4gICAgKDAsX3NoYXJlZF91dGlsX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18udW5yZWFjaGFibGUpKFwiQWJzdHJhY3QgbWV0aG9kIGBfY3JlYXRlU1ZHYCBjYWxsZWQuXCIpO1xuICB9XG59XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDI1MDpcbi8qKiovICgoX191bnVzZWRfd2VicGFja19fX3dlYnBhY2tfbW9kdWxlX18sIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuXG4vLyBFWFBPUlRTXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywge1xuICBDYW52YXNHcmFwaGljczogKCkgPT4gKC8qIGJpbmRpbmcgKi8gQ2FudmFzR3JhcGhpY3MpXG59KTtcblxuLy8gRVhURVJOQUwgTU9EVUxFOiAuL3NyYy9zaGFyZWQvdXRpbC5qc1xudmFyIHV0aWwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI2Nik7XG4vLyBFWFRFUk5BTCBNT0RVTEU6IC4vc3JjL2Rpc3BsYXkvZGlzcGxheV91dGlscy5qc1xudmFyIGRpc3BsYXlfdXRpbHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ3Myk7XG47Ly8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvZGlzcGxheS9wYXR0ZXJuX2hlbHBlci5qc1xuXG5cbmNvbnN0IFBhdGhUeXBlID0ge1xuICBGSUxMOiBcIkZpbGxcIixcbiAgU1RST0tFOiBcIlN0cm9rZVwiLFxuICBTSEFESU5HOiBcIlNoYWRpbmdcIlxufTtcbmZ1bmN0aW9uIGFwcGx5Qm91bmRpbmdCb3goY3R4LCBiYm94KSB7XG4gIGlmICghYmJveCkge1xuICAgIHJldHVybjtcbiAgfVxuICBjb25zdCB3aWR0aCA9IGJib3hbMl0gLSBiYm94WzBdO1xuICBjb25zdCBoZWlnaHQgPSBiYm94WzNdIC0gYmJveFsxXTtcbiAgY29uc3QgcmVnaW9uID0gbmV3IFBhdGgyRCgpO1xuICByZWdpb24ucmVjdChiYm94WzBdLCBiYm94WzFdLCB3aWR0aCwgaGVpZ2h0KTtcbiAgY3R4LmNsaXAocmVnaW9uKTtcbn1cbmNsYXNzIEJhc2VTaGFkaW5nUGF0dGVybiB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIGlmICh0aGlzLmNvbnN0cnVjdG9yID09PSBCYXNlU2hhZGluZ1BhdHRlcm4pIHtcbiAgICAgICgwLHV0aWwudW5yZWFjaGFibGUpKFwiQ2Fubm90IGluaXRpYWxpemUgQmFzZVNoYWRpbmdQYXR0ZXJuLlwiKTtcbiAgICB9XG4gIH1cbiAgZ2V0UGF0dGVybigpIHtcbiAgICAoMCx1dGlsLnVucmVhY2hhYmxlKShcIkFic3RyYWN0IG1ldGhvZCBgZ2V0UGF0dGVybmAgY2FsbGVkLlwiKTtcbiAgfVxufVxuY2xhc3MgUmFkaWFsQXhpYWxTaGFkaW5nUGF0dGVybiBleHRlbmRzIEJhc2VTaGFkaW5nUGF0dGVybiB7XG4gIGNvbnN0cnVjdG9yKElSKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl90eXBlID0gSVJbMV07XG4gICAgdGhpcy5fYmJveCA9IElSWzJdO1xuICAgIHRoaXMuX2NvbG9yU3RvcHMgPSBJUlszXTtcbiAgICB0aGlzLl9wMCA9IElSWzRdO1xuICAgIHRoaXMuX3AxID0gSVJbNV07XG4gICAgdGhpcy5fcjAgPSBJUls2XTtcbiAgICB0aGlzLl9yMSA9IElSWzddO1xuICAgIHRoaXMubWF0cml4ID0gbnVsbDtcbiAgfVxuICBfY3JlYXRlR3JhZGllbnQoY3R4KSB7XG4gICAgbGV0IGdyYWQ7XG4gICAgaWYgKHRoaXMuX3R5cGUgPT09IFwiYXhpYWxcIikge1xuICAgICAgZ3JhZCA9IGN0eC5jcmVhdGVMaW5lYXJHcmFkaWVudCh0aGlzLl9wMFswXSwgdGhpcy5fcDBbMV0sIHRoaXMuX3AxWzBdLCB0aGlzLl9wMVsxXSk7XG4gICAgfSBlbHNlIGlmICh0aGlzLl90eXBlID09PSBcInJhZGlhbFwiKSB7XG4gICAgICBncmFkID0gY3R4LmNyZWF0ZVJhZGlhbEdyYWRpZW50KHRoaXMuX3AwWzBdLCB0aGlzLl9wMFsxXSwgdGhpcy5fcjAsIHRoaXMuX3AxWzBdLCB0aGlzLl9wMVsxXSwgdGhpcy5fcjEpO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IGNvbG9yU3RvcCBvZiB0aGlzLl9jb2xvclN0b3BzKSB7XG4gICAgICBncmFkLmFkZENvbG9yU3RvcChjb2xvclN0b3BbMF0sIGNvbG9yU3RvcFsxXSk7XG4gICAgfVxuICAgIHJldHVybiBncmFkO1xuICB9XG4gIGdldFBhdHRlcm4oY3R4LCBvd25lciwgaW52ZXJzZSwgcGF0aFR5cGUpIHtcbiAgICBsZXQgcGF0dGVybjtcbiAgICBpZiAocGF0aFR5cGUgPT09IFBhdGhUeXBlLlNUUk9LRSB8fCBwYXRoVHlwZSA9PT0gUGF0aFR5cGUuRklMTCkge1xuICAgICAgY29uc3Qgb3duZXJCQm94ID0gb3duZXIuY3VycmVudC5nZXRDbGlwcGVkUGF0aEJvdW5kaW5nQm94KHBhdGhUeXBlLCAoMCxkaXNwbGF5X3V0aWxzLmdldEN1cnJlbnRUcmFuc2Zvcm0pKGN0eCkpIHx8IFswLCAwLCAwLCAwXTtcbiAgICAgIGNvbnN0IHdpZHRoID0gTWF0aC5jZWlsKG93bmVyQkJveFsyXSAtIG93bmVyQkJveFswXSkgfHwgMTtcbiAgICAgIGNvbnN0IGhlaWdodCA9IE1hdGguY2VpbChvd25lckJCb3hbM10gLSBvd25lckJCb3hbMV0pIHx8IDE7XG4gICAgICBjb25zdCB0bXBDYW52YXMgPSBvd25lci5jYWNoZWRDYW52YXNlcy5nZXRDYW52YXMoXCJwYXR0ZXJuXCIsIHdpZHRoLCBoZWlnaHQsIHRydWUpO1xuICAgICAgY29uc3QgdG1wQ3R4ID0gdG1wQ2FudmFzLmNvbnRleHQ7XG4gICAgICB0bXBDdHguY2xlYXJSZWN0KDAsIDAsIHRtcEN0eC5jYW52YXMud2lkdGgsIHRtcEN0eC5jYW52YXMuaGVpZ2h0KTtcbiAgICAgIHRtcEN0eC5iZWdpblBhdGgoKTtcbiAgICAgIHRtcEN0eC5yZWN0KDAsIDAsIHRtcEN0eC5jYW52YXMud2lkdGgsIHRtcEN0eC5jYW52YXMuaGVpZ2h0KTtcbiAgICAgIHRtcEN0eC50cmFuc2xhdGUoLW93bmVyQkJveFswXSwgLW93bmVyQkJveFsxXSk7XG4gICAgICBpbnZlcnNlID0gdXRpbC5VdGlsLnRyYW5zZm9ybShpbnZlcnNlLCBbMSwgMCwgMCwgMSwgb3duZXJCQm94WzBdLCBvd25lckJCb3hbMV1dKTtcbiAgICAgIHRtcEN0eC50cmFuc2Zvcm0oLi4ub3duZXIuYmFzZVRyYW5zZm9ybSk7XG4gICAgICBpZiAodGhpcy5tYXRyaXgpIHtcbiAgICAgICAgdG1wQ3R4LnRyYW5zZm9ybSguLi50aGlzLm1hdHJpeCk7XG4gICAgICB9XG4gICAgICBhcHBseUJvdW5kaW5nQm94KHRtcEN0eCwgdGhpcy5fYmJveCk7XG4gICAgICB0bXBDdHguZmlsbFN0eWxlID0gdGhpcy5fY3JlYXRlR3JhZGllbnQodG1wQ3R4KTtcbiAgICAgIHRtcEN0eC5maWxsKCk7XG4gICAgICBwYXR0ZXJuID0gY3R4LmNyZWF0ZVBhdHRlcm4odG1wQ2FudmFzLmNhbnZhcywgXCJuby1yZXBlYXRcIik7XG4gICAgICBjb25zdCBkb21NYXRyaXggPSBuZXcgRE9NTWF0cml4KGludmVyc2UpO1xuICAgICAgcGF0dGVybi5zZXRUcmFuc2Zvcm0oZG9tTWF0cml4KTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXBwbHlCb3VuZGluZ0JveChjdHgsIHRoaXMuX2Jib3gpO1xuICAgICAgcGF0dGVybiA9IHRoaXMuX2NyZWF0ZUdyYWRpZW50KGN0eCk7XG4gICAgfVxuICAgIHJldHVybiBwYXR0ZXJuO1xuICB9XG59XG5mdW5jdGlvbiBkcmF3VHJpYW5nbGUoZGF0YSwgY29udGV4dCwgcDEsIHAyLCBwMywgYzEsIGMyLCBjMykge1xuICBjb25zdCBjb29yZHMgPSBjb250ZXh0LmNvb3JkcyxcbiAgICBjb2xvcnMgPSBjb250ZXh0LmNvbG9ycztcbiAgY29uc3QgYnl0ZXMgPSBkYXRhLmRhdGEsXG4gICAgcm93U2l6ZSA9IGRhdGEud2lkdGggKiA0O1xuICBsZXQgdG1wO1xuICBpZiAoY29vcmRzW3AxICsgMV0gPiBjb29yZHNbcDIgKyAxXSkge1xuICAgIHRtcCA9IHAxO1xuICAgIHAxID0gcDI7XG4gICAgcDIgPSB0bXA7XG4gICAgdG1wID0gYzE7XG4gICAgYzEgPSBjMjtcbiAgICBjMiA9IHRtcDtcbiAgfVxuICBpZiAoY29vcmRzW3AyICsgMV0gPiBjb29yZHNbcDMgKyAxXSkge1xuICAgIHRtcCA9IHAyO1xuICAgIHAyID0gcDM7XG4gICAgcDMgPSB0bXA7XG4gICAgdG1wID0gYzI7XG4gICAgYzIgPSBjMztcbiAgICBjMyA9IHRtcDtcbiAgfVxuICBpZiAoY29vcmRzW3AxICsgMV0gPiBjb29yZHNbcDIgKyAxXSkge1xuICAgIHRtcCA9IHAxO1xuICAgIHAxID0gcDI7XG4gICAgcDIgPSB0bXA7XG4gICAgdG1wID0gYzE7XG4gICAgYzEgPSBjMjtcbiAgICBjMiA9IHRtcDtcbiAgfVxuICBjb25zdCB4MSA9IChjb29yZHNbcDFdICsgY29udGV4dC5vZmZzZXRYKSAqIGNvbnRleHQuc2NhbGVYO1xuICBjb25zdCB5MSA9IChjb29yZHNbcDEgKyAxXSArIGNvbnRleHQub2Zmc2V0WSkgKiBjb250ZXh0LnNjYWxlWTtcbiAgY29uc3QgeDIgPSAoY29vcmRzW3AyXSArIGNvbnRleHQub2Zmc2V0WCkgKiBjb250ZXh0LnNjYWxlWDtcbiAgY29uc3QgeTIgPSAoY29vcmRzW3AyICsgMV0gKyBjb250ZXh0Lm9mZnNldFkpICogY29udGV4dC5zY2FsZVk7XG4gIGNvbnN0IHgzID0gKGNvb3Jkc1twM10gKyBjb250ZXh0Lm9mZnNldFgpICogY29udGV4dC5zY2FsZVg7XG4gIGNvbnN0IHkzID0gKGNvb3Jkc1twMyArIDFdICsgY29udGV4dC5vZmZzZXRZKSAqIGNvbnRleHQuc2NhbGVZO1xuICBpZiAoeTEgPj0geTMpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3QgYzFyID0gY29sb3JzW2MxXSxcbiAgICBjMWcgPSBjb2xvcnNbYzEgKyAxXSxcbiAgICBjMWIgPSBjb2xvcnNbYzEgKyAyXTtcbiAgY29uc3QgYzJyID0gY29sb3JzW2MyXSxcbiAgICBjMmcgPSBjb2xvcnNbYzIgKyAxXSxcbiAgICBjMmIgPSBjb2xvcnNbYzIgKyAyXTtcbiAgY29uc3QgYzNyID0gY29sb3JzW2MzXSxcbiAgICBjM2cgPSBjb2xvcnNbYzMgKyAxXSxcbiAgICBjM2IgPSBjb2xvcnNbYzMgKyAyXTtcbiAgY29uc3QgbWluWSA9IE1hdGgucm91bmQoeTEpLFxuICAgIG1heFkgPSBNYXRoLnJvdW5kKHkzKTtcbiAgbGV0IHhhLCBjYXIsIGNhZywgY2FiO1xuICBsZXQgeGIsIGNiciwgY2JnLCBjYmI7XG4gIGZvciAobGV0IHkgPSBtaW5ZOyB5IDw9IG1heFk7IHkrKykge1xuICAgIGlmICh5IDwgeTIpIHtcbiAgICAgIGNvbnN0IGsgPSB5IDwgeTEgPyAwIDogKHkxIC0geSkgLyAoeTEgLSB5Mik7XG4gICAgICB4YSA9IHgxIC0gKHgxIC0geDIpICogaztcbiAgICAgIGNhciA9IGMxciAtIChjMXIgLSBjMnIpICogaztcbiAgICAgIGNhZyA9IGMxZyAtIChjMWcgLSBjMmcpICogaztcbiAgICAgIGNhYiA9IGMxYiAtIChjMWIgLSBjMmIpICogaztcbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IGs7XG4gICAgICBpZiAoeSA+IHkzKSB7XG4gICAgICAgIGsgPSAxO1xuICAgICAgfSBlbHNlIGlmICh5MiA9PT0geTMpIHtcbiAgICAgICAgayA9IDA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBrID0gKHkyIC0geSkgLyAoeTIgLSB5Myk7XG4gICAgICB9XG4gICAgICB4YSA9IHgyIC0gKHgyIC0geDMpICogaztcbiAgICAgIGNhciA9IGMyciAtIChjMnIgLSBjM3IpICogaztcbiAgICAgIGNhZyA9IGMyZyAtIChjMmcgLSBjM2cpICogaztcbiAgICAgIGNhYiA9IGMyYiAtIChjMmIgLSBjM2IpICogaztcbiAgICB9XG4gICAgbGV0IGs7XG4gICAgaWYgKHkgPCB5MSkge1xuICAgICAgayA9IDA7XG4gICAgfSBlbHNlIGlmICh5ID4geTMpIHtcbiAgICAgIGsgPSAxO1xuICAgIH0gZWxzZSB7XG4gICAgICBrID0gKHkxIC0geSkgLyAoeTEgLSB5Myk7XG4gICAgfVxuICAgIHhiID0geDEgLSAoeDEgLSB4MykgKiBrO1xuICAgIGNiciA9IGMxciAtIChjMXIgLSBjM3IpICogaztcbiAgICBjYmcgPSBjMWcgLSAoYzFnIC0gYzNnKSAqIGs7XG4gICAgY2JiID0gYzFiIC0gKGMxYiAtIGMzYikgKiBrO1xuICAgIGNvbnN0IHgxXyA9IE1hdGgucm91bmQoTWF0aC5taW4oeGEsIHhiKSk7XG4gICAgY29uc3QgeDJfID0gTWF0aC5yb3VuZChNYXRoLm1heCh4YSwgeGIpKTtcbiAgICBsZXQgaiA9IHJvd1NpemUgKiB5ICsgeDFfICogNDtcbiAgICBmb3IgKGxldCB4ID0geDFfOyB4IDw9IHgyXzsgeCsrKSB7XG4gICAgICBrID0gKHhhIC0geCkgLyAoeGEgLSB4Yik7XG4gICAgICBpZiAoayA8IDApIHtcbiAgICAgICAgayA9IDA7XG4gICAgICB9IGVsc2UgaWYgKGsgPiAxKSB7XG4gICAgICAgIGsgPSAxO1xuICAgICAgfVxuICAgICAgYnl0ZXNbaisrXSA9IGNhciAtIChjYXIgLSBjYnIpICogayB8IDA7XG4gICAgICBieXRlc1tqKytdID0gY2FnIC0gKGNhZyAtIGNiZykgKiBrIHwgMDtcbiAgICAgIGJ5dGVzW2orK10gPSBjYWIgLSAoY2FiIC0gY2JiKSAqIGsgfCAwO1xuICAgICAgYnl0ZXNbaisrXSA9IDI1NTtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIGRyYXdGaWd1cmUoZGF0YSwgZmlndXJlLCBjb250ZXh0KSB7XG4gIGNvbnN0IHBzID0gZmlndXJlLmNvb3JkcztcbiAgY29uc3QgY3MgPSBmaWd1cmUuY29sb3JzO1xuICBsZXQgaSwgaWk7XG4gIHN3aXRjaCAoZmlndXJlLnR5cGUpIHtcbiAgICBjYXNlIFwibGF0dGljZVwiOlxuICAgICAgY29uc3QgdmVydGljZXNQZXJSb3cgPSBmaWd1cmUudmVydGljZXNQZXJSb3c7XG4gICAgICBjb25zdCByb3dzID0gTWF0aC5mbG9vcihwcy5sZW5ndGggLyB2ZXJ0aWNlc1BlclJvdykgLSAxO1xuICAgICAgY29uc3QgY29scyA9IHZlcnRpY2VzUGVyUm93IC0gMTtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCByb3dzOyBpKyspIHtcbiAgICAgICAgbGV0IHEgPSBpICogdmVydGljZXNQZXJSb3c7XG4gICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgY29sczsgaisrLCBxKyspIHtcbiAgICAgICAgICBkcmF3VHJpYW5nbGUoZGF0YSwgY29udGV4dCwgcHNbcV0sIHBzW3EgKyAxXSwgcHNbcSArIHZlcnRpY2VzUGVyUm93XSwgY3NbcV0sIGNzW3EgKyAxXSwgY3NbcSArIHZlcnRpY2VzUGVyUm93XSk7XG4gICAgICAgICAgZHJhd1RyaWFuZ2xlKGRhdGEsIGNvbnRleHQsIHBzW3EgKyB2ZXJ0aWNlc1BlclJvdyArIDFdLCBwc1txICsgMV0sIHBzW3EgKyB2ZXJ0aWNlc1BlclJvd10sIGNzW3EgKyB2ZXJ0aWNlc1BlclJvdyArIDFdLCBjc1txICsgMV0sIGNzW3EgKyB2ZXJ0aWNlc1BlclJvd10pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwidHJpYW5nbGVzXCI6XG4gICAgICBmb3IgKGkgPSAwLCBpaSA9IHBzLmxlbmd0aDsgaSA8IGlpOyBpICs9IDMpIHtcbiAgICAgICAgZHJhd1RyaWFuZ2xlKGRhdGEsIGNvbnRleHQsIHBzW2ldLCBwc1tpICsgMV0sIHBzW2kgKyAyXSwgY3NbaV0sIGNzW2kgKyAxXSwgY3NbaSArIDJdKTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbGxlZ2FsIGZpZ3VyZVwiKTtcbiAgfVxufVxuY2xhc3MgTWVzaFNoYWRpbmdQYXR0ZXJuIGV4dGVuZHMgQmFzZVNoYWRpbmdQYXR0ZXJuIHtcbiAgY29uc3RydWN0b3IoSVIpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX2Nvb3JkcyA9IElSWzJdO1xuICAgIHRoaXMuX2NvbG9ycyA9IElSWzNdO1xuICAgIHRoaXMuX2ZpZ3VyZXMgPSBJUls0XTtcbiAgICB0aGlzLl9ib3VuZHMgPSBJUls1XTtcbiAgICB0aGlzLl9iYm94ID0gSVJbN107XG4gICAgdGhpcy5fYmFja2dyb3VuZCA9IElSWzhdO1xuICAgIHRoaXMubWF0cml4ID0gbnVsbDtcbiAgfVxuICBfY3JlYXRlTWVzaENhbnZhcyhjb21iaW5lZFNjYWxlLCBiYWNrZ3JvdW5kQ29sb3IsIGNhY2hlZENhbnZhc2VzKSB7XG4gICAgY29uc3QgRVhQRUNURURfU0NBTEUgPSAxLjE7XG4gICAgY29uc3QgTUFYX1BBVFRFUk5fU0laRSA9IDMwMDA7XG4gICAgY29uc3QgQk9SREVSX1NJWkUgPSAyO1xuICAgIGNvbnN0IG9mZnNldFggPSBNYXRoLmZsb29yKHRoaXMuX2JvdW5kc1swXSk7XG4gICAgY29uc3Qgb2Zmc2V0WSA9IE1hdGguZmxvb3IodGhpcy5fYm91bmRzWzFdKTtcbiAgICBjb25zdCBib3VuZHNXaWR0aCA9IE1hdGguY2VpbCh0aGlzLl9ib3VuZHNbMl0pIC0gb2Zmc2V0WDtcbiAgICBjb25zdCBib3VuZHNIZWlnaHQgPSBNYXRoLmNlaWwodGhpcy5fYm91bmRzWzNdKSAtIG9mZnNldFk7XG4gICAgY29uc3Qgd2lkdGggPSBNYXRoLm1pbihNYXRoLmNlaWwoTWF0aC5hYnMoYm91bmRzV2lkdGggKiBjb21iaW5lZFNjYWxlWzBdICogRVhQRUNURURfU0NBTEUpKSwgTUFYX1BBVFRFUk5fU0laRSk7XG4gICAgY29uc3QgaGVpZ2h0ID0gTWF0aC5taW4oTWF0aC5jZWlsKE1hdGguYWJzKGJvdW5kc0hlaWdodCAqIGNvbWJpbmVkU2NhbGVbMV0gKiBFWFBFQ1RFRF9TQ0FMRSkpLCBNQVhfUEFUVEVSTl9TSVpFKTtcbiAgICBjb25zdCBzY2FsZVggPSBib3VuZHNXaWR0aCAvIHdpZHRoO1xuICAgIGNvbnN0IHNjYWxlWSA9IGJvdW5kc0hlaWdodCAvIGhlaWdodDtcbiAgICBjb25zdCBjb250ZXh0ID0ge1xuICAgICAgY29vcmRzOiB0aGlzLl9jb29yZHMsXG4gICAgICBjb2xvcnM6IHRoaXMuX2NvbG9ycyxcbiAgICAgIG9mZnNldFg6IC1vZmZzZXRYLFxuICAgICAgb2Zmc2V0WTogLW9mZnNldFksXG4gICAgICBzY2FsZVg6IDEgLyBzY2FsZVgsXG4gICAgICBzY2FsZVk6IDEgLyBzY2FsZVlcbiAgICB9O1xuICAgIGNvbnN0IHBhZGRlZFdpZHRoID0gd2lkdGggKyBCT1JERVJfU0laRSAqIDI7XG4gICAgY29uc3QgcGFkZGVkSGVpZ2h0ID0gaGVpZ2h0ICsgQk9SREVSX1NJWkUgKiAyO1xuICAgIGNvbnN0IHRtcENhbnZhcyA9IGNhY2hlZENhbnZhc2VzLmdldENhbnZhcyhcIm1lc2hcIiwgcGFkZGVkV2lkdGgsIHBhZGRlZEhlaWdodCwgZmFsc2UpO1xuICAgIGNvbnN0IHRtcEN0eCA9IHRtcENhbnZhcy5jb250ZXh0O1xuICAgIGNvbnN0IGRhdGEgPSB0bXBDdHguY3JlYXRlSW1hZ2VEYXRhKHdpZHRoLCBoZWlnaHQpO1xuICAgIGlmIChiYWNrZ3JvdW5kQ29sb3IpIHtcbiAgICAgIGNvbnN0IGJ5dGVzID0gZGF0YS5kYXRhO1xuICAgICAgZm9yIChsZXQgaSA9IDAsIGlpID0gYnl0ZXMubGVuZ3RoOyBpIDwgaWk7IGkgKz0gNCkge1xuICAgICAgICBieXRlc1tpXSA9IGJhY2tncm91bmRDb2xvclswXTtcbiAgICAgICAgYnl0ZXNbaSArIDFdID0gYmFja2dyb3VuZENvbG9yWzFdO1xuICAgICAgICBieXRlc1tpICsgMl0gPSBiYWNrZ3JvdW5kQ29sb3JbMl07XG4gICAgICAgIGJ5dGVzW2kgKyAzXSA9IDI1NTtcbiAgICAgIH1cbiAgICB9XG4gICAgZm9yIChjb25zdCBmaWd1cmUgb2YgdGhpcy5fZmlndXJlcykge1xuICAgICAgZHJhd0ZpZ3VyZShkYXRhLCBmaWd1cmUsIGNvbnRleHQpO1xuICAgIH1cbiAgICB0bXBDdHgucHV0SW1hZ2VEYXRhKGRhdGEsIEJPUkRFUl9TSVpFLCBCT1JERVJfU0laRSk7XG4gICAgY29uc3QgY2FudmFzID0gdG1wQ2FudmFzLmNhbnZhcztcbiAgICByZXR1cm4ge1xuICAgICAgY2FudmFzLFxuICAgICAgb2Zmc2V0WDogb2Zmc2V0WCAtIEJPUkRFUl9TSVpFICogc2NhbGVYLFxuICAgICAgb2Zmc2V0WTogb2Zmc2V0WSAtIEJPUkRFUl9TSVpFICogc2NhbGVZLFxuICAgICAgc2NhbGVYLFxuICAgICAgc2NhbGVZXG4gICAgfTtcbiAgfVxuICBnZXRQYXR0ZXJuKGN0eCwgb3duZXIsIGludmVyc2UsIHBhdGhUeXBlKSB7XG4gICAgYXBwbHlCb3VuZGluZ0JveChjdHgsIHRoaXMuX2Jib3gpO1xuICAgIGxldCBzY2FsZTtcbiAgICBpZiAocGF0aFR5cGUgPT09IFBhdGhUeXBlLlNIQURJTkcpIHtcbiAgICAgIHNjYWxlID0gdXRpbC5VdGlsLnNpbmd1bGFyVmFsdWVEZWNvbXBvc2UyZFNjYWxlKCgwLGRpc3BsYXlfdXRpbHMuZ2V0Q3VycmVudFRyYW5zZm9ybSkoY3R4KSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNjYWxlID0gdXRpbC5VdGlsLnNpbmd1bGFyVmFsdWVEZWNvbXBvc2UyZFNjYWxlKG93bmVyLmJhc2VUcmFuc2Zvcm0pO1xuICAgICAgaWYgKHRoaXMubWF0cml4KSB7XG4gICAgICAgIGNvbnN0IG1hdHJpeFNjYWxlID0gdXRpbC5VdGlsLnNpbmd1bGFyVmFsdWVEZWNvbXBvc2UyZFNjYWxlKHRoaXMubWF0cml4KTtcbiAgICAgICAgc2NhbGUgPSBbc2NhbGVbMF0gKiBtYXRyaXhTY2FsZVswXSwgc2NhbGVbMV0gKiBtYXRyaXhTY2FsZVsxXV07XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IHRlbXBvcmFyeVBhdHRlcm5DYW52YXMgPSB0aGlzLl9jcmVhdGVNZXNoQ2FudmFzKHNjYWxlLCBwYXRoVHlwZSA9PT0gUGF0aFR5cGUuU0hBRElORyA/IG51bGwgOiB0aGlzLl9iYWNrZ3JvdW5kLCBvd25lci5jYWNoZWRDYW52YXNlcyk7XG4gICAgaWYgKHBhdGhUeXBlICE9PSBQYXRoVHlwZS5TSEFESU5HKSB7XG4gICAgICBjdHguc2V0VHJhbnNmb3JtKC4uLm93bmVyLmJhc2VUcmFuc2Zvcm0pO1xuICAgICAgaWYgKHRoaXMubWF0cml4KSB7XG4gICAgICAgIGN0eC50cmFuc2Zvcm0oLi4udGhpcy5tYXRyaXgpO1xuICAgICAgfVxuICAgIH1cbiAgICBjdHgudHJhbnNsYXRlKHRlbXBvcmFyeVBhdHRlcm5DYW52YXMub2Zmc2V0WCwgdGVtcG9yYXJ5UGF0dGVybkNhbnZhcy5vZmZzZXRZKTtcbiAgICBjdHguc2NhbGUodGVtcG9yYXJ5UGF0dGVybkNhbnZhcy5zY2FsZVgsIHRlbXBvcmFyeVBhdHRlcm5DYW52YXMuc2NhbGVZKTtcbiAgICByZXR1cm4gY3R4LmNyZWF0ZVBhdHRlcm4odGVtcG9yYXJ5UGF0dGVybkNhbnZhcy5jYW52YXMsIFwibm8tcmVwZWF0XCIpO1xuICB9XG59XG5jbGFzcyBEdW1teVNoYWRpbmdQYXR0ZXJuIGV4dGVuZHMgQmFzZVNoYWRpbmdQYXR0ZXJuIHtcbiAgZ2V0UGF0dGVybigpIHtcbiAgICByZXR1cm4gXCJob3RwaW5rXCI7XG4gIH1cbn1cbmZ1bmN0aW9uIGdldFNoYWRpbmdQYXR0ZXJuKElSKSB7XG4gIHN3aXRjaCAoSVJbMF0pIHtcbiAgICBjYXNlIFwiUmFkaWFsQXhpYWxcIjpcbiAgICAgIHJldHVybiBuZXcgUmFkaWFsQXhpYWxTaGFkaW5nUGF0dGVybihJUik7XG4gICAgY2FzZSBcIk1lc2hcIjpcbiAgICAgIHJldHVybiBuZXcgTWVzaFNoYWRpbmdQYXR0ZXJuKElSKTtcbiAgICBjYXNlIFwiRHVtbXlcIjpcbiAgICAgIHJldHVybiBuZXcgRHVtbXlTaGFkaW5nUGF0dGVybigpO1xuICB9XG4gIHRocm93IG5ldyBFcnJvcihgVW5rbm93biBJUiB0eXBlOiAke0lSWzBdfWApO1xufVxuY29uc3QgUGFpbnRUeXBlID0ge1xuICBDT0xPUkVEOiAxLFxuICBVTkNPTE9SRUQ6IDJcbn07XG5jbGFzcyBUaWxpbmdQYXR0ZXJuIHtcbiAgc3RhdGljIE1BWF9QQVRURVJOX1NJWkUgPSAzMDAwO1xuICBjb25zdHJ1Y3RvcihJUiwgY29sb3IsIGN0eCwgY2FudmFzR3JhcGhpY3NGYWN0b3J5LCBiYXNlVHJhbnNmb3JtKSB7XG4gICAgdGhpcy5vcGVyYXRvckxpc3QgPSBJUlsyXTtcbiAgICB0aGlzLm1hdHJpeCA9IElSWzNdIHx8IFsxLCAwLCAwLCAxLCAwLCAwXTtcbiAgICB0aGlzLmJib3ggPSBJUls0XTtcbiAgICB0aGlzLnhzdGVwID0gSVJbNV07XG4gICAgdGhpcy55c3RlcCA9IElSWzZdO1xuICAgIHRoaXMucGFpbnRUeXBlID0gSVJbN107XG4gICAgdGhpcy50aWxpbmdUeXBlID0gSVJbOF07XG4gICAgdGhpcy5jb2xvciA9IGNvbG9yO1xuICAgIHRoaXMuY3R4ID0gY3R4O1xuICAgIHRoaXMuY2FudmFzR3JhcGhpY3NGYWN0b3J5ID0gY2FudmFzR3JhcGhpY3NGYWN0b3J5O1xuICAgIHRoaXMuYmFzZVRyYW5zZm9ybSA9IGJhc2VUcmFuc2Zvcm07XG4gIH1cbiAgY3JlYXRlUGF0dGVybkNhbnZhcyhvd25lcikge1xuICAgIGNvbnN0IG9wZXJhdG9yTGlzdCA9IHRoaXMub3BlcmF0b3JMaXN0O1xuICAgIGNvbnN0IGJib3ggPSB0aGlzLmJib3g7XG4gICAgY29uc3QgeHN0ZXAgPSB0aGlzLnhzdGVwO1xuICAgIGNvbnN0IHlzdGVwID0gdGhpcy55c3RlcDtcbiAgICBjb25zdCBwYWludFR5cGUgPSB0aGlzLnBhaW50VHlwZTtcbiAgICBjb25zdCB0aWxpbmdUeXBlID0gdGhpcy50aWxpbmdUeXBlO1xuICAgIGNvbnN0IGNvbG9yID0gdGhpcy5jb2xvcjtcbiAgICBjb25zdCBjYW52YXNHcmFwaGljc0ZhY3RvcnkgPSB0aGlzLmNhbnZhc0dyYXBoaWNzRmFjdG9yeTtcbiAgICAoMCx1dGlsLmluZm8pKFwiVGlsaW5nVHlwZTogXCIgKyB0aWxpbmdUeXBlKTtcbiAgICBjb25zdCB4MCA9IGJib3hbMF0sXG4gICAgICB5MCA9IGJib3hbMV0sXG4gICAgICB4MSA9IGJib3hbMl0sXG4gICAgICB5MSA9IGJib3hbM107XG4gICAgY29uc3QgbWF0cml4U2NhbGUgPSB1dGlsLlV0aWwuc2luZ3VsYXJWYWx1ZURlY29tcG9zZTJkU2NhbGUodGhpcy5tYXRyaXgpO1xuICAgIGNvbnN0IGN1ck1hdHJpeFNjYWxlID0gdXRpbC5VdGlsLnNpbmd1bGFyVmFsdWVEZWNvbXBvc2UyZFNjYWxlKHRoaXMuYmFzZVRyYW5zZm9ybSk7XG4gICAgY29uc3QgY29tYmluZWRTY2FsZSA9IFttYXRyaXhTY2FsZVswXSAqIGN1ck1hdHJpeFNjYWxlWzBdLCBtYXRyaXhTY2FsZVsxXSAqIGN1ck1hdHJpeFNjYWxlWzFdXTtcbiAgICBjb25zdCBkaW14ID0gdGhpcy5nZXRTaXplQW5kU2NhbGUoeHN0ZXAsIHRoaXMuY3R4LmNhbnZhcy53aWR0aCwgY29tYmluZWRTY2FsZVswXSk7XG4gICAgY29uc3QgZGlteSA9IHRoaXMuZ2V0U2l6ZUFuZFNjYWxlKHlzdGVwLCB0aGlzLmN0eC5jYW52YXMuaGVpZ2h0LCBjb21iaW5lZFNjYWxlWzFdKTtcbiAgICBjb25zdCB0bXBDYW52YXMgPSBvd25lci5jYWNoZWRDYW52YXNlcy5nZXRDYW52YXMoXCJwYXR0ZXJuXCIsIGRpbXguc2l6ZSwgZGlteS5zaXplLCB0cnVlKTtcbiAgICBjb25zdCB0bXBDdHggPSB0bXBDYW52YXMuY29udGV4dDtcbiAgICBjb25zdCBncmFwaGljcyA9IGNhbnZhc0dyYXBoaWNzRmFjdG9yeS5jcmVhdGVDYW52YXNHcmFwaGljcyh0bXBDdHgpO1xuICAgIGdyYXBoaWNzLmdyb3VwTGV2ZWwgPSBvd25lci5ncm91cExldmVsO1xuICAgIHRoaXMuc2V0RmlsbEFuZFN0cm9rZVN0eWxlVG9Db250ZXh0KGdyYXBoaWNzLCBwYWludFR5cGUsIGNvbG9yKTtcbiAgICBsZXQgYWRqdXN0ZWRYMCA9IHgwO1xuICAgIGxldCBhZGp1c3RlZFkwID0geTA7XG4gICAgbGV0IGFkanVzdGVkWDEgPSB4MTtcbiAgICBsZXQgYWRqdXN0ZWRZMSA9IHkxO1xuICAgIGlmICh4MCA8IDApIHtcbiAgICAgIGFkanVzdGVkWDAgPSAwO1xuICAgICAgYWRqdXN0ZWRYMSArPSBNYXRoLmFicyh4MCk7XG4gICAgfVxuICAgIGlmICh5MCA8IDApIHtcbiAgICAgIGFkanVzdGVkWTAgPSAwO1xuICAgICAgYWRqdXN0ZWRZMSArPSBNYXRoLmFicyh5MCk7XG4gICAgfVxuICAgIHRtcEN0eC50cmFuc2xhdGUoLShkaW14LnNjYWxlICogYWRqdXN0ZWRYMCksIC0oZGlteS5zY2FsZSAqIGFkanVzdGVkWTApKTtcbiAgICBncmFwaGljcy50cmFuc2Zvcm0oZGlteC5zY2FsZSwgMCwgMCwgZGlteS5zY2FsZSwgMCwgMCk7XG4gICAgdG1wQ3R4LnNhdmUoKTtcbiAgICB0aGlzLmNsaXBCYm94KGdyYXBoaWNzLCBhZGp1c3RlZFgwLCBhZGp1c3RlZFkwLCBhZGp1c3RlZFgxLCBhZGp1c3RlZFkxKTtcbiAgICBncmFwaGljcy5iYXNlVHJhbnNmb3JtID0gKDAsZGlzcGxheV91dGlscy5nZXRDdXJyZW50VHJhbnNmb3JtKShncmFwaGljcy5jdHgpO1xuICAgIGdyYXBoaWNzLmV4ZWN1dGVPcGVyYXRvckxpc3Qob3BlcmF0b3JMaXN0KTtcbiAgICBncmFwaGljcy5lbmREcmF3aW5nKCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNhbnZhczogdG1wQ2FudmFzLmNhbnZhcyxcbiAgICAgIHNjYWxlWDogZGlteC5zY2FsZSxcbiAgICAgIHNjYWxlWTogZGlteS5zY2FsZSxcbiAgICAgIG9mZnNldFg6IGFkanVzdGVkWDAsXG4gICAgICBvZmZzZXRZOiBhZGp1c3RlZFkwXG4gICAgfTtcbiAgfVxuICBnZXRTaXplQW5kU2NhbGUoc3RlcCwgcmVhbE91dHB1dFNpemUsIHNjYWxlKSB7XG4gICAgc3RlcCA9IE1hdGguYWJzKHN0ZXApO1xuICAgIGNvbnN0IG1heFNpemUgPSBNYXRoLm1heChUaWxpbmdQYXR0ZXJuLk1BWF9QQVRURVJOX1NJWkUsIHJlYWxPdXRwdXRTaXplKTtcbiAgICBsZXQgc2l6ZSA9IE1hdGguY2VpbChzdGVwICogc2NhbGUpO1xuICAgIGlmIChzaXplID49IG1heFNpemUpIHtcbiAgICAgIHNpemUgPSBtYXhTaXplO1xuICAgIH0gZWxzZSB7XG4gICAgICBzY2FsZSA9IHNpemUgLyBzdGVwO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgc2NhbGUsXG4gICAgICBzaXplXG4gICAgfTtcbiAgfVxuICBjbGlwQmJveChncmFwaGljcywgeDAsIHkwLCB4MSwgeTEpIHtcbiAgICBjb25zdCBiYm94V2lkdGggPSB4MSAtIHgwO1xuICAgIGNvbnN0IGJib3hIZWlnaHQgPSB5MSAtIHkwO1xuICAgIGdyYXBoaWNzLmN0eC5yZWN0KHgwLCB5MCwgYmJveFdpZHRoLCBiYm94SGVpZ2h0KTtcbiAgICBncmFwaGljcy5jdXJyZW50LnVwZGF0ZVJlY3RNaW5NYXgoKDAsZGlzcGxheV91dGlscy5nZXRDdXJyZW50VHJhbnNmb3JtKShncmFwaGljcy5jdHgpLCBbeDAsIHkwLCB4MSwgeTFdKTtcbiAgICBncmFwaGljcy5jbGlwKCk7XG4gICAgZ3JhcGhpY3MuZW5kUGF0aCgpO1xuICB9XG4gIHNldEZpbGxBbmRTdHJva2VTdHlsZVRvQ29udGV4dChncmFwaGljcywgcGFpbnRUeXBlLCBjb2xvcikge1xuICAgIGNvbnN0IGNvbnRleHQgPSBncmFwaGljcy5jdHgsXG4gICAgICBjdXJyZW50ID0gZ3JhcGhpY3MuY3VycmVudDtcbiAgICBzd2l0Y2ggKHBhaW50VHlwZSkge1xuICAgICAgY2FzZSBQYWludFR5cGUuQ09MT1JFRDpcbiAgICAgICAgY29uc3QgY3R4ID0gdGhpcy5jdHg7XG4gICAgICAgIGNvbnRleHQuZmlsbFN0eWxlID0gY3R4LmZpbGxTdHlsZTtcbiAgICAgICAgY29udGV4dC5zdHJva2VTdHlsZSA9IGN0eC5zdHJva2VTdHlsZTtcbiAgICAgICAgY3VycmVudC5maWxsQ29sb3IgPSBjdHguZmlsbFN0eWxlO1xuICAgICAgICBjdXJyZW50LnN0cm9rZUNvbG9yID0gY3R4LnN0cm9rZVN0eWxlO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgUGFpbnRUeXBlLlVOQ09MT1JFRDpcbiAgICAgICAgY29uc3QgY3NzQ29sb3IgPSB1dGlsLlV0aWwubWFrZUhleENvbG9yKGNvbG9yWzBdLCBjb2xvclsxXSwgY29sb3JbMl0pO1xuICAgICAgICBjb250ZXh0LmZpbGxTdHlsZSA9IGNzc0NvbG9yO1xuICAgICAgICBjb250ZXh0LnN0cm9rZVN0eWxlID0gY3NzQ29sb3I7XG4gICAgICAgIGN1cnJlbnQuZmlsbENvbG9yID0gY3NzQ29sb3I7XG4gICAgICAgIGN1cnJlbnQuc3Ryb2tlQ29sb3IgPSBjc3NDb2xvcjtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyBuZXcgdXRpbC5Gb3JtYXRFcnJvcihgVW5zdXBwb3J0ZWQgcGFpbnQgdHlwZTogJHtwYWludFR5cGV9YCk7XG4gICAgfVxuICB9XG4gIGdldFBhdHRlcm4oY3R4LCBvd25lciwgaW52ZXJzZSwgcGF0aFR5cGUpIHtcbiAgICBsZXQgbWF0cml4ID0gaW52ZXJzZTtcbiAgICBpZiAocGF0aFR5cGUgIT09IFBhdGhUeXBlLlNIQURJTkcpIHtcbiAgICAgIG1hdHJpeCA9IHV0aWwuVXRpbC50cmFuc2Zvcm0obWF0cml4LCBvd25lci5iYXNlVHJhbnNmb3JtKTtcbiAgICAgIGlmICh0aGlzLm1hdHJpeCkge1xuICAgICAgICBtYXRyaXggPSB1dGlsLlV0aWwudHJhbnNmb3JtKG1hdHJpeCwgdGhpcy5tYXRyaXgpO1xuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCB0ZW1wb3JhcnlQYXR0ZXJuQ2FudmFzID0gdGhpcy5jcmVhdGVQYXR0ZXJuQ2FudmFzKG93bmVyKTtcbiAgICBsZXQgZG9tTWF0cml4ID0gbmV3IERPTU1hdHJpeChtYXRyaXgpO1xuICAgIGRvbU1hdHJpeCA9IGRvbU1hdHJpeC50cmFuc2xhdGUodGVtcG9yYXJ5UGF0dGVybkNhbnZhcy5vZmZzZXRYLCB0ZW1wb3JhcnlQYXR0ZXJuQ2FudmFzLm9mZnNldFkpO1xuICAgIGRvbU1hdHJpeCA9IGRvbU1hdHJpeC5zY2FsZSgxIC8gdGVtcG9yYXJ5UGF0dGVybkNhbnZhcy5zY2FsZVgsIDEgLyB0ZW1wb3JhcnlQYXR0ZXJuQ2FudmFzLnNjYWxlWSk7XG4gICAgY29uc3QgcGF0dGVybiA9IGN0eC5jcmVhdGVQYXR0ZXJuKHRlbXBvcmFyeVBhdHRlcm5DYW52YXMuY2FudmFzLCBcInJlcGVhdFwiKTtcbiAgICBwYXR0ZXJuLnNldFRyYW5zZm9ybShkb21NYXRyaXgpO1xuICAgIHJldHVybiBwYXR0ZXJuO1xuICB9XG59XG5cbjsvLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9zaGFyZWQvaW1hZ2VfdXRpbHMuanNcblxuZnVuY3Rpb24gY29udmVydFRvUkdCQShwYXJhbXMpIHtcbiAgc3dpdGNoIChwYXJhbXMua2luZCkge1xuICAgIGNhc2UgSW1hZ2VLaW5kLkdSQVlTQ0FMRV8xQlBQOlxuICAgICAgcmV0dXJuIGNvbnZlcnRCbGFja0FuZFdoaXRlVG9SR0JBKHBhcmFtcyk7XG4gICAgY2FzZSBJbWFnZUtpbmQuUkdCXzI0QlBQOlxuICAgICAgcmV0dXJuIGNvbnZlcnRSR0JUb1JHQkEocGFyYW1zKTtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cbmZ1bmN0aW9uIGNvbnZlcnRCbGFja0FuZFdoaXRlVG9SR0JBKHtcbiAgc3JjLFxuICBzcmNQb3MgPSAwLFxuICBkZXN0LFxuICB3aWR0aCxcbiAgaGVpZ2h0LFxuICBub25CbGFja0NvbG9yID0gMHhmZmZmZmZmZixcbiAgaW52ZXJzZURlY29kZSA9IGZhbHNlXG59KSB7XG4gIGNvbnN0IGJsYWNrID0gdXRpbC5GZWF0dXJlVGVzdC5pc0xpdHRsZUVuZGlhbiA/IDB4ZmYwMDAwMDAgOiAweDAwMDAwMGZmO1xuICBjb25zdCBbemVyb01hcHBpbmcsIG9uZU1hcHBpbmddID0gaW52ZXJzZURlY29kZSA/IFtub25CbGFja0NvbG9yLCBibGFja10gOiBbYmxhY2ssIG5vbkJsYWNrQ29sb3JdO1xuICBjb25zdCB3aWR0aEluU291cmNlID0gd2lkdGggPj4gMztcbiAgY29uc3Qgd2lkdGhSZW1haW5kZXIgPSB3aWR0aCAmIDc7XG4gIGNvbnN0IHNyY0xlbmd0aCA9IHNyYy5sZW5ndGg7XG4gIGRlc3QgPSBuZXcgVWludDMyQXJyYXkoZGVzdC5idWZmZXIpO1xuICBsZXQgZGVzdFBvcyA9IDA7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgaGVpZ2h0OyBpKyspIHtcbiAgICBmb3IgKGNvbnN0IG1heCA9IHNyY1BvcyArIHdpZHRoSW5Tb3VyY2U7IHNyY1BvcyA8IG1heDsgc3JjUG9zKyspIHtcbiAgICAgIGNvbnN0IGVsZW0gPSBzcmNQb3MgPCBzcmNMZW5ndGggPyBzcmNbc3JjUG9zXSA6IDI1NTtcbiAgICAgIGRlc3RbZGVzdFBvcysrXSA9IGVsZW0gJiAwYjEwMDAwMDAwID8gb25lTWFwcGluZyA6IHplcm9NYXBwaW5nO1xuICAgICAgZGVzdFtkZXN0UG9zKytdID0gZWxlbSAmIDBiMTAwMDAwMCA/IG9uZU1hcHBpbmcgOiB6ZXJvTWFwcGluZztcbiAgICAgIGRlc3RbZGVzdFBvcysrXSA9IGVsZW0gJiAwYjEwMDAwMCA/IG9uZU1hcHBpbmcgOiB6ZXJvTWFwcGluZztcbiAgICAgIGRlc3RbZGVzdFBvcysrXSA9IGVsZW0gJiAwYjEwMDAwID8gb25lTWFwcGluZyA6IHplcm9NYXBwaW5nO1xuICAgICAgZGVzdFtkZXN0UG9zKytdID0gZWxlbSAmIDBiMTAwMCA/IG9uZU1hcHBpbmcgOiB6ZXJvTWFwcGluZztcbiAgICAgIGRlc3RbZGVzdFBvcysrXSA9IGVsZW0gJiAwYjEwMCA/IG9uZU1hcHBpbmcgOiB6ZXJvTWFwcGluZztcbiAgICAgIGRlc3RbZGVzdFBvcysrXSA9IGVsZW0gJiAwYjEwID8gb25lTWFwcGluZyA6IHplcm9NYXBwaW5nO1xuICAgICAgZGVzdFtkZXN0UG9zKytdID0gZWxlbSAmIDBiMSA/IG9uZU1hcHBpbmcgOiB6ZXJvTWFwcGluZztcbiAgICB9XG4gICAgaWYgKHdpZHRoUmVtYWluZGVyID09PSAwKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgY29uc3QgZWxlbSA9IHNyY1BvcyA8IHNyY0xlbmd0aCA/IHNyY1tzcmNQb3MrK10gOiAyNTU7XG4gICAgZm9yIChsZXQgaiA9IDA7IGogPCB3aWR0aFJlbWFpbmRlcjsgaisrKSB7XG4gICAgICBkZXN0W2Rlc3RQb3MrK10gPSBlbGVtICYgMSA8PCA3IC0gaiA/IG9uZU1hcHBpbmcgOiB6ZXJvTWFwcGluZztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBzcmNQb3MsXG4gICAgZGVzdFBvc1xuICB9O1xufVxuZnVuY3Rpb24gY29udmVydFJHQlRvUkdCQSh7XG4gIHNyYyxcbiAgc3JjUG9zID0gMCxcbiAgZGVzdCxcbiAgZGVzdFBvcyA9IDAsXG4gIHdpZHRoLFxuICBoZWlnaHRcbn0pIHtcbiAgbGV0IGkgPSAwO1xuICBjb25zdCBsZW4zMiA9IHNyYy5sZW5ndGggPj4gMjtcbiAgY29uc3Qgc3JjMzIgPSBuZXcgVWludDMyQXJyYXkoc3JjLmJ1ZmZlciwgc3JjUG9zLCBsZW4zMik7XG4gIGlmIChGZWF0dXJlVGVzdC5pc0xpdHRsZUVuZGlhbikge1xuICAgIGZvciAoOyBpIDwgbGVuMzIgLSAyOyBpICs9IDMsIGRlc3RQb3MgKz0gNCkge1xuICAgICAgY29uc3QgczEgPSBzcmMzMltpXTtcbiAgICAgIGNvbnN0IHMyID0gc3JjMzJbaSArIDFdO1xuICAgICAgY29uc3QgczMgPSBzcmMzMltpICsgMl07XG4gICAgICBkZXN0W2Rlc3RQb3NdID0gczEgfCAweGZmMDAwMDAwO1xuICAgICAgZGVzdFtkZXN0UG9zICsgMV0gPSBzMSA+Pj4gMjQgfCBzMiA8PCA4IHwgMHhmZjAwMDAwMDtcbiAgICAgIGRlc3RbZGVzdFBvcyArIDJdID0gczIgPj4+IDE2IHwgczMgPDwgMTYgfCAweGZmMDAwMDAwO1xuICAgICAgZGVzdFtkZXN0UG9zICsgM10gPSBzMyA+Pj4gOCB8IDB4ZmYwMDAwMDA7XG4gICAgfVxuICAgIGZvciAobGV0IGogPSBpICogNCwgamogPSBzcmMubGVuZ3RoOyBqIDwgamo7IGogKz0gMykge1xuICAgICAgZGVzdFtkZXN0UG9zKytdID0gc3JjW2pdIHwgc3JjW2ogKyAxXSA8PCA4IHwgc3JjW2ogKyAyXSA8PCAxNiB8IDB4ZmYwMDAwMDA7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGZvciAoOyBpIDwgbGVuMzIgLSAyOyBpICs9IDMsIGRlc3RQb3MgKz0gNCkge1xuICAgICAgY29uc3QgczEgPSBzcmMzMltpXTtcbiAgICAgIGNvbnN0IHMyID0gc3JjMzJbaSArIDFdO1xuICAgICAgY29uc3QgczMgPSBzcmMzMltpICsgMl07XG4gICAgICBkZXN0W2Rlc3RQb3NdID0gczEgfCAweGZmO1xuICAgICAgZGVzdFtkZXN0UG9zICsgMV0gPSBzMSA8PCAyNCB8IHMyID4+PiA4IHwgMHhmZjtcbiAgICAgIGRlc3RbZGVzdFBvcyArIDJdID0gczIgPDwgMTYgfCBzMyA+Pj4gMTYgfCAweGZmO1xuICAgICAgZGVzdFtkZXN0UG9zICsgM10gPSBzMyA8PCA4IHwgMHhmZjtcbiAgICB9XG4gICAgZm9yIChsZXQgaiA9IGkgKiA0LCBqaiA9IHNyYy5sZW5ndGg7IGogPCBqajsgaiArPSAzKSB7XG4gICAgICBkZXN0W2Rlc3RQb3MrK10gPSBzcmNbal0gPDwgMjQgfCBzcmNbaiArIDFdIDw8IDE2IHwgc3JjW2ogKyAyXSA8PCA4IHwgMHhmZjtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBzcmNQb3MsXG4gICAgZGVzdFBvc1xuICB9O1xufVxuZnVuY3Rpb24gZ3JheVRvUkdCQShzcmMsIGRlc3QpIHtcbiAgaWYgKEZlYXR1cmVUZXN0LmlzTGl0dGxlRW5kaWFuKSB7XG4gICAgZm9yIChsZXQgaSA9IDAsIGlpID0gc3JjLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgIGRlc3RbaV0gPSBzcmNbaV0gKiAweDEwMTAxIHwgMHhmZjAwMDAwMDtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgZm9yIChsZXQgaSA9IDAsIGlpID0gc3JjLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgIGRlc3RbaV0gPSBzcmNbaV0gKiAweDEwMTAxMDAgfCAweDAwMDAwMGZmO1xuICAgIH1cbiAgfVxufVxuXG47Ly8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvZGlzcGxheS9jYW52YXMuanNcblxuXG5cblxuY29uc3QgTUlOX0ZPTlRfU0laRSA9IDE2O1xuY29uc3QgTUFYX0ZPTlRfU0laRSA9IDEwMDtcbmNvbnN0IE1BWF9HUk9VUF9TSVpFID0gNDA5NjtcbmNvbnN0IEVYRUNVVElPTl9USU1FID0gMTU7XG5jb25zdCBFWEVDVVRJT05fU1RFUFMgPSAxMDtcbmNvbnN0IE1BWF9TSVpFX1RPX0NPTVBJTEUgPSAxMDAwO1xuY29uc3QgRlVMTF9DSFVOS19IRUlHSFQgPSAxNjtcbmZ1bmN0aW9uIG1pcnJvckNvbnRleHRPcGVyYXRpb25zKGN0eCwgZGVzdEN0eCkge1xuICBpZiAoY3R4Ll9yZW1vdmVNaXJyb3JpbmcpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb250ZXh0IGlzIGFscmVhZHkgZm9yd2FyZGluZyBvcGVyYXRpb25zLlwiKTtcbiAgfVxuICBjdHguX19vcmlnaW5hbFNhdmUgPSBjdHguc2F2ZTtcbiAgY3R4Ll9fb3JpZ2luYWxSZXN0b3JlID0gY3R4LnJlc3RvcmU7XG4gIGN0eC5fX29yaWdpbmFsUm90YXRlID0gY3R4LnJvdGF0ZTtcbiAgY3R4Ll9fb3JpZ2luYWxTY2FsZSA9IGN0eC5zY2FsZTtcbiAgY3R4Ll9fb3JpZ2luYWxUcmFuc2xhdGUgPSBjdHgudHJhbnNsYXRlO1xuICBjdHguX19vcmlnaW5hbFRyYW5zZm9ybSA9IGN0eC50cmFuc2Zvcm07XG4gIGN0eC5fX29yaWdpbmFsU2V0VHJhbnNmb3JtID0gY3R4LnNldFRyYW5zZm9ybTtcbiAgY3R4Ll9fb3JpZ2luYWxSZXNldFRyYW5zZm9ybSA9IGN0eC5yZXNldFRyYW5zZm9ybTtcbiAgY3R4Ll9fb3JpZ2luYWxDbGlwID0gY3R4LmNsaXA7XG4gIGN0eC5fX29yaWdpbmFsTW92ZVRvID0gY3R4Lm1vdmVUbztcbiAgY3R4Ll9fb3JpZ2luYWxMaW5lVG8gPSBjdHgubGluZVRvO1xuICBjdHguX19vcmlnaW5hbEJlemllckN1cnZlVG8gPSBjdHguYmV6aWVyQ3VydmVUbztcbiAgY3R4Ll9fb3JpZ2luYWxSZWN0ID0gY3R4LnJlY3Q7XG4gIGN0eC5fX29yaWdpbmFsQ2xvc2VQYXRoID0gY3R4LmNsb3NlUGF0aDtcbiAgY3R4Ll9fb3JpZ2luYWxCZWdpblBhdGggPSBjdHguYmVnaW5QYXRoO1xuICBjdHguX3JlbW92ZU1pcnJvcmluZyA9ICgpID0+IHtcbiAgICBjdHguc2F2ZSA9IGN0eC5fX29yaWdpbmFsU2F2ZTtcbiAgICBjdHgucmVzdG9yZSA9IGN0eC5fX29yaWdpbmFsUmVzdG9yZTtcbiAgICBjdHgucm90YXRlID0gY3R4Ll9fb3JpZ2luYWxSb3RhdGU7XG4gICAgY3R4LnNjYWxlID0gY3R4Ll9fb3JpZ2luYWxTY2FsZTtcbiAgICBjdHgudHJhbnNsYXRlID0gY3R4Ll9fb3JpZ2luYWxUcmFuc2xhdGU7XG4gICAgY3R4LnRyYW5zZm9ybSA9IGN0eC5fX29yaWdpbmFsVHJhbnNmb3JtO1xuICAgIGN0eC5zZXRUcmFuc2Zvcm0gPSBjdHguX19vcmlnaW5hbFNldFRyYW5zZm9ybTtcbiAgICBjdHgucmVzZXRUcmFuc2Zvcm0gPSBjdHguX19vcmlnaW5hbFJlc2V0VHJhbnNmb3JtO1xuICAgIGN0eC5jbGlwID0gY3R4Ll9fb3JpZ2luYWxDbGlwO1xuICAgIGN0eC5tb3ZlVG8gPSBjdHguX19vcmlnaW5hbE1vdmVUbztcbiAgICBjdHgubGluZVRvID0gY3R4Ll9fb3JpZ2luYWxMaW5lVG87XG4gICAgY3R4LmJlemllckN1cnZlVG8gPSBjdHguX19vcmlnaW5hbEJlemllckN1cnZlVG87XG4gICAgY3R4LnJlY3QgPSBjdHguX19vcmlnaW5hbFJlY3Q7XG4gICAgY3R4LmNsb3NlUGF0aCA9IGN0eC5fX29yaWdpbmFsQ2xvc2VQYXRoO1xuICAgIGN0eC5iZWdpblBhdGggPSBjdHguX19vcmlnaW5hbEJlZ2luUGF0aDtcbiAgICBkZWxldGUgY3R4Ll9yZW1vdmVNaXJyb3Jpbmc7XG4gIH07XG4gIGN0eC5zYXZlID0gZnVuY3Rpb24gY3R4U2F2ZSgpIHtcbiAgICBkZXN0Q3R4LnNhdmUoKTtcbiAgICB0aGlzLl9fb3JpZ2luYWxTYXZlKCk7XG4gIH07XG4gIGN0eC5yZXN0b3JlID0gZnVuY3Rpb24gY3R4UmVzdG9yZSgpIHtcbiAgICBkZXN0Q3R4LnJlc3RvcmUoKTtcbiAgICB0aGlzLl9fb3JpZ2luYWxSZXN0b3JlKCk7XG4gIH07XG4gIGN0eC50cmFuc2xhdGUgPSBmdW5jdGlvbiBjdHhUcmFuc2xhdGUoeCwgeSkge1xuICAgIGRlc3RDdHgudHJhbnNsYXRlKHgsIHkpO1xuICAgIHRoaXMuX19vcmlnaW5hbFRyYW5zbGF0ZSh4LCB5KTtcbiAgfTtcbiAgY3R4LnNjYWxlID0gZnVuY3Rpb24gY3R4U2NhbGUoeCwgeSkge1xuICAgIGRlc3RDdHguc2NhbGUoeCwgeSk7XG4gICAgdGhpcy5fX29yaWdpbmFsU2NhbGUoeCwgeSk7XG4gIH07XG4gIGN0eC50cmFuc2Zvcm0gPSBmdW5jdGlvbiBjdHhUcmFuc2Zvcm0oYSwgYiwgYywgZCwgZSwgZikge1xuICAgIGRlc3RDdHgudHJhbnNmb3JtKGEsIGIsIGMsIGQsIGUsIGYpO1xuICAgIHRoaXMuX19vcmlnaW5hbFRyYW5zZm9ybShhLCBiLCBjLCBkLCBlLCBmKTtcbiAgfTtcbiAgY3R4LnNldFRyYW5zZm9ybSA9IGZ1bmN0aW9uIGN0eFNldFRyYW5zZm9ybShhLCBiLCBjLCBkLCBlLCBmKSB7XG4gICAgZGVzdEN0eC5zZXRUcmFuc2Zvcm0oYSwgYiwgYywgZCwgZSwgZik7XG4gICAgdGhpcy5fX29yaWdpbmFsU2V0VHJhbnNmb3JtKGEsIGIsIGMsIGQsIGUsIGYpO1xuICB9O1xuICBjdHgucmVzZXRUcmFuc2Zvcm0gPSBmdW5jdGlvbiBjdHhSZXNldFRyYW5zZm9ybSgpIHtcbiAgICBkZXN0Q3R4LnJlc2V0VHJhbnNmb3JtKCk7XG4gICAgdGhpcy5fX29yaWdpbmFsUmVzZXRUcmFuc2Zvcm0oKTtcbiAgfTtcbiAgY3R4LnJvdGF0ZSA9IGZ1bmN0aW9uIGN0eFJvdGF0ZShhbmdsZSkge1xuICAgIGRlc3RDdHgucm90YXRlKGFuZ2xlKTtcbiAgICB0aGlzLl9fb3JpZ2luYWxSb3RhdGUoYW5nbGUpO1xuICB9O1xuICBjdHguY2xpcCA9IGZ1bmN0aW9uIGN0eFJvdGF0ZShydWxlKSB7XG4gICAgZGVzdEN0eC5jbGlwKHJ1bGUpO1xuICAgIHRoaXMuX19vcmlnaW5hbENsaXAocnVsZSk7XG4gIH07XG4gIGN0eC5tb3ZlVG8gPSBmdW5jdGlvbiAoeCwgeSkge1xuICAgIGRlc3RDdHgubW92ZVRvKHgsIHkpO1xuICAgIHRoaXMuX19vcmlnaW5hbE1vdmVUbyh4LCB5KTtcbiAgfTtcbiAgY3R4LmxpbmVUbyA9IGZ1bmN0aW9uICh4LCB5KSB7XG4gICAgZGVzdEN0eC5saW5lVG8oeCwgeSk7XG4gICAgdGhpcy5fX29yaWdpbmFsTGluZVRvKHgsIHkpO1xuICB9O1xuICBjdHguYmV6aWVyQ3VydmVUbyA9IGZ1bmN0aW9uIChjcDF4LCBjcDF5LCBjcDJ4LCBjcDJ5LCB4LCB5KSB7XG4gICAgZGVzdEN0eC5iZXppZXJDdXJ2ZVRvKGNwMXgsIGNwMXksIGNwMngsIGNwMnksIHgsIHkpO1xuICAgIHRoaXMuX19vcmlnaW5hbEJlemllckN1cnZlVG8oY3AxeCwgY3AxeSwgY3AyeCwgY3AyeSwgeCwgeSk7XG4gIH07XG4gIGN0eC5yZWN0ID0gZnVuY3Rpb24gKHgsIHksIHdpZHRoLCBoZWlnaHQpIHtcbiAgICBkZXN0Q3R4LnJlY3QoeCwgeSwgd2lkdGgsIGhlaWdodCk7XG4gICAgdGhpcy5fX29yaWdpbmFsUmVjdCh4LCB5LCB3aWR0aCwgaGVpZ2h0KTtcbiAgfTtcbiAgY3R4LmNsb3NlUGF0aCA9IGZ1bmN0aW9uICgpIHtcbiAgICBkZXN0Q3R4LmNsb3NlUGF0aCgpO1xuICAgIHRoaXMuX19vcmlnaW5hbENsb3NlUGF0aCgpO1xuICB9O1xuICBjdHguYmVnaW5QYXRoID0gZnVuY3Rpb24gKCkge1xuICAgIGRlc3RDdHguYmVnaW5QYXRoKCk7XG4gICAgdGhpcy5fX29yaWdpbmFsQmVnaW5QYXRoKCk7XG4gIH07XG59XG5jbGFzcyBDYWNoZWRDYW52YXNlcyB7XG4gIGNvbnN0cnVjdG9yKGNhbnZhc0ZhY3RvcnkpIHtcbiAgICB0aGlzLmNhbnZhc0ZhY3RvcnkgPSBjYW52YXNGYWN0b3J5O1xuICAgIHRoaXMuY2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB9XG4gIGdldENhbnZhcyhpZCwgd2lkdGgsIGhlaWdodCkge1xuICAgIGxldCBjYW52YXNFbnRyeTtcbiAgICBpZiAodGhpcy5jYWNoZVtpZF0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgY2FudmFzRW50cnkgPSB0aGlzLmNhY2hlW2lkXTtcbiAgICAgIHRoaXMuY2FudmFzRmFjdG9yeS5yZXNldChjYW52YXNFbnRyeSwgd2lkdGgsIGhlaWdodCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNhbnZhc0VudHJ5ID0gdGhpcy5jYW52YXNGYWN0b3J5LmNyZWF0ZSh3aWR0aCwgaGVpZ2h0KTtcbiAgICAgIHRoaXMuY2FjaGVbaWRdID0gY2FudmFzRW50cnk7XG4gICAgfVxuICAgIHJldHVybiBjYW52YXNFbnRyeTtcbiAgfVxuICBkZWxldGUoaWQpIHtcbiAgICBkZWxldGUgdGhpcy5jYWNoZVtpZF07XG4gIH1cbiAgY2xlYXIoKSB7XG4gICAgZm9yIChjb25zdCBpZCBpbiB0aGlzLmNhY2hlKSB7XG4gICAgICBjb25zdCBjYW52YXNFbnRyeSA9IHRoaXMuY2FjaGVbaWRdO1xuICAgICAgdGhpcy5jYW52YXNGYWN0b3J5LmRlc3Ryb3koY2FudmFzRW50cnkpO1xuICAgICAgZGVsZXRlIHRoaXMuY2FjaGVbaWRdO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gZHJhd0ltYWdlQXRJbnRlZ2VyQ29vcmRzKGN0eCwgc3JjSW1nLCBzcmNYLCBzcmNZLCBzcmNXLCBzcmNILCBkZXN0WCwgZGVzdFksIGRlc3RXLCBkZXN0SCkge1xuICBjb25zdCBbYSwgYiwgYywgZCwgdHgsIHR5XSA9ICgwLGRpc3BsYXlfdXRpbHMuZ2V0Q3VycmVudFRyYW5zZm9ybSkoY3R4KTtcbiAgaWYgKGIgPT09IDAgJiYgYyA9PT0gMCkge1xuICAgIGNvbnN0IHRsWCA9IGRlc3RYICogYSArIHR4O1xuICAgIGNvbnN0IHJUbFggPSBNYXRoLnJvdW5kKHRsWCk7XG4gICAgY29uc3QgdGxZID0gZGVzdFkgKiBkICsgdHk7XG4gICAgY29uc3QgclRsWSA9IE1hdGgucm91bmQodGxZKTtcbiAgICBjb25zdCBiclggPSAoZGVzdFggKyBkZXN0VykgKiBhICsgdHg7XG4gICAgY29uc3QgcldpZHRoID0gTWF0aC5hYnMoTWF0aC5yb3VuZChiclgpIC0gclRsWCkgfHwgMTtcbiAgICBjb25zdCBiclkgPSAoZGVzdFkgKyBkZXN0SCkgKiBkICsgdHk7XG4gICAgY29uc3QgckhlaWdodCA9IE1hdGguYWJzKE1hdGgucm91bmQoYnJZKSAtIHJUbFkpIHx8IDE7XG4gICAgY3R4LnNldFRyYW5zZm9ybShNYXRoLnNpZ24oYSksIDAsIDAsIE1hdGguc2lnbihkKSwgclRsWCwgclRsWSk7XG4gICAgY3R4LmRyYXdJbWFnZShzcmNJbWcsIHNyY1gsIHNyY1ksIHNyY1csIHNyY0gsIDAsIDAsIHJXaWR0aCwgckhlaWdodCk7XG4gICAgY3R4LnNldFRyYW5zZm9ybShhLCBiLCBjLCBkLCB0eCwgdHkpO1xuICAgIHJldHVybiBbcldpZHRoLCBySGVpZ2h0XTtcbiAgfVxuICBpZiAoYSA9PT0gMCAmJiBkID09PSAwKSB7XG4gICAgY29uc3QgdGxYID0gZGVzdFkgKiBjICsgdHg7XG4gICAgY29uc3QgclRsWCA9IE1hdGgucm91bmQodGxYKTtcbiAgICBjb25zdCB0bFkgPSBkZXN0WCAqIGIgKyB0eTtcbiAgICBjb25zdCByVGxZID0gTWF0aC5yb3VuZCh0bFkpO1xuICAgIGNvbnN0IGJyWCA9IChkZXN0WSArIGRlc3RIKSAqIGMgKyB0eDtcbiAgICBjb25zdCByV2lkdGggPSBNYXRoLmFicyhNYXRoLnJvdW5kKGJyWCkgLSByVGxYKSB8fCAxO1xuICAgIGNvbnN0IGJyWSA9IChkZXN0WCArIGRlc3RXKSAqIGIgKyB0eTtcbiAgICBjb25zdCBySGVpZ2h0ID0gTWF0aC5hYnMoTWF0aC5yb3VuZChiclkpIC0gclRsWSkgfHwgMTtcbiAgICBjdHguc2V0VHJhbnNmb3JtKDAsIE1hdGguc2lnbihiKSwgTWF0aC5zaWduKGMpLCAwLCByVGxYLCByVGxZKTtcbiAgICBjdHguZHJhd0ltYWdlKHNyY0ltZywgc3JjWCwgc3JjWSwgc3JjVywgc3JjSCwgMCwgMCwgckhlaWdodCwgcldpZHRoKTtcbiAgICBjdHguc2V0VHJhbnNmb3JtKGEsIGIsIGMsIGQsIHR4LCB0eSk7XG4gICAgcmV0dXJuIFtySGVpZ2h0LCByV2lkdGhdO1xuICB9XG4gIGN0eC5kcmF3SW1hZ2Uoc3JjSW1nLCBzcmNYLCBzcmNZLCBzcmNXLCBzcmNILCBkZXN0WCwgZGVzdFksIGRlc3RXLCBkZXN0SCk7XG4gIGNvbnN0IHNjYWxlWCA9IE1hdGguaHlwb3QoYSwgYik7XG4gIGNvbnN0IHNjYWxlWSA9IE1hdGguaHlwb3QoYywgZCk7XG4gIHJldHVybiBbc2NhbGVYICogZGVzdFcsIHNjYWxlWSAqIGRlc3RIXTtcbn1cbmZ1bmN0aW9uIGNvbXBpbGVUeXBlM0dseXBoKGltZ0RhdGEpIHtcbiAgY29uc3Qge1xuICAgIHdpZHRoLFxuICAgIGhlaWdodFxuICB9ID0gaW1nRGF0YTtcbiAgaWYgKHdpZHRoID4gTUFYX1NJWkVfVE9fQ09NUElMRSB8fCBoZWlnaHQgPiBNQVhfU0laRV9UT19DT01QSUxFKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgY29uc3QgUE9JTlRfVE9fUFJPQ0VTU19MSU1JVCA9IDEwMDA7XG4gIGNvbnN0IFBPSU5UX1RZUEVTID0gbmV3IFVpbnQ4QXJyYXkoWzAsIDIsIDQsIDAsIDEsIDAsIDUsIDQsIDgsIDEwLCAwLCA4LCAwLCAyLCAxLCAwXSk7XG4gIGNvbnN0IHdpZHRoMSA9IHdpZHRoICsgMTtcbiAgbGV0IHBvaW50cyA9IG5ldyBVaW50OEFycmF5KHdpZHRoMSAqIChoZWlnaHQgKyAxKSk7XG4gIGxldCBpLCBqLCBqMDtcbiAgY29uc3QgbGluZVNpemUgPSB3aWR0aCArIDcgJiB+NztcbiAgbGV0IGRhdGEgPSBuZXcgVWludDhBcnJheShsaW5lU2l6ZSAqIGhlaWdodCksXG4gICAgcG9zID0gMDtcbiAgZm9yIChjb25zdCBlbGVtIG9mIGltZ0RhdGEuZGF0YSkge1xuICAgIGxldCBtYXNrID0gMTI4O1xuICAgIHdoaWxlIChtYXNrID4gMCkge1xuICAgICAgZGF0YVtwb3MrK10gPSBlbGVtICYgbWFzayA/IDAgOiAyNTU7XG4gICAgICBtYXNrID4+PSAxO1xuICAgIH1cbiAgfVxuICBsZXQgY291bnQgPSAwO1xuICBwb3MgPSAwO1xuICBpZiAoZGF0YVtwb3NdICE9PSAwKSB7XG4gICAgcG9pbnRzWzBdID0gMTtcbiAgICArK2NvdW50O1xuICB9XG4gIGZvciAoaiA9IDE7IGogPCB3aWR0aDsgaisrKSB7XG4gICAgaWYgKGRhdGFbcG9zXSAhPT0gZGF0YVtwb3MgKyAxXSkge1xuICAgICAgcG9pbnRzW2pdID0gZGF0YVtwb3NdID8gMiA6IDE7XG4gICAgICArK2NvdW50O1xuICAgIH1cbiAgICBwb3MrKztcbiAgfVxuICBpZiAoZGF0YVtwb3NdICE9PSAwKSB7XG4gICAgcG9pbnRzW2pdID0gMjtcbiAgICArK2NvdW50O1xuICB9XG4gIGZvciAoaSA9IDE7IGkgPCBoZWlnaHQ7IGkrKykge1xuICAgIHBvcyA9IGkgKiBsaW5lU2l6ZTtcbiAgICBqMCA9IGkgKiB3aWR0aDE7XG4gICAgaWYgKGRhdGFbcG9zIC0gbGluZVNpemVdICE9PSBkYXRhW3Bvc10pIHtcbiAgICAgIHBvaW50c1tqMF0gPSBkYXRhW3Bvc10gPyAxIDogODtcbiAgICAgICsrY291bnQ7XG4gICAgfVxuICAgIGxldCBzdW0gPSAoZGF0YVtwb3NdID8gNCA6IDApICsgKGRhdGFbcG9zIC0gbGluZVNpemVdID8gOCA6IDApO1xuICAgIGZvciAoaiA9IDE7IGogPCB3aWR0aDsgaisrKSB7XG4gICAgICBzdW0gPSAoc3VtID4+IDIpICsgKGRhdGFbcG9zICsgMV0gPyA0IDogMCkgKyAoZGF0YVtwb3MgLSBsaW5lU2l6ZSArIDFdID8gOCA6IDApO1xuICAgICAgaWYgKFBPSU5UX1RZUEVTW3N1bV0pIHtcbiAgICAgICAgcG9pbnRzW2owICsgal0gPSBQT0lOVF9UWVBFU1tzdW1dO1xuICAgICAgICArK2NvdW50O1xuICAgICAgfVxuICAgICAgcG9zKys7XG4gICAgfVxuICAgIGlmIChkYXRhW3BvcyAtIGxpbmVTaXplXSAhPT0gZGF0YVtwb3NdKSB7XG4gICAgICBwb2ludHNbajAgKyBqXSA9IGRhdGFbcG9zXSA/IDIgOiA0O1xuICAgICAgKytjb3VudDtcbiAgICB9XG4gICAgaWYgKGNvdW50ID4gUE9JTlRfVE9fUFJPQ0VTU19MSU1JVCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XG4gIHBvcyA9IGxpbmVTaXplICogKGhlaWdodCAtIDEpO1xuICBqMCA9IGkgKiB3aWR0aDE7XG4gIGlmIChkYXRhW3Bvc10gIT09IDApIHtcbiAgICBwb2ludHNbajBdID0gODtcbiAgICArK2NvdW50O1xuICB9XG4gIGZvciAoaiA9IDE7IGogPCB3aWR0aDsgaisrKSB7XG4gICAgaWYgKGRhdGFbcG9zXSAhPT0gZGF0YVtwb3MgKyAxXSkge1xuICAgICAgcG9pbnRzW2owICsgal0gPSBkYXRhW3Bvc10gPyA0IDogODtcbiAgICAgICsrY291bnQ7XG4gICAgfVxuICAgIHBvcysrO1xuICB9XG4gIGlmIChkYXRhW3Bvc10gIT09IDApIHtcbiAgICBwb2ludHNbajAgKyBqXSA9IDQ7XG4gICAgKytjb3VudDtcbiAgfVxuICBpZiAoY291bnQgPiBQT0lOVF9UT19QUk9DRVNTX0xJTUlUKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgY29uc3Qgc3RlcHMgPSBuZXcgSW50MzJBcnJheShbMCwgd2lkdGgxLCAtMSwgMCwgLXdpZHRoMSwgMCwgMCwgMCwgMV0pO1xuICBjb25zdCBwYXRoID0gbmV3IFBhdGgyRCgpO1xuICBmb3IgKGkgPSAwOyBjb3VudCAmJiBpIDw9IGhlaWdodDsgaSsrKSB7XG4gICAgbGV0IHAgPSBpICogd2lkdGgxO1xuICAgIGNvbnN0IGVuZCA9IHAgKyB3aWR0aDtcbiAgICB3aGlsZSAocCA8IGVuZCAmJiAhcG9pbnRzW3BdKSB7XG4gICAgICBwKys7XG4gICAgfVxuICAgIGlmIChwID09PSBlbmQpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBwYXRoLm1vdmVUbyhwICUgd2lkdGgxLCBpKTtcbiAgICBjb25zdCBwMCA9IHA7XG4gICAgbGV0IHR5cGUgPSBwb2ludHNbcF07XG4gICAgZG8ge1xuICAgICAgY29uc3Qgc3RlcCA9IHN0ZXBzW3R5cGVdO1xuICAgICAgZG8ge1xuICAgICAgICBwICs9IHN0ZXA7XG4gICAgICB9IHdoaWxlICghcG9pbnRzW3BdKTtcbiAgICAgIGNvbnN0IHBwID0gcG9pbnRzW3BdO1xuICAgICAgaWYgKHBwICE9PSA1ICYmIHBwICE9PSAxMCkge1xuICAgICAgICB0eXBlID0gcHA7XG4gICAgICAgIHBvaW50c1twXSA9IDA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0eXBlID0gcHAgJiAweDMzICogdHlwZSA+PiA0O1xuICAgICAgICBwb2ludHNbcF0gJj0gdHlwZSA+PiAyIHwgdHlwZSA8PCAyO1xuICAgICAgfVxuICAgICAgcGF0aC5saW5lVG8ocCAlIHdpZHRoMSwgcCAvIHdpZHRoMSB8IDApO1xuICAgICAgaWYgKCFwb2ludHNbcF0pIHtcbiAgICAgICAgLS1jb3VudDtcbiAgICAgIH1cbiAgICB9IHdoaWxlIChwMCAhPT0gcCk7XG4gICAgLS1pO1xuICB9XG4gIGRhdGEgPSBudWxsO1xuICBwb2ludHMgPSBudWxsO1xuICBjb25zdCBkcmF3T3V0bGluZSA9IGZ1bmN0aW9uIChjKSB7XG4gICAgYy5zYXZlKCk7XG4gICAgYy5zY2FsZSgxIC8gd2lkdGgsIC0xIC8gaGVpZ2h0KTtcbiAgICBjLnRyYW5zbGF0ZSgwLCAtaGVpZ2h0KTtcbiAgICBjLmZpbGwocGF0aCk7XG4gICAgYy5iZWdpblBhdGgoKTtcbiAgICBjLnJlc3RvcmUoKTtcbiAgfTtcbiAgcmV0dXJuIGRyYXdPdXRsaW5lO1xufVxuY2xhc3MgQ2FudmFzRXh0cmFTdGF0ZSB7XG4gIGNvbnN0cnVjdG9yKHdpZHRoLCBoZWlnaHQpIHtcbiAgICB0aGlzLmFscGhhSXNTaGFwZSA9IGZhbHNlO1xuICAgIHRoaXMuZm9udFNpemUgPSAwO1xuICAgIHRoaXMuZm9udFNpemVTY2FsZSA9IDE7XG4gICAgdGhpcy50ZXh0TWF0cml4ID0gdXRpbC5JREVOVElUWV9NQVRSSVg7XG4gICAgdGhpcy50ZXh0TWF0cml4U2NhbGUgPSAxO1xuICAgIHRoaXMuZm9udE1hdHJpeCA9IHV0aWwuRk9OVF9JREVOVElUWV9NQVRSSVg7XG4gICAgdGhpcy5sZWFkaW5nID0gMDtcbiAgICB0aGlzLnggPSAwO1xuICAgIHRoaXMueSA9IDA7XG4gICAgdGhpcy5saW5lWCA9IDA7XG4gICAgdGhpcy5saW5lWSA9IDA7XG4gICAgdGhpcy5jaGFyU3BhY2luZyA9IDA7XG4gICAgdGhpcy53b3JkU3BhY2luZyA9IDA7XG4gICAgdGhpcy50ZXh0SFNjYWxlID0gMTtcbiAgICB0aGlzLnRleHRSZW5kZXJpbmdNb2RlID0gdXRpbC5UZXh0UmVuZGVyaW5nTW9kZS5GSUxMO1xuICAgIHRoaXMudGV4dFJpc2UgPSAwO1xuICAgIHRoaXMuZmlsbENvbG9yID0gXCIjMDAwMDAwXCI7XG4gICAgdGhpcy5zdHJva2VDb2xvciA9IFwiIzAwMDAwMFwiO1xuICAgIHRoaXMucGF0dGVybkZpbGwgPSBmYWxzZTtcbiAgICB0aGlzLmZpbGxBbHBoYSA9IDE7XG4gICAgdGhpcy5zdHJva2VBbHBoYSA9IDE7XG4gICAgdGhpcy5saW5lV2lkdGggPSAxO1xuICAgIHRoaXMuYWN0aXZlU01hc2sgPSBudWxsO1xuICAgIHRoaXMudHJhbnNmZXJNYXBzID0gXCJub25lXCI7XG4gICAgdGhpcy5zdGFydE5ld1BhdGhBbmRDbGlwQm94KFswLCAwLCB3aWR0aCwgaGVpZ2h0XSk7XG4gIH1cbiAgY2xvbmUoKSB7XG4gICAgY29uc3QgY2xvbmUgPSBPYmplY3QuY3JlYXRlKHRoaXMpO1xuICAgIGNsb25lLmNsaXBCb3ggPSB0aGlzLmNsaXBCb3guc2xpY2UoKTtcbiAgICByZXR1cm4gY2xvbmU7XG4gIH1cbiAgc2V0Q3VycmVudFBvaW50KHgsIHkpIHtcbiAgICB0aGlzLnggPSB4O1xuICAgIHRoaXMueSA9IHk7XG4gIH1cbiAgdXBkYXRlUGF0aE1pbk1heCh0cmFuc2Zvcm0sIHgsIHkpIHtcbiAgICBbeCwgeV0gPSB1dGlsLlV0aWwuYXBwbHlUcmFuc2Zvcm0oW3gsIHldLCB0cmFuc2Zvcm0pO1xuICAgIHRoaXMubWluWCA9IE1hdGgubWluKHRoaXMubWluWCwgeCk7XG4gICAgdGhpcy5taW5ZID0gTWF0aC5taW4odGhpcy5taW5ZLCB5KTtcbiAgICB0aGlzLm1heFggPSBNYXRoLm1heCh0aGlzLm1heFgsIHgpO1xuICAgIHRoaXMubWF4WSA9IE1hdGgubWF4KHRoaXMubWF4WSwgeSk7XG4gIH1cbiAgdXBkYXRlUmVjdE1pbk1heCh0cmFuc2Zvcm0sIHJlY3QpIHtcbiAgICBjb25zdCBwMSA9IHV0aWwuVXRpbC5hcHBseVRyYW5zZm9ybShyZWN0LCB0cmFuc2Zvcm0pO1xuICAgIGNvbnN0IHAyID0gdXRpbC5VdGlsLmFwcGx5VHJhbnNmb3JtKHJlY3Quc2xpY2UoMiksIHRyYW5zZm9ybSk7XG4gICAgY29uc3QgcDMgPSB1dGlsLlV0aWwuYXBwbHlUcmFuc2Zvcm0oW3JlY3RbMF0sIHJlY3RbM11dLCB0cmFuc2Zvcm0pO1xuICAgIGNvbnN0IHA0ID0gdXRpbC5VdGlsLmFwcGx5VHJhbnNmb3JtKFtyZWN0WzJdLCByZWN0WzFdXSwgdHJhbnNmb3JtKTtcbiAgICB0aGlzLm1pblggPSBNYXRoLm1pbih0aGlzLm1pblgsIHAxWzBdLCBwMlswXSwgcDNbMF0sIHA0WzBdKTtcbiAgICB0aGlzLm1pblkgPSBNYXRoLm1pbih0aGlzLm1pblksIHAxWzFdLCBwMlsxXSwgcDNbMV0sIHA0WzFdKTtcbiAgICB0aGlzLm1heFggPSBNYXRoLm1heCh0aGlzLm1heFgsIHAxWzBdLCBwMlswXSwgcDNbMF0sIHA0WzBdKTtcbiAgICB0aGlzLm1heFkgPSBNYXRoLm1heCh0aGlzLm1heFksIHAxWzFdLCBwMlsxXSwgcDNbMV0sIHA0WzFdKTtcbiAgfVxuICB1cGRhdGVTY2FsaW5nUGF0aE1pbk1heCh0cmFuc2Zvcm0sIG1pbk1heCkge1xuICAgIHV0aWwuVXRpbC5zY2FsZU1pbk1heCh0cmFuc2Zvcm0sIG1pbk1heCk7XG4gICAgdGhpcy5taW5YID0gTWF0aC5taW4odGhpcy5taW5YLCBtaW5NYXhbMF0pO1xuICAgIHRoaXMubWF4WCA9IE1hdGgubWF4KHRoaXMubWF4WCwgbWluTWF4WzFdKTtcbiAgICB0aGlzLm1pblkgPSBNYXRoLm1pbih0aGlzLm1pblksIG1pbk1heFsyXSk7XG4gICAgdGhpcy5tYXhZID0gTWF0aC5tYXgodGhpcy5tYXhZLCBtaW5NYXhbM10pO1xuICB9XG4gIHVwZGF0ZUN1cnZlUGF0aE1pbk1heCh0cmFuc2Zvcm0sIHgwLCB5MCwgeDEsIHkxLCB4MiwgeTIsIHgzLCB5MywgbWluTWF4KSB7XG4gICAgY29uc3QgYm94ID0gdXRpbC5VdGlsLmJlemllckJvdW5kaW5nQm94KHgwLCB5MCwgeDEsIHkxLCB4MiwgeTIsIHgzLCB5Myk7XG4gICAgaWYgKG1pbk1heCkge1xuICAgICAgbWluTWF4WzBdID0gTWF0aC5taW4obWluTWF4WzBdLCBib3hbMF0sIGJveFsyXSk7XG4gICAgICBtaW5NYXhbMV0gPSBNYXRoLm1heChtaW5NYXhbMV0sIGJveFswXSwgYm94WzJdKTtcbiAgICAgIG1pbk1heFsyXSA9IE1hdGgubWluKG1pbk1heFsyXSwgYm94WzFdLCBib3hbM10pO1xuICAgICAgbWluTWF4WzNdID0gTWF0aC5tYXgobWluTWF4WzNdLCBib3hbMV0sIGJveFszXSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMudXBkYXRlUmVjdE1pbk1heCh0cmFuc2Zvcm0sIGJveCk7XG4gIH1cbiAgZ2V0UGF0aEJvdW5kaW5nQm94KHBhdGhUeXBlID0gUGF0aFR5cGUuRklMTCwgdHJhbnNmb3JtID0gbnVsbCkge1xuICAgIGNvbnN0IGJveCA9IFt0aGlzLm1pblgsIHRoaXMubWluWSwgdGhpcy5tYXhYLCB0aGlzLm1heFldO1xuICAgIGlmIChwYXRoVHlwZSA9PT0gUGF0aFR5cGUuU1RST0tFKSB7XG4gICAgICBpZiAoIXRyYW5zZm9ybSkge1xuICAgICAgICAoMCx1dGlsLnVucmVhY2hhYmxlKShcIlN0cm9rZSBib3VuZGluZyBib3ggbXVzdCBpbmNsdWRlIHRyYW5zZm9ybS5cIik7XG4gICAgICB9XG4gICAgICBjb25zdCBzY2FsZSA9IHV0aWwuVXRpbC5zaW5ndWxhclZhbHVlRGVjb21wb3NlMmRTY2FsZSh0cmFuc2Zvcm0pO1xuICAgICAgY29uc3QgeFN0cm9rZVBhZCA9IHNjYWxlWzBdICogdGhpcy5saW5lV2lkdGggLyAyO1xuICAgICAgY29uc3QgeVN0cm9rZVBhZCA9IHNjYWxlWzFdICogdGhpcy5saW5lV2lkdGggLyAyO1xuICAgICAgYm94WzBdIC09IHhTdHJva2VQYWQ7XG4gICAgICBib3hbMV0gLT0geVN0cm9rZVBhZDtcbiAgICAgIGJveFsyXSArPSB4U3Ryb2tlUGFkO1xuICAgICAgYm94WzNdICs9IHlTdHJva2VQYWQ7XG4gICAgfVxuICAgIHJldHVybiBib3g7XG4gIH1cbiAgdXBkYXRlQ2xpcEZyb21QYXRoKCkge1xuICAgIGNvbnN0IGludGVyc2VjdCA9IHV0aWwuVXRpbC5pbnRlcnNlY3QodGhpcy5jbGlwQm94LCB0aGlzLmdldFBhdGhCb3VuZGluZ0JveCgpKTtcbiAgICB0aGlzLnN0YXJ0TmV3UGF0aEFuZENsaXBCb3goaW50ZXJzZWN0IHx8IFswLCAwLCAwLCAwXSk7XG4gIH1cbiAgaXNFbXB0eUNsaXAoKSB7XG4gICAgcmV0dXJuIHRoaXMubWluWCA9PT0gSW5maW5pdHk7XG4gIH1cbiAgc3RhcnROZXdQYXRoQW5kQ2xpcEJveChib3gpIHtcbiAgICB0aGlzLmNsaXBCb3ggPSBib3g7XG4gICAgdGhpcy5taW5YID0gSW5maW5pdHk7XG4gICAgdGhpcy5taW5ZID0gSW5maW5pdHk7XG4gICAgdGhpcy5tYXhYID0gMDtcbiAgICB0aGlzLm1heFkgPSAwO1xuICB9XG4gIGdldENsaXBwZWRQYXRoQm91bmRpbmdCb3gocGF0aFR5cGUgPSBQYXRoVHlwZS5GSUxMLCB0cmFuc2Zvcm0gPSBudWxsKSB7XG4gICAgcmV0dXJuIHV0aWwuVXRpbC5pbnRlcnNlY3QodGhpcy5jbGlwQm94LCB0aGlzLmdldFBhdGhCb3VuZGluZ0JveChwYXRoVHlwZSwgdHJhbnNmb3JtKSk7XG4gIH1cbn1cbmZ1bmN0aW9uIHB1dEJpbmFyeUltYWdlRGF0YShjdHgsIGltZ0RhdGEpIHtcbiAgaWYgKHR5cGVvZiBJbWFnZURhdGEgIT09IFwidW5kZWZpbmVkXCIgJiYgaW1nRGF0YSBpbnN0YW5jZW9mIEltYWdlRGF0YSkge1xuICAgIGN0eC5wdXRJbWFnZURhdGEoaW1nRGF0YSwgMCwgMCk7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IGhlaWdodCA9IGltZ0RhdGEuaGVpZ2h0LFxuICAgIHdpZHRoID0gaW1nRGF0YS53aWR0aDtcbiAgY29uc3QgcGFydGlhbENodW5rSGVpZ2h0ID0gaGVpZ2h0ICUgRlVMTF9DSFVOS19IRUlHSFQ7XG4gIGNvbnN0IGZ1bGxDaHVua3MgPSAoaGVpZ2h0IC0gcGFydGlhbENodW5rSGVpZ2h0KSAvIEZVTExfQ0hVTktfSEVJR0hUO1xuICBjb25zdCB0b3RhbENodW5rcyA9IHBhcnRpYWxDaHVua0hlaWdodCA9PT0gMCA/IGZ1bGxDaHVua3MgOiBmdWxsQ2h1bmtzICsgMTtcbiAgY29uc3QgY2h1bmtJbWdEYXRhID0gY3R4LmNyZWF0ZUltYWdlRGF0YSh3aWR0aCwgRlVMTF9DSFVOS19IRUlHSFQpO1xuICBsZXQgc3JjUG9zID0gMCxcbiAgICBkZXN0UG9zO1xuICBjb25zdCBzcmMgPSBpbWdEYXRhLmRhdGE7XG4gIGNvbnN0IGRlc3QgPSBjaHVua0ltZ0RhdGEuZGF0YTtcbiAgbGV0IGksIGosIHRoaXNDaHVua0hlaWdodCwgZWxlbXNJblRoaXNDaHVuaztcbiAgaWYgKGltZ0RhdGEua2luZCA9PT0gdXRpbC5JbWFnZUtpbmQuR1JBWVNDQUxFXzFCUFApIHtcbiAgICBjb25zdCBzcmNMZW5ndGggPSBzcmMuYnl0ZUxlbmd0aDtcbiAgICBjb25zdCBkZXN0MzIgPSBuZXcgVWludDMyQXJyYXkoZGVzdC5idWZmZXIsIDAsIGRlc3QuYnl0ZUxlbmd0aCA+PiAyKTtcbiAgICBjb25zdCBkZXN0MzJEYXRhTGVuZ3RoID0gZGVzdDMyLmxlbmd0aDtcbiAgICBjb25zdCBmdWxsU3JjRGlmZiA9IHdpZHRoICsgNyA+PiAzO1xuICAgIGNvbnN0IHdoaXRlID0gMHhmZmZmZmZmZjtcbiAgICBjb25zdCBibGFjayA9IHV0aWwuRmVhdHVyZVRlc3QuaXNMaXR0bGVFbmRpYW4gPyAweGZmMDAwMDAwIDogMHgwMDAwMDBmZjtcbiAgICBmb3IgKGkgPSAwOyBpIDwgdG90YWxDaHVua3M7IGkrKykge1xuICAgICAgdGhpc0NodW5rSGVpZ2h0ID0gaSA8IGZ1bGxDaHVua3MgPyBGVUxMX0NIVU5LX0hFSUdIVCA6IHBhcnRpYWxDaHVua0hlaWdodDtcbiAgICAgIGRlc3RQb3MgPSAwO1xuICAgICAgZm9yIChqID0gMDsgaiA8IHRoaXNDaHVua0hlaWdodDsgaisrKSB7XG4gICAgICAgIGNvbnN0IHNyY0RpZmYgPSBzcmNMZW5ndGggLSBzcmNQb3M7XG4gICAgICAgIGxldCBrID0gMDtcbiAgICAgICAgY29uc3Qga0VuZCA9IHNyY0RpZmYgPiBmdWxsU3JjRGlmZiA/IHdpZHRoIDogc3JjRGlmZiAqIDggLSA3O1xuICAgICAgICBjb25zdCBrRW5kVW5yb2xsZWQgPSBrRW5kICYgfjc7XG4gICAgICAgIGxldCBtYXNrID0gMDtcbiAgICAgICAgbGV0IHNyY0J5dGUgPSAwO1xuICAgICAgICBmb3IgKDsgayA8IGtFbmRVbnJvbGxlZDsgayArPSA4KSB7XG4gICAgICAgICAgc3JjQnl0ZSA9IHNyY1tzcmNQb3MrK107XG4gICAgICAgICAgZGVzdDMyW2Rlc3RQb3MrK10gPSBzcmNCeXRlICYgMTI4ID8gd2hpdGUgOiBibGFjaztcbiAgICAgICAgICBkZXN0MzJbZGVzdFBvcysrXSA9IHNyY0J5dGUgJiA2NCA/IHdoaXRlIDogYmxhY2s7XG4gICAgICAgICAgZGVzdDMyW2Rlc3RQb3MrK10gPSBzcmNCeXRlICYgMzIgPyB3aGl0ZSA6IGJsYWNrO1xuICAgICAgICAgIGRlc3QzMltkZXN0UG9zKytdID0gc3JjQnl0ZSAmIDE2ID8gd2hpdGUgOiBibGFjaztcbiAgICAgICAgICBkZXN0MzJbZGVzdFBvcysrXSA9IHNyY0J5dGUgJiA4ID8gd2hpdGUgOiBibGFjaztcbiAgICAgICAgICBkZXN0MzJbZGVzdFBvcysrXSA9IHNyY0J5dGUgJiA0ID8gd2hpdGUgOiBibGFjaztcbiAgICAgICAgICBkZXN0MzJbZGVzdFBvcysrXSA9IHNyY0J5dGUgJiAyID8gd2hpdGUgOiBibGFjaztcbiAgICAgICAgICBkZXN0MzJbZGVzdFBvcysrXSA9IHNyY0J5dGUgJiAxID8gd2hpdGUgOiBibGFjaztcbiAgICAgICAgfVxuICAgICAgICBmb3IgKDsgayA8IGtFbmQ7IGsrKykge1xuICAgICAgICAgIGlmIChtYXNrID09PSAwKSB7XG4gICAgICAgICAgICBzcmNCeXRlID0gc3JjW3NyY1BvcysrXTtcbiAgICAgICAgICAgIG1hc2sgPSAxMjg7XG4gICAgICAgICAgfVxuICAgICAgICAgIGRlc3QzMltkZXN0UG9zKytdID0gc3JjQnl0ZSAmIG1hc2sgPyB3aGl0ZSA6IGJsYWNrO1xuICAgICAgICAgIG1hc2sgPj49IDE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHdoaWxlIChkZXN0UG9zIDwgZGVzdDMyRGF0YUxlbmd0aCkge1xuICAgICAgICBkZXN0MzJbZGVzdFBvcysrXSA9IDA7XG4gICAgICB9XG4gICAgICBjdHgucHV0SW1hZ2VEYXRhKGNodW5rSW1nRGF0YSwgMCwgaSAqIEZVTExfQ0hVTktfSEVJR0hUKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoaW1nRGF0YS5raW5kID09PSB1dGlsLkltYWdlS2luZC5SR0JBXzMyQlBQKSB7XG4gICAgaiA9IDA7XG4gICAgZWxlbXNJblRoaXNDaHVuayA9IHdpZHRoICogRlVMTF9DSFVOS19IRUlHSFQgKiA0O1xuICAgIGZvciAoaSA9IDA7IGkgPCBmdWxsQ2h1bmtzOyBpKyspIHtcbiAgICAgIGRlc3Quc2V0KHNyYy5zdWJhcnJheShzcmNQb3MsIHNyY1BvcyArIGVsZW1zSW5UaGlzQ2h1bmspKTtcbiAgICAgIHNyY1BvcyArPSBlbGVtc0luVGhpc0NodW5rO1xuICAgICAgY3R4LnB1dEltYWdlRGF0YShjaHVua0ltZ0RhdGEsIDAsIGopO1xuICAgICAgaiArPSBGVUxMX0NIVU5LX0hFSUdIVDtcbiAgICB9XG4gICAgaWYgKGkgPCB0b3RhbENodW5rcykge1xuICAgICAgZWxlbXNJblRoaXNDaHVuayA9IHdpZHRoICogcGFydGlhbENodW5rSGVpZ2h0ICogNDtcbiAgICAgIGRlc3Quc2V0KHNyYy5zdWJhcnJheShzcmNQb3MsIHNyY1BvcyArIGVsZW1zSW5UaGlzQ2h1bmspKTtcbiAgICAgIGN0eC5wdXRJbWFnZURhdGEoY2h1bmtJbWdEYXRhLCAwLCBqKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoaW1nRGF0YS5raW5kID09PSB1dGlsLkltYWdlS2luZC5SR0JfMjRCUFApIHtcbiAgICB0aGlzQ2h1bmtIZWlnaHQgPSBGVUxMX0NIVU5LX0hFSUdIVDtcbiAgICBlbGVtc0luVGhpc0NodW5rID0gd2lkdGggKiB0aGlzQ2h1bmtIZWlnaHQ7XG4gICAgZm9yIChpID0gMDsgaSA8IHRvdGFsQ2h1bmtzOyBpKyspIHtcbiAgICAgIGlmIChpID49IGZ1bGxDaHVua3MpIHtcbiAgICAgICAgdGhpc0NodW5rSGVpZ2h0ID0gcGFydGlhbENodW5rSGVpZ2h0O1xuICAgICAgICBlbGVtc0luVGhpc0NodW5rID0gd2lkdGggKiB0aGlzQ2h1bmtIZWlnaHQ7XG4gICAgICB9XG4gICAgICBkZXN0UG9zID0gMDtcbiAgICAgIGZvciAoaiA9IGVsZW1zSW5UaGlzQ2h1bms7IGotLTspIHtcbiAgICAgICAgZGVzdFtkZXN0UG9zKytdID0gc3JjW3NyY1BvcysrXTtcbiAgICAgICAgZGVzdFtkZXN0UG9zKytdID0gc3JjW3NyY1BvcysrXTtcbiAgICAgICAgZGVzdFtkZXN0UG9zKytdID0gc3JjW3NyY1BvcysrXTtcbiAgICAgICAgZGVzdFtkZXN0UG9zKytdID0gMjU1O1xuICAgICAgfVxuICAgICAgY3R4LnB1dEltYWdlRGF0YShjaHVua0ltZ0RhdGEsIDAsIGkgKiBGVUxMX0NIVU5LX0hFSUdIVCk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcihgYmFkIGltYWdlIGtpbmQ6ICR7aW1nRGF0YS5raW5kfWApO1xuICB9XG59XG5mdW5jdGlvbiBwdXRCaW5hcnlJbWFnZU1hc2soY3R4LCBpbWdEYXRhKSB7XG4gIGlmIChpbWdEYXRhLmJpdG1hcCkge1xuICAgIGN0eC5kcmF3SW1hZ2UoaW1nRGF0YS5iaXRtYXAsIDAsIDApO1xuICAgIHJldHVybjtcbiAgfVxuICBjb25zdCBoZWlnaHQgPSBpbWdEYXRhLmhlaWdodCxcbiAgICB3aWR0aCA9IGltZ0RhdGEud2lkdGg7XG4gIGNvbnN0IHBhcnRpYWxDaHVua0hlaWdodCA9IGhlaWdodCAlIEZVTExfQ0hVTktfSEVJR0hUO1xuICBjb25zdCBmdWxsQ2h1bmtzID0gKGhlaWdodCAtIHBhcnRpYWxDaHVua0hlaWdodCkgLyBGVUxMX0NIVU5LX0hFSUdIVDtcbiAgY29uc3QgdG90YWxDaHVua3MgPSBwYXJ0aWFsQ2h1bmtIZWlnaHQgPT09IDAgPyBmdWxsQ2h1bmtzIDogZnVsbENodW5rcyArIDE7XG4gIGNvbnN0IGNodW5rSW1nRGF0YSA9IGN0eC5jcmVhdGVJbWFnZURhdGEod2lkdGgsIEZVTExfQ0hVTktfSEVJR0hUKTtcbiAgbGV0IHNyY1BvcyA9IDA7XG4gIGNvbnN0IHNyYyA9IGltZ0RhdGEuZGF0YTtcbiAgY29uc3QgZGVzdCA9IGNodW5rSW1nRGF0YS5kYXRhO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHRvdGFsQ2h1bmtzOyBpKyspIHtcbiAgICBjb25zdCB0aGlzQ2h1bmtIZWlnaHQgPSBpIDwgZnVsbENodW5rcyA/IEZVTExfQ0hVTktfSEVJR0hUIDogcGFydGlhbENodW5rSGVpZ2h0O1xuICAgICh7XG4gICAgICBzcmNQb3NcbiAgICB9ID0gY29udmVydEJsYWNrQW5kV2hpdGVUb1JHQkEoe1xuICAgICAgc3JjLFxuICAgICAgc3JjUG9zLFxuICAgICAgZGVzdCxcbiAgICAgIHdpZHRoLFxuICAgICAgaGVpZ2h0OiB0aGlzQ2h1bmtIZWlnaHQsXG4gICAgICBub25CbGFja0NvbG9yOiAwXG4gICAgfSkpO1xuICAgIGN0eC5wdXRJbWFnZURhdGEoY2h1bmtJbWdEYXRhLCAwLCBpICogRlVMTF9DSFVOS19IRUlHSFQpO1xuICB9XG59XG5mdW5jdGlvbiBjb3B5Q3R4U3RhdGUoc291cmNlQ3R4LCBkZXN0Q3R4KSB7XG4gIGNvbnN0IHByb3BlcnRpZXMgPSBbXCJzdHJva2VTdHlsZVwiLCBcImZpbGxTdHlsZVwiLCBcImZpbGxSdWxlXCIsIFwiZ2xvYmFsQWxwaGFcIiwgXCJsaW5lV2lkdGhcIiwgXCJsaW5lQ2FwXCIsIFwibGluZUpvaW5cIiwgXCJtaXRlckxpbWl0XCIsIFwiZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uXCIsIFwiZm9udFwiLCBcImZpbHRlclwiXTtcbiAgZm9yIChjb25zdCBwcm9wZXJ0eSBvZiBwcm9wZXJ0aWVzKSB7XG4gICAgaWYgKHNvdXJjZUN0eFtwcm9wZXJ0eV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgZGVzdEN0eFtwcm9wZXJ0eV0gPSBzb3VyY2VDdHhbcHJvcGVydHldO1xuICAgIH1cbiAgfVxuICBpZiAoc291cmNlQ3R4LnNldExpbmVEYXNoICE9PSB1bmRlZmluZWQpIHtcbiAgICBkZXN0Q3R4LnNldExpbmVEYXNoKHNvdXJjZUN0eC5nZXRMaW5lRGFzaCgpKTtcbiAgICBkZXN0Q3R4LmxpbmVEYXNoT2Zmc2V0ID0gc291cmNlQ3R4LmxpbmVEYXNoT2Zmc2V0O1xuICB9XG59XG5mdW5jdGlvbiByZXNldEN0eFRvRGVmYXVsdChjdHgpIHtcbiAgY3R4LnN0cm9rZVN0eWxlID0gY3R4LmZpbGxTdHlsZSA9IFwiIzAwMDAwMFwiO1xuICBjdHguZmlsbFJ1bGUgPSBcIm5vbnplcm9cIjtcbiAgY3R4Lmdsb2JhbEFscGhhID0gMTtcbiAgY3R4LmxpbmVXaWR0aCA9IDE7XG4gIGN0eC5saW5lQ2FwID0gXCJidXR0XCI7XG4gIGN0eC5saW5lSm9pbiA9IFwibWl0ZXJcIjtcbiAgY3R4Lm1pdGVyTGltaXQgPSAxMDtcbiAgY3R4Lmdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbiA9IFwic291cmNlLW92ZXJcIjtcbiAgY3R4LmZvbnQgPSBcIjEwcHggc2Fucy1zZXJpZlwiO1xuICBpZiAoY3R4LnNldExpbmVEYXNoICE9PSB1bmRlZmluZWQpIHtcbiAgICBjdHguc2V0TGluZURhc2goW10pO1xuICAgIGN0eC5saW5lRGFzaE9mZnNldCA9IDA7XG4gIH1cbiAgaWYgKCF1dGlsLmlzTm9kZUpTKSB7XG4gICAgY29uc3Qge1xuICAgICAgZmlsdGVyXG4gICAgfSA9IGN0eDtcbiAgICBpZiAoZmlsdGVyICE9PSBcIm5vbmVcIiAmJiBmaWx0ZXIgIT09IFwiXCIpIHtcbiAgICAgIGN0eC5maWx0ZXIgPSBcIm5vbmVcIjtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIGNvbXBvc2VTTWFza0JhY2tkcm9wKGJ5dGVzLCByMCwgZzAsIGIwKSB7XG4gIGNvbnN0IGxlbmd0aCA9IGJ5dGVzLmxlbmd0aDtcbiAgZm9yIChsZXQgaSA9IDM7IGkgPCBsZW5ndGg7IGkgKz0gNCkge1xuICAgIGNvbnN0IGFscGhhID0gYnl0ZXNbaV07XG4gICAgaWYgKGFscGhhID09PSAwKSB7XG4gICAgICBieXRlc1tpIC0gM10gPSByMDtcbiAgICAgIGJ5dGVzW2kgLSAyXSA9IGcwO1xuICAgICAgYnl0ZXNbaSAtIDFdID0gYjA7XG4gICAgfSBlbHNlIGlmIChhbHBoYSA8IDI1NSkge1xuICAgICAgY29uc3QgYWxwaGFfID0gMjU1IC0gYWxwaGE7XG4gICAgICBieXRlc1tpIC0gM10gPSBieXRlc1tpIC0gM10gKiBhbHBoYSArIHIwICogYWxwaGFfID4+IDg7XG4gICAgICBieXRlc1tpIC0gMl0gPSBieXRlc1tpIC0gMl0gKiBhbHBoYSArIGcwICogYWxwaGFfID4+IDg7XG4gICAgICBieXRlc1tpIC0gMV0gPSBieXRlc1tpIC0gMV0gKiBhbHBoYSArIGIwICogYWxwaGFfID4+IDg7XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBjb21wb3NlU01hc2tBbHBoYShtYXNrRGF0YSwgbGF5ZXJEYXRhLCB0cmFuc2Zlck1hcCkge1xuICBjb25zdCBsZW5ndGggPSBtYXNrRGF0YS5sZW5ndGg7XG4gIGNvbnN0IHNjYWxlID0gMSAvIDI1NTtcbiAgZm9yIChsZXQgaSA9IDM7IGkgPCBsZW5ndGg7IGkgKz0gNCkge1xuICAgIGNvbnN0IGFscGhhID0gdHJhbnNmZXJNYXAgPyB0cmFuc2Zlck1hcFttYXNrRGF0YVtpXV0gOiBtYXNrRGF0YVtpXTtcbiAgICBsYXllckRhdGFbaV0gPSBsYXllckRhdGFbaV0gKiBhbHBoYSAqIHNjYWxlIHwgMDtcbiAgfVxufVxuZnVuY3Rpb24gY29tcG9zZVNNYXNrTHVtaW5vc2l0eShtYXNrRGF0YSwgbGF5ZXJEYXRhLCB0cmFuc2Zlck1hcCkge1xuICBjb25zdCBsZW5ndGggPSBtYXNrRGF0YS5sZW5ndGg7XG4gIGZvciAobGV0IGkgPSAzOyBpIDwgbGVuZ3RoOyBpICs9IDQpIHtcbiAgICBjb25zdCB5ID0gbWFza0RhdGFbaSAtIDNdICogNzcgKyBtYXNrRGF0YVtpIC0gMl0gKiAxNTIgKyBtYXNrRGF0YVtpIC0gMV0gKiAyODtcbiAgICBsYXllckRhdGFbaV0gPSB0cmFuc2Zlck1hcCA/IGxheWVyRGF0YVtpXSAqIHRyYW5zZmVyTWFwW3kgPj4gOF0gPj4gOCA6IGxheWVyRGF0YVtpXSAqIHkgPj4gMTY7XG4gIH1cbn1cbmZ1bmN0aW9uIGdlbmVyaWNDb21wb3NlU01hc2sobWFza0N0eCwgbGF5ZXJDdHgsIHdpZHRoLCBoZWlnaHQsIHN1YnR5cGUsIGJhY2tkcm9wLCB0cmFuc2Zlck1hcCwgbGF5ZXJPZmZzZXRYLCBsYXllck9mZnNldFksIG1hc2tPZmZzZXRYLCBtYXNrT2Zmc2V0WSkge1xuICBjb25zdCBoYXNCYWNrZHJvcCA9ICEhYmFja2Ryb3A7XG4gIGNvbnN0IHIwID0gaGFzQmFja2Ryb3AgPyBiYWNrZHJvcFswXSA6IDA7XG4gIGNvbnN0IGcwID0gaGFzQmFja2Ryb3AgPyBiYWNrZHJvcFsxXSA6IDA7XG4gIGNvbnN0IGIwID0gaGFzQmFja2Ryb3AgPyBiYWNrZHJvcFsyXSA6IDA7XG4gIGNvbnN0IGNvbXBvc2VGbiA9IHN1YnR5cGUgPT09IFwiTHVtaW5vc2l0eVwiID8gY29tcG9zZVNNYXNrTHVtaW5vc2l0eSA6IGNvbXBvc2VTTWFza0FscGhhO1xuICBjb25zdCBQSVhFTFNfVE9fUFJPQ0VTUyA9IDEwNDg1NzY7XG4gIGNvbnN0IGNodW5rU2l6ZSA9IE1hdGgubWluKGhlaWdodCwgTWF0aC5jZWlsKFBJWEVMU19UT19QUk9DRVNTIC8gd2lkdGgpKTtcbiAgZm9yIChsZXQgcm93ID0gMDsgcm93IDwgaGVpZ2h0OyByb3cgKz0gY2h1bmtTaXplKSB7XG4gICAgY29uc3QgY2h1bmtIZWlnaHQgPSBNYXRoLm1pbihjaHVua1NpemUsIGhlaWdodCAtIHJvdyk7XG4gICAgY29uc3QgbWFza0RhdGEgPSBtYXNrQ3R4LmdldEltYWdlRGF0YShsYXllck9mZnNldFggLSBtYXNrT2Zmc2V0WCwgcm93ICsgKGxheWVyT2Zmc2V0WSAtIG1hc2tPZmZzZXRZKSwgd2lkdGgsIGNodW5rSGVpZ2h0KTtcbiAgICBjb25zdCBsYXllckRhdGEgPSBsYXllckN0eC5nZXRJbWFnZURhdGEobGF5ZXJPZmZzZXRYLCByb3cgKyBsYXllck9mZnNldFksIHdpZHRoLCBjaHVua0hlaWdodCk7XG4gICAgaWYgKGhhc0JhY2tkcm9wKSB7XG4gICAgICBjb21wb3NlU01hc2tCYWNrZHJvcChtYXNrRGF0YS5kYXRhLCByMCwgZzAsIGIwKTtcbiAgICB9XG4gICAgY29tcG9zZUZuKG1hc2tEYXRhLmRhdGEsIGxheWVyRGF0YS5kYXRhLCB0cmFuc2Zlck1hcCk7XG4gICAgbGF5ZXJDdHgucHV0SW1hZ2VEYXRhKGxheWVyRGF0YSwgbGF5ZXJPZmZzZXRYLCByb3cgKyBsYXllck9mZnNldFkpO1xuICB9XG59XG5mdW5jdGlvbiBjb21wb3NlU01hc2soY3R4LCBzbWFzaywgbGF5ZXJDdHgsIGxheWVyQm94KSB7XG4gIGNvbnN0IGxheWVyT2Zmc2V0WCA9IGxheWVyQm94WzBdO1xuICBjb25zdCBsYXllck9mZnNldFkgPSBsYXllckJveFsxXTtcbiAgY29uc3QgbGF5ZXJXaWR0aCA9IGxheWVyQm94WzJdIC0gbGF5ZXJPZmZzZXRYO1xuICBjb25zdCBsYXllckhlaWdodCA9IGxheWVyQm94WzNdIC0gbGF5ZXJPZmZzZXRZO1xuICBpZiAobGF5ZXJXaWR0aCA9PT0gMCB8fCBsYXllckhlaWdodCA9PT0gMCkge1xuICAgIHJldHVybjtcbiAgfVxuICBnZW5lcmljQ29tcG9zZVNNYXNrKHNtYXNrLmNvbnRleHQsIGxheWVyQ3R4LCBsYXllcldpZHRoLCBsYXllckhlaWdodCwgc21hc2suc3VidHlwZSwgc21hc2suYmFja2Ryb3AsIHNtYXNrLnRyYW5zZmVyTWFwLCBsYXllck9mZnNldFgsIGxheWVyT2Zmc2V0WSwgc21hc2sub2Zmc2V0WCwgc21hc2sub2Zmc2V0WSk7XG4gIGN0eC5zYXZlKCk7XG4gIGN0eC5nbG9iYWxBbHBoYSA9IDE7XG4gIGN0eC5nbG9iYWxDb21wb3NpdGVPcGVyYXRpb24gPSBcInNvdXJjZS1vdmVyXCI7XG4gIGN0eC5zZXRUcmFuc2Zvcm0oMSwgMCwgMCwgMSwgMCwgMCk7XG4gIGN0eC5kcmF3SW1hZ2UobGF5ZXJDdHguY2FudmFzLCAwLCAwKTtcbiAgY3R4LnJlc3RvcmUoKTtcbn1cbmZ1bmN0aW9uIGdldEltYWdlU21vb3RoaW5nRW5hYmxlZCh0cmFuc2Zvcm0sIGludGVycG9sYXRlKSB7XG4gIGNvbnN0IHNjYWxlID0gdXRpbC5VdGlsLnNpbmd1bGFyVmFsdWVEZWNvbXBvc2UyZFNjYWxlKHRyYW5zZm9ybSk7XG4gIHNjYWxlWzBdID0gTWF0aC5mcm91bmQoc2NhbGVbMF0pO1xuICBzY2FsZVsxXSA9IE1hdGguZnJvdW5kKHNjYWxlWzFdKTtcbiAgY29uc3QgYWN0dWFsU2NhbGUgPSBNYXRoLmZyb3VuZCgoZ2xvYmFsVGhpcy5kZXZpY2VQaXhlbFJhdGlvIHx8IDEpICogZGlzcGxheV91dGlscy5QaXhlbHNQZXJJbmNoLlBERl9UT19DU1NfVU5JVFMpO1xuICBpZiAoaW50ZXJwb2xhdGUgIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBpbnRlcnBvbGF0ZTtcbiAgfSBlbHNlIGlmIChzY2FsZVswXSA8PSBhY3R1YWxTY2FsZSB8fCBzY2FsZVsxXSA8PSBhY3R1YWxTY2FsZSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cbmNvbnN0IExJTkVfQ0FQX1NUWUxFUyA9IFtcImJ1dHRcIiwgXCJyb3VuZFwiLCBcInNxdWFyZVwiXTtcbmNvbnN0IExJTkVfSk9JTl9TVFlMRVMgPSBbXCJtaXRlclwiLCBcInJvdW5kXCIsIFwiYmV2ZWxcIl07XG5jb25zdCBOT1JNQUxfQ0xJUCA9IHt9O1xuY29uc3QgRU9fQ0xJUCA9IHt9O1xuY2xhc3MgQ2FudmFzR3JhcGhpY3Mge1xuICBjb25zdHJ1Y3RvcihjYW52YXNDdHgsIGNvbW1vbk9ianMsIG9ianMsIGNhbnZhc0ZhY3RvcnksIGZpbHRlckZhY3RvcnksIHtcbiAgICBvcHRpb25hbENvbnRlbnRDb25maWcsXG4gICAgbWFya2VkQ29udGVudFN0YWNrID0gbnVsbFxuICB9LCBhbm5vdGF0aW9uQ2FudmFzTWFwLCBwYWdlQ29sb3JzKSB7XG4gICAgdGhpcy5jdHggPSBjYW52YXNDdHg7XG4gICAgdGhpcy5jdXJyZW50ID0gbmV3IENhbnZhc0V4dHJhU3RhdGUodGhpcy5jdHguY2FudmFzLndpZHRoLCB0aGlzLmN0eC5jYW52YXMuaGVpZ2h0KTtcbiAgICB0aGlzLnN0YXRlU3RhY2sgPSBbXTtcbiAgICB0aGlzLnBlbmRpbmdDbGlwID0gbnVsbDtcbiAgICB0aGlzLnBlbmRpbmdFT0ZpbGwgPSBmYWxzZTtcbiAgICB0aGlzLnJlcyA9IG51bGw7XG4gICAgdGhpcy54b2JqcyA9IG51bGw7XG4gICAgdGhpcy5jb21tb25PYmpzID0gY29tbW9uT2JqcztcbiAgICB0aGlzLm9ianMgPSBvYmpzO1xuICAgIHRoaXMuY2FudmFzRmFjdG9yeSA9IGNhbnZhc0ZhY3Rvcnk7XG4gICAgdGhpcy5maWx0ZXJGYWN0b3J5ID0gZmlsdGVyRmFjdG9yeTtcbiAgICB0aGlzLmdyb3VwU3RhY2sgPSBbXTtcbiAgICB0aGlzLnByb2Nlc3NpbmdUeXBlMyA9IG51bGw7XG4gICAgdGhpcy5iYXNlVHJhbnNmb3JtID0gbnVsbDtcbiAgICB0aGlzLmJhc2VUcmFuc2Zvcm1TdGFjayA9IFtdO1xuICAgIHRoaXMuZ3JvdXBMZXZlbCA9IDA7XG4gICAgdGhpcy5zbWFza1N0YWNrID0gW107XG4gICAgdGhpcy5zbWFza0NvdW50ZXIgPSAwO1xuICAgIHRoaXMudGVtcFNNYXNrID0gbnVsbDtcbiAgICB0aGlzLnN1c3BlbmRlZEN0eCA9IG51bGw7XG4gICAgdGhpcy5jb250ZW50VmlzaWJsZSA9IHRydWU7XG4gICAgdGhpcy5tYXJrZWRDb250ZW50U3RhY2sgPSBtYXJrZWRDb250ZW50U3RhY2sgfHwgW107XG4gICAgdGhpcy5vcHRpb25hbENvbnRlbnRDb25maWcgPSBvcHRpb25hbENvbnRlbnRDb25maWc7XG4gICAgdGhpcy5jYWNoZWRDYW52YXNlcyA9IG5ldyBDYWNoZWRDYW52YXNlcyh0aGlzLmNhbnZhc0ZhY3RvcnkpO1xuICAgIHRoaXMuY2FjaGVkUGF0dGVybnMgPSBuZXcgTWFwKCk7XG4gICAgdGhpcy5hbm5vdGF0aW9uQ2FudmFzTWFwID0gYW5ub3RhdGlvbkNhbnZhc01hcDtcbiAgICB0aGlzLnZpZXdwb3J0U2NhbGUgPSAxO1xuICAgIHRoaXMub3V0cHV0U2NhbGVYID0gMTtcbiAgICB0aGlzLm91dHB1dFNjYWxlWSA9IDE7XG4gICAgdGhpcy5wYWdlQ29sb3JzID0gcGFnZUNvbG9ycztcbiAgICB0aGlzLl9jYWNoZWRTY2FsZUZvclN0cm9raW5nID0gWy0xLCAwXTtcbiAgICB0aGlzLl9jYWNoZWRHZXRTaW5nbGVQaXhlbFdpZHRoID0gbnVsbDtcbiAgICB0aGlzLl9jYWNoZWRCaXRtYXBzTWFwID0gbmV3IE1hcCgpO1xuICB9XG4gIGdldE9iamVjdChkYXRhLCBmYWxsYmFjayA9IG51bGwpIHtcbiAgICBpZiAodHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIHJldHVybiBkYXRhLnN0YXJ0c1dpdGgoXCJnX1wiKSA/IHRoaXMuY29tbW9uT2Jqcy5nZXQoZGF0YSkgOiB0aGlzLm9ianMuZ2V0KGRhdGEpO1xuICAgIH1cbiAgICByZXR1cm4gZmFsbGJhY2s7XG4gIH1cbiAgYmVnaW5EcmF3aW5nKHtcbiAgICB0cmFuc2Zvcm0sXG4gICAgdmlld3BvcnQsXG4gICAgdHJhbnNwYXJlbmN5ID0gZmFsc2UsXG4gICAgYmFja2dyb3VuZCA9IG51bGxcbiAgfSkge1xuICAgIGNvbnN0IHdpZHRoID0gdGhpcy5jdHguY2FudmFzLndpZHRoO1xuICAgIGNvbnN0IGhlaWdodCA9IHRoaXMuY3R4LmNhbnZhcy5oZWlnaHQ7XG4gICAgY29uc3Qgc2F2ZWRGaWxsU3R5bGUgPSB0aGlzLmN0eC5maWxsU3R5bGU7XG4gICAgdGhpcy5jdHguZmlsbFN0eWxlID0gYmFja2dyb3VuZCB8fCBcIiNmZmZmZmZcIjtcbiAgICB0aGlzLmN0eC5maWxsUmVjdCgwLCAwLCB3aWR0aCwgaGVpZ2h0KTtcbiAgICB0aGlzLmN0eC5maWxsU3R5bGUgPSBzYXZlZEZpbGxTdHlsZTtcbiAgICBpZiAodHJhbnNwYXJlbmN5KSB7XG4gICAgICBjb25zdCB0cmFuc3BhcmVudENhbnZhcyA9IHRoaXMuY2FjaGVkQ2FudmFzZXMuZ2V0Q2FudmFzKFwidHJhbnNwYXJlbnRcIiwgd2lkdGgsIGhlaWdodCk7XG4gICAgICB0aGlzLmNvbXBvc2l0ZUN0eCA9IHRoaXMuY3R4O1xuICAgICAgdGhpcy50cmFuc3BhcmVudENhbnZhcyA9IHRyYW5zcGFyZW50Q2FudmFzLmNhbnZhcztcbiAgICAgIHRoaXMuY3R4ID0gdHJhbnNwYXJlbnRDYW52YXMuY29udGV4dDtcbiAgICAgIHRoaXMuY3R4LnNhdmUoKTtcbiAgICAgIHRoaXMuY3R4LnRyYW5zZm9ybSguLi4oMCxkaXNwbGF5X3V0aWxzLmdldEN1cnJlbnRUcmFuc2Zvcm0pKHRoaXMuY29tcG9zaXRlQ3R4KSk7XG4gICAgfVxuICAgIHRoaXMuY3R4LnNhdmUoKTtcbiAgICByZXNldEN0eFRvRGVmYXVsdCh0aGlzLmN0eCk7XG4gICAgaWYgKHRyYW5zZm9ybSkge1xuICAgICAgdGhpcy5jdHgudHJhbnNmb3JtKC4uLnRyYW5zZm9ybSk7XG4gICAgICB0aGlzLm91dHB1dFNjYWxlWCA9IHRyYW5zZm9ybVswXTtcbiAgICAgIHRoaXMub3V0cHV0U2NhbGVZID0gdHJhbnNmb3JtWzBdO1xuICAgIH1cbiAgICB0aGlzLmN0eC50cmFuc2Zvcm0oLi4udmlld3BvcnQudHJhbnNmb3JtKTtcbiAgICB0aGlzLnZpZXdwb3J0U2NhbGUgPSB2aWV3cG9ydC5zY2FsZTtcbiAgICB0aGlzLmJhc2VUcmFuc2Zvcm0gPSAoMCxkaXNwbGF5X3V0aWxzLmdldEN1cnJlbnRUcmFuc2Zvcm0pKHRoaXMuY3R4KTtcbiAgfVxuICBleGVjdXRlT3BlcmF0b3JMaXN0KG9wZXJhdG9yTGlzdCwgZXhlY3V0aW9uU3RhcnRJZHgsIGNvbnRpbnVlQ2FsbGJhY2ssIHN0ZXBwZXIpIHtcbiAgICBjb25zdCBhcmdzQXJyYXkgPSBvcGVyYXRvckxpc3QuYXJnc0FycmF5O1xuICAgIGNvbnN0IGZuQXJyYXkgPSBvcGVyYXRvckxpc3QuZm5BcnJheTtcbiAgICBsZXQgaSA9IGV4ZWN1dGlvblN0YXJ0SWR4IHx8IDA7XG4gICAgY29uc3QgYXJnc0FycmF5TGVuID0gYXJnc0FycmF5Lmxlbmd0aDtcbiAgICBpZiAoYXJnc0FycmF5TGVuID09PSBpKSB7XG4gICAgICByZXR1cm4gaTtcbiAgICB9XG4gICAgY29uc3QgY2h1bmtPcGVyYXRpb25zID0gYXJnc0FycmF5TGVuIC0gaSA+IEVYRUNVVElPTl9TVEVQUyAmJiB0eXBlb2YgY29udGludWVDYWxsYmFjayA9PT0gXCJmdW5jdGlvblwiO1xuICAgIGNvbnN0IGVuZFRpbWUgPSBjaHVua09wZXJhdGlvbnMgPyBEYXRlLm5vdygpICsgRVhFQ1VUSU9OX1RJTUUgOiAwO1xuICAgIGxldCBzdGVwcyA9IDA7XG4gICAgY29uc3QgY29tbW9uT2JqcyA9IHRoaXMuY29tbW9uT2JqcztcbiAgICBjb25zdCBvYmpzID0gdGhpcy5vYmpzO1xuICAgIGxldCBmbklkO1xuICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICBpZiAoc3RlcHBlciAhPT0gdW5kZWZpbmVkICYmIGkgPT09IHN0ZXBwZXIubmV4dEJyZWFrUG9pbnQpIHtcbiAgICAgICAgc3RlcHBlci5icmVha0l0KGksIGNvbnRpbnVlQ2FsbGJhY2spO1xuICAgICAgICByZXR1cm4gaTtcbiAgICAgIH1cbiAgICAgIGZuSWQgPSBmbkFycmF5W2ldO1xuICAgICAgaWYgKGZuSWQgIT09IHV0aWwuT1BTLmRlcGVuZGVuY3kpIHtcbiAgICAgICAgdGhpc1tmbklkXS5hcHBseSh0aGlzLCBhcmdzQXJyYXlbaV0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZm9yIChjb25zdCBkZXBPYmpJZCBvZiBhcmdzQXJyYXlbaV0pIHtcbiAgICAgICAgICBjb25zdCBvYmpzUG9vbCA9IGRlcE9iaklkLnN0YXJ0c1dpdGgoXCJnX1wiKSA/IGNvbW1vbk9ianMgOiBvYmpzO1xuICAgICAgICAgIGlmICghb2Jqc1Bvb2wuaGFzKGRlcE9iaklkKSkge1xuICAgICAgICAgICAgb2Jqc1Bvb2wuZ2V0KGRlcE9iaklkLCBjb250aW51ZUNhbGxiYWNrKTtcbiAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaSsrO1xuICAgICAgaWYgKGkgPT09IGFyZ3NBcnJheUxlbikge1xuICAgICAgICByZXR1cm4gaTtcbiAgICAgIH1cbiAgICAgIGlmIChjaHVua09wZXJhdGlvbnMgJiYgKytzdGVwcyA+IEVYRUNVVElPTl9TVEVQUykge1xuICAgICAgICBpZiAoRGF0ZS5ub3coKSA+IGVuZFRpbWUpIHtcbiAgICAgICAgICBjb250aW51ZUNhbGxiYWNrKCk7XG4gICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgIH1cbiAgICAgICAgc3RlcHMgPSAwO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICAjcmVzdG9yZUluaXRpYWxTdGF0ZSgpIHtcbiAgICB3aGlsZSAodGhpcy5zdGF0ZVN0YWNrLmxlbmd0aCB8fCB0aGlzLmluU01hc2tNb2RlKSB7XG4gICAgICB0aGlzLnJlc3RvcmUoKTtcbiAgICB9XG4gICAgdGhpcy5jdHgucmVzdG9yZSgpO1xuICAgIGlmICh0aGlzLnRyYW5zcGFyZW50Q2FudmFzKSB7XG4gICAgICB0aGlzLmN0eCA9IHRoaXMuY29tcG9zaXRlQ3R4O1xuICAgICAgdGhpcy5jdHguc2F2ZSgpO1xuICAgICAgdGhpcy5jdHguc2V0VHJhbnNmb3JtKDEsIDAsIDAsIDEsIDAsIDApO1xuICAgICAgdGhpcy5jdHguZHJhd0ltYWdlKHRoaXMudHJhbnNwYXJlbnRDYW52YXMsIDAsIDApO1xuICAgICAgdGhpcy5jdHgucmVzdG9yZSgpO1xuICAgICAgdGhpcy50cmFuc3BhcmVudENhbnZhcyA9IG51bGw7XG4gICAgfVxuICB9XG4gIGVuZERyYXdpbmcoKSB7XG4gICAgdGhpcy4jcmVzdG9yZUluaXRpYWxTdGF0ZSgpO1xuICAgIHRoaXMuY2FjaGVkQ2FudmFzZXMuY2xlYXIoKTtcbiAgICB0aGlzLmNhY2hlZFBhdHRlcm5zLmNsZWFyKCk7XG4gICAgZm9yIChjb25zdCBjYWNoZSBvZiB0aGlzLl9jYWNoZWRCaXRtYXBzTWFwLnZhbHVlcygpKSB7XG4gICAgICBmb3IgKGNvbnN0IGNhbnZhcyBvZiBjYWNoZS52YWx1ZXMoKSkge1xuICAgICAgICBpZiAodHlwZW9mIEhUTUxDYW52YXNFbGVtZW50ICE9PSBcInVuZGVmaW5lZFwiICYmIGNhbnZhcyBpbnN0YW5jZW9mIEhUTUxDYW52YXNFbGVtZW50KSB7XG4gICAgICAgICAgY2FudmFzLndpZHRoID0gY2FudmFzLmhlaWdodCA9IDA7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGNhY2hlLmNsZWFyKCk7XG4gICAgfVxuICAgIHRoaXMuX2NhY2hlZEJpdG1hcHNNYXAuY2xlYXIoKTtcbiAgICB0aGlzLiNkcmF3RmlsdGVyKCk7XG4gIH1cbiAgI2RyYXdGaWx0ZXIoKSB7XG4gICAgaWYgKHRoaXMucGFnZUNvbG9ycykge1xuICAgICAgY29uc3QgaGNtRmlsdGVySWQgPSB0aGlzLmZpbHRlckZhY3RvcnkuYWRkSENNRmlsdGVyKHRoaXMucGFnZUNvbG9ycy5mb3JlZ3JvdW5kLCB0aGlzLnBhZ2VDb2xvcnMuYmFja2dyb3VuZCk7XG4gICAgICBpZiAoaGNtRmlsdGVySWQgIT09IFwibm9uZVwiKSB7XG4gICAgICAgIGNvbnN0IHNhdmVkRmlsdGVyID0gdGhpcy5jdHguZmlsdGVyO1xuICAgICAgICB0aGlzLmN0eC5maWx0ZXIgPSBoY21GaWx0ZXJJZDtcbiAgICAgICAgdGhpcy5jdHguZHJhd0ltYWdlKHRoaXMuY3R4LmNhbnZhcywgMCwgMCk7XG4gICAgICAgIHRoaXMuY3R4LmZpbHRlciA9IHNhdmVkRmlsdGVyO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBfc2NhbGVJbWFnZShpbWcsIGludmVyc2VUcmFuc2Zvcm0pIHtcbiAgICBjb25zdCB3aWR0aCA9IGltZy53aWR0aDtcbiAgICBjb25zdCBoZWlnaHQgPSBpbWcuaGVpZ2h0O1xuICAgIGxldCB3aWR0aFNjYWxlID0gTWF0aC5tYXgoTWF0aC5oeXBvdChpbnZlcnNlVHJhbnNmb3JtWzBdLCBpbnZlcnNlVHJhbnNmb3JtWzFdKSwgMSk7XG4gICAgbGV0IGhlaWdodFNjYWxlID0gTWF0aC5tYXgoTWF0aC5oeXBvdChpbnZlcnNlVHJhbnNmb3JtWzJdLCBpbnZlcnNlVHJhbnNmb3JtWzNdKSwgMSk7XG4gICAgbGV0IHBhaW50V2lkdGggPSB3aWR0aCxcbiAgICAgIHBhaW50SGVpZ2h0ID0gaGVpZ2h0O1xuICAgIGxldCB0bXBDYW52YXNJZCA9IFwicHJlc2NhbGUxXCI7XG4gICAgbGV0IHRtcENhbnZhcywgdG1wQ3R4O1xuICAgIHdoaWxlICh3aWR0aFNjYWxlID4gMiAmJiBwYWludFdpZHRoID4gMSB8fCBoZWlnaHRTY2FsZSA+IDIgJiYgcGFpbnRIZWlnaHQgPiAxKSB7XG4gICAgICBsZXQgbmV3V2lkdGggPSBwYWludFdpZHRoLFxuICAgICAgICBuZXdIZWlnaHQgPSBwYWludEhlaWdodDtcbiAgICAgIGlmICh3aWR0aFNjYWxlID4gMiAmJiBwYWludFdpZHRoID4gMSkge1xuICAgICAgICBuZXdXaWR0aCA9IHBhaW50V2lkdGggPj0gMTYzODQgPyBNYXRoLmZsb29yKHBhaW50V2lkdGggLyAyKSAtIDEgfHwgMSA6IE1hdGguY2VpbChwYWludFdpZHRoIC8gMik7XG4gICAgICAgIHdpZHRoU2NhbGUgLz0gcGFpbnRXaWR0aCAvIG5ld1dpZHRoO1xuICAgICAgfVxuICAgICAgaWYgKGhlaWdodFNjYWxlID4gMiAmJiBwYWludEhlaWdodCA+IDEpIHtcbiAgICAgICAgbmV3SGVpZ2h0ID0gcGFpbnRIZWlnaHQgPj0gMTYzODQgPyBNYXRoLmZsb29yKHBhaW50SGVpZ2h0IC8gMikgLSAxIHx8IDEgOiBNYXRoLmNlaWwocGFpbnRIZWlnaHQpIC8gMjtcbiAgICAgICAgaGVpZ2h0U2NhbGUgLz0gcGFpbnRIZWlnaHQgLyBuZXdIZWlnaHQ7XG4gICAgICB9XG4gICAgICB0bXBDYW52YXMgPSB0aGlzLmNhY2hlZENhbnZhc2VzLmdldENhbnZhcyh0bXBDYW52YXNJZCwgbmV3V2lkdGgsIG5ld0hlaWdodCk7XG4gICAgICB0bXBDdHggPSB0bXBDYW52YXMuY29udGV4dDtcbiAgICAgIHRtcEN0eC5jbGVhclJlY3QoMCwgMCwgbmV3V2lkdGgsIG5ld0hlaWdodCk7XG4gICAgICB0bXBDdHguZHJhd0ltYWdlKGltZywgMCwgMCwgcGFpbnRXaWR0aCwgcGFpbnRIZWlnaHQsIDAsIDAsIG5ld1dpZHRoLCBuZXdIZWlnaHQpO1xuICAgICAgaW1nID0gdG1wQ2FudmFzLmNhbnZhcztcbiAgICAgIHBhaW50V2lkdGggPSBuZXdXaWR0aDtcbiAgICAgIHBhaW50SGVpZ2h0ID0gbmV3SGVpZ2h0O1xuICAgICAgdG1wQ2FudmFzSWQgPSB0bXBDYW52YXNJZCA9PT0gXCJwcmVzY2FsZTFcIiA/IFwicHJlc2NhbGUyXCIgOiBcInByZXNjYWxlMVwiO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgaW1nLFxuICAgICAgcGFpbnRXaWR0aCxcbiAgICAgIHBhaW50SGVpZ2h0XG4gICAgfTtcbiAgfVxuICBfY3JlYXRlTWFza0NhbnZhcyhpbWcpIHtcbiAgICBjb25zdCBjdHggPSB0aGlzLmN0eDtcbiAgICBjb25zdCB7XG4gICAgICB3aWR0aCxcbiAgICAgIGhlaWdodFxuICAgIH0gPSBpbWc7XG4gICAgY29uc3QgZmlsbENvbG9yID0gdGhpcy5jdXJyZW50LmZpbGxDb2xvcjtcbiAgICBjb25zdCBpc1BhdHRlcm5GaWxsID0gdGhpcy5jdXJyZW50LnBhdHRlcm5GaWxsO1xuICAgIGNvbnN0IGN1cnJlbnRUcmFuc2Zvcm0gPSAoMCxkaXNwbGF5X3V0aWxzLmdldEN1cnJlbnRUcmFuc2Zvcm0pKGN0eCk7XG4gICAgbGV0IGNhY2hlLCBjYWNoZUtleSwgc2NhbGVkLCBtYXNrQ2FudmFzO1xuICAgIGlmICgoaW1nLmJpdG1hcCB8fCBpbWcuZGF0YSkgJiYgaW1nLmNvdW50ID4gMSkge1xuICAgICAgY29uc3QgbWFpbktleSA9IGltZy5iaXRtYXAgfHwgaW1nLmRhdGEuYnVmZmVyO1xuICAgICAgY2FjaGVLZXkgPSBKU09OLnN0cmluZ2lmeShpc1BhdHRlcm5GaWxsID8gY3VycmVudFRyYW5zZm9ybSA6IFtjdXJyZW50VHJhbnNmb3JtLnNsaWNlKDAsIDQpLCBmaWxsQ29sb3JdKTtcbiAgICAgIGNhY2hlID0gdGhpcy5fY2FjaGVkQml0bWFwc01hcC5nZXQobWFpbktleSk7XG4gICAgICBpZiAoIWNhY2hlKSB7XG4gICAgICAgIGNhY2hlID0gbmV3IE1hcCgpO1xuICAgICAgICB0aGlzLl9jYWNoZWRCaXRtYXBzTWFwLnNldChtYWluS2V5LCBjYWNoZSk7XG4gICAgICB9XG4gICAgICBjb25zdCBjYWNoZWRJbWFnZSA9IGNhY2hlLmdldChjYWNoZUtleSk7XG4gICAgICBpZiAoY2FjaGVkSW1hZ2UgJiYgIWlzUGF0dGVybkZpbGwpIHtcbiAgICAgICAgY29uc3Qgb2Zmc2V0WCA9IE1hdGgucm91bmQoTWF0aC5taW4oY3VycmVudFRyYW5zZm9ybVswXSwgY3VycmVudFRyYW5zZm9ybVsyXSkgKyBjdXJyZW50VHJhbnNmb3JtWzRdKTtcbiAgICAgICAgY29uc3Qgb2Zmc2V0WSA9IE1hdGgucm91bmQoTWF0aC5taW4oY3VycmVudFRyYW5zZm9ybVsxXSwgY3VycmVudFRyYW5zZm9ybVszXSkgKyBjdXJyZW50VHJhbnNmb3JtWzVdKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBjYW52YXM6IGNhY2hlZEltYWdlLFxuICAgICAgICAgIG9mZnNldFgsXG4gICAgICAgICAgb2Zmc2V0WVxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgc2NhbGVkID0gY2FjaGVkSW1hZ2U7XG4gICAgfVxuICAgIGlmICghc2NhbGVkKSB7XG4gICAgICBtYXNrQ2FudmFzID0gdGhpcy5jYWNoZWRDYW52YXNlcy5nZXRDYW52YXMoXCJtYXNrQ2FudmFzXCIsIHdpZHRoLCBoZWlnaHQpO1xuICAgICAgcHV0QmluYXJ5SW1hZ2VNYXNrKG1hc2tDYW52YXMuY29udGV4dCwgaW1nKTtcbiAgICB9XG4gICAgbGV0IG1hc2tUb0NhbnZhcyA9IHV0aWwuVXRpbC50cmFuc2Zvcm0oY3VycmVudFRyYW5zZm9ybSwgWzEgLyB3aWR0aCwgMCwgMCwgLTEgLyBoZWlnaHQsIDAsIDBdKTtcbiAgICBtYXNrVG9DYW52YXMgPSB1dGlsLlV0aWwudHJhbnNmb3JtKG1hc2tUb0NhbnZhcywgWzEsIDAsIDAsIDEsIDAsIC1oZWlnaHRdKTtcbiAgICBjb25zdCBbbWluWCwgbWluWSwgbWF4WCwgbWF4WV0gPSB1dGlsLlV0aWwuZ2V0QXhpYWxBbGlnbmVkQm91bmRpbmdCb3goWzAsIDAsIHdpZHRoLCBoZWlnaHRdLCBtYXNrVG9DYW52YXMpO1xuICAgIGNvbnN0IGRyYXduV2lkdGggPSBNYXRoLnJvdW5kKG1heFggLSBtaW5YKSB8fCAxO1xuICAgIGNvbnN0IGRyYXduSGVpZ2h0ID0gTWF0aC5yb3VuZChtYXhZIC0gbWluWSkgfHwgMTtcbiAgICBjb25zdCBmaWxsQ2FudmFzID0gdGhpcy5jYWNoZWRDYW52YXNlcy5nZXRDYW52YXMoXCJmaWxsQ2FudmFzXCIsIGRyYXduV2lkdGgsIGRyYXduSGVpZ2h0KTtcbiAgICBjb25zdCBmaWxsQ3R4ID0gZmlsbENhbnZhcy5jb250ZXh0O1xuICAgIGNvbnN0IG9mZnNldFggPSBtaW5YO1xuICAgIGNvbnN0IG9mZnNldFkgPSBtaW5ZO1xuICAgIGZpbGxDdHgudHJhbnNsYXRlKC1vZmZzZXRYLCAtb2Zmc2V0WSk7XG4gICAgZmlsbEN0eC50cmFuc2Zvcm0oLi4ubWFza1RvQ2FudmFzKTtcbiAgICBpZiAoIXNjYWxlZCkge1xuICAgICAgc2NhbGVkID0gdGhpcy5fc2NhbGVJbWFnZShtYXNrQ2FudmFzLmNhbnZhcywgKDAsZGlzcGxheV91dGlscy5nZXRDdXJyZW50VHJhbnNmb3JtSW52ZXJzZSkoZmlsbEN0eCkpO1xuICAgICAgc2NhbGVkID0gc2NhbGVkLmltZztcbiAgICAgIGlmIChjYWNoZSAmJiBpc1BhdHRlcm5GaWxsKSB7XG4gICAgICAgIGNhY2hlLnNldChjYWNoZUtleSwgc2NhbGVkKTtcbiAgICAgIH1cbiAgICB9XG4gICAgZmlsbEN0eC5pbWFnZVNtb290aGluZ0VuYWJsZWQgPSBnZXRJbWFnZVNtb290aGluZ0VuYWJsZWQoKDAsZGlzcGxheV91dGlscy5nZXRDdXJyZW50VHJhbnNmb3JtKShmaWxsQ3R4KSwgaW1nLmludGVycG9sYXRlKTtcbiAgICBkcmF3SW1hZ2VBdEludGVnZXJDb29yZHMoZmlsbEN0eCwgc2NhbGVkLCAwLCAwLCBzY2FsZWQud2lkdGgsIHNjYWxlZC5oZWlnaHQsIDAsIDAsIHdpZHRoLCBoZWlnaHQpO1xuICAgIGZpbGxDdHguZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uID0gXCJzb3VyY2UtaW5cIjtcbiAgICBjb25zdCBpbnZlcnNlID0gdXRpbC5VdGlsLnRyYW5zZm9ybSgoMCxkaXNwbGF5X3V0aWxzLmdldEN1cnJlbnRUcmFuc2Zvcm1JbnZlcnNlKShmaWxsQ3R4KSwgWzEsIDAsIDAsIDEsIC1vZmZzZXRYLCAtb2Zmc2V0WV0pO1xuICAgIGZpbGxDdHguZmlsbFN0eWxlID0gaXNQYXR0ZXJuRmlsbCA/IGZpbGxDb2xvci5nZXRQYXR0ZXJuKGN0eCwgdGhpcywgaW52ZXJzZSwgUGF0aFR5cGUuRklMTCkgOiBmaWxsQ29sb3I7XG4gICAgZmlsbEN0eC5maWxsUmVjdCgwLCAwLCB3aWR0aCwgaGVpZ2h0KTtcbiAgICBpZiAoY2FjaGUgJiYgIWlzUGF0dGVybkZpbGwpIHtcbiAgICAgIHRoaXMuY2FjaGVkQ2FudmFzZXMuZGVsZXRlKFwiZmlsbENhbnZhc1wiKTtcbiAgICAgIGNhY2hlLnNldChjYWNoZUtleSwgZmlsbENhbnZhcy5jYW52YXMpO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgY2FudmFzOiBmaWxsQ2FudmFzLmNhbnZhcyxcbiAgICAgIG9mZnNldFg6IE1hdGgucm91bmQob2Zmc2V0WCksXG4gICAgICBvZmZzZXRZOiBNYXRoLnJvdW5kKG9mZnNldFkpXG4gICAgfTtcbiAgfVxuICBzZXRMaW5lV2lkdGgod2lkdGgpIHtcbiAgICBpZiAod2lkdGggIT09IHRoaXMuY3VycmVudC5saW5lV2lkdGgpIHtcbiAgICAgIHRoaXMuX2NhY2hlZFNjYWxlRm9yU3Ryb2tpbmdbMF0gPSAtMTtcbiAgICB9XG4gICAgdGhpcy5jdXJyZW50LmxpbmVXaWR0aCA9IHdpZHRoO1xuICAgIHRoaXMuY3R4LmxpbmVXaWR0aCA9IHdpZHRoO1xuICB9XG4gIHNldExpbmVDYXAoc3R5bGUpIHtcbiAgICB0aGlzLmN0eC5saW5lQ2FwID0gTElORV9DQVBfU1RZTEVTW3N0eWxlXTtcbiAgfVxuICBzZXRMaW5lSm9pbihzdHlsZSkge1xuICAgIHRoaXMuY3R4LmxpbmVKb2luID0gTElORV9KT0lOX1NUWUxFU1tzdHlsZV07XG4gIH1cbiAgc2V0TWl0ZXJMaW1pdChsaW1pdCkge1xuICAgIHRoaXMuY3R4Lm1pdGVyTGltaXQgPSBsaW1pdDtcbiAgfVxuICBzZXREYXNoKGRhc2hBcnJheSwgZGFzaFBoYXNlKSB7XG4gICAgY29uc3QgY3R4ID0gdGhpcy5jdHg7XG4gICAgaWYgKGN0eC5zZXRMaW5lRGFzaCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBjdHguc2V0TGluZURhc2goZGFzaEFycmF5KTtcbiAgICAgIGN0eC5saW5lRGFzaE9mZnNldCA9IGRhc2hQaGFzZTtcbiAgICB9XG4gIH1cbiAgc2V0UmVuZGVyaW5nSW50ZW50KGludGVudCkge31cbiAgc2V0RmxhdG5lc3MoZmxhdG5lc3MpIHt9XG4gIHNldEdTdGF0ZShzdGF0ZXMpIHtcbiAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBzdGF0ZXMpIHtcbiAgICAgIHN3aXRjaCAoa2V5KSB7XG4gICAgICAgIGNhc2UgXCJMV1wiOlxuICAgICAgICAgIHRoaXMuc2V0TGluZVdpZHRoKHZhbHVlKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcIkxDXCI6XG4gICAgICAgICAgdGhpcy5zZXRMaW5lQ2FwKHZhbHVlKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcIkxKXCI6XG4gICAgICAgICAgdGhpcy5zZXRMaW5lSm9pbih2YWx1ZSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJNTFwiOlxuICAgICAgICAgIHRoaXMuc2V0TWl0ZXJMaW1pdCh2YWx1ZSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJEXCI6XG4gICAgICAgICAgdGhpcy5zZXREYXNoKHZhbHVlWzBdLCB2YWx1ZVsxXSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJSSVwiOlxuICAgICAgICAgIHRoaXMuc2V0UmVuZGVyaW5nSW50ZW50KHZhbHVlKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcIkZMXCI6XG4gICAgICAgICAgdGhpcy5zZXRGbGF0bmVzcyh2YWx1ZSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJGb250XCI6XG4gICAgICAgICAgdGhpcy5zZXRGb250KHZhbHVlWzBdLCB2YWx1ZVsxXSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJDQVwiOlxuICAgICAgICAgIHRoaXMuY3VycmVudC5zdHJva2VBbHBoYSA9IHZhbHVlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwiY2FcIjpcbiAgICAgICAgICB0aGlzLmN1cnJlbnQuZmlsbEFscGhhID0gdmFsdWU7XG4gICAgICAgICAgdGhpcy5jdHguZ2xvYmFsQWxwaGEgPSB2YWx1ZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcIkJNXCI6XG4gICAgICAgICAgdGhpcy5jdHguZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uID0gdmFsdWU7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJTTWFza1wiOlxuICAgICAgICAgIHRoaXMuY3VycmVudC5hY3RpdmVTTWFzayA9IHZhbHVlID8gdGhpcy50ZW1wU01hc2sgOiBudWxsO1xuICAgICAgICAgIHRoaXMudGVtcFNNYXNrID0gbnVsbDtcbiAgICAgICAgICB0aGlzLmNoZWNrU01hc2tTdGF0ZSgpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwiVFJcIjpcbiAgICAgICAgICB0aGlzLmN0eC5maWx0ZXIgPSB0aGlzLmN1cnJlbnQudHJhbnNmZXJNYXBzID0gdGhpcy5maWx0ZXJGYWN0b3J5LmFkZEZpbHRlcih2YWx1ZSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGdldCBpblNNYXNrTW9kZSgpIHtcbiAgICByZXR1cm4gISF0aGlzLnN1c3BlbmRlZEN0eDtcbiAgfVxuICBjaGVja1NNYXNrU3RhdGUoKSB7XG4gICAgY29uc3QgaW5TTWFza01vZGUgPSB0aGlzLmluU01hc2tNb2RlO1xuICAgIGlmICh0aGlzLmN1cnJlbnQuYWN0aXZlU01hc2sgJiYgIWluU01hc2tNb2RlKSB7XG4gICAgICB0aGlzLmJlZ2luU01hc2tNb2RlKCk7XG4gICAgfSBlbHNlIGlmICghdGhpcy5jdXJyZW50LmFjdGl2ZVNNYXNrICYmIGluU01hc2tNb2RlKSB7XG4gICAgICB0aGlzLmVuZFNNYXNrTW9kZSgpO1xuICAgIH1cbiAgfVxuICBiZWdpblNNYXNrTW9kZSgpIHtcbiAgICBpZiAodGhpcy5pblNNYXNrTW9kZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYmVnaW5TTWFza01vZGUgY2FsbGVkIHdoaWxlIGFscmVhZHkgaW4gc21hc2sgbW9kZVwiKTtcbiAgICB9XG4gICAgY29uc3QgZHJhd25XaWR0aCA9IHRoaXMuY3R4LmNhbnZhcy53aWR0aDtcbiAgICBjb25zdCBkcmF3bkhlaWdodCA9IHRoaXMuY3R4LmNhbnZhcy5oZWlnaHQ7XG4gICAgY29uc3QgY2FjaGVJZCA9IFwic21hc2tHcm91cEF0XCIgKyB0aGlzLmdyb3VwTGV2ZWw7XG4gICAgY29uc3Qgc2NyYXRjaENhbnZhcyA9IHRoaXMuY2FjaGVkQ2FudmFzZXMuZ2V0Q2FudmFzKGNhY2hlSWQsIGRyYXduV2lkdGgsIGRyYXduSGVpZ2h0KTtcbiAgICB0aGlzLnN1c3BlbmRlZEN0eCA9IHRoaXMuY3R4O1xuICAgIHRoaXMuY3R4ID0gc2NyYXRjaENhbnZhcy5jb250ZXh0O1xuICAgIGNvbnN0IGN0eCA9IHRoaXMuY3R4O1xuICAgIGN0eC5zZXRUcmFuc2Zvcm0oLi4uKDAsZGlzcGxheV91dGlscy5nZXRDdXJyZW50VHJhbnNmb3JtKSh0aGlzLnN1c3BlbmRlZEN0eCkpO1xuICAgIGNvcHlDdHhTdGF0ZSh0aGlzLnN1c3BlbmRlZEN0eCwgY3R4KTtcbiAgICBtaXJyb3JDb250ZXh0T3BlcmF0aW9ucyhjdHgsIHRoaXMuc3VzcGVuZGVkQ3R4KTtcbiAgICB0aGlzLnNldEdTdGF0ZShbW1wiQk1cIiwgXCJzb3VyY2Utb3ZlclwiXSwgW1wiY2FcIiwgMV0sIFtcIkNBXCIsIDFdXSk7XG4gIH1cbiAgZW5kU01hc2tNb2RlKCkge1xuICAgIGlmICghdGhpcy5pblNNYXNrTW9kZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiZW5kU01hc2tNb2RlIGNhbGxlZCB3aGlsZSBub3QgaW4gc21hc2sgbW9kZVwiKTtcbiAgICB9XG4gICAgdGhpcy5jdHguX3JlbW92ZU1pcnJvcmluZygpO1xuICAgIGNvcHlDdHhTdGF0ZSh0aGlzLmN0eCwgdGhpcy5zdXNwZW5kZWRDdHgpO1xuICAgIHRoaXMuY3R4ID0gdGhpcy5zdXNwZW5kZWRDdHg7XG4gICAgdGhpcy5zdXNwZW5kZWRDdHggPSBudWxsO1xuICB9XG4gIGNvbXBvc2UoZGlydHlCb3gpIHtcbiAgICBpZiAoIXRoaXMuY3VycmVudC5hY3RpdmVTTWFzaykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoIWRpcnR5Qm94KSB7XG4gICAgICBkaXJ0eUJveCA9IFswLCAwLCB0aGlzLmN0eC5jYW52YXMud2lkdGgsIHRoaXMuY3R4LmNhbnZhcy5oZWlnaHRdO1xuICAgIH0gZWxzZSB7XG4gICAgICBkaXJ0eUJveFswXSA9IE1hdGguZmxvb3IoZGlydHlCb3hbMF0pO1xuICAgICAgZGlydHlCb3hbMV0gPSBNYXRoLmZsb29yKGRpcnR5Qm94WzFdKTtcbiAgICAgIGRpcnR5Qm94WzJdID0gTWF0aC5jZWlsKGRpcnR5Qm94WzJdKTtcbiAgICAgIGRpcnR5Qm94WzNdID0gTWF0aC5jZWlsKGRpcnR5Qm94WzNdKTtcbiAgICB9XG4gICAgY29uc3Qgc21hc2sgPSB0aGlzLmN1cnJlbnQuYWN0aXZlU01hc2s7XG4gICAgY29uc3Qgc3VzcGVuZGVkQ3R4ID0gdGhpcy5zdXNwZW5kZWRDdHg7XG4gICAgY29tcG9zZVNNYXNrKHN1c3BlbmRlZEN0eCwgc21hc2ssIHRoaXMuY3R4LCBkaXJ0eUJveCk7XG4gICAgdGhpcy5jdHguc2F2ZSgpO1xuICAgIHRoaXMuY3R4LnNldFRyYW5zZm9ybSgxLCAwLCAwLCAxLCAwLCAwKTtcbiAgICB0aGlzLmN0eC5jbGVhclJlY3QoMCwgMCwgdGhpcy5jdHguY2FudmFzLndpZHRoLCB0aGlzLmN0eC5jYW52YXMuaGVpZ2h0KTtcbiAgICB0aGlzLmN0eC5yZXN0b3JlKCk7XG4gIH1cbiAgc2F2ZSgpIHtcbiAgICBpZiAodGhpcy5pblNNYXNrTW9kZSkge1xuICAgICAgY29weUN0eFN0YXRlKHRoaXMuY3R4LCB0aGlzLnN1c3BlbmRlZEN0eCk7XG4gICAgICB0aGlzLnN1c3BlbmRlZEN0eC5zYXZlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuY3R4LnNhdmUoKTtcbiAgICB9XG4gICAgY29uc3Qgb2xkID0gdGhpcy5jdXJyZW50O1xuICAgIHRoaXMuc3RhdGVTdGFjay5wdXNoKG9sZCk7XG4gICAgdGhpcy5jdXJyZW50ID0gb2xkLmNsb25lKCk7XG4gIH1cbiAgcmVzdG9yZSgpIHtcbiAgICBpZiAodGhpcy5zdGF0ZVN0YWNrLmxlbmd0aCA9PT0gMCAmJiB0aGlzLmluU01hc2tNb2RlKSB7XG4gICAgICB0aGlzLmVuZFNNYXNrTW9kZSgpO1xuICAgIH1cbiAgICBpZiAodGhpcy5zdGF0ZVN0YWNrLmxlbmd0aCAhPT0gMCkge1xuICAgICAgdGhpcy5jdXJyZW50ID0gdGhpcy5zdGF0ZVN0YWNrLnBvcCgpO1xuICAgICAgaWYgKHRoaXMuaW5TTWFza01vZGUpIHtcbiAgICAgICAgdGhpcy5zdXNwZW5kZWRDdHgucmVzdG9yZSgpO1xuICAgICAgICBjb3B5Q3R4U3RhdGUodGhpcy5zdXNwZW5kZWRDdHgsIHRoaXMuY3R4KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuY3R4LnJlc3RvcmUoKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuY2hlY2tTTWFza1N0YXRlKCk7XG4gICAgICB0aGlzLnBlbmRpbmdDbGlwID0gbnVsbDtcbiAgICAgIHRoaXMuX2NhY2hlZFNjYWxlRm9yU3Ryb2tpbmdbMF0gPSAtMTtcbiAgICAgIHRoaXMuX2NhY2hlZEdldFNpbmdsZVBpeGVsV2lkdGggPSBudWxsO1xuICAgIH1cbiAgfVxuICB0cmFuc2Zvcm0oYSwgYiwgYywgZCwgZSwgZikge1xuICAgIHRoaXMuY3R4LnRyYW5zZm9ybShhLCBiLCBjLCBkLCBlLCBmKTtcbiAgICB0aGlzLl9jYWNoZWRTY2FsZUZvclN0cm9raW5nWzBdID0gLTE7XG4gICAgdGhpcy5fY2FjaGVkR2V0U2luZ2xlUGl4ZWxXaWR0aCA9IG51bGw7XG4gIH1cbiAgY29uc3RydWN0UGF0aChvcHMsIGFyZ3MsIG1pbk1heCkge1xuICAgIGNvbnN0IGN0eCA9IHRoaXMuY3R4O1xuICAgIGNvbnN0IGN1cnJlbnQgPSB0aGlzLmN1cnJlbnQ7XG4gICAgbGV0IHggPSBjdXJyZW50LngsXG4gICAgICB5ID0gY3VycmVudC55O1xuICAgIGxldCBzdGFydFgsIHN0YXJ0WTtcbiAgICBjb25zdCBjdXJyZW50VHJhbnNmb3JtID0gKDAsZGlzcGxheV91dGlscy5nZXRDdXJyZW50VHJhbnNmb3JtKShjdHgpO1xuICAgIGNvbnN0IGlzU2NhbGluZ01hdHJpeCA9IGN1cnJlbnRUcmFuc2Zvcm1bMF0gPT09IDAgJiYgY3VycmVudFRyYW5zZm9ybVszXSA9PT0gMCB8fCBjdXJyZW50VHJhbnNmb3JtWzFdID09PSAwICYmIGN1cnJlbnRUcmFuc2Zvcm1bMl0gPT09IDA7XG4gICAgY29uc3QgbWluTWF4Rm9yQmV6aWVyID0gaXNTY2FsaW5nTWF0cml4ID8gbWluTWF4LnNsaWNlKDApIDogbnVsbDtcbiAgICBmb3IgKGxldCBpID0gMCwgaiA9IDAsIGlpID0gb3BzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgIHN3aXRjaCAob3BzW2ldIHwgMCkge1xuICAgICAgICBjYXNlIHV0aWwuT1BTLnJlY3RhbmdsZTpcbiAgICAgICAgICB4ID0gYXJnc1tqKytdO1xuICAgICAgICAgIHkgPSBhcmdzW2orK107XG4gICAgICAgICAgY29uc3Qgd2lkdGggPSBhcmdzW2orK107XG4gICAgICAgICAgY29uc3QgaGVpZ2h0ID0gYXJnc1tqKytdO1xuICAgICAgICAgIGNvbnN0IHh3ID0geCArIHdpZHRoO1xuICAgICAgICAgIGNvbnN0IHloID0geSArIGhlaWdodDtcbiAgICAgICAgICBjdHgubW92ZVRvKHgsIHkpO1xuICAgICAgICAgIGlmICh3aWR0aCA9PT0gMCB8fCBoZWlnaHQgPT09IDApIHtcbiAgICAgICAgICAgIGN0eC5saW5lVG8oeHcsIHloKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY3R4LmxpbmVUbyh4dywgeSk7XG4gICAgICAgICAgICBjdHgubGluZVRvKHh3LCB5aCk7XG4gICAgICAgICAgICBjdHgubGluZVRvKHgsIHloKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCFpc1NjYWxpbmdNYXRyaXgpIHtcbiAgICAgICAgICAgIGN1cnJlbnQudXBkYXRlUmVjdE1pbk1heChjdXJyZW50VHJhbnNmb3JtLCBbeCwgeSwgeHcsIHloXSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGN0eC5jbG9zZVBhdGgoKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSB1dGlsLk9QUy5tb3ZlVG86XG4gICAgICAgICAgeCA9IGFyZ3NbaisrXTtcbiAgICAgICAgICB5ID0gYXJnc1tqKytdO1xuICAgICAgICAgIGN0eC5tb3ZlVG8oeCwgeSk7XG4gICAgICAgICAgaWYgKCFpc1NjYWxpbmdNYXRyaXgpIHtcbiAgICAgICAgICAgIGN1cnJlbnQudXBkYXRlUGF0aE1pbk1heChjdXJyZW50VHJhbnNmb3JtLCB4LCB5KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgdXRpbC5PUFMubGluZVRvOlxuICAgICAgICAgIHggPSBhcmdzW2orK107XG4gICAgICAgICAgeSA9IGFyZ3NbaisrXTtcbiAgICAgICAgICBjdHgubGluZVRvKHgsIHkpO1xuICAgICAgICAgIGlmICghaXNTY2FsaW5nTWF0cml4KSB7XG4gICAgICAgICAgICBjdXJyZW50LnVwZGF0ZVBhdGhNaW5NYXgoY3VycmVudFRyYW5zZm9ybSwgeCwgeSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIHV0aWwuT1BTLmN1cnZlVG86XG4gICAgICAgICAgc3RhcnRYID0geDtcbiAgICAgICAgICBzdGFydFkgPSB5O1xuICAgICAgICAgIHggPSBhcmdzW2ogKyA0XTtcbiAgICAgICAgICB5ID0gYXJnc1tqICsgNV07XG4gICAgICAgICAgY3R4LmJlemllckN1cnZlVG8oYXJnc1tqXSwgYXJnc1tqICsgMV0sIGFyZ3NbaiArIDJdLCBhcmdzW2ogKyAzXSwgeCwgeSk7XG4gICAgICAgICAgY3VycmVudC51cGRhdGVDdXJ2ZVBhdGhNaW5NYXgoY3VycmVudFRyYW5zZm9ybSwgc3RhcnRYLCBzdGFydFksIGFyZ3Nbal0sIGFyZ3NbaiArIDFdLCBhcmdzW2ogKyAyXSwgYXJnc1tqICsgM10sIHgsIHksIG1pbk1heEZvckJlemllcik7XG4gICAgICAgICAgaiArPSA2O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIHV0aWwuT1BTLmN1cnZlVG8yOlxuICAgICAgICAgIHN0YXJ0WCA9IHg7XG4gICAgICAgICAgc3RhcnRZID0geTtcbiAgICAgICAgICBjdHguYmV6aWVyQ3VydmVUbyh4LCB5LCBhcmdzW2pdLCBhcmdzW2ogKyAxXSwgYXJnc1tqICsgMl0sIGFyZ3NbaiArIDNdKTtcbiAgICAgICAgICBjdXJyZW50LnVwZGF0ZUN1cnZlUGF0aE1pbk1heChjdXJyZW50VHJhbnNmb3JtLCBzdGFydFgsIHN0YXJ0WSwgeCwgeSwgYXJnc1tqXSwgYXJnc1tqICsgMV0sIGFyZ3NbaiArIDJdLCBhcmdzW2ogKyAzXSwgbWluTWF4Rm9yQmV6aWVyKTtcbiAgICAgICAgICB4ID0gYXJnc1tqICsgMl07XG4gICAgICAgICAgeSA9IGFyZ3NbaiArIDNdO1xuICAgICAgICAgIGogKz0gNDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSB1dGlsLk9QUy5jdXJ2ZVRvMzpcbiAgICAgICAgICBzdGFydFggPSB4O1xuICAgICAgICAgIHN0YXJ0WSA9IHk7XG4gICAgICAgICAgeCA9IGFyZ3NbaiArIDJdO1xuICAgICAgICAgIHkgPSBhcmdzW2ogKyAzXTtcbiAgICAgICAgICBjdHguYmV6aWVyQ3VydmVUbyhhcmdzW2pdLCBhcmdzW2ogKyAxXSwgeCwgeSwgeCwgeSk7XG4gICAgICAgICAgY3VycmVudC51cGRhdGVDdXJ2ZVBhdGhNaW5NYXgoY3VycmVudFRyYW5zZm9ybSwgc3RhcnRYLCBzdGFydFksIGFyZ3Nbal0sIGFyZ3NbaiArIDFdLCB4LCB5LCB4LCB5LCBtaW5NYXhGb3JCZXppZXIpO1xuICAgICAgICAgIGogKz0gNDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSB1dGlsLk9QUy5jbG9zZVBhdGg6XG4gICAgICAgICAgY3R4LmNsb3NlUGF0aCgpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoaXNTY2FsaW5nTWF0cml4KSB7XG4gICAgICBjdXJyZW50LnVwZGF0ZVNjYWxpbmdQYXRoTWluTWF4KGN1cnJlbnRUcmFuc2Zvcm0sIG1pbk1heEZvckJlemllcik7XG4gICAgfVxuICAgIGN1cnJlbnQuc2V0Q3VycmVudFBvaW50KHgsIHkpO1xuICB9XG4gIGNsb3NlUGF0aCgpIHtcbiAgICB0aGlzLmN0eC5jbG9zZVBhdGgoKTtcbiAgfVxuICBzdHJva2UoY29uc3VtZVBhdGggPSB0cnVlKSB7XG4gICAgY29uc3QgY3R4ID0gdGhpcy5jdHg7XG4gICAgY29uc3Qgc3Ryb2tlQ29sb3IgPSB0aGlzLmN1cnJlbnQuc3Ryb2tlQ29sb3I7XG4gICAgY3R4Lmdsb2JhbEFscGhhID0gdGhpcy5jdXJyZW50LnN0cm9rZUFscGhhO1xuICAgIGlmICh0aGlzLmNvbnRlbnRWaXNpYmxlKSB7XG4gICAgICBpZiAodHlwZW9mIHN0cm9rZUNvbG9yID09PSBcIm9iamVjdFwiICYmIHN0cm9rZUNvbG9yPy5nZXRQYXR0ZXJuKSB7XG4gICAgICAgIGN0eC5zYXZlKCk7XG4gICAgICAgIGN0eC5zdHJva2VTdHlsZSA9IHN0cm9rZUNvbG9yLmdldFBhdHRlcm4oY3R4LCB0aGlzLCAoMCxkaXNwbGF5X3V0aWxzLmdldEN1cnJlbnRUcmFuc2Zvcm1JbnZlcnNlKShjdHgpLCBQYXRoVHlwZS5TVFJPS0UpO1xuICAgICAgICB0aGlzLnJlc2NhbGVBbmRTdHJva2UoZmFsc2UpO1xuICAgICAgICBjdHgucmVzdG9yZSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5yZXNjYWxlQW5kU3Ryb2tlKHRydWUpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoY29uc3VtZVBhdGgpIHtcbiAgICAgIHRoaXMuY29uc3VtZVBhdGgodGhpcy5jdXJyZW50LmdldENsaXBwZWRQYXRoQm91bmRpbmdCb3goKSk7XG4gICAgfVxuICAgIGN0eC5nbG9iYWxBbHBoYSA9IHRoaXMuY3VycmVudC5maWxsQWxwaGE7XG4gIH1cbiAgY2xvc2VTdHJva2UoKSB7XG4gICAgdGhpcy5jbG9zZVBhdGgoKTtcbiAgICB0aGlzLnN0cm9rZSgpO1xuICB9XG4gIGZpbGwoY29uc3VtZVBhdGggPSB0cnVlKSB7XG4gICAgY29uc3QgY3R4ID0gdGhpcy5jdHg7XG4gICAgY29uc3QgZmlsbENvbG9yID0gdGhpcy5jdXJyZW50LmZpbGxDb2xvcjtcbiAgICBjb25zdCBpc1BhdHRlcm5GaWxsID0gdGhpcy5jdXJyZW50LnBhdHRlcm5GaWxsO1xuICAgIGxldCBuZWVkUmVzdG9yZSA9IGZhbHNlO1xuICAgIGlmIChpc1BhdHRlcm5GaWxsKSB7XG4gICAgICBjdHguc2F2ZSgpO1xuICAgICAgY3R4LmZpbGxTdHlsZSA9IGZpbGxDb2xvci5nZXRQYXR0ZXJuKGN0eCwgdGhpcywgKDAsZGlzcGxheV91dGlscy5nZXRDdXJyZW50VHJhbnNmb3JtSW52ZXJzZSkoY3R4KSwgUGF0aFR5cGUuRklMTCk7XG4gICAgICBuZWVkUmVzdG9yZSA9IHRydWU7XG4gICAgfVxuICAgIGNvbnN0IGludGVyc2VjdCA9IHRoaXMuY3VycmVudC5nZXRDbGlwcGVkUGF0aEJvdW5kaW5nQm94KCk7XG4gICAgaWYgKHRoaXMuY29udGVudFZpc2libGUgJiYgaW50ZXJzZWN0ICE9PSBudWxsKSB7XG4gICAgICBpZiAodGhpcy5wZW5kaW5nRU9GaWxsKSB7XG4gICAgICAgIGN0eC5maWxsKFwiZXZlbm9kZFwiKTtcbiAgICAgICAgdGhpcy5wZW5kaW5nRU9GaWxsID0gZmFsc2U7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjdHguZmlsbCgpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAobmVlZFJlc3RvcmUpIHtcbiAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgfVxuICAgIGlmIChjb25zdW1lUGF0aCkge1xuICAgICAgdGhpcy5jb25zdW1lUGF0aChpbnRlcnNlY3QpO1xuICAgIH1cbiAgfVxuICBlb0ZpbGwoKSB7XG4gICAgdGhpcy5wZW5kaW5nRU9GaWxsID0gdHJ1ZTtcbiAgICB0aGlzLmZpbGwoKTtcbiAgfVxuICBmaWxsU3Ryb2tlKCkge1xuICAgIHRoaXMuZmlsbChmYWxzZSk7XG4gICAgdGhpcy5zdHJva2UoZmFsc2UpO1xuICAgIHRoaXMuY29uc3VtZVBhdGgoKTtcbiAgfVxuICBlb0ZpbGxTdHJva2UoKSB7XG4gICAgdGhpcy5wZW5kaW5nRU9GaWxsID0gdHJ1ZTtcbiAgICB0aGlzLmZpbGxTdHJva2UoKTtcbiAgfVxuICBjbG9zZUZpbGxTdHJva2UoKSB7XG4gICAgdGhpcy5jbG9zZVBhdGgoKTtcbiAgICB0aGlzLmZpbGxTdHJva2UoKTtcbiAgfVxuICBjbG9zZUVPRmlsbFN0cm9rZSgpIHtcbiAgICB0aGlzLnBlbmRpbmdFT0ZpbGwgPSB0cnVlO1xuICAgIHRoaXMuY2xvc2VQYXRoKCk7XG4gICAgdGhpcy5maWxsU3Ryb2tlKCk7XG4gIH1cbiAgZW5kUGF0aCgpIHtcbiAgICB0aGlzLmNvbnN1bWVQYXRoKCk7XG4gIH1cbiAgY2xpcCgpIHtcbiAgICB0aGlzLnBlbmRpbmdDbGlwID0gTk9STUFMX0NMSVA7XG4gIH1cbiAgZW9DbGlwKCkge1xuICAgIHRoaXMucGVuZGluZ0NsaXAgPSBFT19DTElQO1xuICB9XG4gIGJlZ2luVGV4dCgpIHtcbiAgICB0aGlzLmN1cnJlbnQudGV4dE1hdHJpeCA9IHV0aWwuSURFTlRJVFlfTUFUUklYO1xuICAgIHRoaXMuY3VycmVudC50ZXh0TWF0cml4U2NhbGUgPSAxO1xuICAgIHRoaXMuY3VycmVudC54ID0gdGhpcy5jdXJyZW50LmxpbmVYID0gMDtcbiAgICB0aGlzLmN1cnJlbnQueSA9IHRoaXMuY3VycmVudC5saW5lWSA9IDA7XG4gIH1cbiAgZW5kVGV4dCgpIHtcbiAgICBjb25zdCBwYXRocyA9IHRoaXMucGVuZGluZ1RleHRQYXRocztcbiAgICBjb25zdCBjdHggPSB0aGlzLmN0eDtcbiAgICBpZiAocGF0aHMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjdHguc2F2ZSgpO1xuICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICBmb3IgKGNvbnN0IHBhdGggb2YgcGF0aHMpIHtcbiAgICAgIGN0eC5zZXRUcmFuc2Zvcm0oLi4ucGF0aC50cmFuc2Zvcm0pO1xuICAgICAgY3R4LnRyYW5zbGF0ZShwYXRoLngsIHBhdGgueSk7XG4gICAgICBwYXRoLmFkZFRvUGF0aChjdHgsIHBhdGguZm9udFNpemUpO1xuICAgIH1cbiAgICBjdHgucmVzdG9yZSgpO1xuICAgIGN0eC5jbGlwKCk7XG4gICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgIGRlbGV0ZSB0aGlzLnBlbmRpbmdUZXh0UGF0aHM7XG4gIH1cbiAgc2V0Q2hhclNwYWNpbmcoc3BhY2luZykge1xuICAgIHRoaXMuY3VycmVudC5jaGFyU3BhY2luZyA9IHNwYWNpbmc7XG4gIH1cbiAgc2V0V29yZFNwYWNpbmcoc3BhY2luZykge1xuICAgIHRoaXMuY3VycmVudC53b3JkU3BhY2luZyA9IHNwYWNpbmc7XG4gIH1cbiAgc2V0SFNjYWxlKHNjYWxlKSB7XG4gICAgdGhpcy5jdXJyZW50LnRleHRIU2NhbGUgPSBzY2FsZSAvIDEwMDtcbiAgfVxuICBzZXRMZWFkaW5nKGxlYWRpbmcpIHtcbiAgICB0aGlzLmN1cnJlbnQubGVhZGluZyA9IC1sZWFkaW5nO1xuICB9XG4gIHNldEZvbnQoZm9udFJlZk5hbWUsIHNpemUpIHtcbiAgICBjb25zdCBmb250T2JqID0gdGhpcy5jb21tb25PYmpzLmdldChmb250UmVmTmFtZSk7XG4gICAgY29uc3QgY3VycmVudCA9IHRoaXMuY3VycmVudDtcbiAgICBpZiAoIWZvbnRPYmopIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgQ2FuJ3QgZmluZCBmb250IGZvciAke2ZvbnRSZWZOYW1lfWApO1xuICAgIH1cbiAgICBjdXJyZW50LmZvbnRNYXRyaXggPSBmb250T2JqLmZvbnRNYXRyaXggfHwgdXRpbC5GT05UX0lERU5USVRZX01BVFJJWDtcbiAgICBpZiAoY3VycmVudC5mb250TWF0cml4WzBdID09PSAwIHx8IGN1cnJlbnQuZm9udE1hdHJpeFszXSA9PT0gMCkge1xuICAgICAgKDAsdXRpbC53YXJuKShcIkludmFsaWQgZm9udCBtYXRyaXggZm9yIGZvbnQgXCIgKyBmb250UmVmTmFtZSk7XG4gICAgfVxuICAgIGlmIChzaXplIDwgMCkge1xuICAgICAgc2l6ZSA9IC1zaXplO1xuICAgICAgY3VycmVudC5mb250RGlyZWN0aW9uID0gLTE7XG4gICAgfSBlbHNlIHtcbiAgICAgIGN1cnJlbnQuZm9udERpcmVjdGlvbiA9IDE7XG4gICAgfVxuICAgIHRoaXMuY3VycmVudC5mb250ID0gZm9udE9iajtcbiAgICB0aGlzLmN1cnJlbnQuZm9udFNpemUgPSBzaXplO1xuICAgIGlmIChmb250T2JqLmlzVHlwZTNGb250KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IG5hbWUgPSBmb250T2JqLmxvYWRlZE5hbWUgfHwgXCJzYW5zLXNlcmlmXCI7XG4gICAgY29uc3QgdHlwZWZhY2UgPSBmb250T2JqLnN5c3RlbUZvbnRJbmZvPy5jc3MgfHwgYFwiJHtuYW1lfVwiLCAke2ZvbnRPYmouZmFsbGJhY2tOYW1lfWA7XG4gICAgbGV0IGJvbGQgPSBcIm5vcm1hbFwiO1xuICAgIGlmIChmb250T2JqLmJsYWNrKSB7XG4gICAgICBib2xkID0gXCI5MDBcIjtcbiAgICB9IGVsc2UgaWYgKGZvbnRPYmouYm9sZCkge1xuICAgICAgYm9sZCA9IFwiYm9sZFwiO1xuICAgIH1cbiAgICBjb25zdCBpdGFsaWMgPSBmb250T2JqLml0YWxpYyA/IFwiaXRhbGljXCIgOiBcIm5vcm1hbFwiO1xuICAgIGxldCBicm93c2VyRm9udFNpemUgPSBzaXplO1xuICAgIGlmIChzaXplIDwgTUlOX0ZPTlRfU0laRSkge1xuICAgICAgYnJvd3NlckZvbnRTaXplID0gTUlOX0ZPTlRfU0laRTtcbiAgICB9IGVsc2UgaWYgKHNpemUgPiBNQVhfRk9OVF9TSVpFKSB7XG4gICAgICBicm93c2VyRm9udFNpemUgPSBNQVhfRk9OVF9TSVpFO1xuICAgIH1cbiAgICB0aGlzLmN1cnJlbnQuZm9udFNpemVTY2FsZSA9IHNpemUgLyBicm93c2VyRm9udFNpemU7XG4gICAgdGhpcy5jdHguZm9udCA9IGAke2l0YWxpY30gJHtib2xkfSAke2Jyb3dzZXJGb250U2l6ZX1weCAke3R5cGVmYWNlfWA7XG4gIH1cbiAgc2V0VGV4dFJlbmRlcmluZ01vZGUobW9kZSkge1xuICAgIHRoaXMuY3VycmVudC50ZXh0UmVuZGVyaW5nTW9kZSA9IG1vZGU7XG4gIH1cbiAgc2V0VGV4dFJpc2UocmlzZSkge1xuICAgIHRoaXMuY3VycmVudC50ZXh0UmlzZSA9IHJpc2U7XG4gIH1cbiAgbW92ZVRleHQoeCwgeSkge1xuICAgIHRoaXMuY3VycmVudC54ID0gdGhpcy5jdXJyZW50LmxpbmVYICs9IHg7XG4gICAgdGhpcy5jdXJyZW50LnkgPSB0aGlzLmN1cnJlbnQubGluZVkgKz0geTtcbiAgfVxuICBzZXRMZWFkaW5nTW92ZVRleHQoeCwgeSkge1xuICAgIHRoaXMuc2V0TGVhZGluZygteSk7XG4gICAgdGhpcy5tb3ZlVGV4dCh4LCB5KTtcbiAgfVxuICBzZXRUZXh0TWF0cml4KGEsIGIsIGMsIGQsIGUsIGYpIHtcbiAgICB0aGlzLmN1cnJlbnQudGV4dE1hdHJpeCA9IFthLCBiLCBjLCBkLCBlLCBmXTtcbiAgICB0aGlzLmN1cnJlbnQudGV4dE1hdHJpeFNjYWxlID0gTWF0aC5oeXBvdChhLCBiKTtcbiAgICB0aGlzLmN1cnJlbnQueCA9IHRoaXMuY3VycmVudC5saW5lWCA9IDA7XG4gICAgdGhpcy5jdXJyZW50LnkgPSB0aGlzLmN1cnJlbnQubGluZVkgPSAwO1xuICB9XG4gIG5leHRMaW5lKCkge1xuICAgIHRoaXMubW92ZVRleHQoMCwgdGhpcy5jdXJyZW50LmxlYWRpbmcpO1xuICB9XG4gIHBhaW50Q2hhcihjaGFyYWN0ZXIsIHgsIHksIHBhdHRlcm5UcmFuc2Zvcm0pIHtcbiAgICBjb25zdCBjdHggPSB0aGlzLmN0eDtcbiAgICBjb25zdCBjdXJyZW50ID0gdGhpcy5jdXJyZW50O1xuICAgIGNvbnN0IGZvbnQgPSBjdXJyZW50LmZvbnQ7XG4gICAgY29uc3QgdGV4dFJlbmRlcmluZ01vZGUgPSBjdXJyZW50LnRleHRSZW5kZXJpbmdNb2RlO1xuICAgIGNvbnN0IGZvbnRTaXplID0gY3VycmVudC5mb250U2l6ZSAvIGN1cnJlbnQuZm9udFNpemVTY2FsZTtcbiAgICBjb25zdCBmaWxsU3Ryb2tlTW9kZSA9IHRleHRSZW5kZXJpbmdNb2RlICYgdXRpbC5UZXh0UmVuZGVyaW5nTW9kZS5GSUxMX1NUUk9LRV9NQVNLO1xuICAgIGNvbnN0IGlzQWRkVG9QYXRoU2V0ID0gISEodGV4dFJlbmRlcmluZ01vZGUgJiB1dGlsLlRleHRSZW5kZXJpbmdNb2RlLkFERF9UT19QQVRIX0ZMQUcpO1xuICAgIGNvbnN0IHBhdHRlcm5GaWxsID0gY3VycmVudC5wYXR0ZXJuRmlsbCAmJiAhZm9udC5taXNzaW5nRmlsZTtcbiAgICBsZXQgYWRkVG9QYXRoO1xuICAgIGlmIChmb250LmRpc2FibGVGb250RmFjZSB8fCBpc0FkZFRvUGF0aFNldCB8fCBwYXR0ZXJuRmlsbCkge1xuICAgICAgYWRkVG9QYXRoID0gZm9udC5nZXRQYXRoR2VuZXJhdG9yKHRoaXMuY29tbW9uT2JqcywgY2hhcmFjdGVyKTtcbiAgICB9XG4gICAgaWYgKGZvbnQuZGlzYWJsZUZvbnRGYWNlIHx8IHBhdHRlcm5GaWxsKSB7XG4gICAgICBjdHguc2F2ZSgpO1xuICAgICAgY3R4LnRyYW5zbGF0ZSh4LCB5KTtcbiAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgIGFkZFRvUGF0aChjdHgsIGZvbnRTaXplKTtcbiAgICAgIGlmIChwYXR0ZXJuVHJhbnNmb3JtKSB7XG4gICAgICAgIGN0eC5zZXRUcmFuc2Zvcm0oLi4ucGF0dGVyblRyYW5zZm9ybSk7XG4gICAgICB9XG4gICAgICBpZiAoZmlsbFN0cm9rZU1vZGUgPT09IHV0aWwuVGV4dFJlbmRlcmluZ01vZGUuRklMTCB8fCBmaWxsU3Ryb2tlTW9kZSA9PT0gdXRpbC5UZXh0UmVuZGVyaW5nTW9kZS5GSUxMX1NUUk9LRSkge1xuICAgICAgICBjdHguZmlsbCgpO1xuICAgICAgfVxuICAgICAgaWYgKGZpbGxTdHJva2VNb2RlID09PSB1dGlsLlRleHRSZW5kZXJpbmdNb2RlLlNUUk9LRSB8fCBmaWxsU3Ryb2tlTW9kZSA9PT0gdXRpbC5UZXh0UmVuZGVyaW5nTW9kZS5GSUxMX1NUUk9LRSkge1xuICAgICAgICBjdHguc3Ryb2tlKCk7XG4gICAgICB9XG4gICAgICBjdHgucmVzdG9yZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoZmlsbFN0cm9rZU1vZGUgPT09IHV0aWwuVGV4dFJlbmRlcmluZ01vZGUuRklMTCB8fCBmaWxsU3Ryb2tlTW9kZSA9PT0gdXRpbC5UZXh0UmVuZGVyaW5nTW9kZS5GSUxMX1NUUk9LRSkge1xuICAgICAgICBjdHguZmlsbFRleHQoY2hhcmFjdGVyLCB4LCB5KTtcbiAgICAgIH1cbiAgICAgIGlmIChmaWxsU3Ryb2tlTW9kZSA9PT0gdXRpbC5UZXh0UmVuZGVyaW5nTW9kZS5TVFJPS0UgfHwgZmlsbFN0cm9rZU1vZGUgPT09IHV0aWwuVGV4dFJlbmRlcmluZ01vZGUuRklMTF9TVFJPS0UpIHtcbiAgICAgICAgY3R4LnN0cm9rZVRleHQoY2hhcmFjdGVyLCB4LCB5KTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlzQWRkVG9QYXRoU2V0KSB7XG4gICAgICBjb25zdCBwYXRocyA9IHRoaXMucGVuZGluZ1RleHRQYXRocyB8fD0gW107XG4gICAgICBwYXRocy5wdXNoKHtcbiAgICAgICAgdHJhbnNmb3JtOiAoMCxkaXNwbGF5X3V0aWxzLmdldEN1cnJlbnRUcmFuc2Zvcm0pKGN0eCksXG4gICAgICAgIHgsXG4gICAgICAgIHksXG4gICAgICAgIGZvbnRTaXplLFxuICAgICAgICBhZGRUb1BhdGhcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICBnZXQgaXNGb250U3VicGl4ZWxBQUVuYWJsZWQoKSB7XG4gICAgY29uc3Qge1xuICAgICAgY29udGV4dDogY3R4XG4gICAgfSA9IHRoaXMuY2FjaGVkQ2FudmFzZXMuZ2V0Q2FudmFzKFwiaXNGb250U3VicGl4ZWxBQUVuYWJsZWRcIiwgMTAsIDEwKTtcbiAgICBjdHguc2NhbGUoMS41LCAxKTtcbiAgICBjdHguZmlsbFRleHQoXCJJXCIsIDAsIDEwKTtcbiAgICBjb25zdCBkYXRhID0gY3R4LmdldEltYWdlRGF0YSgwLCAwLCAxMCwgMTApLmRhdGE7XG4gICAgbGV0IGVuYWJsZWQgPSBmYWxzZTtcbiAgICBmb3IgKGxldCBpID0gMzsgaSA8IGRhdGEubGVuZ3RoOyBpICs9IDQpIHtcbiAgICAgIGlmIChkYXRhW2ldID4gMCAmJiBkYXRhW2ldIDwgMjU1KSB7XG4gICAgICAgIGVuYWJsZWQgPSB0cnVlO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuICgwLHV0aWwuc2hhZG93KSh0aGlzLCBcImlzRm9udFN1YnBpeGVsQUFFbmFibGVkXCIsIGVuYWJsZWQpO1xuICB9XG4gIHNob3dUZXh0KGdseXBocykge1xuICAgIGNvbnN0IGN1cnJlbnQgPSB0aGlzLmN1cnJlbnQ7XG4gICAgY29uc3QgZm9udCA9IGN1cnJlbnQuZm9udDtcbiAgICBpZiAoZm9udC5pc1R5cGUzRm9udCkge1xuICAgICAgcmV0dXJuIHRoaXMuc2hvd1R5cGUzVGV4dChnbHlwaHMpO1xuICAgIH1cbiAgICBjb25zdCBmb250U2l6ZSA9IGN1cnJlbnQuZm9udFNpemU7XG4gICAgaWYgKGZvbnRTaXplID09PSAwKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBjb25zdCBjdHggPSB0aGlzLmN0eDtcbiAgICBjb25zdCBmb250U2l6ZVNjYWxlID0gY3VycmVudC5mb250U2l6ZVNjYWxlO1xuICAgIGNvbnN0IGNoYXJTcGFjaW5nID0gY3VycmVudC5jaGFyU3BhY2luZztcbiAgICBjb25zdCB3b3JkU3BhY2luZyA9IGN1cnJlbnQud29yZFNwYWNpbmc7XG4gICAgY29uc3QgZm9udERpcmVjdGlvbiA9IGN1cnJlbnQuZm9udERpcmVjdGlvbjtcbiAgICBjb25zdCB0ZXh0SFNjYWxlID0gY3VycmVudC50ZXh0SFNjYWxlICogZm9udERpcmVjdGlvbjtcbiAgICBjb25zdCBnbHlwaHNMZW5ndGggPSBnbHlwaHMubGVuZ3RoO1xuICAgIGNvbnN0IHZlcnRpY2FsID0gZm9udC52ZXJ0aWNhbDtcbiAgICBjb25zdCBzcGFjaW5nRGlyID0gdmVydGljYWwgPyAxIDogLTE7XG4gICAgY29uc3QgZGVmYXVsdFZNZXRyaWNzID0gZm9udC5kZWZhdWx0Vk1ldHJpY3M7XG4gICAgY29uc3Qgd2lkdGhBZHZhbmNlU2NhbGUgPSBmb250U2l6ZSAqIGN1cnJlbnQuZm9udE1hdHJpeFswXTtcbiAgICBjb25zdCBzaW1wbGVGaWxsVGV4dCA9IGN1cnJlbnQudGV4dFJlbmRlcmluZ01vZGUgPT09IHV0aWwuVGV4dFJlbmRlcmluZ01vZGUuRklMTCAmJiAhZm9udC5kaXNhYmxlRm9udEZhY2UgJiYgIWN1cnJlbnQucGF0dGVybkZpbGw7XG4gICAgY3R4LnNhdmUoKTtcbiAgICBjdHgudHJhbnNmb3JtKC4uLmN1cnJlbnQudGV4dE1hdHJpeCk7XG4gICAgY3R4LnRyYW5zbGF0ZShjdXJyZW50LngsIGN1cnJlbnQueSArIGN1cnJlbnQudGV4dFJpc2UpO1xuICAgIGlmIChmb250RGlyZWN0aW9uID4gMCkge1xuICAgICAgY3R4LnNjYWxlKHRleHRIU2NhbGUsIC0xKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY3R4LnNjYWxlKHRleHRIU2NhbGUsIDEpO1xuICAgIH1cbiAgICBsZXQgcGF0dGVyblRyYW5zZm9ybTtcbiAgICBpZiAoY3VycmVudC5wYXR0ZXJuRmlsbCkge1xuICAgICAgY3R4LnNhdmUoKTtcbiAgICAgIGNvbnN0IHBhdHRlcm4gPSBjdXJyZW50LmZpbGxDb2xvci5nZXRQYXR0ZXJuKGN0eCwgdGhpcywgKDAsZGlzcGxheV91dGlscy5nZXRDdXJyZW50VHJhbnNmb3JtSW52ZXJzZSkoY3R4KSwgUGF0aFR5cGUuRklMTCk7XG4gICAgICBwYXR0ZXJuVHJhbnNmb3JtID0gKDAsZGlzcGxheV91dGlscy5nZXRDdXJyZW50VHJhbnNmb3JtKShjdHgpO1xuICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICAgIGN0eC5maWxsU3R5bGUgPSBwYXR0ZXJuO1xuICAgIH1cbiAgICBsZXQgbGluZVdpZHRoID0gY3VycmVudC5saW5lV2lkdGg7XG4gICAgY29uc3Qgc2NhbGUgPSBjdXJyZW50LnRleHRNYXRyaXhTY2FsZTtcbiAgICBpZiAoc2NhbGUgPT09IDAgfHwgbGluZVdpZHRoID09PSAwKSB7XG4gICAgICBjb25zdCBmaWxsU3Ryb2tlTW9kZSA9IGN1cnJlbnQudGV4dFJlbmRlcmluZ01vZGUgJiB1dGlsLlRleHRSZW5kZXJpbmdNb2RlLkZJTExfU1RST0tFX01BU0s7XG4gICAgICBpZiAoZmlsbFN0cm9rZU1vZGUgPT09IHV0aWwuVGV4dFJlbmRlcmluZ01vZGUuU1RST0tFIHx8IGZpbGxTdHJva2VNb2RlID09PSB1dGlsLlRleHRSZW5kZXJpbmdNb2RlLkZJTExfU1RST0tFKSB7XG4gICAgICAgIGxpbmVXaWR0aCA9IHRoaXMuZ2V0U2luZ2xlUGl4ZWxXaWR0aCgpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBsaW5lV2lkdGggLz0gc2NhbGU7XG4gICAgfVxuICAgIGlmIChmb250U2l6ZVNjYWxlICE9PSAxLjApIHtcbiAgICAgIGN0eC5zY2FsZShmb250U2l6ZVNjYWxlLCBmb250U2l6ZVNjYWxlKTtcbiAgICAgIGxpbmVXaWR0aCAvPSBmb250U2l6ZVNjYWxlO1xuICAgIH1cbiAgICBjdHgubGluZVdpZHRoID0gbGluZVdpZHRoO1xuICAgIGlmIChmb250LmlzSW52YWxpZFBERmpzRm9udCkge1xuICAgICAgY29uc3QgY2hhcnMgPSBbXTtcbiAgICAgIGxldCB3aWR0aCA9IDA7XG4gICAgICBmb3IgKGNvbnN0IGdseXBoIG9mIGdseXBocykge1xuICAgICAgICBjaGFycy5wdXNoKGdseXBoLnVuaWNvZGUpO1xuICAgICAgICB3aWR0aCArPSBnbHlwaC53aWR0aDtcbiAgICAgIH1cbiAgICAgIGN0eC5maWxsVGV4dChjaGFycy5qb2luKFwiXCIpLCAwLCAwKTtcbiAgICAgIGN1cnJlbnQueCArPSB3aWR0aCAqIHdpZHRoQWR2YW5jZVNjYWxlICogdGV4dEhTY2FsZTtcbiAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgICB0aGlzLmNvbXBvc2UoKTtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGxldCB4ID0gMCxcbiAgICAgIGk7XG4gICAgZm9yIChpID0gMDsgaSA8IGdseXBoc0xlbmd0aDsgKytpKSB7XG4gICAgICBjb25zdCBnbHlwaCA9IGdseXBoc1tpXTtcbiAgICAgIGlmICh0eXBlb2YgZ2x5cGggPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgeCArPSBzcGFjaW5nRGlyICogZ2x5cGggKiBmb250U2l6ZSAvIDEwMDA7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgbGV0IHJlc3RvcmVOZWVkZWQgPSBmYWxzZTtcbiAgICAgIGNvbnN0IHNwYWNpbmcgPSAoZ2x5cGguaXNTcGFjZSA/IHdvcmRTcGFjaW5nIDogMCkgKyBjaGFyU3BhY2luZztcbiAgICAgIGNvbnN0IGNoYXJhY3RlciA9IGdseXBoLmZvbnRDaGFyO1xuICAgICAgY29uc3QgYWNjZW50ID0gZ2x5cGguYWNjZW50O1xuICAgICAgbGV0IHNjYWxlZFgsIHNjYWxlZFk7XG4gICAgICBsZXQgd2lkdGggPSBnbHlwaC53aWR0aDtcbiAgICAgIGlmICh2ZXJ0aWNhbCkge1xuICAgICAgICBjb25zdCB2bWV0cmljID0gZ2x5cGgudm1ldHJpYyB8fCBkZWZhdWx0Vk1ldHJpY3M7XG4gICAgICAgIGNvbnN0IHZ4ID0gLShnbHlwaC52bWV0cmljID8gdm1ldHJpY1sxXSA6IHdpZHRoICogMC41KSAqIHdpZHRoQWR2YW5jZVNjYWxlO1xuICAgICAgICBjb25zdCB2eSA9IHZtZXRyaWNbMl0gKiB3aWR0aEFkdmFuY2VTY2FsZTtcbiAgICAgICAgd2lkdGggPSB2bWV0cmljID8gLXZtZXRyaWNbMF0gOiB3aWR0aDtcbiAgICAgICAgc2NhbGVkWCA9IHZ4IC8gZm9udFNpemVTY2FsZTtcbiAgICAgICAgc2NhbGVkWSA9ICh4ICsgdnkpIC8gZm9udFNpemVTY2FsZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNjYWxlZFggPSB4IC8gZm9udFNpemVTY2FsZTtcbiAgICAgICAgc2NhbGVkWSA9IDA7XG4gICAgICB9XG4gICAgICBpZiAoZm9udC5yZW1lYXN1cmUgJiYgd2lkdGggPiAwKSB7XG4gICAgICAgIGNvbnN0IG1lYXN1cmVkV2lkdGggPSBjdHgubWVhc3VyZVRleHQoY2hhcmFjdGVyKS53aWR0aCAqIDEwMDAgLyBmb250U2l6ZSAqIGZvbnRTaXplU2NhbGU7XG4gICAgICAgIGlmICh3aWR0aCA8IG1lYXN1cmVkV2lkdGggJiYgdGhpcy5pc0ZvbnRTdWJwaXhlbEFBRW5hYmxlZCkge1xuICAgICAgICAgIGNvbnN0IGNoYXJhY3RlclNjYWxlWCA9IHdpZHRoIC8gbWVhc3VyZWRXaWR0aDtcbiAgICAgICAgICByZXN0b3JlTmVlZGVkID0gdHJ1ZTtcbiAgICAgICAgICBjdHguc2F2ZSgpO1xuICAgICAgICAgIGN0eC5zY2FsZShjaGFyYWN0ZXJTY2FsZVgsIDEpO1xuICAgICAgICAgIHNjYWxlZFggLz0gY2hhcmFjdGVyU2NhbGVYO1xuICAgICAgICB9IGVsc2UgaWYgKHdpZHRoICE9PSBtZWFzdXJlZFdpZHRoKSB7XG4gICAgICAgICAgc2NhbGVkWCArPSAod2lkdGggLSBtZWFzdXJlZFdpZHRoKSAvIDIwMDAgKiBmb250U2l6ZSAvIGZvbnRTaXplU2NhbGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLmNvbnRlbnRWaXNpYmxlICYmIChnbHlwaC5pc0luRm9udCB8fCBmb250Lm1pc3NpbmdGaWxlKSkge1xuICAgICAgICBpZiAoc2ltcGxlRmlsbFRleHQgJiYgIWFjY2VudCkge1xuICAgICAgICAgIGN0eC5maWxsVGV4dChjaGFyYWN0ZXIsIHNjYWxlZFgsIHNjYWxlZFkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMucGFpbnRDaGFyKGNoYXJhY3Rlciwgc2NhbGVkWCwgc2NhbGVkWSwgcGF0dGVyblRyYW5zZm9ybSk7XG4gICAgICAgICAgaWYgKGFjY2VudCkge1xuICAgICAgICAgICAgY29uc3Qgc2NhbGVkQWNjZW50WCA9IHNjYWxlZFggKyBmb250U2l6ZSAqIGFjY2VudC5vZmZzZXQueCAvIGZvbnRTaXplU2NhbGU7XG4gICAgICAgICAgICBjb25zdCBzY2FsZWRBY2NlbnRZID0gc2NhbGVkWSAtIGZvbnRTaXplICogYWNjZW50Lm9mZnNldC55IC8gZm9udFNpemVTY2FsZTtcbiAgICAgICAgICAgIHRoaXMucGFpbnRDaGFyKGFjY2VudC5mb250Q2hhciwgc2NhbGVkQWNjZW50WCwgc2NhbGVkQWNjZW50WSwgcGF0dGVyblRyYW5zZm9ybSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjb25zdCBjaGFyV2lkdGggPSB2ZXJ0aWNhbCA/IHdpZHRoICogd2lkdGhBZHZhbmNlU2NhbGUgLSBzcGFjaW5nICogZm9udERpcmVjdGlvbiA6IHdpZHRoICogd2lkdGhBZHZhbmNlU2NhbGUgKyBzcGFjaW5nICogZm9udERpcmVjdGlvbjtcbiAgICAgIHggKz0gY2hhcldpZHRoO1xuICAgICAgaWYgKHJlc3RvcmVOZWVkZWQpIHtcbiAgICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHZlcnRpY2FsKSB7XG4gICAgICBjdXJyZW50LnkgLT0geDtcbiAgICB9IGVsc2Uge1xuICAgICAgY3VycmVudC54ICs9IHggKiB0ZXh0SFNjYWxlO1xuICAgIH1cbiAgICBjdHgucmVzdG9yZSgpO1xuICAgIHRoaXMuY29tcG9zZSgpO1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbiAgc2hvd1R5cGUzVGV4dChnbHlwaHMpIHtcbiAgICBjb25zdCBjdHggPSB0aGlzLmN0eDtcbiAgICBjb25zdCBjdXJyZW50ID0gdGhpcy5jdXJyZW50O1xuICAgIGNvbnN0IGZvbnQgPSBjdXJyZW50LmZvbnQ7XG4gICAgY29uc3QgZm9udFNpemUgPSBjdXJyZW50LmZvbnRTaXplO1xuICAgIGNvbnN0IGZvbnREaXJlY3Rpb24gPSBjdXJyZW50LmZvbnREaXJlY3Rpb247XG4gICAgY29uc3Qgc3BhY2luZ0RpciA9IGZvbnQudmVydGljYWwgPyAxIDogLTE7XG4gICAgY29uc3QgY2hhclNwYWNpbmcgPSBjdXJyZW50LmNoYXJTcGFjaW5nO1xuICAgIGNvbnN0IHdvcmRTcGFjaW5nID0gY3VycmVudC53b3JkU3BhY2luZztcbiAgICBjb25zdCB0ZXh0SFNjYWxlID0gY3VycmVudC50ZXh0SFNjYWxlICogZm9udERpcmVjdGlvbjtcbiAgICBjb25zdCBmb250TWF0cml4ID0gY3VycmVudC5mb250TWF0cml4IHx8IHV0aWwuRk9OVF9JREVOVElUWV9NQVRSSVg7XG4gICAgY29uc3QgZ2x5cGhzTGVuZ3RoID0gZ2x5cGhzLmxlbmd0aDtcbiAgICBjb25zdCBpc1RleHRJbnZpc2libGUgPSBjdXJyZW50LnRleHRSZW5kZXJpbmdNb2RlID09PSB1dGlsLlRleHRSZW5kZXJpbmdNb2RlLklOVklTSUJMRTtcbiAgICBsZXQgaSwgZ2x5cGgsIHdpZHRoLCBzcGFjaW5nTGVuZ3RoO1xuICAgIGlmIChpc1RleHRJbnZpc2libGUgfHwgZm9udFNpemUgPT09IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5fY2FjaGVkU2NhbGVGb3JTdHJva2luZ1swXSA9IC0xO1xuICAgIHRoaXMuX2NhY2hlZEdldFNpbmdsZVBpeGVsV2lkdGggPSBudWxsO1xuICAgIGN0eC5zYXZlKCk7XG4gICAgY3R4LnRyYW5zZm9ybSguLi5jdXJyZW50LnRleHRNYXRyaXgpO1xuICAgIGN0eC50cmFuc2xhdGUoY3VycmVudC54LCBjdXJyZW50LnkpO1xuICAgIGN0eC5zY2FsZSh0ZXh0SFNjYWxlLCBmb250RGlyZWN0aW9uKTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgZ2x5cGhzTGVuZ3RoOyArK2kpIHtcbiAgICAgIGdseXBoID0gZ2x5cGhzW2ldO1xuICAgICAgaWYgKHR5cGVvZiBnbHlwaCA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICBzcGFjaW5nTGVuZ3RoID0gc3BhY2luZ0RpciAqIGdseXBoICogZm9udFNpemUgLyAxMDAwO1xuICAgICAgICB0aGlzLmN0eC50cmFuc2xhdGUoc3BhY2luZ0xlbmd0aCwgMCk7XG4gICAgICAgIGN1cnJlbnQueCArPSBzcGFjaW5nTGVuZ3RoICogdGV4dEhTY2FsZTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBjb25zdCBzcGFjaW5nID0gKGdseXBoLmlzU3BhY2UgPyB3b3JkU3BhY2luZyA6IDApICsgY2hhclNwYWNpbmc7XG4gICAgICBjb25zdCBvcGVyYXRvckxpc3QgPSBmb250LmNoYXJQcm9jT3BlcmF0b3JMaXN0W2dseXBoLm9wZXJhdG9yTGlzdElkXTtcbiAgICAgIGlmICghb3BlcmF0b3JMaXN0KSB7XG4gICAgICAgICgwLHV0aWwud2FybikoYFR5cGUzIGNoYXJhY3RlciBcIiR7Z2x5cGgub3BlcmF0b3JMaXN0SWR9XCIgaXMgbm90IGF2YWlsYWJsZS5gKTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5jb250ZW50VmlzaWJsZSkge1xuICAgICAgICB0aGlzLnByb2Nlc3NpbmdUeXBlMyA9IGdseXBoO1xuICAgICAgICB0aGlzLnNhdmUoKTtcbiAgICAgICAgY3R4LnNjYWxlKGZvbnRTaXplLCBmb250U2l6ZSk7XG4gICAgICAgIGN0eC50cmFuc2Zvcm0oLi4uZm9udE1hdHJpeCk7XG4gICAgICAgIHRoaXMuZXhlY3V0ZU9wZXJhdG9yTGlzdChvcGVyYXRvckxpc3QpO1xuICAgICAgICB0aGlzLnJlc3RvcmUoKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHRyYW5zZm9ybWVkID0gdXRpbC5VdGlsLmFwcGx5VHJhbnNmb3JtKFtnbHlwaC53aWR0aCwgMF0sIGZvbnRNYXRyaXgpO1xuICAgICAgd2lkdGggPSB0cmFuc2Zvcm1lZFswXSAqIGZvbnRTaXplICsgc3BhY2luZztcbiAgICAgIGN0eC50cmFuc2xhdGUod2lkdGgsIDApO1xuICAgICAgY3VycmVudC54ICs9IHdpZHRoICogdGV4dEhTY2FsZTtcbiAgICB9XG4gICAgY3R4LnJlc3RvcmUoKTtcbiAgICB0aGlzLnByb2Nlc3NpbmdUeXBlMyA9IG51bGw7XG4gIH1cbiAgc2V0Q2hhcldpZHRoKHhXaWR0aCwgeVdpZHRoKSB7fVxuICBzZXRDaGFyV2lkdGhBbmRCb3VuZHMoeFdpZHRoLCB5V2lkdGgsIGxseCwgbGx5LCB1cngsIHVyeSkge1xuICAgIHRoaXMuY3R4LnJlY3QobGx4LCBsbHksIHVyeCAtIGxseCwgdXJ5IC0gbGx5KTtcbiAgICB0aGlzLmN0eC5jbGlwKCk7XG4gICAgdGhpcy5lbmRQYXRoKCk7XG4gIH1cbiAgZ2V0Q29sb3JOX1BhdHRlcm4oSVIpIHtcbiAgICBsZXQgcGF0dGVybjtcbiAgICBpZiAoSVJbMF0gPT09IFwiVGlsaW5nUGF0dGVyblwiKSB7XG4gICAgICBjb25zdCBjb2xvciA9IElSWzFdO1xuICAgICAgY29uc3QgYmFzZVRyYW5zZm9ybSA9IHRoaXMuYmFzZVRyYW5zZm9ybSB8fCAoMCxkaXNwbGF5X3V0aWxzLmdldEN1cnJlbnRUcmFuc2Zvcm0pKHRoaXMuY3R4KTtcbiAgICAgIGNvbnN0IGNhbnZhc0dyYXBoaWNzRmFjdG9yeSA9IHtcbiAgICAgICAgY3JlYXRlQ2FudmFzR3JhcGhpY3M6IGN0eCA9PiB7XG4gICAgICAgICAgcmV0dXJuIG5ldyBDYW52YXNHcmFwaGljcyhjdHgsIHRoaXMuY29tbW9uT2JqcywgdGhpcy5vYmpzLCB0aGlzLmNhbnZhc0ZhY3RvcnksIHRoaXMuZmlsdGVyRmFjdG9yeSwge1xuICAgICAgICAgICAgb3B0aW9uYWxDb250ZW50Q29uZmlnOiB0aGlzLm9wdGlvbmFsQ29udGVudENvbmZpZyxcbiAgICAgICAgICAgIG1hcmtlZENvbnRlbnRTdGFjazogdGhpcy5tYXJrZWRDb250ZW50U3RhY2tcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIHBhdHRlcm4gPSBuZXcgVGlsaW5nUGF0dGVybihJUiwgY29sb3IsIHRoaXMuY3R4LCBjYW52YXNHcmFwaGljc0ZhY3RvcnksIGJhc2VUcmFuc2Zvcm0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBwYXR0ZXJuID0gdGhpcy5fZ2V0UGF0dGVybihJUlsxXSwgSVJbMl0pO1xuICAgIH1cbiAgICByZXR1cm4gcGF0dGVybjtcbiAgfVxuICBzZXRTdHJva2VDb2xvck4oKSB7XG4gICAgdGhpcy5jdXJyZW50LnN0cm9rZUNvbG9yID0gdGhpcy5nZXRDb2xvck5fUGF0dGVybihhcmd1bWVudHMpO1xuICB9XG4gIHNldEZpbGxDb2xvck4oKSB7XG4gICAgdGhpcy5jdXJyZW50LmZpbGxDb2xvciA9IHRoaXMuZ2V0Q29sb3JOX1BhdHRlcm4oYXJndW1lbnRzKTtcbiAgICB0aGlzLmN1cnJlbnQucGF0dGVybkZpbGwgPSB0cnVlO1xuICB9XG4gIHNldFN0cm9rZVJHQkNvbG9yKHIsIGcsIGIpIHtcbiAgICBjb25zdCBjb2xvciA9IHV0aWwuVXRpbC5tYWtlSGV4Q29sb3IociwgZywgYik7XG4gICAgdGhpcy5jdHguc3Ryb2tlU3R5bGUgPSBjb2xvcjtcbiAgICB0aGlzLmN1cnJlbnQuc3Ryb2tlQ29sb3IgPSBjb2xvcjtcbiAgfVxuICBzZXRGaWxsUkdCQ29sb3IociwgZywgYikge1xuICAgIGNvbnN0IGNvbG9yID0gdXRpbC5VdGlsLm1ha2VIZXhDb2xvcihyLCBnLCBiKTtcbiAgICB0aGlzLmN0eC5maWxsU3R5bGUgPSBjb2xvcjtcbiAgICB0aGlzLmN1cnJlbnQuZmlsbENvbG9yID0gY29sb3I7XG4gICAgdGhpcy5jdXJyZW50LnBhdHRlcm5GaWxsID0gZmFsc2U7XG4gIH1cbiAgX2dldFBhdHRlcm4ob2JqSWQsIG1hdHJpeCA9IG51bGwpIHtcbiAgICBsZXQgcGF0dGVybjtcbiAgICBpZiAodGhpcy5jYWNoZWRQYXR0ZXJucy5oYXMob2JqSWQpKSB7XG4gICAgICBwYXR0ZXJuID0gdGhpcy5jYWNoZWRQYXR0ZXJucy5nZXQob2JqSWQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBwYXR0ZXJuID0gZ2V0U2hhZGluZ1BhdHRlcm4odGhpcy5nZXRPYmplY3Qob2JqSWQpKTtcbiAgICAgIHRoaXMuY2FjaGVkUGF0dGVybnMuc2V0KG9iaklkLCBwYXR0ZXJuKTtcbiAgICB9XG4gICAgaWYgKG1hdHJpeCkge1xuICAgICAgcGF0dGVybi5tYXRyaXggPSBtYXRyaXg7XG4gICAgfVxuICAgIHJldHVybiBwYXR0ZXJuO1xuICB9XG4gIHNoYWRpbmdGaWxsKG9iaklkKSB7XG4gICAgaWYgKCF0aGlzLmNvbnRlbnRWaXNpYmxlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGN0eCA9IHRoaXMuY3R4O1xuICAgIHRoaXMuc2F2ZSgpO1xuICAgIGNvbnN0IHBhdHRlcm4gPSB0aGlzLl9nZXRQYXR0ZXJuKG9iaklkKTtcbiAgICBjdHguZmlsbFN0eWxlID0gcGF0dGVybi5nZXRQYXR0ZXJuKGN0eCwgdGhpcywgKDAsZGlzcGxheV91dGlscy5nZXRDdXJyZW50VHJhbnNmb3JtSW52ZXJzZSkoY3R4KSwgUGF0aFR5cGUuU0hBRElORyk7XG4gICAgY29uc3QgaW52ID0gKDAsZGlzcGxheV91dGlscy5nZXRDdXJyZW50VHJhbnNmb3JtSW52ZXJzZSkoY3R4KTtcbiAgICBpZiAoaW52KSB7XG4gICAgICBjb25zdCB7XG4gICAgICAgIHdpZHRoLFxuICAgICAgICBoZWlnaHRcbiAgICAgIH0gPSBjdHguY2FudmFzO1xuICAgICAgY29uc3QgW3gwLCB5MCwgeDEsIHkxXSA9IHV0aWwuVXRpbC5nZXRBeGlhbEFsaWduZWRCb3VuZGluZ0JveChbMCwgMCwgd2lkdGgsIGhlaWdodF0sIGludik7XG4gICAgICB0aGlzLmN0eC5maWxsUmVjdCh4MCwgeTAsIHgxIC0geDAsIHkxIC0geTApO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmN0eC5maWxsUmVjdCgtMWUxMCwgLTFlMTAsIDJlMTAsIDJlMTApO1xuICAgIH1cbiAgICB0aGlzLmNvbXBvc2UodGhpcy5jdXJyZW50LmdldENsaXBwZWRQYXRoQm91bmRpbmdCb3goKSk7XG4gICAgdGhpcy5yZXN0b3JlKCk7XG4gIH1cbiAgYmVnaW5JbmxpbmVJbWFnZSgpIHtcbiAgICAoMCx1dGlsLnVucmVhY2hhYmxlKShcIlNob3VsZCBub3QgY2FsbCBiZWdpbklubGluZUltYWdlXCIpO1xuICB9XG4gIGJlZ2luSW1hZ2VEYXRhKCkge1xuICAgICgwLHV0aWwudW5yZWFjaGFibGUpKFwiU2hvdWxkIG5vdCBjYWxsIGJlZ2luSW1hZ2VEYXRhXCIpO1xuICB9XG4gIHBhaW50Rm9ybVhPYmplY3RCZWdpbihtYXRyaXgsIGJib3gpIHtcbiAgICBpZiAoIXRoaXMuY29udGVudFZpc2libGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5zYXZlKCk7XG4gICAgdGhpcy5iYXNlVHJhbnNmb3JtU3RhY2sucHVzaCh0aGlzLmJhc2VUcmFuc2Zvcm0pO1xuICAgIGlmIChBcnJheS5pc0FycmF5KG1hdHJpeCkgJiYgbWF0cml4Lmxlbmd0aCA9PT0gNikge1xuICAgICAgdGhpcy50cmFuc2Zvcm0oLi4ubWF0cml4KTtcbiAgICB9XG4gICAgdGhpcy5iYXNlVHJhbnNmb3JtID0gKDAsZGlzcGxheV91dGlscy5nZXRDdXJyZW50VHJhbnNmb3JtKSh0aGlzLmN0eCk7XG4gICAgaWYgKGJib3gpIHtcbiAgICAgIGNvbnN0IHdpZHRoID0gYmJveFsyXSAtIGJib3hbMF07XG4gICAgICBjb25zdCBoZWlnaHQgPSBiYm94WzNdIC0gYmJveFsxXTtcbiAgICAgIHRoaXMuY3R4LnJlY3QoYmJveFswXSwgYmJveFsxXSwgd2lkdGgsIGhlaWdodCk7XG4gICAgICB0aGlzLmN1cnJlbnQudXBkYXRlUmVjdE1pbk1heCgoMCxkaXNwbGF5X3V0aWxzLmdldEN1cnJlbnRUcmFuc2Zvcm0pKHRoaXMuY3R4KSwgYmJveCk7XG4gICAgICB0aGlzLmNsaXAoKTtcbiAgICAgIHRoaXMuZW5kUGF0aCgpO1xuICAgIH1cbiAgfVxuICBwYWludEZvcm1YT2JqZWN0RW5kKCkge1xuICAgIGlmICghdGhpcy5jb250ZW50VmlzaWJsZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLnJlc3RvcmUoKTtcbiAgICB0aGlzLmJhc2VUcmFuc2Zvcm0gPSB0aGlzLmJhc2VUcmFuc2Zvcm1TdGFjay5wb3AoKTtcbiAgfVxuICBiZWdpbkdyb3VwKGdyb3VwKSB7XG4gICAgaWYgKCF0aGlzLmNvbnRlbnRWaXNpYmxlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuc2F2ZSgpO1xuICAgIGlmICh0aGlzLmluU01hc2tNb2RlKSB7XG4gICAgICB0aGlzLmVuZFNNYXNrTW9kZSgpO1xuICAgICAgdGhpcy5jdXJyZW50LmFjdGl2ZVNNYXNrID0gbnVsbDtcbiAgICB9XG4gICAgY29uc3QgY3VycmVudEN0eCA9IHRoaXMuY3R4O1xuICAgIGlmICghZ3JvdXAuaXNvbGF0ZWQpIHtcbiAgICAgICgwLHV0aWwuaW5mbykoXCJUT0RPOiBTdXBwb3J0IG5vbi1pc29sYXRlZCBncm91cHMuXCIpO1xuICAgIH1cbiAgICBpZiAoZ3JvdXAua25vY2tvdXQpIHtcbiAgICAgICgwLHV0aWwud2FybikoXCJLbm9ja291dCBncm91cHMgbm90IHN1cHBvcnRlZC5cIik7XG4gICAgfVxuICAgIGNvbnN0IGN1cnJlbnRUcmFuc2Zvcm0gPSAoMCxkaXNwbGF5X3V0aWxzLmdldEN1cnJlbnRUcmFuc2Zvcm0pKGN1cnJlbnRDdHgpO1xuICAgIGlmIChncm91cC5tYXRyaXgpIHtcbiAgICAgIGN1cnJlbnRDdHgudHJhbnNmb3JtKC4uLmdyb3VwLm1hdHJpeCk7XG4gICAgfVxuICAgIGlmICghZ3JvdXAuYmJveCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQm91bmRpbmcgYm94IGlzIHJlcXVpcmVkLlwiKTtcbiAgICB9XG4gICAgbGV0IGJvdW5kcyA9IHV0aWwuVXRpbC5nZXRBeGlhbEFsaWduZWRCb3VuZGluZ0JveChncm91cC5iYm94LCAoMCxkaXNwbGF5X3V0aWxzLmdldEN1cnJlbnRUcmFuc2Zvcm0pKGN1cnJlbnRDdHgpKTtcbiAgICBjb25zdCBjYW52YXNCb3VuZHMgPSBbMCwgMCwgY3VycmVudEN0eC5jYW52YXMud2lkdGgsIGN1cnJlbnRDdHguY2FudmFzLmhlaWdodF07XG4gICAgYm91bmRzID0gdXRpbC5VdGlsLmludGVyc2VjdChib3VuZHMsIGNhbnZhc0JvdW5kcykgfHwgWzAsIDAsIDAsIDBdO1xuICAgIGNvbnN0IG9mZnNldFggPSBNYXRoLmZsb29yKGJvdW5kc1swXSk7XG4gICAgY29uc3Qgb2Zmc2V0WSA9IE1hdGguZmxvb3IoYm91bmRzWzFdKTtcbiAgICBsZXQgZHJhd25XaWR0aCA9IE1hdGgubWF4KE1hdGguY2VpbChib3VuZHNbMl0pIC0gb2Zmc2V0WCwgMSk7XG4gICAgbGV0IGRyYXduSGVpZ2h0ID0gTWF0aC5tYXgoTWF0aC5jZWlsKGJvdW5kc1szXSkgLSBvZmZzZXRZLCAxKTtcbiAgICBsZXQgc2NhbGVYID0gMSxcbiAgICAgIHNjYWxlWSA9IDE7XG4gICAgaWYgKGRyYXduV2lkdGggPiBNQVhfR1JPVVBfU0laRSkge1xuICAgICAgc2NhbGVYID0gZHJhd25XaWR0aCAvIE1BWF9HUk9VUF9TSVpFO1xuICAgICAgZHJhd25XaWR0aCA9IE1BWF9HUk9VUF9TSVpFO1xuICAgIH1cbiAgICBpZiAoZHJhd25IZWlnaHQgPiBNQVhfR1JPVVBfU0laRSkge1xuICAgICAgc2NhbGVZID0gZHJhd25IZWlnaHQgLyBNQVhfR1JPVVBfU0laRTtcbiAgICAgIGRyYXduSGVpZ2h0ID0gTUFYX0dST1VQX1NJWkU7XG4gICAgfVxuICAgIHRoaXMuY3VycmVudC5zdGFydE5ld1BhdGhBbmRDbGlwQm94KFswLCAwLCBkcmF3bldpZHRoLCBkcmF3bkhlaWdodF0pO1xuICAgIGxldCBjYWNoZUlkID0gXCJncm91cEF0XCIgKyB0aGlzLmdyb3VwTGV2ZWw7XG4gICAgaWYgKGdyb3VwLnNtYXNrKSB7XG4gICAgICBjYWNoZUlkICs9IFwiX3NtYXNrX1wiICsgdGhpcy5zbWFza0NvdW50ZXIrKyAlIDI7XG4gICAgfVxuICAgIGNvbnN0IHNjcmF0Y2hDYW52YXMgPSB0aGlzLmNhY2hlZENhbnZhc2VzLmdldENhbnZhcyhjYWNoZUlkLCBkcmF3bldpZHRoLCBkcmF3bkhlaWdodCk7XG4gICAgY29uc3QgZ3JvdXBDdHggPSBzY3JhdGNoQ2FudmFzLmNvbnRleHQ7XG4gICAgZ3JvdXBDdHguc2NhbGUoMSAvIHNjYWxlWCwgMSAvIHNjYWxlWSk7XG4gICAgZ3JvdXBDdHgudHJhbnNsYXRlKC1vZmZzZXRYLCAtb2Zmc2V0WSk7XG4gICAgZ3JvdXBDdHgudHJhbnNmb3JtKC4uLmN1cnJlbnRUcmFuc2Zvcm0pO1xuICAgIGlmIChncm91cC5zbWFzaykge1xuICAgICAgdGhpcy5zbWFza1N0YWNrLnB1c2goe1xuICAgICAgICBjYW52YXM6IHNjcmF0Y2hDYW52YXMuY2FudmFzLFxuICAgICAgICBjb250ZXh0OiBncm91cEN0eCxcbiAgICAgICAgb2Zmc2V0WCxcbiAgICAgICAgb2Zmc2V0WSxcbiAgICAgICAgc2NhbGVYLFxuICAgICAgICBzY2FsZVksXG4gICAgICAgIHN1YnR5cGU6IGdyb3VwLnNtYXNrLnN1YnR5cGUsXG4gICAgICAgIGJhY2tkcm9wOiBncm91cC5zbWFzay5iYWNrZHJvcCxcbiAgICAgICAgdHJhbnNmZXJNYXA6IGdyb3VwLnNtYXNrLnRyYW5zZmVyTWFwIHx8IG51bGwsXG4gICAgICAgIHN0YXJ0VHJhbnNmb3JtSW52ZXJzZTogbnVsbFxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGN1cnJlbnRDdHguc2V0VHJhbnNmb3JtKDEsIDAsIDAsIDEsIDAsIDApO1xuICAgICAgY3VycmVudEN0eC50cmFuc2xhdGUob2Zmc2V0WCwgb2Zmc2V0WSk7XG4gICAgICBjdXJyZW50Q3R4LnNjYWxlKHNjYWxlWCwgc2NhbGVZKTtcbiAgICAgIGN1cnJlbnRDdHguc2F2ZSgpO1xuICAgIH1cbiAgICBjb3B5Q3R4U3RhdGUoY3VycmVudEN0eCwgZ3JvdXBDdHgpO1xuICAgIHRoaXMuY3R4ID0gZ3JvdXBDdHg7XG4gICAgdGhpcy5zZXRHU3RhdGUoW1tcIkJNXCIsIFwic291cmNlLW92ZXJcIl0sIFtcImNhXCIsIDFdLCBbXCJDQVwiLCAxXV0pO1xuICAgIHRoaXMuZ3JvdXBTdGFjay5wdXNoKGN1cnJlbnRDdHgpO1xuICAgIHRoaXMuZ3JvdXBMZXZlbCsrO1xuICB9XG4gIGVuZEdyb3VwKGdyb3VwKSB7XG4gICAgaWYgKCF0aGlzLmNvbnRlbnRWaXNpYmxlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuZ3JvdXBMZXZlbC0tO1xuICAgIGNvbnN0IGdyb3VwQ3R4ID0gdGhpcy5jdHg7XG4gICAgY29uc3QgY3R4ID0gdGhpcy5ncm91cFN0YWNrLnBvcCgpO1xuICAgIHRoaXMuY3R4ID0gY3R4O1xuICAgIHRoaXMuY3R4LmltYWdlU21vb3RoaW5nRW5hYmxlZCA9IGZhbHNlO1xuICAgIGlmIChncm91cC5zbWFzaykge1xuICAgICAgdGhpcy50ZW1wU01hc2sgPSB0aGlzLnNtYXNrU3RhY2sucG9wKCk7XG4gICAgICB0aGlzLnJlc3RvcmUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5jdHgucmVzdG9yZSgpO1xuICAgICAgY29uc3QgY3VycmVudE10eCA9ICgwLGRpc3BsYXlfdXRpbHMuZ2V0Q3VycmVudFRyYW5zZm9ybSkodGhpcy5jdHgpO1xuICAgICAgdGhpcy5yZXN0b3JlKCk7XG4gICAgICB0aGlzLmN0eC5zYXZlKCk7XG4gICAgICB0aGlzLmN0eC5zZXRUcmFuc2Zvcm0oLi4uY3VycmVudE10eCk7XG4gICAgICBjb25zdCBkaXJ0eUJveCA9IHV0aWwuVXRpbC5nZXRBeGlhbEFsaWduZWRCb3VuZGluZ0JveChbMCwgMCwgZ3JvdXBDdHguY2FudmFzLndpZHRoLCBncm91cEN0eC5jYW52YXMuaGVpZ2h0XSwgY3VycmVudE10eCk7XG4gICAgICB0aGlzLmN0eC5kcmF3SW1hZ2UoZ3JvdXBDdHguY2FudmFzLCAwLCAwKTtcbiAgICAgIHRoaXMuY3R4LnJlc3RvcmUoKTtcbiAgICAgIHRoaXMuY29tcG9zZShkaXJ0eUJveCk7XG4gICAgfVxuICB9XG4gIGJlZ2luQW5ub3RhdGlvbihpZCwgcmVjdCwgdHJhbnNmb3JtLCBtYXRyaXgsIGhhc093bkNhbnZhcykge1xuICAgIHRoaXMuI3Jlc3RvcmVJbml0aWFsU3RhdGUoKTtcbiAgICByZXNldEN0eFRvRGVmYXVsdCh0aGlzLmN0eCk7XG4gICAgdGhpcy5jdHguc2F2ZSgpO1xuICAgIHRoaXMuc2F2ZSgpO1xuICAgIGlmICh0aGlzLmJhc2VUcmFuc2Zvcm0pIHtcbiAgICAgIHRoaXMuY3R4LnNldFRyYW5zZm9ybSguLi50aGlzLmJhc2VUcmFuc2Zvcm0pO1xuICAgIH1cbiAgICBpZiAoQXJyYXkuaXNBcnJheShyZWN0KSAmJiByZWN0Lmxlbmd0aCA9PT0gNCkge1xuICAgICAgY29uc3Qgd2lkdGggPSByZWN0WzJdIC0gcmVjdFswXTtcbiAgICAgIGNvbnN0IGhlaWdodCA9IHJlY3RbM10gLSByZWN0WzFdO1xuICAgICAgaWYgKGhhc093bkNhbnZhcyAmJiB0aGlzLmFubm90YXRpb25DYW52YXNNYXApIHtcbiAgICAgICAgdHJhbnNmb3JtID0gdHJhbnNmb3JtLnNsaWNlKCk7XG4gICAgICAgIHRyYW5zZm9ybVs0XSAtPSByZWN0WzBdO1xuICAgICAgICB0cmFuc2Zvcm1bNV0gLT0gcmVjdFsxXTtcbiAgICAgICAgcmVjdCA9IHJlY3Quc2xpY2UoKTtcbiAgICAgICAgcmVjdFswXSA9IHJlY3RbMV0gPSAwO1xuICAgICAgICByZWN0WzJdID0gd2lkdGg7XG4gICAgICAgIHJlY3RbM10gPSBoZWlnaHQ7XG4gICAgICAgIGNvbnN0IFtzY2FsZVgsIHNjYWxlWV0gPSB1dGlsLlV0aWwuc2luZ3VsYXJWYWx1ZURlY29tcG9zZTJkU2NhbGUoKDAsZGlzcGxheV91dGlscy5nZXRDdXJyZW50VHJhbnNmb3JtKSh0aGlzLmN0eCkpO1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgdmlld3BvcnRTY2FsZVxuICAgICAgICB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgY2FudmFzV2lkdGggPSBNYXRoLmNlaWwod2lkdGggKiB0aGlzLm91dHB1dFNjYWxlWCAqIHZpZXdwb3J0U2NhbGUpO1xuICAgICAgICBjb25zdCBjYW52YXNIZWlnaHQgPSBNYXRoLmNlaWwoaGVpZ2h0ICogdGhpcy5vdXRwdXRTY2FsZVkgKiB2aWV3cG9ydFNjYWxlKTtcbiAgICAgICAgdGhpcy5hbm5vdGF0aW9uQ2FudmFzID0gdGhpcy5jYW52YXNGYWN0b3J5LmNyZWF0ZShjYW52YXNXaWR0aCwgY2FudmFzSGVpZ2h0KTtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgIGNhbnZhcyxcbiAgICAgICAgICBjb250ZXh0XG4gICAgICAgIH0gPSB0aGlzLmFubm90YXRpb25DYW52YXM7XG4gICAgICAgIHRoaXMuYW5ub3RhdGlvbkNhbnZhc01hcC5zZXQoaWQsIGNhbnZhcyk7XG4gICAgICAgIHRoaXMuYW5ub3RhdGlvbkNhbnZhcy5zYXZlZEN0eCA9IHRoaXMuY3R4O1xuICAgICAgICB0aGlzLmN0eCA9IGNvbnRleHQ7XG4gICAgICAgIHRoaXMuY3R4LnNhdmUoKTtcbiAgICAgICAgdGhpcy5jdHguc2V0VHJhbnNmb3JtKHNjYWxlWCwgMCwgMCwgLXNjYWxlWSwgMCwgaGVpZ2h0ICogc2NhbGVZKTtcbiAgICAgICAgcmVzZXRDdHhUb0RlZmF1bHQodGhpcy5jdHgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzZXRDdHhUb0RlZmF1bHQodGhpcy5jdHgpO1xuICAgICAgICB0aGlzLmN0eC5yZWN0KHJlY3RbMF0sIHJlY3RbMV0sIHdpZHRoLCBoZWlnaHQpO1xuICAgICAgICB0aGlzLmN0eC5jbGlwKCk7XG4gICAgICAgIHRoaXMuZW5kUGF0aCgpO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLmN1cnJlbnQgPSBuZXcgQ2FudmFzRXh0cmFTdGF0ZSh0aGlzLmN0eC5jYW52YXMud2lkdGgsIHRoaXMuY3R4LmNhbnZhcy5oZWlnaHQpO1xuICAgIHRoaXMudHJhbnNmb3JtKC4uLnRyYW5zZm9ybSk7XG4gICAgdGhpcy50cmFuc2Zvcm0oLi4ubWF0cml4KTtcbiAgfVxuICBlbmRBbm5vdGF0aW9uKCkge1xuICAgIGlmICh0aGlzLmFubm90YXRpb25DYW52YXMpIHtcbiAgICAgIHRoaXMuY3R4LnJlc3RvcmUoKTtcbiAgICAgIHRoaXMuI2RyYXdGaWx0ZXIoKTtcbiAgICAgIHRoaXMuY3R4ID0gdGhpcy5hbm5vdGF0aW9uQ2FudmFzLnNhdmVkQ3R4O1xuICAgICAgZGVsZXRlIHRoaXMuYW5ub3RhdGlvbkNhbnZhcy5zYXZlZEN0eDtcbiAgICAgIGRlbGV0ZSB0aGlzLmFubm90YXRpb25DYW52YXM7XG4gICAgfVxuICB9XG4gIHBhaW50SW1hZ2VNYXNrWE9iamVjdChpbWcpIHtcbiAgICBpZiAoIXRoaXMuY29udGVudFZpc2libGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgY291bnQgPSBpbWcuY291bnQ7XG4gICAgaW1nID0gdGhpcy5nZXRPYmplY3QoaW1nLmRhdGEsIGltZyk7XG4gICAgaW1nLmNvdW50ID0gY291bnQ7XG4gICAgY29uc3QgY3R4ID0gdGhpcy5jdHg7XG4gICAgY29uc3QgZ2x5cGggPSB0aGlzLnByb2Nlc3NpbmdUeXBlMztcbiAgICBpZiAoZ2x5cGgpIHtcbiAgICAgIGlmIChnbHlwaC5jb21waWxlZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGdseXBoLmNvbXBpbGVkID0gY29tcGlsZVR5cGUzR2x5cGgoaW1nKTtcbiAgICAgIH1cbiAgICAgIGlmIChnbHlwaC5jb21waWxlZCkge1xuICAgICAgICBnbHlwaC5jb21waWxlZChjdHgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IG1hc2sgPSB0aGlzLl9jcmVhdGVNYXNrQ2FudmFzKGltZyk7XG4gICAgY29uc3QgbWFza0NhbnZhcyA9IG1hc2suY2FudmFzO1xuICAgIGN0eC5zYXZlKCk7XG4gICAgY3R4LnNldFRyYW5zZm9ybSgxLCAwLCAwLCAxLCAwLCAwKTtcbiAgICBjdHguZHJhd0ltYWdlKG1hc2tDYW52YXMsIG1hc2sub2Zmc2V0WCwgbWFzay5vZmZzZXRZKTtcbiAgICBjdHgucmVzdG9yZSgpO1xuICAgIHRoaXMuY29tcG9zZSgpO1xuICB9XG4gIHBhaW50SW1hZ2VNYXNrWE9iamVjdFJlcGVhdChpbWcsIHNjYWxlWCwgc2tld1ggPSAwLCBza2V3WSA9IDAsIHNjYWxlWSwgcG9zaXRpb25zKSB7XG4gICAgaWYgKCF0aGlzLmNvbnRlbnRWaXNpYmxlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGltZyA9IHRoaXMuZ2V0T2JqZWN0KGltZy5kYXRhLCBpbWcpO1xuICAgIGNvbnN0IGN0eCA9IHRoaXMuY3R4O1xuICAgIGN0eC5zYXZlKCk7XG4gICAgY29uc3QgY3VycmVudFRyYW5zZm9ybSA9ICgwLGRpc3BsYXlfdXRpbHMuZ2V0Q3VycmVudFRyYW5zZm9ybSkoY3R4KTtcbiAgICBjdHgudHJhbnNmb3JtKHNjYWxlWCwgc2tld1gsIHNrZXdZLCBzY2FsZVksIDAsIDApO1xuICAgIGNvbnN0IG1hc2sgPSB0aGlzLl9jcmVhdGVNYXNrQ2FudmFzKGltZyk7XG4gICAgY3R4LnNldFRyYW5zZm9ybSgxLCAwLCAwLCAxLCBtYXNrLm9mZnNldFggLSBjdXJyZW50VHJhbnNmb3JtWzRdLCBtYXNrLm9mZnNldFkgLSBjdXJyZW50VHJhbnNmb3JtWzVdKTtcbiAgICBmb3IgKGxldCBpID0gMCwgaWkgPSBwb3NpdGlvbnMubGVuZ3RoOyBpIDwgaWk7IGkgKz0gMikge1xuICAgICAgY29uc3QgdHJhbnMgPSB1dGlsLlV0aWwudHJhbnNmb3JtKGN1cnJlbnRUcmFuc2Zvcm0sIFtzY2FsZVgsIHNrZXdYLCBza2V3WSwgc2NhbGVZLCBwb3NpdGlvbnNbaV0sIHBvc2l0aW9uc1tpICsgMV1dKTtcbiAgICAgIGNvbnN0IFt4LCB5XSA9IHV0aWwuVXRpbC5hcHBseVRyYW5zZm9ybShbMCwgMF0sIHRyYW5zKTtcbiAgICAgIGN0eC5kcmF3SW1hZ2UobWFzay5jYW52YXMsIHgsIHkpO1xuICAgIH1cbiAgICBjdHgucmVzdG9yZSgpO1xuICAgIHRoaXMuY29tcG9zZSgpO1xuICB9XG4gIHBhaW50SW1hZ2VNYXNrWE9iamVjdEdyb3VwKGltYWdlcykge1xuICAgIGlmICghdGhpcy5jb250ZW50VmlzaWJsZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBjdHggPSB0aGlzLmN0eDtcbiAgICBjb25zdCBmaWxsQ29sb3IgPSB0aGlzLmN1cnJlbnQuZmlsbENvbG9yO1xuICAgIGNvbnN0IGlzUGF0dGVybkZpbGwgPSB0aGlzLmN1cnJlbnQucGF0dGVybkZpbGw7XG4gICAgZm9yIChjb25zdCBpbWFnZSBvZiBpbWFnZXMpIHtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgZGF0YSxcbiAgICAgICAgd2lkdGgsXG4gICAgICAgIGhlaWdodCxcbiAgICAgICAgdHJhbnNmb3JtXG4gICAgICB9ID0gaW1hZ2U7XG4gICAgICBjb25zdCBtYXNrQ2FudmFzID0gdGhpcy5jYWNoZWRDYW52YXNlcy5nZXRDYW52YXMoXCJtYXNrQ2FudmFzXCIsIHdpZHRoLCBoZWlnaHQpO1xuICAgICAgY29uc3QgbWFza0N0eCA9IG1hc2tDYW52YXMuY29udGV4dDtcbiAgICAgIG1hc2tDdHguc2F2ZSgpO1xuICAgICAgY29uc3QgaW1nID0gdGhpcy5nZXRPYmplY3QoZGF0YSwgaW1hZ2UpO1xuICAgICAgcHV0QmluYXJ5SW1hZ2VNYXNrKG1hc2tDdHgsIGltZyk7XG4gICAgICBtYXNrQ3R4Lmdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbiA9IFwic291cmNlLWluXCI7XG4gICAgICBtYXNrQ3R4LmZpbGxTdHlsZSA9IGlzUGF0dGVybkZpbGwgPyBmaWxsQ29sb3IuZ2V0UGF0dGVybihtYXNrQ3R4LCB0aGlzLCAoMCxkaXNwbGF5X3V0aWxzLmdldEN1cnJlbnRUcmFuc2Zvcm1JbnZlcnNlKShjdHgpLCBQYXRoVHlwZS5GSUxMKSA6IGZpbGxDb2xvcjtcbiAgICAgIG1hc2tDdHguZmlsbFJlY3QoMCwgMCwgd2lkdGgsIGhlaWdodCk7XG4gICAgICBtYXNrQ3R4LnJlc3RvcmUoKTtcbiAgICAgIGN0eC5zYXZlKCk7XG4gICAgICBjdHgudHJhbnNmb3JtKC4uLnRyYW5zZm9ybSk7XG4gICAgICBjdHguc2NhbGUoMSwgLTEpO1xuICAgICAgZHJhd0ltYWdlQXRJbnRlZ2VyQ29vcmRzKGN0eCwgbWFza0NhbnZhcy5jYW52YXMsIDAsIDAsIHdpZHRoLCBoZWlnaHQsIDAsIC0xLCAxLCAxKTtcbiAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgfVxuICAgIHRoaXMuY29tcG9zZSgpO1xuICB9XG4gIHBhaW50SW1hZ2VYT2JqZWN0KG9iaklkKSB7XG4gICAgaWYgKCF0aGlzLmNvbnRlbnRWaXNpYmxlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGltZ0RhdGEgPSB0aGlzLmdldE9iamVjdChvYmpJZCk7XG4gICAgaWYgKCFpbWdEYXRhKSB7XG4gICAgICAoMCx1dGlsLndhcm4pKFwiRGVwZW5kZW50IGltYWdlIGlzbid0IHJlYWR5IHlldFwiKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5wYWludElubGluZUltYWdlWE9iamVjdChpbWdEYXRhKTtcbiAgfVxuICBwYWludEltYWdlWE9iamVjdFJlcGVhdChvYmpJZCwgc2NhbGVYLCBzY2FsZVksIHBvc2l0aW9ucykge1xuICAgIGlmICghdGhpcy5jb250ZW50VmlzaWJsZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBpbWdEYXRhID0gdGhpcy5nZXRPYmplY3Qob2JqSWQpO1xuICAgIGlmICghaW1nRGF0YSkge1xuICAgICAgKDAsdXRpbC53YXJuKShcIkRlcGVuZGVudCBpbWFnZSBpc24ndCByZWFkeSB5ZXRcIik7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHdpZHRoID0gaW1nRGF0YS53aWR0aDtcbiAgICBjb25zdCBoZWlnaHQgPSBpbWdEYXRhLmhlaWdodDtcbiAgICBjb25zdCBtYXAgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMCwgaWkgPSBwb3NpdGlvbnMubGVuZ3RoOyBpIDwgaWk7IGkgKz0gMikge1xuICAgICAgbWFwLnB1c2goe1xuICAgICAgICB0cmFuc2Zvcm06IFtzY2FsZVgsIDAsIDAsIHNjYWxlWSwgcG9zaXRpb25zW2ldLCBwb3NpdGlvbnNbaSArIDFdXSxcbiAgICAgICAgeDogMCxcbiAgICAgICAgeTogMCxcbiAgICAgICAgdzogd2lkdGgsXG4gICAgICAgIGg6IGhlaWdodFxuICAgICAgfSk7XG4gICAgfVxuICAgIHRoaXMucGFpbnRJbmxpbmVJbWFnZVhPYmplY3RHcm91cChpbWdEYXRhLCBtYXApO1xuICB9XG4gIGFwcGx5VHJhbnNmZXJNYXBzVG9DYW52YXMoY3R4KSB7XG4gICAgaWYgKHRoaXMuY3VycmVudC50cmFuc2Zlck1hcHMgIT09IFwibm9uZVwiKSB7XG4gICAgICBjdHguZmlsdGVyID0gdGhpcy5jdXJyZW50LnRyYW5zZmVyTWFwcztcbiAgICAgIGN0eC5kcmF3SW1hZ2UoY3R4LmNhbnZhcywgMCwgMCk7XG4gICAgICBjdHguZmlsdGVyID0gXCJub25lXCI7XG4gICAgfVxuICAgIHJldHVybiBjdHguY2FudmFzO1xuICB9XG4gIGFwcGx5VHJhbnNmZXJNYXBzVG9CaXRtYXAoaW1nRGF0YSkge1xuICAgIGlmICh0aGlzLmN1cnJlbnQudHJhbnNmZXJNYXBzID09PSBcIm5vbmVcIikge1xuICAgICAgcmV0dXJuIGltZ0RhdGEuYml0bWFwO1xuICAgIH1cbiAgICBjb25zdCB7XG4gICAgICBiaXRtYXAsXG4gICAgICB3aWR0aCxcbiAgICAgIGhlaWdodFxuICAgIH0gPSBpbWdEYXRhO1xuICAgIGNvbnN0IHRtcENhbnZhcyA9IHRoaXMuY2FjaGVkQ2FudmFzZXMuZ2V0Q2FudmFzKFwiaW5saW5lSW1hZ2VcIiwgd2lkdGgsIGhlaWdodCk7XG4gICAgY29uc3QgdG1wQ3R4ID0gdG1wQ2FudmFzLmNvbnRleHQ7XG4gICAgdG1wQ3R4LmZpbHRlciA9IHRoaXMuY3VycmVudC50cmFuc2Zlck1hcHM7XG4gICAgdG1wQ3R4LmRyYXdJbWFnZShiaXRtYXAsIDAsIDApO1xuICAgIHRtcEN0eC5maWx0ZXIgPSBcIm5vbmVcIjtcbiAgICByZXR1cm4gdG1wQ2FudmFzLmNhbnZhcztcbiAgfVxuICBwYWludElubGluZUltYWdlWE9iamVjdChpbWdEYXRhKSB7XG4gICAgaWYgKCF0aGlzLmNvbnRlbnRWaXNpYmxlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHdpZHRoID0gaW1nRGF0YS53aWR0aDtcbiAgICBjb25zdCBoZWlnaHQgPSBpbWdEYXRhLmhlaWdodDtcbiAgICBjb25zdCBjdHggPSB0aGlzLmN0eDtcbiAgICB0aGlzLnNhdmUoKTtcbiAgICBpZiAoIXV0aWwuaXNOb2RlSlMpIHtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgZmlsdGVyXG4gICAgICB9ID0gY3R4O1xuICAgICAgaWYgKGZpbHRlciAhPT0gXCJub25lXCIgJiYgZmlsdGVyICE9PSBcIlwiKSB7XG4gICAgICAgIGN0eC5maWx0ZXIgPSBcIm5vbmVcIjtcbiAgICAgIH1cbiAgICB9XG4gICAgY3R4LnNjYWxlKDEgLyB3aWR0aCwgLTEgLyBoZWlnaHQpO1xuICAgIGxldCBpbWdUb1BhaW50O1xuICAgIGlmIChpbWdEYXRhLmJpdG1hcCkge1xuICAgICAgaW1nVG9QYWludCA9IHRoaXMuYXBwbHlUcmFuc2Zlck1hcHNUb0JpdG1hcChpbWdEYXRhKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBIVE1MRWxlbWVudCA9PT0gXCJmdW5jdGlvblwiICYmIGltZ0RhdGEgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCB8fCAhaW1nRGF0YS5kYXRhKSB7XG4gICAgICBpbWdUb1BhaW50ID0gaW1nRGF0YTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgdG1wQ2FudmFzID0gdGhpcy5jYWNoZWRDYW52YXNlcy5nZXRDYW52YXMoXCJpbmxpbmVJbWFnZVwiLCB3aWR0aCwgaGVpZ2h0KTtcbiAgICAgIGNvbnN0IHRtcEN0eCA9IHRtcENhbnZhcy5jb250ZXh0O1xuICAgICAgcHV0QmluYXJ5SW1hZ2VEYXRhKHRtcEN0eCwgaW1nRGF0YSk7XG4gICAgICBpbWdUb1BhaW50ID0gdGhpcy5hcHBseVRyYW5zZmVyTWFwc1RvQ2FudmFzKHRtcEN0eCk7XG4gICAgfVxuICAgIGNvbnN0IHNjYWxlZCA9IHRoaXMuX3NjYWxlSW1hZ2UoaW1nVG9QYWludCwgKDAsZGlzcGxheV91dGlscy5nZXRDdXJyZW50VHJhbnNmb3JtSW52ZXJzZSkoY3R4KSk7XG4gICAgY3R4LmltYWdlU21vb3RoaW5nRW5hYmxlZCA9IGdldEltYWdlU21vb3RoaW5nRW5hYmxlZCgoMCxkaXNwbGF5X3V0aWxzLmdldEN1cnJlbnRUcmFuc2Zvcm0pKGN0eCksIGltZ0RhdGEuaW50ZXJwb2xhdGUpO1xuICAgIGRyYXdJbWFnZUF0SW50ZWdlckNvb3JkcyhjdHgsIHNjYWxlZC5pbWcsIDAsIDAsIHNjYWxlZC5wYWludFdpZHRoLCBzY2FsZWQucGFpbnRIZWlnaHQsIDAsIC1oZWlnaHQsIHdpZHRoLCBoZWlnaHQpO1xuICAgIHRoaXMuY29tcG9zZSgpO1xuICAgIHRoaXMucmVzdG9yZSgpO1xuICB9XG4gIHBhaW50SW5saW5lSW1hZ2VYT2JqZWN0R3JvdXAoaW1nRGF0YSwgbWFwKSB7XG4gICAgaWYgKCF0aGlzLmNvbnRlbnRWaXNpYmxlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGN0eCA9IHRoaXMuY3R4O1xuICAgIGxldCBpbWdUb1BhaW50O1xuICAgIGlmIChpbWdEYXRhLmJpdG1hcCkge1xuICAgICAgaW1nVG9QYWludCA9IGltZ0RhdGEuYml0bWFwO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCB3ID0gaW1nRGF0YS53aWR0aDtcbiAgICAgIGNvbnN0IGggPSBpbWdEYXRhLmhlaWdodDtcbiAgICAgIGNvbnN0IHRtcENhbnZhcyA9IHRoaXMuY2FjaGVkQ2FudmFzZXMuZ2V0Q2FudmFzKFwiaW5saW5lSW1hZ2VcIiwgdywgaCk7XG4gICAgICBjb25zdCB0bXBDdHggPSB0bXBDYW52YXMuY29udGV4dDtcbiAgICAgIHB1dEJpbmFyeUltYWdlRGF0YSh0bXBDdHgsIGltZ0RhdGEpO1xuICAgICAgaW1nVG9QYWludCA9IHRoaXMuYXBwbHlUcmFuc2Zlck1hcHNUb0NhbnZhcyh0bXBDdHgpO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IGVudHJ5IG9mIG1hcCkge1xuICAgICAgY3R4LnNhdmUoKTtcbiAgICAgIGN0eC50cmFuc2Zvcm0oLi4uZW50cnkudHJhbnNmb3JtKTtcbiAgICAgIGN0eC5zY2FsZSgxLCAtMSk7XG4gICAgICBkcmF3SW1hZ2VBdEludGVnZXJDb29yZHMoY3R4LCBpbWdUb1BhaW50LCBlbnRyeS54LCBlbnRyeS55LCBlbnRyeS53LCBlbnRyeS5oLCAwLCAtMSwgMSwgMSk7XG4gICAgICBjdHgucmVzdG9yZSgpO1xuICAgIH1cbiAgICB0aGlzLmNvbXBvc2UoKTtcbiAgfVxuICBwYWludFNvbGlkQ29sb3JJbWFnZU1hc2soKSB7XG4gICAgaWYgKCF0aGlzLmNvbnRlbnRWaXNpYmxlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuY3R4LmZpbGxSZWN0KDAsIDAsIDEsIDEpO1xuICAgIHRoaXMuY29tcG9zZSgpO1xuICB9XG4gIG1hcmtQb2ludCh0YWcpIHt9XG4gIG1hcmtQb2ludFByb3BzKHRhZywgcHJvcGVydGllcykge31cbiAgYmVnaW5NYXJrZWRDb250ZW50KHRhZykge1xuICAgIHRoaXMubWFya2VkQ29udGVudFN0YWNrLnB1c2goe1xuICAgICAgdmlzaWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9XG4gIGJlZ2luTWFya2VkQ29udGVudFByb3BzKHRhZywgcHJvcGVydGllcykge1xuICAgIGlmICh0YWcgPT09IFwiT0NcIikge1xuICAgICAgdGhpcy5tYXJrZWRDb250ZW50U3RhY2sucHVzaCh7XG4gICAgICAgIHZpc2libGU6IHRoaXMub3B0aW9uYWxDb250ZW50Q29uZmlnLmlzVmlzaWJsZShwcm9wZXJ0aWVzKVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubWFya2VkQ29udGVudFN0YWNrLnB1c2goe1xuICAgICAgICB2aXNpYmxlOiB0cnVlXG4gICAgICB9KTtcbiAgICB9XG4gICAgdGhpcy5jb250ZW50VmlzaWJsZSA9IHRoaXMuaXNDb250ZW50VmlzaWJsZSgpO1xuICB9XG4gIGVuZE1hcmtlZENvbnRlbnQoKSB7XG4gICAgdGhpcy5tYXJrZWRDb250ZW50U3RhY2sucG9wKCk7XG4gICAgdGhpcy5jb250ZW50VmlzaWJsZSA9IHRoaXMuaXNDb250ZW50VmlzaWJsZSgpO1xuICB9XG4gIGJlZ2luQ29tcGF0KCkge31cbiAgZW5kQ29tcGF0KCkge31cbiAgY29uc3VtZVBhdGgoY2xpcEJveCkge1xuICAgIGNvbnN0IGlzRW1wdHkgPSB0aGlzLmN1cnJlbnQuaXNFbXB0eUNsaXAoKTtcbiAgICBpZiAodGhpcy5wZW5kaW5nQ2xpcCkge1xuICAgICAgdGhpcy5jdXJyZW50LnVwZGF0ZUNsaXBGcm9tUGF0aCgpO1xuICAgIH1cbiAgICBpZiAoIXRoaXMucGVuZGluZ0NsaXApIHtcbiAgICAgIHRoaXMuY29tcG9zZShjbGlwQm94KTtcbiAgICB9XG4gICAgY29uc3QgY3R4ID0gdGhpcy5jdHg7XG4gICAgaWYgKHRoaXMucGVuZGluZ0NsaXApIHtcbiAgICAgIGlmICghaXNFbXB0eSkge1xuICAgICAgICBpZiAodGhpcy5wZW5kaW5nQ2xpcCA9PT0gRU9fQ0xJUCkge1xuICAgICAgICAgIGN0eC5jbGlwKFwiZXZlbm9kZFwiKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjdHguY2xpcCgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aGlzLnBlbmRpbmdDbGlwID0gbnVsbDtcbiAgICB9XG4gICAgdGhpcy5jdXJyZW50LnN0YXJ0TmV3UGF0aEFuZENsaXBCb3godGhpcy5jdXJyZW50LmNsaXBCb3gpO1xuICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgfVxuICBnZXRTaW5nbGVQaXhlbFdpZHRoKCkge1xuICAgIGlmICghdGhpcy5fY2FjaGVkR2V0U2luZ2xlUGl4ZWxXaWR0aCkge1xuICAgICAgY29uc3QgbSA9ICgwLGRpc3BsYXlfdXRpbHMuZ2V0Q3VycmVudFRyYW5zZm9ybSkodGhpcy5jdHgpO1xuICAgICAgaWYgKG1bMV0gPT09IDAgJiYgbVsyXSA9PT0gMCkge1xuICAgICAgICB0aGlzLl9jYWNoZWRHZXRTaW5nbGVQaXhlbFdpZHRoID0gMSAvIE1hdGgubWluKE1hdGguYWJzKG1bMF0pLCBNYXRoLmFicyhtWzNdKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBhYnNEZXQgPSBNYXRoLmFicyhtWzBdICogbVszXSAtIG1bMl0gKiBtWzFdKTtcbiAgICAgICAgY29uc3Qgbm9ybVggPSBNYXRoLmh5cG90KG1bMF0sIG1bMl0pO1xuICAgICAgICBjb25zdCBub3JtWSA9IE1hdGguaHlwb3QobVsxXSwgbVszXSk7XG4gICAgICAgIHRoaXMuX2NhY2hlZEdldFNpbmdsZVBpeGVsV2lkdGggPSBNYXRoLm1heChub3JtWCwgbm9ybVkpIC8gYWJzRGV0O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fY2FjaGVkR2V0U2luZ2xlUGl4ZWxXaWR0aDtcbiAgfVxuICBnZXRTY2FsZUZvclN0cm9raW5nKCkge1xuICAgIGlmICh0aGlzLl9jYWNoZWRTY2FsZUZvclN0cm9raW5nWzBdID09PSAtMSkge1xuICAgICAgY29uc3Qge1xuICAgICAgICBsaW5lV2lkdGhcbiAgICAgIH0gPSB0aGlzLmN1cnJlbnQ7XG4gICAgICBjb25zdCB7XG4gICAgICAgIGEsXG4gICAgICAgIGIsXG4gICAgICAgIGMsXG4gICAgICAgIGRcbiAgICAgIH0gPSB0aGlzLmN0eC5nZXRUcmFuc2Zvcm0oKTtcbiAgICAgIGxldCBzY2FsZVgsIHNjYWxlWTtcbiAgICAgIGlmIChiID09PSAwICYmIGMgPT09IDApIHtcbiAgICAgICAgY29uc3Qgbm9ybVggPSBNYXRoLmFicyhhKTtcbiAgICAgICAgY29uc3Qgbm9ybVkgPSBNYXRoLmFicyhkKTtcbiAgICAgICAgaWYgKG5vcm1YID09PSBub3JtWSkge1xuICAgICAgICAgIGlmIChsaW5lV2lkdGggPT09IDApIHtcbiAgICAgICAgICAgIHNjYWxlWCA9IHNjYWxlWSA9IDEgLyBub3JtWDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3Qgc2NhbGVkTGluZVdpZHRoID0gbm9ybVggKiBsaW5lV2lkdGg7XG4gICAgICAgICAgICBzY2FsZVggPSBzY2FsZVkgPSBzY2FsZWRMaW5lV2lkdGggPCAxID8gMSAvIHNjYWxlZExpbmVXaWR0aCA6IDE7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGxpbmVXaWR0aCA9PT0gMCkge1xuICAgICAgICAgIHNjYWxlWCA9IDEgLyBub3JtWDtcbiAgICAgICAgICBzY2FsZVkgPSAxIC8gbm9ybVk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc3Qgc2NhbGVkWExpbmVXaWR0aCA9IG5vcm1YICogbGluZVdpZHRoO1xuICAgICAgICAgIGNvbnN0IHNjYWxlZFlMaW5lV2lkdGggPSBub3JtWSAqIGxpbmVXaWR0aDtcbiAgICAgICAgICBzY2FsZVggPSBzY2FsZWRYTGluZVdpZHRoIDwgMSA/IDEgLyBzY2FsZWRYTGluZVdpZHRoIDogMTtcbiAgICAgICAgICBzY2FsZVkgPSBzY2FsZWRZTGluZVdpZHRoIDwgMSA/IDEgLyBzY2FsZWRZTGluZVdpZHRoIDogMTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgYWJzRGV0ID0gTWF0aC5hYnMoYSAqIGQgLSBiICogYyk7XG4gICAgICAgIGNvbnN0IG5vcm1YID0gTWF0aC5oeXBvdChhLCBiKTtcbiAgICAgICAgY29uc3Qgbm9ybVkgPSBNYXRoLmh5cG90KGMsIGQpO1xuICAgICAgICBpZiAobGluZVdpZHRoID09PSAwKSB7XG4gICAgICAgICAgc2NhbGVYID0gbm9ybVkgLyBhYnNEZXQ7XG4gICAgICAgICAgc2NhbGVZID0gbm9ybVggLyBhYnNEZXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc3QgYmFzZUFyZWEgPSBsaW5lV2lkdGggKiBhYnNEZXQ7XG4gICAgICAgICAgc2NhbGVYID0gbm9ybVkgPiBiYXNlQXJlYSA/IG5vcm1ZIC8gYmFzZUFyZWEgOiAxO1xuICAgICAgICAgIHNjYWxlWSA9IG5vcm1YID4gYmFzZUFyZWEgPyBub3JtWCAvIGJhc2VBcmVhIDogMTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhpcy5fY2FjaGVkU2NhbGVGb3JTdHJva2luZ1swXSA9IHNjYWxlWDtcbiAgICAgIHRoaXMuX2NhY2hlZFNjYWxlRm9yU3Ryb2tpbmdbMV0gPSBzY2FsZVk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9jYWNoZWRTY2FsZUZvclN0cm9raW5nO1xuICB9XG4gIHJlc2NhbGVBbmRTdHJva2Uoc2F2ZVJlc3RvcmUpIHtcbiAgICBjb25zdCB7XG4gICAgICBjdHhcbiAgICB9ID0gdGhpcztcbiAgICBjb25zdCB7XG4gICAgICBsaW5lV2lkdGhcbiAgICB9ID0gdGhpcy5jdXJyZW50O1xuICAgIGNvbnN0IFtzY2FsZVgsIHNjYWxlWV0gPSB0aGlzLmdldFNjYWxlRm9yU3Ryb2tpbmcoKTtcbiAgICBjdHgubGluZVdpZHRoID0gbGluZVdpZHRoIHx8IDE7XG4gICAgaWYgKHNjYWxlWCA9PT0gMSAmJiBzY2FsZVkgPT09IDEpIHtcbiAgICAgIGN0eC5zdHJva2UoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgZGFzaGVzID0gY3R4LmdldExpbmVEYXNoKCk7XG4gICAgaWYgKHNhdmVSZXN0b3JlKSB7XG4gICAgICBjdHguc2F2ZSgpO1xuICAgIH1cbiAgICBjdHguc2NhbGUoc2NhbGVYLCBzY2FsZVkpO1xuICAgIGlmIChkYXNoZXMubGVuZ3RoID4gMCkge1xuICAgICAgY29uc3Qgc2NhbGUgPSBNYXRoLm1heChzY2FsZVgsIHNjYWxlWSk7XG4gICAgICBjdHguc2V0TGluZURhc2goZGFzaGVzLm1hcCh4ID0+IHggLyBzY2FsZSkpO1xuICAgICAgY3R4LmxpbmVEYXNoT2Zmc2V0IC89IHNjYWxlO1xuICAgIH1cbiAgICBjdHguc3Ryb2tlKCk7XG4gICAgaWYgKHNhdmVSZXN0b3JlKSB7XG4gICAgICBjdHgucmVzdG9yZSgpO1xuICAgIH1cbiAgfVxuICBpc0NvbnRlbnRWaXNpYmxlKCkge1xuICAgIGZvciAobGV0IGkgPSB0aGlzLm1hcmtlZENvbnRlbnRTdGFjay5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgaWYgKCF0aGlzLm1hcmtlZENvbnRlbnRTdGFja1tpXS52aXNpYmxlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn1cbmZvciAoY29uc3Qgb3AgaW4gdXRpbC5PUFMpIHtcbiAgaWYgKENhbnZhc0dyYXBoaWNzLnByb3RvdHlwZVtvcF0gIT09IHVuZGVmaW5lZCkge1xuICAgIENhbnZhc0dyYXBoaWNzLnByb3RvdHlwZVt1dGlsLk9QU1tvcF1dID0gQ2FudmFzR3JhcGhpY3MucHJvdG90eXBlW29wXTtcbiAgfVxufVxuXG5cbi8qKiovIH0pLFxuXG4vKioqLyA0NzM6XG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfX193ZWJwYWNrX21vZHVsZV9fLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cbi8qIGhhcm1vbnkgZXhwb3J0ICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCB7XG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIERPTUNNYXBSZWFkZXJGYWN0b3J5OiAoKSA9PiAoLyogYmluZGluZyAqLyBET01DTWFwUmVhZGVyRmFjdG9yeSksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIERPTUNhbnZhc0ZhY3Rvcnk6ICgpID0+ICgvKiBiaW5kaW5nICovIERPTUNhbnZhc0ZhY3RvcnkpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBET01GaWx0ZXJGYWN0b3J5OiAoKSA9PiAoLyogYmluZGluZyAqLyBET01GaWx0ZXJGYWN0b3J5KSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgRE9NU1ZHRmFjdG9yeTogKCkgPT4gKC8qIGJpbmRpbmcgKi8gRE9NU1ZHRmFjdG9yeSksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIERPTVN0YW5kYXJkRm9udERhdGFGYWN0b3J5OiAoKSA9PiAoLyogYmluZGluZyAqLyBET01TdGFuZGFyZEZvbnREYXRhRmFjdG9yeSksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFBERkRhdGVTdHJpbmc6ICgpID0+ICgvKiBiaW5kaW5nICovIFBERkRhdGVTdHJpbmcpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBQYWdlVmlld3BvcnQ6ICgpID0+ICgvKiBiaW5kaW5nICovIFBhZ2VWaWV3cG9ydCksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFBpeGVsc1BlckluY2g6ICgpID0+ICgvKiBiaW5kaW5nICovIFBpeGVsc1BlckluY2gpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBSZW5kZXJpbmdDYW5jZWxsZWRFeGNlcHRpb246ICgpID0+ICgvKiBiaW5kaW5nICovIFJlbmRlcmluZ0NhbmNlbGxlZEV4Y2VwdGlvbiksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFN0YXRUaW1lcjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gU3RhdFRpbWVyKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgZmV0Y2hEYXRhOiAoKSA9PiAoLyogYmluZGluZyAqLyBmZXRjaERhdGEpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBnZXRDb2xvclZhbHVlczogKCkgPT4gKC8qIGJpbmRpbmcgKi8gZ2V0Q29sb3JWYWx1ZXMpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBnZXRDdXJyZW50VHJhbnNmb3JtOiAoKSA9PiAoLyogYmluZGluZyAqLyBnZXRDdXJyZW50VHJhbnNmb3JtKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgZ2V0Q3VycmVudFRyYW5zZm9ybUludmVyc2U6ICgpID0+ICgvKiBiaW5kaW5nICovIGdldEN1cnJlbnRUcmFuc2Zvcm1JbnZlcnNlKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgZ2V0RmlsZW5hbWVGcm9tVXJsOiAoKSA9PiAoLyogYmluZGluZyAqLyBnZXRGaWxlbmFtZUZyb21VcmwpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBnZXRQZGZGaWxlbmFtZUZyb21Vcmw6ICgpID0+ICgvKiBiaW5kaW5nICovIGdldFBkZkZpbGVuYW1lRnJvbVVybCksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIGdldFJHQjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gZ2V0UkdCKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgZ2V0WGZhUGFnZVZpZXdwb3J0OiAoKSA9PiAoLyogYmluZGluZyAqLyBnZXRYZmFQYWdlVmlld3BvcnQpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBpc0RhdGFTY2hlbWU6ICgpID0+ICgvKiBiaW5kaW5nICovIGlzRGF0YVNjaGVtZSksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIGlzUGRmRmlsZTogKCkgPT4gKC8qIGJpbmRpbmcgKi8gaXNQZGZGaWxlKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgaXNWYWxpZEZldGNoVXJsOiAoKSA9PiAoLyogYmluZGluZyAqLyBpc1ZhbGlkRmV0Y2hVcmwpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBub0NvbnRleHRNZW51OiAoKSA9PiAoLyogYmluZGluZyAqLyBub0NvbnRleHRNZW51KSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgc2V0TGF5ZXJEaW1lbnNpb25zOiAoKSA9PiAoLyogYmluZGluZyAqLyBzZXRMYXllckRpbWVuc2lvbnMpXG4vKiBoYXJtb255IGV4cG9ydCAqLyB9KTtcbi8qIHVudXNlZCBoYXJtb255IGV4cG9ydCBkZXByZWNhdGVkICovXG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX2Jhc2VfZmFjdG9yeV9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4MjIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9zaGFyZWRfdXRpbF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNjYpO1xuXG5cbmNvbnN0IFNWR19OUyA9IFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIjtcbmNsYXNzIFBpeGVsc1BlckluY2gge1xuICBzdGF0aWMgQ1NTID0gOTYuMDtcbiAgc3RhdGljIFBERiA9IDcyLjA7XG4gIHN0YXRpYyBQREZfVE9fQ1NTX1VOSVRTID0gdGhpcy5DU1MgLyB0aGlzLlBERjtcbn1cbmNsYXNzIERPTUZpbHRlckZhY3RvcnkgZXh0ZW5kcyBfYmFzZV9mYWN0b3J5X2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uQmFzZUZpbHRlckZhY3Rvcnkge1xuICAjX2NhY2hlO1xuICAjX2RlZnM7XG4gICNkb2NJZDtcbiAgI2RvY3VtZW50O1xuICAjaGNtRmlsdGVyO1xuICAjaGNtS2V5O1xuICAjaGNtVXJsO1xuICAjaGNtSGlnaGxpZ2h0RmlsdGVyO1xuICAjaGNtSGlnaGxpZ2h0S2V5O1xuICAjaGNtSGlnaGxpZ2h0VXJsO1xuICAjaWQgPSAwO1xuICBjb25zdHJ1Y3Rvcih7XG4gICAgZG9jSWQsXG4gICAgb3duZXJEb2N1bWVudCA9IGdsb2JhbFRoaXMuZG9jdW1lbnRcbiAgfSA9IHt9KSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLiNkb2NJZCA9IGRvY0lkO1xuICAgIHRoaXMuI2RvY3VtZW50ID0gb3duZXJEb2N1bWVudDtcbiAgfVxuICBnZXQgI2NhY2hlKCkge1xuICAgIHJldHVybiB0aGlzLiNfY2FjaGUgfHw9IG5ldyBNYXAoKTtcbiAgfVxuICBnZXQgI2RlZnMoKSB7XG4gICAgaWYgKCF0aGlzLiNfZGVmcykge1xuICAgICAgY29uc3QgZGl2ID0gdGhpcy4jZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgc3R5bGVcbiAgICAgIH0gPSBkaXY7XG4gICAgICBzdHlsZS52aXNpYmlsaXR5ID0gXCJoaWRkZW5cIjtcbiAgICAgIHN0eWxlLmNvbnRhaW4gPSBcInN0cmljdFwiO1xuICAgICAgc3R5bGUud2lkdGggPSBzdHlsZS5oZWlnaHQgPSAwO1xuICAgICAgc3R5bGUucG9zaXRpb24gPSBcImFic29sdXRlXCI7XG4gICAgICBzdHlsZS50b3AgPSBzdHlsZS5sZWZ0ID0gMDtcbiAgICAgIHN0eWxlLnpJbmRleCA9IC0xO1xuICAgICAgY29uc3Qgc3ZnID0gdGhpcy4jZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKFNWR19OUywgXCJzdmdcIik7XG4gICAgICBzdmcuc2V0QXR0cmlidXRlKFwid2lkdGhcIiwgMCk7XG4gICAgICBzdmcuc2V0QXR0cmlidXRlKFwiaGVpZ2h0XCIsIDApO1xuICAgICAgdGhpcy4jX2RlZnMgPSB0aGlzLiNkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoU1ZHX05TLCBcImRlZnNcIik7XG4gICAgICBkaXYuYXBwZW5kKHN2Zyk7XG4gICAgICBzdmcuYXBwZW5kKHRoaXMuI19kZWZzKTtcbiAgICAgIHRoaXMuI2RvY3VtZW50LmJvZHkuYXBwZW5kKGRpdik7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLiNfZGVmcztcbiAgfVxuICBhZGRGaWx0ZXIobWFwcykge1xuICAgIGlmICghbWFwcykge1xuICAgICAgcmV0dXJuIFwibm9uZVwiO1xuICAgIH1cbiAgICBsZXQgdmFsdWUgPSB0aGlzLiNjYWNoZS5nZXQobWFwcyk7XG4gICAgaWYgKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIGxldCB0YWJsZVIsIHRhYmxlRywgdGFibGVCLCBrZXk7XG4gICAgaWYgKG1hcHMubGVuZ3RoID09PSAxKSB7XG4gICAgICBjb25zdCBtYXBSID0gbWFwc1swXTtcbiAgICAgIGNvbnN0IGJ1ZmZlciA9IG5ldyBBcnJheSgyNTYpO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCAyNTY7IGkrKykge1xuICAgICAgICBidWZmZXJbaV0gPSBtYXBSW2ldIC8gMjU1O1xuICAgICAgfVxuICAgICAga2V5ID0gdGFibGVSID0gdGFibGVHID0gdGFibGVCID0gYnVmZmVyLmpvaW4oXCIsXCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBbbWFwUiwgbWFwRywgbWFwQl0gPSBtYXBzO1xuICAgICAgY29uc3QgYnVmZmVyUiA9IG5ldyBBcnJheSgyNTYpO1xuICAgICAgY29uc3QgYnVmZmVyRyA9IG5ldyBBcnJheSgyNTYpO1xuICAgICAgY29uc3QgYnVmZmVyQiA9IG5ldyBBcnJheSgyNTYpO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCAyNTY7IGkrKykge1xuICAgICAgICBidWZmZXJSW2ldID0gbWFwUltpXSAvIDI1NTtcbiAgICAgICAgYnVmZmVyR1tpXSA9IG1hcEdbaV0gLyAyNTU7XG4gICAgICAgIGJ1ZmZlckJbaV0gPSBtYXBCW2ldIC8gMjU1O1xuICAgICAgfVxuICAgICAgdGFibGVSID0gYnVmZmVyUi5qb2luKFwiLFwiKTtcbiAgICAgIHRhYmxlRyA9IGJ1ZmZlckcuam9pbihcIixcIik7XG4gICAgICB0YWJsZUIgPSBidWZmZXJCLmpvaW4oXCIsXCIpO1xuICAgICAga2V5ID0gYCR7dGFibGVSfSR7dGFibGVHfSR7dGFibGVCfWA7XG4gICAgfVxuICAgIHZhbHVlID0gdGhpcy4jY2FjaGUuZ2V0KGtleSk7XG4gICAgaWYgKHZhbHVlKSB7XG4gICAgICB0aGlzLiNjYWNoZS5zZXQobWFwcywgdmFsdWUpO1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICBjb25zdCBpZCA9IGBnXyR7dGhpcy4jZG9jSWR9X3RyYW5zZmVyX21hcF8ke3RoaXMuI2lkKyt9YDtcbiAgICBjb25zdCB1cmwgPSBgdXJsKCMke2lkfSlgO1xuICAgIHRoaXMuI2NhY2hlLnNldChtYXBzLCB1cmwpO1xuICAgIHRoaXMuI2NhY2hlLnNldChrZXksIHVybCk7XG4gICAgY29uc3QgZmlsdGVyID0gdGhpcy4jY3JlYXRlRmlsdGVyKGlkKTtcbiAgICB0aGlzLiNhZGRUcmFuc2Zlck1hcENvbnZlcnNpb24odGFibGVSLCB0YWJsZUcsIHRhYmxlQiwgZmlsdGVyKTtcbiAgICByZXR1cm4gdXJsO1xuICB9XG4gIGFkZEhDTUZpbHRlcihmZ0NvbG9yLCBiZ0NvbG9yKSB7XG4gICAgY29uc3Qga2V5ID0gYCR7ZmdDb2xvcn0tJHtiZ0NvbG9yfWA7XG4gICAgaWYgKHRoaXMuI2hjbUtleSA9PT0ga2V5KSB7XG4gICAgICByZXR1cm4gdGhpcy4jaGNtVXJsO1xuICAgIH1cbiAgICB0aGlzLiNoY21LZXkgPSBrZXk7XG4gICAgdGhpcy4jaGNtVXJsID0gXCJub25lXCI7XG4gICAgdGhpcy4jaGNtRmlsdGVyPy5yZW1vdmUoKTtcbiAgICBpZiAoIWZnQ29sb3IgfHwgIWJnQ29sb3IpIHtcbiAgICAgIHJldHVybiB0aGlzLiNoY21Vcmw7XG4gICAgfVxuICAgIGNvbnN0IGZnUkdCID0gdGhpcy4jZ2V0UkdCKGZnQ29sb3IpO1xuICAgIGZnQ29sb3IgPSBfc2hhcmVkX3V0aWxfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5VdGlsLm1ha2VIZXhDb2xvciguLi5mZ1JHQik7XG4gICAgY29uc3QgYmdSR0IgPSB0aGlzLiNnZXRSR0IoYmdDb2xvcik7XG4gICAgYmdDb2xvciA9IF9zaGFyZWRfdXRpbF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLlV0aWwubWFrZUhleENvbG9yKC4uLmJnUkdCKTtcbiAgICB0aGlzLiNkZWZzLnN0eWxlLmNvbG9yID0gXCJcIjtcbiAgICBpZiAoZmdDb2xvciA9PT0gXCIjMDAwMDAwXCIgJiYgYmdDb2xvciA9PT0gXCIjZmZmZmZmXCIgfHwgZmdDb2xvciA9PT0gYmdDb2xvcikge1xuICAgICAgcmV0dXJuIHRoaXMuI2hjbVVybDtcbiAgICB9XG4gICAgY29uc3QgbWFwID0gbmV3IEFycmF5KDI1Nik7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPD0gMjU1OyBpKyspIHtcbiAgICAgIGNvbnN0IHggPSBpIC8gMjU1O1xuICAgICAgbWFwW2ldID0geCA8PSAwLjAzOTI4ID8geCAvIDEyLjkyIDogKCh4ICsgMC4wNTUpIC8gMS4wNTUpICoqIDIuNDtcbiAgICB9XG4gICAgY29uc3QgdGFibGUgPSBtYXAuam9pbihcIixcIik7XG4gICAgY29uc3QgaWQgPSBgZ18ke3RoaXMuI2RvY0lkfV9oY21fZmlsdGVyYDtcbiAgICBjb25zdCBmaWx0ZXIgPSB0aGlzLiNoY21IaWdobGlnaHRGaWx0ZXIgPSB0aGlzLiNjcmVhdGVGaWx0ZXIoaWQpO1xuICAgIHRoaXMuI2FkZFRyYW5zZmVyTWFwQ29udmVyc2lvbih0YWJsZSwgdGFibGUsIHRhYmxlLCBmaWx0ZXIpO1xuICAgIHRoaXMuI2FkZEdyYXlDb252ZXJzaW9uKGZpbHRlcik7XG4gICAgY29uc3QgZ2V0U3RlcHMgPSAoYywgbikgPT4ge1xuICAgICAgY29uc3Qgc3RhcnQgPSBmZ1JHQltjXSAvIDI1NTtcbiAgICAgIGNvbnN0IGVuZCA9IGJnUkdCW2NdIC8gMjU1O1xuICAgICAgY29uc3QgYXJyID0gbmV3IEFycmF5KG4gKyAxKTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDw9IG47IGkrKykge1xuICAgICAgICBhcnJbaV0gPSBzdGFydCArIGkgLyBuICogKGVuZCAtIHN0YXJ0KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhcnIuam9pbihcIixcIik7XG4gICAgfTtcbiAgICB0aGlzLiNhZGRUcmFuc2Zlck1hcENvbnZlcnNpb24oZ2V0U3RlcHMoMCwgNSksIGdldFN0ZXBzKDEsIDUpLCBnZXRTdGVwcygyLCA1KSwgZmlsdGVyKTtcbiAgICB0aGlzLiNoY21VcmwgPSBgdXJsKCMke2lkfSlgO1xuICAgIHJldHVybiB0aGlzLiNoY21Vcmw7XG4gIH1cbiAgYWRkSGlnaGxpZ2h0SENNRmlsdGVyKGZnQ29sb3IsIGJnQ29sb3IsIG5ld0ZnQ29sb3IsIG5ld0JnQ29sb3IpIHtcbiAgICBjb25zdCBrZXkgPSBgJHtmZ0NvbG9yfS0ke2JnQ29sb3J9LSR7bmV3RmdDb2xvcn0tJHtuZXdCZ0NvbG9yfWA7XG4gICAgaWYgKHRoaXMuI2hjbUhpZ2hsaWdodEtleSA9PT0ga2V5KSB7XG4gICAgICByZXR1cm4gdGhpcy4jaGNtSGlnaGxpZ2h0VXJsO1xuICAgIH1cbiAgICB0aGlzLiNoY21IaWdobGlnaHRLZXkgPSBrZXk7XG4gICAgdGhpcy4jaGNtSGlnaGxpZ2h0VXJsID0gXCJub25lXCI7XG4gICAgdGhpcy4jaGNtSGlnaGxpZ2h0RmlsdGVyPy5yZW1vdmUoKTtcbiAgICBpZiAoIWZnQ29sb3IgfHwgIWJnQ29sb3IpIHtcbiAgICAgIHJldHVybiB0aGlzLiNoY21IaWdobGlnaHRVcmw7XG4gICAgfVxuICAgIGNvbnN0IFtmZ1JHQiwgYmdSR0JdID0gW2ZnQ29sb3IsIGJnQ29sb3JdLm1hcCh0aGlzLiNnZXRSR0IuYmluZCh0aGlzKSk7XG4gICAgbGV0IGZnR3JheSA9IE1hdGgucm91bmQoMC4yMTI2ICogZmdSR0JbMF0gKyAwLjcxNTIgKiBmZ1JHQlsxXSArIDAuMDcyMiAqIGZnUkdCWzJdKTtcbiAgICBsZXQgYmdHcmF5ID0gTWF0aC5yb3VuZCgwLjIxMjYgKiBiZ1JHQlswXSArIDAuNzE1MiAqIGJnUkdCWzFdICsgMC4wNzIyICogYmdSR0JbMl0pO1xuICAgIGxldCBbbmV3RmdSR0IsIG5ld0JnUkdCXSA9IFtuZXdGZ0NvbG9yLCBuZXdCZ0NvbG9yXS5tYXAodGhpcy4jZ2V0UkdCLmJpbmQodGhpcykpO1xuICAgIGlmIChiZ0dyYXkgPCBmZ0dyYXkpIHtcbiAgICAgIFtmZ0dyYXksIGJnR3JheSwgbmV3RmdSR0IsIG5ld0JnUkdCXSA9IFtiZ0dyYXksIGZnR3JheSwgbmV3QmdSR0IsIG5ld0ZnUkdCXTtcbiAgICB9XG4gICAgdGhpcy4jZGVmcy5zdHlsZS5jb2xvciA9IFwiXCI7XG4gICAgY29uc3QgZ2V0U3RlcHMgPSAoZmcsIGJnLCBuKSA9PiB7XG4gICAgICBjb25zdCBhcnIgPSBuZXcgQXJyYXkoMjU2KTtcbiAgICAgIGNvbnN0IHN0ZXAgPSAoYmdHcmF5IC0gZmdHcmF5KSAvIG47XG4gICAgICBjb25zdCBuZXdTdGFydCA9IGZnIC8gMjU1O1xuICAgICAgY29uc3QgbmV3U3RlcCA9IChiZyAtIGZnKSAvICgyNTUgKiBuKTtcbiAgICAgIGxldCBwcmV2ID0gMDtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDw9IG47IGkrKykge1xuICAgICAgICBjb25zdCBrID0gTWF0aC5yb3VuZChmZ0dyYXkgKyBpICogc3RlcCk7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gbmV3U3RhcnQgKyBpICogbmV3U3RlcDtcbiAgICAgICAgZm9yIChsZXQgaiA9IHByZXY7IGogPD0gazsgaisrKSB7XG4gICAgICAgICAgYXJyW2pdID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgcHJldiA9IGsgKyAxO1xuICAgICAgfVxuICAgICAgZm9yIChsZXQgaSA9IHByZXY7IGkgPCAyNTY7IGkrKykge1xuICAgICAgICBhcnJbaV0gPSBhcnJbcHJldiAtIDFdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFyci5qb2luKFwiLFwiKTtcbiAgICB9O1xuICAgIGNvbnN0IGlkID0gYGdfJHt0aGlzLiNkb2NJZH1faGNtX2hpZ2hsaWdodF9maWx0ZXJgO1xuICAgIGNvbnN0IGZpbHRlciA9IHRoaXMuI2hjbUhpZ2hsaWdodEZpbHRlciA9IHRoaXMuI2NyZWF0ZUZpbHRlcihpZCk7XG4gICAgdGhpcy4jYWRkR3JheUNvbnZlcnNpb24oZmlsdGVyKTtcbiAgICB0aGlzLiNhZGRUcmFuc2Zlck1hcENvbnZlcnNpb24oZ2V0U3RlcHMobmV3RmdSR0JbMF0sIG5ld0JnUkdCWzBdLCA1KSwgZ2V0U3RlcHMobmV3RmdSR0JbMV0sIG5ld0JnUkdCWzFdLCA1KSwgZ2V0U3RlcHMobmV3RmdSR0JbMl0sIG5ld0JnUkdCWzJdLCA1KSwgZmlsdGVyKTtcbiAgICB0aGlzLiNoY21IaWdobGlnaHRVcmwgPSBgdXJsKCMke2lkfSlgO1xuICAgIHJldHVybiB0aGlzLiNoY21IaWdobGlnaHRVcmw7XG4gIH1cbiAgZGVzdHJveShrZWVwSENNID0gZmFsc2UpIHtcbiAgICBpZiAoa2VlcEhDTSAmJiAodGhpcy4jaGNtVXJsIHx8IHRoaXMuI2hjbUhpZ2hsaWdodFVybCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHRoaXMuI19kZWZzKSB7XG4gICAgICB0aGlzLiNfZGVmcy5wYXJlbnROb2RlLnBhcmVudE5vZGUucmVtb3ZlKCk7XG4gICAgICB0aGlzLiNfZGVmcyA9IG51bGw7XG4gICAgfVxuICAgIGlmICh0aGlzLiNfY2FjaGUpIHtcbiAgICAgIHRoaXMuI19jYWNoZS5jbGVhcigpO1xuICAgICAgdGhpcy4jX2NhY2hlID0gbnVsbDtcbiAgICB9XG4gICAgdGhpcy4jaWQgPSAwO1xuICB9XG4gICNhZGRHcmF5Q29udmVyc2lvbihmaWx0ZXIpIHtcbiAgICBjb25zdCBmZUNvbG9yTWF0cml4ID0gdGhpcy4jZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKFNWR19OUywgXCJmZUNvbG9yTWF0cml4XCIpO1xuICAgIGZlQ29sb3JNYXRyaXguc2V0QXR0cmlidXRlKFwidHlwZVwiLCBcIm1hdHJpeFwiKTtcbiAgICBmZUNvbG9yTWF0cml4LnNldEF0dHJpYnV0ZShcInZhbHVlc1wiLCBcIjAuMjEyNiAwLjcxNTIgMC4wNzIyIDAgMCAwLjIxMjYgMC43MTUyIDAuMDcyMiAwIDAgMC4yMTI2IDAuNzE1MiAwLjA3MjIgMCAwIDAgMCAwIDEgMFwiKTtcbiAgICBmaWx0ZXIuYXBwZW5kKGZlQ29sb3JNYXRyaXgpO1xuICB9XG4gICNjcmVhdGVGaWx0ZXIoaWQpIHtcbiAgICBjb25zdCBmaWx0ZXIgPSB0aGlzLiNkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoU1ZHX05TLCBcImZpbHRlclwiKTtcbiAgICBmaWx0ZXIuc2V0QXR0cmlidXRlKFwiY29sb3ItaW50ZXJwb2xhdGlvbi1maWx0ZXJzXCIsIFwic1JHQlwiKTtcbiAgICBmaWx0ZXIuc2V0QXR0cmlidXRlKFwiaWRcIiwgaWQpO1xuICAgIHRoaXMuI2RlZnMuYXBwZW5kKGZpbHRlcik7XG4gICAgcmV0dXJuIGZpbHRlcjtcbiAgfVxuICAjYXBwZW5kRmVGdW5jKGZlQ29tcG9uZW50VHJhbnNmZXIsIGZ1bmMsIHRhYmxlKSB7XG4gICAgY29uc3QgZmVGdW5jID0gdGhpcy4jZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKFNWR19OUywgZnVuYyk7XG4gICAgZmVGdW5jLnNldEF0dHJpYnV0ZShcInR5cGVcIiwgXCJkaXNjcmV0ZVwiKTtcbiAgICBmZUZ1bmMuc2V0QXR0cmlidXRlKFwidGFibGVWYWx1ZXNcIiwgdGFibGUpO1xuICAgIGZlQ29tcG9uZW50VHJhbnNmZXIuYXBwZW5kKGZlRnVuYyk7XG4gIH1cbiAgI2FkZFRyYW5zZmVyTWFwQ29udmVyc2lvbihyVGFibGUsIGdUYWJsZSwgYlRhYmxlLCBmaWx0ZXIpIHtcbiAgICBjb25zdCBmZUNvbXBvbmVudFRyYW5zZmVyID0gdGhpcy4jZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKFNWR19OUywgXCJmZUNvbXBvbmVudFRyYW5zZmVyXCIpO1xuICAgIGZpbHRlci5hcHBlbmQoZmVDb21wb25lbnRUcmFuc2Zlcik7XG4gICAgdGhpcy4jYXBwZW5kRmVGdW5jKGZlQ29tcG9uZW50VHJhbnNmZXIsIFwiZmVGdW5jUlwiLCByVGFibGUpO1xuICAgIHRoaXMuI2FwcGVuZEZlRnVuYyhmZUNvbXBvbmVudFRyYW5zZmVyLCBcImZlRnVuY0dcIiwgZ1RhYmxlKTtcbiAgICB0aGlzLiNhcHBlbmRGZUZ1bmMoZmVDb21wb25lbnRUcmFuc2ZlciwgXCJmZUZ1bmNCXCIsIGJUYWJsZSk7XG4gIH1cbiAgI2dldFJHQihjb2xvcikge1xuICAgIHRoaXMuI2RlZnMuc3R5bGUuY29sb3IgPSBjb2xvcjtcbiAgICByZXR1cm4gZ2V0UkdCKGdldENvbXB1dGVkU3R5bGUodGhpcy4jZGVmcykuZ2V0UHJvcGVydHlWYWx1ZShcImNvbG9yXCIpKTtcbiAgfVxufVxuY2xhc3MgRE9NQ2FudmFzRmFjdG9yeSBleHRlbmRzIF9iYXNlX2ZhY3RvcnlfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5CYXNlQ2FudmFzRmFjdG9yeSB7XG4gIGNvbnN0cnVjdG9yKHtcbiAgICBvd25lckRvY3VtZW50ID0gZ2xvYmFsVGhpcy5kb2N1bWVudFxuICB9ID0ge30pIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX2RvY3VtZW50ID0gb3duZXJEb2N1bWVudDtcbiAgfVxuICBfY3JlYXRlQ2FudmFzKHdpZHRoLCBoZWlnaHQpIHtcbiAgICBjb25zdCBjYW52YXMgPSB0aGlzLl9kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiY2FudmFzXCIpO1xuICAgIGNhbnZhcy53aWR0aCA9IHdpZHRoO1xuICAgIGNhbnZhcy5oZWlnaHQgPSBoZWlnaHQ7XG4gICAgcmV0dXJuIGNhbnZhcztcbiAgfVxufVxuYXN5bmMgZnVuY3Rpb24gZmV0Y2hEYXRhKHVybCwgdHlwZSA9IFwidGV4dFwiKSB7XG4gIGlmIChpc1ZhbGlkRmV0Y2hVcmwodXJsLCBkb2N1bWVudC5iYXNlVVJJKSkge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2godXJsKTtcbiAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IocmVzcG9uc2Uuc3RhdHVzVGV4dCk7XG4gICAgfVxuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgY2FzZSBcImFycmF5YnVmZmVyXCI6XG4gICAgICAgIHJldHVybiByZXNwb25zZS5hcnJheUJ1ZmZlcigpO1xuICAgICAgY2FzZSBcImJsb2JcIjpcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmJsb2IoKTtcbiAgICAgIGNhc2UgXCJqc29uXCI6XG4gICAgICAgIHJldHVybiByZXNwb25zZS5qc29uKCk7XG4gICAgfVxuICAgIHJldHVybiByZXNwb25zZS50ZXh0KCk7XG4gIH1cbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBjb25zdCByZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgcmVxdWVzdC5vcGVuKFwiR0VUXCIsIHVybCwgdHJ1ZSk7XG4gICAgcmVxdWVzdC5yZXNwb25zZVR5cGUgPSB0eXBlO1xuICAgIHJlcXVlc3Qub25yZWFkeXN0YXRlY2hhbmdlID0gKCkgPT4ge1xuICAgICAgaWYgKHJlcXVlc3QucmVhZHlTdGF0ZSAhPT0gWE1MSHR0cFJlcXVlc3QuRE9ORSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAocmVxdWVzdC5zdGF0dXMgPT09IDIwMCB8fCByZXF1ZXN0LnN0YXR1cyA9PT0gMCkge1xuICAgICAgICBsZXQgZGF0YTtcbiAgICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgICAgY2FzZSBcImFycmF5YnVmZmVyXCI6XG4gICAgICAgICAgY2FzZSBcImJsb2JcIjpcbiAgICAgICAgICBjYXNlIFwianNvblwiOlxuICAgICAgICAgICAgZGF0YSA9IHJlcXVlc3QucmVzcG9uc2U7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgZGF0YSA9IHJlcXVlc3QucmVzcG9uc2VUZXh0O1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRhdGEpIHtcbiAgICAgICAgICByZXNvbHZlKGRhdGEpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmVqZWN0KG5ldyBFcnJvcihyZXF1ZXN0LnN0YXR1c1RleHQpKTtcbiAgICB9O1xuICAgIHJlcXVlc3Quc2VuZChudWxsKTtcbiAgfSk7XG59XG5jbGFzcyBET01DTWFwUmVhZGVyRmFjdG9yeSBleHRlbmRzIF9iYXNlX2ZhY3RvcnlfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5CYXNlQ01hcFJlYWRlckZhY3Rvcnkge1xuICBfZmV0Y2hEYXRhKHVybCwgY29tcHJlc3Npb25UeXBlKSB7XG4gICAgcmV0dXJuIGZldGNoRGF0YSh1cmwsIHRoaXMuaXNDb21wcmVzc2VkID8gXCJhcnJheWJ1ZmZlclwiIDogXCJ0ZXh0XCIpLnRoZW4oZGF0YSA9PiB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBjTWFwRGF0YTogZGF0YSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyID8gbmV3IFVpbnQ4QXJyYXkoZGF0YSkgOiAoMCxfc2hhcmVkX3V0aWxfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5zdHJpbmdUb0J5dGVzKShkYXRhKSxcbiAgICAgICAgY29tcHJlc3Npb25UeXBlXG4gICAgICB9O1xuICAgIH0pO1xuICB9XG59XG5jbGFzcyBET01TdGFuZGFyZEZvbnREYXRhRmFjdG9yeSBleHRlbmRzIF9iYXNlX2ZhY3RvcnlfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5CYXNlU3RhbmRhcmRGb250RGF0YUZhY3Rvcnkge1xuICBfZmV0Y2hEYXRhKHVybCkge1xuICAgIHJldHVybiBmZXRjaERhdGEodXJsLCBcImFycmF5YnVmZmVyXCIpLnRoZW4oZGF0YSA9PiB7XG4gICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoZGF0YSk7XG4gICAgfSk7XG4gIH1cbn1cbmNsYXNzIERPTVNWR0ZhY3RvcnkgZXh0ZW5kcyBfYmFzZV9mYWN0b3J5X2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uQmFzZVNWR0ZhY3Rvcnkge1xuICBfY3JlYXRlU1ZHKHR5cGUpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKFNWR19OUywgdHlwZSk7XG4gIH1cbn1cbmNsYXNzIFBhZ2VWaWV3cG9ydCB7XG4gIGNvbnN0cnVjdG9yKHtcbiAgICB2aWV3Qm94LFxuICAgIHNjYWxlLFxuICAgIHJvdGF0aW9uLFxuICAgIG9mZnNldFggPSAwLFxuICAgIG9mZnNldFkgPSAwLFxuICAgIGRvbnRGbGlwID0gZmFsc2VcbiAgfSkge1xuICAgIHRoaXMudmlld0JveCA9IHZpZXdCb3g7XG4gICAgdGhpcy5zY2FsZSA9IHNjYWxlO1xuICAgIHRoaXMucm90YXRpb24gPSByb3RhdGlvbjtcbiAgICB0aGlzLm9mZnNldFggPSBvZmZzZXRYO1xuICAgIHRoaXMub2Zmc2V0WSA9IG9mZnNldFk7XG4gICAgY29uc3QgY2VudGVyWCA9ICh2aWV3Qm94WzJdICsgdmlld0JveFswXSkgLyAyO1xuICAgIGNvbnN0IGNlbnRlclkgPSAodmlld0JveFszXSArIHZpZXdCb3hbMV0pIC8gMjtcbiAgICBsZXQgcm90YXRlQSwgcm90YXRlQiwgcm90YXRlQywgcm90YXRlRDtcbiAgICByb3RhdGlvbiAlPSAzNjA7XG4gICAgaWYgKHJvdGF0aW9uIDwgMCkge1xuICAgICAgcm90YXRpb24gKz0gMzYwO1xuICAgIH1cbiAgICBzd2l0Y2ggKHJvdGF0aW9uKSB7XG4gICAgICBjYXNlIDE4MDpcbiAgICAgICAgcm90YXRlQSA9IC0xO1xuICAgICAgICByb3RhdGVCID0gMDtcbiAgICAgICAgcm90YXRlQyA9IDA7XG4gICAgICAgIHJvdGF0ZUQgPSAxO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgOTA6XG4gICAgICAgIHJvdGF0ZUEgPSAwO1xuICAgICAgICByb3RhdGVCID0gMTtcbiAgICAgICAgcm90YXRlQyA9IDE7XG4gICAgICAgIHJvdGF0ZUQgPSAwO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMjcwOlxuICAgICAgICByb3RhdGVBID0gMDtcbiAgICAgICAgcm90YXRlQiA9IC0xO1xuICAgICAgICByb3RhdGVDID0gLTE7XG4gICAgICAgIHJvdGF0ZUQgPSAwO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMDpcbiAgICAgICAgcm90YXRlQSA9IDE7XG4gICAgICAgIHJvdGF0ZUIgPSAwO1xuICAgICAgICByb3RhdGVDID0gMDtcbiAgICAgICAgcm90YXRlRCA9IC0xO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlBhZ2VWaWV3cG9ydDogSW52YWxpZCByb3RhdGlvbiwgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDkwIGRlZ3JlZXMuXCIpO1xuICAgIH1cbiAgICBpZiAoZG9udEZsaXApIHtcbiAgICAgIHJvdGF0ZUMgPSAtcm90YXRlQztcbiAgICAgIHJvdGF0ZUQgPSAtcm90YXRlRDtcbiAgICB9XG4gICAgbGV0IG9mZnNldENhbnZhc1gsIG9mZnNldENhbnZhc1k7XG4gICAgbGV0IHdpZHRoLCBoZWlnaHQ7XG4gICAgaWYgKHJvdGF0ZUEgPT09IDApIHtcbiAgICAgIG9mZnNldENhbnZhc1ggPSBNYXRoLmFicyhjZW50ZXJZIC0gdmlld0JveFsxXSkgKiBzY2FsZSArIG9mZnNldFg7XG4gICAgICBvZmZzZXRDYW52YXNZID0gTWF0aC5hYnMoY2VudGVyWCAtIHZpZXdCb3hbMF0pICogc2NhbGUgKyBvZmZzZXRZO1xuICAgICAgd2lkdGggPSAodmlld0JveFszXSAtIHZpZXdCb3hbMV0pICogc2NhbGU7XG4gICAgICBoZWlnaHQgPSAodmlld0JveFsyXSAtIHZpZXdCb3hbMF0pICogc2NhbGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9mZnNldENhbnZhc1ggPSBNYXRoLmFicyhjZW50ZXJYIC0gdmlld0JveFswXSkgKiBzY2FsZSArIG9mZnNldFg7XG4gICAgICBvZmZzZXRDYW52YXNZID0gTWF0aC5hYnMoY2VudGVyWSAtIHZpZXdCb3hbMV0pICogc2NhbGUgKyBvZmZzZXRZO1xuICAgICAgd2lkdGggPSAodmlld0JveFsyXSAtIHZpZXdCb3hbMF0pICogc2NhbGU7XG4gICAgICBoZWlnaHQgPSAodmlld0JveFszXSAtIHZpZXdCb3hbMV0pICogc2NhbGU7XG4gICAgfVxuICAgIHRoaXMudHJhbnNmb3JtID0gW3JvdGF0ZUEgKiBzY2FsZSwgcm90YXRlQiAqIHNjYWxlLCByb3RhdGVDICogc2NhbGUsIHJvdGF0ZUQgKiBzY2FsZSwgb2Zmc2V0Q2FudmFzWCAtIHJvdGF0ZUEgKiBzY2FsZSAqIGNlbnRlclggLSByb3RhdGVDICogc2NhbGUgKiBjZW50ZXJZLCBvZmZzZXRDYW52YXNZIC0gcm90YXRlQiAqIHNjYWxlICogY2VudGVyWCAtIHJvdGF0ZUQgKiBzY2FsZSAqIGNlbnRlclldO1xuICAgIHRoaXMud2lkdGggPSB3aWR0aDtcbiAgICB0aGlzLmhlaWdodCA9IGhlaWdodDtcbiAgfVxuICBnZXQgcmF3RGltcygpIHtcbiAgICBjb25zdCB7XG4gICAgICB2aWV3Qm94XG4gICAgfSA9IHRoaXM7XG4gICAgcmV0dXJuICgwLF9zaGFyZWRfdXRpbF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLnNoYWRvdykodGhpcywgXCJyYXdEaW1zXCIsIHtcbiAgICAgIHBhZ2VXaWR0aDogdmlld0JveFsyXSAtIHZpZXdCb3hbMF0sXG4gICAgICBwYWdlSGVpZ2h0OiB2aWV3Qm94WzNdIC0gdmlld0JveFsxXSxcbiAgICAgIHBhZ2VYOiB2aWV3Qm94WzBdLFxuICAgICAgcGFnZVk6IHZpZXdCb3hbMV1cbiAgICB9KTtcbiAgfVxuICBjbG9uZSh7XG4gICAgc2NhbGUgPSB0aGlzLnNjYWxlLFxuICAgIHJvdGF0aW9uID0gdGhpcy5yb3RhdGlvbixcbiAgICBvZmZzZXRYID0gdGhpcy5vZmZzZXRYLFxuICAgIG9mZnNldFkgPSB0aGlzLm9mZnNldFksXG4gICAgZG9udEZsaXAgPSBmYWxzZVxuICB9ID0ge30pIHtcbiAgICByZXR1cm4gbmV3IFBhZ2VWaWV3cG9ydCh7XG4gICAgICB2aWV3Qm94OiB0aGlzLnZpZXdCb3guc2xpY2UoKSxcbiAgICAgIHNjYWxlLFxuICAgICAgcm90YXRpb24sXG4gICAgICBvZmZzZXRYLFxuICAgICAgb2Zmc2V0WSxcbiAgICAgIGRvbnRGbGlwXG4gICAgfSk7XG4gIH1cbiAgY29udmVydFRvVmlld3BvcnRQb2ludCh4LCB5KSB7XG4gICAgcmV0dXJuIF9zaGFyZWRfdXRpbF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLlV0aWwuYXBwbHlUcmFuc2Zvcm0oW3gsIHldLCB0aGlzLnRyYW5zZm9ybSk7XG4gIH1cbiAgY29udmVydFRvVmlld3BvcnRSZWN0YW5nbGUocmVjdCkge1xuICAgIGNvbnN0IHRvcExlZnQgPSBfc2hhcmVkX3V0aWxfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5VdGlsLmFwcGx5VHJhbnNmb3JtKFtyZWN0WzBdLCByZWN0WzFdXSwgdGhpcy50cmFuc2Zvcm0pO1xuICAgIGNvbnN0IGJvdHRvbVJpZ2h0ID0gX3NoYXJlZF91dGlsX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uVXRpbC5hcHBseVRyYW5zZm9ybShbcmVjdFsyXSwgcmVjdFszXV0sIHRoaXMudHJhbnNmb3JtKTtcbiAgICByZXR1cm4gW3RvcExlZnRbMF0sIHRvcExlZnRbMV0sIGJvdHRvbVJpZ2h0WzBdLCBib3R0b21SaWdodFsxXV07XG4gIH1cbiAgY29udmVydFRvUGRmUG9pbnQoeCwgeSkge1xuICAgIHJldHVybiBfc2hhcmVkX3V0aWxfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5VdGlsLmFwcGx5SW52ZXJzZVRyYW5zZm9ybShbeCwgeV0sIHRoaXMudHJhbnNmb3JtKTtcbiAgfVxufVxuY2xhc3MgUmVuZGVyaW5nQ2FuY2VsbGVkRXhjZXB0aW9uIGV4dGVuZHMgX3NoYXJlZF91dGlsX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uQmFzZUV4Y2VwdGlvbiB7XG4gIGNvbnN0cnVjdG9yKG1zZywgZXh0cmFEZWxheSA9IDApIHtcbiAgICBzdXBlcihtc2csIFwiUmVuZGVyaW5nQ2FuY2VsbGVkRXhjZXB0aW9uXCIpO1xuICAgIHRoaXMuZXh0cmFEZWxheSA9IGV4dHJhRGVsYXk7XG4gIH1cbn1cbmZ1bmN0aW9uIGlzRGF0YVNjaGVtZSh1cmwpIHtcbiAgY29uc3QgaWkgPSB1cmwubGVuZ3RoO1xuICBsZXQgaSA9IDA7XG4gIHdoaWxlIChpIDwgaWkgJiYgdXJsW2ldLnRyaW0oKSA9PT0gXCJcIikge1xuICAgIGkrKztcbiAgfVxuICByZXR1cm4gdXJsLnN1YnN0cmluZyhpLCBpICsgNSkudG9Mb3dlckNhc2UoKSA9PT0gXCJkYXRhOlwiO1xufVxuZnVuY3Rpb24gaXNQZGZGaWxlKGZpbGVuYW1lKSB7XG4gIHJldHVybiB0eXBlb2YgZmlsZW5hbWUgPT09IFwic3RyaW5nXCIgJiYgL1xcLnBkZiQvaS50ZXN0KGZpbGVuYW1lKTtcbn1cbmZ1bmN0aW9uIGdldEZpbGVuYW1lRnJvbVVybCh1cmwsIG9ubHlTdHJpcFBhdGggPSBmYWxzZSkge1xuICBpZiAoIW9ubHlTdHJpcFBhdGgpIHtcbiAgICBbdXJsXSA9IHVybC5zcGxpdCgvWyM/XS8sIDEpO1xuICB9XG4gIHJldHVybiB1cmwuc3Vic3RyaW5nKHVybC5sYXN0SW5kZXhPZihcIi9cIikgKyAxKTtcbn1cbmZ1bmN0aW9uIGdldFBkZkZpbGVuYW1lRnJvbVVybCh1cmwsIGRlZmF1bHRGaWxlbmFtZSA9IFwiZG9jdW1lbnQucGRmXCIpIHtcbiAgaWYgKHR5cGVvZiB1cmwgIT09IFwic3RyaW5nXCIpIHtcbiAgICByZXR1cm4gZGVmYXVsdEZpbGVuYW1lO1xuICB9XG4gIGlmIChpc0RhdGFTY2hlbWUodXJsKSkge1xuICAgICgwLF9zaGFyZWRfdXRpbF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLndhcm4pKCdnZXRQZGZGaWxlbmFtZUZyb21Vcmw6IGlnbm9yZSBcImRhdGE6XCItVVJMIGZvciBwZXJmb3JtYW5jZSByZWFzb25zLicpO1xuICAgIHJldHVybiBkZWZhdWx0RmlsZW5hbWU7XG4gIH1cbiAgY29uc3QgcmVVUkkgPSAvXig/Oig/OlteOl0rOik/XFwvXFwvW14vXSspPyhbXj8jXSopKFxcP1teI10qKT8oIy4qKT8kLztcbiAgY29uc3QgcmVGaWxlbmFtZSA9IC9bXi8/Iz1dK1xcLnBkZlxcYig/IS4qXFwucGRmXFxiKS9pO1xuICBjb25zdCBzcGxpdFVSSSA9IHJlVVJJLmV4ZWModXJsKTtcbiAgbGV0IHN1Z2dlc3RlZEZpbGVuYW1lID0gcmVGaWxlbmFtZS5leGVjKHNwbGl0VVJJWzFdKSB8fCByZUZpbGVuYW1lLmV4ZWMoc3BsaXRVUklbMl0pIHx8IHJlRmlsZW5hbWUuZXhlYyhzcGxpdFVSSVszXSk7XG4gIGlmIChzdWdnZXN0ZWRGaWxlbmFtZSkge1xuICAgIHN1Z2dlc3RlZEZpbGVuYW1lID0gc3VnZ2VzdGVkRmlsZW5hbWVbMF07XG4gICAgaWYgKHN1Z2dlc3RlZEZpbGVuYW1lLmluY2x1ZGVzKFwiJVwiKSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgc3VnZ2VzdGVkRmlsZW5hbWUgPSByZUZpbGVuYW1lLmV4ZWMoZGVjb2RlVVJJQ29tcG9uZW50KHN1Z2dlc3RlZEZpbGVuYW1lKSlbMF07XG4gICAgICB9IGNhdGNoIHt9XG4gICAgfVxuICB9XG4gIHJldHVybiBzdWdnZXN0ZWRGaWxlbmFtZSB8fCBkZWZhdWx0RmlsZW5hbWU7XG59XG5jbGFzcyBTdGF0VGltZXIge1xuICBzdGFydGVkID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgdGltZXMgPSBbXTtcbiAgdGltZShuYW1lKSB7XG4gICAgaWYgKG5hbWUgaW4gdGhpcy5zdGFydGVkKSB7XG4gICAgICAoMCxfc2hhcmVkX3V0aWxfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy53YXJuKShgVGltZXIgaXMgYWxyZWFkeSBydW5uaW5nIGZvciAke25hbWV9YCk7XG4gICAgfVxuICAgIHRoaXMuc3RhcnRlZFtuYW1lXSA9IERhdGUubm93KCk7XG4gIH1cbiAgdGltZUVuZChuYW1lKSB7XG4gICAgaWYgKCEobmFtZSBpbiB0aGlzLnN0YXJ0ZWQpKSB7XG4gICAgICAoMCxfc2hhcmVkX3V0aWxfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy53YXJuKShgVGltZXIgaGFzIG5vdCBiZWVuIHN0YXJ0ZWQgZm9yICR7bmFtZX1gKTtcbiAgICB9XG4gICAgdGhpcy50aW1lcy5wdXNoKHtcbiAgICAgIG5hbWUsXG4gICAgICBzdGFydDogdGhpcy5zdGFydGVkW25hbWVdLFxuICAgICAgZW5kOiBEYXRlLm5vdygpXG4gICAgfSk7XG4gICAgZGVsZXRlIHRoaXMuc3RhcnRlZFtuYW1lXTtcbiAgfVxuICB0b1N0cmluZygpIHtcbiAgICBjb25zdCBvdXRCdWYgPSBbXTtcbiAgICBsZXQgbG9uZ2VzdCA9IDA7XG4gICAgZm9yIChjb25zdCB7XG4gICAgICBuYW1lXG4gICAgfSBvZiB0aGlzLnRpbWVzKSB7XG4gICAgICBsb25nZXN0ID0gTWF0aC5tYXgobmFtZS5sZW5ndGgsIGxvbmdlc3QpO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IHtcbiAgICAgIG5hbWUsXG4gICAgICBzdGFydCxcbiAgICAgIGVuZFxuICAgIH0gb2YgdGhpcy50aW1lcykge1xuICAgICAgb3V0QnVmLnB1c2goYCR7bmFtZS5wYWRFbmQobG9uZ2VzdCl9ICR7ZW5kIC0gc3RhcnR9bXNcXG5gKTtcbiAgICB9XG4gICAgcmV0dXJuIG91dEJ1Zi5qb2luKFwiXCIpO1xuICB9XG59XG5mdW5jdGlvbiBpc1ZhbGlkRmV0Y2hVcmwodXJsLCBiYXNlVXJsKSB7XG4gIHRyeSB7XG4gICAgY29uc3Qge1xuICAgICAgcHJvdG9jb2xcbiAgICB9ID0gYmFzZVVybCA/IG5ldyBVUkwodXJsLCBiYXNlVXJsKSA6IG5ldyBVUkwodXJsKTtcbiAgICByZXR1cm4gcHJvdG9jb2wgPT09IFwiaHR0cDpcIiB8fCBwcm90b2NvbCA9PT0gXCJodHRwczpcIjtcbiAgfSBjYXRjaCB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5mdW5jdGlvbiBub0NvbnRleHRNZW51KGUpIHtcbiAgZS5wcmV2ZW50RGVmYXVsdCgpO1xufVxuZnVuY3Rpb24gZGVwcmVjYXRlZChkZXRhaWxzKSB7XG4gIGNvbnNvbGUubG9nKFwiRGVwcmVjYXRlZCBBUEkgdXNhZ2U6IFwiICsgZGV0YWlscyk7XG59XG5sZXQgcGRmRGF0ZVN0cmluZ1JlZ2V4O1xuY2xhc3MgUERGRGF0ZVN0cmluZyB7XG4gIHN0YXRpYyB0b0RhdGVPYmplY3QoaW5wdXQpIHtcbiAgICBpZiAoIWlucHV0IHx8IHR5cGVvZiBpbnB1dCAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHBkZkRhdGVTdHJpbmdSZWdleCB8fD0gbmV3IFJlZ0V4cChcIl5EOlwiICsgXCIoXFxcXGR7NH0pXCIgKyBcIihcXFxcZHsyfSk/XCIgKyBcIihcXFxcZHsyfSk/XCIgKyBcIihcXFxcZHsyfSk/XCIgKyBcIihcXFxcZHsyfSk/XCIgKyBcIihcXFxcZHsyfSk/XCIgKyBcIihbWnwrfC1dKT9cIiArIFwiKFxcXFxkezJ9KT9cIiArIFwiJz9cIiArIFwiKFxcXFxkezJ9KT9cIiArIFwiJz9cIik7XG4gICAgY29uc3QgbWF0Y2hlcyA9IHBkZkRhdGVTdHJpbmdSZWdleC5leGVjKGlucHV0KTtcbiAgICBpZiAoIW1hdGNoZXMpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBjb25zdCB5ZWFyID0gcGFyc2VJbnQobWF0Y2hlc1sxXSwgMTApO1xuICAgIGxldCBtb250aCA9IHBhcnNlSW50KG1hdGNoZXNbMl0sIDEwKTtcbiAgICBtb250aCA9IG1vbnRoID49IDEgJiYgbW9udGggPD0gMTIgPyBtb250aCAtIDEgOiAwO1xuICAgIGxldCBkYXkgPSBwYXJzZUludChtYXRjaGVzWzNdLCAxMCk7XG4gICAgZGF5ID0gZGF5ID49IDEgJiYgZGF5IDw9IDMxID8gZGF5IDogMTtcbiAgICBsZXQgaG91ciA9IHBhcnNlSW50KG1hdGNoZXNbNF0sIDEwKTtcbiAgICBob3VyID0gaG91ciA+PSAwICYmIGhvdXIgPD0gMjMgPyBob3VyIDogMDtcbiAgICBsZXQgbWludXRlID0gcGFyc2VJbnQobWF0Y2hlc1s1XSwgMTApO1xuICAgIG1pbnV0ZSA9IG1pbnV0ZSA+PSAwICYmIG1pbnV0ZSA8PSA1OSA/IG1pbnV0ZSA6IDA7XG4gICAgbGV0IHNlY29uZCA9IHBhcnNlSW50KG1hdGNoZXNbNl0sIDEwKTtcbiAgICBzZWNvbmQgPSBzZWNvbmQgPj0gMCAmJiBzZWNvbmQgPD0gNTkgPyBzZWNvbmQgOiAwO1xuICAgIGNvbnN0IHVuaXZlcnNhbFRpbWVSZWxhdGlvbiA9IG1hdGNoZXNbN10gfHwgXCJaXCI7XG4gICAgbGV0IG9mZnNldEhvdXIgPSBwYXJzZUludChtYXRjaGVzWzhdLCAxMCk7XG4gICAgb2Zmc2V0SG91ciA9IG9mZnNldEhvdXIgPj0gMCAmJiBvZmZzZXRIb3VyIDw9IDIzID8gb2Zmc2V0SG91ciA6IDA7XG4gICAgbGV0IG9mZnNldE1pbnV0ZSA9IHBhcnNlSW50KG1hdGNoZXNbOV0sIDEwKSB8fCAwO1xuICAgIG9mZnNldE1pbnV0ZSA9IG9mZnNldE1pbnV0ZSA+PSAwICYmIG9mZnNldE1pbnV0ZSA8PSA1OSA/IG9mZnNldE1pbnV0ZSA6IDA7XG4gICAgaWYgKHVuaXZlcnNhbFRpbWVSZWxhdGlvbiA9PT0gXCItXCIpIHtcbiAgICAgIGhvdXIgKz0gb2Zmc2V0SG91cjtcbiAgICAgIG1pbnV0ZSArPSBvZmZzZXRNaW51dGU7XG4gICAgfSBlbHNlIGlmICh1bml2ZXJzYWxUaW1lUmVsYXRpb24gPT09IFwiK1wiKSB7XG4gICAgICBob3VyIC09IG9mZnNldEhvdXI7XG4gICAgICBtaW51dGUgLT0gb2Zmc2V0TWludXRlO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IERhdGUoRGF0ZS5VVEMoeWVhciwgbW9udGgsIGRheSwgaG91ciwgbWludXRlLCBzZWNvbmQpKTtcbiAgfVxufVxuZnVuY3Rpb24gZ2V0WGZhUGFnZVZpZXdwb3J0KHhmYVBhZ2UsIHtcbiAgc2NhbGUgPSAxLFxuICByb3RhdGlvbiA9IDBcbn0pIHtcbiAgY29uc3Qge1xuICAgIHdpZHRoLFxuICAgIGhlaWdodFxuICB9ID0geGZhUGFnZS5hdHRyaWJ1dGVzLnN0eWxlO1xuICBjb25zdCB2aWV3Qm94ID0gWzAsIDAsIHBhcnNlSW50KHdpZHRoKSwgcGFyc2VJbnQoaGVpZ2h0KV07XG4gIHJldHVybiBuZXcgUGFnZVZpZXdwb3J0KHtcbiAgICB2aWV3Qm94LFxuICAgIHNjYWxlLFxuICAgIHJvdGF0aW9uXG4gIH0pO1xufVxuZnVuY3Rpb24gZ2V0UkdCKGNvbG9yKSB7XG4gIGlmIChjb2xvci5zdGFydHNXaXRoKFwiI1wiKSkge1xuICAgIGNvbnN0IGNvbG9yUkdCID0gcGFyc2VJbnQoY29sb3Iuc2xpY2UoMSksIDE2KTtcbiAgICByZXR1cm4gWyhjb2xvclJHQiAmIDB4ZmYwMDAwKSA+PiAxNiwgKGNvbG9yUkdCICYgMHgwMGZmMDApID4+IDgsIGNvbG9yUkdCICYgMHgwMDAwZmZdO1xuICB9XG4gIGlmIChjb2xvci5zdGFydHNXaXRoKFwicmdiKFwiKSkge1xuICAgIHJldHVybiBjb2xvci5zbGljZSg0LCAtMSkuc3BsaXQoXCIsXCIpLm1hcCh4ID0+IHBhcnNlSW50KHgpKTtcbiAgfVxuICBpZiAoY29sb3Iuc3RhcnRzV2l0aChcInJnYmEoXCIpKSB7XG4gICAgcmV0dXJuIGNvbG9yLnNsaWNlKDUsIC0xKS5zcGxpdChcIixcIikubWFwKHggPT4gcGFyc2VJbnQoeCkpLnNsaWNlKDAsIDMpO1xuICB9XG4gICgwLF9zaGFyZWRfdXRpbF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLndhcm4pKGBOb3QgYSB2YWxpZCBjb2xvciBmb3JtYXQ6IFwiJHtjb2xvcn1cImApO1xuICByZXR1cm4gWzAsIDAsIDBdO1xufVxuZnVuY3Rpb24gZ2V0Q29sb3JWYWx1ZXMoY29sb3JzKSB7XG4gIGNvbnN0IHNwYW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcbiAgc3Bhbi5zdHlsZS52aXNpYmlsaXR5ID0gXCJoaWRkZW5cIjtcbiAgZG9jdW1lbnQuYm9keS5hcHBlbmQoc3Bhbik7XG4gIGZvciAoY29uc3QgbmFtZSBvZiBjb2xvcnMua2V5cygpKSB7XG4gICAgc3Bhbi5zdHlsZS5jb2xvciA9IG5hbWU7XG4gICAgY29uc3QgY29tcHV0ZWRDb2xvciA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHNwYW4pLmNvbG9yO1xuICAgIGNvbG9ycy5zZXQobmFtZSwgZ2V0UkdCKGNvbXB1dGVkQ29sb3IpKTtcbiAgfVxuICBzcGFuLnJlbW92ZSgpO1xufVxuZnVuY3Rpb24gZ2V0Q3VycmVudFRyYW5zZm9ybShjdHgpIHtcbiAgY29uc3Qge1xuICAgIGEsXG4gICAgYixcbiAgICBjLFxuICAgIGQsXG4gICAgZSxcbiAgICBmXG4gIH0gPSBjdHguZ2V0VHJhbnNmb3JtKCk7XG4gIHJldHVybiBbYSwgYiwgYywgZCwgZSwgZl07XG59XG5mdW5jdGlvbiBnZXRDdXJyZW50VHJhbnNmb3JtSW52ZXJzZShjdHgpIHtcbiAgY29uc3Qge1xuICAgIGEsXG4gICAgYixcbiAgICBjLFxuICAgIGQsXG4gICAgZSxcbiAgICBmXG4gIH0gPSBjdHguZ2V0VHJhbnNmb3JtKCkuaW52ZXJ0U2VsZigpO1xuICByZXR1cm4gW2EsIGIsIGMsIGQsIGUsIGZdO1xufVxuZnVuY3Rpb24gc2V0TGF5ZXJEaW1lbnNpb25zKGRpdiwgdmlld3BvcnQsIG11c3RGbGlwID0gZmFsc2UsIG11c3RSb3RhdGUgPSB0cnVlKSB7XG4gIGlmICh2aWV3cG9ydCBpbnN0YW5jZW9mIFBhZ2VWaWV3cG9ydCkge1xuICAgIGNvbnN0IHtcbiAgICAgIHBhZ2VXaWR0aCxcbiAgICAgIHBhZ2VIZWlnaHRcbiAgICB9ID0gdmlld3BvcnQucmF3RGltcztcbiAgICBjb25zdCB7XG4gICAgICBzdHlsZVxuICAgIH0gPSBkaXY7XG4gICAgY29uc3QgdXNlUm91bmQgPSBfc2hhcmVkX3V0aWxfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5GZWF0dXJlVGVzdC5pc0NTU1JvdW5kU3VwcG9ydGVkO1xuICAgIGNvbnN0IHcgPSBgdmFyKC0tc2NhbGUtZmFjdG9yKSAqICR7cGFnZVdpZHRofXB4YCxcbiAgICAgIGggPSBgdmFyKC0tc2NhbGUtZmFjdG9yKSAqICR7cGFnZUhlaWdodH1weGA7XG4gICAgY29uc3Qgd2lkdGhTdHIgPSB1c2VSb3VuZCA/IGByb3VuZCgke3d9LCAxcHgpYCA6IGBjYWxjKCR7d30pYCxcbiAgICAgIGhlaWdodFN0ciA9IHVzZVJvdW5kID8gYHJvdW5kKCR7aH0sIDFweClgIDogYGNhbGMoJHtofSlgO1xuICAgIGlmICghbXVzdEZsaXAgfHwgdmlld3BvcnQucm90YXRpb24gJSAxODAgPT09IDApIHtcbiAgICAgIHN0eWxlLndpZHRoID0gd2lkdGhTdHI7XG4gICAgICBzdHlsZS5oZWlnaHQgPSBoZWlnaHRTdHI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0eWxlLndpZHRoID0gaGVpZ2h0U3RyO1xuICAgICAgc3R5bGUuaGVpZ2h0ID0gd2lkdGhTdHI7XG4gICAgfVxuICB9XG4gIGlmIChtdXN0Um90YXRlKSB7XG4gICAgZGl2LnNldEF0dHJpYnV0ZShcImRhdGEtbWFpbi1yb3RhdGlvblwiLCB2aWV3cG9ydC5yb3RhdGlvbik7XG4gIH1cbn1cblxuXG4vKioqLyB9KSxcblxuLyoqKi8gNDIzOlxuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX19fd2VicGFja19tb2R1bGVfXywgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG4vKiBoYXJtb255IGV4cG9ydCAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywge1xuLyogaGFybW9ueSBleHBvcnQgKi8gICBEcmF3TGF5ZXI6ICgpID0+ICgvKiBiaW5kaW5nICovIERyYXdMYXllcilcbi8qIGhhcm1vbnkgZXhwb3J0ICovIH0pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9kaXNwbGF5X3V0aWxzX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ3Myk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX3NoYXJlZF91dGlsX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI2Nik7XG5cblxuY2xhc3MgRHJhd0xheWVyIHtcbiAgI3BhcmVudCA9IG51bGw7XG4gICNpZCA9IDA7XG4gICNtYXBwaW5nID0gbmV3IE1hcCgpO1xuICBjb25zdHJ1Y3Rvcih7XG4gICAgcGFnZUluZGV4XG4gIH0pIHtcbiAgICB0aGlzLnBhZ2VJbmRleCA9IHBhZ2VJbmRleDtcbiAgfVxuICBzZXRQYXJlbnQocGFyZW50KSB7XG4gICAgaWYgKCF0aGlzLiNwYXJlbnQpIHtcbiAgICAgIHRoaXMuI3BhcmVudCA9IHBhcmVudDtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHRoaXMuI3BhcmVudCAhPT0gcGFyZW50KSB7XG4gICAgICBpZiAodGhpcy4jbWFwcGluZy5zaXplID4gMCkge1xuICAgICAgICBmb3IgKGNvbnN0IHJvb3Qgb2YgdGhpcy4jbWFwcGluZy52YWx1ZXMoKSkge1xuICAgICAgICAgIHJvb3QucmVtb3ZlKCk7XG4gICAgICAgICAgcGFyZW50LmFwcGVuZChyb290KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhpcy4jcGFyZW50ID0gcGFyZW50O1xuICAgIH1cbiAgfVxuICBzdGF0aWMgZ2V0IF9zdmdGYWN0b3J5KCkge1xuICAgIHJldHVybiAoMCxfc2hhcmVkX3V0aWxfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5zaGFkb3cpKHRoaXMsIFwiX3N2Z0ZhY3RvcnlcIiwgbmV3IF9kaXNwbGF5X3V0aWxzX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uRE9NU1ZHRmFjdG9yeSgpKTtcbiAgfVxuICBzdGF0aWMgI3NldEJveChlbGVtZW50LCB7XG4gICAgeCxcbiAgICB5LFxuICAgIHdpZHRoLFxuICAgIGhlaWdodFxuICB9KSB7XG4gICAgY29uc3Qge1xuICAgICAgc3R5bGVcbiAgICB9ID0gZWxlbWVudDtcbiAgICBzdHlsZS50b3AgPSBgJHsxMDAgKiB5fSVgO1xuICAgIHN0eWxlLmxlZnQgPSBgJHsxMDAgKiB4fSVgO1xuICAgIHN0eWxlLndpZHRoID0gYCR7MTAwICogd2lkdGh9JWA7XG4gICAgc3R5bGUuaGVpZ2h0ID0gYCR7MTAwICogaGVpZ2h0fSVgO1xuICB9XG4gICNjcmVhdGVTVkcoYm94KSB7XG4gICAgY29uc3Qgc3ZnID0gRHJhd0xheWVyLl9zdmdGYWN0b3J5LmNyZWF0ZSgxLCAxLCB0cnVlKTtcbiAgICB0aGlzLiNwYXJlbnQuYXBwZW5kKHN2Zyk7XG4gICAgRHJhd0xheWVyLiNzZXRCb3goc3ZnLCBib3gpO1xuICAgIHJldHVybiBzdmc7XG4gIH1cbiAgaGlnaGxpZ2h0KHtcbiAgICBvdXRsaW5lcyxcbiAgICBib3hcbiAgfSwgY29sb3IsIG9wYWNpdHkpIHtcbiAgICBjb25zdCBpZCA9IHRoaXMuI2lkKys7XG4gICAgY29uc3Qgcm9vdCA9IHRoaXMuI2NyZWF0ZVNWRyhib3gpO1xuICAgIHJvb3QuY2xhc3NMaXN0LmFkZChcImhpZ2hsaWdodFwiKTtcbiAgICBjb25zdCBkZWZzID0gRHJhd0xheWVyLl9zdmdGYWN0b3J5LmNyZWF0ZUVsZW1lbnQoXCJkZWZzXCIpO1xuICAgIHJvb3QuYXBwZW5kKGRlZnMpO1xuICAgIGNvbnN0IHBhdGggPSBEcmF3TGF5ZXIuX3N2Z0ZhY3RvcnkuY3JlYXRlRWxlbWVudChcInBhdGhcIik7XG4gICAgZGVmcy5hcHBlbmQocGF0aCk7XG4gICAgY29uc3QgcGF0aElkID0gYHBhdGhfcCR7dGhpcy5wYWdlSW5kZXh9XyR7aWR9YDtcbiAgICBwYXRoLnNldEF0dHJpYnV0ZShcImlkXCIsIHBhdGhJZCk7XG4gICAgcGF0aC5zZXRBdHRyaWJ1dGUoXCJkXCIsIERyYXdMYXllci4jZXh0cmFjdFBhdGhGcm9tSGlnaGxpZ2h0T3V0bGluZXMob3V0bGluZXMpKTtcbiAgICBjb25zdCBjbGlwUGF0aCA9IERyYXdMYXllci5fc3ZnRmFjdG9yeS5jcmVhdGVFbGVtZW50KFwiY2xpcFBhdGhcIik7XG4gICAgZGVmcy5hcHBlbmQoY2xpcFBhdGgpO1xuICAgIGNvbnN0IGNsaXBQYXRoSWQgPSBgY2xpcF8ke3BhdGhJZH1gO1xuICAgIGNsaXBQYXRoLnNldEF0dHJpYnV0ZShcImlkXCIsIGNsaXBQYXRoSWQpO1xuICAgIGNsaXBQYXRoLnNldEF0dHJpYnV0ZShcImNsaXBQYXRoVW5pdHNcIiwgXCJvYmplY3RCb3VuZGluZ0JveFwiKTtcbiAgICBjb25zdCBjbGlwUGF0aFVzZSA9IERyYXdMYXllci5fc3ZnRmFjdG9yeS5jcmVhdGVFbGVtZW50KFwidXNlXCIpO1xuICAgIGNsaXBQYXRoLmFwcGVuZChjbGlwUGF0aFVzZSk7XG4gICAgY2xpcFBhdGhVc2Uuc2V0QXR0cmlidXRlKFwiaHJlZlwiLCBgIyR7cGF0aElkfWApO1xuICAgIGNsaXBQYXRoVXNlLmNsYXNzTGlzdC5hZGQoXCJjbGlwXCIpO1xuICAgIGNvbnN0IHVzZSA9IERyYXdMYXllci5fc3ZnRmFjdG9yeS5jcmVhdGVFbGVtZW50KFwidXNlXCIpO1xuICAgIHJvb3QuYXBwZW5kKHVzZSk7XG4gICAgcm9vdC5zZXRBdHRyaWJ1dGUoXCJmaWxsXCIsIGNvbG9yKTtcbiAgICByb290LnNldEF0dHJpYnV0ZShcImZpbGwtb3BhY2l0eVwiLCBvcGFjaXR5KTtcbiAgICB1c2Uuc2V0QXR0cmlidXRlKFwiaHJlZlwiLCBgIyR7cGF0aElkfWApO1xuICAgIHRoaXMuI21hcHBpbmcuc2V0KGlkLCByb290KTtcbiAgICByZXR1cm4ge1xuICAgICAgaWQsXG4gICAgICBjbGlwUGF0aElkOiBgdXJsKCMke2NsaXBQYXRoSWR9KWBcbiAgICB9O1xuICB9XG4gIGhpZ2hsaWdodE91dGxpbmUoe1xuICAgIG91dGxpbmVzLFxuICAgIGJveFxuICB9KSB7XG4gICAgY29uc3QgaWQgPSB0aGlzLiNpZCsrO1xuICAgIGNvbnN0IHJvb3QgPSB0aGlzLiNjcmVhdGVTVkcoYm94KTtcbiAgICByb290LmNsYXNzTGlzdC5hZGQoXCJoaWdobGlnaHRPdXRsaW5lXCIpO1xuICAgIGNvbnN0IGRlZnMgPSBEcmF3TGF5ZXIuX3N2Z0ZhY3RvcnkuY3JlYXRlRWxlbWVudChcImRlZnNcIik7XG4gICAgcm9vdC5hcHBlbmQoZGVmcyk7XG4gICAgY29uc3QgcGF0aCA9IERyYXdMYXllci5fc3ZnRmFjdG9yeS5jcmVhdGVFbGVtZW50KFwicGF0aFwiKTtcbiAgICBkZWZzLmFwcGVuZChwYXRoKTtcbiAgICBjb25zdCBwYXRoSWQgPSBgcGF0aF9wJHt0aGlzLnBhZ2VJbmRleH1fJHtpZH1gO1xuICAgIHBhdGguc2V0QXR0cmlidXRlKFwiaWRcIiwgcGF0aElkKTtcbiAgICBwYXRoLnNldEF0dHJpYnV0ZShcImRcIiwgRHJhd0xheWVyLiNleHRyYWN0UGF0aEZyb21IaWdobGlnaHRPdXRsaW5lcyhvdXRsaW5lcykpO1xuICAgIHBhdGguc2V0QXR0cmlidXRlKFwidmVjdG9yLWVmZmVjdFwiLCBcIm5vbi1zY2FsaW5nLXN0cm9rZVwiKTtcbiAgICBjb25zdCB1c2UxID0gRHJhd0xheWVyLl9zdmdGYWN0b3J5LmNyZWF0ZUVsZW1lbnQoXCJ1c2VcIik7XG4gICAgcm9vdC5hcHBlbmQodXNlMSk7XG4gICAgdXNlMS5zZXRBdHRyaWJ1dGUoXCJocmVmXCIsIGAjJHtwYXRoSWR9YCk7XG4gICAgY29uc3QgdXNlMiA9IHVzZTEuY2xvbmVOb2RlKCk7XG4gICAgcm9vdC5hcHBlbmQodXNlMik7XG4gICAgdXNlMS5jbGFzc0xpc3QuYWRkKFwibWFpbk91dGxpbmVcIik7XG4gICAgdXNlMi5jbGFzc0xpc3QuYWRkKFwic2Vjb25kYXJ5T3V0bGluZVwiKTtcbiAgICB0aGlzLiNtYXBwaW5nLnNldChpZCwgcm9vdCk7XG4gICAgcmV0dXJuIGlkO1xuICB9XG4gIHN0YXRpYyAjZXh0cmFjdFBhdGhGcm9tSGlnaGxpZ2h0T3V0bGluZXMocG9seWdvbnMpIHtcbiAgICBjb25zdCBidWZmZXIgPSBbXTtcbiAgICBmb3IgKGNvbnN0IHBvbHlnb24gb2YgcG9seWdvbnMpIHtcbiAgICAgIGxldCBbcHJldlgsIHByZXZZXSA9IHBvbHlnb247XG4gICAgICBidWZmZXIucHVzaChgTSR7cHJldlh9ICR7cHJldll9YCk7XG4gICAgICBmb3IgKGxldCBpID0gMjsgaSA8IHBvbHlnb24ubGVuZ3RoOyBpICs9IDIpIHtcbiAgICAgICAgY29uc3QgeCA9IHBvbHlnb25baV07XG4gICAgICAgIGNvbnN0IHkgPSBwb2x5Z29uW2kgKyAxXTtcbiAgICAgICAgaWYgKHggPT09IHByZXZYKSB7XG4gICAgICAgICAgYnVmZmVyLnB1c2goYFYke3l9YCk7XG4gICAgICAgICAgcHJldlkgPSB5O1xuICAgICAgICB9IGVsc2UgaWYgKHkgPT09IHByZXZZKSB7XG4gICAgICAgICAgYnVmZmVyLnB1c2goYEgke3h9YCk7XG4gICAgICAgICAgcHJldlggPSB4O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBidWZmZXIucHVzaChcIlpcIik7XG4gICAgfVxuICAgIHJldHVybiBidWZmZXIuam9pbihcIiBcIik7XG4gIH1cbiAgdXBkYXRlQm94KGlkLCBib3gpIHtcbiAgICBEcmF3TGF5ZXIuI3NldEJveCh0aGlzLiNtYXBwaW5nLmdldChpZCksIGJveCk7XG4gIH1cbiAgcm90YXRlKGlkLCBhbmdsZSkge1xuICAgIHRoaXMuI21hcHBpbmcuZ2V0KGlkKS5zZXRBdHRyaWJ1dGUoXCJkYXRhLW1haW4tcm90YXRpb25cIiwgYW5nbGUpO1xuICB9XG4gIGNoYW5nZUNvbG9yKGlkLCBjb2xvcikge1xuICAgIHRoaXMuI21hcHBpbmcuZ2V0KGlkKS5zZXRBdHRyaWJ1dGUoXCJmaWxsXCIsIGNvbG9yKTtcbiAgfVxuICBjaGFuZ2VPcGFjaXR5KGlkLCBvcGFjaXR5KSB7XG4gICAgdGhpcy4jbWFwcGluZy5nZXQoaWQpLnNldEF0dHJpYnV0ZShcImZpbGwtb3BhY2l0eVwiLCBvcGFjaXR5KTtcbiAgfVxuICBhZGRDbGFzcyhpZCwgY2xhc3NOYW1lKSB7XG4gICAgdGhpcy4jbWFwcGluZy5nZXQoaWQpLmNsYXNzTGlzdC5hZGQoY2xhc3NOYW1lKTtcbiAgfVxuICByZW1vdmVDbGFzcyhpZCwgY2xhc3NOYW1lKSB7XG4gICAgdGhpcy4jbWFwcGluZy5nZXQoaWQpLmNsYXNzTGlzdC5yZW1vdmUoY2xhc3NOYW1lKTtcbiAgfVxuICByZW1vdmUoaWQpIHtcbiAgICBpZiAodGhpcy4jcGFyZW50ID09PSBudWxsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuI21hcHBpbmcuZ2V0KGlkKS5yZW1vdmUoKTtcbiAgICB0aGlzLiNtYXBwaW5nLmRlbGV0ZShpZCk7XG4gIH1cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLiNwYXJlbnQgPSBudWxsO1xuICAgIGZvciAoY29uc3Qgcm9vdCBvZiB0aGlzLiNtYXBwaW5nLnZhbHVlcygpKSB7XG4gICAgICByb290LnJlbW92ZSgpO1xuICAgIH1cbiAgICB0aGlzLiNtYXBwaW5nLmNsZWFyKCk7XG4gIH1cbn1cblxuXG4vKioqLyB9KSxcblxuLyoqKi8gNjI5OlxuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX19fd2VicGFja19tb2R1bGVfXywgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5cbi8vIEVYUE9SVFNcbl9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCB7XG4gIEFubm90YXRpb25FZGl0b3JMYXllcjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gQW5ub3RhdGlvbkVkaXRvckxheWVyKVxufSk7XG5cbi8vIEVYVEVSTkFMIE1PRFVMRTogLi9zcmMvc2hhcmVkL3V0aWwuanNcbnZhciB1dGlsID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNjYpO1xuLy8gRVhURVJOQUwgTU9EVUxFOiAuL3NyYy9kaXNwbGF5L2VkaXRvci9lZGl0b3IuanMgKyAyIG1vZHVsZXNcbnZhciBlZGl0b3JfZWRpdG9yID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMTUpO1xuLy8gRVhURVJOQUwgTU9EVUxFOiAuL3NyYy9kaXNwbGF5L2VkaXRvci90b29scy5qc1xudmFyIHRvb2xzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4MTIpO1xuLy8gRVhURVJOQUwgTU9EVUxFOiAuL3NyYy9kaXNwbGF5L2Fubm90YXRpb25fbGF5ZXIuanMgKyAxIG1vZHVsZXNcbnZhciBhbm5vdGF0aW9uX2xheWVyID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2NDApO1xuOy8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL2Rpc3BsYXkvZWRpdG9yL2ZyZWV0ZXh0LmpzXG5cblxuXG5cbmNsYXNzIEZyZWVUZXh0RWRpdG9yIGV4dGVuZHMgZWRpdG9yX2VkaXRvci5Bbm5vdGF0aW9uRWRpdG9yIHtcbiAgI2JvdW5kRWRpdG9yRGl2Qmx1ciA9IHRoaXMuZWRpdG9yRGl2Qmx1ci5iaW5kKHRoaXMpO1xuICAjYm91bmRFZGl0b3JEaXZGb2N1cyA9IHRoaXMuZWRpdG9yRGl2Rm9jdXMuYmluZCh0aGlzKTtcbiAgI2JvdW5kRWRpdG9yRGl2SW5wdXQgPSB0aGlzLmVkaXRvckRpdklucHV0LmJpbmQodGhpcyk7XG4gICNib3VuZEVkaXRvckRpdktleWRvd24gPSB0aGlzLmVkaXRvckRpdktleWRvd24uYmluZCh0aGlzKTtcbiAgI2NvbG9yO1xuICAjY29udGVudCA9IFwiXCI7XG4gICNlZGl0b3JEaXZJZCA9IGAke3RoaXMuaWR9LWVkaXRvcmA7XG4gICNmb250U2l6ZTtcbiAgI2luaXRpYWxEYXRhID0gbnVsbDtcbiAgc3RhdGljIF9mcmVlVGV4dERlZmF1bHRDb250ZW50ID0gXCJcIjtcbiAgc3RhdGljIF9pbnRlcm5hbFBhZGRpbmcgPSAwO1xuICBzdGF0aWMgX2RlZmF1bHRDb2xvciA9IG51bGw7XG4gIHN0YXRpYyBfZGVmYXVsdEZvbnRTaXplID0gMTA7XG4gIHN0YXRpYyBnZXQgX2tleWJvYXJkTWFuYWdlcigpIHtcbiAgICBjb25zdCBwcm90byA9IEZyZWVUZXh0RWRpdG9yLnByb3RvdHlwZTtcbiAgICBjb25zdCBhcnJvd0NoZWNrZXIgPSBzZWxmID0+IHNlbGYuaXNFbXB0eSgpO1xuICAgIGNvbnN0IHNtYWxsID0gdG9vbHMuQW5ub3RhdGlvbkVkaXRvclVJTWFuYWdlci5UUkFOU0xBVEVfU01BTEw7XG4gICAgY29uc3QgYmlnID0gdG9vbHMuQW5ub3RhdGlvbkVkaXRvclVJTWFuYWdlci5UUkFOU0xBVEVfQklHO1xuICAgIHJldHVybiAoMCx1dGlsLnNoYWRvdykodGhpcywgXCJfa2V5Ym9hcmRNYW5hZ2VyXCIsIG5ldyB0b29scy5LZXlib2FyZE1hbmFnZXIoW1tbXCJjdHJsK3NcIiwgXCJtYWMrbWV0YStzXCIsIFwiY3RybCtwXCIsIFwibWFjK21ldGErcFwiXSwgcHJvdG8uY29tbWl0T3JSZW1vdmUsIHtcbiAgICAgIGJ1YmJsZXM6IHRydWVcbiAgICB9XSwgW1tcImN0cmwrRW50ZXJcIiwgXCJtYWMrbWV0YStFbnRlclwiLCBcIkVzY2FwZVwiLCBcIm1hYytFc2NhcGVcIl0sIHByb3RvLmNvbW1pdE9yUmVtb3ZlXSwgW1tcIkFycm93TGVmdFwiLCBcIm1hYytBcnJvd0xlZnRcIl0sIHByb3RvLl90cmFuc2xhdGVFbXB0eSwge1xuICAgICAgYXJnczogWy1zbWFsbCwgMF0sXG4gICAgICBjaGVja2VyOiBhcnJvd0NoZWNrZXJcbiAgICB9XSwgW1tcImN0cmwrQXJyb3dMZWZ0XCIsIFwibWFjK3NoaWZ0K0Fycm93TGVmdFwiXSwgcHJvdG8uX3RyYW5zbGF0ZUVtcHR5LCB7XG4gICAgICBhcmdzOiBbLWJpZywgMF0sXG4gICAgICBjaGVja2VyOiBhcnJvd0NoZWNrZXJcbiAgICB9XSwgW1tcIkFycm93UmlnaHRcIiwgXCJtYWMrQXJyb3dSaWdodFwiXSwgcHJvdG8uX3RyYW5zbGF0ZUVtcHR5LCB7XG4gICAgICBhcmdzOiBbc21hbGwsIDBdLFxuICAgICAgY2hlY2tlcjogYXJyb3dDaGVja2VyXG4gICAgfV0sIFtbXCJjdHJsK0Fycm93UmlnaHRcIiwgXCJtYWMrc2hpZnQrQXJyb3dSaWdodFwiXSwgcHJvdG8uX3RyYW5zbGF0ZUVtcHR5LCB7XG4gICAgICBhcmdzOiBbYmlnLCAwXSxcbiAgICAgIGNoZWNrZXI6IGFycm93Q2hlY2tlclxuICAgIH1dLCBbW1wiQXJyb3dVcFwiLCBcIm1hYytBcnJvd1VwXCJdLCBwcm90by5fdHJhbnNsYXRlRW1wdHksIHtcbiAgICAgIGFyZ3M6IFswLCAtc21hbGxdLFxuICAgICAgY2hlY2tlcjogYXJyb3dDaGVja2VyXG4gICAgfV0sIFtbXCJjdHJsK0Fycm93VXBcIiwgXCJtYWMrc2hpZnQrQXJyb3dVcFwiXSwgcHJvdG8uX3RyYW5zbGF0ZUVtcHR5LCB7XG4gICAgICBhcmdzOiBbMCwgLWJpZ10sXG4gICAgICBjaGVja2VyOiBhcnJvd0NoZWNrZXJcbiAgICB9XSwgW1tcIkFycm93RG93blwiLCBcIm1hYytBcnJvd0Rvd25cIl0sIHByb3RvLl90cmFuc2xhdGVFbXB0eSwge1xuICAgICAgYXJnczogWzAsIHNtYWxsXSxcbiAgICAgIGNoZWNrZXI6IGFycm93Q2hlY2tlclxuICAgIH1dLCBbW1wiY3RybCtBcnJvd0Rvd25cIiwgXCJtYWMrc2hpZnQrQXJyb3dEb3duXCJdLCBwcm90by5fdHJhbnNsYXRlRW1wdHksIHtcbiAgICAgIGFyZ3M6IFswLCBiaWddLFxuICAgICAgY2hlY2tlcjogYXJyb3dDaGVja2VyXG4gICAgfV1dKSk7XG4gIH1cbiAgc3RhdGljIF90eXBlID0gXCJmcmVldGV4dFwiO1xuICBzdGF0aWMgX2VkaXRvclR5cGUgPSB1dGlsLkFubm90YXRpb25FZGl0b3JUeXBlLkZSRUVURVhUO1xuICBjb25zdHJ1Y3RvcihwYXJhbXMpIHtcbiAgICBzdXBlcih7XG4gICAgICAuLi5wYXJhbXMsXG4gICAgICBuYW1lOiBcImZyZWVUZXh0RWRpdG9yXCJcbiAgICB9KTtcbiAgICB0aGlzLiNjb2xvciA9IHBhcmFtcy5jb2xvciB8fCBGcmVlVGV4dEVkaXRvci5fZGVmYXVsdENvbG9yIHx8IGVkaXRvcl9lZGl0b3IuQW5ub3RhdGlvbkVkaXRvci5fZGVmYXVsdExpbmVDb2xvcjtcbiAgICB0aGlzLiNmb250U2l6ZSA9IHBhcmFtcy5mb250U2l6ZSB8fCBGcmVlVGV4dEVkaXRvci5fZGVmYXVsdEZvbnRTaXplO1xuICB9XG4gIHN0YXRpYyBpbml0aWFsaXplKGwxMG4pIHtcbiAgICBlZGl0b3JfZWRpdG9yLkFubm90YXRpb25FZGl0b3IuaW5pdGlhbGl6ZShsMTBuLCB7XG4gICAgICBzdHJpbmdzOiBbXCJwZGZqcy1mcmVlLXRleHQtZGVmYXVsdC1jb250ZW50XCJdXG4gICAgfSk7XG4gICAgY29uc3Qgc3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCk7XG4gICAgdGhpcy5faW50ZXJuYWxQYWRkaW5nID0gcGFyc2VGbG9hdChzdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKFwiLS1mcmVldGV4dC1wYWRkaW5nXCIpKTtcbiAgfVxuICBzdGF0aWMgdXBkYXRlRGVmYXVsdFBhcmFtcyh0eXBlLCB2YWx1ZSkge1xuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgY2FzZSB1dGlsLkFubm90YXRpb25FZGl0b3JQYXJhbXNUeXBlLkZSRUVURVhUX1NJWkU6XG4gICAgICAgIEZyZWVUZXh0RWRpdG9yLl9kZWZhdWx0Rm9udFNpemUgPSB2YWx1ZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIHV0aWwuQW5ub3RhdGlvbkVkaXRvclBhcmFtc1R5cGUuRlJFRVRFWFRfQ09MT1I6XG4gICAgICAgIEZyZWVUZXh0RWRpdG9yLl9kZWZhdWx0Q29sb3IgPSB2YWx1ZTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHVwZGF0ZVBhcmFtcyh0eXBlLCB2YWx1ZSkge1xuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgY2FzZSB1dGlsLkFubm90YXRpb25FZGl0b3JQYXJhbXNUeXBlLkZSRUVURVhUX1NJWkU6XG4gICAgICAgIHRoaXMuI3VwZGF0ZUZvbnRTaXplKHZhbHVlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIHV0aWwuQW5ub3RhdGlvbkVkaXRvclBhcmFtc1R5cGUuRlJFRVRFWFRfQ09MT1I6XG4gICAgICAgIHRoaXMuI3VwZGF0ZUNvbG9yKHZhbHVlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHN0YXRpYyBnZXQgZGVmYXVsdFByb3BlcnRpZXNUb1VwZGF0ZSgpIHtcbiAgICByZXR1cm4gW1t1dGlsLkFubm90YXRpb25FZGl0b3JQYXJhbXNUeXBlLkZSRUVURVhUX1NJWkUsIEZyZWVUZXh0RWRpdG9yLl9kZWZhdWx0Rm9udFNpemVdLCBbdXRpbC5Bbm5vdGF0aW9uRWRpdG9yUGFyYW1zVHlwZS5GUkVFVEVYVF9DT0xPUiwgRnJlZVRleHRFZGl0b3IuX2RlZmF1bHRDb2xvciB8fCBlZGl0b3JfZWRpdG9yLkFubm90YXRpb25FZGl0b3IuX2RlZmF1bHRMaW5lQ29sb3JdXTtcbiAgfVxuICBnZXQgcHJvcGVydGllc1RvVXBkYXRlKCkge1xuICAgIHJldHVybiBbW3V0aWwuQW5ub3RhdGlvbkVkaXRvclBhcmFtc1R5cGUuRlJFRVRFWFRfU0laRSwgdGhpcy4jZm9udFNpemVdLCBbdXRpbC5Bbm5vdGF0aW9uRWRpdG9yUGFyYW1zVHlwZS5GUkVFVEVYVF9DT0xPUiwgdGhpcy4jY29sb3JdXTtcbiAgfVxuICAjdXBkYXRlRm9udFNpemUoZm9udFNpemUpIHtcbiAgICBjb25zdCBzZXRGb250c2l6ZSA9IHNpemUgPT4ge1xuICAgICAgdGhpcy5lZGl0b3JEaXYuc3R5bGUuZm9udFNpemUgPSBgY2FsYygke3NpemV9cHggKiB2YXIoLS1zY2FsZS1mYWN0b3IpKWA7XG4gICAgICB0aGlzLnRyYW5zbGF0ZSgwLCAtKHNpemUgLSB0aGlzLiNmb250U2l6ZSkgKiB0aGlzLnBhcmVudFNjYWxlKTtcbiAgICAgIHRoaXMuI2ZvbnRTaXplID0gc2l6ZTtcbiAgICAgIHRoaXMuI3NldEVkaXRvckRpbWVuc2lvbnMoKTtcbiAgICB9O1xuICAgIGNvbnN0IHNhdmVkRm9udHNpemUgPSB0aGlzLiNmb250U2l6ZTtcbiAgICB0aGlzLmFkZENvbW1hbmRzKHtcbiAgICAgIGNtZDogKCkgPT4ge1xuICAgICAgICBzZXRGb250c2l6ZShmb250U2l6ZSk7XG4gICAgICB9LFxuICAgICAgdW5kbzogKCkgPT4ge1xuICAgICAgICBzZXRGb250c2l6ZShzYXZlZEZvbnRzaXplKTtcbiAgICAgIH0sXG4gICAgICBtdXN0RXhlYzogdHJ1ZSxcbiAgICAgIHR5cGU6IHV0aWwuQW5ub3RhdGlvbkVkaXRvclBhcmFtc1R5cGUuRlJFRVRFWFRfU0laRSxcbiAgICAgIG92ZXJ3cml0ZUlmU2FtZVR5cGU6IHRydWUsXG4gICAgICBrZWVwVW5kbzogdHJ1ZVxuICAgIH0pO1xuICB9XG4gICN1cGRhdGVDb2xvcihjb2xvcikge1xuICAgIGNvbnN0IHNhdmVkQ29sb3IgPSB0aGlzLiNjb2xvcjtcbiAgICB0aGlzLmFkZENvbW1hbmRzKHtcbiAgICAgIGNtZDogKCkgPT4ge1xuICAgICAgICB0aGlzLiNjb2xvciA9IHRoaXMuZWRpdG9yRGl2LnN0eWxlLmNvbG9yID0gY29sb3I7XG4gICAgICB9LFxuICAgICAgdW5kbzogKCkgPT4ge1xuICAgICAgICB0aGlzLiNjb2xvciA9IHRoaXMuZWRpdG9yRGl2LnN0eWxlLmNvbG9yID0gc2F2ZWRDb2xvcjtcbiAgICAgIH0sXG4gICAgICBtdXN0RXhlYzogdHJ1ZSxcbiAgICAgIHR5cGU6IHV0aWwuQW5ub3RhdGlvbkVkaXRvclBhcmFtc1R5cGUuRlJFRVRFWFRfQ09MT1IsXG4gICAgICBvdmVyd3JpdGVJZlNhbWVUeXBlOiB0cnVlLFxuICAgICAga2VlcFVuZG86IHRydWVcbiAgICB9KTtcbiAgfVxuICBfdHJhbnNsYXRlRW1wdHkoeCwgeSkge1xuICAgIHRoaXMuX3VpTWFuYWdlci50cmFuc2xhdGVTZWxlY3RlZEVkaXRvcnMoeCwgeSwgdHJ1ZSk7XG4gIH1cbiAgZ2V0SW5pdGlhbFRyYW5zbGF0aW9uKCkge1xuICAgIGNvbnN0IHNjYWxlID0gdGhpcy5wYXJlbnRTY2FsZTtcbiAgICByZXR1cm4gWy1GcmVlVGV4dEVkaXRvci5faW50ZXJuYWxQYWRkaW5nICogc2NhbGUsIC0oRnJlZVRleHRFZGl0b3IuX2ludGVybmFsUGFkZGluZyArIHRoaXMuI2ZvbnRTaXplKSAqIHNjYWxlXTtcbiAgfVxuICByZWJ1aWxkKCkge1xuICAgIGlmICghdGhpcy5wYXJlbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgc3VwZXIucmVidWlsZCgpO1xuICAgIGlmICh0aGlzLmRpdiA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoIXRoaXMuaXNBdHRhY2hlZFRvRE9NKSB7XG4gICAgICB0aGlzLnBhcmVudC5hZGQodGhpcyk7XG4gICAgfVxuICB9XG4gIGVuYWJsZUVkaXRNb2RlKCkge1xuICAgIGlmICh0aGlzLmlzSW5FZGl0TW9kZSgpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMucGFyZW50LnNldEVkaXRpbmdTdGF0ZShmYWxzZSk7XG4gICAgdGhpcy5wYXJlbnQudXBkYXRlVG9vbGJhcih1dGlsLkFubm90YXRpb25FZGl0b3JUeXBlLkZSRUVURVhUKTtcbiAgICBzdXBlci5lbmFibGVFZGl0TW9kZSgpO1xuICAgIHRoaXMub3ZlcmxheURpdi5jbGFzc0xpc3QucmVtb3ZlKFwiZW5hYmxlZFwiKTtcbiAgICB0aGlzLmVkaXRvckRpdi5jb250ZW50RWRpdGFibGUgPSB0cnVlO1xuICAgIHRoaXMuX2lzRHJhZ2dhYmxlID0gZmFsc2U7XG4gICAgdGhpcy5kaXYucmVtb3ZlQXR0cmlidXRlKFwiYXJpYS1hY3RpdmVkZXNjZW5kYW50XCIpO1xuICAgIHRoaXMuZWRpdG9yRGl2LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIHRoaXMuI2JvdW5kRWRpdG9yRGl2S2V5ZG93bik7XG4gICAgdGhpcy5lZGl0b3JEaXYuYWRkRXZlbnRMaXN0ZW5lcihcImZvY3VzXCIsIHRoaXMuI2JvdW5kRWRpdG9yRGl2Rm9jdXMpO1xuICAgIHRoaXMuZWRpdG9yRGl2LmFkZEV2ZW50TGlzdGVuZXIoXCJibHVyXCIsIHRoaXMuI2JvdW5kRWRpdG9yRGl2Qmx1cik7XG4gICAgdGhpcy5lZGl0b3JEaXYuYWRkRXZlbnRMaXN0ZW5lcihcImlucHV0XCIsIHRoaXMuI2JvdW5kRWRpdG9yRGl2SW5wdXQpO1xuICB9XG4gIGRpc2FibGVFZGl0TW9kZSgpIHtcbiAgICBpZiAoIXRoaXMuaXNJbkVkaXRNb2RlKCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5wYXJlbnQuc2V0RWRpdGluZ1N0YXRlKHRydWUpO1xuICAgIHN1cGVyLmRpc2FibGVFZGl0TW9kZSgpO1xuICAgIHRoaXMub3ZlcmxheURpdi5jbGFzc0xpc3QuYWRkKFwiZW5hYmxlZFwiKTtcbiAgICB0aGlzLmVkaXRvckRpdi5jb250ZW50RWRpdGFibGUgPSBmYWxzZTtcbiAgICB0aGlzLmRpdi5zZXRBdHRyaWJ1dGUoXCJhcmlhLWFjdGl2ZWRlc2NlbmRhbnRcIiwgdGhpcy4jZWRpdG9yRGl2SWQpO1xuICAgIHRoaXMuX2lzRHJhZ2dhYmxlID0gdHJ1ZTtcbiAgICB0aGlzLmVkaXRvckRpdi5yZW1vdmVFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCB0aGlzLiNib3VuZEVkaXRvckRpdktleWRvd24pO1xuICAgIHRoaXMuZWRpdG9yRGl2LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJmb2N1c1wiLCB0aGlzLiNib3VuZEVkaXRvckRpdkZvY3VzKTtcbiAgICB0aGlzLmVkaXRvckRpdi5yZW1vdmVFdmVudExpc3RlbmVyKFwiYmx1clwiLCB0aGlzLiNib3VuZEVkaXRvckRpdkJsdXIpO1xuICAgIHRoaXMuZWRpdG9yRGl2LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJpbnB1dFwiLCB0aGlzLiNib3VuZEVkaXRvckRpdklucHV0KTtcbiAgICB0aGlzLmRpdi5mb2N1cyh7XG4gICAgICBwcmV2ZW50U2Nyb2xsOiB0cnVlXG4gICAgfSk7XG4gICAgdGhpcy5pc0VkaXRpbmcgPSBmYWxzZTtcbiAgICB0aGlzLnBhcmVudC5kaXYuY2xhc3NMaXN0LmFkZChcImZyZWV0ZXh0RWRpdGluZ1wiKTtcbiAgfVxuICBmb2N1c2luKGV2ZW50KSB7XG4gICAgaWYgKCF0aGlzLl9mb2N1c0V2ZW50c0FsbG93ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgc3VwZXIuZm9jdXNpbihldmVudCk7XG4gICAgaWYgKGV2ZW50LnRhcmdldCAhPT0gdGhpcy5lZGl0b3JEaXYpIHtcbiAgICAgIHRoaXMuZWRpdG9yRGl2LmZvY3VzKCk7XG4gICAgfVxuICB9XG4gIG9uY2VBZGRlZCgpIHtcbiAgICBpZiAodGhpcy53aWR0aCkge1xuICAgICAgdGhpcy4jY2hlYXRJbml0aWFsUmVjdCgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLmVuYWJsZUVkaXRNb2RlKCk7XG4gICAgdGhpcy5lZGl0b3JEaXYuZm9jdXMoKTtcbiAgICBpZiAodGhpcy5faW5pdGlhbE9wdGlvbnM/LmlzQ2VudGVyZWQpIHtcbiAgICAgIHRoaXMuY2VudGVyKCk7XG4gICAgfVxuICAgIHRoaXMuX2luaXRpYWxPcHRpb25zID0gbnVsbDtcbiAgfVxuICBpc0VtcHR5KCkge1xuICAgIHJldHVybiAhdGhpcy5lZGl0b3JEaXYgfHwgdGhpcy5lZGl0b3JEaXYuaW5uZXJUZXh0LnRyaW0oKSA9PT0gXCJcIjtcbiAgfVxuICByZW1vdmUoKSB7XG4gICAgdGhpcy5pc0VkaXRpbmcgPSBmYWxzZTtcbiAgICBpZiAodGhpcy5wYXJlbnQpIHtcbiAgICAgIHRoaXMucGFyZW50LnNldEVkaXRpbmdTdGF0ZSh0cnVlKTtcbiAgICAgIHRoaXMucGFyZW50LmRpdi5jbGFzc0xpc3QuYWRkKFwiZnJlZXRleHRFZGl0aW5nXCIpO1xuICAgIH1cbiAgICBzdXBlci5yZW1vdmUoKTtcbiAgfVxuICAjZXh0cmFjdFRleHQoKSB7XG4gICAgY29uc3QgZGl2cyA9IHRoaXMuZWRpdG9yRGl2LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiZGl2XCIpO1xuICAgIGlmIChkaXZzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHRoaXMuZWRpdG9yRGl2LmlubmVyVGV4dDtcbiAgICB9XG4gICAgY29uc3QgYnVmZmVyID0gW107XG4gICAgZm9yIChjb25zdCBkaXYgb2YgZGl2cykge1xuICAgICAgYnVmZmVyLnB1c2goZGl2LmlubmVyVGV4dC5yZXBsYWNlKC9cXHJcXG4/fFxcbi8sIFwiXCIpKTtcbiAgICB9XG4gICAgcmV0dXJuIGJ1ZmZlci5qb2luKFwiXFxuXCIpO1xuICB9XG4gICNzZXRFZGl0b3JEaW1lbnNpb25zKCkge1xuICAgIGNvbnN0IFtwYXJlbnRXaWR0aCwgcGFyZW50SGVpZ2h0XSA9IHRoaXMucGFyZW50RGltZW5zaW9ucztcbiAgICBsZXQgcmVjdDtcbiAgICBpZiAodGhpcy5pc0F0dGFjaGVkVG9ET00pIHtcbiAgICAgIHJlY3QgPSB0aGlzLmRpdi5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3Qge1xuICAgICAgICBjdXJyZW50TGF5ZXIsXG4gICAgICAgIGRpdlxuICAgICAgfSA9IHRoaXM7XG4gICAgICBjb25zdCBzYXZlZERpc3BsYXkgPSBkaXYuc3R5bGUuZGlzcGxheTtcbiAgICAgIGRpdi5zdHlsZS5kaXNwbGF5ID0gXCJoaWRkZW5cIjtcbiAgICAgIGN1cnJlbnRMYXllci5kaXYuYXBwZW5kKHRoaXMuZGl2KTtcbiAgICAgIHJlY3QgPSBkaXYuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICBkaXYucmVtb3ZlKCk7XG4gICAgICBkaXYuc3R5bGUuZGlzcGxheSA9IHNhdmVkRGlzcGxheTtcbiAgICB9XG4gICAgaWYgKHRoaXMucm90YXRpb24gJSAxODAgPT09IHRoaXMucGFyZW50Um90YXRpb24gJSAxODApIHtcbiAgICAgIHRoaXMud2lkdGggPSByZWN0LndpZHRoIC8gcGFyZW50V2lkdGg7XG4gICAgICB0aGlzLmhlaWdodCA9IHJlY3QuaGVpZ2h0IC8gcGFyZW50SGVpZ2h0O1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLndpZHRoID0gcmVjdC5oZWlnaHQgLyBwYXJlbnRXaWR0aDtcbiAgICAgIHRoaXMuaGVpZ2h0ID0gcmVjdC53aWR0aCAvIHBhcmVudEhlaWdodDtcbiAgICB9XG4gICAgdGhpcy5maXhBbmRTZXRQb3NpdGlvbigpO1xuICB9XG4gIGNvbW1pdCgpIHtcbiAgICBpZiAoIXRoaXMuaXNJbkVkaXRNb2RlKCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgc3VwZXIuY29tbWl0KCk7XG4gICAgdGhpcy5kaXNhYmxlRWRpdE1vZGUoKTtcbiAgICBjb25zdCBzYXZlZFRleHQgPSB0aGlzLiNjb250ZW50O1xuICAgIGNvbnN0IG5ld1RleHQgPSB0aGlzLiNjb250ZW50ID0gdGhpcy4jZXh0cmFjdFRleHQoKS50cmltRW5kKCk7XG4gICAgaWYgKHNhdmVkVGV4dCA9PT0gbmV3VGV4dCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBzZXRUZXh0ID0gdGV4dCA9PiB7XG4gICAgICB0aGlzLiNjb250ZW50ID0gdGV4dDtcbiAgICAgIGlmICghdGV4dCkge1xuICAgICAgICB0aGlzLnJlbW92ZSgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB0aGlzLiNzZXRDb250ZW50KCk7XG4gICAgICB0aGlzLl91aU1hbmFnZXIucmVidWlsZCh0aGlzKTtcbiAgICAgIHRoaXMuI3NldEVkaXRvckRpbWVuc2lvbnMoKTtcbiAgICB9O1xuICAgIHRoaXMuYWRkQ29tbWFuZHMoe1xuICAgICAgY21kOiAoKSA9PiB7XG4gICAgICAgIHNldFRleHQobmV3VGV4dCk7XG4gICAgICB9LFxuICAgICAgdW5kbzogKCkgPT4ge1xuICAgICAgICBzZXRUZXh0KHNhdmVkVGV4dCk7XG4gICAgICB9LFxuICAgICAgbXVzdEV4ZWM6IGZhbHNlXG4gICAgfSk7XG4gICAgdGhpcy4jc2V0RWRpdG9yRGltZW5zaW9ucygpO1xuICB9XG4gIHNob3VsZEdldEtleWJvYXJkRXZlbnRzKCkge1xuICAgIHJldHVybiB0aGlzLmlzSW5FZGl0TW9kZSgpO1xuICB9XG4gIGVudGVySW5FZGl0TW9kZSgpIHtcbiAgICB0aGlzLmVuYWJsZUVkaXRNb2RlKCk7XG4gICAgdGhpcy5lZGl0b3JEaXYuZm9jdXMoKTtcbiAgfVxuICBkYmxjbGljayhldmVudCkge1xuICAgIHRoaXMuZW50ZXJJbkVkaXRNb2RlKCk7XG4gIH1cbiAga2V5ZG93bihldmVudCkge1xuICAgIGlmIChldmVudC50YXJnZXQgPT09IHRoaXMuZGl2ICYmIGV2ZW50LmtleSA9PT0gXCJFbnRlclwiKSB7XG4gICAgICB0aGlzLmVudGVySW5FZGl0TW9kZSgpO1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG4gIH1cbiAgZWRpdG9yRGl2S2V5ZG93bihldmVudCkge1xuICAgIEZyZWVUZXh0RWRpdG9yLl9rZXlib2FyZE1hbmFnZXIuZXhlYyh0aGlzLCBldmVudCk7XG4gIH1cbiAgZWRpdG9yRGl2Rm9jdXMoZXZlbnQpIHtcbiAgICB0aGlzLmlzRWRpdGluZyA9IHRydWU7XG4gIH1cbiAgZWRpdG9yRGl2Qmx1cihldmVudCkge1xuICAgIHRoaXMuaXNFZGl0aW5nID0gZmFsc2U7XG4gIH1cbiAgZWRpdG9yRGl2SW5wdXQoZXZlbnQpIHtcbiAgICB0aGlzLnBhcmVudC5kaXYuY2xhc3NMaXN0LnRvZ2dsZShcImZyZWV0ZXh0RWRpdGluZ1wiLCB0aGlzLmlzRW1wdHkoKSk7XG4gIH1cbiAgZGlzYWJsZUVkaXRpbmcoKSB7XG4gICAgdGhpcy5lZGl0b3JEaXYuc2V0QXR0cmlidXRlKFwicm9sZVwiLCBcImNvbW1lbnRcIik7XG4gICAgdGhpcy5lZGl0b3JEaXYucmVtb3ZlQXR0cmlidXRlKFwiYXJpYS1tdWx0aWxpbmVcIik7XG4gIH1cbiAgZW5hYmxlRWRpdGluZygpIHtcbiAgICB0aGlzLmVkaXRvckRpdi5zZXRBdHRyaWJ1dGUoXCJyb2xlXCIsIFwidGV4dGJveFwiKTtcbiAgICB0aGlzLmVkaXRvckRpdi5zZXRBdHRyaWJ1dGUoXCJhcmlhLW11bHRpbGluZVwiLCB0cnVlKTtcbiAgfVxuICByZW5kZXIoKSB7XG4gICAgaWYgKHRoaXMuZGl2KSB7XG4gICAgICByZXR1cm4gdGhpcy5kaXY7XG4gICAgfVxuICAgIGxldCBiYXNlWCwgYmFzZVk7XG4gICAgaWYgKHRoaXMud2lkdGgpIHtcbiAgICAgIGJhc2VYID0gdGhpcy54O1xuICAgICAgYmFzZVkgPSB0aGlzLnk7XG4gICAgfVxuICAgIHN1cGVyLnJlbmRlcigpO1xuICAgIHRoaXMuZWRpdG9yRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICB0aGlzLmVkaXRvckRpdi5jbGFzc05hbWUgPSBcImludGVybmFsXCI7XG4gICAgdGhpcy5lZGl0b3JEaXYuc2V0QXR0cmlidXRlKFwiaWRcIiwgdGhpcy4jZWRpdG9yRGl2SWQpO1xuICAgIHRoaXMuZWRpdG9yRGl2LnNldEF0dHJpYnV0ZShcImRhdGEtbDEwbi1pZFwiLCBcInBkZmpzLWZyZWUtdGV4dFwiKTtcbiAgICB0aGlzLmVuYWJsZUVkaXRpbmcoKTtcbiAgICBlZGl0b3JfZWRpdG9yLkFubm90YXRpb25FZGl0b3IuX2wxMG5Qcm9taXNlLmdldChcInBkZmpzLWZyZWUtdGV4dC1kZWZhdWx0LWNvbnRlbnRcIikudGhlbihtc2cgPT4gdGhpcy5lZGl0b3JEaXY/LnNldEF0dHJpYnV0ZShcImRlZmF1bHQtY29udGVudFwiLCBtc2cpKTtcbiAgICB0aGlzLmVkaXRvckRpdi5jb250ZW50RWRpdGFibGUgPSB0cnVlO1xuICAgIGNvbnN0IHtcbiAgICAgIHN0eWxlXG4gICAgfSA9IHRoaXMuZWRpdG9yRGl2O1xuICAgIHN0eWxlLmZvbnRTaXplID0gYGNhbGMoJHt0aGlzLiNmb250U2l6ZX1weCAqIHZhcigtLXNjYWxlLWZhY3RvcikpYDtcbiAgICBzdHlsZS5jb2xvciA9IHRoaXMuI2NvbG9yO1xuICAgIHRoaXMuZGl2LmFwcGVuZCh0aGlzLmVkaXRvckRpdik7XG4gICAgdGhpcy5vdmVybGF5RGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICB0aGlzLm92ZXJsYXlEaXYuY2xhc3NMaXN0LmFkZChcIm92ZXJsYXlcIiwgXCJlbmFibGVkXCIpO1xuICAgIHRoaXMuZGl2LmFwcGVuZCh0aGlzLm92ZXJsYXlEaXYpO1xuICAgICgwLHRvb2xzLmJpbmRFdmVudHMpKHRoaXMsIHRoaXMuZGl2LCBbXCJkYmxjbGlja1wiLCBcImtleWRvd25cIl0pO1xuICAgIGlmICh0aGlzLndpZHRoKSB7XG4gICAgICBjb25zdCBbcGFyZW50V2lkdGgsIHBhcmVudEhlaWdodF0gPSB0aGlzLnBhcmVudERpbWVuc2lvbnM7XG4gICAgICBpZiAodGhpcy5hbm5vdGF0aW9uRWxlbWVudElkKSB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICBwb3NpdGlvblxuICAgICAgICB9ID0gdGhpcy4jaW5pdGlhbERhdGE7XG4gICAgICAgIGxldCBbdHgsIHR5XSA9IHRoaXMuZ2V0SW5pdGlhbFRyYW5zbGF0aW9uKCk7XG4gICAgICAgIFt0eCwgdHldID0gdGhpcy5wYWdlVHJhbnNsYXRpb25Ub1NjcmVlbih0eCwgdHkpO1xuICAgICAgICBjb25zdCBbcGFnZVdpZHRoLCBwYWdlSGVpZ2h0XSA9IHRoaXMucGFnZURpbWVuc2lvbnM7XG4gICAgICAgIGNvbnN0IFtwYWdlWCwgcGFnZVldID0gdGhpcy5wYWdlVHJhbnNsYXRpb247XG4gICAgICAgIGxldCBwb3NYLCBwb3NZO1xuICAgICAgICBzd2l0Y2ggKHRoaXMucm90YXRpb24pIHtcbiAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICBwb3NYID0gYmFzZVggKyAocG9zaXRpb25bMF0gLSBwYWdlWCkgLyBwYWdlV2lkdGg7XG4gICAgICAgICAgICBwb3NZID0gYmFzZVkgKyB0aGlzLmhlaWdodCAtIChwb3NpdGlvblsxXSAtIHBhZ2VZKSAvIHBhZ2VIZWlnaHQ7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIDkwOlxuICAgICAgICAgICAgcG9zWCA9IGJhc2VYICsgKHBvc2l0aW9uWzBdIC0gcGFnZVgpIC8gcGFnZVdpZHRoO1xuICAgICAgICAgICAgcG9zWSA9IGJhc2VZIC0gKHBvc2l0aW9uWzFdIC0gcGFnZVkpIC8gcGFnZUhlaWdodDtcbiAgICAgICAgICAgIFt0eCwgdHldID0gW3R5LCAtdHhdO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAxODA6XG4gICAgICAgICAgICBwb3NYID0gYmFzZVggLSB0aGlzLndpZHRoICsgKHBvc2l0aW9uWzBdIC0gcGFnZVgpIC8gcGFnZVdpZHRoO1xuICAgICAgICAgICAgcG9zWSA9IGJhc2VZIC0gKHBvc2l0aW9uWzFdIC0gcGFnZVkpIC8gcGFnZUhlaWdodDtcbiAgICAgICAgICAgIFt0eCwgdHldID0gWy10eCwgLXR5XTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgMjcwOlxuICAgICAgICAgICAgcG9zWCA9IGJhc2VYICsgKHBvc2l0aW9uWzBdIC0gcGFnZVggLSB0aGlzLmhlaWdodCAqIHBhZ2VIZWlnaHQpIC8gcGFnZVdpZHRoO1xuICAgICAgICAgICAgcG9zWSA9IGJhc2VZICsgKHBvc2l0aW9uWzFdIC0gcGFnZVkgLSB0aGlzLndpZHRoICogcGFnZVdpZHRoKSAvIHBhZ2VIZWlnaHQ7XG4gICAgICAgICAgICBbdHgsIHR5XSA9IFstdHksIHR4XTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2V0QXQocG9zWCAqIHBhcmVudFdpZHRoLCBwb3NZICogcGFyZW50SGVpZ2h0LCB0eCwgdHkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5zZXRBdChiYXNlWCAqIHBhcmVudFdpZHRoLCBiYXNlWSAqIHBhcmVudEhlaWdodCwgdGhpcy53aWR0aCAqIHBhcmVudFdpZHRoLCB0aGlzLmhlaWdodCAqIHBhcmVudEhlaWdodCk7XG4gICAgICB9XG4gICAgICB0aGlzLiNzZXRDb250ZW50KCk7XG4gICAgICB0aGlzLl9pc0RyYWdnYWJsZSA9IHRydWU7XG4gICAgICB0aGlzLmVkaXRvckRpdi5jb250ZW50RWRpdGFibGUgPSBmYWxzZTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5faXNEcmFnZ2FibGUgPSBmYWxzZTtcbiAgICAgIHRoaXMuZWRpdG9yRGl2LmNvbnRlbnRFZGl0YWJsZSA9IHRydWU7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmRpdjtcbiAgfVxuICAjc2V0Q29udGVudCgpIHtcbiAgICB0aGlzLmVkaXRvckRpdi5yZXBsYWNlQ2hpbGRyZW4oKTtcbiAgICBpZiAoIXRoaXMuI2NvbnRlbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZm9yIChjb25zdCBsaW5lIG9mIHRoaXMuI2NvbnRlbnQuc3BsaXQoXCJcXG5cIikpIHtcbiAgICAgIGNvbnN0IGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICBkaXYuYXBwZW5kKGxpbmUgPyBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShsaW5lKSA6IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJiclwiKSk7XG4gICAgICB0aGlzLmVkaXRvckRpdi5hcHBlbmQoZGl2KTtcbiAgICB9XG4gIH1cbiAgZ2V0IGNvbnRlbnREaXYoKSB7XG4gICAgcmV0dXJuIHRoaXMuZWRpdG9yRGl2O1xuICB9XG4gIHN0YXRpYyBkZXNlcmlhbGl6ZShkYXRhLCBwYXJlbnQsIHVpTWFuYWdlcikge1xuICAgIGxldCBpbml0aWFsRGF0YSA9IG51bGw7XG4gICAgaWYgKGRhdGEgaW5zdGFuY2VvZiBhbm5vdGF0aW9uX2xheWVyLkZyZWVUZXh0QW5ub3RhdGlvbkVsZW1lbnQpIHtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgIGRlZmF1bHRBcHBlYXJhbmNlRGF0YToge1xuICAgICAgICAgICAgZm9udFNpemUsXG4gICAgICAgICAgICBmb250Q29sb3JcbiAgICAgICAgICB9LFxuICAgICAgICAgIHJlY3QsXG4gICAgICAgICAgcm90YXRpb24sXG4gICAgICAgICAgaWRcbiAgICAgICAgfSxcbiAgICAgICAgdGV4dENvbnRlbnQsXG4gICAgICAgIHRleHRQb3NpdGlvbixcbiAgICAgICAgcGFyZW50OiB7XG4gICAgICAgICAgcGFnZToge1xuICAgICAgICAgICAgcGFnZU51bWJlclxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSA9IGRhdGE7XG4gICAgICBpZiAoIXRleHRDb250ZW50IHx8IHRleHRDb250ZW50Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICAgIGluaXRpYWxEYXRhID0gZGF0YSA9IHtcbiAgICAgICAgYW5ub3RhdGlvblR5cGU6IHV0aWwuQW5ub3RhdGlvbkVkaXRvclR5cGUuRlJFRVRFWFQsXG4gICAgICAgIGNvbG9yOiBBcnJheS5mcm9tKGZvbnRDb2xvciksXG4gICAgICAgIGZvbnRTaXplLFxuICAgICAgICB2YWx1ZTogdGV4dENvbnRlbnQuam9pbihcIlxcblwiKSxcbiAgICAgICAgcG9zaXRpb246IHRleHRQb3NpdGlvbixcbiAgICAgICAgcGFnZUluZGV4OiBwYWdlTnVtYmVyIC0gMSxcbiAgICAgICAgcmVjdCxcbiAgICAgICAgcm90YXRpb24sXG4gICAgICAgIGlkLFxuICAgICAgICBkZWxldGVkOiBmYWxzZVxuICAgICAgfTtcbiAgICB9XG4gICAgY29uc3QgZWRpdG9yID0gc3VwZXIuZGVzZXJpYWxpemUoZGF0YSwgcGFyZW50LCB1aU1hbmFnZXIpO1xuICAgIGVkaXRvci4jZm9udFNpemUgPSBkYXRhLmZvbnRTaXplO1xuICAgIGVkaXRvci4jY29sb3IgPSB1dGlsLlV0aWwubWFrZUhleENvbG9yKC4uLmRhdGEuY29sb3IpO1xuICAgIGVkaXRvci4jY29udGVudCA9IGRhdGEudmFsdWU7XG4gICAgZWRpdG9yLmFubm90YXRpb25FbGVtZW50SWQgPSBkYXRhLmlkIHx8IG51bGw7XG4gICAgZWRpdG9yLiNpbml0aWFsRGF0YSA9IGluaXRpYWxEYXRhO1xuICAgIHJldHVybiBlZGl0b3I7XG4gIH1cbiAgc2VyaWFsaXplKGlzRm9yQ29weWluZyA9IGZhbHNlKSB7XG4gICAgaWYgKHRoaXMuaXNFbXB0eSgpKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgaWYgKHRoaXMuZGVsZXRlZCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcGFnZUluZGV4OiB0aGlzLnBhZ2VJbmRleCxcbiAgICAgICAgaWQ6IHRoaXMuYW5ub3RhdGlvbkVsZW1lbnRJZCxcbiAgICAgICAgZGVsZXRlZDogdHJ1ZVxuICAgICAgfTtcbiAgICB9XG4gICAgY29uc3QgcGFkZGluZyA9IEZyZWVUZXh0RWRpdG9yLl9pbnRlcm5hbFBhZGRpbmcgKiB0aGlzLnBhcmVudFNjYWxlO1xuICAgIGNvbnN0IHJlY3QgPSB0aGlzLmdldFJlY3QocGFkZGluZywgcGFkZGluZyk7XG4gICAgY29uc3QgY29sb3IgPSBlZGl0b3JfZWRpdG9yLkFubm90YXRpb25FZGl0b3IuX2NvbG9yTWFuYWdlci5jb252ZXJ0KHRoaXMuaXNBdHRhY2hlZFRvRE9NID8gZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzLmVkaXRvckRpdikuY29sb3IgOiB0aGlzLiNjb2xvcik7XG4gICAgY29uc3Qgc2VyaWFsaXplZCA9IHtcbiAgICAgIGFubm90YXRpb25UeXBlOiB1dGlsLkFubm90YXRpb25FZGl0b3JUeXBlLkZSRUVURVhULFxuICAgICAgY29sb3IsXG4gICAgICBmb250U2l6ZTogdGhpcy4jZm9udFNpemUsXG4gICAgICB2YWx1ZTogdGhpcy4jY29udGVudCxcbiAgICAgIHBhZ2VJbmRleDogdGhpcy5wYWdlSW5kZXgsXG4gICAgICByZWN0LFxuICAgICAgcm90YXRpb246IHRoaXMucm90YXRpb24sXG4gICAgICBzdHJ1Y3RUcmVlUGFyZW50SWQ6IHRoaXMuX3N0cnVjdFRyZWVQYXJlbnRJZFxuICAgIH07XG4gICAgaWYgKGlzRm9yQ29weWluZykge1xuICAgICAgcmV0dXJuIHNlcmlhbGl6ZWQ7XG4gICAgfVxuICAgIGlmICh0aGlzLmFubm90YXRpb25FbGVtZW50SWQgJiYgIXRoaXMuI2hhc0VsZW1lbnRDaGFuZ2VkKHNlcmlhbGl6ZWQpKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgc2VyaWFsaXplZC5pZCA9IHRoaXMuYW5ub3RhdGlvbkVsZW1lbnRJZDtcbiAgICByZXR1cm4gc2VyaWFsaXplZDtcbiAgfVxuICAjaGFzRWxlbWVudENoYW5nZWQoc2VyaWFsaXplZCkge1xuICAgIGNvbnN0IHtcbiAgICAgIHZhbHVlLFxuICAgICAgZm9udFNpemUsXG4gICAgICBjb2xvcixcbiAgICAgIHJlY3QsXG4gICAgICBwYWdlSW5kZXhcbiAgICB9ID0gdGhpcy4jaW5pdGlhbERhdGE7XG4gICAgcmV0dXJuIHNlcmlhbGl6ZWQudmFsdWUgIT09IHZhbHVlIHx8IHNlcmlhbGl6ZWQuZm9udFNpemUgIT09IGZvbnRTaXplIHx8IHNlcmlhbGl6ZWQucmVjdC5zb21lKCh4LCBpKSA9PiBNYXRoLmFicyh4IC0gcmVjdFtpXSkgPj0gMSkgfHwgc2VyaWFsaXplZC5jb2xvci5zb21lKChjLCBpKSA9PiBjICE9PSBjb2xvcltpXSkgfHwgc2VyaWFsaXplZC5wYWdlSW5kZXggIT09IHBhZ2VJbmRleDtcbiAgfVxuICAjY2hlYXRJbml0aWFsUmVjdChkZWxheWVkID0gZmFsc2UpIHtcbiAgICBpZiAoIXRoaXMuYW5ub3RhdGlvbkVsZW1lbnRJZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLiNzZXRFZGl0b3JEaW1lbnNpb25zKCk7XG4gICAgaWYgKCFkZWxheWVkICYmICh0aGlzLndpZHRoID09PSAwIHx8IHRoaXMuaGVpZ2h0ID09PSAwKSkge1xuICAgICAgc2V0VGltZW91dCgoKSA9PiB0aGlzLiNjaGVhdEluaXRpYWxSZWN0KHRydWUpLCAwKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgcGFkZGluZyA9IEZyZWVUZXh0RWRpdG9yLl9pbnRlcm5hbFBhZGRpbmcgKiB0aGlzLnBhcmVudFNjYWxlO1xuICAgIHRoaXMuI2luaXRpYWxEYXRhLnJlY3QgPSB0aGlzLmdldFJlY3QocGFkZGluZywgcGFkZGluZyk7XG4gIH1cbn1cblxuLy8gRVhURVJOQUwgTU9EVUxFOiAuL3NyYy9kaXNwbGF5L2VkaXRvci9jb2xvcl9waWNrZXIuanNcbnZhciBjb2xvcl9waWNrZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDk3KTtcbi8vIEVYVEVSTkFMIE1PRFVMRTogLi9zcmMvZGlzcGxheS9lZGl0b3Ivb3V0bGluZXIuanNcbnZhciBlZGl0b3Jfb3V0bGluZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQwNSk7XG47Ly8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvZGlzcGxheS9lZGl0b3IvaGlnaGxpZ2h0LmpzXG5cblxuXG5cblxuY2xhc3MgSGlnaGxpZ2h0RWRpdG9yIGV4dGVuZHMgZWRpdG9yX2VkaXRvci5Bbm5vdGF0aW9uRWRpdG9yIHtcbiAgI2JveGVzO1xuICAjY2xpcFBhdGhJZCA9IG51bGw7XG4gICNjb2xvclBpY2tlciA9IG51bGw7XG4gICNmb2N1c091dGxpbmVzID0gbnVsbDtcbiAgI2hpZ2hsaWdodERpdiA9IG51bGw7XG4gICNoaWdobGlnaHRPdXRsaW5lcyA9IG51bGw7XG4gICNpZCA9IG51bGw7XG4gICNsYXN0UG9pbnQgPSBudWxsO1xuICAjb3BhY2l0eTtcbiAgI291dGxpbmVJZCA9IG51bGw7XG4gIHN0YXRpYyBfZGVmYXVsdENvbG9yID0gbnVsbDtcbiAgc3RhdGljIF9kZWZhdWx0T3BhY2l0eSA9IDE7XG4gIHN0YXRpYyBfbDEwblByb21pc2U7XG4gIHN0YXRpYyBfdHlwZSA9IFwiaGlnaGxpZ2h0XCI7XG4gIHN0YXRpYyBfZWRpdG9yVHlwZSA9IHV0aWwuQW5ub3RhdGlvbkVkaXRvclR5cGUuSElHSExJR0hUO1xuICBjb25zdHJ1Y3RvcihwYXJhbXMpIHtcbiAgICBzdXBlcih7XG4gICAgICAuLi5wYXJhbXMsXG4gICAgICBuYW1lOiBcImhpZ2hsaWdodEVkaXRvclwiXG4gICAgfSk7XG4gICAgSGlnaGxpZ2h0RWRpdG9yLl9kZWZhdWx0Q29sb3IgfHw9IHRoaXMuX3VpTWFuYWdlci5oaWdobGlnaHRDb2xvcnM/LnZhbHVlcygpLm5leHQoKS52YWx1ZSB8fCBcIiNmZmYwNjZcIjtcbiAgICB0aGlzLmNvbG9yID0gcGFyYW1zLmNvbG9yIHx8IEhpZ2hsaWdodEVkaXRvci5fZGVmYXVsdENvbG9yO1xuICAgIHRoaXMuI29wYWNpdHkgPSBwYXJhbXMub3BhY2l0eSB8fCBIaWdobGlnaHRFZGl0b3IuX2RlZmF1bHRPcGFjaXR5O1xuICAgIHRoaXMuI2JveGVzID0gcGFyYW1zLmJveGVzIHx8IG51bGw7XG4gICAgdGhpcy5faXNEcmFnZ2FibGUgPSBmYWxzZTtcbiAgICB0aGlzLiNjcmVhdGVPdXRsaW5lcygpO1xuICAgIHRoaXMuI2FkZFRvRHJhd0xheWVyKCk7XG4gICAgdGhpcy5yb3RhdGUodGhpcy5yb3RhdGlvbik7XG4gIH1cbiAgI2NyZWF0ZU91dGxpbmVzKCkge1xuICAgIGNvbnN0IG91dGxpbmVyID0gbmV3IGVkaXRvcl9vdXRsaW5lci5PdXRsaW5lcih0aGlzLiNib3hlcywgMC4wMDEpO1xuICAgIHRoaXMuI2hpZ2hsaWdodE91dGxpbmVzID0gb3V0bGluZXIuZ2V0T3V0bGluZXMoKTtcbiAgICAoe1xuICAgICAgeDogdGhpcy54LFxuICAgICAgeTogdGhpcy55LFxuICAgICAgd2lkdGg6IHRoaXMud2lkdGgsXG4gICAgICBoZWlnaHQ6IHRoaXMuaGVpZ2h0XG4gICAgfSA9IHRoaXMuI2hpZ2hsaWdodE91dGxpbmVzLmJveCk7XG4gICAgY29uc3Qgb3V0bGluZXJGb3JPdXRsaW5lID0gbmV3IGVkaXRvcl9vdXRsaW5lci5PdXRsaW5lcih0aGlzLiNib3hlcywgMC4wMDI1LCAwLjAwMSwgdGhpcy5fdWlNYW5hZ2VyLmRpcmVjdGlvbiA9PT0gXCJsdHJcIik7XG4gICAgdGhpcy4jZm9jdXNPdXRsaW5lcyA9IG91dGxpbmVyRm9yT3V0bGluZS5nZXRPdXRsaW5lcygpO1xuICAgIGNvbnN0IHtcbiAgICAgIGxhc3RQb2ludFxuICAgIH0gPSB0aGlzLiNmb2N1c091dGxpbmVzLmJveDtcbiAgICB0aGlzLiNsYXN0UG9pbnQgPSBbKGxhc3RQb2ludFswXSAtIHRoaXMueCkgLyB0aGlzLndpZHRoLCAobGFzdFBvaW50WzFdIC0gdGhpcy55KSAvIHRoaXMuaGVpZ2h0XTtcbiAgfVxuICBzdGF0aWMgaW5pdGlhbGl6ZShsMTBuKSB7XG4gICAgZWRpdG9yX2VkaXRvci5Bbm5vdGF0aW9uRWRpdG9yLmluaXRpYWxpemUobDEwbik7XG4gIH1cbiAgc3RhdGljIHVwZGF0ZURlZmF1bHRQYXJhbXModHlwZSwgdmFsdWUpIHtcbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgIGNhc2UgdXRpbC5Bbm5vdGF0aW9uRWRpdG9yUGFyYW1zVHlwZS5ISUdITElHSFRfREVGQVVMVF9DT0xPUjpcbiAgICAgICAgSGlnaGxpZ2h0RWRpdG9yLl9kZWZhdWx0Q29sb3IgPSB2YWx1ZTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIGdldCB0b29sYmFyUG9zaXRpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuI2xhc3RQb2ludDtcbiAgfVxuICB1cGRhdGVQYXJhbXModHlwZSwgdmFsdWUpIHtcbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgIGNhc2UgdXRpbC5Bbm5vdGF0aW9uRWRpdG9yUGFyYW1zVHlwZS5ISUdITElHSFRfQ09MT1I6XG4gICAgICAgIHRoaXMuI3VwZGF0ZUNvbG9yKHZhbHVlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHN0YXRpYyBnZXQgZGVmYXVsdFByb3BlcnRpZXNUb1VwZGF0ZSgpIHtcbiAgICByZXR1cm4gW1t1dGlsLkFubm90YXRpb25FZGl0b3JQYXJhbXNUeXBlLkhJR0hMSUdIVF9ERUZBVUxUX0NPTE9SLCBIaWdobGlnaHRFZGl0b3IuX2RlZmF1bHRDb2xvcl1dO1xuICB9XG4gIGdldCBwcm9wZXJ0aWVzVG9VcGRhdGUoKSB7XG4gICAgcmV0dXJuIFtbdXRpbC5Bbm5vdGF0aW9uRWRpdG9yUGFyYW1zVHlwZS5ISUdITElHSFRfQ09MT1IsIHRoaXMuY29sb3IgfHwgSGlnaGxpZ2h0RWRpdG9yLl9kZWZhdWx0Q29sb3JdXTtcbiAgfVxuICAjdXBkYXRlQ29sb3IoY29sb3IpIHtcbiAgICBjb25zdCBzYXZlZENvbG9yID0gdGhpcy5jb2xvcjtcbiAgICB0aGlzLmFkZENvbW1hbmRzKHtcbiAgICAgIGNtZDogKCkgPT4ge1xuICAgICAgICB0aGlzLmNvbG9yID0gY29sb3I7XG4gICAgICAgIHRoaXMucGFyZW50LmRyYXdMYXllci5jaGFuZ2VDb2xvcih0aGlzLiNpZCwgY29sb3IpO1xuICAgICAgICB0aGlzLiNjb2xvclBpY2tlcj8udXBkYXRlQ29sb3IoY29sb3IpO1xuICAgICAgfSxcbiAgICAgIHVuZG86ICgpID0+IHtcbiAgICAgICAgdGhpcy5jb2xvciA9IHNhdmVkQ29sb3I7XG4gICAgICAgIHRoaXMucGFyZW50LmRyYXdMYXllci5jaGFuZ2VDb2xvcih0aGlzLiNpZCwgc2F2ZWRDb2xvcik7XG4gICAgICAgIHRoaXMuI2NvbG9yUGlja2VyPy51cGRhdGVDb2xvcihzYXZlZENvbG9yKTtcbiAgICAgIH0sXG4gICAgICBtdXN0RXhlYzogdHJ1ZSxcbiAgICAgIHR5cGU6IHV0aWwuQW5ub3RhdGlvbkVkaXRvclBhcmFtc1R5cGUuSElHSExJR0hUX0NPTE9SLFxuICAgICAgb3ZlcndyaXRlSWZTYW1lVHlwZTogdHJ1ZSxcbiAgICAgIGtlZXBVbmRvOiB0cnVlXG4gICAgfSk7XG4gIH1cbiAgYXN5bmMgYWRkRWRpdFRvb2xiYXIoKSB7XG4gICAgY29uc3QgdG9vbGJhciA9IGF3YWl0IHN1cGVyLmFkZEVkaXRUb29sYmFyKCk7XG4gICAgaWYgKCF0b29sYmFyKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgaWYgKHRoaXMuX3VpTWFuYWdlci5oaWdobGlnaHRDb2xvcnMpIHtcbiAgICAgIHRoaXMuI2NvbG9yUGlja2VyID0gbmV3IGNvbG9yX3BpY2tlci5Db2xvclBpY2tlcih7XG4gICAgICAgIGVkaXRvcjogdGhpc1xuICAgICAgfSk7XG4gICAgICB0b29sYmFyLmFkZENvbG9yUGlja2VyKHRoaXMuI2NvbG9yUGlja2VyKTtcbiAgICB9XG4gICAgcmV0dXJuIHRvb2xiYXI7XG4gIH1cbiAgZGlzYWJsZUVkaXRpbmcoKSB7XG4gICAgc3VwZXIuZGlzYWJsZUVkaXRpbmcoKTtcbiAgICB0aGlzLmRpdi5jbGFzc0xpc3QudG9nZ2xlKFwiZGlzYWJsZWRcIiwgdHJ1ZSk7XG4gIH1cbiAgZW5hYmxlRWRpdGluZygpIHtcbiAgICBzdXBlci5lbmFibGVFZGl0aW5nKCk7XG4gICAgdGhpcy5kaXYuY2xhc3NMaXN0LnRvZ2dsZShcImRpc2FibGVkXCIsIGZhbHNlKTtcbiAgfVxuICBmaXhBbmRTZXRQb3NpdGlvbigpIHtcbiAgICByZXR1cm4gc3VwZXIuZml4QW5kU2V0UG9zaXRpb24oMCk7XG4gIH1cbiAgZ2V0UmVjdCh0eCwgdHkpIHtcbiAgICByZXR1cm4gc3VwZXIuZ2V0UmVjdCh0eCwgdHksIDApO1xuICB9XG4gIG9uY2VBZGRlZCgpIHtcbiAgICB0aGlzLnBhcmVudC5hZGRVbmRvYWJsZUVkaXRvcih0aGlzKTtcbiAgICB0aGlzLmRpdi5mb2N1cygpO1xuICB9XG4gIHJlbW92ZSgpIHtcbiAgICBzdXBlci5yZW1vdmUoKTtcbiAgICB0aGlzLiNjbGVhbkRyYXdMYXllcigpO1xuICB9XG4gIHJlYnVpbGQoKSB7XG4gICAgaWYgKCF0aGlzLnBhcmVudCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBzdXBlci5yZWJ1aWxkKCk7XG4gICAgaWYgKHRoaXMuZGl2ID09PSBudWxsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuI2FkZFRvRHJhd0xheWVyKCk7XG4gICAgaWYgKCF0aGlzLmlzQXR0YWNoZWRUb0RPTSkge1xuICAgICAgdGhpcy5wYXJlbnQuYWRkKHRoaXMpO1xuICAgIH1cbiAgfVxuICBzZXRQYXJlbnQocGFyZW50KSB7XG4gICAgbGV0IG11c3RCZVNlbGVjdGVkID0gZmFsc2U7XG4gICAgaWYgKHRoaXMucGFyZW50ICYmICFwYXJlbnQpIHtcbiAgICAgIHRoaXMuI2NsZWFuRHJhd0xheWVyKCk7XG4gICAgfSBlbHNlIGlmIChwYXJlbnQpIHtcbiAgICAgIHRoaXMuI2FkZFRvRHJhd0xheWVyKHBhcmVudCk7XG4gICAgICBtdXN0QmVTZWxlY3RlZCA9ICF0aGlzLnBhcmVudCAmJiB0aGlzLmRpdj8uY2xhc3NMaXN0LmNvbnRhaW5zKFwic2VsZWN0ZWRFZGl0b3JcIik7XG4gICAgfVxuICAgIHN1cGVyLnNldFBhcmVudChwYXJlbnQpO1xuICAgIGlmIChtdXN0QmVTZWxlY3RlZCkge1xuICAgICAgdGhpcy5zZWxlY3QoKTtcbiAgICB9XG4gIH1cbiAgI2NsZWFuRHJhd0xheWVyKCkge1xuICAgIGlmICh0aGlzLiNpZCA9PT0gbnVsbCB8fCAhdGhpcy5wYXJlbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5wYXJlbnQuZHJhd0xheWVyLnJlbW92ZSh0aGlzLiNpZCk7XG4gICAgdGhpcy4jaWQgPSBudWxsO1xuICAgIHRoaXMucGFyZW50LmRyYXdMYXllci5yZW1vdmUodGhpcy4jb3V0bGluZUlkKTtcbiAgICB0aGlzLiNvdXRsaW5lSWQgPSBudWxsO1xuICB9XG4gICNhZGRUb0RyYXdMYXllcihwYXJlbnQgPSB0aGlzLnBhcmVudCkge1xuICAgIGlmICh0aGlzLiNpZCAhPT0gbnVsbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAoe1xuICAgICAgaWQ6IHRoaXMuI2lkLFxuICAgICAgY2xpcFBhdGhJZDogdGhpcy4jY2xpcFBhdGhJZFxuICAgIH0gPSBwYXJlbnQuZHJhd0xheWVyLmhpZ2hsaWdodCh0aGlzLiNoaWdobGlnaHRPdXRsaW5lcywgdGhpcy5jb2xvciwgdGhpcy4jb3BhY2l0eSkpO1xuICAgIGlmICh0aGlzLiNoaWdobGlnaHREaXYpIHtcbiAgICAgIHRoaXMuI2hpZ2hsaWdodERpdi5zdHlsZS5jbGlwUGF0aCA9IHRoaXMuI2NsaXBQYXRoSWQ7XG4gICAgfVxuICAgIHRoaXMuI291dGxpbmVJZCA9IHBhcmVudC5kcmF3TGF5ZXIuaGlnaGxpZ2h0T3V0bGluZSh0aGlzLiNmb2N1c091dGxpbmVzKTtcbiAgfVxuICBzdGF0aWMgI3JvdGF0ZUJib3goe1xuICAgIHgsXG4gICAgeSxcbiAgICB3aWR0aCxcbiAgICBoZWlnaHRcbiAgfSwgYW5nbGUpIHtcbiAgICBzd2l0Y2ggKGFuZ2xlKSB7XG4gICAgICBjYXNlIDkwOlxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHg6IDEgLSB5IC0gaGVpZ2h0LFxuICAgICAgICAgIHk6IHgsXG4gICAgICAgICAgd2lkdGg6IGhlaWdodCxcbiAgICAgICAgICBoZWlnaHQ6IHdpZHRoXG4gICAgICAgIH07XG4gICAgICBjYXNlIDE4MDpcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB4OiAxIC0geCAtIHdpZHRoLFxuICAgICAgICAgIHk6IDEgLSB5IC0gaGVpZ2h0LFxuICAgICAgICAgIHdpZHRoLFxuICAgICAgICAgIGhlaWdodFxuICAgICAgICB9O1xuICAgICAgY2FzZSAyNzA6XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgeDogeSxcbiAgICAgICAgICB5OiAxIC0geCAtIHdpZHRoLFxuICAgICAgICAgIHdpZHRoOiBoZWlnaHQsXG4gICAgICAgICAgaGVpZ2h0OiB3aWR0aFxuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgeCxcbiAgICAgIHksXG4gICAgICB3aWR0aCxcbiAgICAgIGhlaWdodFxuICAgIH07XG4gIH1cbiAgcm90YXRlKGFuZ2xlKSB7XG4gICAgY29uc3Qge1xuICAgICAgZHJhd0xheWVyXG4gICAgfSA9IHRoaXMucGFyZW50O1xuICAgIGRyYXdMYXllci5yb3RhdGUodGhpcy4jaWQsIGFuZ2xlKTtcbiAgICBkcmF3TGF5ZXIucm90YXRlKHRoaXMuI291dGxpbmVJZCwgYW5nbGUpO1xuICAgIGRyYXdMYXllci51cGRhdGVCb3godGhpcy4jaWQsIEhpZ2hsaWdodEVkaXRvci4jcm90YXRlQmJveCh0aGlzLCBhbmdsZSkpO1xuICAgIGRyYXdMYXllci51cGRhdGVCb3godGhpcy4jb3V0bGluZUlkLCBIaWdobGlnaHRFZGl0b3IuI3JvdGF0ZUJib3godGhpcy4jZm9jdXNPdXRsaW5lcy5ib3gsIGFuZ2xlKSk7XG4gIH1cbiAgcmVuZGVyKCkge1xuICAgIGlmICh0aGlzLmRpdikge1xuICAgICAgcmV0dXJuIHRoaXMuZGl2O1xuICAgIH1cbiAgICBjb25zdCBkaXYgPSBzdXBlci5yZW5kZXIoKTtcbiAgICBjb25zdCBoaWdobGlnaHREaXYgPSB0aGlzLiNoaWdobGlnaHREaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIGRpdi5hcHBlbmQoaGlnaGxpZ2h0RGl2KTtcbiAgICBoaWdobGlnaHREaXYuY2xhc3NOYW1lID0gXCJpbnRlcm5hbFwiO1xuICAgIGhpZ2hsaWdodERpdi5zdHlsZS5jbGlwUGF0aCA9IHRoaXMuI2NsaXBQYXRoSWQ7XG4gICAgY29uc3QgW3BhcmVudFdpZHRoLCBwYXJlbnRIZWlnaHRdID0gdGhpcy5wYXJlbnREaW1lbnNpb25zO1xuICAgIHRoaXMuc2V0RGltcyh0aGlzLndpZHRoICogcGFyZW50V2lkdGgsIHRoaXMuaGVpZ2h0ICogcGFyZW50SGVpZ2h0KTtcbiAgICAoMCx0b29scy5iaW5kRXZlbnRzKSh0aGlzLCB0aGlzLiNoaWdobGlnaHREaXYsIFtcInBvaW50ZXJvdmVyXCIsIFwicG9pbnRlcmxlYXZlXCJdKTtcbiAgICB0aGlzLmVuYWJsZUVkaXRpbmcoKTtcbiAgICByZXR1cm4gZGl2O1xuICB9XG4gIHBvaW50ZXJvdmVyKCkge1xuICAgIHRoaXMucGFyZW50LmRyYXdMYXllci5hZGRDbGFzcyh0aGlzLiNvdXRsaW5lSWQsIFwiaG92ZXJlZFwiKTtcbiAgfVxuICBwb2ludGVybGVhdmUoKSB7XG4gICAgdGhpcy5wYXJlbnQuZHJhd0xheWVyLnJlbW92ZUNsYXNzKHRoaXMuI291dGxpbmVJZCwgXCJob3ZlcmVkXCIpO1xuICB9XG4gIHNlbGVjdCgpIHtcbiAgICBzdXBlci5zZWxlY3QoKTtcbiAgICB0aGlzLnBhcmVudD8uZHJhd0xheWVyLnJlbW92ZUNsYXNzKHRoaXMuI291dGxpbmVJZCwgXCJob3ZlcmVkXCIpO1xuICAgIHRoaXMucGFyZW50Py5kcmF3TGF5ZXIuYWRkQ2xhc3ModGhpcy4jb3V0bGluZUlkLCBcInNlbGVjdGVkXCIpO1xuICB9XG4gIHVuc2VsZWN0KCkge1xuICAgIHN1cGVyLnVuc2VsZWN0KCk7XG4gICAgdGhpcy5wYXJlbnQ/LmRyYXdMYXllci5yZW1vdmVDbGFzcyh0aGlzLiNvdXRsaW5lSWQsIFwic2VsZWN0ZWRcIik7XG4gIH1cbiAgI3NlcmlhbGl6ZUJveGVzKCkge1xuICAgIGNvbnN0IFtwYWdlV2lkdGgsIHBhZ2VIZWlnaHRdID0gdGhpcy5wYWdlRGltZW5zaW9ucztcbiAgICBjb25zdCBib3hlcyA9IHRoaXMuI2JveGVzO1xuICAgIGNvbnN0IHF1YWRQb2ludHMgPSBuZXcgQXJyYXkoYm94ZXMubGVuZ3RoICogOCk7XG4gICAgbGV0IGkgPSAwO1xuICAgIGZvciAoY29uc3Qge1xuICAgICAgeCxcbiAgICAgIHksXG4gICAgICB3aWR0aCxcbiAgICAgIGhlaWdodFxuICAgIH0gb2YgYm94ZXMpIHtcbiAgICAgIGNvbnN0IHN4ID0geCAqIHBhZ2VXaWR0aDtcbiAgICAgIGNvbnN0IHN5ID0gKDEgLSB5IC0gaGVpZ2h0KSAqIHBhZ2VIZWlnaHQ7XG4gICAgICBxdWFkUG9pbnRzW2ldID0gcXVhZFBvaW50c1tpICsgNF0gPSBzeDtcbiAgICAgIHF1YWRQb2ludHNbaSArIDFdID0gcXVhZFBvaW50c1tpICsgM10gPSBzeTtcbiAgICAgIHF1YWRQb2ludHNbaSArIDJdID0gcXVhZFBvaW50c1tpICsgNl0gPSBzeCArIHdpZHRoICogcGFnZVdpZHRoO1xuICAgICAgcXVhZFBvaW50c1tpICsgNV0gPSBxdWFkUG9pbnRzW2kgKyA3XSA9IHN5ICsgaGVpZ2h0ICogcGFnZUhlaWdodDtcbiAgICAgIGkgKz0gODtcbiAgICB9XG4gICAgcmV0dXJuIHF1YWRQb2ludHM7XG4gIH1cbiAgI3NlcmlhbGl6ZU91dGxpbmVzKCkge1xuICAgIGNvbnN0IFtwYWdlV2lkdGgsIHBhZ2VIZWlnaHRdID0gdGhpcy5wYWdlRGltZW5zaW9ucztcbiAgICBjb25zdCB3aWR0aCA9IHRoaXMud2lkdGggKiBwYWdlV2lkdGg7XG4gICAgY29uc3QgaGVpZ2h0ID0gdGhpcy5oZWlnaHQgKiBwYWdlSGVpZ2h0O1xuICAgIGNvbnN0IHR4ID0gdGhpcy54ICogcGFnZVdpZHRoO1xuICAgIGNvbnN0IHR5ID0gKDEgLSB0aGlzLnkgLSB0aGlzLmhlaWdodCkgKiBwYWdlSGVpZ2h0O1xuICAgIGNvbnN0IG91dGxpbmVzID0gW107XG4gICAgZm9yIChjb25zdCBvdXRsaW5lIG9mIHRoaXMuI2hpZ2hsaWdodE91dGxpbmVzLm91dGxpbmVzKSB7XG4gICAgICBjb25zdCBwb2ludHMgPSBuZXcgQXJyYXkob3V0bGluZS5sZW5ndGgpO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvdXRsaW5lLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgICAgIHBvaW50c1tpXSA9IHR4ICsgb3V0bGluZVtpXSAqIHdpZHRoO1xuICAgICAgICBwb2ludHNbaSArIDFdID0gdHkgKyAoMSAtIG91dGxpbmVbaSArIDFdKSAqIGhlaWdodDtcbiAgICAgIH1cbiAgICAgIG91dGxpbmVzLnB1c2gocG9pbnRzKTtcbiAgICB9XG4gICAgcmV0dXJuIG91dGxpbmVzO1xuICB9XG4gIHN0YXRpYyBkZXNlcmlhbGl6ZShkYXRhLCBwYXJlbnQsIHVpTWFuYWdlcikge1xuICAgIGNvbnN0IGVkaXRvciA9IHN1cGVyLmRlc2VyaWFsaXplKGRhdGEsIHBhcmVudCwgdWlNYW5hZ2VyKTtcbiAgICBjb25zdCB7XG4gICAgICByZWN0LFxuICAgICAgY29sb3IsXG4gICAgICBxdWFkUG9pbnRzXG4gICAgfSA9IGRhdGE7XG4gICAgZWRpdG9yLmNvbG9yID0gdXRpbC5VdGlsLm1ha2VIZXhDb2xvciguLi5jb2xvcik7XG4gICAgZWRpdG9yLiNvcGFjaXR5ID0gZGF0YS5vcGFjaXR5O1xuICAgIGNvbnN0IFtwYWdlV2lkdGgsIHBhZ2VIZWlnaHRdID0gZWRpdG9yLnBhZ2VEaW1lbnNpb25zO1xuICAgIGVkaXRvci53aWR0aCA9IChyZWN0WzJdIC0gcmVjdFswXSkgLyBwYWdlV2lkdGg7XG4gICAgZWRpdG9yLmhlaWdodCA9IChyZWN0WzNdIC0gcmVjdFsxXSkgLyBwYWdlSGVpZ2h0O1xuICAgIGNvbnN0IGJveGVzID0gZWRpdG9yLiNib3hlcyA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcXVhZFBvaW50cy5sZW5ndGg7IGkgKz0gOCkge1xuICAgICAgYm94ZXMucHVzaCh7XG4gICAgICAgIHg6IHF1YWRQb2ludHNbNF0gLyBwYWdlV2lkdGgsXG4gICAgICAgIHk6IDEgLSBxdWFkUG9pbnRzW2kgKyA1XSAvIHBhZ2VIZWlnaHQsXG4gICAgICAgIHdpZHRoOiAocXVhZFBvaW50c1tpICsgMl0gLSBxdWFkUG9pbnRzW2ldKSAvIHBhZ2VXaWR0aCxcbiAgICAgICAgaGVpZ2h0OiAocXVhZFBvaW50c1tpICsgNV0gLSBxdWFkUG9pbnRzW2kgKyAxXSkgLyBwYWdlSGVpZ2h0XG4gICAgICB9KTtcbiAgICB9XG4gICAgZWRpdG9yLiNjcmVhdGVPdXRsaW5lcygpO1xuICAgIHJldHVybiBlZGl0b3I7XG4gIH1cbiAgc2VyaWFsaXplKGlzRm9yQ29weWluZyA9IGZhbHNlKSB7XG4gICAgaWYgKHRoaXMuaXNFbXB0eSgpIHx8IGlzRm9yQ29weWluZykge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGNvbnN0IHJlY3QgPSB0aGlzLmdldFJlY3QoMCwgMCk7XG4gICAgY29uc3QgY29sb3IgPSBlZGl0b3JfZWRpdG9yLkFubm90YXRpb25FZGl0b3IuX2NvbG9yTWFuYWdlci5jb252ZXJ0KHRoaXMuY29sb3IpO1xuICAgIHJldHVybiB7XG4gICAgICBhbm5vdGF0aW9uVHlwZTogdXRpbC5Bbm5vdGF0aW9uRWRpdG9yVHlwZS5ISUdITElHSFQsXG4gICAgICBjb2xvcixcbiAgICAgIG9wYWNpdHk6IHRoaXMuI29wYWNpdHksXG4gICAgICBxdWFkUG9pbnRzOiB0aGlzLiNzZXJpYWxpemVCb3hlcygpLFxuICAgICAgb3V0bGluZXM6IHRoaXMuI3NlcmlhbGl6ZU91dGxpbmVzKCksXG4gICAgICBwYWdlSW5kZXg6IHRoaXMucGFnZUluZGV4LFxuICAgICAgcmVjdCxcbiAgICAgIHJvdGF0aW9uOiAwLFxuICAgICAgc3RydWN0VHJlZVBhcmVudElkOiB0aGlzLl9zdHJ1Y3RUcmVlUGFyZW50SWRcbiAgICB9O1xuICB9XG4gIHN0YXRpYyBjYW5DcmVhdGVOZXdFbXB0eUVkaXRvcigpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuLy8gRVhURVJOQUwgTU9EVUxFOiAuL3NyYy9kaXNwbGF5L2Rpc3BsYXlfdXRpbHMuanNcbnZhciBkaXNwbGF5X3V0aWxzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0NzMpO1xuOy8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL2Rpc3BsYXkvZWRpdG9yL2luay5qc1xuXG5cblxuXG5cbmNsYXNzIElua0VkaXRvciBleHRlbmRzIGVkaXRvcl9lZGl0b3IuQW5ub3RhdGlvbkVkaXRvciB7XG4gICNiYXNlSGVpZ2h0ID0gMDtcbiAgI2Jhc2VXaWR0aCA9IDA7XG4gICNib3VuZENhbnZhc1BvaW50ZXJtb3ZlID0gdGhpcy5jYW52YXNQb2ludGVybW92ZS5iaW5kKHRoaXMpO1xuICAjYm91bmRDYW52YXNQb2ludGVybGVhdmUgPSB0aGlzLmNhbnZhc1BvaW50ZXJsZWF2ZS5iaW5kKHRoaXMpO1xuICAjYm91bmRDYW52YXNQb2ludGVydXAgPSB0aGlzLmNhbnZhc1BvaW50ZXJ1cC5iaW5kKHRoaXMpO1xuICAjYm91bmRDYW52YXNQb2ludGVyZG93biA9IHRoaXMuY2FudmFzUG9pbnRlcmRvd24uYmluZCh0aGlzKTtcbiAgI2NhbnZhc0NvbnRleHRNZW51VGltZW91dElkID0gbnVsbDtcbiAgI2N1cnJlbnRQYXRoMkQgPSBuZXcgUGF0aDJEKCk7XG4gICNkaXNhYmxlRWRpdGluZyA9IGZhbHNlO1xuICAjaGFzU29tZXRoaW5nVG9EcmF3ID0gZmFsc2U7XG4gICNpc0NhbnZhc0luaXRpYWxpemVkID0gZmFsc2U7XG4gICNvYnNlcnZlciA9IG51bGw7XG4gICNyZWFsV2lkdGggPSAwO1xuICAjcmVhbEhlaWdodCA9IDA7XG4gICNyZXF1ZXN0RnJhbWVDYWxsYmFjayA9IG51bGw7XG4gIHN0YXRpYyBfZGVmYXVsdENvbG9yID0gbnVsbDtcbiAgc3RhdGljIF9kZWZhdWx0T3BhY2l0eSA9IDE7XG4gIHN0YXRpYyBfZGVmYXVsdFRoaWNrbmVzcyA9IDE7XG4gIHN0YXRpYyBfdHlwZSA9IFwiaW5rXCI7XG4gIHN0YXRpYyBfZWRpdG9yVHlwZSA9IHV0aWwuQW5ub3RhdGlvbkVkaXRvclR5cGUuSU5LO1xuICBjb25zdHJ1Y3RvcihwYXJhbXMpIHtcbiAgICBzdXBlcih7XG4gICAgICAuLi5wYXJhbXMsXG4gICAgICBuYW1lOiBcImlua0VkaXRvclwiXG4gICAgfSk7XG4gICAgdGhpcy5jb2xvciA9IHBhcmFtcy5jb2xvciB8fCBudWxsO1xuICAgIHRoaXMudGhpY2tuZXNzID0gcGFyYW1zLnRoaWNrbmVzcyB8fCBudWxsO1xuICAgIHRoaXMub3BhY2l0eSA9IHBhcmFtcy5vcGFjaXR5IHx8IG51bGw7XG4gICAgdGhpcy5wYXRocyA9IFtdO1xuICAgIHRoaXMuYmV6aWVyUGF0aDJEID0gW107XG4gICAgdGhpcy5hbGxSYXdQYXRocyA9IFtdO1xuICAgIHRoaXMuY3VycmVudFBhdGggPSBbXTtcbiAgICB0aGlzLnNjYWxlRmFjdG9yID0gMTtcbiAgICB0aGlzLnRyYW5zbGF0aW9uWCA9IHRoaXMudHJhbnNsYXRpb25ZID0gMDtcbiAgICB0aGlzLnggPSAwO1xuICAgIHRoaXMueSA9IDA7XG4gICAgdGhpcy5fd2lsbEtlZXBBc3BlY3RSYXRpbyA9IHRydWU7XG4gIH1cbiAgc3RhdGljIGluaXRpYWxpemUobDEwbikge1xuICAgIGVkaXRvcl9lZGl0b3IuQW5ub3RhdGlvbkVkaXRvci5pbml0aWFsaXplKGwxMG4pO1xuICB9XG4gIHN0YXRpYyB1cGRhdGVEZWZhdWx0UGFyYW1zKHR5cGUsIHZhbHVlKSB7XG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICBjYXNlIHV0aWwuQW5ub3RhdGlvbkVkaXRvclBhcmFtc1R5cGUuSU5LX1RISUNLTkVTUzpcbiAgICAgICAgSW5rRWRpdG9yLl9kZWZhdWx0VGhpY2tuZXNzID0gdmFsdWU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSB1dGlsLkFubm90YXRpb25FZGl0b3JQYXJhbXNUeXBlLklOS19DT0xPUjpcbiAgICAgICAgSW5rRWRpdG9yLl9kZWZhdWx0Q29sb3IgPSB2YWx1ZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIHV0aWwuQW5ub3RhdGlvbkVkaXRvclBhcmFtc1R5cGUuSU5LX09QQUNJVFk6XG4gICAgICAgIElua0VkaXRvci5fZGVmYXVsdE9wYWNpdHkgPSB2YWx1ZSAvIDEwMDtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHVwZGF0ZVBhcmFtcyh0eXBlLCB2YWx1ZSkge1xuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgY2FzZSB1dGlsLkFubm90YXRpb25FZGl0b3JQYXJhbXNUeXBlLklOS19USElDS05FU1M6XG4gICAgICAgIHRoaXMuI3VwZGF0ZVRoaWNrbmVzcyh2YWx1ZSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSB1dGlsLkFubm90YXRpb25FZGl0b3JQYXJhbXNUeXBlLklOS19DT0xPUjpcbiAgICAgICAgdGhpcy4jdXBkYXRlQ29sb3IodmFsdWUpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgdXRpbC5Bbm5vdGF0aW9uRWRpdG9yUGFyYW1zVHlwZS5JTktfT1BBQ0lUWTpcbiAgICAgICAgdGhpcy4jdXBkYXRlT3BhY2l0eSh2YWx1ZSk7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICBzdGF0aWMgZ2V0IGRlZmF1bHRQcm9wZXJ0aWVzVG9VcGRhdGUoKSB7XG4gICAgcmV0dXJuIFtbdXRpbC5Bbm5vdGF0aW9uRWRpdG9yUGFyYW1zVHlwZS5JTktfVEhJQ0tORVNTLCBJbmtFZGl0b3IuX2RlZmF1bHRUaGlja25lc3NdLCBbdXRpbC5Bbm5vdGF0aW9uRWRpdG9yUGFyYW1zVHlwZS5JTktfQ09MT1IsIElua0VkaXRvci5fZGVmYXVsdENvbG9yIHx8IGVkaXRvcl9lZGl0b3IuQW5ub3RhdGlvbkVkaXRvci5fZGVmYXVsdExpbmVDb2xvcl0sIFt1dGlsLkFubm90YXRpb25FZGl0b3JQYXJhbXNUeXBlLklOS19PUEFDSVRZLCBNYXRoLnJvdW5kKElua0VkaXRvci5fZGVmYXVsdE9wYWNpdHkgKiAxMDApXV07XG4gIH1cbiAgZ2V0IHByb3BlcnRpZXNUb1VwZGF0ZSgpIHtcbiAgICByZXR1cm4gW1t1dGlsLkFubm90YXRpb25FZGl0b3JQYXJhbXNUeXBlLklOS19USElDS05FU1MsIHRoaXMudGhpY2tuZXNzIHx8IElua0VkaXRvci5fZGVmYXVsdFRoaWNrbmVzc10sIFt1dGlsLkFubm90YXRpb25FZGl0b3JQYXJhbXNUeXBlLklOS19DT0xPUiwgdGhpcy5jb2xvciB8fCBJbmtFZGl0b3IuX2RlZmF1bHRDb2xvciB8fCBlZGl0b3JfZWRpdG9yLkFubm90YXRpb25FZGl0b3IuX2RlZmF1bHRMaW5lQ29sb3JdLCBbdXRpbC5Bbm5vdGF0aW9uRWRpdG9yUGFyYW1zVHlwZS5JTktfT1BBQ0lUWSwgTWF0aC5yb3VuZCgxMDAgKiAodGhpcy5vcGFjaXR5ID8/IElua0VkaXRvci5fZGVmYXVsdE9wYWNpdHkpKV1dO1xuICB9XG4gICN1cGRhdGVUaGlja25lc3ModGhpY2tuZXNzKSB7XG4gICAgY29uc3Qgc2F2ZWRUaGlja25lc3MgPSB0aGlzLnRoaWNrbmVzcztcbiAgICB0aGlzLmFkZENvbW1hbmRzKHtcbiAgICAgIGNtZDogKCkgPT4ge1xuICAgICAgICB0aGlzLnRoaWNrbmVzcyA9IHRoaWNrbmVzcztcbiAgICAgICAgdGhpcy4jZml0VG9Db250ZW50KCk7XG4gICAgICB9LFxuICAgICAgdW5kbzogKCkgPT4ge1xuICAgICAgICB0aGlzLnRoaWNrbmVzcyA9IHNhdmVkVGhpY2tuZXNzO1xuICAgICAgICB0aGlzLiNmaXRUb0NvbnRlbnQoKTtcbiAgICAgIH0sXG4gICAgICBtdXN0RXhlYzogdHJ1ZSxcbiAgICAgIHR5cGU6IHV0aWwuQW5ub3RhdGlvbkVkaXRvclBhcmFtc1R5cGUuSU5LX1RISUNLTkVTUyxcbiAgICAgIG92ZXJ3cml0ZUlmU2FtZVR5cGU6IHRydWUsXG4gICAgICBrZWVwVW5kbzogdHJ1ZVxuICAgIH0pO1xuICB9XG4gICN1cGRhdGVDb2xvcihjb2xvcikge1xuICAgIGNvbnN0IHNhdmVkQ29sb3IgPSB0aGlzLmNvbG9yO1xuICAgIHRoaXMuYWRkQ29tbWFuZHMoe1xuICAgICAgY21kOiAoKSA9PiB7XG4gICAgICAgIHRoaXMuY29sb3IgPSBjb2xvcjtcbiAgICAgICAgdGhpcy4jcmVkcmF3KCk7XG4gICAgICB9LFxuICAgICAgdW5kbzogKCkgPT4ge1xuICAgICAgICB0aGlzLmNvbG9yID0gc2F2ZWRDb2xvcjtcbiAgICAgICAgdGhpcy4jcmVkcmF3KCk7XG4gICAgICB9LFxuICAgICAgbXVzdEV4ZWM6IHRydWUsXG4gICAgICB0eXBlOiB1dGlsLkFubm90YXRpb25FZGl0b3JQYXJhbXNUeXBlLklOS19DT0xPUixcbiAgICAgIG92ZXJ3cml0ZUlmU2FtZVR5cGU6IHRydWUsXG4gICAgICBrZWVwVW5kbzogdHJ1ZVxuICAgIH0pO1xuICB9XG4gICN1cGRhdGVPcGFjaXR5KG9wYWNpdHkpIHtcbiAgICBvcGFjaXR5IC89IDEwMDtcbiAgICBjb25zdCBzYXZlZE9wYWNpdHkgPSB0aGlzLm9wYWNpdHk7XG4gICAgdGhpcy5hZGRDb21tYW5kcyh7XG4gICAgICBjbWQ6ICgpID0+IHtcbiAgICAgICAgdGhpcy5vcGFjaXR5ID0gb3BhY2l0eTtcbiAgICAgICAgdGhpcy4jcmVkcmF3KCk7XG4gICAgICB9LFxuICAgICAgdW5kbzogKCkgPT4ge1xuICAgICAgICB0aGlzLm9wYWNpdHkgPSBzYXZlZE9wYWNpdHk7XG4gICAgICAgIHRoaXMuI3JlZHJhdygpO1xuICAgICAgfSxcbiAgICAgIG11c3RFeGVjOiB0cnVlLFxuICAgICAgdHlwZTogdXRpbC5Bbm5vdGF0aW9uRWRpdG9yUGFyYW1zVHlwZS5JTktfT1BBQ0lUWSxcbiAgICAgIG92ZXJ3cml0ZUlmU2FtZVR5cGU6IHRydWUsXG4gICAgICBrZWVwVW5kbzogdHJ1ZVxuICAgIH0pO1xuICB9XG4gIHJlYnVpbGQoKSB7XG4gICAgaWYgKCF0aGlzLnBhcmVudCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBzdXBlci5yZWJ1aWxkKCk7XG4gICAgaWYgKHRoaXMuZGl2ID09PSBudWxsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICghdGhpcy5jYW52YXMpIHtcbiAgICAgIHRoaXMuI2NyZWF0ZUNhbnZhcygpO1xuICAgICAgdGhpcy4jY3JlYXRlT2JzZXJ2ZXIoKTtcbiAgICB9XG4gICAgaWYgKCF0aGlzLmlzQXR0YWNoZWRUb0RPTSkge1xuICAgICAgdGhpcy5wYXJlbnQuYWRkKHRoaXMpO1xuICAgICAgdGhpcy4jc2V0Q2FudmFzRGltcygpO1xuICAgIH1cbiAgICB0aGlzLiNmaXRUb0NvbnRlbnQoKTtcbiAgfVxuICByZW1vdmUoKSB7XG4gICAgaWYgKHRoaXMuY2FudmFzID09PSBudWxsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICghdGhpcy5pc0VtcHR5KCkpIHtcbiAgICAgIHRoaXMuY29tbWl0KCk7XG4gICAgfVxuICAgIHRoaXMuY2FudmFzLndpZHRoID0gdGhpcy5jYW52YXMuaGVpZ2h0ID0gMDtcbiAgICB0aGlzLmNhbnZhcy5yZW1vdmUoKTtcbiAgICB0aGlzLmNhbnZhcyA9IG51bGw7XG4gICAgaWYgKHRoaXMuI2NhbnZhc0NvbnRleHRNZW51VGltZW91dElkKSB7XG4gICAgICBjbGVhclRpbWVvdXQodGhpcy4jY2FudmFzQ29udGV4dE1lbnVUaW1lb3V0SWQpO1xuICAgICAgdGhpcy4jY2FudmFzQ29udGV4dE1lbnVUaW1lb3V0SWQgPSBudWxsO1xuICAgIH1cbiAgICB0aGlzLiNvYnNlcnZlci5kaXNjb25uZWN0KCk7XG4gICAgdGhpcy4jb2JzZXJ2ZXIgPSBudWxsO1xuICAgIHN1cGVyLnJlbW92ZSgpO1xuICB9XG4gIHNldFBhcmVudChwYXJlbnQpIHtcbiAgICBpZiAoIXRoaXMucGFyZW50ICYmIHBhcmVudCkge1xuICAgICAgdGhpcy5fdWlNYW5hZ2VyLnJlbW92ZVNob3VsZFJlc2NhbGUodGhpcyk7XG4gICAgfSBlbHNlIGlmICh0aGlzLnBhcmVudCAmJiBwYXJlbnQgPT09IG51bGwpIHtcbiAgICAgIHRoaXMuX3VpTWFuYWdlci5hZGRTaG91bGRSZXNjYWxlKHRoaXMpO1xuICAgIH1cbiAgICBzdXBlci5zZXRQYXJlbnQocGFyZW50KTtcbiAgfVxuICBvblNjYWxlQ2hhbmdpbmcoKSB7XG4gICAgY29uc3QgW3BhcmVudFdpZHRoLCBwYXJlbnRIZWlnaHRdID0gdGhpcy5wYXJlbnREaW1lbnNpb25zO1xuICAgIGNvbnN0IHdpZHRoID0gdGhpcy53aWR0aCAqIHBhcmVudFdpZHRoO1xuICAgIGNvbnN0IGhlaWdodCA9IHRoaXMuaGVpZ2h0ICogcGFyZW50SGVpZ2h0O1xuICAgIHRoaXMuc2V0RGltZW5zaW9ucyh3aWR0aCwgaGVpZ2h0KTtcbiAgfVxuICBlbmFibGVFZGl0TW9kZSgpIHtcbiAgICBpZiAodGhpcy4jZGlzYWJsZUVkaXRpbmcgfHwgdGhpcy5jYW52YXMgPT09IG51bGwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgc3VwZXIuZW5hYmxlRWRpdE1vZGUoKTtcbiAgICB0aGlzLl9pc0RyYWdnYWJsZSA9IGZhbHNlO1xuICAgIHRoaXMuY2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoXCJwb2ludGVyZG93blwiLCB0aGlzLiNib3VuZENhbnZhc1BvaW50ZXJkb3duKTtcbiAgfVxuICBkaXNhYmxlRWRpdE1vZGUoKSB7XG4gICAgaWYgKCF0aGlzLmlzSW5FZGl0TW9kZSgpIHx8IHRoaXMuY2FudmFzID09PSBudWxsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHN1cGVyLmRpc2FibGVFZGl0TW9kZSgpO1xuICAgIHRoaXMuX2lzRHJhZ2dhYmxlID0gIXRoaXMuaXNFbXB0eSgpO1xuICAgIHRoaXMuZGl2LmNsYXNzTGlzdC5yZW1vdmUoXCJlZGl0aW5nXCIpO1xuICAgIHRoaXMuY2FudmFzLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJwb2ludGVyZG93blwiLCB0aGlzLiNib3VuZENhbnZhc1BvaW50ZXJkb3duKTtcbiAgfVxuICBvbmNlQWRkZWQoKSB7XG4gICAgdGhpcy5faXNEcmFnZ2FibGUgPSAhdGhpcy5pc0VtcHR5KCk7XG4gIH1cbiAgaXNFbXB0eSgpIHtcbiAgICByZXR1cm4gdGhpcy5wYXRocy5sZW5ndGggPT09IDAgfHwgdGhpcy5wYXRocy5sZW5ndGggPT09IDEgJiYgdGhpcy5wYXRoc1swXS5sZW5ndGggPT09IDA7XG4gIH1cbiAgI2dldEluaXRpYWxCQm94KCkge1xuICAgIGNvbnN0IHtcbiAgICAgIHBhcmVudFJvdGF0aW9uLFxuICAgICAgcGFyZW50RGltZW5zaW9uczogW3dpZHRoLCBoZWlnaHRdXG4gICAgfSA9IHRoaXM7XG4gICAgc3dpdGNoIChwYXJlbnRSb3RhdGlvbikge1xuICAgICAgY2FzZSA5MDpcbiAgICAgICAgcmV0dXJuIFswLCBoZWlnaHQsIGhlaWdodCwgd2lkdGhdO1xuICAgICAgY2FzZSAxODA6XG4gICAgICAgIHJldHVybiBbd2lkdGgsIGhlaWdodCwgd2lkdGgsIGhlaWdodF07XG4gICAgICBjYXNlIDI3MDpcbiAgICAgICAgcmV0dXJuIFt3aWR0aCwgMCwgaGVpZ2h0LCB3aWR0aF07XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gWzAsIDAsIHdpZHRoLCBoZWlnaHRdO1xuICAgIH1cbiAgfVxuICAjc2V0U3Ryb2tlKCkge1xuICAgIGNvbnN0IHtcbiAgICAgIGN0eCxcbiAgICAgIGNvbG9yLFxuICAgICAgb3BhY2l0eSxcbiAgICAgIHRoaWNrbmVzcyxcbiAgICAgIHBhcmVudFNjYWxlLFxuICAgICAgc2NhbGVGYWN0b3JcbiAgICB9ID0gdGhpcztcbiAgICBjdHgubGluZVdpZHRoID0gdGhpY2tuZXNzICogcGFyZW50U2NhbGUgLyBzY2FsZUZhY3RvcjtcbiAgICBjdHgubGluZUNhcCA9IFwicm91bmRcIjtcbiAgICBjdHgubGluZUpvaW4gPSBcInJvdW5kXCI7XG4gICAgY3R4Lm1pdGVyTGltaXQgPSAxMDtcbiAgICBjdHguc3Ryb2tlU3R5bGUgPSBgJHtjb2xvcn0keygwLHRvb2xzLm9wYWNpdHlUb0hleCkob3BhY2l0eSl9YDtcbiAgfVxuICAjc3RhcnREcmF3aW5nKHgsIHkpIHtcbiAgICB0aGlzLmNhbnZhcy5hZGRFdmVudExpc3RlbmVyKFwiY29udGV4dG1lbnVcIiwgZGlzcGxheV91dGlscy5ub0NvbnRleHRNZW51KTtcbiAgICB0aGlzLmNhbnZhcy5hZGRFdmVudExpc3RlbmVyKFwicG9pbnRlcmxlYXZlXCIsIHRoaXMuI2JvdW5kQ2FudmFzUG9pbnRlcmxlYXZlKTtcbiAgICB0aGlzLmNhbnZhcy5hZGRFdmVudExpc3RlbmVyKFwicG9pbnRlcm1vdmVcIiwgdGhpcy4jYm91bmRDYW52YXNQb2ludGVybW92ZSk7XG4gICAgdGhpcy5jYW52YXMuYWRkRXZlbnRMaXN0ZW5lcihcInBvaW50ZXJ1cFwiLCB0aGlzLiNib3VuZENhbnZhc1BvaW50ZXJ1cCk7XG4gICAgdGhpcy5jYW52YXMucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInBvaW50ZXJkb3duXCIsIHRoaXMuI2JvdW5kQ2FudmFzUG9pbnRlcmRvd24pO1xuICAgIHRoaXMuaXNFZGl0aW5nID0gdHJ1ZTtcbiAgICBpZiAoIXRoaXMuI2lzQ2FudmFzSW5pdGlhbGl6ZWQpIHtcbiAgICAgIHRoaXMuI2lzQ2FudmFzSW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgICAgdGhpcy4jc2V0Q2FudmFzRGltcygpO1xuICAgICAgdGhpcy50aGlja25lc3MgfHw9IElua0VkaXRvci5fZGVmYXVsdFRoaWNrbmVzcztcbiAgICAgIHRoaXMuY29sb3IgfHw9IElua0VkaXRvci5fZGVmYXVsdENvbG9yIHx8IGVkaXRvcl9lZGl0b3IuQW5ub3RhdGlvbkVkaXRvci5fZGVmYXVsdExpbmVDb2xvcjtcbiAgICAgIHRoaXMub3BhY2l0eSA/Pz0gSW5rRWRpdG9yLl9kZWZhdWx0T3BhY2l0eTtcbiAgICB9XG4gICAgdGhpcy5jdXJyZW50UGF0aC5wdXNoKFt4LCB5XSk7XG4gICAgdGhpcy4jaGFzU29tZXRoaW5nVG9EcmF3ID0gZmFsc2U7XG4gICAgdGhpcy4jc2V0U3Ryb2tlKCk7XG4gICAgdGhpcy4jcmVxdWVzdEZyYW1lQ2FsbGJhY2sgPSAoKSA9PiB7XG4gICAgICB0aGlzLiNkcmF3UG9pbnRzKCk7XG4gICAgICBpZiAodGhpcy4jcmVxdWVzdEZyYW1lQ2FsbGJhY2spIHtcbiAgICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSh0aGlzLiNyZXF1ZXN0RnJhbWVDYWxsYmFjayk7XG4gICAgICB9XG4gICAgfTtcbiAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKHRoaXMuI3JlcXVlc3RGcmFtZUNhbGxiYWNrKTtcbiAgfVxuICAjZHJhdyh4LCB5KSB7XG4gICAgY29uc3QgW2xhc3RYLCBsYXN0WV0gPSB0aGlzLmN1cnJlbnRQYXRoLmF0KC0xKTtcbiAgICBpZiAodGhpcy5jdXJyZW50UGF0aC5sZW5ndGggPiAxICYmIHggPT09IGxhc3RYICYmIHkgPT09IGxhc3RZKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGN1cnJlbnRQYXRoID0gdGhpcy5jdXJyZW50UGF0aDtcbiAgICBsZXQgcGF0aDJEID0gdGhpcy4jY3VycmVudFBhdGgyRDtcbiAgICBjdXJyZW50UGF0aC5wdXNoKFt4LCB5XSk7XG4gICAgdGhpcy4jaGFzU29tZXRoaW5nVG9EcmF3ID0gdHJ1ZTtcbiAgICBpZiAoY3VycmVudFBhdGgubGVuZ3RoIDw9IDIpIHtcbiAgICAgIHBhdGgyRC5tb3ZlVG8oLi4uY3VycmVudFBhdGhbMF0pO1xuICAgICAgcGF0aDJELmxpbmVUbyh4LCB5KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGN1cnJlbnRQYXRoLmxlbmd0aCA9PT0gMykge1xuICAgICAgdGhpcy4jY3VycmVudFBhdGgyRCA9IHBhdGgyRCA9IG5ldyBQYXRoMkQoKTtcbiAgICAgIHBhdGgyRC5tb3ZlVG8oLi4uY3VycmVudFBhdGhbMF0pO1xuICAgIH1cbiAgICB0aGlzLiNtYWtlQmV6aWVyQ3VydmUocGF0aDJELCAuLi5jdXJyZW50UGF0aC5hdCgtMyksIC4uLmN1cnJlbnRQYXRoLmF0KC0yKSwgeCwgeSk7XG4gIH1cbiAgI2VuZFBhdGgoKSB7XG4gICAgaWYgKHRoaXMuY3VycmVudFBhdGgubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGxhc3RQb2ludCA9IHRoaXMuY3VycmVudFBhdGguYXQoLTEpO1xuICAgIHRoaXMuI2N1cnJlbnRQYXRoMkQubGluZVRvKC4uLmxhc3RQb2ludCk7XG4gIH1cbiAgI3N0b3BEcmF3aW5nKHgsIHkpIHtcbiAgICB0aGlzLiNyZXF1ZXN0RnJhbWVDYWxsYmFjayA9IG51bGw7XG4gICAgeCA9IE1hdGgubWluKE1hdGgubWF4KHgsIDApLCB0aGlzLmNhbnZhcy53aWR0aCk7XG4gICAgeSA9IE1hdGgubWluKE1hdGgubWF4KHksIDApLCB0aGlzLmNhbnZhcy5oZWlnaHQpO1xuICAgIHRoaXMuI2RyYXcoeCwgeSk7XG4gICAgdGhpcy4jZW5kUGF0aCgpO1xuICAgIGxldCBiZXppZXI7XG4gICAgaWYgKHRoaXMuY3VycmVudFBhdGgubGVuZ3RoICE9PSAxKSB7XG4gICAgICBiZXppZXIgPSB0aGlzLiNnZW5lcmF0ZUJlemllclBvaW50cygpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCB4eSA9IFt4LCB5XTtcbiAgICAgIGJlemllciA9IFtbeHksIHh5LnNsaWNlKCksIHh5LnNsaWNlKCksIHh5XV07XG4gICAgfVxuICAgIGNvbnN0IHBhdGgyRCA9IHRoaXMuI2N1cnJlbnRQYXRoMkQ7XG4gICAgY29uc3QgY3VycmVudFBhdGggPSB0aGlzLmN1cnJlbnRQYXRoO1xuICAgIHRoaXMuY3VycmVudFBhdGggPSBbXTtcbiAgICB0aGlzLiNjdXJyZW50UGF0aDJEID0gbmV3IFBhdGgyRCgpO1xuICAgIGNvbnN0IGNtZCA9ICgpID0+IHtcbiAgICAgIHRoaXMuYWxsUmF3UGF0aHMucHVzaChjdXJyZW50UGF0aCk7XG4gICAgICB0aGlzLnBhdGhzLnB1c2goYmV6aWVyKTtcbiAgICAgIHRoaXMuYmV6aWVyUGF0aDJELnB1c2gocGF0aDJEKTtcbiAgICAgIHRoaXMucmVidWlsZCgpO1xuICAgIH07XG4gICAgY29uc3QgdW5kbyA9ICgpID0+IHtcbiAgICAgIHRoaXMuYWxsUmF3UGF0aHMucG9wKCk7XG4gICAgICB0aGlzLnBhdGhzLnBvcCgpO1xuICAgICAgdGhpcy5iZXppZXJQYXRoMkQucG9wKCk7XG4gICAgICBpZiAodGhpcy5wYXRocy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgdGhpcy5yZW1vdmUoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICghdGhpcy5jYW52YXMpIHtcbiAgICAgICAgICB0aGlzLiNjcmVhdGVDYW52YXMoKTtcbiAgICAgICAgICB0aGlzLiNjcmVhdGVPYnNlcnZlcigpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuI2ZpdFRvQ29udGVudCgpO1xuICAgICAgfVxuICAgIH07XG4gICAgdGhpcy5hZGRDb21tYW5kcyh7XG4gICAgICBjbWQsXG4gICAgICB1bmRvLFxuICAgICAgbXVzdEV4ZWM6IHRydWVcbiAgICB9KTtcbiAgfVxuICAjZHJhd1BvaW50cygpIHtcbiAgICBpZiAoIXRoaXMuI2hhc1NvbWV0aGluZ1RvRHJhdykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLiNoYXNTb21ldGhpbmdUb0RyYXcgPSBmYWxzZTtcbiAgICBjb25zdCB0aGlja25lc3MgPSBNYXRoLmNlaWwodGhpcy50aGlja25lc3MgKiB0aGlzLnBhcmVudFNjYWxlKTtcbiAgICBjb25zdCBsYXN0UG9pbnRzID0gdGhpcy5jdXJyZW50UGF0aC5zbGljZSgtMyk7XG4gICAgY29uc3QgeCA9IGxhc3RQb2ludHMubWFwKHh5ID0+IHh5WzBdKTtcbiAgICBjb25zdCB5ID0gbGFzdFBvaW50cy5tYXAoeHkgPT4geHlbMV0pO1xuICAgIGNvbnN0IHhNaW4gPSBNYXRoLm1pbiguLi54KSAtIHRoaWNrbmVzcztcbiAgICBjb25zdCB4TWF4ID0gTWF0aC5tYXgoLi4ueCkgKyB0aGlja25lc3M7XG4gICAgY29uc3QgeU1pbiA9IE1hdGgubWluKC4uLnkpIC0gdGhpY2tuZXNzO1xuICAgIGNvbnN0IHlNYXggPSBNYXRoLm1heCguLi55KSArIHRoaWNrbmVzcztcbiAgICBjb25zdCB7XG4gICAgICBjdHhcbiAgICB9ID0gdGhpcztcbiAgICBjdHguc2F2ZSgpO1xuICAgIGN0eC5jbGVhclJlY3QoMCwgMCwgdGhpcy5jYW52YXMud2lkdGgsIHRoaXMuY2FudmFzLmhlaWdodCk7XG4gICAgZm9yIChjb25zdCBwYXRoIG9mIHRoaXMuYmV6aWVyUGF0aDJEKSB7XG4gICAgICBjdHguc3Ryb2tlKHBhdGgpO1xuICAgIH1cbiAgICBjdHguc3Ryb2tlKHRoaXMuI2N1cnJlbnRQYXRoMkQpO1xuICAgIGN0eC5yZXN0b3JlKCk7XG4gIH1cbiAgI21ha2VCZXppZXJDdXJ2ZShwYXRoMkQsIHgwLCB5MCwgeDEsIHkxLCB4MiwgeTIpIHtcbiAgICBjb25zdCBwcmV2WCA9ICh4MCArIHgxKSAvIDI7XG4gICAgY29uc3QgcHJldlkgPSAoeTAgKyB5MSkgLyAyO1xuICAgIGNvbnN0IHgzID0gKHgxICsgeDIpIC8gMjtcbiAgICBjb25zdCB5MyA9ICh5MSArIHkyKSAvIDI7XG4gICAgcGF0aDJELmJlemllckN1cnZlVG8ocHJldlggKyAyICogKHgxIC0gcHJldlgpIC8gMywgcHJldlkgKyAyICogKHkxIC0gcHJldlkpIC8gMywgeDMgKyAyICogKHgxIC0geDMpIC8gMywgeTMgKyAyICogKHkxIC0geTMpIC8gMywgeDMsIHkzKTtcbiAgfVxuICAjZ2VuZXJhdGVCZXppZXJQb2ludHMoKSB7XG4gICAgY29uc3QgcGF0aCA9IHRoaXMuY3VycmVudFBhdGg7XG4gICAgaWYgKHBhdGgubGVuZ3RoIDw9IDIpIHtcbiAgICAgIHJldHVybiBbW3BhdGhbMF0sIHBhdGhbMF0sIHBhdGguYXQoLTEpLCBwYXRoLmF0KC0xKV1dO1xuICAgIH1cbiAgICBjb25zdCBiZXppZXJQb2ludHMgPSBbXTtcbiAgICBsZXQgaTtcbiAgICBsZXQgW3gwLCB5MF0gPSBwYXRoWzBdO1xuICAgIGZvciAoaSA9IDE7IGkgPCBwYXRoLmxlbmd0aCAtIDI7IGkrKykge1xuICAgICAgY29uc3QgW3gxLCB5MV0gPSBwYXRoW2ldO1xuICAgICAgY29uc3QgW3gyLCB5Ml0gPSBwYXRoW2kgKyAxXTtcbiAgICAgIGNvbnN0IHgzID0gKHgxICsgeDIpIC8gMjtcbiAgICAgIGNvbnN0IHkzID0gKHkxICsgeTIpIC8gMjtcbiAgICAgIGNvbnN0IGNvbnRyb2wxID0gW3gwICsgMiAqICh4MSAtIHgwKSAvIDMsIHkwICsgMiAqICh5MSAtIHkwKSAvIDNdO1xuICAgICAgY29uc3QgY29udHJvbDIgPSBbeDMgKyAyICogKHgxIC0geDMpIC8gMywgeTMgKyAyICogKHkxIC0geTMpIC8gM107XG4gICAgICBiZXppZXJQb2ludHMucHVzaChbW3gwLCB5MF0sIGNvbnRyb2wxLCBjb250cm9sMiwgW3gzLCB5M11dKTtcbiAgICAgIFt4MCwgeTBdID0gW3gzLCB5M107XG4gICAgfVxuICAgIGNvbnN0IFt4MSwgeTFdID0gcGF0aFtpXTtcbiAgICBjb25zdCBbeDIsIHkyXSA9IHBhdGhbaSArIDFdO1xuICAgIGNvbnN0IGNvbnRyb2wxID0gW3gwICsgMiAqICh4MSAtIHgwKSAvIDMsIHkwICsgMiAqICh5MSAtIHkwKSAvIDNdO1xuICAgIGNvbnN0IGNvbnRyb2wyID0gW3gyICsgMiAqICh4MSAtIHgyKSAvIDMsIHkyICsgMiAqICh5MSAtIHkyKSAvIDNdO1xuICAgIGJlemllclBvaW50cy5wdXNoKFtbeDAsIHkwXSwgY29udHJvbDEsIGNvbnRyb2wyLCBbeDIsIHkyXV0pO1xuICAgIHJldHVybiBiZXppZXJQb2ludHM7XG4gIH1cbiAgI3JlZHJhdygpIHtcbiAgICBpZiAodGhpcy5pc0VtcHR5KCkpIHtcbiAgICAgIHRoaXMuI3VwZGF0ZVRyYW5zZm9ybSgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLiNzZXRTdHJva2UoKTtcbiAgICBjb25zdCB7XG4gICAgICBjYW52YXMsXG4gICAgICBjdHhcbiAgICB9ID0gdGhpcztcbiAgICBjdHguc2V0VHJhbnNmb3JtKDEsIDAsIDAsIDEsIDAsIDApO1xuICAgIGN0eC5jbGVhclJlY3QoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcbiAgICB0aGlzLiN1cGRhdGVUcmFuc2Zvcm0oKTtcbiAgICBmb3IgKGNvbnN0IHBhdGggb2YgdGhpcy5iZXppZXJQYXRoMkQpIHtcbiAgICAgIGN0eC5zdHJva2UocGF0aCk7XG4gICAgfVxuICB9XG4gIGNvbW1pdCgpIHtcbiAgICBpZiAodGhpcy4jZGlzYWJsZUVkaXRpbmcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgc3VwZXIuY29tbWl0KCk7XG4gICAgdGhpcy5pc0VkaXRpbmcgPSBmYWxzZTtcbiAgICB0aGlzLmRpc2FibGVFZGl0TW9kZSgpO1xuICAgIHRoaXMuc2V0SW5Gb3JlZ3JvdW5kKCk7XG4gICAgdGhpcy4jZGlzYWJsZUVkaXRpbmcgPSB0cnVlO1xuICAgIHRoaXMuZGl2LmNsYXNzTGlzdC5hZGQoXCJkaXNhYmxlZFwiKTtcbiAgICB0aGlzLiNmaXRUb0NvbnRlbnQodHJ1ZSk7XG4gICAgdGhpcy5zZWxlY3QoKTtcbiAgICB0aGlzLnBhcmVudC5hZGRJbmtFZGl0b3JJZk5lZWRlZCh0cnVlKTtcbiAgICB0aGlzLm1vdmVJbkRPTSgpO1xuICAgIHRoaXMuZGl2LmZvY3VzKHtcbiAgICAgIHByZXZlbnRTY3JvbGw6IHRydWVcbiAgICB9KTtcbiAgfVxuICBmb2N1c2luKGV2ZW50KSB7XG4gICAgaWYgKCF0aGlzLl9mb2N1c0V2ZW50c0FsbG93ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgc3VwZXIuZm9jdXNpbihldmVudCk7XG4gICAgdGhpcy5lbmFibGVFZGl0TW9kZSgpO1xuICB9XG4gIGNhbnZhc1BvaW50ZXJkb3duKGV2ZW50KSB7XG4gICAgaWYgKGV2ZW50LmJ1dHRvbiAhPT0gMCB8fCAhdGhpcy5pc0luRWRpdE1vZGUoKSB8fCB0aGlzLiNkaXNhYmxlRWRpdGluZykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLnNldEluRm9yZWdyb3VuZCgpO1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgaWYgKCF0aGlzLmRpdi5jb250YWlucyhkb2N1bWVudC5hY3RpdmVFbGVtZW50KSkge1xuICAgICAgdGhpcy5kaXYuZm9jdXMoe1xuICAgICAgICBwcmV2ZW50U2Nyb2xsOiB0cnVlXG4gICAgICB9KTtcbiAgICB9XG4gICAgdGhpcy4jc3RhcnREcmF3aW5nKGV2ZW50Lm9mZnNldFgsIGV2ZW50Lm9mZnNldFkpO1xuICB9XG4gIGNhbnZhc1BvaW50ZXJtb3ZlKGV2ZW50KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB0aGlzLiNkcmF3KGV2ZW50Lm9mZnNldFgsIGV2ZW50Lm9mZnNldFkpO1xuICB9XG4gIGNhbnZhc1BvaW50ZXJ1cChldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgdGhpcy4jZW5kRHJhd2luZyhldmVudCk7XG4gIH1cbiAgY2FudmFzUG9pbnRlcmxlYXZlKGV2ZW50KSB7XG4gICAgdGhpcy4jZW5kRHJhd2luZyhldmVudCk7XG4gIH1cbiAgI2VuZERyYXdpbmcoZXZlbnQpIHtcbiAgICB0aGlzLmNhbnZhcy5yZW1vdmVFdmVudExpc3RlbmVyKFwicG9pbnRlcmxlYXZlXCIsIHRoaXMuI2JvdW5kQ2FudmFzUG9pbnRlcmxlYXZlKTtcbiAgICB0aGlzLmNhbnZhcy5yZW1vdmVFdmVudExpc3RlbmVyKFwicG9pbnRlcm1vdmVcIiwgdGhpcy4jYm91bmRDYW52YXNQb2ludGVybW92ZSk7XG4gICAgdGhpcy5jYW52YXMucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInBvaW50ZXJ1cFwiLCB0aGlzLiNib3VuZENhbnZhc1BvaW50ZXJ1cCk7XG4gICAgdGhpcy5jYW52YXMuYWRkRXZlbnRMaXN0ZW5lcihcInBvaW50ZXJkb3duXCIsIHRoaXMuI2JvdW5kQ2FudmFzUG9pbnRlcmRvd24pO1xuICAgIGlmICh0aGlzLiNjYW52YXNDb250ZXh0TWVudVRpbWVvdXRJZCkge1xuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuI2NhbnZhc0NvbnRleHRNZW51VGltZW91dElkKTtcbiAgICB9XG4gICAgdGhpcy4jY2FudmFzQ29udGV4dE1lbnVUaW1lb3V0SWQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHRoaXMuI2NhbnZhc0NvbnRleHRNZW51VGltZW91dElkID0gbnVsbDtcbiAgICAgIHRoaXMuY2FudmFzLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJjb250ZXh0bWVudVwiLCBkaXNwbGF5X3V0aWxzLm5vQ29udGV4dE1lbnUpO1xuICAgIH0sIDEwKTtcbiAgICB0aGlzLiNzdG9wRHJhd2luZyhldmVudC5vZmZzZXRYLCBldmVudC5vZmZzZXRZKTtcbiAgICB0aGlzLmFkZFRvQW5ub3RhdGlvblN0b3JhZ2UoKTtcbiAgICB0aGlzLnNldEluQmFja2dyb3VuZCgpO1xuICB9XG4gICNjcmVhdGVDYW52YXMoKSB7XG4gICAgdGhpcy5jYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiY2FudmFzXCIpO1xuICAgIHRoaXMuY2FudmFzLndpZHRoID0gdGhpcy5jYW52YXMuaGVpZ2h0ID0gMDtcbiAgICB0aGlzLmNhbnZhcy5jbGFzc05hbWUgPSBcImlua0VkaXRvckNhbnZhc1wiO1xuICAgIHRoaXMuY2FudmFzLnNldEF0dHJpYnV0ZShcImRhdGEtbDEwbi1pZFwiLCBcInBkZmpzLWluay1jYW52YXNcIik7XG4gICAgdGhpcy5kaXYuYXBwZW5kKHRoaXMuY2FudmFzKTtcbiAgICB0aGlzLmN0eCA9IHRoaXMuY2FudmFzLmdldENvbnRleHQoXCIyZFwiKTtcbiAgfVxuICAjY3JlYXRlT2JzZXJ2ZXIoKSB7XG4gICAgdGhpcy4jb2JzZXJ2ZXIgPSBuZXcgUmVzaXplT2JzZXJ2ZXIoZW50cmllcyA9PiB7XG4gICAgICBjb25zdCByZWN0ID0gZW50cmllc1swXS5jb250ZW50UmVjdDtcbiAgICAgIGlmIChyZWN0LndpZHRoICYmIHJlY3QuaGVpZ2h0KSB7XG4gICAgICAgIHRoaXMuc2V0RGltZW5zaW9ucyhyZWN0LndpZHRoLCByZWN0LmhlaWdodCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgdGhpcy4jb2JzZXJ2ZXIub2JzZXJ2ZSh0aGlzLmRpdik7XG4gIH1cbiAgZ2V0IGlzUmVzaXphYmxlKCkge1xuICAgIHJldHVybiAhdGhpcy5pc0VtcHR5KCkgJiYgdGhpcy4jZGlzYWJsZUVkaXRpbmc7XG4gIH1cbiAgcmVuZGVyKCkge1xuICAgIGlmICh0aGlzLmRpdikge1xuICAgICAgcmV0dXJuIHRoaXMuZGl2O1xuICAgIH1cbiAgICBsZXQgYmFzZVgsIGJhc2VZO1xuICAgIGlmICh0aGlzLndpZHRoKSB7XG4gICAgICBiYXNlWCA9IHRoaXMueDtcbiAgICAgIGJhc2VZID0gdGhpcy55O1xuICAgIH1cbiAgICBzdXBlci5yZW5kZXIoKTtcbiAgICB0aGlzLmRpdi5zZXRBdHRyaWJ1dGUoXCJkYXRhLWwxMG4taWRcIiwgXCJwZGZqcy1pbmtcIik7XG4gICAgY29uc3QgW3gsIHksIHcsIGhdID0gdGhpcy4jZ2V0SW5pdGlhbEJCb3goKTtcbiAgICB0aGlzLnNldEF0KHgsIHksIDAsIDApO1xuICAgIHRoaXMuc2V0RGltcyh3LCBoKTtcbiAgICB0aGlzLiNjcmVhdGVDYW52YXMoKTtcbiAgICBpZiAodGhpcy53aWR0aCkge1xuICAgICAgY29uc3QgW3BhcmVudFdpZHRoLCBwYXJlbnRIZWlnaHRdID0gdGhpcy5wYXJlbnREaW1lbnNpb25zO1xuICAgICAgdGhpcy5zZXRBc3BlY3RSYXRpbyh0aGlzLndpZHRoICogcGFyZW50V2lkdGgsIHRoaXMuaGVpZ2h0ICogcGFyZW50SGVpZ2h0KTtcbiAgICAgIHRoaXMuc2V0QXQoYmFzZVggKiBwYXJlbnRXaWR0aCwgYmFzZVkgKiBwYXJlbnRIZWlnaHQsIHRoaXMud2lkdGggKiBwYXJlbnRXaWR0aCwgdGhpcy5oZWlnaHQgKiBwYXJlbnRIZWlnaHQpO1xuICAgICAgdGhpcy4jaXNDYW52YXNJbml0aWFsaXplZCA9IHRydWU7XG4gICAgICB0aGlzLiNzZXRDYW52YXNEaW1zKCk7XG4gICAgICB0aGlzLnNldERpbXModGhpcy53aWR0aCAqIHBhcmVudFdpZHRoLCB0aGlzLmhlaWdodCAqIHBhcmVudEhlaWdodCk7XG4gICAgICB0aGlzLiNyZWRyYXcoKTtcbiAgICAgIHRoaXMuZGl2LmNsYXNzTGlzdC5hZGQoXCJkaXNhYmxlZFwiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5kaXYuY2xhc3NMaXN0LmFkZChcImVkaXRpbmdcIik7XG4gICAgICB0aGlzLmVuYWJsZUVkaXRNb2RlKCk7XG4gICAgfVxuICAgIHRoaXMuI2NyZWF0ZU9ic2VydmVyKCk7XG4gICAgcmV0dXJuIHRoaXMuZGl2O1xuICB9XG4gICNzZXRDYW52YXNEaW1zKCkge1xuICAgIGlmICghdGhpcy4jaXNDYW52YXNJbml0aWFsaXplZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBbcGFyZW50V2lkdGgsIHBhcmVudEhlaWdodF0gPSB0aGlzLnBhcmVudERpbWVuc2lvbnM7XG4gICAgdGhpcy5jYW52YXMud2lkdGggPSBNYXRoLmNlaWwodGhpcy53aWR0aCAqIHBhcmVudFdpZHRoKTtcbiAgICB0aGlzLmNhbnZhcy5oZWlnaHQgPSBNYXRoLmNlaWwodGhpcy5oZWlnaHQgKiBwYXJlbnRIZWlnaHQpO1xuICAgIHRoaXMuI3VwZGF0ZVRyYW5zZm9ybSgpO1xuICB9XG4gIHNldERpbWVuc2lvbnMod2lkdGgsIGhlaWdodCkge1xuICAgIGNvbnN0IHJvdW5kZWRXaWR0aCA9IE1hdGgucm91bmQod2lkdGgpO1xuICAgIGNvbnN0IHJvdW5kZWRIZWlnaHQgPSBNYXRoLnJvdW5kKGhlaWdodCk7XG4gICAgaWYgKHRoaXMuI3JlYWxXaWR0aCA9PT0gcm91bmRlZFdpZHRoICYmIHRoaXMuI3JlYWxIZWlnaHQgPT09IHJvdW5kZWRIZWlnaHQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy4jcmVhbFdpZHRoID0gcm91bmRlZFdpZHRoO1xuICAgIHRoaXMuI3JlYWxIZWlnaHQgPSByb3VuZGVkSGVpZ2h0O1xuICAgIHRoaXMuY2FudmFzLnN0eWxlLnZpc2liaWxpdHkgPSBcImhpZGRlblwiO1xuICAgIGNvbnN0IFtwYXJlbnRXaWR0aCwgcGFyZW50SGVpZ2h0XSA9IHRoaXMucGFyZW50RGltZW5zaW9ucztcbiAgICB0aGlzLndpZHRoID0gd2lkdGggLyBwYXJlbnRXaWR0aDtcbiAgICB0aGlzLmhlaWdodCA9IGhlaWdodCAvIHBhcmVudEhlaWdodDtcbiAgICB0aGlzLmZpeEFuZFNldFBvc2l0aW9uKCk7XG4gICAgaWYgKHRoaXMuI2Rpc2FibGVFZGl0aW5nKSB7XG4gICAgICB0aGlzLiNzZXRTY2FsZUZhY3Rvcih3aWR0aCwgaGVpZ2h0KTtcbiAgICB9XG4gICAgdGhpcy4jc2V0Q2FudmFzRGltcygpO1xuICAgIHRoaXMuI3JlZHJhdygpO1xuICAgIHRoaXMuY2FudmFzLnN0eWxlLnZpc2liaWxpdHkgPSBcInZpc2libGVcIjtcbiAgICB0aGlzLmZpeERpbXMoKTtcbiAgfVxuICAjc2V0U2NhbGVGYWN0b3Iod2lkdGgsIGhlaWdodCkge1xuICAgIGNvbnN0IHBhZGRpbmcgPSB0aGlzLiNnZXRQYWRkaW5nKCk7XG4gICAgY29uc3Qgc2NhbGVGYWN0b3JXID0gKHdpZHRoIC0gcGFkZGluZykgLyB0aGlzLiNiYXNlV2lkdGg7XG4gICAgY29uc3Qgc2NhbGVGYWN0b3JIID0gKGhlaWdodCAtIHBhZGRpbmcpIC8gdGhpcy4jYmFzZUhlaWdodDtcbiAgICB0aGlzLnNjYWxlRmFjdG9yID0gTWF0aC5taW4oc2NhbGVGYWN0b3JXLCBzY2FsZUZhY3RvckgpO1xuICB9XG4gICN1cGRhdGVUcmFuc2Zvcm0oKSB7XG4gICAgY29uc3QgcGFkZGluZyA9IHRoaXMuI2dldFBhZGRpbmcoKSAvIDI7XG4gICAgdGhpcy5jdHguc2V0VHJhbnNmb3JtKHRoaXMuc2NhbGVGYWN0b3IsIDAsIDAsIHRoaXMuc2NhbGVGYWN0b3IsIHRoaXMudHJhbnNsYXRpb25YICogdGhpcy5zY2FsZUZhY3RvciArIHBhZGRpbmcsIHRoaXMudHJhbnNsYXRpb25ZICogdGhpcy5zY2FsZUZhY3RvciArIHBhZGRpbmcpO1xuICB9XG4gIHN0YXRpYyAjYnVpbGRQYXRoMkQoYmV6aWVyKSB7XG4gICAgY29uc3QgcGF0aDJEID0gbmV3IFBhdGgyRCgpO1xuICAgIGZvciAobGV0IGkgPSAwLCBpaSA9IGJlemllci5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG4gICAgICBjb25zdCBbZmlyc3QsIGNvbnRyb2wxLCBjb250cm9sMiwgc2Vjb25kXSA9IGJlemllcltpXTtcbiAgICAgIGlmIChpID09PSAwKSB7XG4gICAgICAgIHBhdGgyRC5tb3ZlVG8oLi4uZmlyc3QpO1xuICAgICAgfVxuICAgICAgcGF0aDJELmJlemllckN1cnZlVG8oY29udHJvbDFbMF0sIGNvbnRyb2wxWzFdLCBjb250cm9sMlswXSwgY29udHJvbDJbMV0sIHNlY29uZFswXSwgc2Vjb25kWzFdKTtcbiAgICB9XG4gICAgcmV0dXJuIHBhdGgyRDtcbiAgfVxuICBzdGF0aWMgI3RvUERGQ29vcmRpbmF0ZXMocG9pbnRzLCByZWN0LCByb3RhdGlvbikge1xuICAgIGNvbnN0IFtibFgsIGJsWSwgdHJYLCB0clldID0gcmVjdDtcbiAgICBzd2l0Y2ggKHJvdGF0aW9uKSB7XG4gICAgICBjYXNlIDA6XG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBpaSA9IHBvaW50cy5sZW5ndGg7IGkgPCBpaTsgaSArPSAyKSB7XG4gICAgICAgICAgcG9pbnRzW2ldICs9IGJsWDtcbiAgICAgICAgICBwb2ludHNbaSArIDFdID0gdHJZIC0gcG9pbnRzW2kgKyAxXTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgOTA6XG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBpaSA9IHBvaW50cy5sZW5ndGg7IGkgPCBpaTsgaSArPSAyKSB7XG4gICAgICAgICAgY29uc3QgeCA9IHBvaW50c1tpXTtcbiAgICAgICAgICBwb2ludHNbaV0gPSBwb2ludHNbaSArIDFdICsgYmxYO1xuICAgICAgICAgIHBvaW50c1tpICsgMV0gPSB4ICsgYmxZO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAxODA6XG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBpaSA9IHBvaW50cy5sZW5ndGg7IGkgPCBpaTsgaSArPSAyKSB7XG4gICAgICAgICAgcG9pbnRzW2ldID0gdHJYIC0gcG9pbnRzW2ldO1xuICAgICAgICAgIHBvaW50c1tpICsgMV0gKz0gYmxZO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAyNzA6XG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBpaSA9IHBvaW50cy5sZW5ndGg7IGkgPCBpaTsgaSArPSAyKSB7XG4gICAgICAgICAgY29uc3QgeCA9IHBvaW50c1tpXTtcbiAgICAgICAgICBwb2ludHNbaV0gPSB0clggLSBwb2ludHNbaSArIDFdO1xuICAgICAgICAgIHBvaW50c1tpICsgMV0gPSB0clkgLSB4O1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCByb3RhdGlvblwiKTtcbiAgICB9XG4gICAgcmV0dXJuIHBvaW50cztcbiAgfVxuICBzdGF0aWMgI2Zyb21QREZDb29yZGluYXRlcyhwb2ludHMsIHJlY3QsIHJvdGF0aW9uKSB7XG4gICAgY29uc3QgW2JsWCwgYmxZLCB0clgsIHRyWV0gPSByZWN0O1xuICAgIHN3aXRjaCAocm90YXRpb24pIHtcbiAgICAgIGNhc2UgMDpcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGlpID0gcG9pbnRzLmxlbmd0aDsgaSA8IGlpOyBpICs9IDIpIHtcbiAgICAgICAgICBwb2ludHNbaV0gLT0gYmxYO1xuICAgICAgICAgIHBvaW50c1tpICsgMV0gPSB0clkgLSBwb2ludHNbaSArIDFdO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSA5MDpcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGlpID0gcG9pbnRzLmxlbmd0aDsgaSA8IGlpOyBpICs9IDIpIHtcbiAgICAgICAgICBjb25zdCB4ID0gcG9pbnRzW2ldO1xuICAgICAgICAgIHBvaW50c1tpXSA9IHBvaW50c1tpICsgMV0gLSBibFk7XG4gICAgICAgICAgcG9pbnRzW2kgKyAxXSA9IHggLSBibFg7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDE4MDpcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGlpID0gcG9pbnRzLmxlbmd0aDsgaSA8IGlpOyBpICs9IDIpIHtcbiAgICAgICAgICBwb2ludHNbaV0gPSB0clggLSBwb2ludHNbaV07XG4gICAgICAgICAgcG9pbnRzW2kgKyAxXSAtPSBibFk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDI3MDpcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGlpID0gcG9pbnRzLmxlbmd0aDsgaSA8IGlpOyBpICs9IDIpIHtcbiAgICAgICAgICBjb25zdCB4ID0gcG9pbnRzW2ldO1xuICAgICAgICAgIHBvaW50c1tpXSA9IHRyWSAtIHBvaW50c1tpICsgMV07XG4gICAgICAgICAgcG9pbnRzW2kgKyAxXSA9IHRyWCAtIHg7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIHJvdGF0aW9uXCIpO1xuICAgIH1cbiAgICByZXR1cm4gcG9pbnRzO1xuICB9XG4gICNzZXJpYWxpemVQYXRocyhzLCB0eCwgdHksIHJlY3QpIHtcbiAgICBjb25zdCBwYXRocyA9IFtdO1xuICAgIGNvbnN0IHBhZGRpbmcgPSB0aGlzLnRoaWNrbmVzcyAvIDI7XG4gICAgY29uc3Qgc2hpZnRYID0gcyAqIHR4ICsgcGFkZGluZztcbiAgICBjb25zdCBzaGlmdFkgPSBzICogdHkgKyBwYWRkaW5nO1xuICAgIGZvciAoY29uc3QgYmV6aWVyIG9mIHRoaXMucGF0aHMpIHtcbiAgICAgIGNvbnN0IGJ1ZmZlciA9IFtdO1xuICAgICAgY29uc3QgcG9pbnRzID0gW107XG4gICAgICBmb3IgKGxldCBqID0gMCwgamogPSBiZXppZXIubGVuZ3RoOyBqIDwgamo7IGorKykge1xuICAgICAgICBjb25zdCBbZmlyc3QsIGNvbnRyb2wxLCBjb250cm9sMiwgc2Vjb25kXSA9IGJlemllcltqXTtcbiAgICAgICAgY29uc3QgcDEwID0gcyAqIGZpcnN0WzBdICsgc2hpZnRYO1xuICAgICAgICBjb25zdCBwMTEgPSBzICogZmlyc3RbMV0gKyBzaGlmdFk7XG4gICAgICAgIGNvbnN0IHAyMCA9IHMgKiBjb250cm9sMVswXSArIHNoaWZ0WDtcbiAgICAgICAgY29uc3QgcDIxID0gcyAqIGNvbnRyb2wxWzFdICsgc2hpZnRZO1xuICAgICAgICBjb25zdCBwMzAgPSBzICogY29udHJvbDJbMF0gKyBzaGlmdFg7XG4gICAgICAgIGNvbnN0IHAzMSA9IHMgKiBjb250cm9sMlsxXSArIHNoaWZ0WTtcbiAgICAgICAgY29uc3QgcDQwID0gcyAqIHNlY29uZFswXSArIHNoaWZ0WDtcbiAgICAgICAgY29uc3QgcDQxID0gcyAqIHNlY29uZFsxXSArIHNoaWZ0WTtcbiAgICAgICAgaWYgKGogPT09IDApIHtcbiAgICAgICAgICBidWZmZXIucHVzaChwMTAsIHAxMSk7XG4gICAgICAgICAgcG9pbnRzLnB1c2gocDEwLCBwMTEpO1xuICAgICAgICB9XG4gICAgICAgIGJ1ZmZlci5wdXNoKHAyMCwgcDIxLCBwMzAsIHAzMSwgcDQwLCBwNDEpO1xuICAgICAgICBwb2ludHMucHVzaChwMjAsIHAyMSk7XG4gICAgICAgIGlmIChqID09PSBqaiAtIDEpIHtcbiAgICAgICAgICBwb2ludHMucHVzaChwNDAsIHA0MSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHBhdGhzLnB1c2goe1xuICAgICAgICBiZXppZXI6IElua0VkaXRvci4jdG9QREZDb29yZGluYXRlcyhidWZmZXIsIHJlY3QsIHRoaXMucm90YXRpb24pLFxuICAgICAgICBwb2ludHM6IElua0VkaXRvci4jdG9QREZDb29yZGluYXRlcyhwb2ludHMsIHJlY3QsIHRoaXMucm90YXRpb24pXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHBhdGhzO1xuICB9XG4gICNnZXRCYm94KCkge1xuICAgIGxldCB4TWluID0gSW5maW5pdHk7XG4gICAgbGV0IHhNYXggPSAtSW5maW5pdHk7XG4gICAgbGV0IHlNaW4gPSBJbmZpbml0eTtcbiAgICBsZXQgeU1heCA9IC1JbmZpbml0eTtcbiAgICBmb3IgKGNvbnN0IHBhdGggb2YgdGhpcy5wYXRocykge1xuICAgICAgZm9yIChjb25zdCBbZmlyc3QsIGNvbnRyb2wxLCBjb250cm9sMiwgc2Vjb25kXSBvZiBwYXRoKSB7XG4gICAgICAgIGNvbnN0IGJib3ggPSB1dGlsLlV0aWwuYmV6aWVyQm91bmRpbmdCb3goLi4uZmlyc3QsIC4uLmNvbnRyb2wxLCAuLi5jb250cm9sMiwgLi4uc2Vjb25kKTtcbiAgICAgICAgeE1pbiA9IE1hdGgubWluKHhNaW4sIGJib3hbMF0pO1xuICAgICAgICB5TWluID0gTWF0aC5taW4oeU1pbiwgYmJveFsxXSk7XG4gICAgICAgIHhNYXggPSBNYXRoLm1heCh4TWF4LCBiYm94WzJdKTtcbiAgICAgICAgeU1heCA9IE1hdGgubWF4KHlNYXgsIGJib3hbM10pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gW3hNaW4sIHlNaW4sIHhNYXgsIHlNYXhdO1xuICB9XG4gICNnZXRQYWRkaW5nKCkge1xuICAgIHJldHVybiB0aGlzLiNkaXNhYmxlRWRpdGluZyA/IE1hdGguY2VpbCh0aGlzLnRoaWNrbmVzcyAqIHRoaXMucGFyZW50U2NhbGUpIDogMDtcbiAgfVxuICAjZml0VG9Db250ZW50KGZpcnN0VGltZSA9IGZhbHNlKSB7XG4gICAgaWYgKHRoaXMuaXNFbXB0eSgpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICghdGhpcy4jZGlzYWJsZUVkaXRpbmcpIHtcbiAgICAgIHRoaXMuI3JlZHJhdygpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBiYm94ID0gdGhpcy4jZ2V0QmJveCgpO1xuICAgIGNvbnN0IHBhZGRpbmcgPSB0aGlzLiNnZXRQYWRkaW5nKCk7XG4gICAgdGhpcy4jYmFzZVdpZHRoID0gTWF0aC5tYXgoZWRpdG9yX2VkaXRvci5Bbm5vdGF0aW9uRWRpdG9yLk1JTl9TSVpFLCBiYm94WzJdIC0gYmJveFswXSk7XG4gICAgdGhpcy4jYmFzZUhlaWdodCA9IE1hdGgubWF4KGVkaXRvcl9lZGl0b3IuQW5ub3RhdGlvbkVkaXRvci5NSU5fU0laRSwgYmJveFszXSAtIGJib3hbMV0pO1xuICAgIGNvbnN0IHdpZHRoID0gTWF0aC5jZWlsKHBhZGRpbmcgKyB0aGlzLiNiYXNlV2lkdGggKiB0aGlzLnNjYWxlRmFjdG9yKTtcbiAgICBjb25zdCBoZWlnaHQgPSBNYXRoLmNlaWwocGFkZGluZyArIHRoaXMuI2Jhc2VIZWlnaHQgKiB0aGlzLnNjYWxlRmFjdG9yKTtcbiAgICBjb25zdCBbcGFyZW50V2lkdGgsIHBhcmVudEhlaWdodF0gPSB0aGlzLnBhcmVudERpbWVuc2lvbnM7XG4gICAgdGhpcy53aWR0aCA9IHdpZHRoIC8gcGFyZW50V2lkdGg7XG4gICAgdGhpcy5oZWlnaHQgPSBoZWlnaHQgLyBwYXJlbnRIZWlnaHQ7XG4gICAgdGhpcy5zZXRBc3BlY3RSYXRpbyh3aWR0aCwgaGVpZ2h0KTtcbiAgICBjb25zdCBwcmV2VHJhbnNsYXRpb25YID0gdGhpcy50cmFuc2xhdGlvblg7XG4gICAgY29uc3QgcHJldlRyYW5zbGF0aW9uWSA9IHRoaXMudHJhbnNsYXRpb25ZO1xuICAgIHRoaXMudHJhbnNsYXRpb25YID0gLWJib3hbMF07XG4gICAgdGhpcy50cmFuc2xhdGlvblkgPSAtYmJveFsxXTtcbiAgICB0aGlzLiNzZXRDYW52YXNEaW1zKCk7XG4gICAgdGhpcy4jcmVkcmF3KCk7XG4gICAgdGhpcy4jcmVhbFdpZHRoID0gd2lkdGg7XG4gICAgdGhpcy4jcmVhbEhlaWdodCA9IGhlaWdodDtcbiAgICB0aGlzLnNldERpbXMod2lkdGgsIGhlaWdodCk7XG4gICAgY29uc3QgdW5zY2FsZWRQYWRkaW5nID0gZmlyc3RUaW1lID8gcGFkZGluZyAvIHRoaXMuc2NhbGVGYWN0b3IgLyAyIDogMDtcbiAgICB0aGlzLnRyYW5zbGF0ZShwcmV2VHJhbnNsYXRpb25YIC0gdGhpcy50cmFuc2xhdGlvblggLSB1bnNjYWxlZFBhZGRpbmcsIHByZXZUcmFuc2xhdGlvblkgLSB0aGlzLnRyYW5zbGF0aW9uWSAtIHVuc2NhbGVkUGFkZGluZyk7XG4gIH1cbiAgc3RhdGljIGRlc2VyaWFsaXplKGRhdGEsIHBhcmVudCwgdWlNYW5hZ2VyKSB7XG4gICAgaWYgKGRhdGEgaW5zdGFuY2VvZiBhbm5vdGF0aW9uX2xheWVyLklua0Fubm90YXRpb25FbGVtZW50KSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgY29uc3QgZWRpdG9yID0gc3VwZXIuZGVzZXJpYWxpemUoZGF0YSwgcGFyZW50LCB1aU1hbmFnZXIpO1xuICAgIGVkaXRvci50aGlja25lc3MgPSBkYXRhLnRoaWNrbmVzcztcbiAgICBlZGl0b3IuY29sb3IgPSB1dGlsLlV0aWwubWFrZUhleENvbG9yKC4uLmRhdGEuY29sb3IpO1xuICAgIGVkaXRvci5vcGFjaXR5ID0gZGF0YS5vcGFjaXR5O1xuICAgIGNvbnN0IFtwYWdlV2lkdGgsIHBhZ2VIZWlnaHRdID0gZWRpdG9yLnBhZ2VEaW1lbnNpb25zO1xuICAgIGNvbnN0IHdpZHRoID0gZWRpdG9yLndpZHRoICogcGFnZVdpZHRoO1xuICAgIGNvbnN0IGhlaWdodCA9IGVkaXRvci5oZWlnaHQgKiBwYWdlSGVpZ2h0O1xuICAgIGNvbnN0IHNjYWxlRmFjdG9yID0gZWRpdG9yLnBhcmVudFNjYWxlO1xuICAgIGNvbnN0IHBhZGRpbmcgPSBkYXRhLnRoaWNrbmVzcyAvIDI7XG4gICAgZWRpdG9yLiNkaXNhYmxlRWRpdGluZyA9IHRydWU7XG4gICAgZWRpdG9yLiNyZWFsV2lkdGggPSBNYXRoLnJvdW5kKHdpZHRoKTtcbiAgICBlZGl0b3IuI3JlYWxIZWlnaHQgPSBNYXRoLnJvdW5kKGhlaWdodCk7XG4gICAgY29uc3Qge1xuICAgICAgcGF0aHMsXG4gICAgICByZWN0LFxuICAgICAgcm90YXRpb25cbiAgICB9ID0gZGF0YTtcbiAgICBmb3IgKGxldCB7XG4gICAgICBiZXppZXJcbiAgICB9IG9mIHBhdGhzKSB7XG4gICAgICBiZXppZXIgPSBJbmtFZGl0b3IuI2Zyb21QREZDb29yZGluYXRlcyhiZXppZXIsIHJlY3QsIHJvdGF0aW9uKTtcbiAgICAgIGNvbnN0IHBhdGggPSBbXTtcbiAgICAgIGVkaXRvci5wYXRocy5wdXNoKHBhdGgpO1xuICAgICAgbGV0IHAwID0gc2NhbGVGYWN0b3IgKiAoYmV6aWVyWzBdIC0gcGFkZGluZyk7XG4gICAgICBsZXQgcDEgPSBzY2FsZUZhY3RvciAqIChiZXppZXJbMV0gLSBwYWRkaW5nKTtcbiAgICAgIGZvciAobGV0IGkgPSAyLCBpaSA9IGJlemllci5sZW5ndGg7IGkgPCBpaTsgaSArPSA2KSB7XG4gICAgICAgIGNvbnN0IHAxMCA9IHNjYWxlRmFjdG9yICogKGJlemllcltpXSAtIHBhZGRpbmcpO1xuICAgICAgICBjb25zdCBwMTEgPSBzY2FsZUZhY3RvciAqIChiZXppZXJbaSArIDFdIC0gcGFkZGluZyk7XG4gICAgICAgIGNvbnN0IHAyMCA9IHNjYWxlRmFjdG9yICogKGJlemllcltpICsgMl0gLSBwYWRkaW5nKTtcbiAgICAgICAgY29uc3QgcDIxID0gc2NhbGVGYWN0b3IgKiAoYmV6aWVyW2kgKyAzXSAtIHBhZGRpbmcpO1xuICAgICAgICBjb25zdCBwMzAgPSBzY2FsZUZhY3RvciAqIChiZXppZXJbaSArIDRdIC0gcGFkZGluZyk7XG4gICAgICAgIGNvbnN0IHAzMSA9IHNjYWxlRmFjdG9yICogKGJlemllcltpICsgNV0gLSBwYWRkaW5nKTtcbiAgICAgICAgcGF0aC5wdXNoKFtbcDAsIHAxXSwgW3AxMCwgcDExXSwgW3AyMCwgcDIxXSwgW3AzMCwgcDMxXV0pO1xuICAgICAgICBwMCA9IHAzMDtcbiAgICAgICAgcDEgPSBwMzE7XG4gICAgICB9XG4gICAgICBjb25zdCBwYXRoMkQgPSB0aGlzLiNidWlsZFBhdGgyRChwYXRoKTtcbiAgICAgIGVkaXRvci5iZXppZXJQYXRoMkQucHVzaChwYXRoMkQpO1xuICAgIH1cbiAgICBjb25zdCBiYm94ID0gZWRpdG9yLiNnZXRCYm94KCk7XG4gICAgZWRpdG9yLiNiYXNlV2lkdGggPSBNYXRoLm1heChlZGl0b3JfZWRpdG9yLkFubm90YXRpb25FZGl0b3IuTUlOX1NJWkUsIGJib3hbMl0gLSBiYm94WzBdKTtcbiAgICBlZGl0b3IuI2Jhc2VIZWlnaHQgPSBNYXRoLm1heChlZGl0b3JfZWRpdG9yLkFubm90YXRpb25FZGl0b3IuTUlOX1NJWkUsIGJib3hbM10gLSBiYm94WzFdKTtcbiAgICBlZGl0b3IuI3NldFNjYWxlRmFjdG9yKHdpZHRoLCBoZWlnaHQpO1xuICAgIHJldHVybiBlZGl0b3I7XG4gIH1cbiAgc2VyaWFsaXplKCkge1xuICAgIGlmICh0aGlzLmlzRW1wdHkoKSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGNvbnN0IHJlY3QgPSB0aGlzLmdldFJlY3QoMCwgMCk7XG4gICAgY29uc3QgY29sb3IgPSBlZGl0b3JfZWRpdG9yLkFubm90YXRpb25FZGl0b3IuX2NvbG9yTWFuYWdlci5jb252ZXJ0KHRoaXMuY3R4LnN0cm9rZVN0eWxlKTtcbiAgICByZXR1cm4ge1xuICAgICAgYW5ub3RhdGlvblR5cGU6IHV0aWwuQW5ub3RhdGlvbkVkaXRvclR5cGUuSU5LLFxuICAgICAgY29sb3IsXG4gICAgICB0aGlja25lc3M6IHRoaXMudGhpY2tuZXNzLFxuICAgICAgb3BhY2l0eTogdGhpcy5vcGFjaXR5LFxuICAgICAgcGF0aHM6IHRoaXMuI3NlcmlhbGl6ZVBhdGhzKHRoaXMuc2NhbGVGYWN0b3IgLyB0aGlzLnBhcmVudFNjYWxlLCB0aGlzLnRyYW5zbGF0aW9uWCwgdGhpcy50cmFuc2xhdGlvblksIHJlY3QpLFxuICAgICAgcGFnZUluZGV4OiB0aGlzLnBhZ2VJbmRleCxcbiAgICAgIHJlY3QsXG4gICAgICByb3RhdGlvbjogdGhpcy5yb3RhdGlvbixcbiAgICAgIHN0cnVjdFRyZWVQYXJlbnRJZDogdGhpcy5fc3RydWN0VHJlZVBhcmVudElkXG4gICAgfTtcbiAgfVxufVxuXG47Ly8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvZGlzcGxheS9lZGl0b3Ivc3RhbXAuanNcblxuXG5cblxuY2xhc3MgU3RhbXBFZGl0b3IgZXh0ZW5kcyBlZGl0b3JfZWRpdG9yLkFubm90YXRpb25FZGl0b3Ige1xuICAjYml0bWFwID0gbnVsbDtcbiAgI2JpdG1hcElkID0gbnVsbDtcbiAgI2JpdG1hcFByb21pc2UgPSBudWxsO1xuICAjYml0bWFwVXJsID0gbnVsbDtcbiAgI2JpdG1hcEZpbGUgPSBudWxsO1xuICAjYml0bWFwRmlsZU5hbWUgPSBcIlwiO1xuICAjY2FudmFzID0gbnVsbDtcbiAgI29ic2VydmVyID0gbnVsbDtcbiAgI3Jlc2l6ZVRpbWVvdXRJZCA9IG51bGw7XG4gICNpc1N2ZyA9IGZhbHNlO1xuICAjaGFzQmVlbkFkZGVkSW5VbmRvU3RhY2sgPSBmYWxzZTtcbiAgc3RhdGljIF90eXBlID0gXCJzdGFtcFwiO1xuICBzdGF0aWMgX2VkaXRvclR5cGUgPSB1dGlsLkFubm90YXRpb25FZGl0b3JUeXBlLlNUQU1QO1xuICBjb25zdHJ1Y3RvcihwYXJhbXMpIHtcbiAgICBzdXBlcih7XG4gICAgICAuLi5wYXJhbXMsXG4gICAgICBuYW1lOiBcInN0YW1wRWRpdG9yXCJcbiAgICB9KTtcbiAgICB0aGlzLiNiaXRtYXBVcmwgPSBwYXJhbXMuYml0bWFwVXJsO1xuICAgIHRoaXMuI2JpdG1hcEZpbGUgPSBwYXJhbXMuYml0bWFwRmlsZTtcbiAgfVxuICBzdGF0aWMgaW5pdGlhbGl6ZShsMTBuKSB7XG4gICAgZWRpdG9yX2VkaXRvci5Bbm5vdGF0aW9uRWRpdG9yLmluaXRpYWxpemUobDEwbik7XG4gIH1cbiAgc3RhdGljIGdldCBzdXBwb3J0ZWRUeXBlcygpIHtcbiAgICBjb25zdCB0eXBlcyA9IFtcImFwbmdcIiwgXCJhdmlmXCIsIFwiYm1wXCIsIFwiZ2lmXCIsIFwianBlZ1wiLCBcInBuZ1wiLCBcInN2Zyt4bWxcIiwgXCJ3ZWJwXCIsIFwieC1pY29uXCJdO1xuICAgIHJldHVybiAoMCx1dGlsLnNoYWRvdykodGhpcywgXCJzdXBwb3J0ZWRUeXBlc1wiLCB0eXBlcy5tYXAodHlwZSA9PiBgaW1hZ2UvJHt0eXBlfWApKTtcbiAgfVxuICBzdGF0aWMgZ2V0IHN1cHBvcnRlZFR5cGVzU3RyKCkge1xuICAgIHJldHVybiAoMCx1dGlsLnNoYWRvdykodGhpcywgXCJzdXBwb3J0ZWRUeXBlc1N0clwiLCB0aGlzLnN1cHBvcnRlZFR5cGVzLmpvaW4oXCIsXCIpKTtcbiAgfVxuICBzdGF0aWMgaXNIYW5kbGluZ01pbWVGb3JQYXN0aW5nKG1pbWUpIHtcbiAgICByZXR1cm4gdGhpcy5zdXBwb3J0ZWRUeXBlcy5pbmNsdWRlcyhtaW1lKTtcbiAgfVxuICBzdGF0aWMgcGFzdGUoaXRlbSwgcGFyZW50KSB7XG4gICAgcGFyZW50LnBhc3RlRWRpdG9yKHV0aWwuQW5ub3RhdGlvbkVkaXRvclR5cGUuU1RBTVAsIHtcbiAgICAgIGJpdG1hcEZpbGU6IGl0ZW0uZ2V0QXNGaWxlKClcbiAgICB9KTtcbiAgfVxuICAjZ2V0Qml0bWFwRmV0Y2hlZChkYXRhLCBmcm9tSWQgPSBmYWxzZSkge1xuICAgIGlmICghZGF0YSkge1xuICAgICAgdGhpcy5yZW1vdmUoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy4jYml0bWFwID0gZGF0YS5iaXRtYXA7XG4gICAgaWYgKCFmcm9tSWQpIHtcbiAgICAgIHRoaXMuI2JpdG1hcElkID0gZGF0YS5pZDtcbiAgICAgIHRoaXMuI2lzU3ZnID0gZGF0YS5pc1N2ZztcbiAgICB9XG4gICAgaWYgKGRhdGEuZmlsZSkge1xuICAgICAgdGhpcy4jYml0bWFwRmlsZU5hbWUgPSBkYXRhLmZpbGUubmFtZTtcbiAgICB9XG4gICAgdGhpcy4jY3JlYXRlQ2FudmFzKCk7XG4gIH1cbiAgI2dldEJpdG1hcERvbmUoKSB7XG4gICAgdGhpcy4jYml0bWFwUHJvbWlzZSA9IG51bGw7XG4gICAgdGhpcy5fdWlNYW5hZ2VyLmVuYWJsZVdhaXRpbmcoZmFsc2UpO1xuICAgIGlmICh0aGlzLiNjYW52YXMpIHtcbiAgICAgIHRoaXMuZGl2LmZvY3VzKCk7XG4gICAgfVxuICB9XG4gICNnZXRCaXRtYXAoKSB7XG4gICAgaWYgKHRoaXMuI2JpdG1hcElkKSB7XG4gICAgICB0aGlzLl91aU1hbmFnZXIuZW5hYmxlV2FpdGluZyh0cnVlKTtcbiAgICAgIHRoaXMuX3VpTWFuYWdlci5pbWFnZU1hbmFnZXIuZ2V0RnJvbUlkKHRoaXMuI2JpdG1hcElkKS50aGVuKGRhdGEgPT4gdGhpcy4jZ2V0Qml0bWFwRmV0Y2hlZChkYXRhLCB0cnVlKSkuZmluYWxseSgoKSA9PiB0aGlzLiNnZXRCaXRtYXBEb25lKCkpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAodGhpcy4jYml0bWFwVXJsKSB7XG4gICAgICBjb25zdCB1cmwgPSB0aGlzLiNiaXRtYXBVcmw7XG4gICAgICB0aGlzLiNiaXRtYXBVcmwgPSBudWxsO1xuICAgICAgdGhpcy5fdWlNYW5hZ2VyLmVuYWJsZVdhaXRpbmcodHJ1ZSk7XG4gICAgICB0aGlzLiNiaXRtYXBQcm9taXNlID0gdGhpcy5fdWlNYW5hZ2VyLmltYWdlTWFuYWdlci5nZXRGcm9tVXJsKHVybCkudGhlbihkYXRhID0+IHRoaXMuI2dldEJpdG1hcEZldGNoZWQoZGF0YSkpLmZpbmFsbHkoKCkgPT4gdGhpcy4jZ2V0Qml0bWFwRG9uZSgpKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHRoaXMuI2JpdG1hcEZpbGUpIHtcbiAgICAgIGNvbnN0IGZpbGUgPSB0aGlzLiNiaXRtYXBGaWxlO1xuICAgICAgdGhpcy4jYml0bWFwRmlsZSA9IG51bGw7XG4gICAgICB0aGlzLl91aU1hbmFnZXIuZW5hYmxlV2FpdGluZyh0cnVlKTtcbiAgICAgIHRoaXMuI2JpdG1hcFByb21pc2UgPSB0aGlzLl91aU1hbmFnZXIuaW1hZ2VNYW5hZ2VyLmdldEZyb21GaWxlKGZpbGUpLnRoZW4oZGF0YSA9PiB0aGlzLiNnZXRCaXRtYXBGZXRjaGVkKGRhdGEpKS5maW5hbGx5KCgpID0+IHRoaXMuI2dldEJpdG1hcERvbmUoKSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuICAgIGlucHV0LnR5cGUgPSBcImZpbGVcIjtcbiAgICBpbnB1dC5hY2NlcHQgPSBTdGFtcEVkaXRvci5zdXBwb3J0ZWRUeXBlc1N0cjtcbiAgICB0aGlzLiNiaXRtYXBQcm9taXNlID0gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICBpbnB1dC5hZGRFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsIGFzeW5jICgpID0+IHtcbiAgICAgICAgaWYgKCFpbnB1dC5maWxlcyB8fCBpbnB1dC5maWxlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICB0aGlzLnJlbW92ZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuX3VpTWFuYWdlci5lbmFibGVXYWl0aW5nKHRydWUpO1xuICAgICAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCB0aGlzLl91aU1hbmFnZXIuaW1hZ2VNYW5hZ2VyLmdldEZyb21GaWxlKGlucHV0LmZpbGVzWzBdKTtcbiAgICAgICAgICB0aGlzLiNnZXRCaXRtYXBGZXRjaGVkKGRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIHJlc29sdmUoKTtcbiAgICAgIH0pO1xuICAgICAgaW5wdXQuYWRkRXZlbnRMaXN0ZW5lcihcImNhbmNlbFwiLCAoKSA9PiB7XG4gICAgICAgIHRoaXMucmVtb3ZlKCk7XG4gICAgICAgIHJlc29sdmUoKTtcbiAgICAgIH0pO1xuICAgIH0pLmZpbmFsbHkoKCkgPT4gdGhpcy4jZ2V0Qml0bWFwRG9uZSgpKTtcbiAgICBpbnB1dC5jbGljaygpO1xuICB9XG4gIHJlbW92ZSgpIHtcbiAgICBpZiAodGhpcy4jYml0bWFwSWQpIHtcbiAgICAgIHRoaXMuI2JpdG1hcCA9IG51bGw7XG4gICAgICB0aGlzLl91aU1hbmFnZXIuaW1hZ2VNYW5hZ2VyLmRlbGV0ZUlkKHRoaXMuI2JpdG1hcElkKTtcbiAgICAgIHRoaXMuI2NhbnZhcz8ucmVtb3ZlKCk7XG4gICAgICB0aGlzLiNjYW52YXMgPSBudWxsO1xuICAgICAgdGhpcy4jb2JzZXJ2ZXI/LmRpc2Nvbm5lY3QoKTtcbiAgICAgIHRoaXMuI29ic2VydmVyID0gbnVsbDtcbiAgICAgIGlmICh0aGlzLiNyZXNpemVUaW1lb3V0SWQpIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuI3Jlc2l6ZVRpbWVvdXRJZCk7XG4gICAgICAgIHRoaXMuI3Jlc2l6ZVRpbWVvdXRJZCA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuICAgIHN1cGVyLnJlbW92ZSgpO1xuICB9XG4gIHJlYnVpbGQoKSB7XG4gICAgaWYgKCF0aGlzLnBhcmVudCkge1xuICAgICAgaWYgKHRoaXMuI2JpdG1hcElkKSB7XG4gICAgICAgIHRoaXMuI2dldEJpdG1hcCgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBzdXBlci5yZWJ1aWxkKCk7XG4gICAgaWYgKHRoaXMuZGl2ID09PSBudWxsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICh0aGlzLiNiaXRtYXBJZCkge1xuICAgICAgdGhpcy4jZ2V0Qml0bWFwKCk7XG4gICAgfVxuICAgIGlmICghdGhpcy5pc0F0dGFjaGVkVG9ET00pIHtcbiAgICAgIHRoaXMucGFyZW50LmFkZCh0aGlzKTtcbiAgICB9XG4gIH1cbiAgb25jZUFkZGVkKCkge1xuICAgIHRoaXMuX2lzRHJhZ2dhYmxlID0gdHJ1ZTtcbiAgICB0aGlzLmRpdi5mb2N1cygpO1xuICB9XG4gIGlzRW1wdHkoKSB7XG4gICAgcmV0dXJuICEodGhpcy4jYml0bWFwUHJvbWlzZSB8fCB0aGlzLiNiaXRtYXAgfHwgdGhpcy4jYml0bWFwVXJsIHx8IHRoaXMuI2JpdG1hcEZpbGUpO1xuICB9XG4gIGdldCBpc1Jlc2l6YWJsZSgpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZW5kZXIoKSB7XG4gICAgaWYgKHRoaXMuZGl2KSB7XG4gICAgICByZXR1cm4gdGhpcy5kaXY7XG4gICAgfVxuICAgIGxldCBiYXNlWCwgYmFzZVk7XG4gICAgaWYgKHRoaXMud2lkdGgpIHtcbiAgICAgIGJhc2VYID0gdGhpcy54O1xuICAgICAgYmFzZVkgPSB0aGlzLnk7XG4gICAgfVxuICAgIHN1cGVyLnJlbmRlcigpO1xuICAgIHRoaXMuZGl2LmhpZGRlbiA9IHRydWU7XG4gICAgaWYgKHRoaXMuI2JpdG1hcCkge1xuICAgICAgdGhpcy4jY3JlYXRlQ2FudmFzKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuI2dldEJpdG1hcCgpO1xuICAgIH1cbiAgICBpZiAodGhpcy53aWR0aCkge1xuICAgICAgY29uc3QgW3BhcmVudFdpZHRoLCBwYXJlbnRIZWlnaHRdID0gdGhpcy5wYXJlbnREaW1lbnNpb25zO1xuICAgICAgdGhpcy5zZXRBdChiYXNlWCAqIHBhcmVudFdpZHRoLCBiYXNlWSAqIHBhcmVudEhlaWdodCwgdGhpcy53aWR0aCAqIHBhcmVudFdpZHRoLCB0aGlzLmhlaWdodCAqIHBhcmVudEhlaWdodCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmRpdjtcbiAgfVxuICAjY3JlYXRlQ2FudmFzKCkge1xuICAgIGNvbnN0IHtcbiAgICAgIGRpdlxuICAgIH0gPSB0aGlzO1xuICAgIGxldCB7XG4gICAgICB3aWR0aCxcbiAgICAgIGhlaWdodFxuICAgIH0gPSB0aGlzLiNiaXRtYXA7XG4gICAgY29uc3QgW3BhZ2VXaWR0aCwgcGFnZUhlaWdodF0gPSB0aGlzLnBhZ2VEaW1lbnNpb25zO1xuICAgIGNvbnN0IE1BWF9SQVRJTyA9IDAuNzU7XG4gICAgaWYgKHRoaXMud2lkdGgpIHtcbiAgICAgIHdpZHRoID0gdGhpcy53aWR0aCAqIHBhZ2VXaWR0aDtcbiAgICAgIGhlaWdodCA9IHRoaXMuaGVpZ2h0ICogcGFnZUhlaWdodDtcbiAgICB9IGVsc2UgaWYgKHdpZHRoID4gTUFYX1JBVElPICogcGFnZVdpZHRoIHx8IGhlaWdodCA+IE1BWF9SQVRJTyAqIHBhZ2VIZWlnaHQpIHtcbiAgICAgIGNvbnN0IGZhY3RvciA9IE1hdGgubWluKE1BWF9SQVRJTyAqIHBhZ2VXaWR0aCAvIHdpZHRoLCBNQVhfUkFUSU8gKiBwYWdlSGVpZ2h0IC8gaGVpZ2h0KTtcbiAgICAgIHdpZHRoICo9IGZhY3RvcjtcbiAgICAgIGhlaWdodCAqPSBmYWN0b3I7XG4gICAgfVxuICAgIGNvbnN0IFtwYXJlbnRXaWR0aCwgcGFyZW50SGVpZ2h0XSA9IHRoaXMucGFyZW50RGltZW5zaW9ucztcbiAgICB0aGlzLnNldERpbXMod2lkdGggKiBwYXJlbnRXaWR0aCAvIHBhZ2VXaWR0aCwgaGVpZ2h0ICogcGFyZW50SGVpZ2h0IC8gcGFnZUhlaWdodCk7XG4gICAgdGhpcy5fdWlNYW5hZ2VyLmVuYWJsZVdhaXRpbmcoZmFsc2UpO1xuICAgIGNvbnN0IGNhbnZhcyA9IHRoaXMuI2NhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIik7XG4gICAgZGl2LmFwcGVuZChjYW52YXMpO1xuICAgIGRpdi5oaWRkZW4gPSBmYWxzZTtcbiAgICB0aGlzLiNkcmF3Qml0bWFwKHdpZHRoLCBoZWlnaHQpO1xuICAgIHRoaXMuI2NyZWF0ZU9ic2VydmVyKCk7XG4gICAgaWYgKCF0aGlzLiNoYXNCZWVuQWRkZWRJblVuZG9TdGFjaykge1xuICAgICAgdGhpcy5wYXJlbnQuYWRkVW5kb2FibGVFZGl0b3IodGhpcyk7XG4gICAgICB0aGlzLiNoYXNCZWVuQWRkZWRJblVuZG9TdGFjayA9IHRydWU7XG4gICAgfVxuICAgIHRoaXMuX3VpTWFuYWdlci5fZXZlbnRCdXMuZGlzcGF0Y2goXCJyZXBvcnR0ZWxlbWV0cnlcIiwge1xuICAgICAgc291cmNlOiB0aGlzLFxuICAgICAgZGV0YWlsczoge1xuICAgICAgICB0eXBlOiBcImVkaXRpbmdcIixcbiAgICAgICAgc3VidHlwZTogdGhpcy5lZGl0b3JUeXBlLFxuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgYWN0aW9uOiBcImluc2VydGVkX2ltYWdlXCJcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICAgIHRoaXMuYWRkQWx0VGV4dEJ1dHRvbigpO1xuICAgIGlmICh0aGlzLiNiaXRtYXBGaWxlTmFtZSkge1xuICAgICAgY2FudmFzLnNldEF0dHJpYnV0ZShcImFyaWEtbGFiZWxcIiwgdGhpcy4jYml0bWFwRmlsZU5hbWUpO1xuICAgIH1cbiAgfVxuICAjc2V0RGltZW5zaW9ucyh3aWR0aCwgaGVpZ2h0KSB7XG4gICAgY29uc3QgW3BhcmVudFdpZHRoLCBwYXJlbnRIZWlnaHRdID0gdGhpcy5wYXJlbnREaW1lbnNpb25zO1xuICAgIHRoaXMud2lkdGggPSB3aWR0aCAvIHBhcmVudFdpZHRoO1xuICAgIHRoaXMuaGVpZ2h0ID0gaGVpZ2h0IC8gcGFyZW50SGVpZ2h0O1xuICAgIHRoaXMuc2V0RGltcyh3aWR0aCwgaGVpZ2h0KTtcbiAgICBpZiAodGhpcy5faW5pdGlhbE9wdGlvbnM/LmlzQ2VudGVyZWQpIHtcbiAgICAgIHRoaXMuY2VudGVyKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZml4QW5kU2V0UG9zaXRpb24oKTtcbiAgICB9XG4gICAgdGhpcy5faW5pdGlhbE9wdGlvbnMgPSBudWxsO1xuICAgIGlmICh0aGlzLiNyZXNpemVUaW1lb3V0SWQgIT09IG51bGwpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLiNyZXNpemVUaW1lb3V0SWQpO1xuICAgIH1cbiAgICBjb25zdCBUSU1FX1RPX1dBSVQgPSAyMDA7XG4gICAgdGhpcy4jcmVzaXplVGltZW91dElkID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICB0aGlzLiNyZXNpemVUaW1lb3V0SWQgPSBudWxsO1xuICAgICAgdGhpcy4jZHJhd0JpdG1hcCh3aWR0aCwgaGVpZ2h0KTtcbiAgICB9LCBUSU1FX1RPX1dBSVQpO1xuICB9XG4gICNzY2FsZUJpdG1hcCh3aWR0aCwgaGVpZ2h0KSB7XG4gICAgY29uc3Qge1xuICAgICAgd2lkdGg6IGJpdG1hcFdpZHRoLFxuICAgICAgaGVpZ2h0OiBiaXRtYXBIZWlnaHRcbiAgICB9ID0gdGhpcy4jYml0bWFwO1xuICAgIGxldCBuZXdXaWR0aCA9IGJpdG1hcFdpZHRoO1xuICAgIGxldCBuZXdIZWlnaHQgPSBiaXRtYXBIZWlnaHQ7XG4gICAgbGV0IGJpdG1hcCA9IHRoaXMuI2JpdG1hcDtcbiAgICB3aGlsZSAobmV3V2lkdGggPiAyICogd2lkdGggfHwgbmV3SGVpZ2h0ID4gMiAqIGhlaWdodCkge1xuICAgICAgY29uc3QgcHJldldpZHRoID0gbmV3V2lkdGg7XG4gICAgICBjb25zdCBwcmV2SGVpZ2h0ID0gbmV3SGVpZ2h0O1xuICAgICAgaWYgKG5ld1dpZHRoID4gMiAqIHdpZHRoKSB7XG4gICAgICAgIG5ld1dpZHRoID0gbmV3V2lkdGggPj0gMTYzODQgPyBNYXRoLmZsb29yKG5ld1dpZHRoIC8gMikgLSAxIDogTWF0aC5jZWlsKG5ld1dpZHRoIC8gMik7XG4gICAgICB9XG4gICAgICBpZiAobmV3SGVpZ2h0ID4gMiAqIGhlaWdodCkge1xuICAgICAgICBuZXdIZWlnaHQgPSBuZXdIZWlnaHQgPj0gMTYzODQgPyBNYXRoLmZsb29yKG5ld0hlaWdodCAvIDIpIC0gMSA6IE1hdGguY2VpbChuZXdIZWlnaHQgLyAyKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IG9mZnNjcmVlbiA9IG5ldyBPZmZzY3JlZW5DYW52YXMobmV3V2lkdGgsIG5ld0hlaWdodCk7XG4gICAgICBjb25zdCBjdHggPSBvZmZzY3JlZW4uZ2V0Q29udGV4dChcIjJkXCIpO1xuICAgICAgY3R4LmRyYXdJbWFnZShiaXRtYXAsIDAsIDAsIHByZXZXaWR0aCwgcHJldkhlaWdodCwgMCwgMCwgbmV3V2lkdGgsIG5ld0hlaWdodCk7XG4gICAgICBiaXRtYXAgPSBvZmZzY3JlZW4udHJhbnNmZXJUb0ltYWdlQml0bWFwKCk7XG4gICAgfVxuICAgIHJldHVybiBiaXRtYXA7XG4gIH1cbiAgI2RyYXdCaXRtYXAod2lkdGgsIGhlaWdodCkge1xuICAgIHdpZHRoID0gTWF0aC5jZWlsKHdpZHRoKTtcbiAgICBoZWlnaHQgPSBNYXRoLmNlaWwoaGVpZ2h0KTtcbiAgICBjb25zdCBjYW52YXMgPSB0aGlzLiNjYW52YXM7XG4gICAgaWYgKCFjYW52YXMgfHwgY2FudmFzLndpZHRoID09PSB3aWR0aCAmJiBjYW52YXMuaGVpZ2h0ID09PSBoZWlnaHQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY2FudmFzLndpZHRoID0gd2lkdGg7XG4gICAgY2FudmFzLmhlaWdodCA9IGhlaWdodDtcbiAgICBjb25zdCBiaXRtYXAgPSB0aGlzLiNpc1N2ZyA/IHRoaXMuI2JpdG1hcCA6IHRoaXMuI3NjYWxlQml0bWFwKHdpZHRoLCBoZWlnaHQpO1xuICAgIGNvbnN0IGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KFwiMmRcIik7XG4gICAgY3R4LmZpbHRlciA9IHRoaXMuX3VpTWFuYWdlci5oY21GaWx0ZXI7XG4gICAgY3R4LmRyYXdJbWFnZShiaXRtYXAsIDAsIDAsIGJpdG1hcC53aWR0aCwgYml0bWFwLmhlaWdodCwgMCwgMCwgd2lkdGgsIGhlaWdodCk7XG4gIH1cbiAgZ2V0SW1hZ2VGb3JBbHRUZXh0KCkge1xuICAgIHJldHVybiB0aGlzLiNjYW52YXM7XG4gIH1cbiAgI3NlcmlhbGl6ZUJpdG1hcCh0b1VybCkge1xuICAgIGlmICh0b1VybCkge1xuICAgICAgaWYgKHRoaXMuI2lzU3ZnKSB7XG4gICAgICAgIGNvbnN0IHVybCA9IHRoaXMuX3VpTWFuYWdlci5pbWFnZU1hbmFnZXIuZ2V0U3ZnVXJsKHRoaXMuI2JpdG1hcElkKTtcbiAgICAgICAgaWYgKHVybCkge1xuICAgICAgICAgIHJldHVybiB1cmw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGNvbnN0IGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIik7XG4gICAgICAoe1xuICAgICAgICB3aWR0aDogY2FudmFzLndpZHRoLFxuICAgICAgICBoZWlnaHQ6IGNhbnZhcy5oZWlnaHRcbiAgICAgIH0gPSB0aGlzLiNiaXRtYXApO1xuICAgICAgY29uc3QgY3R4ID0gY2FudmFzLmdldENvbnRleHQoXCIyZFwiKTtcbiAgICAgIGN0eC5kcmF3SW1hZ2UodGhpcy4jYml0bWFwLCAwLCAwKTtcbiAgICAgIHJldHVybiBjYW52YXMudG9EYXRhVVJMKCk7XG4gICAgfVxuICAgIGlmICh0aGlzLiNpc1N2Zykge1xuICAgICAgY29uc3QgW3BhZ2VXaWR0aCwgcGFnZUhlaWdodF0gPSB0aGlzLnBhZ2VEaW1lbnNpb25zO1xuICAgICAgY29uc3Qgd2lkdGggPSBNYXRoLnJvdW5kKHRoaXMud2lkdGggKiBwYWdlV2lkdGggKiBkaXNwbGF5X3V0aWxzLlBpeGVsc1BlckluY2guUERGX1RPX0NTU19VTklUUyk7XG4gICAgICBjb25zdCBoZWlnaHQgPSBNYXRoLnJvdW5kKHRoaXMuaGVpZ2h0ICogcGFnZUhlaWdodCAqIGRpc3BsYXlfdXRpbHMuUGl4ZWxzUGVySW5jaC5QREZfVE9fQ1NTX1VOSVRTKTtcbiAgICAgIGNvbnN0IG9mZnNjcmVlbiA9IG5ldyBPZmZzY3JlZW5DYW52YXMod2lkdGgsIGhlaWdodCk7XG4gICAgICBjb25zdCBjdHggPSBvZmZzY3JlZW4uZ2V0Q29udGV4dChcIjJkXCIpO1xuICAgICAgY3R4LmRyYXdJbWFnZSh0aGlzLiNiaXRtYXAsIDAsIDAsIHRoaXMuI2JpdG1hcC53aWR0aCwgdGhpcy4jYml0bWFwLmhlaWdodCwgMCwgMCwgd2lkdGgsIGhlaWdodCk7XG4gICAgICByZXR1cm4gb2Zmc2NyZWVuLnRyYW5zZmVyVG9JbWFnZUJpdG1hcCgpO1xuICAgIH1cbiAgICByZXR1cm4gc3RydWN0dXJlZENsb25lKHRoaXMuI2JpdG1hcCk7XG4gIH1cbiAgI2NyZWF0ZU9ic2VydmVyKCkge1xuICAgIHRoaXMuI29ic2VydmVyID0gbmV3IFJlc2l6ZU9ic2VydmVyKGVudHJpZXMgPT4ge1xuICAgICAgY29uc3QgcmVjdCA9IGVudHJpZXNbMF0uY29udGVudFJlY3Q7XG4gICAgICBpZiAocmVjdC53aWR0aCAmJiByZWN0LmhlaWdodCkge1xuICAgICAgICB0aGlzLiNzZXREaW1lbnNpb25zKHJlY3Qud2lkdGgsIHJlY3QuaGVpZ2h0KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB0aGlzLiNvYnNlcnZlci5vYnNlcnZlKHRoaXMuZGl2KTtcbiAgfVxuICBzdGF0aWMgZGVzZXJpYWxpemUoZGF0YSwgcGFyZW50LCB1aU1hbmFnZXIpIHtcbiAgICBpZiAoZGF0YSBpbnN0YW5jZW9mIGFubm90YXRpb25fbGF5ZXIuU3RhbXBBbm5vdGF0aW9uRWxlbWVudCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGNvbnN0IGVkaXRvciA9IHN1cGVyLmRlc2VyaWFsaXplKGRhdGEsIHBhcmVudCwgdWlNYW5hZ2VyKTtcbiAgICBjb25zdCB7XG4gICAgICByZWN0LFxuICAgICAgYml0bWFwVXJsLFxuICAgICAgYml0bWFwSWQsXG4gICAgICBpc1N2ZyxcbiAgICAgIGFjY2Vzc2liaWxpdHlEYXRhXG4gICAgfSA9IGRhdGE7XG4gICAgaWYgKGJpdG1hcElkICYmIHVpTWFuYWdlci5pbWFnZU1hbmFnZXIuaXNWYWxpZElkKGJpdG1hcElkKSkge1xuICAgICAgZWRpdG9yLiNiaXRtYXBJZCA9IGJpdG1hcElkO1xuICAgIH0gZWxzZSB7XG4gICAgICBlZGl0b3IuI2JpdG1hcFVybCA9IGJpdG1hcFVybDtcbiAgICB9XG4gICAgZWRpdG9yLiNpc1N2ZyA9IGlzU3ZnO1xuICAgIGNvbnN0IFtwYXJlbnRXaWR0aCwgcGFyZW50SGVpZ2h0XSA9IGVkaXRvci5wYWdlRGltZW5zaW9ucztcbiAgICBlZGl0b3Iud2lkdGggPSAocmVjdFsyXSAtIHJlY3RbMF0pIC8gcGFyZW50V2lkdGg7XG4gICAgZWRpdG9yLmhlaWdodCA9IChyZWN0WzNdIC0gcmVjdFsxXSkgLyBwYXJlbnRIZWlnaHQ7XG4gICAgaWYgKGFjY2Vzc2liaWxpdHlEYXRhKSB7XG4gICAgICBlZGl0b3IuYWx0VGV4dERhdGEgPSBhY2Nlc3NpYmlsaXR5RGF0YTtcbiAgICB9XG4gICAgcmV0dXJuIGVkaXRvcjtcbiAgfVxuICBzZXJpYWxpemUoaXNGb3JDb3B5aW5nID0gZmFsc2UsIGNvbnRleHQgPSBudWxsKSB7XG4gICAgaWYgKHRoaXMuaXNFbXB0eSgpKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgY29uc3Qgc2VyaWFsaXplZCA9IHtcbiAgICAgIGFubm90YXRpb25UeXBlOiB1dGlsLkFubm90YXRpb25FZGl0b3JUeXBlLlNUQU1QLFxuICAgICAgYml0bWFwSWQ6IHRoaXMuI2JpdG1hcElkLFxuICAgICAgcGFnZUluZGV4OiB0aGlzLnBhZ2VJbmRleCxcbiAgICAgIHJlY3Q6IHRoaXMuZ2V0UmVjdCgwLCAwKSxcbiAgICAgIHJvdGF0aW9uOiB0aGlzLnJvdGF0aW9uLFxuICAgICAgaXNTdmc6IHRoaXMuI2lzU3ZnLFxuICAgICAgc3RydWN0VHJlZVBhcmVudElkOiB0aGlzLl9zdHJ1Y3RUcmVlUGFyZW50SWRcbiAgICB9O1xuICAgIGlmIChpc0ZvckNvcHlpbmcpIHtcbiAgICAgIHNlcmlhbGl6ZWQuYml0bWFwVXJsID0gdGhpcy4jc2VyaWFsaXplQml0bWFwKHRydWUpO1xuICAgICAgc2VyaWFsaXplZC5hY2Nlc3NpYmlsaXR5RGF0YSA9IHRoaXMuYWx0VGV4dERhdGE7XG4gICAgICByZXR1cm4gc2VyaWFsaXplZDtcbiAgICB9XG4gICAgY29uc3Qge1xuICAgICAgZGVjb3JhdGl2ZSxcbiAgICAgIGFsdFRleHRcbiAgICB9ID0gdGhpcy5hbHRUZXh0RGF0YTtcbiAgICBpZiAoIWRlY29yYXRpdmUgJiYgYWx0VGV4dCkge1xuICAgICAgc2VyaWFsaXplZC5hY2Nlc3NpYmlsaXR5RGF0YSA9IHtcbiAgICAgICAgdHlwZTogXCJGaWd1cmVcIixcbiAgICAgICAgYWx0OiBhbHRUZXh0XG4gICAgICB9O1xuICAgIH1cbiAgICBpZiAoY29udGV4dCA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIHNlcmlhbGl6ZWQ7XG4gICAgfVxuICAgIGNvbnRleHQuc3RhbXBzIHx8PSBuZXcgTWFwKCk7XG4gICAgY29uc3QgYXJlYSA9IHRoaXMuI2lzU3ZnID8gKHNlcmlhbGl6ZWQucmVjdFsyXSAtIHNlcmlhbGl6ZWQucmVjdFswXSkgKiAoc2VyaWFsaXplZC5yZWN0WzNdIC0gc2VyaWFsaXplZC5yZWN0WzFdKSA6IG51bGw7XG4gICAgaWYgKCFjb250ZXh0LnN0YW1wcy5oYXModGhpcy4jYml0bWFwSWQpKSB7XG4gICAgICBjb250ZXh0LnN0YW1wcy5zZXQodGhpcy4jYml0bWFwSWQsIHtcbiAgICAgICAgYXJlYSxcbiAgICAgICAgc2VyaWFsaXplZFxuICAgICAgfSk7XG4gICAgICBzZXJpYWxpemVkLmJpdG1hcCA9IHRoaXMuI3NlcmlhbGl6ZUJpdG1hcChmYWxzZSk7XG4gICAgfSBlbHNlIGlmICh0aGlzLiNpc1N2Zykge1xuICAgICAgY29uc3QgcHJldkRhdGEgPSBjb250ZXh0LnN0YW1wcy5nZXQodGhpcy4jYml0bWFwSWQpO1xuICAgICAgaWYgKGFyZWEgPiBwcmV2RGF0YS5hcmVhKSB7XG4gICAgICAgIHByZXZEYXRhLmFyZWEgPSBhcmVhO1xuICAgICAgICBwcmV2RGF0YS5zZXJpYWxpemVkLmJpdG1hcC5jbG9zZSgpO1xuICAgICAgICBwcmV2RGF0YS5zZXJpYWxpemVkLmJpdG1hcCA9IHRoaXMuI3NlcmlhbGl6ZUJpdG1hcChmYWxzZSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzZXJpYWxpemVkO1xuICB9XG59XG5cbjsvLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9kaXNwbGF5L2VkaXRvci9hbm5vdGF0aW9uX2VkaXRvcl9sYXllci5qc1xuXG5cblxuXG5cblxuXG5jbGFzcyBBbm5vdGF0aW9uRWRpdG9yTGF5ZXIge1xuICAjYWNjZXNzaWJpbGl0eU1hbmFnZXI7XG4gICNhbGxvd0NsaWNrID0gZmFsc2U7XG4gICNhbm5vdGF0aW9uTGF5ZXIgPSBudWxsO1xuICAjYm91bmRQb2ludGVydXAgPSB0aGlzLnBvaW50ZXJ1cC5iaW5kKHRoaXMpO1xuICAjYm91bmRQb2ludGVyVXBBZnRlclNlbGVjdGlvbiA9IHRoaXMucG9pbnRlclVwQWZ0ZXJTZWxlY3Rpb24uYmluZCh0aGlzKTtcbiAgI2JvdW5kUG9pbnRlcmRvd24gPSB0aGlzLnBvaW50ZXJkb3duLmJpbmQodGhpcyk7XG4gICNlZGl0b3JGb2N1c1RpbWVvdXRJZCA9IG51bGw7XG4gICNib3VuZFNlbGVjdGlvblN0YXJ0ID0gdGhpcy5zZWxlY3Rpb25TdGFydC5iaW5kKHRoaXMpO1xuICAjZWRpdG9ycyA9IG5ldyBNYXAoKTtcbiAgI2hhZFBvaW50ZXJEb3duID0gZmFsc2U7XG4gICNpc0NsZWFuaW5nVXAgPSBmYWxzZTtcbiAgI2lzRGlzYWJsaW5nID0gZmFsc2U7XG4gICN0ZXh0TGF5ZXIgPSBudWxsO1xuICAjdWlNYW5hZ2VyO1xuICBzdGF0aWMgX2luaXRpYWxpemVkID0gZmFsc2U7XG4gIHN0YXRpYyAjZWRpdG9yVHlwZXMgPSBuZXcgTWFwKFtGcmVlVGV4dEVkaXRvciwgSW5rRWRpdG9yLCBTdGFtcEVkaXRvciwgSGlnaGxpZ2h0RWRpdG9yXS5tYXAodHlwZSA9PiBbdHlwZS5fZWRpdG9yVHlwZSwgdHlwZV0pKTtcbiAgY29uc3RydWN0b3Ioe1xuICAgIHVpTWFuYWdlcixcbiAgICBwYWdlSW5kZXgsXG4gICAgZGl2LFxuICAgIGFjY2Vzc2liaWxpdHlNYW5hZ2VyLFxuICAgIGFubm90YXRpb25MYXllcixcbiAgICBkcmF3TGF5ZXIsXG4gICAgdGV4dExheWVyLFxuICAgIHZpZXdwb3J0LFxuICAgIGwxMG5cbiAgfSkge1xuICAgIGNvbnN0IGVkaXRvclR5cGVzID0gWy4uLkFubm90YXRpb25FZGl0b3JMYXllci4jZWRpdG9yVHlwZXMudmFsdWVzKCldO1xuICAgIGlmICghQW5ub3RhdGlvbkVkaXRvckxheWVyLl9pbml0aWFsaXplZCkge1xuICAgICAgQW5ub3RhdGlvbkVkaXRvckxheWVyLl9pbml0aWFsaXplZCA9IHRydWU7XG4gICAgICBmb3IgKGNvbnN0IGVkaXRvclR5cGUgb2YgZWRpdG9yVHlwZXMpIHtcbiAgICAgICAgZWRpdG9yVHlwZS5pbml0aWFsaXplKGwxMG4pO1xuICAgICAgfVxuICAgIH1cbiAgICB1aU1hbmFnZXIucmVnaXN0ZXJFZGl0b3JUeXBlcyhlZGl0b3JUeXBlcyk7XG4gICAgdGhpcy4jdWlNYW5hZ2VyID0gdWlNYW5hZ2VyO1xuICAgIHRoaXMucGFnZUluZGV4ID0gcGFnZUluZGV4O1xuICAgIHRoaXMuZGl2ID0gZGl2O1xuICAgIHRoaXMuI2FjY2Vzc2liaWxpdHlNYW5hZ2VyID0gYWNjZXNzaWJpbGl0eU1hbmFnZXI7XG4gICAgdGhpcy4jYW5ub3RhdGlvbkxheWVyID0gYW5ub3RhdGlvbkxheWVyO1xuICAgIHRoaXMudmlld3BvcnQgPSB2aWV3cG9ydDtcbiAgICB0aGlzLiN0ZXh0TGF5ZXIgPSB0ZXh0TGF5ZXI7XG4gICAgdGhpcy5kcmF3TGF5ZXIgPSBkcmF3TGF5ZXI7XG4gICAgdGhpcy4jdWlNYW5hZ2VyLmFkZExheWVyKHRoaXMpO1xuICB9XG4gIGdldCBpc0VtcHR5KCkge1xuICAgIHJldHVybiB0aGlzLiNlZGl0b3JzLnNpemUgPT09IDA7XG4gIH1cbiAgdXBkYXRlVG9vbGJhcihtb2RlKSB7XG4gICAgdGhpcy4jdWlNYW5hZ2VyLnVwZGF0ZVRvb2xiYXIobW9kZSk7XG4gIH1cbiAgdXBkYXRlTW9kZShtb2RlID0gdGhpcy4jdWlNYW5hZ2VyLmdldE1vZGUoKSkge1xuICAgIHRoaXMuI2NsZWFudXAoKTtcbiAgICBzd2l0Y2ggKG1vZGUpIHtcbiAgICAgIGNhc2UgdXRpbC5Bbm5vdGF0aW9uRWRpdG9yVHlwZS5OT05FOlxuICAgICAgICB0aGlzLmRpc2FibGVUZXh0U2VsZWN0aW9uKCk7XG4gICAgICAgIHRoaXMudG9nZ2xlUG9pbnRlckV2ZW50cyhmYWxzZSk7XG4gICAgICAgIHRoaXMuZGlzYWJsZUNsaWNrKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSB1dGlsLkFubm90YXRpb25FZGl0b3JUeXBlLklOSzpcbiAgICAgICAgdGhpcy5hZGRJbmtFZGl0b3JJZk5lZWRlZChmYWxzZSk7XG4gICAgICAgIHRoaXMuZGlzYWJsZVRleHRTZWxlY3Rpb24oKTtcbiAgICAgICAgdGhpcy50b2dnbGVQb2ludGVyRXZlbnRzKHRydWUpO1xuICAgICAgICB0aGlzLmRpc2FibGVDbGljaygpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgdXRpbC5Bbm5vdGF0aW9uRWRpdG9yVHlwZS5ISUdITElHSFQ6XG4gICAgICAgIHRoaXMuZW5hYmxlVGV4dFNlbGVjdGlvbigpO1xuICAgICAgICB0aGlzLnRvZ2dsZVBvaW50ZXJFdmVudHMoZmFsc2UpO1xuICAgICAgICB0aGlzLmRpc2FibGVDbGljaygpO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRoaXMuZGlzYWJsZVRleHRTZWxlY3Rpb24oKTtcbiAgICAgICAgdGhpcy50b2dnbGVQb2ludGVyRXZlbnRzKHRydWUpO1xuICAgICAgICB0aGlzLmVuYWJsZUNsaWNrKCk7XG4gICAgfVxuICAgIGlmIChtb2RlICE9PSB1dGlsLkFubm90YXRpb25FZGl0b3JUeXBlLk5PTkUpIHtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgY2xhc3NMaXN0XG4gICAgICB9ID0gdGhpcy5kaXY7XG4gICAgICBmb3IgKGNvbnN0IGVkaXRvclR5cGUgb2YgQW5ub3RhdGlvbkVkaXRvckxheWVyLiNlZGl0b3JUeXBlcy52YWx1ZXMoKSkge1xuICAgICAgICBjbGFzc0xpc3QudG9nZ2xlKGAke2VkaXRvclR5cGUuX3R5cGV9RWRpdGluZ2AsIG1vZGUgPT09IGVkaXRvclR5cGUuX2VkaXRvclR5cGUpO1xuICAgICAgfVxuICAgICAgdGhpcy5kaXYuaGlkZGVuID0gZmFsc2U7XG4gICAgfVxuICB9XG4gIGFkZElua0VkaXRvcklmTmVlZGVkKGlzQ29tbWl0dGluZykge1xuICAgIGlmICh0aGlzLiN1aU1hbmFnZXIuZ2V0TW9kZSgpICE9PSB1dGlsLkFubm90YXRpb25FZGl0b3JUeXBlLklOSykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoIWlzQ29tbWl0dGluZykge1xuICAgICAgZm9yIChjb25zdCBlZGl0b3Igb2YgdGhpcy4jZWRpdG9ycy52YWx1ZXMoKSkge1xuICAgICAgICBpZiAoZWRpdG9yLmlzRW1wdHkoKSkge1xuICAgICAgICAgIGVkaXRvci5zZXRJbkJhY2tncm91bmQoKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgZWRpdG9yID0gdGhpcy4jY3JlYXRlQW5kQWRkTmV3RWRpdG9yKHtcbiAgICAgIG9mZnNldFg6IDAsXG4gICAgICBvZmZzZXRZOiAwXG4gICAgfSwgZmFsc2UpO1xuICAgIGVkaXRvci5zZXRJbkJhY2tncm91bmQoKTtcbiAgfVxuICBzZXRFZGl0aW5nU3RhdGUoaXNFZGl0aW5nKSB7XG4gICAgdGhpcy4jdWlNYW5hZ2VyLnNldEVkaXRpbmdTdGF0ZShpc0VkaXRpbmcpO1xuICB9XG4gIGFkZENvbW1hbmRzKHBhcmFtcykge1xuICAgIHRoaXMuI3VpTWFuYWdlci5hZGRDb21tYW5kcyhwYXJhbXMpO1xuICB9XG4gIHRvZ2dsZVBvaW50ZXJFdmVudHMoZW5hYmxlZCA9IGZhbHNlKSB7XG4gICAgdGhpcy5kaXYuY2xhc3NMaXN0LnRvZ2dsZShcImRpc2FibGVkXCIsICFlbmFibGVkKTtcbiAgfVxuICBlbmFibGUoKSB7XG4gICAgdGhpcy50b2dnbGVQb2ludGVyRXZlbnRzKHRydWUpO1xuICAgIGNvbnN0IGFubm90YXRpb25FbGVtZW50SWRzID0gbmV3IFNldCgpO1xuICAgIGZvciAoY29uc3QgZWRpdG9yIG9mIHRoaXMuI2VkaXRvcnMudmFsdWVzKCkpIHtcbiAgICAgIGVkaXRvci5lbmFibGVFZGl0aW5nKCk7XG4gICAgICBpZiAoZWRpdG9yLmFubm90YXRpb25FbGVtZW50SWQpIHtcbiAgICAgICAgYW5ub3RhdGlvbkVsZW1lbnRJZHMuYWRkKGVkaXRvci5hbm5vdGF0aW9uRWxlbWVudElkKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCF0aGlzLiNhbm5vdGF0aW9uTGF5ZXIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgZWRpdGFibGVzID0gdGhpcy4jYW5ub3RhdGlvbkxheWVyLmdldEVkaXRhYmxlQW5ub3RhdGlvbnMoKTtcbiAgICBmb3IgKGNvbnN0IGVkaXRhYmxlIG9mIGVkaXRhYmxlcykge1xuICAgICAgZWRpdGFibGUuaGlkZSgpO1xuICAgICAgaWYgKHRoaXMuI3VpTWFuYWdlci5pc0RlbGV0ZWRBbm5vdGF0aW9uRWxlbWVudChlZGl0YWJsZS5kYXRhLmlkKSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmIChhbm5vdGF0aW9uRWxlbWVudElkcy5oYXMoZWRpdGFibGUuZGF0YS5pZCkpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBjb25zdCBlZGl0b3IgPSB0aGlzLmRlc2VyaWFsaXplKGVkaXRhYmxlKTtcbiAgICAgIGlmICghZWRpdG9yKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgdGhpcy5hZGRPclJlYnVpbGQoZWRpdG9yKTtcbiAgICAgIGVkaXRvci5lbmFibGVFZGl0aW5nKCk7XG4gICAgfVxuICB9XG4gIGRpc2FibGUoKSB7XG4gICAgdGhpcy4jaXNEaXNhYmxpbmcgPSB0cnVlO1xuICAgIHRoaXMudG9nZ2xlUG9pbnRlckV2ZW50cyhmYWxzZSk7XG4gICAgY29uc3QgaGlkZGVuQW5ub3RhdGlvbklkcyA9IG5ldyBTZXQoKTtcbiAgICBmb3IgKGNvbnN0IGVkaXRvciBvZiB0aGlzLiNlZGl0b3JzLnZhbHVlcygpKSB7XG4gICAgICBlZGl0b3IuZGlzYWJsZUVkaXRpbmcoKTtcbiAgICAgIGlmICghZWRpdG9yLmFubm90YXRpb25FbGVtZW50SWQgfHwgZWRpdG9yLnNlcmlhbGl6ZSgpICE9PSBudWxsKSB7XG4gICAgICAgIGhpZGRlbkFubm90YXRpb25JZHMuYWRkKGVkaXRvci5hbm5vdGF0aW9uRWxlbWVudElkKTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICB0aGlzLmdldEVkaXRhYmxlQW5ub3RhdGlvbihlZGl0b3IuYW5ub3RhdGlvbkVsZW1lbnRJZCk/LnNob3coKTtcbiAgICAgIGVkaXRvci5yZW1vdmUoKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuI2Fubm90YXRpb25MYXllcikge1xuICAgICAgY29uc3QgZWRpdGFibGVzID0gdGhpcy4jYW5ub3RhdGlvbkxheWVyLmdldEVkaXRhYmxlQW5ub3RhdGlvbnMoKTtcbiAgICAgIGZvciAoY29uc3QgZWRpdGFibGUgb2YgZWRpdGFibGVzKSB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICBpZFxuICAgICAgICB9ID0gZWRpdGFibGUuZGF0YTtcbiAgICAgICAgaWYgKGhpZGRlbkFubm90YXRpb25JZHMuaGFzKGlkKSB8fCB0aGlzLiN1aU1hbmFnZXIuaXNEZWxldGVkQW5ub3RhdGlvbkVsZW1lbnQoaWQpKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgZWRpdGFibGUuc2hvdygpO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLiNjbGVhbnVwKCk7XG4gICAgaWYgKHRoaXMuaXNFbXB0eSkge1xuICAgICAgdGhpcy5kaXYuaGlkZGVuID0gdHJ1ZTtcbiAgICB9XG4gICAgY29uc3Qge1xuICAgICAgY2xhc3NMaXN0XG4gICAgfSA9IHRoaXMuZGl2O1xuICAgIGZvciAoY29uc3QgZWRpdG9yVHlwZSBvZiBBbm5vdGF0aW9uRWRpdG9yTGF5ZXIuI2VkaXRvclR5cGVzLnZhbHVlcygpKSB7XG4gICAgICBjbGFzc0xpc3QucmVtb3ZlKGAke2VkaXRvclR5cGUuX3R5cGV9RWRpdGluZ2ApO1xuICAgIH1cbiAgICB0aGlzLmRpc2FibGVUZXh0U2VsZWN0aW9uKCk7XG4gICAgdGhpcy4jaXNEaXNhYmxpbmcgPSBmYWxzZTtcbiAgfVxuICBnZXRFZGl0YWJsZUFubm90YXRpb24oaWQpIHtcbiAgICByZXR1cm4gdGhpcy4jYW5ub3RhdGlvbkxheWVyPy5nZXRFZGl0YWJsZUFubm90YXRpb24oaWQpIHx8IG51bGw7XG4gIH1cbiAgc2V0QWN0aXZlRWRpdG9yKGVkaXRvcikge1xuICAgIGNvbnN0IGN1cnJlbnRBY3RpdmUgPSB0aGlzLiN1aU1hbmFnZXIuZ2V0QWN0aXZlKCk7XG4gICAgaWYgKGN1cnJlbnRBY3RpdmUgPT09IGVkaXRvcikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLiN1aU1hbmFnZXIuc2V0QWN0aXZlRWRpdG9yKGVkaXRvcik7XG4gIH1cbiAgZW5hYmxlVGV4dFNlbGVjdGlvbigpIHtcbiAgICBpZiAodGhpcy4jdGV4dExheWVyPy5kaXYpIHtcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJzZWxlY3RzdGFydFwiLCB0aGlzLiNib3VuZFNlbGVjdGlvblN0YXJ0KTtcbiAgICB9XG4gIH1cbiAgZGlzYWJsZVRleHRTZWxlY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMuI3RleHRMYXllcj8uZGl2KSB7XG4gICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwic2VsZWN0c3RhcnRcIiwgdGhpcy4jYm91bmRTZWxlY3Rpb25TdGFydCk7XG4gICAgfVxuICB9XG4gIGVuYWJsZUNsaWNrKCkge1xuICAgIHRoaXMuZGl2LmFkZEV2ZW50TGlzdGVuZXIoXCJwb2ludGVyZG93blwiLCB0aGlzLiNib3VuZFBvaW50ZXJkb3duKTtcbiAgICB0aGlzLmRpdi5hZGRFdmVudExpc3RlbmVyKFwicG9pbnRlcnVwXCIsIHRoaXMuI2JvdW5kUG9pbnRlcnVwKTtcbiAgfVxuICBkaXNhYmxlQ2xpY2soKSB7XG4gICAgdGhpcy5kaXYucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInBvaW50ZXJkb3duXCIsIHRoaXMuI2JvdW5kUG9pbnRlcmRvd24pO1xuICAgIHRoaXMuZGl2LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJwb2ludGVydXBcIiwgdGhpcy4jYm91bmRQb2ludGVydXApO1xuICB9XG4gIGF0dGFjaChlZGl0b3IpIHtcbiAgICB0aGlzLiNlZGl0b3JzLnNldChlZGl0b3IuaWQsIGVkaXRvcik7XG4gICAgY29uc3Qge1xuICAgICAgYW5ub3RhdGlvbkVsZW1lbnRJZFxuICAgIH0gPSBlZGl0b3I7XG4gICAgaWYgKGFubm90YXRpb25FbGVtZW50SWQgJiYgdGhpcy4jdWlNYW5hZ2VyLmlzRGVsZXRlZEFubm90YXRpb25FbGVtZW50KGFubm90YXRpb25FbGVtZW50SWQpKSB7XG4gICAgICB0aGlzLiN1aU1hbmFnZXIucmVtb3ZlRGVsZXRlZEFubm90YXRpb25FbGVtZW50KGVkaXRvcik7XG4gICAgfVxuICB9XG4gIGRldGFjaChlZGl0b3IpIHtcbiAgICB0aGlzLiNlZGl0b3JzLmRlbGV0ZShlZGl0b3IuaWQpO1xuICAgIHRoaXMuI2FjY2Vzc2liaWxpdHlNYW5hZ2VyPy5yZW1vdmVQb2ludGVySW5UZXh0TGF5ZXIoZWRpdG9yLmNvbnRlbnREaXYpO1xuICAgIGlmICghdGhpcy4jaXNEaXNhYmxpbmcgJiYgZWRpdG9yLmFubm90YXRpb25FbGVtZW50SWQpIHtcbiAgICAgIHRoaXMuI3VpTWFuYWdlci5hZGREZWxldGVkQW5ub3RhdGlvbkVsZW1lbnQoZWRpdG9yKTtcbiAgICB9XG4gIH1cbiAgcmVtb3ZlKGVkaXRvcikge1xuICAgIHRoaXMuZGV0YWNoKGVkaXRvcik7XG4gICAgdGhpcy4jdWlNYW5hZ2VyLnJlbW92ZUVkaXRvcihlZGl0b3IpO1xuICAgIGVkaXRvci5kaXYucmVtb3ZlKCk7XG4gICAgZWRpdG9yLmlzQXR0YWNoZWRUb0RPTSA9IGZhbHNlO1xuICAgIGlmICghdGhpcy4jaXNDbGVhbmluZ1VwKSB7XG4gICAgICB0aGlzLmFkZElua0VkaXRvcklmTmVlZGVkKGZhbHNlKTtcbiAgICB9XG4gIH1cbiAgY2hhbmdlUGFyZW50KGVkaXRvcikge1xuICAgIGlmIChlZGl0b3IucGFyZW50ID09PSB0aGlzKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChlZGl0b3IuYW5ub3RhdGlvbkVsZW1lbnRJZCkge1xuICAgICAgdGhpcy4jdWlNYW5hZ2VyLmFkZERlbGV0ZWRBbm5vdGF0aW9uRWxlbWVudChlZGl0b3IuYW5ub3RhdGlvbkVsZW1lbnRJZCk7XG4gICAgICBlZGl0b3JfZWRpdG9yLkFubm90YXRpb25FZGl0b3IuZGVsZXRlQW5ub3RhdGlvbkVsZW1lbnQoZWRpdG9yKTtcbiAgICAgIGVkaXRvci5hbm5vdGF0aW9uRWxlbWVudElkID0gbnVsbDtcbiAgICB9XG4gICAgdGhpcy5hdHRhY2goZWRpdG9yKTtcbiAgICBlZGl0b3IucGFyZW50Py5kZXRhY2goZWRpdG9yKTtcbiAgICBlZGl0b3Iuc2V0UGFyZW50KHRoaXMpO1xuICAgIGlmIChlZGl0b3IuZGl2ICYmIGVkaXRvci5pc0F0dGFjaGVkVG9ET00pIHtcbiAgICAgIGVkaXRvci5kaXYucmVtb3ZlKCk7XG4gICAgICB0aGlzLmRpdi5hcHBlbmQoZWRpdG9yLmRpdik7XG4gICAgfVxuICB9XG4gIGFkZChlZGl0b3IpIHtcbiAgICB0aGlzLmNoYW5nZVBhcmVudChlZGl0b3IpO1xuICAgIHRoaXMuI3VpTWFuYWdlci5hZGRFZGl0b3IoZWRpdG9yKTtcbiAgICB0aGlzLmF0dGFjaChlZGl0b3IpO1xuICAgIGlmICghZWRpdG9yLmlzQXR0YWNoZWRUb0RPTSkge1xuICAgICAgY29uc3QgZGl2ID0gZWRpdG9yLnJlbmRlcigpO1xuICAgICAgdGhpcy5kaXYuYXBwZW5kKGRpdik7XG4gICAgICBlZGl0b3IuaXNBdHRhY2hlZFRvRE9NID0gdHJ1ZTtcbiAgICB9XG4gICAgZWRpdG9yLmZpeEFuZFNldFBvc2l0aW9uKCk7XG4gICAgZWRpdG9yLm9uY2VBZGRlZCgpO1xuICAgIHRoaXMuI3VpTWFuYWdlci5hZGRUb0Fubm90YXRpb25TdG9yYWdlKGVkaXRvcik7XG4gIH1cbiAgbW92ZUVkaXRvckluRE9NKGVkaXRvcikge1xuICAgIGlmICghZWRpdG9yLmlzQXR0YWNoZWRUb0RPTSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCB7XG4gICAgICBhY3RpdmVFbGVtZW50XG4gICAgfSA9IGRvY3VtZW50O1xuICAgIGlmIChlZGl0b3IuZGl2LmNvbnRhaW5zKGFjdGl2ZUVsZW1lbnQpICYmICF0aGlzLiNlZGl0b3JGb2N1c1RpbWVvdXRJZCkge1xuICAgICAgZWRpdG9yLl9mb2N1c0V2ZW50c0FsbG93ZWQgPSBmYWxzZTtcbiAgICAgIHRoaXMuI2VkaXRvckZvY3VzVGltZW91dElkID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHRoaXMuI2VkaXRvckZvY3VzVGltZW91dElkID0gbnVsbDtcbiAgICAgICAgaWYgKCFlZGl0b3IuZGl2LmNvbnRhaW5zKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpKSB7XG4gICAgICAgICAgZWRpdG9yLmRpdi5hZGRFdmVudExpc3RlbmVyKFwiZm9jdXNpblwiLCAoKSA9PiB7XG4gICAgICAgICAgICBlZGl0b3IuX2ZvY3VzRXZlbnRzQWxsb3dlZCA9IHRydWU7XG4gICAgICAgICAgfSwge1xuICAgICAgICAgICAgb25jZTogdHJ1ZVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGFjdGl2ZUVsZW1lbnQuZm9jdXMoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBlZGl0b3IuX2ZvY3VzRXZlbnRzQWxsb3dlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0sIDApO1xuICAgIH1cbiAgICBlZGl0b3IuX3N0cnVjdFRyZWVQYXJlbnRJZCA9IHRoaXMuI2FjY2Vzc2liaWxpdHlNYW5hZ2VyPy5tb3ZlRWxlbWVudEluRE9NKHRoaXMuZGl2LCBlZGl0b3IuZGl2LCBlZGl0b3IuY29udGVudERpdiwgdHJ1ZSk7XG4gIH1cbiAgYWRkT3JSZWJ1aWxkKGVkaXRvcikge1xuICAgIGlmIChlZGl0b3IubmVlZHNUb0JlUmVidWlsdCgpKSB7XG4gICAgICBlZGl0b3IucGFyZW50IHx8PSB0aGlzO1xuICAgICAgZWRpdG9yLnJlYnVpbGQoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5hZGQoZWRpdG9yKTtcbiAgICB9XG4gIH1cbiAgYWRkVW5kb2FibGVFZGl0b3IoZWRpdG9yKSB7XG4gICAgY29uc3QgY21kID0gKCkgPT4gZWRpdG9yLl91aU1hbmFnZXIucmVidWlsZChlZGl0b3IpO1xuICAgIGNvbnN0IHVuZG8gPSAoKSA9PiB7XG4gICAgICBlZGl0b3IucmVtb3ZlKCk7XG4gICAgfTtcbiAgICB0aGlzLmFkZENvbW1hbmRzKHtcbiAgICAgIGNtZCxcbiAgICAgIHVuZG8sXG4gICAgICBtdXN0RXhlYzogZmFsc2VcbiAgICB9KTtcbiAgfVxuICBnZXROZXh0SWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuI3VpTWFuYWdlci5nZXRJZCgpO1xuICB9XG4gIGdldCAjY3VycmVudEVkaXRvclR5cGUoKSB7XG4gICAgcmV0dXJuIEFubm90YXRpb25FZGl0b3JMYXllci4jZWRpdG9yVHlwZXMuZ2V0KHRoaXMuI3VpTWFuYWdlci5nZXRNb2RlKCkpO1xuICB9XG4gICNjcmVhdGVOZXdFZGl0b3IocGFyYW1zKSB7XG4gICAgY29uc3QgZWRpdG9yVHlwZSA9IHRoaXMuI2N1cnJlbnRFZGl0b3JUeXBlO1xuICAgIHJldHVybiBlZGl0b3JUeXBlID8gbmV3IGVkaXRvclR5cGUucHJvdG90eXBlLmNvbnN0cnVjdG9yKHBhcmFtcykgOiBudWxsO1xuICB9XG4gIGNhbkNyZWF0ZU5ld0VtcHR5RWRpdG9yKCkge1xuICAgIHJldHVybiB0aGlzLiNjdXJyZW50RWRpdG9yVHlwZT8uY2FuQ3JlYXRlTmV3RW1wdHlFZGl0b3IoKTtcbiAgfVxuICBwYXN0ZUVkaXRvcihtb2RlLCBwYXJhbXMpIHtcbiAgICB0aGlzLiN1aU1hbmFnZXIudXBkYXRlVG9vbGJhcihtb2RlKTtcbiAgICB0aGlzLiN1aU1hbmFnZXIudXBkYXRlTW9kZShtb2RlKTtcbiAgICBjb25zdCB7XG4gICAgICBvZmZzZXRYLFxuICAgICAgb2Zmc2V0WVxuICAgIH0gPSB0aGlzLiNnZXRDZW50ZXJQb2ludCgpO1xuICAgIGNvbnN0IGlkID0gdGhpcy5nZXROZXh0SWQoKTtcbiAgICBjb25zdCBlZGl0b3IgPSB0aGlzLiNjcmVhdGVOZXdFZGl0b3Ioe1xuICAgICAgcGFyZW50OiB0aGlzLFxuICAgICAgaWQsXG4gICAgICB4OiBvZmZzZXRYLFxuICAgICAgeTogb2Zmc2V0WSxcbiAgICAgIHVpTWFuYWdlcjogdGhpcy4jdWlNYW5hZ2VyLFxuICAgICAgaXNDZW50ZXJlZDogdHJ1ZSxcbiAgICAgIC4uLnBhcmFtc1xuICAgIH0pO1xuICAgIGlmIChlZGl0b3IpIHtcbiAgICAgIHRoaXMuYWRkKGVkaXRvcik7XG4gICAgfVxuICB9XG4gIGRlc2VyaWFsaXplKGRhdGEpIHtcbiAgICByZXR1cm4gQW5ub3RhdGlvbkVkaXRvckxheWVyLiNlZGl0b3JUeXBlcy5nZXQoZGF0YS5hbm5vdGF0aW9uVHlwZSA/PyBkYXRhLmFubm90YXRpb25FZGl0b3JUeXBlKT8uZGVzZXJpYWxpemUoZGF0YSwgdGhpcywgdGhpcy4jdWlNYW5hZ2VyKSB8fCBudWxsO1xuICB9XG4gICNjcmVhdGVBbmRBZGROZXdFZGl0b3IoZXZlbnQsIGlzQ2VudGVyZWQsIGRhdGEgPSB7fSkge1xuICAgIGNvbnN0IGlkID0gdGhpcy5nZXROZXh0SWQoKTtcbiAgICBjb25zdCBlZGl0b3IgPSB0aGlzLiNjcmVhdGVOZXdFZGl0b3Ioe1xuICAgICAgcGFyZW50OiB0aGlzLFxuICAgICAgaWQsXG4gICAgICB4OiBldmVudC5vZmZzZXRYLFxuICAgICAgeTogZXZlbnQub2Zmc2V0WSxcbiAgICAgIHVpTWFuYWdlcjogdGhpcy4jdWlNYW5hZ2VyLFxuICAgICAgaXNDZW50ZXJlZCxcbiAgICAgIC4uLmRhdGFcbiAgICB9KTtcbiAgICBpZiAoZWRpdG9yKSB7XG4gICAgICB0aGlzLmFkZChlZGl0b3IpO1xuICAgIH1cbiAgICByZXR1cm4gZWRpdG9yO1xuICB9XG4gICNnZXRDZW50ZXJQb2ludCgpIHtcbiAgICBjb25zdCB7XG4gICAgICB4LFxuICAgICAgeSxcbiAgICAgIHdpZHRoLFxuICAgICAgaGVpZ2h0XG4gICAgfSA9IHRoaXMuZGl2LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIGNvbnN0IHRsWCA9IE1hdGgubWF4KDAsIHgpO1xuICAgIGNvbnN0IHRsWSA9IE1hdGgubWF4KDAsIHkpO1xuICAgIGNvbnN0IGJyWCA9IE1hdGgubWluKHdpbmRvdy5pbm5lcldpZHRoLCB4ICsgd2lkdGgpO1xuICAgIGNvbnN0IGJyWSA9IE1hdGgubWluKHdpbmRvdy5pbm5lckhlaWdodCwgeSArIGhlaWdodCk7XG4gICAgY29uc3QgY2VudGVyWCA9ICh0bFggKyBiclgpIC8gMiAtIHg7XG4gICAgY29uc3QgY2VudGVyWSA9ICh0bFkgKyBiclkpIC8gMiAtIHk7XG4gICAgY29uc3QgW29mZnNldFgsIG9mZnNldFldID0gdGhpcy52aWV3cG9ydC5yb3RhdGlvbiAlIDE4MCA9PT0gMCA/IFtjZW50ZXJYLCBjZW50ZXJZXSA6IFtjZW50ZXJZLCBjZW50ZXJYXTtcbiAgICByZXR1cm4ge1xuICAgICAgb2Zmc2V0WCxcbiAgICAgIG9mZnNldFlcbiAgICB9O1xuICB9XG4gIGFkZE5ld0VkaXRvcigpIHtcbiAgICB0aGlzLiNjcmVhdGVBbmRBZGROZXdFZGl0b3IodGhpcy4jZ2V0Q2VudGVyUG9pbnQoKSwgdHJ1ZSk7XG4gIH1cbiAgc2V0U2VsZWN0ZWQoZWRpdG9yKSB7XG4gICAgdGhpcy4jdWlNYW5hZ2VyLnNldFNlbGVjdGVkKGVkaXRvcik7XG4gIH1cbiAgdG9nZ2xlU2VsZWN0ZWQoZWRpdG9yKSB7XG4gICAgdGhpcy4jdWlNYW5hZ2VyLnRvZ2dsZVNlbGVjdGVkKGVkaXRvcik7XG4gIH1cbiAgaXNTZWxlY3RlZChlZGl0b3IpIHtcbiAgICByZXR1cm4gdGhpcy4jdWlNYW5hZ2VyLmlzU2VsZWN0ZWQoZWRpdG9yKTtcbiAgfVxuICB1bnNlbGVjdChlZGl0b3IpIHtcbiAgICB0aGlzLiN1aU1hbmFnZXIudW5zZWxlY3QoZWRpdG9yKTtcbiAgfVxuICBzZWxlY3Rpb25TdGFydChfZXZlbnQpIHtcbiAgICB0aGlzLiN0ZXh0TGF5ZXI/LmRpdi5hZGRFdmVudExpc3RlbmVyKFwicG9pbnRlcnVwXCIsIHRoaXMuI2JvdW5kUG9pbnRlclVwQWZ0ZXJTZWxlY3Rpb24sIHtcbiAgICAgIG9uY2U6IHRydWVcbiAgICB9KTtcbiAgfVxuICBwb2ludGVyVXBBZnRlclNlbGVjdGlvbihldmVudCkge1xuICAgIGNvbnN0IHNlbGVjdGlvbiA9IGRvY3VtZW50LmdldFNlbGVjdGlvbigpO1xuICAgIGlmIChzZWxlY3Rpb24ucmFuZ2VDb3VudCA9PT0gMCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCByYW5nZSA9IHNlbGVjdGlvbi5nZXRSYW5nZUF0KDApO1xuICAgIGlmIChyYW5nZS5jb2xsYXBzZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKCF0aGlzLiN0ZXh0TGF5ZXI/LmRpdi5jb250YWlucyhyYW5nZS5jb21tb25BbmNlc3RvckNvbnRhaW5lcikpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3Qge1xuICAgICAgeDogbGF5ZXJYLFxuICAgICAgeTogbGF5ZXJZLFxuICAgICAgd2lkdGg6IHBhcmVudFdpZHRoLFxuICAgICAgaGVpZ2h0OiBwYXJlbnRIZWlnaHRcbiAgICB9ID0gdGhpcy4jdGV4dExheWVyLmRpdi5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICBjb25zdCBiYm94ZXMgPSByYW5nZS5nZXRDbGllbnRSZWN0cygpO1xuICAgIGxldCByb3RhdG9yO1xuICAgIHN3aXRjaCAodGhpcy52aWV3cG9ydC5yb3RhdGlvbikge1xuICAgICAgY2FzZSA5MDpcbiAgICAgICAgcm90YXRvciA9ICh4LCB5LCB3LCBoKSA9PiAoe1xuICAgICAgICAgIHg6ICh5IC0gbGF5ZXJZKSAvIHBhcmVudEhlaWdodCxcbiAgICAgICAgICB5OiAxIC0gKHggKyB3IC0gbGF5ZXJYKSAvIHBhcmVudFdpZHRoLFxuICAgICAgICAgIHdpZHRoOiBoIC8gcGFyZW50SGVpZ2h0LFxuICAgICAgICAgIGhlaWdodDogdyAvIHBhcmVudFdpZHRoXG4gICAgICAgIH0pO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMTgwOlxuICAgICAgICByb3RhdG9yID0gKHgsIHksIHcsIGgpID0+ICh7XG4gICAgICAgICAgeDogMSAtICh4ICsgdyAtIGxheWVyWCkgLyBwYXJlbnRXaWR0aCxcbiAgICAgICAgICB5OiAxIC0gKHkgKyBoIC0gbGF5ZXJZKSAvIHBhcmVudEhlaWdodCxcbiAgICAgICAgICB3aWR0aDogdyAvIHBhcmVudFdpZHRoLFxuICAgICAgICAgIGhlaWdodDogaCAvIHBhcmVudEhlaWdodFxuICAgICAgICB9KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDI3MDpcbiAgICAgICAgcm90YXRvciA9ICh4LCB5LCB3LCBoKSA9PiAoe1xuICAgICAgICAgIHg6IDEgLSAoeSArIGggLSBsYXllclkpIC8gcGFyZW50SGVpZ2h0LFxuICAgICAgICAgIHk6ICh4IC0gbGF5ZXJYKSAvIHBhcmVudFdpZHRoLFxuICAgICAgICAgIHdpZHRoOiBoIC8gcGFyZW50SGVpZ2h0LFxuICAgICAgICAgIGhlaWdodDogdyAvIHBhcmVudFdpZHRoXG4gICAgICAgIH0pO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJvdGF0b3IgPSAoeCwgeSwgdywgaCkgPT4gKHtcbiAgICAgICAgICB4OiAoeCAtIGxheWVyWCkgLyBwYXJlbnRXaWR0aCxcbiAgICAgICAgICB5OiAoeSAtIGxheWVyWSkgLyBwYXJlbnRIZWlnaHQsXG4gICAgICAgICAgd2lkdGg6IHcgLyBwYXJlbnRXaWR0aCxcbiAgICAgICAgICBoZWlnaHQ6IGggLyBwYXJlbnRIZWlnaHRcbiAgICAgICAgfSk7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBjb25zdCBib3hlcyA9IFtdO1xuICAgIGZvciAoY29uc3Qge1xuICAgICAgeCxcbiAgICAgIHksXG4gICAgICB3aWR0aCxcbiAgICAgIGhlaWdodFxuICAgIH0gb2YgYmJveGVzKSB7XG4gICAgICBpZiAod2lkdGggPT09IDAgfHwgaGVpZ2h0ID09PSAwKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgYm94ZXMucHVzaChyb3RhdG9yKHgsIHksIHdpZHRoLCBoZWlnaHQpKTtcbiAgICB9XG4gICAgaWYgKGJveGVzLmxlbmd0aCAhPT0gMCkge1xuICAgICAgdGhpcy4jY3JlYXRlQW5kQWRkTmV3RWRpdG9yKGV2ZW50LCBmYWxzZSwge1xuICAgICAgICBib3hlc1xuICAgICAgfSk7XG4gICAgfVxuICAgIHNlbGVjdGlvbi5lbXB0eSgpO1xuICB9XG4gIHBvaW50ZXJ1cChldmVudCkge1xuICAgIGNvbnN0IHtcbiAgICAgIGlzTWFjXG4gICAgfSA9IHV0aWwuRmVhdHVyZVRlc3QucGxhdGZvcm07XG4gICAgaWYgKGV2ZW50LmJ1dHRvbiAhPT0gMCB8fCBldmVudC5jdHJsS2V5ICYmIGlzTWFjKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChldmVudC50YXJnZXQgIT09IHRoaXMuZGl2KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICghdGhpcy4jaGFkUG9pbnRlckRvd24pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy4jaGFkUG9pbnRlckRvd24gPSBmYWxzZTtcbiAgICBpZiAoIXRoaXMuI2FsbG93Q2xpY2spIHtcbiAgICAgIHRoaXMuI2FsbG93Q2xpY2sgPSB0cnVlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAodGhpcy4jdWlNYW5hZ2VyLmdldE1vZGUoKSA9PT0gdXRpbC5Bbm5vdGF0aW9uRWRpdG9yVHlwZS5TVEFNUCkge1xuICAgICAgdGhpcy4jdWlNYW5hZ2VyLnVuc2VsZWN0QWxsKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuI2NyZWF0ZUFuZEFkZE5ld0VkaXRvcihldmVudCwgZmFsc2UpO1xuICB9XG4gIHBvaW50ZXJkb3duKGV2ZW50KSB7XG4gICAgaWYgKHRoaXMuI3VpTWFuYWdlci5nZXRNb2RlKCkgPT09IHV0aWwuQW5ub3RhdGlvbkVkaXRvclR5cGUuSElHSExJR0hUKSB7XG4gICAgICB0aGlzLmVuYWJsZVRleHRTZWxlY3Rpb24oKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuI2hhZFBvaW50ZXJEb3duKSB7XG4gICAgICB0aGlzLiNoYWRQb2ludGVyRG93biA9IGZhbHNlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCB7XG4gICAgICBpc01hY1xuICAgIH0gPSB1dGlsLkZlYXR1cmVUZXN0LnBsYXRmb3JtO1xuICAgIGlmIChldmVudC5idXR0b24gIT09IDAgfHwgZXZlbnQuY3RybEtleSAmJiBpc01hYykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoZXZlbnQudGFyZ2V0ICE9PSB0aGlzLmRpdikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLiNoYWRQb2ludGVyRG93biA9IHRydWU7XG4gICAgY29uc3QgZWRpdG9yID0gdGhpcy4jdWlNYW5hZ2VyLmdldEFjdGl2ZSgpO1xuICAgIHRoaXMuI2FsbG93Q2xpY2sgPSAhZWRpdG9yIHx8IGVkaXRvci5pc0VtcHR5KCk7XG4gIH1cbiAgZmluZE5ld1BhcmVudChlZGl0b3IsIHgsIHkpIHtcbiAgICBjb25zdCBsYXllciA9IHRoaXMuI3VpTWFuYWdlci5maW5kUGFyZW50KHgsIHkpO1xuICAgIGlmIChsYXllciA9PT0gbnVsbCB8fCBsYXllciA9PT0gdGhpcykge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBsYXllci5jaGFuZ2VQYXJlbnQoZWRpdG9yKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBkZXN0cm95KCkge1xuICAgIGlmICh0aGlzLiN1aU1hbmFnZXIuZ2V0QWN0aXZlKCk/LnBhcmVudCA9PT0gdGhpcykge1xuICAgICAgdGhpcy4jdWlNYW5hZ2VyLmNvbW1pdE9yUmVtb3ZlKCk7XG4gICAgICB0aGlzLiN1aU1hbmFnZXIuc2V0QWN0aXZlRWRpdG9yKG51bGwpO1xuICAgIH1cbiAgICBpZiAodGhpcy4jZWRpdG9yRm9jdXNUaW1lb3V0SWQpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLiNlZGl0b3JGb2N1c1RpbWVvdXRJZCk7XG4gICAgICB0aGlzLiNlZGl0b3JGb2N1c1RpbWVvdXRJZCA9IG51bGw7XG4gICAgfVxuICAgIGZvciAoY29uc3QgZWRpdG9yIG9mIHRoaXMuI2VkaXRvcnMudmFsdWVzKCkpIHtcbiAgICAgIHRoaXMuI2FjY2Vzc2liaWxpdHlNYW5hZ2VyPy5yZW1vdmVQb2ludGVySW5UZXh0TGF5ZXIoZWRpdG9yLmNvbnRlbnREaXYpO1xuICAgICAgZWRpdG9yLnNldFBhcmVudChudWxsKTtcbiAgICAgIGVkaXRvci5pc0F0dGFjaGVkVG9ET00gPSBmYWxzZTtcbiAgICAgIGVkaXRvci5kaXYucmVtb3ZlKCk7XG4gICAgfVxuICAgIHRoaXMuZGl2ID0gbnVsbDtcbiAgICB0aGlzLiNlZGl0b3JzLmNsZWFyKCk7XG4gICAgdGhpcy4jdWlNYW5hZ2VyLnJlbW92ZUxheWVyKHRoaXMpO1xuICB9XG4gICNjbGVhbnVwKCkge1xuICAgIHRoaXMuI2lzQ2xlYW5pbmdVcCA9IHRydWU7XG4gICAgZm9yIChjb25zdCBlZGl0b3Igb2YgdGhpcy4jZWRpdG9ycy52YWx1ZXMoKSkge1xuICAgICAgaWYgKGVkaXRvci5pc0VtcHR5KCkpIHtcbiAgICAgICAgZWRpdG9yLnJlbW92ZSgpO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLiNpc0NsZWFuaW5nVXAgPSBmYWxzZTtcbiAgfVxuICByZW5kZXIoe1xuICAgIHZpZXdwb3J0XG4gIH0pIHtcbiAgICB0aGlzLnZpZXdwb3J0ID0gdmlld3BvcnQ7XG4gICAgKDAsZGlzcGxheV91dGlscy5zZXRMYXllckRpbWVuc2lvbnMpKHRoaXMuZGl2LCB2aWV3cG9ydCk7XG4gICAgZm9yIChjb25zdCBlZGl0b3Igb2YgdGhpcy4jdWlNYW5hZ2VyLmdldEVkaXRvcnModGhpcy5wYWdlSW5kZXgpKSB7XG4gICAgICB0aGlzLmFkZChlZGl0b3IpO1xuICAgIH1cbiAgICB0aGlzLnVwZGF0ZU1vZGUoKTtcbiAgfVxuICB1cGRhdGUoe1xuICAgIHZpZXdwb3J0XG4gIH0pIHtcbiAgICB0aGlzLiN1aU1hbmFnZXIuY29tbWl0T3JSZW1vdmUoKTtcbiAgICBjb25zdCBvbGRSb3RhdGlvbiA9IHRoaXMudmlld3BvcnQucm90YXRpb247XG4gICAgY29uc3Qgcm90YXRpb24gPSB2aWV3cG9ydC5yb3RhdGlvbjtcbiAgICB0aGlzLnZpZXdwb3J0ID0gdmlld3BvcnQ7XG4gICAgKDAsZGlzcGxheV91dGlscy5zZXRMYXllckRpbWVuc2lvbnMpKHRoaXMuZGl2LCB7XG4gICAgICByb3RhdGlvblxuICAgIH0pO1xuICAgIGlmIChvbGRSb3RhdGlvbiAhPT0gcm90YXRpb24pIHtcbiAgICAgIGZvciAoY29uc3QgZWRpdG9yIG9mIHRoaXMuI2VkaXRvcnMudmFsdWVzKCkpIHtcbiAgICAgICAgZWRpdG9yLnJvdGF0ZShyb3RhdGlvbik7XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMudXBkYXRlTW9kZSgpO1xuICB9XG4gIGdldCBwYWdlRGltZW5zaW9ucygpIHtcbiAgICBjb25zdCB7XG4gICAgICBwYWdlV2lkdGgsXG4gICAgICBwYWdlSGVpZ2h0XG4gICAgfSA9IHRoaXMudmlld3BvcnQucmF3RGltcztcbiAgICByZXR1cm4gW3BhZ2VXaWR0aCwgcGFnZUhlaWdodF07XG4gIH1cbn1cblxuXG4vKioqLyB9KSxcblxuLyoqKi8gOTc6XG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfX193ZWJwYWNrX21vZHVsZV9fLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cbi8qIGhhcm1vbnkgZXhwb3J0ICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCB7XG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIENvbG9yUGlja2VyOiAoKSA9PiAoLyogYmluZGluZyAqLyBDb2xvclBpY2tlcilcbi8qIGhhcm1vbnkgZXhwb3J0ICovIH0pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9zaGFyZWRfdXRpbF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNjYpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF90b29sc19qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4MTIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9kaXNwbGF5X3V0aWxzX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ3Myk7XG5cblxuXG5jbGFzcyBDb2xvclBpY2tlciB7XG4gICNib3VuZEtleURvd24gPSB0aGlzLiNrZXlEb3duLmJpbmQodGhpcyk7XG4gICNidXR0b24gPSBudWxsO1xuICAjYnV0dG9uU3dhdGNoID0gbnVsbDtcbiAgI2RlZmF1bHRDb2xvcjtcbiAgI2Ryb3Bkb3duID0gbnVsbDtcbiAgI2Ryb3Bkb3duV2FzRnJvbUtleWJvYXJkID0gZmFsc2U7XG4gICNpc01haW5Db2xvclBpY2tlciA9IGZhbHNlO1xuICAjZXZlbnRCdXM7XG4gICN1aU1hbmFnZXIgPSBudWxsO1xuICBzdGF0aWMgZ2V0IF9rZXlib2FyZE1hbmFnZXIoKSB7XG4gICAgcmV0dXJuICgwLF9zaGFyZWRfdXRpbF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLnNoYWRvdykodGhpcywgXCJfa2V5Ym9hcmRNYW5hZ2VyXCIsIG5ldyBfdG9vbHNfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5LZXlib2FyZE1hbmFnZXIoW1tbXCJFc2NhcGVcIiwgXCJtYWMrRXNjYXBlXCJdLCBDb2xvclBpY2tlci5wcm90b3R5cGUuX2hpZGVEcm9wZG93bkZyb21LZXlib2FyZF0sIFtbXCIgXCIsIFwibWFjKyBcIl0sIENvbG9yUGlja2VyLnByb3RvdHlwZS5fY29sb3JTZWxlY3RGcm9tS2V5Ym9hcmRdLCBbW1wiQXJyb3dEb3duXCIsIFwiQXJyb3dSaWdodFwiLCBcIm1hYytBcnJvd0Rvd25cIiwgXCJtYWMrQXJyb3dSaWdodFwiXSwgQ29sb3JQaWNrZXIucHJvdG90eXBlLl9tb3ZlVG9OZXh0XSwgW1tcIkFycm93VXBcIiwgXCJBcnJvd0xlZnRcIiwgXCJtYWMrQXJyb3dVcFwiLCBcIm1hYytBcnJvd0xlZnRcIl0sIENvbG9yUGlja2VyLnByb3RvdHlwZS5fbW92ZVRvUHJldmlvdXNdLCBbW1wiSG9tZVwiLCBcIm1hYytIb21lXCJdLCBDb2xvclBpY2tlci5wcm90b3R5cGUuX21vdmVUb0JlZ2lubmluZ10sIFtbXCJFbmRcIiwgXCJtYWMrRW5kXCJdLCBDb2xvclBpY2tlci5wcm90b3R5cGUuX21vdmVUb0VuZF1dKSk7XG4gIH1cbiAgY29uc3RydWN0b3Ioe1xuICAgIGVkaXRvciA9IG51bGwsXG4gICAgdWlNYW5hZ2VyID0gbnVsbFxuICB9KSB7XG4gICAgdGhpcy4jaXNNYWluQ29sb3JQaWNrZXIgPSAhZWRpdG9yO1xuICAgIHRoaXMuI3VpTWFuYWdlciA9IGVkaXRvcj8uX3VpTWFuYWdlciB8fCB1aU1hbmFnZXI7XG4gICAgdGhpcy4jZXZlbnRCdXMgPSB0aGlzLiN1aU1hbmFnZXIuX2V2ZW50QnVzO1xuICAgIHRoaXMuI2RlZmF1bHRDb2xvciA9IGVkaXRvcj8uY29sb3IgfHwgdGhpcy4jdWlNYW5hZ2VyPy5oaWdobGlnaHRDb2xvcnMudmFsdWVzKCkubmV4dCgpLnZhbHVlIHx8IFwiI0ZGRkY5OFwiO1xuICB9XG4gIHJlbmRlckJ1dHRvbigpIHtcbiAgICBjb25zdCBidXR0b24gPSB0aGlzLiNidXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xuICAgIGJ1dHRvbi5jbGFzc05hbWUgPSBcImNvbG9yUGlja2VyXCI7XG4gICAgYnV0dG9uLnRhYkluZGV4ID0gXCIwXCI7XG4gICAgYnV0dG9uLnNldEF0dHJpYnV0ZShcImRhdGEtbDEwbi1pZFwiLCBcInBkZmpzLWVkaXRvci1jb2xvcnBpY2tlci1idXR0b25cIik7XG4gICAgYnV0dG9uLnNldEF0dHJpYnV0ZShcImFyaWEtaGFzcG9wdXBcIiwgdHJ1ZSk7XG4gICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB0aGlzLiNvcGVuRHJvcGRvd24uYmluZCh0aGlzKSk7XG4gICAgY29uc3Qgc3dhdGNoID0gdGhpcy4jYnV0dG9uU3dhdGNoID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XG4gICAgc3dhdGNoLmNsYXNzTmFtZSA9IFwic3dhdGNoXCI7XG4gICAgc3dhdGNoLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IHRoaXMuI2RlZmF1bHRDb2xvcjtcbiAgICBidXR0b24uYXBwZW5kKHN3YXRjaCk7XG4gICAgcmV0dXJuIGJ1dHRvbjtcbiAgfVxuICByZW5kZXJNYWluRHJvcGRvd24oKSB7XG4gICAgY29uc3QgZHJvcGRvd24gPSB0aGlzLiNkcm9wZG93biA9IHRoaXMuI2dldERyb3Bkb3duUm9vdChfc2hhcmVkX3V0aWxfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5Bbm5vdGF0aW9uRWRpdG9yUGFyYW1zVHlwZS5ISUdITElHSFRfREVGQVVMVF9DT0xPUik7XG4gICAgZHJvcGRvd24uc2V0QXR0cmlidXRlKFwiYXJpYS1vcmllbnRhdGlvblwiLCBcImhvcml6b250YWxcIik7XG4gICAgZHJvcGRvd24uc2V0QXR0cmlidXRlKFwiYXJpYS1sYWJlbGxlZGJ5XCIsIFwiaGlnaGxpZ2h0Q29sb3JQaWNrZXJMYWJlbFwiKTtcbiAgICByZXR1cm4gZHJvcGRvd247XG4gIH1cbiAgI2dldERyb3Bkb3duUm9vdChwYXJhbVR5cGUpIHtcbiAgICBjb25zdCBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIGRpdi5hZGRFdmVudExpc3RlbmVyKFwiY29udGV4dG1lbnVcIiwgX2Rpc3BsYXlfdXRpbHNfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXy5ub0NvbnRleHRNZW51KTtcbiAgICBkaXYuY2xhc3NOYW1lID0gXCJkcm9wZG93blwiO1xuICAgIGRpdi5yb2xlID0gXCJsaXN0Ym94XCI7XG4gICAgZGl2LnNldEF0dHJpYnV0ZShcImFyaWEtbXVsdGlzZWxlY3RhYmxlXCIsIGZhbHNlKTtcbiAgICBkaXYuc2V0QXR0cmlidXRlKFwiYXJpYS1vcmllbnRhdGlvblwiLCBcInZlcnRpY2FsXCIpO1xuICAgIGRpdi5zZXRBdHRyaWJ1dGUoXCJkYXRhLWwxMG4taWRcIiwgXCJwZGZqcy1lZGl0b3ItY29sb3JwaWNrZXItZHJvcGRvd25cIik7XG4gICAgZm9yIChjb25zdCBbbmFtZSwgY29sb3JdIG9mIHRoaXMuI3VpTWFuYWdlci5oaWdobGlnaHRDb2xvcnMpIHtcbiAgICAgIGNvbnN0IGJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XG4gICAgICBidXR0b24udGFiSW5kZXggPSBcIjBcIjtcbiAgICAgIGJ1dHRvbi5yb2xlID0gXCJvcHRpb25cIjtcbiAgICAgIGJ1dHRvbi5zZXRBdHRyaWJ1dGUoXCJkYXRhLWNvbG9yXCIsIGNvbG9yKTtcbiAgICAgIGJ1dHRvbi50aXRsZSA9IG5hbWU7XG4gICAgICBidXR0b24uc2V0QXR0cmlidXRlKFwiZGF0YS1sMTBuLWlkXCIsIGBwZGZqcy1lZGl0b3ItY29sb3JwaWNrZXItJHtuYW1lfWApO1xuICAgICAgY29uc3Qgc3dhdGNoID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XG4gICAgICBidXR0b24uYXBwZW5kKHN3YXRjaCk7XG4gICAgICBzd2F0Y2guY2xhc3NOYW1lID0gXCJzd2F0Y2hcIjtcbiAgICAgIHN3YXRjaC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBjb2xvcjtcbiAgICAgIGJ1dHRvbi5zZXRBdHRyaWJ1dGUoXCJhcmlhLXNlbGVjdGVkXCIsIGNvbG9yID09PSB0aGlzLiNkZWZhdWx0Q29sb3IpO1xuICAgICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB0aGlzLiNjb2xvclNlbGVjdC5iaW5kKHRoaXMsIHBhcmFtVHlwZSwgY29sb3IpKTtcbiAgICAgIGRpdi5hcHBlbmQoYnV0dG9uKTtcbiAgICB9XG4gICAgZGl2LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIHRoaXMuI2JvdW5kS2V5RG93bik7XG4gICAgcmV0dXJuIGRpdjtcbiAgfVxuICAjY29sb3JTZWxlY3QodHlwZSwgY29sb3IsIGV2ZW50KSB7XG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgdGhpcy4jZXZlbnRCdXMuZGlzcGF0Y2goXCJzd2l0Y2hhbm5vdGF0aW9uZWRpdG9ycGFyYW1zXCIsIHtcbiAgICAgIHNvdXJjZTogdGhpcyxcbiAgICAgIHR5cGUsXG4gICAgICB2YWx1ZTogY29sb3JcbiAgICB9KTtcbiAgfVxuICBfY29sb3JTZWxlY3RGcm9tS2V5Ym9hcmQoZXZlbnQpIHtcbiAgICBjb25zdCBjb2xvciA9IGV2ZW50LnRhcmdldC5nZXRBdHRyaWJ1dGUoXCJkYXRhLWNvbG9yXCIpO1xuICAgIGlmICghY29sb3IpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy4jY29sb3JTZWxlY3QoY29sb3IsIGV2ZW50KTtcbiAgfVxuICBfbW92ZVRvTmV4dChldmVudCkge1xuICAgIGlmIChldmVudC50YXJnZXQgPT09IHRoaXMuI2J1dHRvbikge1xuICAgICAgdGhpcy4jZHJvcGRvd24uZmlyc3RDaGlsZD8uZm9jdXMoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZXZlbnQudGFyZ2V0Lm5leHRTaWJsaW5nPy5mb2N1cygpO1xuICB9XG4gIF9tb3ZlVG9QcmV2aW91cyhldmVudCkge1xuICAgIGV2ZW50LnRhcmdldC5wcmV2aW91c1NpYmxpbmc/LmZvY3VzKCk7XG4gIH1cbiAgX21vdmVUb0JlZ2lubmluZygpIHtcbiAgICB0aGlzLiNkcm9wZG93bi5maXJzdENoaWxkPy5mb2N1cygpO1xuICB9XG4gIF9tb3ZlVG9FbmQoKSB7XG4gICAgdGhpcy4jZHJvcGRvd24ubGFzdENoaWxkPy5mb2N1cygpO1xuICB9XG4gICNrZXlEb3duKGV2ZW50KSB7XG4gICAgQ29sb3JQaWNrZXIuX2tleWJvYXJkTWFuYWdlci5leGVjKHRoaXMsIGV2ZW50KTtcbiAgfVxuICAjb3BlbkRyb3Bkb3duKGV2ZW50KSB7XG4gICAgaWYgKHRoaXMuI2Ryb3Bkb3duICYmICF0aGlzLiNkcm9wZG93bi5jbGFzc0xpc3QuY29udGFpbnMoXCJoaWRkZW5cIikpIHtcbiAgICAgIHRoaXMuaGlkZURyb3Bkb3duKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuI2J1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCB0aGlzLiNib3VuZEtleURvd24pO1xuICAgIHRoaXMuI2Ryb3Bkb3duV2FzRnJvbUtleWJvYXJkID0gZXZlbnQuZGV0YWlsID09PSAwO1xuICAgIGlmICh0aGlzLiNkcm9wZG93bikge1xuICAgICAgdGhpcy4jZHJvcGRvd24uY2xhc3NMaXN0LnJlbW92ZShcImhpZGRlblwiKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3Qgcm9vdCA9IHRoaXMuI2Ryb3Bkb3duID0gdGhpcy4jZ2V0RHJvcGRvd25Sb290KF9zaGFyZWRfdXRpbF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLkFubm90YXRpb25FZGl0b3JQYXJhbXNUeXBlLkhJR0hMSUdIVF9DT0xPUik7XG4gICAgdGhpcy4jYnV0dG9uLmFwcGVuZChyb290KTtcbiAgfVxuICBoaWRlRHJvcGRvd24oKSB7XG4gICAgdGhpcy4jZHJvcGRvd24/LmNsYXNzTGlzdC5hZGQoXCJoaWRkZW5cIik7XG4gIH1cbiAgX2hpZGVEcm9wZG93bkZyb21LZXlib2FyZCgpIHtcbiAgICBpZiAodGhpcy4jaXNNYWluQ29sb3JQaWNrZXIgfHwgIXRoaXMuI2Ryb3Bkb3duIHx8IHRoaXMuI2Ryb3Bkb3duLmNsYXNzTGlzdC5jb250YWlucyhcImhpZGRlblwiKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLmhpZGVEcm9wZG93bigpO1xuICAgIHRoaXMuI2J1dHRvbi5yZW1vdmVFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCB0aGlzLiNib3VuZEtleURvd24pO1xuICAgIHRoaXMuI2J1dHRvbi5mb2N1cyh7XG4gICAgICBwcmV2ZW50U2Nyb2xsOiB0cnVlLFxuICAgICAgZm9jdXNWaXNpYmxlOiB0aGlzLiNkcm9wZG93bldhc0Zyb21LZXlib2FyZFxuICAgIH0pO1xuICB9XG4gIHVwZGF0ZUNvbG9yKGNvbG9yKSB7XG4gICAgaWYgKHRoaXMuI2J1dHRvblN3YXRjaCkge1xuICAgICAgdGhpcy4jYnV0dG9uU3dhdGNoLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IGNvbG9yO1xuICAgIH1cbiAgICBpZiAoIXRoaXMuI2Ryb3Bkb3duKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGkgPSB0aGlzLiN1aU1hbmFnZXIuaGlnaGxpZ2h0Q29sb3JzLnZhbHVlcygpO1xuICAgIGZvciAoY29uc3QgY2hpbGQgb2YgdGhpcy4jZHJvcGRvd24uY2hpbGRyZW4pIHtcbiAgICAgIGNoaWxkLnNldEF0dHJpYnV0ZShcImFyaWEtc2VsZWN0ZWRcIiwgaS5uZXh0KCkudmFsdWUgPT09IGNvbG9yKTtcbiAgICB9XG4gIH1cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLiNidXR0b24/LnJlbW92ZSgpO1xuICAgIHRoaXMuI2J1dHRvbiA9IG51bGw7XG4gICAgdGhpcy4jYnV0dG9uU3dhdGNoID0gbnVsbDtcbiAgICB0aGlzLiNkcm9wZG93bj8ucmVtb3ZlKCk7XG4gICAgdGhpcy4jZHJvcGRvd24gPSBudWxsO1xuICB9XG59XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDExNTpcbi8qKiovICgoX191bnVzZWRfd2VicGFja19fX3dlYnBhY2tfbW9kdWxlX18sIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuXG4vLyBFWFBPUlRTXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywge1xuICBBbm5vdGF0aW9uRWRpdG9yOiAoKSA9PiAoLyogYmluZGluZyAqLyBBbm5vdGF0aW9uRWRpdG9yKVxufSk7XG5cbi8vIEVYVEVSTkFMIE1PRFVMRTogLi9zcmMvZGlzcGxheS9lZGl0b3IvdG9vbHMuanNcbnZhciB0b29scyA9IF9fd2VicGFja19yZXF1aXJlX18oODEyKTtcbi8vIEVYVEVSTkFMIE1PRFVMRTogLi9zcmMvc2hhcmVkL3V0aWwuanNcbnZhciB1dGlsID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNjYpO1xuLy8gRVhURVJOQUwgTU9EVUxFOiAuL3NyYy9kaXNwbGF5L2Rpc3BsYXlfdXRpbHMuanNcbnZhciBkaXNwbGF5X3V0aWxzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0NzMpO1xuOy8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL2Rpc3BsYXkvZWRpdG9yL2FsdF90ZXh0LmpzXG5cbmNsYXNzIEFsdFRleHQge1xuICAjYWx0VGV4dCA9IFwiXCI7XG4gICNhbHRUZXh0RGVjb3JhdGl2ZSA9IGZhbHNlO1xuICAjYWx0VGV4dEJ1dHRvbiA9IG51bGw7XG4gICNhbHRUZXh0VG9vbHRpcCA9IG51bGw7XG4gICNhbHRUZXh0VG9vbHRpcFRpbWVvdXQgPSBudWxsO1xuICAjYWx0VGV4dFdhc0Zyb21LZXlCb2FyZCA9IGZhbHNlO1xuICAjZWRpdG9yID0gbnVsbDtcbiAgc3RhdGljIF9sMTBuUHJvbWlzZSA9IG51bGw7XG4gIGNvbnN0cnVjdG9yKGVkaXRvcikge1xuICAgIHRoaXMuI2VkaXRvciA9IGVkaXRvcjtcbiAgfVxuICBzdGF0aWMgaW5pdGlhbGl6ZShsMTBuUHJvbWlzZSkge1xuICAgIEFsdFRleHQuX2wxMG5Qcm9taXNlIHx8PSBsMTBuUHJvbWlzZTtcbiAgfVxuICBhc3luYyByZW5kZXIoKSB7XG4gICAgY29uc3QgYWx0VGV4dCA9IHRoaXMuI2FsdFRleHRCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xuICAgIGFsdFRleHQuY2xhc3NOYW1lID0gXCJhbHRUZXh0XCI7XG4gICAgY29uc3QgbXNnID0gYXdhaXQgQWx0VGV4dC5fbDEwblByb21pc2UuZ2V0KFwicGRmanMtZWRpdG9yLWFsdC10ZXh0LWJ1dHRvbi1sYWJlbFwiKTtcbiAgICBhbHRUZXh0LnRleHRDb250ZW50ID0gbXNnO1xuICAgIGFsdFRleHQuc2V0QXR0cmlidXRlKFwiYXJpYS1sYWJlbFwiLCBtc2cpO1xuICAgIGFsdFRleHQudGFiSW5kZXggPSBcIjBcIjtcbiAgICBhbHRUZXh0LmFkZEV2ZW50TGlzdGVuZXIoXCJjb250ZXh0bWVudVwiLCBkaXNwbGF5X3V0aWxzLm5vQ29udGV4dE1lbnUpO1xuICAgIGFsdFRleHQuYWRkRXZlbnRMaXN0ZW5lcihcInBvaW50ZXJkb3duXCIsIGV2ZW50ID0+IGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpKTtcbiAgICBjb25zdCBvbkNsaWNrID0gZXZlbnQgPT4ge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHRoaXMuI2VkaXRvci5fdWlNYW5hZ2VyLmVkaXRBbHRUZXh0KHRoaXMuI2VkaXRvcik7XG4gICAgfTtcbiAgICBhbHRUZXh0LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBvbkNsaWNrLCB7XG4gICAgICBjYXB0dXJlOiB0cnVlXG4gICAgfSk7XG4gICAgYWx0VGV4dC5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCBldmVudCA9PiB7XG4gICAgICBpZiAoZXZlbnQudGFyZ2V0ID09PSBhbHRUZXh0ICYmIGV2ZW50LmtleSA9PT0gXCJFbnRlclwiKSB7XG4gICAgICAgIHRoaXMuI2FsdFRleHRXYXNGcm9tS2V5Qm9hcmQgPSB0cnVlO1xuICAgICAgICBvbkNsaWNrKGV2ZW50KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBhd2FpdCB0aGlzLiNzZXRTdGF0ZSgpO1xuICAgIHJldHVybiBhbHRUZXh0O1xuICB9XG4gIGZpbmlzaCgpIHtcbiAgICBpZiAoIXRoaXMuI2FsdFRleHRCdXR0b24pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy4jYWx0VGV4dEJ1dHRvbi5mb2N1cyh7XG4gICAgICBmb2N1c1Zpc2libGU6IHRoaXMuI2FsdFRleHRXYXNGcm9tS2V5Qm9hcmRcbiAgICB9KTtcbiAgICB0aGlzLiNhbHRUZXh0V2FzRnJvbUtleUJvYXJkID0gZmFsc2U7XG4gIH1cbiAgZ2V0IGRhdGEoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGFsdFRleHQ6IHRoaXMuI2FsdFRleHQsXG4gICAgICBkZWNvcmF0aXZlOiB0aGlzLiNhbHRUZXh0RGVjb3JhdGl2ZVxuICAgIH07XG4gIH1cbiAgc2V0IGRhdGEoe1xuICAgIGFsdFRleHQsXG4gICAgZGVjb3JhdGl2ZVxuICB9KSB7XG4gICAgaWYgKHRoaXMuI2FsdFRleHQgPT09IGFsdFRleHQgJiYgdGhpcy4jYWx0VGV4dERlY29yYXRpdmUgPT09IGRlY29yYXRpdmUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy4jYWx0VGV4dCA9IGFsdFRleHQ7XG4gICAgdGhpcy4jYWx0VGV4dERlY29yYXRpdmUgPSBkZWNvcmF0aXZlO1xuICAgIHRoaXMuI3NldFN0YXRlKCk7XG4gIH1cbiAgdG9nZ2xlKGVuYWJsZWQgPSBmYWxzZSkge1xuICAgIGlmICghdGhpcy4jYWx0VGV4dEJ1dHRvbikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoIWVuYWJsZWQgJiYgdGhpcy4jYWx0VGV4dFRvb2x0aXBUaW1lb3V0KSB7XG4gICAgICBjbGVhclRpbWVvdXQodGhpcy4jYWx0VGV4dFRvb2x0aXBUaW1lb3V0KTtcbiAgICAgIHRoaXMuI2FsdFRleHRUb29sdGlwVGltZW91dCA9IG51bGw7XG4gICAgfVxuICAgIHRoaXMuI2FsdFRleHRCdXR0b24uZGlzYWJsZWQgPSAhZW5hYmxlZDtcbiAgfVxuICBkZXN0cm95KCkge1xuICAgIHRoaXMuI2FsdFRleHRCdXR0b24/LnJlbW92ZSgpO1xuICAgIHRoaXMuI2FsdFRleHRCdXR0b24gPSBudWxsO1xuICAgIHRoaXMuI2FsdFRleHRUb29sdGlwID0gbnVsbDtcbiAgfVxuICBhc3luYyAjc2V0U3RhdGUoKSB7XG4gICAgY29uc3QgYnV0dG9uID0gdGhpcy4jYWx0VGV4dEJ1dHRvbjtcbiAgICBpZiAoIWJ1dHRvbikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoIXRoaXMuI2FsdFRleHQgJiYgIXRoaXMuI2FsdFRleHREZWNvcmF0aXZlKSB7XG4gICAgICBidXR0b24uY2xhc3NMaXN0LnJlbW92ZShcImRvbmVcIik7XG4gICAgICB0aGlzLiNhbHRUZXh0VG9vbHRpcD8ucmVtb3ZlKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGJ1dHRvbi5jbGFzc0xpc3QuYWRkKFwiZG9uZVwiKTtcbiAgICBBbHRUZXh0Ll9sMTBuUHJvbWlzZS5nZXQoXCJwZGZqcy1lZGl0b3ItYWx0LXRleHQtZWRpdC1idXR0b24tbGFiZWxcIikudGhlbihtc2cgPT4ge1xuICAgICAgYnV0dG9uLnNldEF0dHJpYnV0ZShcImFyaWEtbGFiZWxcIiwgbXNnKTtcbiAgICB9KTtcbiAgICBsZXQgdG9vbHRpcCA9IHRoaXMuI2FsdFRleHRUb29sdGlwO1xuICAgIGlmICghdG9vbHRpcCkge1xuICAgICAgdGhpcy4jYWx0VGV4dFRvb2x0aXAgPSB0b29sdGlwID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XG4gICAgICB0b29sdGlwLmNsYXNzTmFtZSA9IFwidG9vbHRpcFwiO1xuICAgICAgdG9vbHRpcC5zZXRBdHRyaWJ1dGUoXCJyb2xlXCIsIFwidG9vbHRpcFwiKTtcbiAgICAgIGNvbnN0IGlkID0gdG9vbHRpcC5pZCA9IGBhbHQtdGV4dC10b29sdGlwLSR7dGhpcy4jZWRpdG9yLmlkfWA7XG4gICAgICBidXR0b24uc2V0QXR0cmlidXRlKFwiYXJpYS1kZXNjcmliZWRieVwiLCBpZCk7XG4gICAgICBjb25zdCBERUxBWV9UT19TSE9XX1RPT0xUSVAgPSAxMDA7XG4gICAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlZW50ZXJcIiwgKCkgPT4ge1xuICAgICAgICB0aGlzLiNhbHRUZXh0VG9vbHRpcFRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICB0aGlzLiNhbHRUZXh0VG9vbHRpcFRpbWVvdXQgPSBudWxsO1xuICAgICAgICAgIHRoaXMuI2FsdFRleHRUb29sdGlwLmNsYXNzTGlzdC5hZGQoXCJzaG93XCIpO1xuICAgICAgICAgIHRoaXMuI2VkaXRvci5fdWlNYW5hZ2VyLl9ldmVudEJ1cy5kaXNwYXRjaChcInJlcG9ydHRlbGVtZXRyeVwiLCB7XG4gICAgICAgICAgICBzb3VyY2U6IHRoaXMsXG4gICAgICAgICAgICBkZXRhaWxzOiB7XG4gICAgICAgICAgICAgIHR5cGU6IFwiZWRpdGluZ1wiLFxuICAgICAgICAgICAgICBzdWJ0eXBlOiB0aGlzLiNlZGl0b3IuZWRpdG9yVHlwZSxcbiAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgIGFjdGlvbjogXCJhbHRfdGV4dF90b29sdGlwXCJcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9LCBERUxBWV9UT19TSE9XX1RPT0xUSVApO1xuICAgICAgfSk7XG4gICAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlbGVhdmVcIiwgKCkgPT4ge1xuICAgICAgICBpZiAodGhpcy4jYWx0VGV4dFRvb2x0aXBUaW1lb3V0KSB7XG4gICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuI2FsdFRleHRUb29sdGlwVGltZW91dCk7XG4gICAgICAgICAgdGhpcy4jYWx0VGV4dFRvb2x0aXBUaW1lb3V0ID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLiNhbHRUZXh0VG9vbHRpcD8uY2xhc3NMaXN0LnJlbW92ZShcInNob3dcIik7XG4gICAgICB9KTtcbiAgICB9XG4gICAgdG9vbHRpcC5pbm5lclRleHQgPSB0aGlzLiNhbHRUZXh0RGVjb3JhdGl2ZSA/IGF3YWl0IEFsdFRleHQuX2wxMG5Qcm9taXNlLmdldChcInBkZmpzLWVkaXRvci1hbHQtdGV4dC1kZWNvcmF0aXZlLXRvb2x0aXBcIikgOiB0aGlzLiNhbHRUZXh0O1xuICAgIGlmICghdG9vbHRpcC5wYXJlbnROb2RlKSB7XG4gICAgICBidXR0b24uYXBwZW5kKHRvb2x0aXApO1xuICAgIH1cbiAgICBjb25zdCBlbGVtZW50ID0gdGhpcy4jZWRpdG9yLmdldEltYWdlRm9yQWx0VGV4dCgpO1xuICAgIGVsZW1lbnQ/LnNldEF0dHJpYnV0ZShcImFyaWEtZGVzY3JpYmVkYnlcIiwgdG9vbHRpcC5pZCk7XG4gIH1cbn1cblxuOy8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL2Rpc3BsYXkvZWRpdG9yL3Rvb2xiYXIuanNcblxuY2xhc3MgRWRpdG9yVG9vbGJhciB7XG4gICN0b29sYmFyID0gbnVsbDtcbiAgI2NvbG9yUGlja2VyID0gbnVsbDtcbiAgI2VkaXRvcjtcbiAgI2J1dHRvbnMgPSBudWxsO1xuICBjb25zdHJ1Y3RvcihlZGl0b3IpIHtcbiAgICB0aGlzLiNlZGl0b3IgPSBlZGl0b3I7XG4gIH1cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IGVkaXRUb29sYmFyID0gdGhpcy4jdG9vbGJhciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgZWRpdFRvb2xiYXIuY2xhc3NOYW1lID0gXCJlZGl0VG9vbGJhclwiO1xuICAgIGVkaXRUb29sYmFyLmFkZEV2ZW50TGlzdGVuZXIoXCJjb250ZXh0bWVudVwiLCBkaXNwbGF5X3V0aWxzLm5vQ29udGV4dE1lbnUpO1xuICAgIGVkaXRUb29sYmFyLmFkZEV2ZW50TGlzdGVuZXIoXCJwb2ludGVyZG93blwiLCBFZGl0b3JUb29sYmFyLiNwb2ludGVyRG93bik7XG4gICAgY29uc3QgYnV0dG9ucyA9IHRoaXMuI2J1dHRvbnMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIGJ1dHRvbnMuY2xhc3NOYW1lID0gXCJidXR0b25zXCI7XG4gICAgZWRpdFRvb2xiYXIuYXBwZW5kKGJ1dHRvbnMpO1xuICAgIGNvbnN0IHBvc2l0aW9uID0gdGhpcy4jZWRpdG9yLnRvb2xiYXJQb3NpdGlvbjtcbiAgICBpZiAocG9zaXRpb24pIHtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgc3R5bGVcbiAgICAgIH0gPSBlZGl0VG9vbGJhcjtcbiAgICAgIGNvbnN0IHggPSB0aGlzLiNlZGl0b3IuX3VpTWFuYWdlci5kaXJlY3Rpb24gPT09IFwibHRyXCIgPyAxIC0gcG9zaXRpb25bMF0gOiBwb3NpdGlvblswXTtcbiAgICAgIHN0eWxlLmluc2V0SW5saW5lRW5kID0gYCR7MTAwICogeH0lYDtcbiAgICAgIHN0eWxlLnRvcCA9IGBjYWxjKCR7MTAwICogcG9zaXRpb25bMV19JSArIHZhcigtLWVkaXRvci10b29sYmFyLXZlcnQtb2Zmc2V0KSlgO1xuICAgIH1cbiAgICB0aGlzLiNhZGREZWxldGVCdXR0b24oKTtcbiAgICByZXR1cm4gZWRpdFRvb2xiYXI7XG4gIH1cbiAgc3RhdGljICNwb2ludGVyRG93bihlKSB7XG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgfVxuICAjZm9jdXNJbihlKSB7XG4gICAgdGhpcy4jZWRpdG9yLl9mb2N1c0V2ZW50c0FsbG93ZWQgPSBmYWxzZTtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgfVxuICAjZm9jdXNPdXQoZSkge1xuICAgIHRoaXMuI2VkaXRvci5fZm9jdXNFdmVudHNBbGxvd2VkID0gdHJ1ZTtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgfVxuICAjYWRkTGlzdGVuZXJzVG9FbGVtZW50KGVsZW1lbnQpIHtcbiAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJmb2N1c2luXCIsIHRoaXMuI2ZvY3VzSW4uYmluZCh0aGlzKSwge1xuICAgICAgY2FwdHVyZTogdHJ1ZVxuICAgIH0pO1xuICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImZvY3Vzb3V0XCIsIHRoaXMuI2ZvY3VzT3V0LmJpbmQodGhpcyksIHtcbiAgICAgIGNhcHR1cmU6IHRydWVcbiAgICB9KTtcbiAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJjb250ZXh0bWVudVwiLCBkaXNwbGF5X3V0aWxzLm5vQ29udGV4dE1lbnUpO1xuICB9XG4gIGhpZGUoKSB7XG4gICAgdGhpcy4jdG9vbGJhci5jbGFzc0xpc3QuYWRkKFwiaGlkZGVuXCIpO1xuICAgIHRoaXMuI2NvbG9yUGlja2VyPy5oaWRlRHJvcGRvd24oKTtcbiAgfVxuICBzaG93KCkge1xuICAgIHRoaXMuI3Rvb2xiYXIuY2xhc3NMaXN0LnJlbW92ZShcImhpZGRlblwiKTtcbiAgfVxuICAjYWRkRGVsZXRlQnV0dG9uKCkge1xuICAgIGNvbnN0IGJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XG4gICAgYnV0dG9uLmNsYXNzTmFtZSA9IFwiZGVsZXRlXCI7XG4gICAgYnV0dG9uLnRhYkluZGV4ID0gMDtcbiAgICBidXR0b24uc2V0QXR0cmlidXRlKFwiZGF0YS1sMTBuLWlkXCIsIGBwZGZqcy1lZGl0b3ItcmVtb3ZlLSR7dGhpcy4jZWRpdG9yLmVkaXRvclR5cGV9LWJ1dHRvbmApO1xuICAgIHRoaXMuI2FkZExpc3RlbmVyc1RvRWxlbWVudChidXR0b24pO1xuICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZSA9PiB7XG4gICAgICB0aGlzLiNlZGl0b3IuX3VpTWFuYWdlci5kZWxldGUoKTtcbiAgICB9KTtcbiAgICB0aGlzLiNidXR0b25zLmFwcGVuZChidXR0b24pO1xuICB9XG4gIGdldCAjZGl2aWRlcigpIHtcbiAgICBjb25zdCBkaXZpZGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICBkaXZpZGVyLmNsYXNzTmFtZSA9IFwiZGl2aWRlclwiO1xuICAgIHJldHVybiBkaXZpZGVyO1xuICB9XG4gIGFkZEFsdFRleHRCdXR0b24oYnV0dG9uKSB7XG4gICAgdGhpcy4jYWRkTGlzdGVuZXJzVG9FbGVtZW50KGJ1dHRvbik7XG4gICAgdGhpcy4jYnV0dG9ucy5wcmVwZW5kKGJ1dHRvbiwgdGhpcy4jZGl2aWRlcik7XG4gIH1cbiAgYWRkQ29sb3JQaWNrZXIoY29sb3JQaWNrZXIpIHtcbiAgICB0aGlzLiNjb2xvclBpY2tlciA9IGNvbG9yUGlja2VyO1xuICAgIGNvbnN0IGJ1dHRvbiA9IGNvbG9yUGlja2VyLnJlbmRlckJ1dHRvbigpO1xuICAgIHRoaXMuI2FkZExpc3RlbmVyc1RvRWxlbWVudChidXR0b24pO1xuICAgIHRoaXMuI2J1dHRvbnMucHJlcGVuZChidXR0b24sIHRoaXMuI2RpdmlkZXIpO1xuICB9XG4gIHJlbW92ZSgpIHtcbiAgICB0aGlzLiN0b29sYmFyLnJlbW92ZSgpO1xuICAgIHRoaXMuI2NvbG9yUGlja2VyPy5kZXN0cm95KCk7XG4gICAgdGhpcy4jY29sb3JQaWNrZXIgPSBudWxsO1xuICB9XG59XG5cbjsvLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9kaXNwbGF5L2VkaXRvci9lZGl0b3IuanNcblxuXG5cblxuXG5jbGFzcyBBbm5vdGF0aW9uRWRpdG9yIHtcbiAgI2FsbFJlc2l6ZXJEaXZzID0gbnVsbDtcbiAgI2FsdFRleHQgPSBudWxsO1xuICAja2VlcEFzcGVjdFJhdGlvID0gZmFsc2U7XG4gICNyZXNpemVyc0RpdiA9IG51bGw7XG4gICNzYXZlZERpbWVuc2lvbnMgPSBudWxsO1xuICAjYm91bmRGb2N1c2luID0gdGhpcy5mb2N1c2luLmJpbmQodGhpcyk7XG4gICNib3VuZEZvY3Vzb3V0ID0gdGhpcy5mb2N1c291dC5iaW5kKHRoaXMpO1xuICAjZWRpdFRvb2xiYXIgPSBudWxsO1xuICAjZm9jdXNlZFJlc2l6ZXJOYW1lID0gXCJcIjtcbiAgI2hhc0JlZW5DbGlja2VkID0gZmFsc2U7XG4gICNpc0VkaXRpbmcgPSBmYWxzZTtcbiAgI2lzSW5FZGl0TW9kZSA9IGZhbHNlO1xuICAjaXNSZXNpemVyRW5hYmxlZEZvcktleWJvYXJkID0gZmFsc2U7XG4gICNtb3ZlSW5ET01UaW1lb3V0ID0gbnVsbDtcbiAgX2luaXRpYWxPcHRpb25zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgX3VpTWFuYWdlciA9IG51bGw7XG4gIF9mb2N1c0V2ZW50c0FsbG93ZWQgPSB0cnVlO1xuICBfbDEwblByb21pc2UgPSBudWxsO1xuICAjaXNEcmFnZ2FibGUgPSBmYWxzZTtcbiAgI3pJbmRleCA9IEFubm90YXRpb25FZGl0b3IuX3pJbmRleCsrO1xuICBzdGF0aWMgX2JvcmRlckxpbmVXaWR0aCA9IC0xO1xuICBzdGF0aWMgX2NvbG9yTWFuYWdlciA9IG5ldyB0b29scy5Db2xvck1hbmFnZXIoKTtcbiAgc3RhdGljIF96SW5kZXggPSAxO1xuICBzdGF0aWMgZ2V0IF9yZXNpemVyS2V5Ym9hcmRNYW5hZ2VyKCkge1xuICAgIGNvbnN0IHJlc2l6ZSA9IEFubm90YXRpb25FZGl0b3IucHJvdG90eXBlLl9yZXNpemVXaXRoS2V5Ym9hcmQ7XG4gICAgY29uc3Qgc21hbGwgPSB0b29scy5Bbm5vdGF0aW9uRWRpdG9yVUlNYW5hZ2VyLlRSQU5TTEFURV9TTUFMTDtcbiAgICBjb25zdCBiaWcgPSB0b29scy5Bbm5vdGF0aW9uRWRpdG9yVUlNYW5hZ2VyLlRSQU5TTEFURV9CSUc7XG4gICAgcmV0dXJuICgwLHV0aWwuc2hhZG93KSh0aGlzLCBcIl9yZXNpemVyS2V5Ym9hcmRNYW5hZ2VyXCIsIG5ldyB0b29scy5LZXlib2FyZE1hbmFnZXIoW1tbXCJBcnJvd0xlZnRcIiwgXCJtYWMrQXJyb3dMZWZ0XCJdLCByZXNpemUsIHtcbiAgICAgIGFyZ3M6IFstc21hbGwsIDBdXG4gICAgfV0sIFtbXCJjdHJsK0Fycm93TGVmdFwiLCBcIm1hYytzaGlmdCtBcnJvd0xlZnRcIl0sIHJlc2l6ZSwge1xuICAgICAgYXJnczogWy1iaWcsIDBdXG4gICAgfV0sIFtbXCJBcnJvd1JpZ2h0XCIsIFwibWFjK0Fycm93UmlnaHRcIl0sIHJlc2l6ZSwge1xuICAgICAgYXJnczogW3NtYWxsLCAwXVxuICAgIH1dLCBbW1wiY3RybCtBcnJvd1JpZ2h0XCIsIFwibWFjK3NoaWZ0K0Fycm93UmlnaHRcIl0sIHJlc2l6ZSwge1xuICAgICAgYXJnczogW2JpZywgMF1cbiAgICB9XSwgW1tcIkFycm93VXBcIiwgXCJtYWMrQXJyb3dVcFwiXSwgcmVzaXplLCB7XG4gICAgICBhcmdzOiBbMCwgLXNtYWxsXVxuICAgIH1dLCBbW1wiY3RybCtBcnJvd1VwXCIsIFwibWFjK3NoaWZ0K0Fycm93VXBcIl0sIHJlc2l6ZSwge1xuICAgICAgYXJnczogWzAsIC1iaWddXG4gICAgfV0sIFtbXCJBcnJvd0Rvd25cIiwgXCJtYWMrQXJyb3dEb3duXCJdLCByZXNpemUsIHtcbiAgICAgIGFyZ3M6IFswLCBzbWFsbF1cbiAgICB9XSwgW1tcImN0cmwrQXJyb3dEb3duXCIsIFwibWFjK3NoaWZ0K0Fycm93RG93blwiXSwgcmVzaXplLCB7XG4gICAgICBhcmdzOiBbMCwgYmlnXVxuICAgIH1dLCBbW1wiRXNjYXBlXCIsIFwibWFjK0VzY2FwZVwiXSwgQW5ub3RhdGlvbkVkaXRvci5wcm90b3R5cGUuX3N0b3BSZXNpemluZ1dpdGhLZXlib2FyZF1dKSk7XG4gIH1cbiAgY29uc3RydWN0b3IocGFyYW1ldGVycykge1xuICAgIGlmICh0aGlzLmNvbnN0cnVjdG9yID09PSBBbm5vdGF0aW9uRWRpdG9yKSB7XG4gICAgICAoMCx1dGlsLnVucmVhY2hhYmxlKShcIkNhbm5vdCBpbml0aWFsaXplIEFubm90YXRpb25FZGl0b3IuXCIpO1xuICAgIH1cbiAgICB0aGlzLnBhcmVudCA9IHBhcmFtZXRlcnMucGFyZW50O1xuICAgIHRoaXMuaWQgPSBwYXJhbWV0ZXJzLmlkO1xuICAgIHRoaXMud2lkdGggPSB0aGlzLmhlaWdodCA9IG51bGw7XG4gICAgdGhpcy5wYWdlSW5kZXggPSBwYXJhbWV0ZXJzLnBhcmVudC5wYWdlSW5kZXg7XG4gICAgdGhpcy5uYW1lID0gcGFyYW1ldGVycy5uYW1lO1xuICAgIHRoaXMuZGl2ID0gbnVsbDtcbiAgICB0aGlzLl91aU1hbmFnZXIgPSBwYXJhbWV0ZXJzLnVpTWFuYWdlcjtcbiAgICB0aGlzLmFubm90YXRpb25FbGVtZW50SWQgPSBudWxsO1xuICAgIHRoaXMuX3dpbGxLZWVwQXNwZWN0UmF0aW8gPSBmYWxzZTtcbiAgICB0aGlzLl9pbml0aWFsT3B0aW9ucy5pc0NlbnRlcmVkID0gcGFyYW1ldGVycy5pc0NlbnRlcmVkO1xuICAgIHRoaXMuX3N0cnVjdFRyZWVQYXJlbnRJZCA9IG51bGw7XG4gICAgY29uc3Qge1xuICAgICAgcm90YXRpb24sXG4gICAgICByYXdEaW1zOiB7XG4gICAgICAgIHBhZ2VXaWR0aCxcbiAgICAgICAgcGFnZUhlaWdodCxcbiAgICAgICAgcGFnZVgsXG4gICAgICAgIHBhZ2VZXG4gICAgICB9XG4gICAgfSA9IHRoaXMucGFyZW50LnZpZXdwb3J0O1xuICAgIHRoaXMucm90YXRpb24gPSByb3RhdGlvbjtcbiAgICB0aGlzLnBhZ2VSb3RhdGlvbiA9ICgzNjAgKyByb3RhdGlvbiAtIHRoaXMuX3VpTWFuYWdlci52aWV3UGFyYW1ldGVycy5yb3RhdGlvbikgJSAzNjA7XG4gICAgdGhpcy5wYWdlRGltZW5zaW9ucyA9IFtwYWdlV2lkdGgsIHBhZ2VIZWlnaHRdO1xuICAgIHRoaXMucGFnZVRyYW5zbGF0aW9uID0gW3BhZ2VYLCBwYWdlWV07XG4gICAgY29uc3QgW3dpZHRoLCBoZWlnaHRdID0gdGhpcy5wYXJlbnREaW1lbnNpb25zO1xuICAgIHRoaXMueCA9IHBhcmFtZXRlcnMueCAvIHdpZHRoO1xuICAgIHRoaXMueSA9IHBhcmFtZXRlcnMueSAvIGhlaWdodDtcbiAgICB0aGlzLmlzQXR0YWNoZWRUb0RPTSA9IGZhbHNlO1xuICAgIHRoaXMuZGVsZXRlZCA9IGZhbHNlO1xuICB9XG4gIGdldCBlZGl0b3JUeXBlKCkge1xuICAgIHJldHVybiBPYmplY3QuZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3IuX3R5cGU7XG4gIH1cbiAgc3RhdGljIGdldCBfZGVmYXVsdExpbmVDb2xvcigpIHtcbiAgICByZXR1cm4gKDAsdXRpbC5zaGFkb3cpKHRoaXMsIFwiX2RlZmF1bHRMaW5lQ29sb3JcIiwgdGhpcy5fY29sb3JNYW5hZ2VyLmdldEhleENvZGUoXCJDYW52YXNUZXh0XCIpKTtcbiAgfVxuICBzdGF0aWMgZGVsZXRlQW5ub3RhdGlvbkVsZW1lbnQoZWRpdG9yKSB7XG4gICAgY29uc3QgZmFrZUVkaXRvciA9IG5ldyBGYWtlRWRpdG9yKHtcbiAgICAgIGlkOiBlZGl0b3IucGFyZW50LmdldE5leHRJZCgpLFxuICAgICAgcGFyZW50OiBlZGl0b3IucGFyZW50LFxuICAgICAgdWlNYW5hZ2VyOiBlZGl0b3IuX3VpTWFuYWdlclxuICAgIH0pO1xuICAgIGZha2VFZGl0b3IuYW5ub3RhdGlvbkVsZW1lbnRJZCA9IGVkaXRvci5hbm5vdGF0aW9uRWxlbWVudElkO1xuICAgIGZha2VFZGl0b3IuZGVsZXRlZCA9IHRydWU7XG4gICAgZmFrZUVkaXRvci5fdWlNYW5hZ2VyLmFkZFRvQW5ub3RhdGlvblN0b3JhZ2UoZmFrZUVkaXRvcik7XG4gIH1cbiAgc3RhdGljIGluaXRpYWxpemUobDEwbiwgb3B0aW9ucyA9IG51bGwpIHtcbiAgICBBbm5vdGF0aW9uRWRpdG9yLl9sMTBuUHJvbWlzZSB8fD0gbmV3IE1hcChbXCJwZGZqcy1lZGl0b3ItYWx0LXRleHQtYnV0dG9uLWxhYmVsXCIsIFwicGRmanMtZWRpdG9yLWFsdC10ZXh0LWVkaXQtYnV0dG9uLWxhYmVsXCIsIFwicGRmanMtZWRpdG9yLWFsdC10ZXh0LWRlY29yYXRpdmUtdG9vbHRpcFwiLCBcInBkZmpzLWVkaXRvci1yZXNpemVyLWxhYmVsLXRvcExlZnRcIiwgXCJwZGZqcy1lZGl0b3ItcmVzaXplci1sYWJlbC10b3BNaWRkbGVcIiwgXCJwZGZqcy1lZGl0b3ItcmVzaXplci1sYWJlbC10b3BSaWdodFwiLCBcInBkZmpzLWVkaXRvci1yZXNpemVyLWxhYmVsLW1pZGRsZVJpZ2h0XCIsIFwicGRmanMtZWRpdG9yLXJlc2l6ZXItbGFiZWwtYm90dG9tUmlnaHRcIiwgXCJwZGZqcy1lZGl0b3ItcmVzaXplci1sYWJlbC1ib3R0b21NaWRkbGVcIiwgXCJwZGZqcy1lZGl0b3ItcmVzaXplci1sYWJlbC1ib3R0b21MZWZ0XCIsIFwicGRmanMtZWRpdG9yLXJlc2l6ZXItbGFiZWwtbWlkZGxlTGVmdFwiXS5tYXAoc3RyID0+IFtzdHIsIGwxMG4uZ2V0KHN0ci5yZXBsYWNlQWxsKC8oW0EtWl0pL2csIGMgPT4gYC0ke2MudG9Mb3dlckNhc2UoKX1gKSldKSk7XG4gICAgaWYgKG9wdGlvbnM/LnN0cmluZ3MpIHtcbiAgICAgIGZvciAoY29uc3Qgc3RyIG9mIG9wdGlvbnMuc3RyaW5ncykge1xuICAgICAgICBBbm5vdGF0aW9uRWRpdG9yLl9sMTBuUHJvbWlzZS5zZXQoc3RyLCBsMTBuLmdldChzdHIpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKEFubm90YXRpb25FZGl0b3IuX2JvcmRlckxpbmVXaWR0aCAhPT0gLTEpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3Qgc3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCk7XG4gICAgQW5ub3RhdGlvbkVkaXRvci5fYm9yZGVyTGluZVdpZHRoID0gcGFyc2VGbG9hdChzdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKFwiLS1vdXRsaW5lLXdpZHRoXCIpKSB8fCAwO1xuICB9XG4gIHN0YXRpYyB1cGRhdGVEZWZhdWx0UGFyYW1zKF90eXBlLCBfdmFsdWUpIHt9XG4gIHN0YXRpYyBnZXQgZGVmYXVsdFByb3BlcnRpZXNUb1VwZGF0ZSgpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgc3RhdGljIGlzSGFuZGxpbmdNaW1lRm9yUGFzdGluZyhtaW1lKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHN0YXRpYyBwYXN0ZShpdGVtLCBwYXJlbnQpIHtcbiAgICAoMCx1dGlsLnVucmVhY2hhYmxlKShcIk5vdCBpbXBsZW1lbnRlZFwiKTtcbiAgfVxuICBnZXQgcHJvcGVydGllc1RvVXBkYXRlKCkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuICBnZXQgX2lzRHJhZ2dhYmxlKCkge1xuICAgIHJldHVybiB0aGlzLiNpc0RyYWdnYWJsZTtcbiAgfVxuICBzZXQgX2lzRHJhZ2dhYmxlKHZhbHVlKSB7XG4gICAgdGhpcy4jaXNEcmFnZ2FibGUgPSB2YWx1ZTtcbiAgICB0aGlzLmRpdj8uY2xhc3NMaXN0LnRvZ2dsZShcImRyYWdnYWJsZVwiLCB2YWx1ZSk7XG4gIH1cbiAgZ2V0IGlzRW50ZXJIYW5kbGVkKCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGNlbnRlcigpIHtcbiAgICBjb25zdCBbcGFnZVdpZHRoLCBwYWdlSGVpZ2h0XSA9IHRoaXMucGFnZURpbWVuc2lvbnM7XG4gICAgc3dpdGNoICh0aGlzLnBhcmVudFJvdGF0aW9uKSB7XG4gICAgICBjYXNlIDkwOlxuICAgICAgICB0aGlzLnggLT0gdGhpcy5oZWlnaHQgKiBwYWdlSGVpZ2h0IC8gKHBhZ2VXaWR0aCAqIDIpO1xuICAgICAgICB0aGlzLnkgKz0gdGhpcy53aWR0aCAqIHBhZ2VXaWR0aCAvIChwYWdlSGVpZ2h0ICogMik7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAxODA6XG4gICAgICAgIHRoaXMueCArPSB0aGlzLndpZHRoIC8gMjtcbiAgICAgICAgdGhpcy55ICs9IHRoaXMuaGVpZ2h0IC8gMjtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDI3MDpcbiAgICAgICAgdGhpcy54ICs9IHRoaXMuaGVpZ2h0ICogcGFnZUhlaWdodCAvIChwYWdlV2lkdGggKiAyKTtcbiAgICAgICAgdGhpcy55IC09IHRoaXMud2lkdGggKiBwYWdlV2lkdGggLyAocGFnZUhlaWdodCAqIDIpO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRoaXMueCAtPSB0aGlzLndpZHRoIC8gMjtcbiAgICAgICAgdGhpcy55IC09IHRoaXMuaGVpZ2h0IC8gMjtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHRoaXMuZml4QW5kU2V0UG9zaXRpb24oKTtcbiAgfVxuICBhZGRDb21tYW5kcyhwYXJhbXMpIHtcbiAgICB0aGlzLl91aU1hbmFnZXIuYWRkQ29tbWFuZHMocGFyYW1zKTtcbiAgfVxuICBnZXQgY3VycmVudExheWVyKCkge1xuICAgIHJldHVybiB0aGlzLl91aU1hbmFnZXIuY3VycmVudExheWVyO1xuICB9XG4gIHNldEluQmFja2dyb3VuZCgpIHtcbiAgICB0aGlzLmRpdi5zdHlsZS56SW5kZXggPSAwO1xuICB9XG4gIHNldEluRm9yZWdyb3VuZCgpIHtcbiAgICB0aGlzLmRpdi5zdHlsZS56SW5kZXggPSB0aGlzLiN6SW5kZXg7XG4gIH1cbiAgc2V0UGFyZW50KHBhcmVudCkge1xuICAgIGlmIChwYXJlbnQgIT09IG51bGwpIHtcbiAgICAgIHRoaXMucGFnZUluZGV4ID0gcGFyZW50LnBhZ2VJbmRleDtcbiAgICAgIHRoaXMucGFnZURpbWVuc2lvbnMgPSBwYXJlbnQucGFnZURpbWVuc2lvbnM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuI3N0b3BSZXNpemluZygpO1xuICAgIH1cbiAgICB0aGlzLnBhcmVudCA9IHBhcmVudDtcbiAgfVxuICBmb2N1c2luKGV2ZW50KSB7XG4gICAgaWYgKCF0aGlzLl9mb2N1c0V2ZW50c0FsbG93ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKCF0aGlzLiNoYXNCZWVuQ2xpY2tlZCkge1xuICAgICAgdGhpcy5wYXJlbnQuc2V0U2VsZWN0ZWQodGhpcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuI2hhc0JlZW5DbGlja2VkID0gZmFsc2U7XG4gICAgfVxuICB9XG4gIGZvY3Vzb3V0KGV2ZW50KSB7XG4gICAgaWYgKCF0aGlzLl9mb2N1c0V2ZW50c0FsbG93ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKCF0aGlzLmlzQXR0YWNoZWRUb0RPTSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCB0YXJnZXQgPSBldmVudC5yZWxhdGVkVGFyZ2V0O1xuICAgIGlmICh0YXJnZXQ/LmNsb3Nlc3QoYCMke3RoaXMuaWR9YCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICBpZiAoIXRoaXMucGFyZW50Py5pc011bHRpcGxlU2VsZWN0aW9uKSB7XG4gICAgICB0aGlzLmNvbW1pdE9yUmVtb3ZlKCk7XG4gICAgfVxuICB9XG4gIGNvbW1pdE9yUmVtb3ZlKCkge1xuICAgIGlmICh0aGlzLmlzRW1wdHkoKSkge1xuICAgICAgdGhpcy5yZW1vdmUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5jb21taXQoKTtcbiAgICB9XG4gIH1cbiAgY29tbWl0KCkge1xuICAgIHRoaXMuYWRkVG9Bbm5vdGF0aW9uU3RvcmFnZSgpO1xuICB9XG4gIGFkZFRvQW5ub3RhdGlvblN0b3JhZ2UoKSB7XG4gICAgdGhpcy5fdWlNYW5hZ2VyLmFkZFRvQW5ub3RhdGlvblN0b3JhZ2UodGhpcyk7XG4gIH1cbiAgc2V0QXQoeCwgeSwgdHgsIHR5KSB7XG4gICAgY29uc3QgW3dpZHRoLCBoZWlnaHRdID0gdGhpcy5wYXJlbnREaW1lbnNpb25zO1xuICAgIFt0eCwgdHldID0gdGhpcy5zY3JlZW5Ub1BhZ2VUcmFuc2xhdGlvbih0eCwgdHkpO1xuICAgIHRoaXMueCA9ICh4ICsgdHgpIC8gd2lkdGg7XG4gICAgdGhpcy55ID0gKHkgKyB0eSkgLyBoZWlnaHQ7XG4gICAgdGhpcy5maXhBbmRTZXRQb3NpdGlvbigpO1xuICB9XG4gICN0cmFuc2xhdGUoW3dpZHRoLCBoZWlnaHRdLCB4LCB5KSB7XG4gICAgW3gsIHldID0gdGhpcy5zY3JlZW5Ub1BhZ2VUcmFuc2xhdGlvbih4LCB5KTtcbiAgICB0aGlzLnggKz0geCAvIHdpZHRoO1xuICAgIHRoaXMueSArPSB5IC8gaGVpZ2h0O1xuICAgIHRoaXMuZml4QW5kU2V0UG9zaXRpb24oKTtcbiAgfVxuICB0cmFuc2xhdGUoeCwgeSkge1xuICAgIHRoaXMuI3RyYW5zbGF0ZSh0aGlzLnBhcmVudERpbWVuc2lvbnMsIHgsIHkpO1xuICB9XG4gIHRyYW5zbGF0ZUluUGFnZSh4LCB5KSB7XG4gICAgdGhpcy4jdHJhbnNsYXRlKHRoaXMucGFnZURpbWVuc2lvbnMsIHgsIHkpO1xuICAgIHRoaXMuZGl2LnNjcm9sbEludG9WaWV3KHtcbiAgICAgIGJsb2NrOiBcIm5lYXJlc3RcIlxuICAgIH0pO1xuICB9XG4gIGRyYWcodHgsIHR5KSB7XG4gICAgY29uc3QgW3BhcmVudFdpZHRoLCBwYXJlbnRIZWlnaHRdID0gdGhpcy5wYXJlbnREaW1lbnNpb25zO1xuICAgIHRoaXMueCArPSB0eCAvIHBhcmVudFdpZHRoO1xuICAgIHRoaXMueSArPSB0eSAvIHBhcmVudEhlaWdodDtcbiAgICBpZiAodGhpcy5wYXJlbnQgJiYgKHRoaXMueCA8IDAgfHwgdGhpcy54ID4gMSB8fCB0aGlzLnkgPCAwIHx8IHRoaXMueSA+IDEpKSB7XG4gICAgICBjb25zdCB7XG4gICAgICAgIHgsXG4gICAgICAgIHlcbiAgICAgIH0gPSB0aGlzLmRpdi5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgIGlmICh0aGlzLnBhcmVudC5maW5kTmV3UGFyZW50KHRoaXMsIHgsIHkpKSB7XG4gICAgICAgIHRoaXMueCAtPSBNYXRoLmZsb29yKHRoaXMueCk7XG4gICAgICAgIHRoaXMueSAtPSBNYXRoLmZsb29yKHRoaXMueSk7XG4gICAgICB9XG4gICAgfVxuICAgIGxldCB7XG4gICAgICB4LFxuICAgICAgeVxuICAgIH0gPSB0aGlzO1xuICAgIGNvbnN0IFtieCwgYnldID0gdGhpcy4jZ2V0QmFzZVRyYW5zbGF0aW9uKCk7XG4gICAgeCArPSBieDtcbiAgICB5ICs9IGJ5O1xuICAgIHRoaXMuZGl2LnN0eWxlLmxlZnQgPSBgJHsoMTAwICogeCkudG9GaXhlZCgyKX0lYDtcbiAgICB0aGlzLmRpdi5zdHlsZS50b3AgPSBgJHsoMTAwICogeSkudG9GaXhlZCgyKX0lYDtcbiAgICB0aGlzLmRpdi5zY3JvbGxJbnRvVmlldyh7XG4gICAgICBibG9jazogXCJuZWFyZXN0XCJcbiAgICB9KTtcbiAgfVxuICAjZ2V0QmFzZVRyYW5zbGF0aW9uKCkge1xuICAgIGNvbnN0IFtwYXJlbnRXaWR0aCwgcGFyZW50SGVpZ2h0XSA9IHRoaXMucGFyZW50RGltZW5zaW9ucztcbiAgICBjb25zdCB7XG4gICAgICBfYm9yZGVyTGluZVdpZHRoXG4gICAgfSA9IEFubm90YXRpb25FZGl0b3I7XG4gICAgY29uc3QgeCA9IF9ib3JkZXJMaW5lV2lkdGggLyBwYXJlbnRXaWR0aDtcbiAgICBjb25zdCB5ID0gX2JvcmRlckxpbmVXaWR0aCAvIHBhcmVudEhlaWdodDtcbiAgICBzd2l0Y2ggKHRoaXMucm90YXRpb24pIHtcbiAgICAgIGNhc2UgOTA6XG4gICAgICAgIHJldHVybiBbLXgsIHldO1xuICAgICAgY2FzZSAxODA6XG4gICAgICAgIHJldHVybiBbeCwgeV07XG4gICAgICBjYXNlIDI3MDpcbiAgICAgICAgcmV0dXJuIFt4LCAteV07XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gWy14LCAteV07XG4gICAgfVxuICB9XG4gIGZpeEFuZFNldFBvc2l0aW9uKHJvdGF0aW9uID0gdGhpcy5yb3RhdGlvbikge1xuICAgIGNvbnN0IFtwYWdlV2lkdGgsIHBhZ2VIZWlnaHRdID0gdGhpcy5wYWdlRGltZW5zaW9ucztcbiAgICBsZXQge1xuICAgICAgeCxcbiAgICAgIHksXG4gICAgICB3aWR0aCxcbiAgICAgIGhlaWdodFxuICAgIH0gPSB0aGlzO1xuICAgIHdpZHRoICo9IHBhZ2VXaWR0aDtcbiAgICBoZWlnaHQgKj0gcGFnZUhlaWdodDtcbiAgICB4ICo9IHBhZ2VXaWR0aDtcbiAgICB5ICo9IHBhZ2VIZWlnaHQ7XG4gICAgc3dpdGNoIChyb3RhdGlvbikge1xuICAgICAgY2FzZSAwOlxuICAgICAgICB4ID0gTWF0aC5tYXgoMCwgTWF0aC5taW4ocGFnZVdpZHRoIC0gd2lkdGgsIHgpKTtcbiAgICAgICAgeSA9IE1hdGgubWF4KDAsIE1hdGgubWluKHBhZ2VIZWlnaHQgLSBoZWlnaHQsIHkpKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDkwOlxuICAgICAgICB4ID0gTWF0aC5tYXgoMCwgTWF0aC5taW4ocGFnZVdpZHRoIC0gaGVpZ2h0LCB4KSk7XG4gICAgICAgIHkgPSBNYXRoLm1pbihwYWdlSGVpZ2h0LCBNYXRoLm1heCh3aWR0aCwgeSkpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMTgwOlxuICAgICAgICB4ID0gTWF0aC5taW4ocGFnZVdpZHRoLCBNYXRoLm1heCh3aWR0aCwgeCkpO1xuICAgICAgICB5ID0gTWF0aC5taW4ocGFnZUhlaWdodCwgTWF0aC5tYXgoaGVpZ2h0LCB5KSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAyNzA6XG4gICAgICAgIHggPSBNYXRoLm1pbihwYWdlV2lkdGgsIE1hdGgubWF4KGhlaWdodCwgeCkpO1xuICAgICAgICB5ID0gTWF0aC5tYXgoMCwgTWF0aC5taW4ocGFnZUhlaWdodCAtIHdpZHRoLCB5KSk7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICB0aGlzLnggPSB4IC89IHBhZ2VXaWR0aDtcbiAgICB0aGlzLnkgPSB5IC89IHBhZ2VIZWlnaHQ7XG4gICAgY29uc3QgW2J4LCBieV0gPSB0aGlzLiNnZXRCYXNlVHJhbnNsYXRpb24oKTtcbiAgICB4ICs9IGJ4O1xuICAgIHkgKz0gYnk7XG4gICAgY29uc3Qge1xuICAgICAgc3R5bGVcbiAgICB9ID0gdGhpcy5kaXY7XG4gICAgc3R5bGUubGVmdCA9IGAkeygxMDAgKiB4KS50b0ZpeGVkKDIpfSVgO1xuICAgIHN0eWxlLnRvcCA9IGAkeygxMDAgKiB5KS50b0ZpeGVkKDIpfSVgO1xuICAgIHRoaXMubW92ZUluRE9NKCk7XG4gIH1cbiAgc3RhdGljICNyb3RhdGVQb2ludCh4LCB5LCBhbmdsZSkge1xuICAgIHN3aXRjaCAoYW5nbGUpIHtcbiAgICAgIGNhc2UgOTA6XG4gICAgICAgIHJldHVybiBbeSwgLXhdO1xuICAgICAgY2FzZSAxODA6XG4gICAgICAgIHJldHVybiBbLXgsIC15XTtcbiAgICAgIGNhc2UgMjcwOlxuICAgICAgICByZXR1cm4gWy15LCB4XTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBbeCwgeV07XG4gICAgfVxuICB9XG4gIHNjcmVlblRvUGFnZVRyYW5zbGF0aW9uKHgsIHkpIHtcbiAgICByZXR1cm4gQW5ub3RhdGlvbkVkaXRvci4jcm90YXRlUG9pbnQoeCwgeSwgdGhpcy5wYXJlbnRSb3RhdGlvbik7XG4gIH1cbiAgcGFnZVRyYW5zbGF0aW9uVG9TY3JlZW4oeCwgeSkge1xuICAgIHJldHVybiBBbm5vdGF0aW9uRWRpdG9yLiNyb3RhdGVQb2ludCh4LCB5LCAzNjAgLSB0aGlzLnBhcmVudFJvdGF0aW9uKTtcbiAgfVxuICAjZ2V0Um90YXRpb25NYXRyaXgocm90YXRpb24pIHtcbiAgICBzd2l0Y2ggKHJvdGF0aW9uKSB7XG4gICAgICBjYXNlIDkwOlxuICAgICAgICB7XG4gICAgICAgICAgY29uc3QgW3BhZ2VXaWR0aCwgcGFnZUhlaWdodF0gPSB0aGlzLnBhZ2VEaW1lbnNpb25zO1xuICAgICAgICAgIHJldHVybiBbMCwgLXBhZ2VXaWR0aCAvIHBhZ2VIZWlnaHQsIHBhZ2VIZWlnaHQgLyBwYWdlV2lkdGgsIDBdO1xuICAgICAgICB9XG4gICAgICBjYXNlIDE4MDpcbiAgICAgICAgcmV0dXJuIFstMSwgMCwgMCwgLTFdO1xuICAgICAgY2FzZSAyNzA6XG4gICAgICAgIHtcbiAgICAgICAgICBjb25zdCBbcGFnZVdpZHRoLCBwYWdlSGVpZ2h0XSA9IHRoaXMucGFnZURpbWVuc2lvbnM7XG4gICAgICAgICAgcmV0dXJuIFswLCBwYWdlV2lkdGggLyBwYWdlSGVpZ2h0LCAtcGFnZUhlaWdodCAvIHBhZ2VXaWR0aCwgMF07XG4gICAgICAgIH1cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBbMSwgMCwgMCwgMV07XG4gICAgfVxuICB9XG4gIGdldCBwYXJlbnRTY2FsZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fdWlNYW5hZ2VyLnZpZXdQYXJhbWV0ZXJzLnJlYWxTY2FsZTtcbiAgfVxuICBnZXQgcGFyZW50Um90YXRpb24oKSB7XG4gICAgcmV0dXJuICh0aGlzLl91aU1hbmFnZXIudmlld1BhcmFtZXRlcnMucm90YXRpb24gKyB0aGlzLnBhZ2VSb3RhdGlvbikgJSAzNjA7XG4gIH1cbiAgZ2V0IHBhcmVudERpbWVuc2lvbnMoKSB7XG4gICAgY29uc3Qge1xuICAgICAgcGFyZW50U2NhbGUsXG4gICAgICBwYWdlRGltZW5zaW9uczogW3BhZ2VXaWR0aCwgcGFnZUhlaWdodF1cbiAgICB9ID0gdGhpcztcbiAgICBjb25zdCBzY2FsZWRXaWR0aCA9IHBhZ2VXaWR0aCAqIHBhcmVudFNjYWxlO1xuICAgIGNvbnN0IHNjYWxlZEhlaWdodCA9IHBhZ2VIZWlnaHQgKiBwYXJlbnRTY2FsZTtcbiAgICByZXR1cm4gdXRpbC5GZWF0dXJlVGVzdC5pc0NTU1JvdW5kU3VwcG9ydGVkID8gW01hdGgucm91bmQoc2NhbGVkV2lkdGgpLCBNYXRoLnJvdW5kKHNjYWxlZEhlaWdodCldIDogW3NjYWxlZFdpZHRoLCBzY2FsZWRIZWlnaHRdO1xuICB9XG4gIHNldERpbXMod2lkdGgsIGhlaWdodCkge1xuICAgIGNvbnN0IFtwYXJlbnRXaWR0aCwgcGFyZW50SGVpZ2h0XSA9IHRoaXMucGFyZW50RGltZW5zaW9ucztcbiAgICB0aGlzLmRpdi5zdHlsZS53aWR0aCA9IGAkeygxMDAgKiB3aWR0aCAvIHBhcmVudFdpZHRoKS50b0ZpeGVkKDIpfSVgO1xuICAgIGlmICghdGhpcy4ja2VlcEFzcGVjdFJhdGlvKSB7XG4gICAgICB0aGlzLmRpdi5zdHlsZS5oZWlnaHQgPSBgJHsoMTAwICogaGVpZ2h0IC8gcGFyZW50SGVpZ2h0KS50b0ZpeGVkKDIpfSVgO1xuICAgIH1cbiAgfVxuICBmaXhEaW1zKCkge1xuICAgIGNvbnN0IHtcbiAgICAgIHN0eWxlXG4gICAgfSA9IHRoaXMuZGl2O1xuICAgIGNvbnN0IHtcbiAgICAgIGhlaWdodCxcbiAgICAgIHdpZHRoXG4gICAgfSA9IHN0eWxlO1xuICAgIGNvbnN0IHdpZHRoUGVyY2VudCA9IHdpZHRoLmVuZHNXaXRoKFwiJVwiKTtcbiAgICBjb25zdCBoZWlnaHRQZXJjZW50ID0gIXRoaXMuI2tlZXBBc3BlY3RSYXRpbyAmJiBoZWlnaHQuZW5kc1dpdGgoXCIlXCIpO1xuICAgIGlmICh3aWR0aFBlcmNlbnQgJiYgaGVpZ2h0UGVyY2VudCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBbcGFyZW50V2lkdGgsIHBhcmVudEhlaWdodF0gPSB0aGlzLnBhcmVudERpbWVuc2lvbnM7XG4gICAgaWYgKCF3aWR0aFBlcmNlbnQpIHtcbiAgICAgIHN0eWxlLndpZHRoID0gYCR7KDEwMCAqIHBhcnNlRmxvYXQod2lkdGgpIC8gcGFyZW50V2lkdGgpLnRvRml4ZWQoMil9JWA7XG4gICAgfVxuICAgIGlmICghdGhpcy4ja2VlcEFzcGVjdFJhdGlvICYmICFoZWlnaHRQZXJjZW50KSB7XG4gICAgICBzdHlsZS5oZWlnaHQgPSBgJHsoMTAwICogcGFyc2VGbG9hdChoZWlnaHQpIC8gcGFyZW50SGVpZ2h0KS50b0ZpeGVkKDIpfSVgO1xuICAgIH1cbiAgfVxuICBnZXRJbml0aWFsVHJhbnNsYXRpb24oKSB7XG4gICAgcmV0dXJuIFswLCAwXTtcbiAgfVxuICAjY3JlYXRlUmVzaXplcnMoKSB7XG4gICAgaWYgKHRoaXMuI3Jlc2l6ZXJzRGl2KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuI3Jlc2l6ZXJzRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICB0aGlzLiNyZXNpemVyc0Rpdi5jbGFzc0xpc3QuYWRkKFwicmVzaXplcnNcIik7XG4gICAgY29uc3QgY2xhc3NlcyA9IHRoaXMuX3dpbGxLZWVwQXNwZWN0UmF0aW8gPyBbXCJ0b3BMZWZ0XCIsIFwidG9wUmlnaHRcIiwgXCJib3R0b21SaWdodFwiLCBcImJvdHRvbUxlZnRcIl0gOiBbXCJ0b3BMZWZ0XCIsIFwidG9wTWlkZGxlXCIsIFwidG9wUmlnaHRcIiwgXCJtaWRkbGVSaWdodFwiLCBcImJvdHRvbVJpZ2h0XCIsIFwiYm90dG9tTWlkZGxlXCIsIFwiYm90dG9tTGVmdFwiLCBcIm1pZGRsZUxlZnRcIl07XG4gICAgZm9yIChjb25zdCBuYW1lIG9mIGNsYXNzZXMpIHtcbiAgICAgIGNvbnN0IGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICB0aGlzLiNyZXNpemVyc0Rpdi5hcHBlbmQoZGl2KTtcbiAgICAgIGRpdi5jbGFzc0xpc3QuYWRkKFwicmVzaXplclwiLCBuYW1lKTtcbiAgICAgIGRpdi5zZXRBdHRyaWJ1dGUoXCJkYXRhLXJlc2l6ZXItbmFtZVwiLCBuYW1lKTtcbiAgICAgIGRpdi5hZGRFdmVudExpc3RlbmVyKFwicG9pbnRlcmRvd25cIiwgdGhpcy4jcmVzaXplclBvaW50ZXJkb3duLmJpbmQodGhpcywgbmFtZSkpO1xuICAgICAgZGl2LmFkZEV2ZW50TGlzdGVuZXIoXCJjb250ZXh0bWVudVwiLCBkaXNwbGF5X3V0aWxzLm5vQ29udGV4dE1lbnUpO1xuICAgICAgZGl2LnRhYkluZGV4ID0gLTE7XG4gICAgfVxuICAgIHRoaXMuZGl2LnByZXBlbmQodGhpcy4jcmVzaXplcnNEaXYpO1xuICB9XG4gICNyZXNpemVyUG9pbnRlcmRvd24obmFtZSwgZXZlbnQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGNvbnN0IHtcbiAgICAgIGlzTWFjXG4gICAgfSA9IHV0aWwuRmVhdHVyZVRlc3QucGxhdGZvcm07XG4gICAgaWYgKGV2ZW50LmJ1dHRvbiAhPT0gMCB8fCBldmVudC5jdHJsS2V5ICYmIGlzTWFjKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuI2FsdFRleHQ/LnRvZ2dsZShmYWxzZSk7XG4gICAgY29uc3QgYm91bmRSZXNpemVyUG9pbnRlcm1vdmUgPSB0aGlzLiNyZXNpemVyUG9pbnRlcm1vdmUuYmluZCh0aGlzLCBuYW1lKTtcbiAgICBjb25zdCBzYXZlZERyYWdnYWJsZSA9IHRoaXMuX2lzRHJhZ2dhYmxlO1xuICAgIHRoaXMuX2lzRHJhZ2dhYmxlID0gZmFsc2U7XG4gICAgY29uc3QgcG9pbnRlck1vdmVPcHRpb25zID0ge1xuICAgICAgcGFzc2l2ZTogdHJ1ZSxcbiAgICAgIGNhcHR1cmU6IHRydWVcbiAgICB9O1xuICAgIHRoaXMucGFyZW50LnRvZ2dsZVBvaW50ZXJFdmVudHMoZmFsc2UpO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicG9pbnRlcm1vdmVcIiwgYm91bmRSZXNpemVyUG9pbnRlcm1vdmUsIHBvaW50ZXJNb3ZlT3B0aW9ucyk7XG4gICAgY29uc3Qgc2F2ZWRYID0gdGhpcy54O1xuICAgIGNvbnN0IHNhdmVkWSA9IHRoaXMueTtcbiAgICBjb25zdCBzYXZlZFdpZHRoID0gdGhpcy53aWR0aDtcbiAgICBjb25zdCBzYXZlZEhlaWdodCA9IHRoaXMuaGVpZ2h0O1xuICAgIGNvbnN0IHNhdmVkUGFyZW50Q3Vyc29yID0gdGhpcy5wYXJlbnQuZGl2LnN0eWxlLmN1cnNvcjtcbiAgICBjb25zdCBzYXZlZEN1cnNvciA9IHRoaXMuZGl2LnN0eWxlLmN1cnNvcjtcbiAgICB0aGlzLmRpdi5zdHlsZS5jdXJzb3IgPSB0aGlzLnBhcmVudC5kaXYuc3R5bGUuY3Vyc29yID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZXZlbnQudGFyZ2V0KS5jdXJzb3I7XG4gICAgY29uc3QgcG9pbnRlclVwQ2FsbGJhY2sgPSAoKSA9PiB7XG4gICAgICB0aGlzLnBhcmVudC50b2dnbGVQb2ludGVyRXZlbnRzKHRydWUpO1xuICAgICAgdGhpcy4jYWx0VGV4dD8udG9nZ2xlKHRydWUpO1xuICAgICAgdGhpcy5faXNEcmFnZ2FibGUgPSBzYXZlZERyYWdnYWJsZTtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwicG9pbnRlcnVwXCIsIHBvaW50ZXJVcENhbGxiYWNrKTtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwiYmx1clwiLCBwb2ludGVyVXBDYWxsYmFjayk7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInBvaW50ZXJtb3ZlXCIsIGJvdW5kUmVzaXplclBvaW50ZXJtb3ZlLCBwb2ludGVyTW92ZU9wdGlvbnMpO1xuICAgICAgdGhpcy5wYXJlbnQuZGl2LnN0eWxlLmN1cnNvciA9IHNhdmVkUGFyZW50Q3Vyc29yO1xuICAgICAgdGhpcy5kaXYuc3R5bGUuY3Vyc29yID0gc2F2ZWRDdXJzb3I7XG4gICAgICB0aGlzLiNhZGRSZXNpemVUb1VuZG9TdGFjayhzYXZlZFgsIHNhdmVkWSwgc2F2ZWRXaWR0aCwgc2F2ZWRIZWlnaHQpO1xuICAgIH07XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJwb2ludGVydXBcIiwgcG9pbnRlclVwQ2FsbGJhY2spO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwiYmx1clwiLCBwb2ludGVyVXBDYWxsYmFjayk7XG4gIH1cbiAgI2FkZFJlc2l6ZVRvVW5kb1N0YWNrKHNhdmVkWCwgc2F2ZWRZLCBzYXZlZFdpZHRoLCBzYXZlZEhlaWdodCkge1xuICAgIGNvbnN0IG5ld1ggPSB0aGlzLng7XG4gICAgY29uc3QgbmV3WSA9IHRoaXMueTtcbiAgICBjb25zdCBuZXdXaWR0aCA9IHRoaXMud2lkdGg7XG4gICAgY29uc3QgbmV3SGVpZ2h0ID0gdGhpcy5oZWlnaHQ7XG4gICAgaWYgKG5ld1ggPT09IHNhdmVkWCAmJiBuZXdZID09PSBzYXZlZFkgJiYgbmV3V2lkdGggPT09IHNhdmVkV2lkdGggJiYgbmV3SGVpZ2h0ID09PSBzYXZlZEhlaWdodCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLmFkZENvbW1hbmRzKHtcbiAgICAgIGNtZDogKCkgPT4ge1xuICAgICAgICB0aGlzLndpZHRoID0gbmV3V2lkdGg7XG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gbmV3SGVpZ2h0O1xuICAgICAgICB0aGlzLnggPSBuZXdYO1xuICAgICAgICB0aGlzLnkgPSBuZXdZO1xuICAgICAgICBjb25zdCBbcGFyZW50V2lkdGgsIHBhcmVudEhlaWdodF0gPSB0aGlzLnBhcmVudERpbWVuc2lvbnM7XG4gICAgICAgIHRoaXMuc2V0RGltcyhwYXJlbnRXaWR0aCAqIG5ld1dpZHRoLCBwYXJlbnRIZWlnaHQgKiBuZXdIZWlnaHQpO1xuICAgICAgICB0aGlzLmZpeEFuZFNldFBvc2l0aW9uKCk7XG4gICAgICB9LFxuICAgICAgdW5kbzogKCkgPT4ge1xuICAgICAgICB0aGlzLndpZHRoID0gc2F2ZWRXaWR0aDtcbiAgICAgICAgdGhpcy5oZWlnaHQgPSBzYXZlZEhlaWdodDtcbiAgICAgICAgdGhpcy54ID0gc2F2ZWRYO1xuICAgICAgICB0aGlzLnkgPSBzYXZlZFk7XG4gICAgICAgIGNvbnN0IFtwYXJlbnRXaWR0aCwgcGFyZW50SGVpZ2h0XSA9IHRoaXMucGFyZW50RGltZW5zaW9ucztcbiAgICAgICAgdGhpcy5zZXREaW1zKHBhcmVudFdpZHRoICogc2F2ZWRXaWR0aCwgcGFyZW50SGVpZ2h0ICogc2F2ZWRIZWlnaHQpO1xuICAgICAgICB0aGlzLmZpeEFuZFNldFBvc2l0aW9uKCk7XG4gICAgICB9LFxuICAgICAgbXVzdEV4ZWM6IHRydWVcbiAgICB9KTtcbiAgfVxuICAjcmVzaXplclBvaW50ZXJtb3ZlKG5hbWUsIGV2ZW50KSB7XG4gICAgY29uc3QgW3BhcmVudFdpZHRoLCBwYXJlbnRIZWlnaHRdID0gdGhpcy5wYXJlbnREaW1lbnNpb25zO1xuICAgIGNvbnN0IHNhdmVkWCA9IHRoaXMueDtcbiAgICBjb25zdCBzYXZlZFkgPSB0aGlzLnk7XG4gICAgY29uc3Qgc2F2ZWRXaWR0aCA9IHRoaXMud2lkdGg7XG4gICAgY29uc3Qgc2F2ZWRIZWlnaHQgPSB0aGlzLmhlaWdodDtcbiAgICBjb25zdCBtaW5XaWR0aCA9IEFubm90YXRpb25FZGl0b3IuTUlOX1NJWkUgLyBwYXJlbnRXaWR0aDtcbiAgICBjb25zdCBtaW5IZWlnaHQgPSBBbm5vdGF0aW9uRWRpdG9yLk1JTl9TSVpFIC8gcGFyZW50SGVpZ2h0O1xuICAgIGNvbnN0IHJvdW5kID0geCA9PiBNYXRoLnJvdW5kKHggKiAxMDAwMCkgLyAxMDAwMDtcbiAgICBjb25zdCByb3RhdGlvbk1hdHJpeCA9IHRoaXMuI2dldFJvdGF0aW9uTWF0cml4KHRoaXMucm90YXRpb24pO1xuICAgIGNvbnN0IHRyYW5zZiA9ICh4LCB5KSA9PiBbcm90YXRpb25NYXRyaXhbMF0gKiB4ICsgcm90YXRpb25NYXRyaXhbMl0gKiB5LCByb3RhdGlvbk1hdHJpeFsxXSAqIHggKyByb3RhdGlvbk1hdHJpeFszXSAqIHldO1xuICAgIGNvbnN0IGludlJvdGF0aW9uTWF0cml4ID0gdGhpcy4jZ2V0Um90YXRpb25NYXRyaXgoMzYwIC0gdGhpcy5yb3RhdGlvbik7XG4gICAgY29uc3QgaW52VHJhbnNmID0gKHgsIHkpID0+IFtpbnZSb3RhdGlvbk1hdHJpeFswXSAqIHggKyBpbnZSb3RhdGlvbk1hdHJpeFsyXSAqIHksIGludlJvdGF0aW9uTWF0cml4WzFdICogeCArIGludlJvdGF0aW9uTWF0cml4WzNdICogeV07XG4gICAgbGV0IGdldFBvaW50O1xuICAgIGxldCBnZXRPcHBvc2l0ZTtcbiAgICBsZXQgaXNEaWFnb25hbCA9IGZhbHNlO1xuICAgIGxldCBpc0hvcml6b250YWwgPSBmYWxzZTtcbiAgICBzd2l0Y2ggKG5hbWUpIHtcbiAgICAgIGNhc2UgXCJ0b3BMZWZ0XCI6XG4gICAgICAgIGlzRGlhZ29uYWwgPSB0cnVlO1xuICAgICAgICBnZXRQb2ludCA9ICh3LCBoKSA9PiBbMCwgMF07XG4gICAgICAgIGdldE9wcG9zaXRlID0gKHcsIGgpID0+IFt3LCBoXTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwidG9wTWlkZGxlXCI6XG4gICAgICAgIGdldFBvaW50ID0gKHcsIGgpID0+IFt3IC8gMiwgMF07XG4gICAgICAgIGdldE9wcG9zaXRlID0gKHcsIGgpID0+IFt3IC8gMiwgaF07XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcInRvcFJpZ2h0XCI6XG4gICAgICAgIGlzRGlhZ29uYWwgPSB0cnVlO1xuICAgICAgICBnZXRQb2ludCA9ICh3LCBoKSA9PiBbdywgMF07XG4gICAgICAgIGdldE9wcG9zaXRlID0gKHcsIGgpID0+IFswLCBoXTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwibWlkZGxlUmlnaHRcIjpcbiAgICAgICAgaXNIb3Jpem9udGFsID0gdHJ1ZTtcbiAgICAgICAgZ2V0UG9pbnQgPSAodywgaCkgPT4gW3csIGggLyAyXTtcbiAgICAgICAgZ2V0T3Bwb3NpdGUgPSAodywgaCkgPT4gWzAsIGggLyAyXTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwiYm90dG9tUmlnaHRcIjpcbiAgICAgICAgaXNEaWFnb25hbCA9IHRydWU7XG4gICAgICAgIGdldFBvaW50ID0gKHcsIGgpID0+IFt3LCBoXTtcbiAgICAgICAgZ2V0T3Bwb3NpdGUgPSAodywgaCkgPT4gWzAsIDBdO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJib3R0b21NaWRkbGVcIjpcbiAgICAgICAgZ2V0UG9pbnQgPSAodywgaCkgPT4gW3cgLyAyLCBoXTtcbiAgICAgICAgZ2V0T3Bwb3NpdGUgPSAodywgaCkgPT4gW3cgLyAyLCAwXTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwiYm90dG9tTGVmdFwiOlxuICAgICAgICBpc0RpYWdvbmFsID0gdHJ1ZTtcbiAgICAgICAgZ2V0UG9pbnQgPSAodywgaCkgPT4gWzAsIGhdO1xuICAgICAgICBnZXRPcHBvc2l0ZSA9ICh3LCBoKSA9PiBbdywgMF07XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcIm1pZGRsZUxlZnRcIjpcbiAgICAgICAgaXNIb3Jpem9udGFsID0gdHJ1ZTtcbiAgICAgICAgZ2V0UG9pbnQgPSAodywgaCkgPT4gWzAsIGggLyAyXTtcbiAgICAgICAgZ2V0T3Bwb3NpdGUgPSAodywgaCkgPT4gW3csIGggLyAyXTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGNvbnN0IHBvaW50ID0gZ2V0UG9pbnQoc2F2ZWRXaWR0aCwgc2F2ZWRIZWlnaHQpO1xuICAgIGNvbnN0IG9wcG9zaXRlUG9pbnQgPSBnZXRPcHBvc2l0ZShzYXZlZFdpZHRoLCBzYXZlZEhlaWdodCk7XG4gICAgbGV0IHRyYW5zZk9wcG9zaXRlUG9pbnQgPSB0cmFuc2YoLi4ub3Bwb3NpdGVQb2ludCk7XG4gICAgY29uc3Qgb3Bwb3NpdGVYID0gcm91bmQoc2F2ZWRYICsgdHJhbnNmT3Bwb3NpdGVQb2ludFswXSk7XG4gICAgY29uc3Qgb3Bwb3NpdGVZID0gcm91bmQoc2F2ZWRZICsgdHJhbnNmT3Bwb3NpdGVQb2ludFsxXSk7XG4gICAgbGV0IHJhdGlvWCA9IDE7XG4gICAgbGV0IHJhdGlvWSA9IDE7XG4gICAgbGV0IFtkZWx0YVgsIGRlbHRhWV0gPSB0aGlzLnNjcmVlblRvUGFnZVRyYW5zbGF0aW9uKGV2ZW50Lm1vdmVtZW50WCwgZXZlbnQubW92ZW1lbnRZKTtcbiAgICBbZGVsdGFYLCBkZWx0YVldID0gaW52VHJhbnNmKGRlbHRhWCAvIHBhcmVudFdpZHRoLCBkZWx0YVkgLyBwYXJlbnRIZWlnaHQpO1xuICAgIGlmIChpc0RpYWdvbmFsKSB7XG4gICAgICBjb25zdCBvbGREaWFnID0gTWF0aC5oeXBvdChzYXZlZFdpZHRoLCBzYXZlZEhlaWdodCk7XG4gICAgICByYXRpb1ggPSByYXRpb1kgPSBNYXRoLm1heChNYXRoLm1pbihNYXRoLmh5cG90KG9wcG9zaXRlUG9pbnRbMF0gLSBwb2ludFswXSAtIGRlbHRhWCwgb3Bwb3NpdGVQb2ludFsxXSAtIHBvaW50WzFdIC0gZGVsdGFZKSAvIG9sZERpYWcsIDEgLyBzYXZlZFdpZHRoLCAxIC8gc2F2ZWRIZWlnaHQpLCBtaW5XaWR0aCAvIHNhdmVkV2lkdGgsIG1pbkhlaWdodCAvIHNhdmVkSGVpZ2h0KTtcbiAgICB9IGVsc2UgaWYgKGlzSG9yaXpvbnRhbCkge1xuICAgICAgcmF0aW9YID0gTWF0aC5tYXgobWluV2lkdGgsIE1hdGgubWluKDEsIE1hdGguYWJzKG9wcG9zaXRlUG9pbnRbMF0gLSBwb2ludFswXSAtIGRlbHRhWCkpKSAvIHNhdmVkV2lkdGg7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJhdGlvWSA9IE1hdGgubWF4KG1pbkhlaWdodCwgTWF0aC5taW4oMSwgTWF0aC5hYnMob3Bwb3NpdGVQb2ludFsxXSAtIHBvaW50WzFdIC0gZGVsdGFZKSkpIC8gc2F2ZWRIZWlnaHQ7XG4gICAgfVxuICAgIGNvbnN0IG5ld1dpZHRoID0gcm91bmQoc2F2ZWRXaWR0aCAqIHJhdGlvWCk7XG4gICAgY29uc3QgbmV3SGVpZ2h0ID0gcm91bmQoc2F2ZWRIZWlnaHQgKiByYXRpb1kpO1xuICAgIHRyYW5zZk9wcG9zaXRlUG9pbnQgPSB0cmFuc2YoLi4uZ2V0T3Bwb3NpdGUobmV3V2lkdGgsIG5ld0hlaWdodCkpO1xuICAgIGNvbnN0IG5ld1ggPSBvcHBvc2l0ZVggLSB0cmFuc2ZPcHBvc2l0ZVBvaW50WzBdO1xuICAgIGNvbnN0IG5ld1kgPSBvcHBvc2l0ZVkgLSB0cmFuc2ZPcHBvc2l0ZVBvaW50WzFdO1xuICAgIHRoaXMud2lkdGggPSBuZXdXaWR0aDtcbiAgICB0aGlzLmhlaWdodCA9IG5ld0hlaWdodDtcbiAgICB0aGlzLnggPSBuZXdYO1xuICAgIHRoaXMueSA9IG5ld1k7XG4gICAgdGhpcy5zZXREaW1zKHBhcmVudFdpZHRoICogbmV3V2lkdGgsIHBhcmVudEhlaWdodCAqIG5ld0hlaWdodCk7XG4gICAgdGhpcy5maXhBbmRTZXRQb3NpdGlvbigpO1xuICB9XG4gIGFsdFRleHRGaW5pc2goKSB7XG4gICAgdGhpcy4jYWx0VGV4dD8uZmluaXNoKCk7XG4gIH1cbiAgYXN5bmMgYWRkRWRpdFRvb2xiYXIoKSB7XG4gICAgaWYgKHRoaXMuI2VkaXRUb29sYmFyIHx8IHRoaXMuI2lzSW5FZGl0TW9kZSkge1xuICAgICAgcmV0dXJuIHRoaXMuI2VkaXRUb29sYmFyO1xuICAgIH1cbiAgICB0aGlzLiNlZGl0VG9vbGJhciA9IG5ldyBFZGl0b3JUb29sYmFyKHRoaXMpO1xuICAgIHRoaXMuZGl2LmFwcGVuZCh0aGlzLiNlZGl0VG9vbGJhci5yZW5kZXIoKSk7XG4gICAgaWYgKHRoaXMuI2FsdFRleHQpIHtcbiAgICAgIHRoaXMuI2VkaXRUb29sYmFyLmFkZEFsdFRleHRCdXR0b24oYXdhaXQgdGhpcy4jYWx0VGV4dC5yZW5kZXIoKSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLiNlZGl0VG9vbGJhcjtcbiAgfVxuICByZW1vdmVFZGl0VG9vbGJhcigpIHtcbiAgICBpZiAoIXRoaXMuI2VkaXRUb29sYmFyKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuI2VkaXRUb29sYmFyLnJlbW92ZSgpO1xuICAgIHRoaXMuI2VkaXRUb29sYmFyID0gbnVsbDtcbiAgICB0aGlzLiNhbHRUZXh0Py5kZXN0cm95KCk7XG4gIH1cbiAgZ2V0Q2xpZW50RGltZW5zaW9ucygpIHtcbiAgICByZXR1cm4gdGhpcy5kaXYuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIH1cbiAgYXN5bmMgYWRkQWx0VGV4dEJ1dHRvbigpIHtcbiAgICBpZiAodGhpcy4jYWx0VGV4dCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBBbHRUZXh0LmluaXRpYWxpemUoQW5ub3RhdGlvbkVkaXRvci5fbDEwblByb21pc2UpO1xuICAgIHRoaXMuI2FsdFRleHQgPSBuZXcgQWx0VGV4dCh0aGlzKTtcbiAgICBhd2FpdCB0aGlzLmFkZEVkaXRUb29sYmFyKCk7XG4gIH1cbiAgZ2V0IGFsdFRleHREYXRhKCkge1xuICAgIHJldHVybiB0aGlzLiNhbHRUZXh0Py5kYXRhO1xuICB9XG4gIHNldCBhbHRUZXh0RGF0YShkYXRhKSB7XG4gICAgaWYgKCF0aGlzLiNhbHRUZXh0KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuI2FsdFRleHQuZGF0YSA9IGRhdGE7XG4gIH1cbiAgcmVuZGVyKCkge1xuICAgIHRoaXMuZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICB0aGlzLmRpdi5zZXRBdHRyaWJ1dGUoXCJkYXRhLWVkaXRvci1yb3RhdGlvblwiLCAoMzYwIC0gdGhpcy5yb3RhdGlvbikgJSAzNjApO1xuICAgIHRoaXMuZGl2LmNsYXNzTmFtZSA9IHRoaXMubmFtZTtcbiAgICB0aGlzLmRpdi5zZXRBdHRyaWJ1dGUoXCJpZFwiLCB0aGlzLmlkKTtcbiAgICB0aGlzLmRpdi5zZXRBdHRyaWJ1dGUoXCJ0YWJJbmRleFwiLCAwKTtcbiAgICB0aGlzLnNldEluRm9yZWdyb3VuZCgpO1xuICAgIHRoaXMuZGl2LmFkZEV2ZW50TGlzdGVuZXIoXCJmb2N1c2luXCIsIHRoaXMuI2JvdW5kRm9jdXNpbik7XG4gICAgdGhpcy5kaXYuYWRkRXZlbnRMaXN0ZW5lcihcImZvY3Vzb3V0XCIsIHRoaXMuI2JvdW5kRm9jdXNvdXQpO1xuICAgIGNvbnN0IFtwYXJlbnRXaWR0aCwgcGFyZW50SGVpZ2h0XSA9IHRoaXMucGFyZW50RGltZW5zaW9ucztcbiAgICBpZiAodGhpcy5wYXJlbnRSb3RhdGlvbiAlIDE4MCAhPT0gMCkge1xuICAgICAgdGhpcy5kaXYuc3R5bGUubWF4V2lkdGggPSBgJHsoMTAwICogcGFyZW50SGVpZ2h0IC8gcGFyZW50V2lkdGgpLnRvRml4ZWQoMil9JWA7XG4gICAgICB0aGlzLmRpdi5zdHlsZS5tYXhIZWlnaHQgPSBgJHsoMTAwICogcGFyZW50V2lkdGggLyBwYXJlbnRIZWlnaHQpLnRvRml4ZWQoMil9JWA7XG4gICAgfVxuICAgIGNvbnN0IFt0eCwgdHldID0gdGhpcy5nZXRJbml0aWFsVHJhbnNsYXRpb24oKTtcbiAgICB0aGlzLnRyYW5zbGF0ZSh0eCwgdHkpO1xuICAgICgwLHRvb2xzLmJpbmRFdmVudHMpKHRoaXMsIHRoaXMuZGl2LCBbXCJwb2ludGVyZG93blwiXSk7XG4gICAgcmV0dXJuIHRoaXMuZGl2O1xuICB9XG4gIHBvaW50ZXJkb3duKGV2ZW50KSB7XG4gICAgY29uc3Qge1xuICAgICAgaXNNYWNcbiAgICB9ID0gdXRpbC5GZWF0dXJlVGVzdC5wbGF0Zm9ybTtcbiAgICBpZiAoZXZlbnQuYnV0dG9uICE9PSAwIHx8IGV2ZW50LmN0cmxLZXkgJiYgaXNNYWMpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuI2hhc0JlZW5DbGlja2VkID0gdHJ1ZTtcbiAgICBpZiAodGhpcy5faXNEcmFnZ2FibGUpIHtcbiAgICAgIHRoaXMuI3NldFVwRHJhZ1Nlc3Npb24oZXZlbnQpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLiNzZWxlY3RPblBvaW50ZXJFdmVudChldmVudCk7XG4gIH1cbiAgI3NlbGVjdE9uUG9pbnRlckV2ZW50KGV2ZW50KSB7XG4gICAgY29uc3Qge1xuICAgICAgaXNNYWNcbiAgICB9ID0gdXRpbC5GZWF0dXJlVGVzdC5wbGF0Zm9ybTtcbiAgICBpZiAoZXZlbnQuY3RybEtleSAmJiAhaXNNYWMgfHwgZXZlbnQuc2hpZnRLZXkgfHwgZXZlbnQubWV0YUtleSAmJiBpc01hYykge1xuICAgICAgdGhpcy5wYXJlbnQudG9nZ2xlU2VsZWN0ZWQodGhpcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucGFyZW50LnNldFNlbGVjdGVkKHRoaXMpO1xuICAgIH1cbiAgfVxuICAjc2V0VXBEcmFnU2Vzc2lvbihldmVudCkge1xuICAgIGNvbnN0IGlzU2VsZWN0ZWQgPSB0aGlzLl91aU1hbmFnZXIuaXNTZWxlY3RlZCh0aGlzKTtcbiAgICB0aGlzLl91aU1hbmFnZXIuc2V0VXBEcmFnU2Vzc2lvbigpO1xuICAgIGxldCBwb2ludGVyTW92ZU9wdGlvbnMsIHBvaW50ZXJNb3ZlQ2FsbGJhY2s7XG4gICAgaWYgKGlzU2VsZWN0ZWQpIHtcbiAgICAgIHBvaW50ZXJNb3ZlT3B0aW9ucyA9IHtcbiAgICAgICAgcGFzc2l2ZTogdHJ1ZSxcbiAgICAgICAgY2FwdHVyZTogdHJ1ZVxuICAgICAgfTtcbiAgICAgIHBvaW50ZXJNb3ZlQ2FsbGJhY2sgPSBlID0+IHtcbiAgICAgICAgY29uc3QgW3R4LCB0eV0gPSB0aGlzLnNjcmVlblRvUGFnZVRyYW5zbGF0aW9uKGUubW92ZW1lbnRYLCBlLm1vdmVtZW50WSk7XG4gICAgICAgIHRoaXMuX3VpTWFuYWdlci5kcmFnU2VsZWN0ZWRFZGl0b3JzKHR4LCB0eSk7XG4gICAgICB9O1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJwb2ludGVybW92ZVwiLCBwb2ludGVyTW92ZUNhbGxiYWNrLCBwb2ludGVyTW92ZU9wdGlvbnMpO1xuICAgIH1cbiAgICBjb25zdCBwb2ludGVyVXBDYWxsYmFjayA9ICgpID0+IHtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwicG9pbnRlcnVwXCIsIHBvaW50ZXJVcENhbGxiYWNrKTtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwiYmx1clwiLCBwb2ludGVyVXBDYWxsYmFjayk7XG4gICAgICBpZiAoaXNTZWxlY3RlZCkge1xuICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInBvaW50ZXJtb3ZlXCIsIHBvaW50ZXJNb3ZlQ2FsbGJhY2ssIHBvaW50ZXJNb3ZlT3B0aW9ucyk7XG4gICAgICB9XG4gICAgICB0aGlzLiNoYXNCZWVuQ2xpY2tlZCA9IGZhbHNlO1xuICAgICAgaWYgKCF0aGlzLl91aU1hbmFnZXIuZW5kRHJhZ1Nlc3Npb24oKSkge1xuICAgICAgICB0aGlzLiNzZWxlY3RPblBvaW50ZXJFdmVudChldmVudCk7XG4gICAgICB9XG4gICAgfTtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInBvaW50ZXJ1cFwiLCBwb2ludGVyVXBDYWxsYmFjayk7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJibHVyXCIsIHBvaW50ZXJVcENhbGxiYWNrKTtcbiAgfVxuICBtb3ZlSW5ET00oKSB7XG4gICAgaWYgKHRoaXMuI21vdmVJbkRPTVRpbWVvdXQpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLiNtb3ZlSW5ET01UaW1lb3V0KTtcbiAgICB9XG4gICAgdGhpcy4jbW92ZUluRE9NVGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgdGhpcy4jbW92ZUluRE9NVGltZW91dCA9IG51bGw7XG4gICAgICB0aGlzLnBhcmVudD8ubW92ZUVkaXRvckluRE9NKHRoaXMpO1xuICAgIH0sIDApO1xuICB9XG4gIF9zZXRQYXJlbnRBbmRQb3NpdGlvbihwYXJlbnQsIHgsIHkpIHtcbiAgICBwYXJlbnQuY2hhbmdlUGFyZW50KHRoaXMpO1xuICAgIHRoaXMueCA9IHg7XG4gICAgdGhpcy55ID0geTtcbiAgICB0aGlzLmZpeEFuZFNldFBvc2l0aW9uKCk7XG4gIH1cbiAgZ2V0UmVjdCh0eCwgdHksIHJvdGF0aW9uID0gdGhpcy5yb3RhdGlvbikge1xuICAgIGNvbnN0IHNjYWxlID0gdGhpcy5wYXJlbnRTY2FsZTtcbiAgICBjb25zdCBbcGFnZVdpZHRoLCBwYWdlSGVpZ2h0XSA9IHRoaXMucGFnZURpbWVuc2lvbnM7XG4gICAgY29uc3QgW3BhZ2VYLCBwYWdlWV0gPSB0aGlzLnBhZ2VUcmFuc2xhdGlvbjtcbiAgICBjb25zdCBzaGlmdFggPSB0eCAvIHNjYWxlO1xuICAgIGNvbnN0IHNoaWZ0WSA9IHR5IC8gc2NhbGU7XG4gICAgY29uc3QgeCA9IHRoaXMueCAqIHBhZ2VXaWR0aDtcbiAgICBjb25zdCB5ID0gdGhpcy55ICogcGFnZUhlaWdodDtcbiAgICBjb25zdCB3aWR0aCA9IHRoaXMud2lkdGggKiBwYWdlV2lkdGg7XG4gICAgY29uc3QgaGVpZ2h0ID0gdGhpcy5oZWlnaHQgKiBwYWdlSGVpZ2h0O1xuICAgIHN3aXRjaCAocm90YXRpb24pIHtcbiAgICAgIGNhc2UgMDpcbiAgICAgICAgcmV0dXJuIFt4ICsgc2hpZnRYICsgcGFnZVgsIHBhZ2VIZWlnaHQgLSB5IC0gc2hpZnRZIC0gaGVpZ2h0ICsgcGFnZVksIHggKyBzaGlmdFggKyB3aWR0aCArIHBhZ2VYLCBwYWdlSGVpZ2h0IC0geSAtIHNoaWZ0WSArIHBhZ2VZXTtcbiAgICAgIGNhc2UgOTA6XG4gICAgICAgIHJldHVybiBbeCArIHNoaWZ0WSArIHBhZ2VYLCBwYWdlSGVpZ2h0IC0geSArIHNoaWZ0WCArIHBhZ2VZLCB4ICsgc2hpZnRZICsgaGVpZ2h0ICsgcGFnZVgsIHBhZ2VIZWlnaHQgLSB5ICsgc2hpZnRYICsgd2lkdGggKyBwYWdlWV07XG4gICAgICBjYXNlIDE4MDpcbiAgICAgICAgcmV0dXJuIFt4IC0gc2hpZnRYIC0gd2lkdGggKyBwYWdlWCwgcGFnZUhlaWdodCAtIHkgKyBzaGlmdFkgKyBwYWdlWSwgeCAtIHNoaWZ0WCArIHBhZ2VYLCBwYWdlSGVpZ2h0IC0geSArIHNoaWZ0WSArIGhlaWdodCArIHBhZ2VZXTtcbiAgICAgIGNhc2UgMjcwOlxuICAgICAgICByZXR1cm4gW3ggLSBzaGlmdFkgLSBoZWlnaHQgKyBwYWdlWCwgcGFnZUhlaWdodCAtIHkgLSBzaGlmdFggLSB3aWR0aCArIHBhZ2VZLCB4IC0gc2hpZnRZICsgcGFnZVgsIHBhZ2VIZWlnaHQgLSB5IC0gc2hpZnRYICsgcGFnZVldO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCByb3RhdGlvblwiKTtcbiAgICB9XG4gIH1cbiAgZ2V0UmVjdEluQ3VycmVudENvb3JkcyhyZWN0LCBwYWdlSGVpZ2h0KSB7XG4gICAgY29uc3QgW3gxLCB5MSwgeDIsIHkyXSA9IHJlY3Q7XG4gICAgY29uc3Qgd2lkdGggPSB4MiAtIHgxO1xuICAgIGNvbnN0IGhlaWdodCA9IHkyIC0geTE7XG4gICAgc3dpdGNoICh0aGlzLnJvdGF0aW9uKSB7XG4gICAgICBjYXNlIDA6XG4gICAgICAgIHJldHVybiBbeDEsIHBhZ2VIZWlnaHQgLSB5Miwgd2lkdGgsIGhlaWdodF07XG4gICAgICBjYXNlIDkwOlxuICAgICAgICByZXR1cm4gW3gxLCBwYWdlSGVpZ2h0IC0geTEsIGhlaWdodCwgd2lkdGhdO1xuICAgICAgY2FzZSAxODA6XG4gICAgICAgIHJldHVybiBbeDIsIHBhZ2VIZWlnaHQgLSB5MSwgd2lkdGgsIGhlaWdodF07XG4gICAgICBjYXNlIDI3MDpcbiAgICAgICAgcmV0dXJuIFt4MiwgcGFnZUhlaWdodCAtIHkyLCBoZWlnaHQsIHdpZHRoXTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgcm90YXRpb25cIik7XG4gICAgfVxuICB9XG4gIG9uY2VBZGRlZCgpIHt9XG4gIGlzRW1wdHkoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGVuYWJsZUVkaXRNb2RlKCkge1xuICAgIHRoaXMuI2lzSW5FZGl0TW9kZSA9IHRydWU7XG4gIH1cbiAgZGlzYWJsZUVkaXRNb2RlKCkge1xuICAgIHRoaXMuI2lzSW5FZGl0TW9kZSA9IGZhbHNlO1xuICB9XG4gIGlzSW5FZGl0TW9kZSgpIHtcbiAgICByZXR1cm4gdGhpcy4jaXNJbkVkaXRNb2RlO1xuICB9XG4gIHNob3VsZEdldEtleWJvYXJkRXZlbnRzKCkge1xuICAgIHJldHVybiB0aGlzLiNpc1Jlc2l6ZXJFbmFibGVkRm9yS2V5Ym9hcmQ7XG4gIH1cbiAgbmVlZHNUb0JlUmVidWlsdCgpIHtcbiAgICByZXR1cm4gdGhpcy5kaXYgJiYgIXRoaXMuaXNBdHRhY2hlZFRvRE9NO1xuICB9XG4gIHJlYnVpbGQoKSB7XG4gICAgdGhpcy5kaXY/LmFkZEV2ZW50TGlzdGVuZXIoXCJmb2N1c2luXCIsIHRoaXMuI2JvdW5kRm9jdXNpbik7XG4gICAgdGhpcy5kaXY/LmFkZEV2ZW50TGlzdGVuZXIoXCJmb2N1c291dFwiLCB0aGlzLiNib3VuZEZvY3Vzb3V0KTtcbiAgfVxuICByb3RhdGUoX2FuZ2xlKSB7fVxuICBzZXJpYWxpemUoaXNGb3JDb3B5aW5nID0gZmFsc2UsIGNvbnRleHQgPSBudWxsKSB7XG4gICAgKDAsdXRpbC51bnJlYWNoYWJsZSkoXCJBbiBlZGl0b3IgbXVzdCBiZSBzZXJpYWxpemFibGVcIik7XG4gIH1cbiAgc3RhdGljIGRlc2VyaWFsaXplKGRhdGEsIHBhcmVudCwgdWlNYW5hZ2VyKSB7XG4gICAgY29uc3QgZWRpdG9yID0gbmV3IHRoaXMucHJvdG90eXBlLmNvbnN0cnVjdG9yKHtcbiAgICAgIHBhcmVudCxcbiAgICAgIGlkOiBwYXJlbnQuZ2V0TmV4dElkKCksXG4gICAgICB1aU1hbmFnZXJcbiAgICB9KTtcbiAgICBlZGl0b3Iucm90YXRpb24gPSBkYXRhLnJvdGF0aW9uO1xuICAgIGNvbnN0IFtwYWdlV2lkdGgsIHBhZ2VIZWlnaHRdID0gZWRpdG9yLnBhZ2VEaW1lbnNpb25zO1xuICAgIGNvbnN0IFt4LCB5LCB3aWR0aCwgaGVpZ2h0XSA9IGVkaXRvci5nZXRSZWN0SW5DdXJyZW50Q29vcmRzKGRhdGEucmVjdCwgcGFnZUhlaWdodCk7XG4gICAgZWRpdG9yLnggPSB4IC8gcGFnZVdpZHRoO1xuICAgIGVkaXRvci55ID0geSAvIHBhZ2VIZWlnaHQ7XG4gICAgZWRpdG9yLndpZHRoID0gd2lkdGggLyBwYWdlV2lkdGg7XG4gICAgZWRpdG9yLmhlaWdodCA9IGhlaWdodCAvIHBhZ2VIZWlnaHQ7XG4gICAgcmV0dXJuIGVkaXRvcjtcbiAgfVxuICByZW1vdmUoKSB7XG4gICAgdGhpcy5kaXYucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImZvY3VzaW5cIiwgdGhpcy4jYm91bmRGb2N1c2luKTtcbiAgICB0aGlzLmRpdi5yZW1vdmVFdmVudExpc3RlbmVyKFwiZm9jdXNvdXRcIiwgdGhpcy4jYm91bmRGb2N1c291dCk7XG4gICAgaWYgKCF0aGlzLmlzRW1wdHkoKSkge1xuICAgICAgdGhpcy5jb21taXQoKTtcbiAgICB9XG4gICAgaWYgKHRoaXMucGFyZW50KSB7XG4gICAgICB0aGlzLnBhcmVudC5yZW1vdmUodGhpcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX3VpTWFuYWdlci5yZW1vdmVFZGl0b3IodGhpcyk7XG4gICAgfVxuICAgIGlmICh0aGlzLiNtb3ZlSW5ET01UaW1lb3V0KSB7XG4gICAgICBjbGVhclRpbWVvdXQodGhpcy4jbW92ZUluRE9NVGltZW91dCk7XG4gICAgICB0aGlzLiNtb3ZlSW5ET01UaW1lb3V0ID0gbnVsbDtcbiAgICB9XG4gICAgdGhpcy4jc3RvcFJlc2l6aW5nKCk7XG4gICAgdGhpcy5yZW1vdmVFZGl0VG9vbGJhcigpO1xuICB9XG4gIGdldCBpc1Jlc2l6YWJsZSgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgbWFrZVJlc2l6YWJsZSgpIHtcbiAgICBpZiAodGhpcy5pc1Jlc2l6YWJsZSkge1xuICAgICAgdGhpcy4jY3JlYXRlUmVzaXplcnMoKTtcbiAgICAgIHRoaXMuI3Jlc2l6ZXJzRGl2LmNsYXNzTGlzdC5yZW1vdmUoXCJoaWRkZW5cIik7XG4gICAgICAoMCx0b29scy5iaW5kRXZlbnRzKSh0aGlzLCB0aGlzLmRpdiwgW1wia2V5ZG93blwiXSk7XG4gICAgfVxuICB9XG4gIGdldCB0b29sYmFyUG9zaXRpb24oKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAga2V5ZG93bihldmVudCkge1xuICAgIGlmICghdGhpcy5pc1Jlc2l6YWJsZSB8fCBldmVudC50YXJnZXQgIT09IHRoaXMuZGl2IHx8IGV2ZW50LmtleSAhPT0gXCJFbnRlclwiKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuX3VpTWFuYWdlci5zZXRTZWxlY3RlZCh0aGlzKTtcbiAgICB0aGlzLiNzYXZlZERpbWVuc2lvbnMgPSB7XG4gICAgICBzYXZlZFg6IHRoaXMueCxcbiAgICAgIHNhdmVkWTogdGhpcy55LFxuICAgICAgc2F2ZWRXaWR0aDogdGhpcy53aWR0aCxcbiAgICAgIHNhdmVkSGVpZ2h0OiB0aGlzLmhlaWdodFxuICAgIH07XG4gICAgY29uc3QgY2hpbGRyZW4gPSB0aGlzLiNyZXNpemVyc0Rpdi5jaGlsZHJlbjtcbiAgICBpZiAoIXRoaXMuI2FsbFJlc2l6ZXJEaXZzKSB7XG4gICAgICB0aGlzLiNhbGxSZXNpemVyRGl2cyA9IEFycmF5LmZyb20oY2hpbGRyZW4pO1xuICAgICAgY29uc3QgYm91bmRSZXNpemVyS2V5ZG93biA9IHRoaXMuI3Jlc2l6ZXJLZXlkb3duLmJpbmQodGhpcyk7XG4gICAgICBjb25zdCBib3VuZFJlc2l6ZXJCbHVyID0gdGhpcy4jcmVzaXplckJsdXIuYmluZCh0aGlzKTtcbiAgICAgIGZvciAoY29uc3QgZGl2IG9mIHRoaXMuI2FsbFJlc2l6ZXJEaXZzKSB7XG4gICAgICAgIGNvbnN0IG5hbWUgPSBkaXYuZ2V0QXR0cmlidXRlKFwiZGF0YS1yZXNpemVyLW5hbWVcIik7XG4gICAgICAgIGRpdi5zZXRBdHRyaWJ1dGUoXCJyb2xlXCIsIFwic3BpbmJ1dHRvblwiKTtcbiAgICAgICAgZGl2LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIGJvdW5kUmVzaXplcktleWRvd24pO1xuICAgICAgICBkaXYuYWRkRXZlbnRMaXN0ZW5lcihcImJsdXJcIiwgYm91bmRSZXNpemVyQmx1cik7XG4gICAgICAgIGRpdi5hZGRFdmVudExpc3RlbmVyKFwiZm9jdXNcIiwgdGhpcy4jcmVzaXplckZvY3VzLmJpbmQodGhpcywgbmFtZSkpO1xuICAgICAgICBBbm5vdGF0aW9uRWRpdG9yLl9sMTBuUHJvbWlzZS5nZXQoYHBkZmpzLWVkaXRvci1yZXNpemVyLWxhYmVsLSR7bmFtZX1gKS50aGVuKG1zZyA9PiBkaXYuc2V0QXR0cmlidXRlKFwiYXJpYS1sYWJlbFwiLCBtc2cpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgZmlyc3QgPSB0aGlzLiNhbGxSZXNpemVyRGl2c1swXTtcbiAgICBsZXQgZmlyc3RQb3NpdGlvbiA9IDA7XG4gICAgZm9yIChjb25zdCBkaXYgb2YgY2hpbGRyZW4pIHtcbiAgICAgIGlmIChkaXYgPT09IGZpcnN0KSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgZmlyc3RQb3NpdGlvbisrO1xuICAgIH1cbiAgICBjb25zdCBuZXh0Rmlyc3RQb3NpdGlvbiA9ICgzNjAgLSB0aGlzLnJvdGF0aW9uICsgdGhpcy5wYXJlbnRSb3RhdGlvbikgJSAzNjAgLyA5MCAqICh0aGlzLiNhbGxSZXNpemVyRGl2cy5sZW5ndGggLyA0KTtcbiAgICBpZiAobmV4dEZpcnN0UG9zaXRpb24gIT09IGZpcnN0UG9zaXRpb24pIHtcbiAgICAgIGlmIChuZXh0Rmlyc3RQb3NpdGlvbiA8IGZpcnN0UG9zaXRpb24pIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmaXJzdFBvc2l0aW9uIC0gbmV4dEZpcnN0UG9zaXRpb247IGkrKykge1xuICAgICAgICAgIHRoaXMuI3Jlc2l6ZXJzRGl2LmFwcGVuZCh0aGlzLiNyZXNpemVyc0Rpdi5maXJzdENoaWxkKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChuZXh0Rmlyc3RQb3NpdGlvbiA+IGZpcnN0UG9zaXRpb24pIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuZXh0Rmlyc3RQb3NpdGlvbiAtIGZpcnN0UG9zaXRpb247IGkrKykge1xuICAgICAgICAgIHRoaXMuI3Jlc2l6ZXJzRGl2LmZpcnN0Q2hpbGQuYmVmb3JlKHRoaXMuI3Jlc2l6ZXJzRGl2Lmxhc3RDaGlsZCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGxldCBpID0gMDtcbiAgICAgIGZvciAoY29uc3QgY2hpbGQgb2YgY2hpbGRyZW4pIHtcbiAgICAgICAgY29uc3QgZGl2ID0gdGhpcy4jYWxsUmVzaXplckRpdnNbaSsrXTtcbiAgICAgICAgY29uc3QgbmFtZSA9IGRpdi5nZXRBdHRyaWJ1dGUoXCJkYXRhLXJlc2l6ZXItbmFtZVwiKTtcbiAgICAgICAgQW5ub3RhdGlvbkVkaXRvci5fbDEwblByb21pc2UuZ2V0KGBwZGZqcy1lZGl0b3ItcmVzaXplci1sYWJlbC0ke25hbWV9YCkudGhlbihtc2cgPT4gY2hpbGQuc2V0QXR0cmlidXRlKFwiYXJpYS1sYWJlbFwiLCBtc2cpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy4jc2V0UmVzaXplclRhYkluZGV4KDApO1xuICAgIHRoaXMuI2lzUmVzaXplckVuYWJsZWRGb3JLZXlib2FyZCA9IHRydWU7XG4gICAgdGhpcy4jcmVzaXplcnNEaXYuZmlyc3RDaGlsZC5mb2N1cyh7XG4gICAgICBmb2N1c1Zpc2libGU6IHRydWVcbiAgICB9KTtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICB9XG4gICNyZXNpemVyS2V5ZG93bihldmVudCkge1xuICAgIEFubm90YXRpb25FZGl0b3IuX3Jlc2l6ZXJLZXlib2FyZE1hbmFnZXIuZXhlYyh0aGlzLCBldmVudCk7XG4gIH1cbiAgI3Jlc2l6ZXJCbHVyKGV2ZW50KSB7XG4gICAgaWYgKHRoaXMuI2lzUmVzaXplckVuYWJsZWRGb3JLZXlib2FyZCAmJiBldmVudC5yZWxhdGVkVGFyZ2V0Py5wYXJlbnROb2RlICE9PSB0aGlzLiNyZXNpemVyc0Rpdikge1xuICAgICAgdGhpcy4jc3RvcFJlc2l6aW5nKCk7XG4gICAgfVxuICB9XG4gICNyZXNpemVyRm9jdXMobmFtZSkge1xuICAgIHRoaXMuI2ZvY3VzZWRSZXNpemVyTmFtZSA9IHRoaXMuI2lzUmVzaXplckVuYWJsZWRGb3JLZXlib2FyZCA/IG5hbWUgOiBcIlwiO1xuICB9XG4gICNzZXRSZXNpemVyVGFiSW5kZXgodmFsdWUpIHtcbiAgICBpZiAoIXRoaXMuI2FsbFJlc2l6ZXJEaXZzKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGZvciAoY29uc3QgZGl2IG9mIHRoaXMuI2FsbFJlc2l6ZXJEaXZzKSB7XG4gICAgICBkaXYudGFiSW5kZXggPSB2YWx1ZTtcbiAgICB9XG4gIH1cbiAgX3Jlc2l6ZVdpdGhLZXlib2FyZCh4LCB5KSB7XG4gICAgaWYgKCF0aGlzLiNpc1Jlc2l6ZXJFbmFibGVkRm9yS2V5Ym9hcmQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy4jcmVzaXplclBvaW50ZXJtb3ZlKHRoaXMuI2ZvY3VzZWRSZXNpemVyTmFtZSwge1xuICAgICAgbW92ZW1lbnRYOiB4LFxuICAgICAgbW92ZW1lbnRZOiB5XG4gICAgfSk7XG4gIH1cbiAgI3N0b3BSZXNpemluZygpIHtcbiAgICB0aGlzLiNpc1Jlc2l6ZXJFbmFibGVkRm9yS2V5Ym9hcmQgPSBmYWxzZTtcbiAgICB0aGlzLiNzZXRSZXNpemVyVGFiSW5kZXgoLTEpO1xuICAgIGlmICh0aGlzLiNzYXZlZERpbWVuc2lvbnMpIHtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgc2F2ZWRYLFxuICAgICAgICBzYXZlZFksXG4gICAgICAgIHNhdmVkV2lkdGgsXG4gICAgICAgIHNhdmVkSGVpZ2h0XG4gICAgICB9ID0gdGhpcy4jc2F2ZWREaW1lbnNpb25zO1xuICAgICAgdGhpcy4jYWRkUmVzaXplVG9VbmRvU3RhY2soc2F2ZWRYLCBzYXZlZFksIHNhdmVkV2lkdGgsIHNhdmVkSGVpZ2h0KTtcbiAgICAgIHRoaXMuI3NhdmVkRGltZW5zaW9ucyA9IG51bGw7XG4gICAgfVxuICB9XG4gIF9zdG9wUmVzaXppbmdXaXRoS2V5Ym9hcmQoKSB7XG4gICAgdGhpcy4jc3RvcFJlc2l6aW5nKCk7XG4gICAgdGhpcy5kaXYuZm9jdXMoKTtcbiAgfVxuICBzZWxlY3QoKSB7XG4gICAgdGhpcy5tYWtlUmVzaXphYmxlKCk7XG4gICAgdGhpcy5kaXY/LmNsYXNzTGlzdC5hZGQoXCJzZWxlY3RlZEVkaXRvclwiKTtcbiAgICBpZiAoIXRoaXMuI2VkaXRUb29sYmFyKSB7XG4gICAgICB0aGlzLmFkZEVkaXRUb29sYmFyKCkudGhlbigoKSA9PiB7XG4gICAgICAgIGlmICh0aGlzLmRpdj8uY2xhc3NMaXN0LmNvbnRhaW5zKFwic2VsZWN0ZWRFZGl0b3JcIikpIHtcbiAgICAgICAgICB0aGlzLiNlZGl0VG9vbGJhcj8uc2hvdygpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy4jZWRpdFRvb2xiYXI/LnNob3coKTtcbiAgfVxuICB1bnNlbGVjdCgpIHtcbiAgICB0aGlzLiNyZXNpemVyc0Rpdj8uY2xhc3NMaXN0LmFkZChcImhpZGRlblwiKTtcbiAgICB0aGlzLmRpdj8uY2xhc3NMaXN0LnJlbW92ZShcInNlbGVjdGVkRWRpdG9yXCIpO1xuICAgIGlmICh0aGlzLmRpdj8uY29udGFpbnMoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCkpIHtcbiAgICAgIHRoaXMuX3VpTWFuYWdlci5jdXJyZW50TGF5ZXIuZGl2LmZvY3VzKCk7XG4gICAgfVxuICAgIHRoaXMuI2VkaXRUb29sYmFyPy5oaWRlKCk7XG4gIH1cbiAgdXBkYXRlUGFyYW1zKHR5cGUsIHZhbHVlKSB7fVxuICBkaXNhYmxlRWRpdGluZygpIHt9XG4gIGVuYWJsZUVkaXRpbmcoKSB7fVxuICBlbnRlckluRWRpdE1vZGUoKSB7fVxuICBnZXRJbWFnZUZvckFsdFRleHQoKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgZ2V0IGNvbnRlbnREaXYoKSB7XG4gICAgcmV0dXJuIHRoaXMuZGl2O1xuICB9XG4gIGdldCBpc0VkaXRpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMuI2lzRWRpdGluZztcbiAgfVxuICBzZXQgaXNFZGl0aW5nKHZhbHVlKSB7XG4gICAgdGhpcy4jaXNFZGl0aW5nID0gdmFsdWU7XG4gICAgaWYgKCF0aGlzLnBhcmVudCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAodmFsdWUpIHtcbiAgICAgIHRoaXMucGFyZW50LnNldFNlbGVjdGVkKHRoaXMpO1xuICAgICAgdGhpcy5wYXJlbnQuc2V0QWN0aXZlRWRpdG9yKHRoaXMpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnBhcmVudC5zZXRBY3RpdmVFZGl0b3IobnVsbCk7XG4gICAgfVxuICB9XG4gIHNldEFzcGVjdFJhdGlvKHdpZHRoLCBoZWlnaHQpIHtcbiAgICB0aGlzLiNrZWVwQXNwZWN0UmF0aW8gPSB0cnVlO1xuICAgIGNvbnN0IGFzcGVjdFJhdGlvID0gd2lkdGggLyBoZWlnaHQ7XG4gICAgY29uc3Qge1xuICAgICAgc3R5bGVcbiAgICB9ID0gdGhpcy5kaXY7XG4gICAgc3R5bGUuYXNwZWN0UmF0aW8gPSBhc3BlY3RSYXRpbztcbiAgICBzdHlsZS5oZWlnaHQgPSBcImF1dG9cIjtcbiAgfVxuICBzdGF0aWMgZ2V0IE1JTl9TSVpFKCkge1xuICAgIHJldHVybiAxNjtcbiAgfVxuICBzdGF0aWMgY2FuQ3JlYXRlTmV3RW1wdHlFZGl0b3IoKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn1cbmNsYXNzIEZha2VFZGl0b3IgZXh0ZW5kcyBBbm5vdGF0aW9uRWRpdG9yIHtcbiAgY29uc3RydWN0b3IocGFyYW1zKSB7XG4gICAgc3VwZXIocGFyYW1zKTtcbiAgICB0aGlzLmFubm90YXRpb25FbGVtZW50SWQgPSBwYXJhbXMuYW5ub3RhdGlvbkVsZW1lbnRJZDtcbiAgICB0aGlzLmRlbGV0ZWQgPSB0cnVlO1xuICB9XG4gIHNlcmlhbGl6ZSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaWQ6IHRoaXMuYW5ub3RhdGlvbkVsZW1lbnRJZCxcbiAgICAgIGRlbGV0ZWQ6IHRydWUsXG4gICAgICBwYWdlSW5kZXg6IHRoaXMucGFnZUluZGV4XG4gICAgfTtcbiAgfVxufVxuXG5cbi8qKiovIH0pLFxuXG4vKioqLyA0MDU6XG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfX193ZWJwYWNrX21vZHVsZV9fLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cbi8qIGhhcm1vbnkgZXhwb3J0ICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCB7XG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIE91dGxpbmVyOiAoKSA9PiAoLyogYmluZGluZyAqLyBPdXRsaW5lcilcbi8qIGhhcm1vbnkgZXhwb3J0ICovIH0pO1xuY2xhc3MgT3V0bGluZXIge1xuICAjYm94O1xuICAjdmVydGljYWxFZGdlcyA9IFtdO1xuICAjaW50ZXJ2YWxzID0gW107XG4gIGNvbnN0cnVjdG9yKGJveGVzLCBib3JkZXJXaWR0aCA9IDAsIGlubmVyTWFyZ2luID0gMCwgaXNMVFIgPSB0cnVlKSB7XG4gICAgbGV0IG1pblggPSBJbmZpbml0eTtcbiAgICBsZXQgbWF4WCA9IC1JbmZpbml0eTtcbiAgICBsZXQgbWluWSA9IEluZmluaXR5O1xuICAgIGxldCBtYXhZID0gLUluZmluaXR5O1xuICAgIGNvbnN0IE5VTUJFUl9PRl9ESUdJVFMgPSA0O1xuICAgIGNvbnN0IEVQU0lMT04gPSAxMCAqKiAtTlVNQkVSX09GX0RJR0lUUztcbiAgICBmb3IgKGNvbnN0IHtcbiAgICAgIHgsXG4gICAgICB5LFxuICAgICAgd2lkdGgsXG4gICAgICBoZWlnaHRcbiAgICB9IG9mIGJveGVzKSB7XG4gICAgICBjb25zdCB4MSA9IE1hdGguZmxvb3IoKHggLSBib3JkZXJXaWR0aCkgLyBFUFNJTE9OKSAqIEVQU0lMT047XG4gICAgICBjb25zdCB4MiA9IE1hdGguY2VpbCgoeCArIHdpZHRoICsgYm9yZGVyV2lkdGgpIC8gRVBTSUxPTikgKiBFUFNJTE9OO1xuICAgICAgY29uc3QgeTEgPSBNYXRoLmZsb29yKCh5IC0gYm9yZGVyV2lkdGgpIC8gRVBTSUxPTikgKiBFUFNJTE9OO1xuICAgICAgY29uc3QgeTIgPSBNYXRoLmNlaWwoKHkgKyBoZWlnaHQgKyBib3JkZXJXaWR0aCkgLyBFUFNJTE9OKSAqIEVQU0lMT047XG4gICAgICBjb25zdCBsZWZ0ID0gW3gxLCB5MSwgeTIsIHRydWVdO1xuICAgICAgY29uc3QgcmlnaHQgPSBbeDIsIHkxLCB5MiwgZmFsc2VdO1xuICAgICAgdGhpcy4jdmVydGljYWxFZGdlcy5wdXNoKGxlZnQsIHJpZ2h0KTtcbiAgICAgIG1pblggPSBNYXRoLm1pbihtaW5YLCB4MSk7XG4gICAgICBtYXhYID0gTWF0aC5tYXgobWF4WCwgeDIpO1xuICAgICAgbWluWSA9IE1hdGgubWluKG1pblksIHkxKTtcbiAgICAgIG1heFkgPSBNYXRoLm1heChtYXhZLCB5Mik7XG4gICAgfVxuICAgIGNvbnN0IGJib3hXaWR0aCA9IG1heFggLSBtaW5YICsgMiAqIGlubmVyTWFyZ2luO1xuICAgIGNvbnN0IGJib3hIZWlnaHQgPSBtYXhZIC0gbWluWSArIDIgKiBpbm5lck1hcmdpbjtcbiAgICBjb25zdCBzaGlmdGVkTWluWCA9IG1pblggLSBpbm5lck1hcmdpbjtcbiAgICBjb25zdCBzaGlmdGVkTWluWSA9IG1pblkgLSBpbm5lck1hcmdpbjtcbiAgICBjb25zdCBsYXN0RWRnZSA9IHRoaXMuI3ZlcnRpY2FsRWRnZXMuYXQoaXNMVFIgPyAtMSA6IC0yKTtcbiAgICBjb25zdCBsYXN0UG9pbnQgPSBbbGFzdEVkZ2VbMF0sIGxhc3RFZGdlWzJdXTtcbiAgICBmb3IgKGNvbnN0IGVkZ2Ugb2YgdGhpcy4jdmVydGljYWxFZGdlcykge1xuICAgICAgY29uc3QgW3gsIHkxLCB5Ml0gPSBlZGdlO1xuICAgICAgZWRnZVswXSA9ICh4IC0gc2hpZnRlZE1pblgpIC8gYmJveFdpZHRoO1xuICAgICAgZWRnZVsxXSA9ICh5MSAtIHNoaWZ0ZWRNaW5ZKSAvIGJib3hIZWlnaHQ7XG4gICAgICBlZGdlWzJdID0gKHkyIC0gc2hpZnRlZE1pblkpIC8gYmJveEhlaWdodDtcbiAgICB9XG4gICAgdGhpcy4jYm94ID0ge1xuICAgICAgeDogc2hpZnRlZE1pblgsXG4gICAgICB5OiBzaGlmdGVkTWluWSxcbiAgICAgIHdpZHRoOiBiYm94V2lkdGgsXG4gICAgICBoZWlnaHQ6IGJib3hIZWlnaHQsXG4gICAgICBsYXN0UG9pbnRcbiAgICB9O1xuICB9XG4gIGdldE91dGxpbmVzKCkge1xuICAgIHRoaXMuI3ZlcnRpY2FsRWRnZXMuc29ydCgoYSwgYikgPT4gYVswXSAtIGJbMF0gfHwgYVsxXSAtIGJbMV0gfHwgYVsyXSAtIGJbMl0pO1xuICAgIGNvbnN0IG91dGxpbmVWZXJ0aWNhbEVkZ2VzID0gW107XG4gICAgZm9yIChjb25zdCBlZGdlIG9mIHRoaXMuI3ZlcnRpY2FsRWRnZXMpIHtcbiAgICAgIGlmIChlZGdlWzNdKSB7XG4gICAgICAgIG91dGxpbmVWZXJ0aWNhbEVkZ2VzLnB1c2goLi4udGhpcy4jYnJlYWtFZGdlKGVkZ2UpKTtcbiAgICAgICAgdGhpcy4jaW5zZXJ0KGVkZ2UpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy4jcmVtb3ZlKGVkZ2UpO1xuICAgICAgICBvdXRsaW5lVmVydGljYWxFZGdlcy5wdXNoKC4uLnRoaXMuI2JyZWFrRWRnZShlZGdlKSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzLiNnZXRPdXRsaW5lcyhvdXRsaW5lVmVydGljYWxFZGdlcyk7XG4gIH1cbiAgI2dldE91dGxpbmVzKG91dGxpbmVWZXJ0aWNhbEVkZ2VzKSB7XG4gICAgY29uc3QgZWRnZXMgPSBbXTtcbiAgICBjb25zdCBhbGxFZGdlcyA9IG5ldyBTZXQoKTtcbiAgICBmb3IgKGNvbnN0IGVkZ2Ugb2Ygb3V0bGluZVZlcnRpY2FsRWRnZXMpIHtcbiAgICAgIGNvbnN0IFt4LCB5MSwgeTJdID0gZWRnZTtcbiAgICAgIGVkZ2VzLnB1c2goW3gsIHkxLCBlZGdlXSwgW3gsIHkyLCBlZGdlXSk7XG4gICAgfVxuICAgIGVkZ2VzLnNvcnQoKGEsIGIpID0+IGFbMV0gLSBiWzFdIHx8IGFbMF0gLSBiWzBdKTtcbiAgICBmb3IgKGxldCBpID0gMCwgaWkgPSBlZGdlcy5sZW5ndGg7IGkgPCBpaTsgaSArPSAyKSB7XG4gICAgICBjb25zdCBlZGdlMSA9IGVkZ2VzW2ldWzJdO1xuICAgICAgY29uc3QgZWRnZTIgPSBlZGdlc1tpICsgMV1bMl07XG4gICAgICBlZGdlMS5wdXNoKGVkZ2UyKTtcbiAgICAgIGVkZ2UyLnB1c2goZWRnZTEpO1xuICAgICAgYWxsRWRnZXMuYWRkKGVkZ2UxKTtcbiAgICAgIGFsbEVkZ2VzLmFkZChlZGdlMik7XG4gICAgfVxuICAgIGNvbnN0IG91dGxpbmVzID0gW107XG4gICAgbGV0IG91dGxpbmU7XG4gICAgd2hpbGUgKGFsbEVkZ2VzLnNpemUgPiAwKSB7XG4gICAgICBjb25zdCBlZGdlID0gYWxsRWRnZXMudmFsdWVzKCkubmV4dCgpLnZhbHVlO1xuICAgICAgbGV0IFt4LCB5MSwgeTIsIGVkZ2UxLCBlZGdlMl0gPSBlZGdlO1xuICAgICAgYWxsRWRnZXMuZGVsZXRlKGVkZ2UpO1xuICAgICAgbGV0IGxhc3RQb2ludFggPSB4O1xuICAgICAgbGV0IGxhc3RQb2ludFkgPSB5MTtcbiAgICAgIG91dGxpbmUgPSBbeCwgeTJdO1xuICAgICAgb3V0bGluZXMucHVzaChvdXRsaW5lKTtcbiAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIGxldCBlO1xuICAgICAgICBpZiAoYWxsRWRnZXMuaGFzKGVkZ2UxKSkge1xuICAgICAgICAgIGUgPSBlZGdlMTtcbiAgICAgICAgfSBlbHNlIGlmIChhbGxFZGdlcy5oYXMoZWRnZTIpKSB7XG4gICAgICAgICAgZSA9IGVkZ2UyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGFsbEVkZ2VzLmRlbGV0ZShlKTtcbiAgICAgICAgW3gsIHkxLCB5MiwgZWRnZTEsIGVkZ2UyXSA9IGU7XG4gICAgICAgIGlmIChsYXN0UG9pbnRYICE9PSB4KSB7XG4gICAgICAgICAgb3V0bGluZS5wdXNoKGxhc3RQb2ludFgsIGxhc3RQb2ludFksIHgsIGxhc3RQb2ludFkgPT09IHkxID8geTEgOiB5Mik7XG4gICAgICAgICAgbGFzdFBvaW50WCA9IHg7XG4gICAgICAgIH1cbiAgICAgICAgbGFzdFBvaW50WSA9IGxhc3RQb2ludFkgPT09IHkxID8geTIgOiB5MTtcbiAgICAgIH1cbiAgICAgIG91dGxpbmUucHVzaChsYXN0UG9pbnRYLCBsYXN0UG9pbnRZKTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIG91dGxpbmVzLFxuICAgICAgYm94OiB0aGlzLiNib3hcbiAgICB9O1xuICB9XG4gICNiaW5hcnlTZWFyY2goeSkge1xuICAgIGNvbnN0IGFycmF5ID0gdGhpcy4jaW50ZXJ2YWxzO1xuICAgIGxldCBzdGFydCA9IDA7XG4gICAgbGV0IGVuZCA9IGFycmF5Lmxlbmd0aCAtIDE7XG4gICAgd2hpbGUgKHN0YXJ0IDw9IGVuZCkge1xuICAgICAgY29uc3QgbWlkZGxlID0gc3RhcnQgKyBlbmQgPj4gMTtcbiAgICAgIGNvbnN0IHkxID0gYXJyYXlbbWlkZGxlXVswXTtcbiAgICAgIGlmICh5MSA9PT0geSkge1xuICAgICAgICByZXR1cm4gbWlkZGxlO1xuICAgICAgfVxuICAgICAgaWYgKHkxIDwgeSkge1xuICAgICAgICBzdGFydCA9IG1pZGRsZSArIDE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbmQgPSBtaWRkbGUgLSAxO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZW5kICsgMTtcbiAgfVxuICAjaW5zZXJ0KFssIHkxLCB5Ml0pIHtcbiAgICBjb25zdCBpbmRleCA9IHRoaXMuI2JpbmFyeVNlYXJjaCh5MSk7XG4gICAgdGhpcy4jaW50ZXJ2YWxzLnNwbGljZShpbmRleCwgMCwgW3kxLCB5Ml0pO1xuICB9XG4gICNyZW1vdmUoWywgeTEsIHkyXSkge1xuICAgIGNvbnN0IGluZGV4ID0gdGhpcy4jYmluYXJ5U2VhcmNoKHkxKTtcbiAgICBmb3IgKGxldCBpID0gaW5kZXg7IGkgPCB0aGlzLiNpbnRlcnZhbHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IFtzdGFydCwgZW5kXSA9IHRoaXMuI2ludGVydmFsc1tpXTtcbiAgICAgIGlmIChzdGFydCAhPT0geTEpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBpZiAoc3RhcnQgPT09IHkxICYmIGVuZCA9PT0geTIpIHtcbiAgICAgICAgdGhpcy4jaW50ZXJ2YWxzLnNwbGljZShpLCAxKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKGxldCBpID0gaW5kZXggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgY29uc3QgW3N0YXJ0LCBlbmRdID0gdGhpcy4jaW50ZXJ2YWxzW2ldO1xuICAgICAgaWYgKHN0YXJ0ICE9PSB5MSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGlmIChzdGFydCA9PT0geTEgJiYgZW5kID09PSB5Mikge1xuICAgICAgICB0aGlzLiNpbnRlcnZhbHMuc3BsaWNlKGksIDEpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICB9XG4gICNicmVha0VkZ2UoZWRnZSkge1xuICAgIGNvbnN0IFt4LCB5MSwgeTJdID0gZWRnZTtcbiAgICBjb25zdCByZXN1bHRzID0gW1t4LCB5MSwgeTJdXTtcbiAgICBjb25zdCBpbmRleCA9IHRoaXMuI2JpbmFyeVNlYXJjaCh5Mik7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbmRleDsgaSsrKSB7XG4gICAgICBjb25zdCBbc3RhcnQsIGVuZF0gPSB0aGlzLiNpbnRlcnZhbHNbaV07XG4gICAgICBmb3IgKGxldCBqID0gMCwgamogPSByZXN1bHRzLmxlbmd0aDsgaiA8IGpqOyBqKyspIHtcbiAgICAgICAgY29uc3QgWywgeTMsIHk0XSA9IHJlc3VsdHNbal07XG4gICAgICAgIGlmIChlbmQgPD0geTMgfHwgeTQgPD0gc3RhcnQpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoeTMgPj0gc3RhcnQpIHtcbiAgICAgICAgICBpZiAoeTQgPiBlbmQpIHtcbiAgICAgICAgICAgIHJlc3VsdHNbal1bMV0gPSBlbmQ7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChqaiA9PT0gMSkge1xuICAgICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXN1bHRzLnNwbGljZShqLCAxKTtcbiAgICAgICAgICAgIGotLTtcbiAgICAgICAgICAgIGpqLS07XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIHJlc3VsdHNbal1bMl0gPSBzdGFydDtcbiAgICAgICAgaWYgKHk0ID4gZW5kKSB7XG4gICAgICAgICAgcmVzdWx0cy5wdXNoKFt4LCBlbmQsIHk0XSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdHM7XG4gIH1cbn1cblxuXG4vKioqLyB9KSxcblxuLyoqKi8gODEyOlxuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX19fd2VicGFja19tb2R1bGVfXywgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG4vKiBoYXJtb255IGV4cG9ydCAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywge1xuLyogaGFybW9ueSBleHBvcnQgKi8gICBBbm5vdGF0aW9uRWRpdG9yVUlNYW5hZ2VyOiAoKSA9PiAoLyogYmluZGluZyAqLyBBbm5vdGF0aW9uRWRpdG9yVUlNYW5hZ2VyKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgQ29sb3JNYW5hZ2VyOiAoKSA9PiAoLyogYmluZGluZyAqLyBDb2xvck1hbmFnZXIpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBLZXlib2FyZE1hbmFnZXI6ICgpID0+ICgvKiBiaW5kaW5nICovIEtleWJvYXJkTWFuYWdlciksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIGJpbmRFdmVudHM6ICgpID0+ICgvKiBiaW5kaW5nICovIGJpbmRFdmVudHMpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBvcGFjaXR5VG9IZXg6ICgpID0+ICgvKiBiaW5kaW5nICovIG9wYWNpdHlUb0hleClcbi8qIGhhcm1vbnkgZXhwb3J0ICovIH0pO1xuLyogdW51c2VkIGhhcm1vbnkgZXhwb3J0IENvbW1hbmRNYW5hZ2VyICovXG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX3NoYXJlZF91dGlsX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI2Nik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX2Rpc3BsYXlfdXRpbHNfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyA9IF9fd2VicGFja19yZXF1aXJlX18oNDczKTtcblxuXG5mdW5jdGlvbiBiaW5kRXZlbnRzKG9iaiwgZWxlbWVudCwgbmFtZXMpIHtcbiAgZm9yIChjb25zdCBuYW1lIG9mIG5hbWVzKSB7XG4gICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKG5hbWUsIG9ialtuYW1lXS5iaW5kKG9iaikpO1xuICB9XG59XG5mdW5jdGlvbiBvcGFjaXR5VG9IZXgob3BhY2l0eSkge1xuICByZXR1cm4gTWF0aC5yb3VuZChNYXRoLm1pbigyNTUsIE1hdGgubWF4KDEsIDI1NSAqIG9wYWNpdHkpKSkudG9TdHJpbmcoMTYpLnBhZFN0YXJ0KDIsIFwiMFwiKTtcbn1cbmNsYXNzIElkTWFuYWdlciB7XG4gICNpZCA9IDA7XG4gIGdldElkKCkge1xuICAgIHJldHVybiBgJHtfc2hhcmVkX3V0aWxfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5Bbm5vdGF0aW9uRWRpdG9yUHJlZml4fSR7dGhpcy4jaWQrK31gO1xuICB9XG59XG5jbGFzcyBJbWFnZU1hbmFnZXIge1xuICAjYmFzZUlkID0gKDAsX3NoYXJlZF91dGlsX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uZ2V0VXVpZCkoKTtcbiAgI2lkID0gMDtcbiAgI2NhY2hlID0gbnVsbDtcbiAgc3RhdGljIGdldCBfaXNTVkdGaXR0aW5nQ2FudmFzKCkge1xuICAgIGNvbnN0IHN2ZyA9IGBkYXRhOmltYWdlL3N2Zyt4bWw7Y2hhcnNldD1VVEYtOCw8c3ZnIHZpZXdCb3g9XCIwIDAgMSAxXCIgd2lkdGg9XCIxXCIgaGVpZ2h0PVwiMVwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj48cmVjdCB3aWR0aD1cIjFcIiBoZWlnaHQ9XCIxXCIgc3R5bGU9XCJmaWxsOnJlZDtcIi8+PC9zdmc+YDtcbiAgICBjb25zdCBjYW52YXMgPSBuZXcgT2Zmc2NyZWVuQ2FudmFzKDEsIDMpO1xuICAgIGNvbnN0IGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KFwiMmRcIik7XG4gICAgY29uc3QgaW1hZ2UgPSBuZXcgSW1hZ2UoKTtcbiAgICBpbWFnZS5zcmMgPSBzdmc7XG4gICAgY29uc3QgcHJvbWlzZSA9IGltYWdlLmRlY29kZSgpLnRoZW4oKCkgPT4ge1xuICAgICAgY3R4LmRyYXdJbWFnZShpbWFnZSwgMCwgMCwgMSwgMSwgMCwgMCwgMSwgMyk7XG4gICAgICByZXR1cm4gbmV3IFVpbnQzMkFycmF5KGN0eC5nZXRJbWFnZURhdGEoMCwgMCwgMSwgMSkuZGF0YS5idWZmZXIpWzBdID09PSAwO1xuICAgIH0pO1xuICAgIHJldHVybiAoMCxfc2hhcmVkX3V0aWxfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5zaGFkb3cpKHRoaXMsIFwiX2lzU1ZHRml0dGluZ0NhbnZhc1wiLCBwcm9taXNlKTtcbiAgfVxuICBhc3luYyAjZ2V0KGtleSwgcmF3RGF0YSkge1xuICAgIHRoaXMuI2NhY2hlIHx8PSBuZXcgTWFwKCk7XG4gICAgbGV0IGRhdGEgPSB0aGlzLiNjYWNoZS5nZXQoa2V5KTtcbiAgICBpZiAoZGF0YSA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGlmIChkYXRhPy5iaXRtYXApIHtcbiAgICAgIGRhdGEucmVmQ291bnRlciArPSAxO1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICBkYXRhIHx8PSB7XG4gICAgICAgIGJpdG1hcDogbnVsbCxcbiAgICAgICAgaWQ6IGBpbWFnZV8ke3RoaXMuI2Jhc2VJZH1fJHt0aGlzLiNpZCsrfWAsXG4gICAgICAgIHJlZkNvdW50ZXI6IDAsXG4gICAgICAgIGlzU3ZnOiBmYWxzZVxuICAgICAgfTtcbiAgICAgIGxldCBpbWFnZTtcbiAgICAgIGlmICh0eXBlb2YgcmF3RGF0YSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICBkYXRhLnVybCA9IHJhd0RhdGE7XG4gICAgICAgIGltYWdlID0gYXdhaXQgKDAsX2Rpc3BsYXlfdXRpbHNfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5mZXRjaERhdGEpKHJhd0RhdGEsIFwiYmxvYlwiKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGltYWdlID0gZGF0YS5maWxlID0gcmF3RGF0YTtcbiAgICAgIH1cbiAgICAgIGlmIChpbWFnZS50eXBlID09PSBcImltYWdlL3N2Zyt4bWxcIikge1xuICAgICAgICBjb25zdCBtdXN0UmVtb3ZlQXNwZWN0UmF0aW9Qcm9taXNlID0gSW1hZ2VNYW5hZ2VyLl9pc1NWR0ZpdHRpbmdDYW52YXM7XG4gICAgICAgIGNvbnN0IGZpbGVSZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xuICAgICAgICBjb25zdCBpbWFnZUVsZW1lbnQgPSBuZXcgSW1hZ2UoKTtcbiAgICAgICAgY29uc3QgaW1hZ2VQcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgIGltYWdlRWxlbWVudC5vbmxvYWQgPSAoKSA9PiB7XG4gICAgICAgICAgICBkYXRhLmJpdG1hcCA9IGltYWdlRWxlbWVudDtcbiAgICAgICAgICAgIGRhdGEuaXNTdmcgPSB0cnVlO1xuICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgIH07XG4gICAgICAgICAgZmlsZVJlYWRlci5vbmxvYWQgPSBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB1cmwgPSBkYXRhLnN2Z1VybCA9IGZpbGVSZWFkZXIucmVzdWx0O1xuICAgICAgICAgICAgaW1hZ2VFbGVtZW50LnNyYyA9IChhd2FpdCBtdXN0UmVtb3ZlQXNwZWN0UmF0aW9Qcm9taXNlKSA/IGAke3VybH0jc3ZnVmlldyhwcmVzZXJ2ZUFzcGVjdFJhdGlvKG5vbmUpKWAgOiB1cmw7XG4gICAgICAgICAgfTtcbiAgICAgICAgICBpbWFnZUVsZW1lbnQub25lcnJvciA9IGZpbGVSZWFkZXIub25lcnJvciA9IHJlamVjdDtcbiAgICAgICAgfSk7XG4gICAgICAgIGZpbGVSZWFkZXIucmVhZEFzRGF0YVVSTChpbWFnZSk7XG4gICAgICAgIGF3YWl0IGltYWdlUHJvbWlzZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRhdGEuYml0bWFwID0gYXdhaXQgY3JlYXRlSW1hZ2VCaXRtYXAoaW1hZ2UpO1xuICAgICAgfVxuICAgICAgZGF0YS5yZWZDb3VudGVyID0gMTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBjb25zb2xlLmVycm9yKGUpO1xuICAgICAgZGF0YSA9IG51bGw7XG4gICAgfVxuICAgIHRoaXMuI2NhY2hlLnNldChrZXksIGRhdGEpO1xuICAgIGlmIChkYXRhKSB7XG4gICAgICB0aGlzLiNjYWNoZS5zZXQoZGF0YS5pZCwgZGF0YSk7XG4gICAgfVxuICAgIHJldHVybiBkYXRhO1xuICB9XG4gIGFzeW5jIGdldEZyb21GaWxlKGZpbGUpIHtcbiAgICBjb25zdCB7XG4gICAgICBsYXN0TW9kaWZpZWQsXG4gICAgICBuYW1lLFxuICAgICAgc2l6ZSxcbiAgICAgIHR5cGVcbiAgICB9ID0gZmlsZTtcbiAgICByZXR1cm4gdGhpcy4jZ2V0KGAke2xhc3RNb2RpZmllZH1fJHtuYW1lfV8ke3NpemV9XyR7dHlwZX1gLCBmaWxlKTtcbiAgfVxuICBhc3luYyBnZXRGcm9tVXJsKHVybCkge1xuICAgIHJldHVybiB0aGlzLiNnZXQodXJsLCB1cmwpO1xuICB9XG4gIGFzeW5jIGdldEZyb21JZChpZCkge1xuICAgIHRoaXMuI2NhY2hlIHx8PSBuZXcgTWFwKCk7XG4gICAgY29uc3QgZGF0YSA9IHRoaXMuI2NhY2hlLmdldChpZCk7XG4gICAgaWYgKCFkYXRhKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgaWYgKGRhdGEuYml0bWFwKSB7XG4gICAgICBkYXRhLnJlZkNvdW50ZXIgKz0gMTtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbiAgICBpZiAoZGF0YS5maWxlKSB7XG4gICAgICByZXR1cm4gdGhpcy5nZXRGcm9tRmlsZShkYXRhLmZpbGUpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5nZXRGcm9tVXJsKGRhdGEudXJsKTtcbiAgfVxuICBnZXRTdmdVcmwoaWQpIHtcbiAgICBjb25zdCBkYXRhID0gdGhpcy4jY2FjaGUuZ2V0KGlkKTtcbiAgICBpZiAoIWRhdGE/LmlzU3ZnKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIGRhdGEuc3ZnVXJsO1xuICB9XG4gIGRlbGV0ZUlkKGlkKSB7XG4gICAgdGhpcy4jY2FjaGUgfHw9IG5ldyBNYXAoKTtcbiAgICBjb25zdCBkYXRhID0gdGhpcy4jY2FjaGUuZ2V0KGlkKTtcbiAgICBpZiAoIWRhdGEpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZGF0YS5yZWZDb3VudGVyIC09IDE7XG4gICAgaWYgKGRhdGEucmVmQ291bnRlciAhPT0gMCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkYXRhLmJpdG1hcCA9IG51bGw7XG4gIH1cbiAgaXNWYWxpZElkKGlkKSB7XG4gICAgcmV0dXJuIGlkLnN0YXJ0c1dpdGgoYGltYWdlXyR7dGhpcy4jYmFzZUlkfV9gKTtcbiAgfVxufVxuY2xhc3MgQ29tbWFuZE1hbmFnZXIge1xuICAjY29tbWFuZHMgPSBbXTtcbiAgI2xvY2tlZCA9IGZhbHNlO1xuICAjbWF4U2l6ZTtcbiAgI3Bvc2l0aW9uID0gLTE7XG4gIGNvbnN0cnVjdG9yKG1heFNpemUgPSAxMjgpIHtcbiAgICB0aGlzLiNtYXhTaXplID0gbWF4U2l6ZTtcbiAgfVxuICBhZGQoe1xuICAgIGNtZCxcbiAgICB1bmRvLFxuICAgIG11c3RFeGVjLFxuICAgIHR5cGUgPSBOYU4sXG4gICAgb3ZlcndyaXRlSWZTYW1lVHlwZSA9IGZhbHNlLFxuICAgIGtlZXBVbmRvID0gZmFsc2VcbiAgfSkge1xuICAgIGlmIChtdXN0RXhlYykge1xuICAgICAgY21kKCk7XG4gICAgfVxuICAgIGlmICh0aGlzLiNsb2NrZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3Qgc2F2ZSA9IHtcbiAgICAgIGNtZCxcbiAgICAgIHVuZG8sXG4gICAgICB0eXBlXG4gICAgfTtcbiAgICBpZiAodGhpcy4jcG9zaXRpb24gPT09IC0xKSB7XG4gICAgICBpZiAodGhpcy4jY29tbWFuZHMubGVuZ3RoID4gMCkge1xuICAgICAgICB0aGlzLiNjb21tYW5kcy5sZW5ndGggPSAwO1xuICAgICAgfVxuICAgICAgdGhpcy4jcG9zaXRpb24gPSAwO1xuICAgICAgdGhpcy4jY29tbWFuZHMucHVzaChzYXZlKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKG92ZXJ3cml0ZUlmU2FtZVR5cGUgJiYgdGhpcy4jY29tbWFuZHNbdGhpcy4jcG9zaXRpb25dLnR5cGUgPT09IHR5cGUpIHtcbiAgICAgIGlmIChrZWVwVW5kbykge1xuICAgICAgICBzYXZlLnVuZG8gPSB0aGlzLiNjb21tYW5kc1t0aGlzLiNwb3NpdGlvbl0udW5kbztcbiAgICAgIH1cbiAgICAgIHRoaXMuI2NvbW1hbmRzW3RoaXMuI3Bvc2l0aW9uXSA9IHNhdmU7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IG5leHQgPSB0aGlzLiNwb3NpdGlvbiArIDE7XG4gICAgaWYgKG5leHQgPT09IHRoaXMuI21heFNpemUpIHtcbiAgICAgIHRoaXMuI2NvbW1hbmRzLnNwbGljZSgwLCAxKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy4jcG9zaXRpb24gPSBuZXh0O1xuICAgICAgaWYgKG5leHQgPCB0aGlzLiNjb21tYW5kcy5sZW5ndGgpIHtcbiAgICAgICAgdGhpcy4jY29tbWFuZHMuc3BsaWNlKG5leHQpO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLiNjb21tYW5kcy5wdXNoKHNhdmUpO1xuICB9XG4gIHVuZG8oKSB7XG4gICAgaWYgKHRoaXMuI3Bvc2l0aW9uID09PSAtMSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLiNsb2NrZWQgPSB0cnVlO1xuICAgIHRoaXMuI2NvbW1hbmRzW3RoaXMuI3Bvc2l0aW9uXS51bmRvKCk7XG4gICAgdGhpcy4jbG9ja2VkID0gZmFsc2U7XG4gICAgdGhpcy4jcG9zaXRpb24gLT0gMTtcbiAgfVxuICByZWRvKCkge1xuICAgIGlmICh0aGlzLiNwb3NpdGlvbiA8IHRoaXMuI2NvbW1hbmRzLmxlbmd0aCAtIDEpIHtcbiAgICAgIHRoaXMuI3Bvc2l0aW9uICs9IDE7XG4gICAgICB0aGlzLiNsb2NrZWQgPSB0cnVlO1xuICAgICAgdGhpcy4jY29tbWFuZHNbdGhpcy4jcG9zaXRpb25dLmNtZCgpO1xuICAgICAgdGhpcy4jbG9ja2VkID0gZmFsc2U7XG4gICAgfVxuICB9XG4gIGhhc1NvbWV0aGluZ1RvVW5kbygpIHtcbiAgICByZXR1cm4gdGhpcy4jcG9zaXRpb24gIT09IC0xO1xuICB9XG4gIGhhc1NvbWV0aGluZ1RvUmVkbygpIHtcbiAgICByZXR1cm4gdGhpcy4jcG9zaXRpb24gPCB0aGlzLiNjb21tYW5kcy5sZW5ndGggLSAxO1xuICB9XG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy4jY29tbWFuZHMgPSBudWxsO1xuICB9XG59XG5jbGFzcyBLZXlib2FyZE1hbmFnZXIge1xuICBjb25zdHJ1Y3RvcihjYWxsYmFja3MpIHtcbiAgICB0aGlzLmJ1ZmZlciA9IFtdO1xuICAgIHRoaXMuY2FsbGJhY2tzID0gbmV3IE1hcCgpO1xuICAgIHRoaXMuYWxsS2V5cyA9IG5ldyBTZXQoKTtcbiAgICBjb25zdCB7XG4gICAgICBpc01hY1xuICAgIH0gPSBfc2hhcmVkX3V0aWxfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5GZWF0dXJlVGVzdC5wbGF0Zm9ybTtcbiAgICBmb3IgKGNvbnN0IFtrZXlzLCBjYWxsYmFjaywgb3B0aW9ucyA9IHt9XSBvZiBjYWxsYmFja3MpIHtcbiAgICAgIGZvciAoY29uc3Qga2V5IG9mIGtleXMpIHtcbiAgICAgICAgY29uc3QgaXNNYWNLZXkgPSBrZXkuc3RhcnRzV2l0aChcIm1hYytcIik7XG4gICAgICAgIGlmIChpc01hYyAmJiBpc01hY0tleSkge1xuICAgICAgICAgIHRoaXMuY2FsbGJhY2tzLnNldChrZXkuc2xpY2UoNCksIHtcbiAgICAgICAgICAgIGNhbGxiYWNrLFxuICAgICAgICAgICAgb3B0aW9uc1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHRoaXMuYWxsS2V5cy5hZGQoa2V5LnNwbGl0KFwiK1wiKS5hdCgtMSkpO1xuICAgICAgICB9IGVsc2UgaWYgKCFpc01hYyAmJiAhaXNNYWNLZXkpIHtcbiAgICAgICAgICB0aGlzLmNhbGxiYWNrcy5zZXQoa2V5LCB7XG4gICAgICAgICAgICBjYWxsYmFjayxcbiAgICAgICAgICAgIG9wdGlvbnNcbiAgICAgICAgICB9KTtcbiAgICAgICAgICB0aGlzLmFsbEtleXMuYWRkKGtleS5zcGxpdChcIitcIikuYXQoLTEpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICAjc2VyaWFsaXplKGV2ZW50KSB7XG4gICAgaWYgKGV2ZW50LmFsdEtleSkge1xuICAgICAgdGhpcy5idWZmZXIucHVzaChcImFsdFwiKTtcbiAgICB9XG4gICAgaWYgKGV2ZW50LmN0cmxLZXkpIHtcbiAgICAgIHRoaXMuYnVmZmVyLnB1c2goXCJjdHJsXCIpO1xuICAgIH1cbiAgICBpZiAoZXZlbnQubWV0YUtleSkge1xuICAgICAgdGhpcy5idWZmZXIucHVzaChcIm1ldGFcIik7XG4gICAgfVxuICAgIGlmIChldmVudC5zaGlmdEtleSkge1xuICAgICAgdGhpcy5idWZmZXIucHVzaChcInNoaWZ0XCIpO1xuICAgIH1cbiAgICB0aGlzLmJ1ZmZlci5wdXNoKGV2ZW50LmtleSk7XG4gICAgY29uc3Qgc3RyID0gdGhpcy5idWZmZXIuam9pbihcIitcIik7XG4gICAgdGhpcy5idWZmZXIubGVuZ3RoID0gMDtcbiAgICByZXR1cm4gc3RyO1xuICB9XG4gIGV4ZWMoc2VsZiwgZXZlbnQpIHtcbiAgICBpZiAoIXRoaXMuYWxsS2V5cy5oYXMoZXZlbnQua2V5KSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBpbmZvID0gdGhpcy5jYWxsYmFja3MuZ2V0KHRoaXMuI3NlcmlhbGl6ZShldmVudCkpO1xuICAgIGlmICghaW5mbykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCB7XG4gICAgICBjYWxsYmFjayxcbiAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgYnViYmxlcyA9IGZhbHNlLFxuICAgICAgICBhcmdzID0gW10sXG4gICAgICAgIGNoZWNrZXIgPSBudWxsXG4gICAgICB9XG4gICAgfSA9IGluZm87XG4gICAgaWYgKGNoZWNrZXIgJiYgIWNoZWNrZXIoc2VsZiwgZXZlbnQpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNhbGxiYWNrLmJpbmQoc2VsZiwgLi4uYXJncywgZXZlbnQpKCk7XG4gICAgaWYgKCFidWJibGVzKSB7XG4gICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuICB9XG59XG5jbGFzcyBDb2xvck1hbmFnZXIge1xuICBzdGF0aWMgX2NvbG9yc01hcHBpbmcgPSBuZXcgTWFwKFtbXCJDYW52YXNUZXh0XCIsIFswLCAwLCAwXV0sIFtcIkNhbnZhc1wiLCBbMjU1LCAyNTUsIDI1NV1dXSk7XG4gIGdldCBfY29sb3JzKCkge1xuICAgIGNvbnN0IGNvbG9ycyA9IG5ldyBNYXAoW1tcIkNhbnZhc1RleHRcIiwgbnVsbF0sIFtcIkNhbnZhc1wiLCBudWxsXV0pO1xuICAgICgwLF9kaXNwbGF5X3V0aWxzX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uZ2V0Q29sb3JWYWx1ZXMpKGNvbG9ycyk7XG4gICAgcmV0dXJuICgwLF9zaGFyZWRfdXRpbF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLnNoYWRvdykodGhpcywgXCJfY29sb3JzXCIsIGNvbG9ycyk7XG4gIH1cbiAgY29udmVydChjb2xvcikge1xuICAgIGNvbnN0IHJnYiA9ICgwLF9kaXNwbGF5X3V0aWxzX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uZ2V0UkdCKShjb2xvcik7XG4gICAgaWYgKCF3aW5kb3cubWF0Y2hNZWRpYShcIihmb3JjZWQtY29sb3JzOiBhY3RpdmUpXCIpLm1hdGNoZXMpIHtcbiAgICAgIHJldHVybiByZ2I7XG4gICAgfVxuICAgIGZvciAoY29uc3QgW25hbWUsIFJHQl0gb2YgdGhpcy5fY29sb3JzKSB7XG4gICAgICBpZiAoUkdCLmV2ZXJ5KCh4LCBpKSA9PiB4ID09PSByZ2JbaV0pKSB7XG4gICAgICAgIHJldHVybiBDb2xvck1hbmFnZXIuX2NvbG9yc01hcHBpbmcuZ2V0KG5hbWUpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmdiO1xuICB9XG4gIGdldEhleENvZGUobmFtZSkge1xuICAgIGNvbnN0IHJnYiA9IHRoaXMuX2NvbG9ycy5nZXQobmFtZSk7XG4gICAgaWYgKCFyZ2IpIHtcbiAgICAgIHJldHVybiBuYW1lO1xuICAgIH1cbiAgICByZXR1cm4gX3NoYXJlZF91dGlsX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uVXRpbC5tYWtlSGV4Q29sb3IoLi4ucmdiKTtcbiAgfVxufVxuY2xhc3MgQW5ub3RhdGlvbkVkaXRvclVJTWFuYWdlciB7XG4gICNhY3RpdmVFZGl0b3IgPSBudWxsO1xuICAjYWxsRWRpdG9ycyA9IG5ldyBNYXAoKTtcbiAgI2FsbExheWVycyA9IG5ldyBNYXAoKTtcbiAgI2FsdFRleHRNYW5hZ2VyID0gbnVsbDtcbiAgI2Fubm90YXRpb25TdG9yYWdlID0gbnVsbDtcbiAgI2NvbW1hbmRNYW5hZ2VyID0gbmV3IENvbW1hbmRNYW5hZ2VyKCk7XG4gICNjdXJyZW50UGFnZUluZGV4ID0gMDtcbiAgI2RlbGV0ZWRBbm5vdGF0aW9uc0VsZW1lbnRJZHMgPSBuZXcgU2V0KCk7XG4gICNkcmFnZ2luZ0VkaXRvcnMgPSBudWxsO1xuICAjZWRpdG9yVHlwZXMgPSBudWxsO1xuICAjZWRpdG9yc1RvUmVzY2FsZSA9IG5ldyBTZXQoKTtcbiAgI2ZpbHRlckZhY3RvcnkgPSBudWxsO1xuICAjZm9jdXNNYWluQ29udGFpbmVyVGltZW91dElkID0gbnVsbDtcbiAgI2hpZ2hsaWdodENvbG9ycyA9IG51bGw7XG4gICNpZE1hbmFnZXIgPSBuZXcgSWRNYW5hZ2VyKCk7XG4gICNpc0VuYWJsZWQgPSBmYWxzZTtcbiAgI2lzV2FpdGluZyA9IGZhbHNlO1xuICAjbGFzdEFjdGl2ZUVsZW1lbnQgPSBudWxsO1xuICAjbWFpbkhpZ2hsaWdodENvbG9yUGlja2VyID0gbnVsbDtcbiAgI21vZGUgPSBfc2hhcmVkX3V0aWxfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5Bbm5vdGF0aW9uRWRpdG9yVHlwZS5OT05FO1xuICAjc2VsZWN0ZWRFZGl0b3JzID0gbmV3IFNldCgpO1xuICAjcGFnZUNvbG9ycyA9IG51bGw7XG4gICNib3VuZEJsdXIgPSB0aGlzLmJsdXIuYmluZCh0aGlzKTtcbiAgI2JvdW5kRm9jdXMgPSB0aGlzLmZvY3VzLmJpbmQodGhpcyk7XG4gICNib3VuZENvcHkgPSB0aGlzLmNvcHkuYmluZCh0aGlzKTtcbiAgI2JvdW5kQ3V0ID0gdGhpcy5jdXQuYmluZCh0aGlzKTtcbiAgI2JvdW5kUGFzdGUgPSB0aGlzLnBhc3RlLmJpbmQodGhpcyk7XG4gICNib3VuZEtleWRvd24gPSB0aGlzLmtleWRvd24uYmluZCh0aGlzKTtcbiAgI2JvdW5kT25FZGl0aW5nQWN0aW9uID0gdGhpcy5vbkVkaXRpbmdBY3Rpb24uYmluZCh0aGlzKTtcbiAgI2JvdW5kT25QYWdlQ2hhbmdpbmcgPSB0aGlzLm9uUGFnZUNoYW5naW5nLmJpbmQodGhpcyk7XG4gICNib3VuZE9uU2NhbGVDaGFuZ2luZyA9IHRoaXMub25TY2FsZUNoYW5naW5nLmJpbmQodGhpcyk7XG4gICNib3VuZE9uUm90YXRpb25DaGFuZ2luZyA9IHRoaXMub25Sb3RhdGlvbkNoYW5naW5nLmJpbmQodGhpcyk7XG4gICNwcmV2aW91c1N0YXRlcyA9IHtcbiAgICBpc0VkaXRpbmc6IGZhbHNlLFxuICAgIGlzRW1wdHk6IHRydWUsXG4gICAgaGFzU29tZXRoaW5nVG9VbmRvOiBmYWxzZSxcbiAgICBoYXNTb21ldGhpbmdUb1JlZG86IGZhbHNlLFxuICAgIGhhc1NlbGVjdGVkRWRpdG9yOiBmYWxzZVxuICB9O1xuICAjdHJhbnNsYXRpb24gPSBbMCwgMF07XG4gICN0cmFuc2xhdGlvblRpbWVvdXRJZCA9IG51bGw7XG4gICNjb250YWluZXIgPSBudWxsO1xuICAjdmlld2VyID0gbnVsbDtcbiAgc3RhdGljIFRSQU5TTEFURV9TTUFMTCA9IDE7XG4gIHN0YXRpYyBUUkFOU0xBVEVfQklHID0gMTA7XG4gIHN0YXRpYyBnZXQgX2tleWJvYXJkTWFuYWdlcigpIHtcbiAgICBjb25zdCBwcm90byA9IEFubm90YXRpb25FZGl0b3JVSU1hbmFnZXIucHJvdG90eXBlO1xuICAgIGNvbnN0IGFycm93Q2hlY2tlciA9IHNlbGYgPT4ge1xuICAgICAgcmV0dXJuIHNlbGYuI2NvbnRhaW5lci5jb250YWlucyhkb2N1bWVudC5hY3RpdmVFbGVtZW50KSAmJiBkb2N1bWVudC5hY3RpdmVFbGVtZW50LnRhZ05hbWUgIT09IFwiQlVUVE9OXCIgJiYgc2VsZi5oYXNTb21ldGhpbmdUb0NvbnRyb2woKTtcbiAgICB9O1xuICAgIGNvbnN0IHRleHRJbnB1dENoZWNrZXIgPSAoX3NlbGYsIHtcbiAgICAgIHRhcmdldDogZWxcbiAgICB9KSA9PiB7XG4gICAgICBpZiAoZWwgaW5zdGFuY2VvZiBIVE1MSW5wdXRFbGVtZW50KSB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICB0eXBlXG4gICAgICAgIH0gPSBlbDtcbiAgICAgICAgcmV0dXJuIHR5cGUgIT09IFwidGV4dFwiICYmIHR5cGUgIT09IFwibnVtYmVyXCI7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuICAgIGNvbnN0IHNtYWxsID0gdGhpcy5UUkFOU0xBVEVfU01BTEw7XG4gICAgY29uc3QgYmlnID0gdGhpcy5UUkFOU0xBVEVfQklHO1xuICAgIHJldHVybiAoMCxfc2hhcmVkX3V0aWxfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5zaGFkb3cpKHRoaXMsIFwiX2tleWJvYXJkTWFuYWdlclwiLCBuZXcgS2V5Ym9hcmRNYW5hZ2VyKFtbW1wiY3RybCthXCIsIFwibWFjK21ldGErYVwiXSwgcHJvdG8uc2VsZWN0QWxsLCB7XG4gICAgICBjaGVja2VyOiB0ZXh0SW5wdXRDaGVja2VyXG4gICAgfV0sIFtbXCJjdHJsK3pcIiwgXCJtYWMrbWV0YSt6XCJdLCBwcm90by51bmRvLCB7XG4gICAgICBjaGVja2VyOiB0ZXh0SW5wdXRDaGVja2VyXG4gICAgfV0sIFtbXCJjdHJsK3lcIiwgXCJjdHJsK3NoaWZ0K3pcIiwgXCJtYWMrbWV0YStzaGlmdCt6XCIsIFwiY3RybCtzaGlmdCtaXCIsIFwibWFjK21ldGErc2hpZnQrWlwiXSwgcHJvdG8ucmVkbywge1xuICAgICAgY2hlY2tlcjogdGV4dElucHV0Q2hlY2tlclxuICAgIH1dLCBbW1wiQmFja3NwYWNlXCIsIFwiYWx0K0JhY2tzcGFjZVwiLCBcImN0cmwrQmFja3NwYWNlXCIsIFwic2hpZnQrQmFja3NwYWNlXCIsIFwibWFjK0JhY2tzcGFjZVwiLCBcIm1hYythbHQrQmFja3NwYWNlXCIsIFwibWFjK2N0cmwrQmFja3NwYWNlXCIsIFwiRGVsZXRlXCIsIFwiY3RybCtEZWxldGVcIiwgXCJzaGlmdCtEZWxldGVcIiwgXCJtYWMrRGVsZXRlXCJdLCBwcm90by5kZWxldGUsIHtcbiAgICAgIGNoZWNrZXI6IHRleHRJbnB1dENoZWNrZXJcbiAgICB9XSwgW1tcIkVudGVyXCIsIFwibWFjK0VudGVyXCJdLCBwcm90by5hZGROZXdFZGl0b3JGcm9tS2V5Ym9hcmQsIHtcbiAgICAgIGNoZWNrZXI6IChzZWxmLCB7XG4gICAgICAgIHRhcmdldDogZWxcbiAgICAgIH0pID0+ICEoZWwgaW5zdGFuY2VvZiBIVE1MQnV0dG9uRWxlbWVudCkgJiYgc2VsZi4jY29udGFpbmVyLmNvbnRhaW5zKGVsKSAmJiAhc2VsZi5pc0VudGVySGFuZGxlZFxuICAgIH1dLCBbW1wiIFwiLCBcIm1hYysgXCJdLCBwcm90by5hZGROZXdFZGl0b3JGcm9tS2V5Ym9hcmQsIHtcbiAgICAgIGNoZWNrZXI6IHNlbGYgPT4gc2VsZi4jY29udGFpbmVyLmNvbnRhaW5zKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpXG4gICAgfV0sIFtbXCJFc2NhcGVcIiwgXCJtYWMrRXNjYXBlXCJdLCBwcm90by51bnNlbGVjdEFsbF0sIFtbXCJBcnJvd0xlZnRcIiwgXCJtYWMrQXJyb3dMZWZ0XCJdLCBwcm90by50cmFuc2xhdGVTZWxlY3RlZEVkaXRvcnMsIHtcbiAgICAgIGFyZ3M6IFstc21hbGwsIDBdLFxuICAgICAgY2hlY2tlcjogYXJyb3dDaGVja2VyXG4gICAgfV0sIFtbXCJjdHJsK0Fycm93TGVmdFwiLCBcIm1hYytzaGlmdCtBcnJvd0xlZnRcIl0sIHByb3RvLnRyYW5zbGF0ZVNlbGVjdGVkRWRpdG9ycywge1xuICAgICAgYXJnczogWy1iaWcsIDBdLFxuICAgICAgY2hlY2tlcjogYXJyb3dDaGVja2VyXG4gICAgfV0sIFtbXCJBcnJvd1JpZ2h0XCIsIFwibWFjK0Fycm93UmlnaHRcIl0sIHByb3RvLnRyYW5zbGF0ZVNlbGVjdGVkRWRpdG9ycywge1xuICAgICAgYXJnczogW3NtYWxsLCAwXSxcbiAgICAgIGNoZWNrZXI6IGFycm93Q2hlY2tlclxuICAgIH1dLCBbW1wiY3RybCtBcnJvd1JpZ2h0XCIsIFwibWFjK3NoaWZ0K0Fycm93UmlnaHRcIl0sIHByb3RvLnRyYW5zbGF0ZVNlbGVjdGVkRWRpdG9ycywge1xuICAgICAgYXJnczogW2JpZywgMF0sXG4gICAgICBjaGVja2VyOiBhcnJvd0NoZWNrZXJcbiAgICB9XSwgW1tcIkFycm93VXBcIiwgXCJtYWMrQXJyb3dVcFwiXSwgcHJvdG8udHJhbnNsYXRlU2VsZWN0ZWRFZGl0b3JzLCB7XG4gICAgICBhcmdzOiBbMCwgLXNtYWxsXSxcbiAgICAgIGNoZWNrZXI6IGFycm93Q2hlY2tlclxuICAgIH1dLCBbW1wiY3RybCtBcnJvd1VwXCIsIFwibWFjK3NoaWZ0K0Fycm93VXBcIl0sIHByb3RvLnRyYW5zbGF0ZVNlbGVjdGVkRWRpdG9ycywge1xuICAgICAgYXJnczogWzAsIC1iaWddLFxuICAgICAgY2hlY2tlcjogYXJyb3dDaGVja2VyXG4gICAgfV0sIFtbXCJBcnJvd0Rvd25cIiwgXCJtYWMrQXJyb3dEb3duXCJdLCBwcm90by50cmFuc2xhdGVTZWxlY3RlZEVkaXRvcnMsIHtcbiAgICAgIGFyZ3M6IFswLCBzbWFsbF0sXG4gICAgICBjaGVja2VyOiBhcnJvd0NoZWNrZXJcbiAgICB9XSwgW1tcImN0cmwrQXJyb3dEb3duXCIsIFwibWFjK3NoaWZ0K0Fycm93RG93blwiXSwgcHJvdG8udHJhbnNsYXRlU2VsZWN0ZWRFZGl0b3JzLCB7XG4gICAgICBhcmdzOiBbMCwgYmlnXSxcbiAgICAgIGNoZWNrZXI6IGFycm93Q2hlY2tlclxuICAgIH1dXSkpO1xuICB9XG4gIGNvbnN0cnVjdG9yKGNvbnRhaW5lciwgdmlld2VyLCBhbHRUZXh0TWFuYWdlciwgZXZlbnRCdXMsIHBkZkRvY3VtZW50LCBwYWdlQ29sb3JzLCBoaWdobGlnaHRDb2xvcnMpIHtcbiAgICB0aGlzLiNjb250YWluZXIgPSBjb250YWluZXI7XG4gICAgdGhpcy4jdmlld2VyID0gdmlld2VyO1xuICAgIHRoaXMuI2FsdFRleHRNYW5hZ2VyID0gYWx0VGV4dE1hbmFnZXI7XG4gICAgdGhpcy5fZXZlbnRCdXMgPSBldmVudEJ1cztcbiAgICB0aGlzLl9ldmVudEJ1cy5fb24oXCJlZGl0aW5nYWN0aW9uXCIsIHRoaXMuI2JvdW5kT25FZGl0aW5nQWN0aW9uKTtcbiAgICB0aGlzLl9ldmVudEJ1cy5fb24oXCJwYWdlY2hhbmdpbmdcIiwgdGhpcy4jYm91bmRPblBhZ2VDaGFuZ2luZyk7XG4gICAgdGhpcy5fZXZlbnRCdXMuX29uKFwic2NhbGVjaGFuZ2luZ1wiLCB0aGlzLiNib3VuZE9uU2NhbGVDaGFuZ2luZyk7XG4gICAgdGhpcy5fZXZlbnRCdXMuX29uKFwicm90YXRpb25jaGFuZ2luZ1wiLCB0aGlzLiNib3VuZE9uUm90YXRpb25DaGFuZ2luZyk7XG4gICAgdGhpcy4jYW5ub3RhdGlvblN0b3JhZ2UgPSBwZGZEb2N1bWVudC5hbm5vdGF0aW9uU3RvcmFnZTtcbiAgICB0aGlzLiNmaWx0ZXJGYWN0b3J5ID0gcGRmRG9jdW1lbnQuZmlsdGVyRmFjdG9yeTtcbiAgICB0aGlzLiNwYWdlQ29sb3JzID0gcGFnZUNvbG9ycztcbiAgICB0aGlzLiNoaWdobGlnaHRDb2xvcnMgPSBoaWdobGlnaHRDb2xvcnMgfHwgbnVsbDtcbiAgICB0aGlzLnZpZXdQYXJhbWV0ZXJzID0ge1xuICAgICAgcmVhbFNjYWxlOiBfZGlzcGxheV91dGlsc19qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLlBpeGVsc1BlckluY2guUERGX1RPX0NTU19VTklUUyxcbiAgICAgIHJvdGF0aW9uOiAwXG4gICAgfTtcbiAgfVxuICBkZXN0cm95KCkge1xuICAgIHRoaXMuI3JlbW92ZUtleWJvYXJkTWFuYWdlcigpO1xuICAgIHRoaXMuI3JlbW92ZUZvY3VzTWFuYWdlcigpO1xuICAgIHRoaXMuX2V2ZW50QnVzLl9vZmYoXCJlZGl0aW5nYWN0aW9uXCIsIHRoaXMuI2JvdW5kT25FZGl0aW5nQWN0aW9uKTtcbiAgICB0aGlzLl9ldmVudEJ1cy5fb2ZmKFwicGFnZWNoYW5naW5nXCIsIHRoaXMuI2JvdW5kT25QYWdlQ2hhbmdpbmcpO1xuICAgIHRoaXMuX2V2ZW50QnVzLl9vZmYoXCJzY2FsZWNoYW5naW5nXCIsIHRoaXMuI2JvdW5kT25TY2FsZUNoYW5naW5nKTtcbiAgICB0aGlzLl9ldmVudEJ1cy5fb2ZmKFwicm90YXRpb25jaGFuZ2luZ1wiLCB0aGlzLiNib3VuZE9uUm90YXRpb25DaGFuZ2luZyk7XG4gICAgZm9yIChjb25zdCBsYXllciBvZiB0aGlzLiNhbGxMYXllcnMudmFsdWVzKCkpIHtcbiAgICAgIGxheWVyLmRlc3Ryb3koKTtcbiAgICB9XG4gICAgdGhpcy4jYWxsTGF5ZXJzLmNsZWFyKCk7XG4gICAgdGhpcy4jYWxsRWRpdG9ycy5jbGVhcigpO1xuICAgIHRoaXMuI2VkaXRvcnNUb1Jlc2NhbGUuY2xlYXIoKTtcbiAgICB0aGlzLiNhY3RpdmVFZGl0b3IgPSBudWxsO1xuICAgIHRoaXMuI3NlbGVjdGVkRWRpdG9ycy5jbGVhcigpO1xuICAgIHRoaXMuI2NvbW1hbmRNYW5hZ2VyLmRlc3Ryb3koKTtcbiAgICB0aGlzLiNhbHRUZXh0TWFuYWdlcj8uZGVzdHJveSgpO1xuICAgIGlmICh0aGlzLiNmb2N1c01haW5Db250YWluZXJUaW1lb3V0SWQpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLiNmb2N1c01haW5Db250YWluZXJUaW1lb3V0SWQpO1xuICAgICAgdGhpcy4jZm9jdXNNYWluQ29udGFpbmVyVGltZW91dElkID0gbnVsbDtcbiAgICB9XG4gICAgaWYgKHRoaXMuI3RyYW5zbGF0aW9uVGltZW91dElkKSB7XG4gICAgICBjbGVhclRpbWVvdXQodGhpcy4jdHJhbnNsYXRpb25UaW1lb3V0SWQpO1xuICAgICAgdGhpcy4jdHJhbnNsYXRpb25UaW1lb3V0SWQgPSBudWxsO1xuICAgIH1cbiAgfVxuICBnZXQgaGNtRmlsdGVyKCkge1xuICAgIHJldHVybiAoMCxfc2hhcmVkX3V0aWxfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5zaGFkb3cpKHRoaXMsIFwiaGNtRmlsdGVyXCIsIHRoaXMuI3BhZ2VDb2xvcnMgPyB0aGlzLiNmaWx0ZXJGYWN0b3J5LmFkZEhDTUZpbHRlcih0aGlzLiNwYWdlQ29sb3JzLmZvcmVncm91bmQsIHRoaXMuI3BhZ2VDb2xvcnMuYmFja2dyb3VuZCkgOiBcIm5vbmVcIik7XG4gIH1cbiAgZ2V0IGRpcmVjdGlvbigpIHtcbiAgICByZXR1cm4gKDAsX3NoYXJlZF91dGlsX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uc2hhZG93KSh0aGlzLCBcImRpcmVjdGlvblwiLCBnZXRDb21wdXRlZFN0eWxlKHRoaXMuI2NvbnRhaW5lcikuZGlyZWN0aW9uKTtcbiAgfVxuICBnZXQgaGlnaGxpZ2h0Q29sb3JzKCkge1xuICAgIHJldHVybiAoMCxfc2hhcmVkX3V0aWxfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5zaGFkb3cpKHRoaXMsIFwiaGlnaGxpZ2h0Q29sb3JzXCIsIHRoaXMuI2hpZ2hsaWdodENvbG9ycyA/IG5ldyBNYXAodGhpcy4jaGlnaGxpZ2h0Q29sb3JzLnNwbGl0KFwiLFwiKS5tYXAocGFpciA9PiBwYWlyLnNwbGl0KFwiPVwiKS5tYXAoeCA9PiB4LnRyaW0oKSkpKSA6IG51bGwpO1xuICB9XG4gIHNldE1haW5IaWdobGlnaHRDb2xvclBpY2tlcihjb2xvclBpY2tlcikge1xuICAgIHRoaXMuI21haW5IaWdobGlnaHRDb2xvclBpY2tlciA9IGNvbG9yUGlja2VyO1xuICB9XG4gIGVkaXRBbHRUZXh0KGVkaXRvcikge1xuICAgIHRoaXMuI2FsdFRleHRNYW5hZ2VyPy5lZGl0QWx0VGV4dCh0aGlzLCBlZGl0b3IpO1xuICB9XG4gIG9uUGFnZUNoYW5naW5nKHtcbiAgICBwYWdlTnVtYmVyXG4gIH0pIHtcbiAgICB0aGlzLiNjdXJyZW50UGFnZUluZGV4ID0gcGFnZU51bWJlciAtIDE7XG4gIH1cbiAgZm9jdXNNYWluQ29udGFpbmVyKCkge1xuICAgIHRoaXMuI2NvbnRhaW5lci5mb2N1cygpO1xuICB9XG4gIGZpbmRQYXJlbnQoeCwgeSkge1xuICAgIGZvciAoY29uc3QgbGF5ZXIgb2YgdGhpcy4jYWxsTGF5ZXJzLnZhbHVlcygpKSB7XG4gICAgICBjb25zdCB7XG4gICAgICAgIHg6IGxheWVyWCxcbiAgICAgICAgeTogbGF5ZXJZLFxuICAgICAgICB3aWR0aCxcbiAgICAgICAgaGVpZ2h0XG4gICAgICB9ID0gbGF5ZXIuZGl2LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgaWYgKHggPj0gbGF5ZXJYICYmIHggPD0gbGF5ZXJYICsgd2lkdGggJiYgeSA+PSBsYXllclkgJiYgeSA8PSBsYXllclkgKyBoZWlnaHQpIHtcbiAgICAgICAgcmV0dXJuIGxheWVyO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBkaXNhYmxlVXNlclNlbGVjdCh2YWx1ZSA9IGZhbHNlKSB7XG4gICAgdGhpcy4jdmlld2VyLmNsYXNzTGlzdC50b2dnbGUoXCJub1VzZXJTZWxlY3RcIiwgdmFsdWUpO1xuICB9XG4gIGFkZFNob3VsZFJlc2NhbGUoZWRpdG9yKSB7XG4gICAgdGhpcy4jZWRpdG9yc1RvUmVzY2FsZS5hZGQoZWRpdG9yKTtcbiAgfVxuICByZW1vdmVTaG91bGRSZXNjYWxlKGVkaXRvcikge1xuICAgIHRoaXMuI2VkaXRvcnNUb1Jlc2NhbGUuZGVsZXRlKGVkaXRvcik7XG4gIH1cbiAgb25TY2FsZUNoYW5naW5nKHtcbiAgICBzY2FsZVxuICB9KSB7XG4gICAgdGhpcy5jb21taXRPclJlbW92ZSgpO1xuICAgIHRoaXMudmlld1BhcmFtZXRlcnMucmVhbFNjYWxlID0gc2NhbGUgKiBfZGlzcGxheV91dGlsc19qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLlBpeGVsc1BlckluY2guUERGX1RPX0NTU19VTklUUztcbiAgICBmb3IgKGNvbnN0IGVkaXRvciBvZiB0aGlzLiNlZGl0b3JzVG9SZXNjYWxlKSB7XG4gICAgICBlZGl0b3Iub25TY2FsZUNoYW5naW5nKCk7XG4gICAgfVxuICB9XG4gIG9uUm90YXRpb25DaGFuZ2luZyh7XG4gICAgcGFnZXNSb3RhdGlvblxuICB9KSB7XG4gICAgdGhpcy5jb21taXRPclJlbW92ZSgpO1xuICAgIHRoaXMudmlld1BhcmFtZXRlcnMucm90YXRpb24gPSBwYWdlc1JvdGF0aW9uO1xuICB9XG4gIGFkZFRvQW5ub3RhdGlvblN0b3JhZ2UoZWRpdG9yKSB7XG4gICAgaWYgKCFlZGl0b3IuaXNFbXB0eSgpICYmIHRoaXMuI2Fubm90YXRpb25TdG9yYWdlICYmICF0aGlzLiNhbm5vdGF0aW9uU3RvcmFnZS5oYXMoZWRpdG9yLmlkKSkge1xuICAgICAgdGhpcy4jYW5ub3RhdGlvblN0b3JhZ2Uuc2V0VmFsdWUoZWRpdG9yLmlkLCBlZGl0b3IpO1xuICAgIH1cbiAgfVxuICAjYWRkRm9jdXNNYW5hZ2VyKCkge1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwiZm9jdXNcIiwgdGhpcy4jYm91bmRGb2N1cyk7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJibHVyXCIsIHRoaXMuI2JvdW5kQmx1cik7XG4gIH1cbiAgI3JlbW92ZUZvY3VzTWFuYWdlcigpIHtcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImZvY3VzXCIsIHRoaXMuI2JvdW5kRm9jdXMpO1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwiYmx1clwiLCB0aGlzLiNib3VuZEJsdXIpO1xuICB9XG4gIGJsdXIoKSB7XG4gICAgaWYgKCF0aGlzLmhhc1NlbGVjdGlvbikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCB7XG4gICAgICBhY3RpdmVFbGVtZW50XG4gICAgfSA9IGRvY3VtZW50O1xuICAgIGZvciAoY29uc3QgZWRpdG9yIG9mIHRoaXMuI3NlbGVjdGVkRWRpdG9ycykge1xuICAgICAgaWYgKGVkaXRvci5kaXYuY29udGFpbnMoYWN0aXZlRWxlbWVudCkpIHtcbiAgICAgICAgdGhpcy4jbGFzdEFjdGl2ZUVsZW1lbnQgPSBbZWRpdG9yLCBhY3RpdmVFbGVtZW50XTtcbiAgICAgICAgZWRpdG9yLl9mb2N1c0V2ZW50c0FsbG93ZWQgPSBmYWxzZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGZvY3VzKCkge1xuICAgIGlmICghdGhpcy4jbGFzdEFjdGl2ZUVsZW1lbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgW2xhc3RFZGl0b3IsIGxhc3RBY3RpdmVFbGVtZW50XSA9IHRoaXMuI2xhc3RBY3RpdmVFbGVtZW50O1xuICAgIHRoaXMuI2xhc3RBY3RpdmVFbGVtZW50ID0gbnVsbDtcbiAgICBsYXN0QWN0aXZlRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiZm9jdXNpblwiLCAoKSA9PiB7XG4gICAgICBsYXN0RWRpdG9yLl9mb2N1c0V2ZW50c0FsbG93ZWQgPSB0cnVlO1xuICAgIH0sIHtcbiAgICAgIG9uY2U6IHRydWVcbiAgICB9KTtcbiAgICBsYXN0QWN0aXZlRWxlbWVudC5mb2N1cygpO1xuICB9XG4gICNhZGRLZXlib2FyZE1hbmFnZXIoKSB7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIHRoaXMuI2JvdW5kS2V5ZG93bik7XG4gIH1cbiAgI3JlbW92ZUtleWJvYXJkTWFuYWdlcigpIHtcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgdGhpcy4jYm91bmRLZXlkb3duKTtcbiAgfVxuICAjYWRkQ29weVBhc3RlTGlzdGVuZXJzKCkge1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJjb3B5XCIsIHRoaXMuI2JvdW5kQ29weSk7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImN1dFwiLCB0aGlzLiNib3VuZEN1dCk7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInBhc3RlXCIsIHRoaXMuI2JvdW5kUGFzdGUpO1xuICB9XG4gICNyZW1vdmVDb3B5UGFzdGVMaXN0ZW5lcnMoKSB7XG4gICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImNvcHlcIiwgdGhpcy4jYm91bmRDb3B5KTtcbiAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwiY3V0XCIsIHRoaXMuI2JvdW5kQ3V0KTtcbiAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwicGFzdGVcIiwgdGhpcy4jYm91bmRQYXN0ZSk7XG4gIH1cbiAgYWRkRWRpdExpc3RlbmVycygpIHtcbiAgICB0aGlzLiNhZGRLZXlib2FyZE1hbmFnZXIoKTtcbiAgICB0aGlzLiNhZGRDb3B5UGFzdGVMaXN0ZW5lcnMoKTtcbiAgfVxuICByZW1vdmVFZGl0TGlzdGVuZXJzKCkge1xuICAgIHRoaXMuI3JlbW92ZUtleWJvYXJkTWFuYWdlcigpO1xuICAgIHRoaXMuI3JlbW92ZUNvcHlQYXN0ZUxpc3RlbmVycygpO1xuICB9XG4gIGNvcHkoZXZlbnQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIHRoaXMuI2FjdGl2ZUVkaXRvcj8uY29tbWl0T3JSZW1vdmUoKTtcbiAgICBpZiAoIXRoaXMuaGFzU2VsZWN0aW9uKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGVkaXRvcnMgPSBbXTtcbiAgICBmb3IgKGNvbnN0IGVkaXRvciBvZiB0aGlzLiNzZWxlY3RlZEVkaXRvcnMpIHtcbiAgICAgIGNvbnN0IHNlcmlhbGl6ZWQgPSBlZGl0b3Iuc2VyaWFsaXplKHRydWUpO1xuICAgICAgaWYgKHNlcmlhbGl6ZWQpIHtcbiAgICAgICAgZWRpdG9ycy5wdXNoKHNlcmlhbGl6ZWQpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZWRpdG9ycy5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZXZlbnQuY2xpcGJvYXJkRGF0YS5zZXREYXRhKFwiYXBwbGljYXRpb24vcGRmanNcIiwgSlNPTi5zdHJpbmdpZnkoZWRpdG9ycykpO1xuICB9XG4gIGN1dChldmVudCkge1xuICAgIHRoaXMuY29weShldmVudCk7XG4gICAgdGhpcy5kZWxldGUoKTtcbiAgfVxuICBwYXN0ZShldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgY29uc3Qge1xuICAgICAgY2xpcGJvYXJkRGF0YVxuICAgIH0gPSBldmVudDtcbiAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgY2xpcGJvYXJkRGF0YS5pdGVtcykge1xuICAgICAgZm9yIChjb25zdCBlZGl0b3JUeXBlIG9mIHRoaXMuI2VkaXRvclR5cGVzKSB7XG4gICAgICAgIGlmIChlZGl0b3JUeXBlLmlzSGFuZGxpbmdNaW1lRm9yUGFzdGluZyhpdGVtLnR5cGUpKSB7XG4gICAgICAgICAgZWRpdG9yVHlwZS5wYXN0ZShpdGVtLCB0aGlzLmN1cnJlbnRMYXllcik7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGxldCBkYXRhID0gY2xpcGJvYXJkRGF0YS5nZXREYXRhKFwiYXBwbGljYXRpb24vcGRmanNcIik7XG4gICAgaWYgKCFkYXRhKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICBkYXRhID0gSlNPTi5wYXJzZShkYXRhKTtcbiAgICB9IGNhdGNoIChleCkge1xuICAgICAgKDAsX3NoYXJlZF91dGlsX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18ud2FybikoYHBhc3RlOiBcIiR7ZXgubWVzc2FnZX1cIi5gKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGRhdGEpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMudW5zZWxlY3RBbGwoKTtcbiAgICBjb25zdCBsYXllciA9IHRoaXMuY3VycmVudExheWVyO1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBuZXdFZGl0b3JzID0gW107XG4gICAgICBmb3IgKGNvbnN0IGVkaXRvciBvZiBkYXRhKSB7XG4gICAgICAgIGNvbnN0IGRlc2VyaWFsaXplZEVkaXRvciA9IGxheWVyLmRlc2VyaWFsaXplKGVkaXRvcik7XG4gICAgICAgIGlmICghZGVzZXJpYWxpemVkRWRpdG9yKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIG5ld0VkaXRvcnMucHVzaChkZXNlcmlhbGl6ZWRFZGl0b3IpO1xuICAgICAgfVxuICAgICAgY29uc3QgY21kID0gKCkgPT4ge1xuICAgICAgICBmb3IgKGNvbnN0IGVkaXRvciBvZiBuZXdFZGl0b3JzKSB7XG4gICAgICAgICAgdGhpcy4jYWRkRWRpdG9yVG9MYXllcihlZGl0b3IpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuI3NlbGVjdEVkaXRvcnMobmV3RWRpdG9ycyk7XG4gICAgICB9O1xuICAgICAgY29uc3QgdW5kbyA9ICgpID0+IHtcbiAgICAgICAgZm9yIChjb25zdCBlZGl0b3Igb2YgbmV3RWRpdG9ycykge1xuICAgICAgICAgIGVkaXRvci5yZW1vdmUoKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIHRoaXMuYWRkQ29tbWFuZHMoe1xuICAgICAgICBjbWQsXG4gICAgICAgIHVuZG8sXG4gICAgICAgIG11c3RFeGVjOiB0cnVlXG4gICAgICB9KTtcbiAgICB9IGNhdGNoIChleCkge1xuICAgICAgKDAsX3NoYXJlZF91dGlsX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18ud2FybikoYHBhc3RlOiBcIiR7ZXgubWVzc2FnZX1cIi5gKTtcbiAgICB9XG4gIH1cbiAga2V5ZG93bihldmVudCkge1xuICAgIGlmICghdGhpcy5pc0VkaXRvckhhbmRsaW5nS2V5Ym9hcmQpIHtcbiAgICAgIEFubm90YXRpb25FZGl0b3JVSU1hbmFnZXIuX2tleWJvYXJkTWFuYWdlci5leGVjKHRoaXMsIGV2ZW50KTtcbiAgICB9XG4gIH1cbiAgb25FZGl0aW5nQWN0aW9uKGRldGFpbHMpIHtcbiAgICBpZiAoW1widW5kb1wiLCBcInJlZG9cIiwgXCJkZWxldGVcIiwgXCJzZWxlY3RBbGxcIl0uaW5jbHVkZXMoZGV0YWlscy5uYW1lKSkge1xuICAgICAgdGhpc1tkZXRhaWxzLm5hbWVdKCk7XG4gICAgfVxuICB9XG4gICNkaXNwYXRjaFVwZGF0ZVN0YXRlcyhkZXRhaWxzKSB7XG4gICAgY29uc3QgaGFzQ2hhbmdlZCA9IE9iamVjdC5lbnRyaWVzKGRldGFpbHMpLnNvbWUoKFtrZXksIHZhbHVlXSkgPT4gdGhpcy4jcHJldmlvdXNTdGF0ZXNba2V5XSAhPT0gdmFsdWUpO1xuICAgIGlmIChoYXNDaGFuZ2VkKSB7XG4gICAgICB0aGlzLl9ldmVudEJ1cy5kaXNwYXRjaChcImFubm90YXRpb25lZGl0b3JzdGF0ZXNjaGFuZ2VkXCIsIHtcbiAgICAgICAgc291cmNlOiB0aGlzLFxuICAgICAgICBkZXRhaWxzOiBPYmplY3QuYXNzaWduKHRoaXMuI3ByZXZpb3VzU3RhdGVzLCBkZXRhaWxzKVxuICAgICAgfSk7XG4gICAgfVxuICB9XG4gICNkaXNwYXRjaFVwZGF0ZVVJKGRldGFpbHMpIHtcbiAgICB0aGlzLl9ldmVudEJ1cy5kaXNwYXRjaChcImFubm90YXRpb25lZGl0b3JwYXJhbXNjaGFuZ2VkXCIsIHtcbiAgICAgIHNvdXJjZTogdGhpcyxcbiAgICAgIGRldGFpbHNcbiAgICB9KTtcbiAgfVxuICBzZXRFZGl0aW5nU3RhdGUoaXNFZGl0aW5nKSB7XG4gICAgaWYgKGlzRWRpdGluZykge1xuICAgICAgdGhpcy4jYWRkRm9jdXNNYW5hZ2VyKCk7XG4gICAgICB0aGlzLiNhZGRLZXlib2FyZE1hbmFnZXIoKTtcbiAgICAgIHRoaXMuI2FkZENvcHlQYXN0ZUxpc3RlbmVycygpO1xuICAgICAgdGhpcy4jZGlzcGF0Y2hVcGRhdGVTdGF0ZXMoe1xuICAgICAgICBpc0VkaXRpbmc6IHRoaXMuI21vZGUgIT09IF9zaGFyZWRfdXRpbF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLkFubm90YXRpb25FZGl0b3JUeXBlLk5PTkUsXG4gICAgICAgIGlzRW1wdHk6IHRoaXMuI2lzRW1wdHkoKSxcbiAgICAgICAgaGFzU29tZXRoaW5nVG9VbmRvOiB0aGlzLiNjb21tYW5kTWFuYWdlci5oYXNTb21ldGhpbmdUb1VuZG8oKSxcbiAgICAgICAgaGFzU29tZXRoaW5nVG9SZWRvOiB0aGlzLiNjb21tYW5kTWFuYWdlci5oYXNTb21ldGhpbmdUb1JlZG8oKSxcbiAgICAgICAgaGFzU2VsZWN0ZWRFZGl0b3I6IGZhbHNlXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy4jcmVtb3ZlRm9jdXNNYW5hZ2VyKCk7XG4gICAgICB0aGlzLiNyZW1vdmVLZXlib2FyZE1hbmFnZXIoKTtcbiAgICAgIHRoaXMuI3JlbW92ZUNvcHlQYXN0ZUxpc3RlbmVycygpO1xuICAgICAgdGhpcy4jZGlzcGF0Y2hVcGRhdGVTdGF0ZXMoe1xuICAgICAgICBpc0VkaXRpbmc6IGZhbHNlXG4gICAgICB9KTtcbiAgICAgIHRoaXMuZGlzYWJsZVVzZXJTZWxlY3QoZmFsc2UpO1xuICAgIH1cbiAgfVxuICByZWdpc3RlckVkaXRvclR5cGVzKHR5cGVzKSB7XG4gICAgaWYgKHRoaXMuI2VkaXRvclR5cGVzKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuI2VkaXRvclR5cGVzID0gdHlwZXM7XG4gICAgZm9yIChjb25zdCBlZGl0b3JUeXBlIG9mIHRoaXMuI2VkaXRvclR5cGVzKSB7XG4gICAgICB0aGlzLiNkaXNwYXRjaFVwZGF0ZVVJKGVkaXRvclR5cGUuZGVmYXVsdFByb3BlcnRpZXNUb1VwZGF0ZSk7XG4gICAgfVxuICB9XG4gIGdldElkKCkge1xuICAgIHJldHVybiB0aGlzLiNpZE1hbmFnZXIuZ2V0SWQoKTtcbiAgfVxuICBnZXQgY3VycmVudExheWVyKCkge1xuICAgIHJldHVybiB0aGlzLiNhbGxMYXllcnMuZ2V0KHRoaXMuI2N1cnJlbnRQYWdlSW5kZXgpO1xuICB9XG4gIGdldExheWVyKHBhZ2VJbmRleCkge1xuICAgIHJldHVybiB0aGlzLiNhbGxMYXllcnMuZ2V0KHBhZ2VJbmRleCk7XG4gIH1cbiAgZ2V0IGN1cnJlbnRQYWdlSW5kZXgoKSB7XG4gICAgcmV0dXJuIHRoaXMuI2N1cnJlbnRQYWdlSW5kZXg7XG4gIH1cbiAgYWRkTGF5ZXIobGF5ZXIpIHtcbiAgICB0aGlzLiNhbGxMYXllcnMuc2V0KGxheWVyLnBhZ2VJbmRleCwgbGF5ZXIpO1xuICAgIGlmICh0aGlzLiNpc0VuYWJsZWQpIHtcbiAgICAgIGxheWVyLmVuYWJsZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBsYXllci5kaXNhYmxlKCk7XG4gICAgfVxuICB9XG4gIHJlbW92ZUxheWVyKGxheWVyKSB7XG4gICAgdGhpcy4jYWxsTGF5ZXJzLmRlbGV0ZShsYXllci5wYWdlSW5kZXgpO1xuICB9XG4gIHVwZGF0ZU1vZGUobW9kZSwgZWRpdElkID0gbnVsbCwgaXNGcm9tS2V5Ym9hcmQgPSBmYWxzZSkge1xuICAgIGlmICh0aGlzLiNtb2RlID09PSBtb2RlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuI21vZGUgPSBtb2RlO1xuICAgIGlmIChtb2RlID09PSBfc2hhcmVkX3V0aWxfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5Bbm5vdGF0aW9uRWRpdG9yVHlwZS5OT05FKSB7XG4gICAgICB0aGlzLnNldEVkaXRpbmdTdGF0ZShmYWxzZSk7XG4gICAgICB0aGlzLiNkaXNhYmxlQWxsKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuc2V0RWRpdGluZ1N0YXRlKHRydWUpO1xuICAgIHRoaXMuI2VuYWJsZUFsbCgpO1xuICAgIHRoaXMudW5zZWxlY3RBbGwoKTtcbiAgICBmb3IgKGNvbnN0IGxheWVyIG9mIHRoaXMuI2FsbExheWVycy52YWx1ZXMoKSkge1xuICAgICAgbGF5ZXIudXBkYXRlTW9kZShtb2RlKTtcbiAgICB9XG4gICAgaWYgKCFlZGl0SWQgJiYgaXNGcm9tS2V5Ym9hcmQpIHtcbiAgICAgIHRoaXMuYWRkTmV3RWRpdG9yRnJvbUtleWJvYXJkKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICghZWRpdElkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGZvciAoY29uc3QgZWRpdG9yIG9mIHRoaXMuI2FsbEVkaXRvcnMudmFsdWVzKCkpIHtcbiAgICAgIGlmIChlZGl0b3IuYW5ub3RhdGlvbkVsZW1lbnRJZCA9PT0gZWRpdElkKSB7XG4gICAgICAgIHRoaXMuc2V0U2VsZWN0ZWQoZWRpdG9yKTtcbiAgICAgICAgZWRpdG9yLmVudGVySW5FZGl0TW9kZSgpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgYWRkTmV3RWRpdG9yRnJvbUtleWJvYXJkKCkge1xuICAgIGlmICh0aGlzLmN1cnJlbnRMYXllci5jYW5DcmVhdGVOZXdFbXB0eUVkaXRvcigpKSB7XG4gICAgICB0aGlzLmN1cnJlbnRMYXllci5hZGROZXdFZGl0b3IoKTtcbiAgICB9XG4gIH1cbiAgdXBkYXRlVG9vbGJhcihtb2RlKSB7XG4gICAgaWYgKG1vZGUgPT09IHRoaXMuI21vZGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5fZXZlbnRCdXMuZGlzcGF0Y2goXCJzd2l0Y2hhbm5vdGF0aW9uZWRpdG9ybW9kZVwiLCB7XG4gICAgICBzb3VyY2U6IHRoaXMsXG4gICAgICBtb2RlXG4gICAgfSk7XG4gIH1cbiAgdXBkYXRlUGFyYW1zKHR5cGUsIHZhbHVlKSB7XG4gICAgaWYgKCF0aGlzLiNlZGl0b3JUeXBlcykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgIGNhc2UgX3NoYXJlZF91dGlsX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uQW5ub3RhdGlvbkVkaXRvclBhcmFtc1R5cGUuQ1JFQVRFOlxuICAgICAgICB0aGlzLmN1cnJlbnRMYXllci5hZGROZXdFZGl0b3IoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgY2FzZSBfc2hhcmVkX3V0aWxfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5Bbm5vdGF0aW9uRWRpdG9yUGFyYW1zVHlwZS5ISUdITElHSFRfREVGQVVMVF9DT0xPUjpcbiAgICAgICAgdGhpcy4jbWFpbkhpZ2hsaWdodENvbG9yUGlja2VyPy51cGRhdGVDb2xvcih2YWx1ZSk7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IGVkaXRvciBvZiB0aGlzLiNzZWxlY3RlZEVkaXRvcnMpIHtcbiAgICAgIGVkaXRvci51cGRhdGVQYXJhbXModHlwZSwgdmFsdWUpO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IGVkaXRvclR5cGUgb2YgdGhpcy4jZWRpdG9yVHlwZXMpIHtcbiAgICAgIGVkaXRvclR5cGUudXBkYXRlRGVmYXVsdFBhcmFtcyh0eXBlLCB2YWx1ZSk7XG4gICAgfVxuICB9XG4gIGVuYWJsZVdhaXRpbmcobXVzdFdhaXQgPSBmYWxzZSkge1xuICAgIGlmICh0aGlzLiNpc1dhaXRpbmcgPT09IG11c3RXYWl0KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuI2lzV2FpdGluZyA9IG11c3RXYWl0O1xuICAgIGZvciAoY29uc3QgbGF5ZXIgb2YgdGhpcy4jYWxsTGF5ZXJzLnZhbHVlcygpKSB7XG4gICAgICBpZiAobXVzdFdhaXQpIHtcbiAgICAgICAgbGF5ZXIuZGlzYWJsZUNsaWNrKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsYXllci5lbmFibGVDbGljaygpO1xuICAgICAgfVxuICAgICAgbGF5ZXIuZGl2LmNsYXNzTGlzdC50b2dnbGUoXCJ3YWl0aW5nXCIsIG11c3RXYWl0KTtcbiAgICB9XG4gIH1cbiAgI2VuYWJsZUFsbCgpIHtcbiAgICBpZiAoIXRoaXMuI2lzRW5hYmxlZCkge1xuICAgICAgdGhpcy4jaXNFbmFibGVkID0gdHJ1ZTtcbiAgICAgIGZvciAoY29uc3QgbGF5ZXIgb2YgdGhpcy4jYWxsTGF5ZXJzLnZhbHVlcygpKSB7XG4gICAgICAgIGxheWVyLmVuYWJsZSgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICAjZGlzYWJsZUFsbCgpIHtcbiAgICB0aGlzLnVuc2VsZWN0QWxsKCk7XG4gICAgaWYgKHRoaXMuI2lzRW5hYmxlZCkge1xuICAgICAgdGhpcy4jaXNFbmFibGVkID0gZmFsc2U7XG4gICAgICBmb3IgKGNvbnN0IGxheWVyIG9mIHRoaXMuI2FsbExheWVycy52YWx1ZXMoKSkge1xuICAgICAgICBsYXllci5kaXNhYmxlKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGdldEVkaXRvcnMocGFnZUluZGV4KSB7XG4gICAgY29uc3QgZWRpdG9ycyA9IFtdO1xuICAgIGZvciAoY29uc3QgZWRpdG9yIG9mIHRoaXMuI2FsbEVkaXRvcnMudmFsdWVzKCkpIHtcbiAgICAgIGlmIChlZGl0b3IucGFnZUluZGV4ID09PSBwYWdlSW5kZXgpIHtcbiAgICAgICAgZWRpdG9ycy5wdXNoKGVkaXRvcik7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBlZGl0b3JzO1xuICB9XG4gIGdldEVkaXRvcihpZCkge1xuICAgIHJldHVybiB0aGlzLiNhbGxFZGl0b3JzLmdldChpZCk7XG4gIH1cbiAgYWRkRWRpdG9yKGVkaXRvcikge1xuICAgIHRoaXMuI2FsbEVkaXRvcnMuc2V0KGVkaXRvci5pZCwgZWRpdG9yKTtcbiAgfVxuICByZW1vdmVFZGl0b3IoZWRpdG9yKSB7XG4gICAgaWYgKGVkaXRvci5kaXYuY29udGFpbnMoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCkpIHtcbiAgICAgIGlmICh0aGlzLiNmb2N1c01haW5Db250YWluZXJUaW1lb3V0SWQpIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuI2ZvY3VzTWFpbkNvbnRhaW5lclRpbWVvdXRJZCk7XG4gICAgICB9XG4gICAgICB0aGlzLiNmb2N1c01haW5Db250YWluZXJUaW1lb3V0SWQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgdGhpcy5mb2N1c01haW5Db250YWluZXIoKTtcbiAgICAgICAgdGhpcy4jZm9jdXNNYWluQ29udGFpbmVyVGltZW91dElkID0gbnVsbDtcbiAgICAgIH0sIDApO1xuICAgIH1cbiAgICB0aGlzLiNhbGxFZGl0b3JzLmRlbGV0ZShlZGl0b3IuaWQpO1xuICAgIHRoaXMudW5zZWxlY3QoZWRpdG9yKTtcbiAgICBpZiAoIWVkaXRvci5hbm5vdGF0aW9uRWxlbWVudElkIHx8ICF0aGlzLiNkZWxldGVkQW5ub3RhdGlvbnNFbGVtZW50SWRzLmhhcyhlZGl0b3IuYW5ub3RhdGlvbkVsZW1lbnRJZCkpIHtcbiAgICAgIHRoaXMuI2Fubm90YXRpb25TdG9yYWdlPy5yZW1vdmUoZWRpdG9yLmlkKTtcbiAgICB9XG4gIH1cbiAgYWRkRGVsZXRlZEFubm90YXRpb25FbGVtZW50KGVkaXRvcikge1xuICAgIHRoaXMuI2RlbGV0ZWRBbm5vdGF0aW9uc0VsZW1lbnRJZHMuYWRkKGVkaXRvci5hbm5vdGF0aW9uRWxlbWVudElkKTtcbiAgICBlZGl0b3IuZGVsZXRlZCA9IHRydWU7XG4gIH1cbiAgaXNEZWxldGVkQW5ub3RhdGlvbkVsZW1lbnQoYW5ub3RhdGlvbkVsZW1lbnRJZCkge1xuICAgIHJldHVybiB0aGlzLiNkZWxldGVkQW5ub3RhdGlvbnNFbGVtZW50SWRzLmhhcyhhbm5vdGF0aW9uRWxlbWVudElkKTtcbiAgfVxuICByZW1vdmVEZWxldGVkQW5ub3RhdGlvbkVsZW1lbnQoZWRpdG9yKSB7XG4gICAgdGhpcy4jZGVsZXRlZEFubm90YXRpb25zRWxlbWVudElkcy5kZWxldGUoZWRpdG9yLmFubm90YXRpb25FbGVtZW50SWQpO1xuICAgIGVkaXRvci5kZWxldGVkID0gZmFsc2U7XG4gIH1cbiAgI2FkZEVkaXRvclRvTGF5ZXIoZWRpdG9yKSB7XG4gICAgY29uc3QgbGF5ZXIgPSB0aGlzLiNhbGxMYXllcnMuZ2V0KGVkaXRvci5wYWdlSW5kZXgpO1xuICAgIGlmIChsYXllcikge1xuICAgICAgbGF5ZXIuYWRkT3JSZWJ1aWxkKGVkaXRvcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuYWRkRWRpdG9yKGVkaXRvcik7XG4gICAgfVxuICB9XG4gIHNldEFjdGl2ZUVkaXRvcihlZGl0b3IpIHtcbiAgICBpZiAodGhpcy4jYWN0aXZlRWRpdG9yID09PSBlZGl0b3IpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy4jYWN0aXZlRWRpdG9yID0gZWRpdG9yO1xuICAgIGlmIChlZGl0b3IpIHtcbiAgICAgIHRoaXMuI2Rpc3BhdGNoVXBkYXRlVUkoZWRpdG9yLnByb3BlcnRpZXNUb1VwZGF0ZSk7XG4gICAgfVxuICB9XG4gIHRvZ2dsZVNlbGVjdGVkKGVkaXRvcikge1xuICAgIGlmICh0aGlzLiNzZWxlY3RlZEVkaXRvcnMuaGFzKGVkaXRvcikpIHtcbiAgICAgIHRoaXMuI3NlbGVjdGVkRWRpdG9ycy5kZWxldGUoZWRpdG9yKTtcbiAgICAgIGVkaXRvci51bnNlbGVjdCgpO1xuICAgICAgdGhpcy4jZGlzcGF0Y2hVcGRhdGVTdGF0ZXMoe1xuICAgICAgICBoYXNTZWxlY3RlZEVkaXRvcjogdGhpcy5oYXNTZWxlY3Rpb25cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLiNzZWxlY3RlZEVkaXRvcnMuYWRkKGVkaXRvcik7XG4gICAgZWRpdG9yLnNlbGVjdCgpO1xuICAgIHRoaXMuI2Rpc3BhdGNoVXBkYXRlVUkoZWRpdG9yLnByb3BlcnRpZXNUb1VwZGF0ZSk7XG4gICAgdGhpcy4jZGlzcGF0Y2hVcGRhdGVTdGF0ZXMoe1xuICAgICAgaGFzU2VsZWN0ZWRFZGl0b3I6IHRydWVcbiAgICB9KTtcbiAgfVxuICBzZXRTZWxlY3RlZChlZGl0b3IpIHtcbiAgICBmb3IgKGNvbnN0IGVkIG9mIHRoaXMuI3NlbGVjdGVkRWRpdG9ycykge1xuICAgICAgaWYgKGVkICE9PSBlZGl0b3IpIHtcbiAgICAgICAgZWQudW5zZWxlY3QoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy4jc2VsZWN0ZWRFZGl0b3JzLmNsZWFyKCk7XG4gICAgdGhpcy4jc2VsZWN0ZWRFZGl0b3JzLmFkZChlZGl0b3IpO1xuICAgIGVkaXRvci5zZWxlY3QoKTtcbiAgICB0aGlzLiNkaXNwYXRjaFVwZGF0ZVVJKGVkaXRvci5wcm9wZXJ0aWVzVG9VcGRhdGUpO1xuICAgIHRoaXMuI2Rpc3BhdGNoVXBkYXRlU3RhdGVzKHtcbiAgICAgIGhhc1NlbGVjdGVkRWRpdG9yOiB0cnVlXG4gICAgfSk7XG4gIH1cbiAgaXNTZWxlY3RlZChlZGl0b3IpIHtcbiAgICByZXR1cm4gdGhpcy4jc2VsZWN0ZWRFZGl0b3JzLmhhcyhlZGl0b3IpO1xuICB9XG4gIGdldCBmaXJzdFNlbGVjdGVkRWRpdG9yKCkge1xuICAgIHJldHVybiB0aGlzLiNzZWxlY3RlZEVkaXRvcnMudmFsdWVzKCkubmV4dCgpLnZhbHVlO1xuICB9XG4gIHVuc2VsZWN0KGVkaXRvcikge1xuICAgIGVkaXRvci51bnNlbGVjdCgpO1xuICAgIHRoaXMuI3NlbGVjdGVkRWRpdG9ycy5kZWxldGUoZWRpdG9yKTtcbiAgICB0aGlzLiNkaXNwYXRjaFVwZGF0ZVN0YXRlcyh7XG4gICAgICBoYXNTZWxlY3RlZEVkaXRvcjogdGhpcy5oYXNTZWxlY3Rpb25cbiAgICB9KTtcbiAgfVxuICBnZXQgaGFzU2VsZWN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLiNzZWxlY3RlZEVkaXRvcnMuc2l6ZSAhPT0gMDtcbiAgfVxuICBnZXQgaXNFbnRlckhhbmRsZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuI3NlbGVjdGVkRWRpdG9ycy5zaXplID09PSAxICYmIHRoaXMuZmlyc3RTZWxlY3RlZEVkaXRvci5pc0VudGVySGFuZGxlZDtcbiAgfVxuICB1bmRvKCkge1xuICAgIHRoaXMuI2NvbW1hbmRNYW5hZ2VyLnVuZG8oKTtcbiAgICB0aGlzLiNkaXNwYXRjaFVwZGF0ZVN0YXRlcyh7XG4gICAgICBoYXNTb21ldGhpbmdUb1VuZG86IHRoaXMuI2NvbW1hbmRNYW5hZ2VyLmhhc1NvbWV0aGluZ1RvVW5kbygpLFxuICAgICAgaGFzU29tZXRoaW5nVG9SZWRvOiB0cnVlLFxuICAgICAgaXNFbXB0eTogdGhpcy4jaXNFbXB0eSgpXG4gICAgfSk7XG4gIH1cbiAgcmVkbygpIHtcbiAgICB0aGlzLiNjb21tYW5kTWFuYWdlci5yZWRvKCk7XG4gICAgdGhpcy4jZGlzcGF0Y2hVcGRhdGVTdGF0ZXMoe1xuICAgICAgaGFzU29tZXRoaW5nVG9VbmRvOiB0cnVlLFxuICAgICAgaGFzU29tZXRoaW5nVG9SZWRvOiB0aGlzLiNjb21tYW5kTWFuYWdlci5oYXNTb21ldGhpbmdUb1JlZG8oKSxcbiAgICAgIGlzRW1wdHk6IHRoaXMuI2lzRW1wdHkoKVxuICAgIH0pO1xuICB9XG4gIGFkZENvbW1hbmRzKHBhcmFtcykge1xuICAgIHRoaXMuI2NvbW1hbmRNYW5hZ2VyLmFkZChwYXJhbXMpO1xuICAgIHRoaXMuI2Rpc3BhdGNoVXBkYXRlU3RhdGVzKHtcbiAgICAgIGhhc1NvbWV0aGluZ1RvVW5kbzogdHJ1ZSxcbiAgICAgIGhhc1NvbWV0aGluZ1RvUmVkbzogZmFsc2UsXG4gICAgICBpc0VtcHR5OiB0aGlzLiNpc0VtcHR5KClcbiAgICB9KTtcbiAgfVxuICAjaXNFbXB0eSgpIHtcbiAgICBpZiAodGhpcy4jYWxsRWRpdG9ycy5zaXplID09PSAwKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKHRoaXMuI2FsbEVkaXRvcnMuc2l6ZSA9PT0gMSkge1xuICAgICAgZm9yIChjb25zdCBlZGl0b3Igb2YgdGhpcy4jYWxsRWRpdG9ycy52YWx1ZXMoKSkge1xuICAgICAgICByZXR1cm4gZWRpdG9yLmlzRW1wdHkoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGRlbGV0ZSgpIHtcbiAgICB0aGlzLmNvbW1pdE9yUmVtb3ZlKCk7XG4gICAgaWYgKCF0aGlzLmhhc1NlbGVjdGlvbikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBlZGl0b3JzID0gWy4uLnRoaXMuI3NlbGVjdGVkRWRpdG9yc107XG4gICAgY29uc3QgY21kID0gKCkgPT4ge1xuICAgICAgZm9yIChjb25zdCBlZGl0b3Igb2YgZWRpdG9ycykge1xuICAgICAgICBlZGl0b3IucmVtb3ZlKCk7XG4gICAgICB9XG4gICAgfTtcbiAgICBjb25zdCB1bmRvID0gKCkgPT4ge1xuICAgICAgZm9yIChjb25zdCBlZGl0b3Igb2YgZWRpdG9ycykge1xuICAgICAgICB0aGlzLiNhZGRFZGl0b3JUb0xheWVyKGVkaXRvcik7XG4gICAgICB9XG4gICAgfTtcbiAgICB0aGlzLmFkZENvbW1hbmRzKHtcbiAgICAgIGNtZCxcbiAgICAgIHVuZG8sXG4gICAgICBtdXN0RXhlYzogdHJ1ZVxuICAgIH0pO1xuICB9XG4gIGNvbW1pdE9yUmVtb3ZlKCkge1xuICAgIHRoaXMuI2FjdGl2ZUVkaXRvcj8uY29tbWl0T3JSZW1vdmUoKTtcbiAgfVxuICBoYXNTb21ldGhpbmdUb0NvbnRyb2woKSB7XG4gICAgcmV0dXJuIHRoaXMuI2FjdGl2ZUVkaXRvciB8fCB0aGlzLmhhc1NlbGVjdGlvbjtcbiAgfVxuICAjc2VsZWN0RWRpdG9ycyhlZGl0b3JzKSB7XG4gICAgdGhpcy4jc2VsZWN0ZWRFZGl0b3JzLmNsZWFyKCk7XG4gICAgZm9yIChjb25zdCBlZGl0b3Igb2YgZWRpdG9ycykge1xuICAgICAgaWYgKGVkaXRvci5pc0VtcHR5KCkpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICB0aGlzLiNzZWxlY3RlZEVkaXRvcnMuYWRkKGVkaXRvcik7XG4gICAgICBlZGl0b3Iuc2VsZWN0KCk7XG4gICAgfVxuICAgIHRoaXMuI2Rpc3BhdGNoVXBkYXRlU3RhdGVzKHtcbiAgICAgIGhhc1NlbGVjdGVkRWRpdG9yOiB0cnVlXG4gICAgfSk7XG4gIH1cbiAgc2VsZWN0QWxsKCkge1xuICAgIGZvciAoY29uc3QgZWRpdG9yIG9mIHRoaXMuI3NlbGVjdGVkRWRpdG9ycykge1xuICAgICAgZWRpdG9yLmNvbW1pdCgpO1xuICAgIH1cbiAgICB0aGlzLiNzZWxlY3RFZGl0b3JzKHRoaXMuI2FsbEVkaXRvcnMudmFsdWVzKCkpO1xuICB9XG4gIHVuc2VsZWN0QWxsKCkge1xuICAgIGlmICh0aGlzLiNhY3RpdmVFZGl0b3IpIHtcbiAgICAgIHRoaXMuI2FjdGl2ZUVkaXRvci5jb21taXRPclJlbW92ZSgpO1xuICAgICAgaWYgKHRoaXMuI21vZGUgIT09IF9zaGFyZWRfdXRpbF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLkFubm90YXRpb25FZGl0b3JUeXBlLk5PTkUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoIXRoaXMuaGFzU2VsZWN0aW9uKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGZvciAoY29uc3QgZWRpdG9yIG9mIHRoaXMuI3NlbGVjdGVkRWRpdG9ycykge1xuICAgICAgZWRpdG9yLnVuc2VsZWN0KCk7XG4gICAgfVxuICAgIHRoaXMuI3NlbGVjdGVkRWRpdG9ycy5jbGVhcigpO1xuICAgIHRoaXMuI2Rpc3BhdGNoVXBkYXRlU3RhdGVzKHtcbiAgICAgIGhhc1NlbGVjdGVkRWRpdG9yOiBmYWxzZVxuICAgIH0pO1xuICB9XG4gIHRyYW5zbGF0ZVNlbGVjdGVkRWRpdG9ycyh4LCB5LCBub0NvbW1pdCA9IGZhbHNlKSB7XG4gICAgaWYgKCFub0NvbW1pdCkge1xuICAgICAgdGhpcy5jb21taXRPclJlbW92ZSgpO1xuICAgIH1cbiAgICBpZiAoIXRoaXMuaGFzU2VsZWN0aW9uKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuI3RyYW5zbGF0aW9uWzBdICs9IHg7XG4gICAgdGhpcy4jdHJhbnNsYXRpb25bMV0gKz0geTtcbiAgICBjb25zdCBbdG90YWxYLCB0b3RhbFldID0gdGhpcy4jdHJhbnNsYXRpb247XG4gICAgY29uc3QgZWRpdG9ycyA9IFsuLi50aGlzLiNzZWxlY3RlZEVkaXRvcnNdO1xuICAgIGNvbnN0IFRJTUVfVE9fV0FJVCA9IDEwMDA7XG4gICAgaWYgKHRoaXMuI3RyYW5zbGF0aW9uVGltZW91dElkKSB7XG4gICAgICBjbGVhclRpbWVvdXQodGhpcy4jdHJhbnNsYXRpb25UaW1lb3V0SWQpO1xuICAgIH1cbiAgICB0aGlzLiN0cmFuc2xhdGlvblRpbWVvdXRJZCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgdGhpcy4jdHJhbnNsYXRpb25UaW1lb3V0SWQgPSBudWxsO1xuICAgICAgdGhpcy4jdHJhbnNsYXRpb25bMF0gPSB0aGlzLiN0cmFuc2xhdGlvblsxXSA9IDA7XG4gICAgICB0aGlzLmFkZENvbW1hbmRzKHtcbiAgICAgICAgY21kOiAoKSA9PiB7XG4gICAgICAgICAgZm9yIChjb25zdCBlZGl0b3Igb2YgZWRpdG9ycykge1xuICAgICAgICAgICAgaWYgKHRoaXMuI2FsbEVkaXRvcnMuaGFzKGVkaXRvci5pZCkpIHtcbiAgICAgICAgICAgICAgZWRpdG9yLnRyYW5zbGF0ZUluUGFnZSh0b3RhbFgsIHRvdGFsWSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB1bmRvOiAoKSA9PiB7XG4gICAgICAgICAgZm9yIChjb25zdCBlZGl0b3Igb2YgZWRpdG9ycykge1xuICAgICAgICAgICAgaWYgKHRoaXMuI2FsbEVkaXRvcnMuaGFzKGVkaXRvci5pZCkpIHtcbiAgICAgICAgICAgICAgZWRpdG9yLnRyYW5zbGF0ZUluUGFnZSgtdG90YWxYLCAtdG90YWxZKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG11c3RFeGVjOiBmYWxzZVxuICAgICAgfSk7XG4gICAgfSwgVElNRV9UT19XQUlUKTtcbiAgICBmb3IgKGNvbnN0IGVkaXRvciBvZiBlZGl0b3JzKSB7XG4gICAgICBlZGl0b3IudHJhbnNsYXRlSW5QYWdlKHgsIHkpO1xuICAgIH1cbiAgfVxuICBzZXRVcERyYWdTZXNzaW9uKCkge1xuICAgIGlmICghdGhpcy5oYXNTZWxlY3Rpb24pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5kaXNhYmxlVXNlclNlbGVjdCh0cnVlKTtcbiAgICB0aGlzLiNkcmFnZ2luZ0VkaXRvcnMgPSBuZXcgTWFwKCk7XG4gICAgZm9yIChjb25zdCBlZGl0b3Igb2YgdGhpcy4jc2VsZWN0ZWRFZGl0b3JzKSB7XG4gICAgICB0aGlzLiNkcmFnZ2luZ0VkaXRvcnMuc2V0KGVkaXRvciwge1xuICAgICAgICBzYXZlZFg6IGVkaXRvci54LFxuICAgICAgICBzYXZlZFk6IGVkaXRvci55LFxuICAgICAgICBzYXZlZFBhZ2VJbmRleDogZWRpdG9yLnBhZ2VJbmRleCxcbiAgICAgICAgbmV3WDogMCxcbiAgICAgICAgbmV3WTogMCxcbiAgICAgICAgbmV3UGFnZUluZGV4OiAtMVxuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIGVuZERyYWdTZXNzaW9uKCkge1xuICAgIGlmICghdGhpcy4jZHJhZ2dpbmdFZGl0b3JzKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHRoaXMuZGlzYWJsZVVzZXJTZWxlY3QoZmFsc2UpO1xuICAgIGNvbnN0IG1hcCA9IHRoaXMuI2RyYWdnaW5nRWRpdG9ycztcbiAgICB0aGlzLiNkcmFnZ2luZ0VkaXRvcnMgPSBudWxsO1xuICAgIGxldCBtdXN0QmVBZGRlZEluVW5kb1N0YWNrID0gZmFsc2U7XG4gICAgZm9yIChjb25zdCBbe1xuICAgICAgeCxcbiAgICAgIHksXG4gICAgICBwYWdlSW5kZXhcbiAgICB9LCB2YWx1ZV0gb2YgbWFwKSB7XG4gICAgICB2YWx1ZS5uZXdYID0geDtcbiAgICAgIHZhbHVlLm5ld1kgPSB5O1xuICAgICAgdmFsdWUubmV3UGFnZUluZGV4ID0gcGFnZUluZGV4O1xuICAgICAgbXVzdEJlQWRkZWRJblVuZG9TdGFjayB8fD0geCAhPT0gdmFsdWUuc2F2ZWRYIHx8IHkgIT09IHZhbHVlLnNhdmVkWSB8fCBwYWdlSW5kZXggIT09IHZhbHVlLnNhdmVkUGFnZUluZGV4O1xuICAgIH1cbiAgICBpZiAoIW11c3RCZUFkZGVkSW5VbmRvU3RhY2spIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgY29uc3QgbW92ZSA9IChlZGl0b3IsIHgsIHksIHBhZ2VJbmRleCkgPT4ge1xuICAgICAgaWYgKHRoaXMuI2FsbEVkaXRvcnMuaGFzKGVkaXRvci5pZCkpIHtcbiAgICAgICAgY29uc3QgcGFyZW50ID0gdGhpcy4jYWxsTGF5ZXJzLmdldChwYWdlSW5kZXgpO1xuICAgICAgICBpZiAocGFyZW50KSB7XG4gICAgICAgICAgZWRpdG9yLl9zZXRQYXJlbnRBbmRQb3NpdGlvbihwYXJlbnQsIHgsIHkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGVkaXRvci5wYWdlSW5kZXggPSBwYWdlSW5kZXg7XG4gICAgICAgICAgZWRpdG9yLnggPSB4O1xuICAgICAgICAgIGVkaXRvci55ID0geTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gICAgdGhpcy5hZGRDb21tYW5kcyh7XG4gICAgICBjbWQ6ICgpID0+IHtcbiAgICAgICAgZm9yIChjb25zdCBbZWRpdG9yLCB7XG4gICAgICAgICAgbmV3WCxcbiAgICAgICAgICBuZXdZLFxuICAgICAgICAgIG5ld1BhZ2VJbmRleFxuICAgICAgICB9XSBvZiBtYXApIHtcbiAgICAgICAgICBtb3ZlKGVkaXRvciwgbmV3WCwgbmV3WSwgbmV3UGFnZUluZGV4KTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHVuZG86ICgpID0+IHtcbiAgICAgICAgZm9yIChjb25zdCBbZWRpdG9yLCB7XG4gICAgICAgICAgc2F2ZWRYLFxuICAgICAgICAgIHNhdmVkWSxcbiAgICAgICAgICBzYXZlZFBhZ2VJbmRleFxuICAgICAgICB9XSBvZiBtYXApIHtcbiAgICAgICAgICBtb3ZlKGVkaXRvciwgc2F2ZWRYLCBzYXZlZFksIHNhdmVkUGFnZUluZGV4KTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIG11c3RFeGVjOiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgZHJhZ1NlbGVjdGVkRWRpdG9ycyh0eCwgdHkpIHtcbiAgICBpZiAoIXRoaXMuI2RyYWdnaW5nRWRpdG9ycykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IGVkaXRvciBvZiB0aGlzLiNkcmFnZ2luZ0VkaXRvcnMua2V5cygpKSB7XG4gICAgICBlZGl0b3IuZHJhZyh0eCwgdHkpO1xuICAgIH1cbiAgfVxuICByZWJ1aWxkKGVkaXRvcikge1xuICAgIGlmIChlZGl0b3IucGFyZW50ID09PSBudWxsKSB7XG4gICAgICBjb25zdCBwYXJlbnQgPSB0aGlzLmdldExheWVyKGVkaXRvci5wYWdlSW5kZXgpO1xuICAgICAgaWYgKHBhcmVudCkge1xuICAgICAgICBwYXJlbnQuY2hhbmdlUGFyZW50KGVkaXRvcik7XG4gICAgICAgIHBhcmVudC5hZGRPclJlYnVpbGQoZWRpdG9yKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuYWRkRWRpdG9yKGVkaXRvcik7XG4gICAgICAgIHRoaXMuYWRkVG9Bbm5vdGF0aW9uU3RvcmFnZShlZGl0b3IpO1xuICAgICAgICBlZGl0b3IucmVidWlsZCgpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBlZGl0b3IucGFyZW50LmFkZE9yUmVidWlsZChlZGl0b3IpO1xuICAgIH1cbiAgfVxuICBnZXQgaXNFZGl0b3JIYW5kbGluZ0tleWJvYXJkKCkge1xuICAgIHJldHVybiB0aGlzLmdldEFjdGl2ZSgpPy5zaG91bGRHZXRLZXlib2FyZEV2ZW50cygpIHx8IHRoaXMuI3NlbGVjdGVkRWRpdG9ycy5zaXplID09PSAxICYmIHRoaXMuZmlyc3RTZWxlY3RlZEVkaXRvci5zaG91bGRHZXRLZXlib2FyZEV2ZW50cygpO1xuICB9XG4gIGlzQWN0aXZlKGVkaXRvcikge1xuICAgIHJldHVybiB0aGlzLiNhY3RpdmVFZGl0b3IgPT09IGVkaXRvcjtcbiAgfVxuICBnZXRBY3RpdmUoKSB7XG4gICAgcmV0dXJuIHRoaXMuI2FjdGl2ZUVkaXRvcjtcbiAgfVxuICBnZXRNb2RlKCkge1xuICAgIHJldHVybiB0aGlzLiNtb2RlO1xuICB9XG4gIGdldCBpbWFnZU1hbmFnZXIoKSB7XG4gICAgcmV0dXJuICgwLF9zaGFyZWRfdXRpbF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLnNoYWRvdykodGhpcywgXCJpbWFnZU1hbmFnZXJcIiwgbmV3IEltYWdlTWFuYWdlcigpKTtcbiAgfVxufVxuXG5cbi8qKiovIH0pLFxuXG4vKioqLyAxNzE6XG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfX193ZWJwYWNrX21vZHVsZV9fLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cbi8qIGhhcm1vbnkgZXhwb3J0ICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCB7XG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFBERkZldGNoU3RyZWFtOiAoKSA9PiAoLyogYmluZGluZyAqLyBQREZGZXRjaFN0cmVhbSlcbi8qIGhhcm1vbnkgZXhwb3J0ICovIH0pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9zaGFyZWRfdXRpbF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNjYpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9uZXR3b3JrX3V0aWxzX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI1Myk7XG5cblxuO1xuZnVuY3Rpb24gY3JlYXRlRmV0Y2hPcHRpb25zKGhlYWRlcnMsIHdpdGhDcmVkZW50aWFscywgYWJvcnRDb250cm9sbGVyKSB7XG4gIHJldHVybiB7XG4gICAgbWV0aG9kOiBcIkdFVFwiLFxuICAgIGhlYWRlcnMsXG4gICAgc2lnbmFsOiBhYm9ydENvbnRyb2xsZXIuc2lnbmFsLFxuICAgIG1vZGU6IFwiY29yc1wiLFxuICAgIGNyZWRlbnRpYWxzOiB3aXRoQ3JlZGVudGlhbHMgPyBcImluY2x1ZGVcIiA6IFwic2FtZS1vcmlnaW5cIixcbiAgICByZWRpcmVjdDogXCJmb2xsb3dcIlxuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlSGVhZGVycyhodHRwSGVhZGVycykge1xuICBjb25zdCBoZWFkZXJzID0gbmV3IEhlYWRlcnMoKTtcbiAgZm9yIChjb25zdCBwcm9wZXJ0eSBpbiBodHRwSGVhZGVycykge1xuICAgIGNvbnN0IHZhbHVlID0gaHR0cEhlYWRlcnNbcHJvcGVydHldO1xuICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgaGVhZGVycy5hcHBlbmQocHJvcGVydHksIHZhbHVlKTtcbiAgfVxuICByZXR1cm4gaGVhZGVycztcbn1cbmZ1bmN0aW9uIGdldEFycmF5QnVmZmVyKHZhbCkge1xuICBpZiAodmFsIGluc3RhbmNlb2YgVWludDhBcnJheSkge1xuICAgIHJldHVybiB2YWwuYnVmZmVyO1xuICB9XG4gIGlmICh2YWwgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikge1xuICAgIHJldHVybiB2YWw7XG4gIH1cbiAgKDAsX3NoYXJlZF91dGlsX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18ud2FybikoYGdldEFycmF5QnVmZmVyIC0gdW5leHBlY3RlZCBkYXRhIGZvcm1hdDogJHt2YWx9YCk7XG4gIHJldHVybiBuZXcgVWludDhBcnJheSh2YWwpLmJ1ZmZlcjtcbn1cbmNsYXNzIFBERkZldGNoU3RyZWFtIHtcbiAgY29uc3RydWN0b3Ioc291cmNlKSB7XG4gICAgdGhpcy5zb3VyY2UgPSBzb3VyY2U7XG4gICAgdGhpcy5pc0h0dHAgPSAvXmh0dHBzPzovaS50ZXN0KHNvdXJjZS51cmwpO1xuICAgIHRoaXMuaHR0cEhlYWRlcnMgPSB0aGlzLmlzSHR0cCAmJiBzb3VyY2UuaHR0cEhlYWRlcnMgfHwge307XG4gICAgdGhpcy5fZnVsbFJlcXVlc3RSZWFkZXIgPSBudWxsO1xuICAgIHRoaXMuX3JhbmdlUmVxdWVzdFJlYWRlcnMgPSBbXTtcbiAgfVxuICBnZXQgX3Byb2dyZXNzaXZlRGF0YUxlbmd0aCgpIHtcbiAgICByZXR1cm4gdGhpcy5fZnVsbFJlcXVlc3RSZWFkZXI/Ll9sb2FkZWQgPz8gMDtcbiAgfVxuICBnZXRGdWxsUmVhZGVyKCkge1xuICAgICgwLF9zaGFyZWRfdXRpbF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLmFzc2VydCkoIXRoaXMuX2Z1bGxSZXF1ZXN0UmVhZGVyLCBcIlBERkZldGNoU3RyZWFtLmdldEZ1bGxSZWFkZXIgY2FuIG9ubHkgYmUgY2FsbGVkIG9uY2UuXCIpO1xuICAgIHRoaXMuX2Z1bGxSZXF1ZXN0UmVhZGVyID0gbmV3IFBERkZldGNoU3RyZWFtUmVhZGVyKHRoaXMpO1xuICAgIHJldHVybiB0aGlzLl9mdWxsUmVxdWVzdFJlYWRlcjtcbiAgfVxuICBnZXRSYW5nZVJlYWRlcihiZWdpbiwgZW5kKSB7XG4gICAgaWYgKGVuZCA8PSB0aGlzLl9wcm9ncmVzc2l2ZURhdGFMZW5ndGgpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBjb25zdCByZWFkZXIgPSBuZXcgUERGRmV0Y2hTdHJlYW1SYW5nZVJlYWRlcih0aGlzLCBiZWdpbiwgZW5kKTtcbiAgICB0aGlzLl9yYW5nZVJlcXVlc3RSZWFkZXJzLnB1c2gocmVhZGVyKTtcbiAgICByZXR1cm4gcmVhZGVyO1xuICB9XG4gIGNhbmNlbEFsbFJlcXVlc3RzKHJlYXNvbikge1xuICAgIHRoaXMuX2Z1bGxSZXF1ZXN0UmVhZGVyPy5jYW5jZWwocmVhc29uKTtcbiAgICBmb3IgKGNvbnN0IHJlYWRlciBvZiB0aGlzLl9yYW5nZVJlcXVlc3RSZWFkZXJzLnNsaWNlKDApKSB7XG4gICAgICByZWFkZXIuY2FuY2VsKHJlYXNvbik7XG4gICAgfVxuICB9XG59XG5jbGFzcyBQREZGZXRjaFN0cmVhbVJlYWRlciB7XG4gIGNvbnN0cnVjdG9yKHN0cmVhbSkge1xuICAgIHRoaXMuX3N0cmVhbSA9IHN0cmVhbTtcbiAgICB0aGlzLl9yZWFkZXIgPSBudWxsO1xuICAgIHRoaXMuX2xvYWRlZCA9IDA7XG4gICAgdGhpcy5fZmlsZW5hbWUgPSBudWxsO1xuICAgIGNvbnN0IHNvdXJjZSA9IHN0cmVhbS5zb3VyY2U7XG4gICAgdGhpcy5fd2l0aENyZWRlbnRpYWxzID0gc291cmNlLndpdGhDcmVkZW50aWFscyB8fCBmYWxzZTtcbiAgICB0aGlzLl9jb250ZW50TGVuZ3RoID0gc291cmNlLmxlbmd0aDtcbiAgICB0aGlzLl9oZWFkZXJzQ2FwYWJpbGl0eSA9IG5ldyBfc2hhcmVkX3V0aWxfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5Qcm9taXNlQ2FwYWJpbGl0eSgpO1xuICAgIHRoaXMuX2Rpc2FibGVSYW5nZSA9IHNvdXJjZS5kaXNhYmxlUmFuZ2UgfHwgZmFsc2U7XG4gICAgdGhpcy5fcmFuZ2VDaHVua1NpemUgPSBzb3VyY2UucmFuZ2VDaHVua1NpemU7XG4gICAgaWYgKCF0aGlzLl9yYW5nZUNodW5rU2l6ZSAmJiAhdGhpcy5fZGlzYWJsZVJhbmdlKSB7XG4gICAgICB0aGlzLl9kaXNhYmxlUmFuZ2UgPSB0cnVlO1xuICAgIH1cbiAgICB0aGlzLl9hYm9ydENvbnRyb2xsZXIgPSBuZXcgQWJvcnRDb250cm9sbGVyKCk7XG4gICAgdGhpcy5faXNTdHJlYW1pbmdTdXBwb3J0ZWQgPSAhc291cmNlLmRpc2FibGVTdHJlYW07XG4gICAgdGhpcy5faXNSYW5nZVN1cHBvcnRlZCA9ICFzb3VyY2UuZGlzYWJsZVJhbmdlO1xuICAgIHRoaXMuX2hlYWRlcnMgPSBjcmVhdGVIZWFkZXJzKHRoaXMuX3N0cmVhbS5odHRwSGVhZGVycyk7XG4gICAgY29uc3QgdXJsID0gc291cmNlLnVybDtcbiAgICBmZXRjaCh1cmwsIGNyZWF0ZUZldGNoT3B0aW9ucyh0aGlzLl9oZWFkZXJzLCB0aGlzLl93aXRoQ3JlZGVudGlhbHMsIHRoaXMuX2Fib3J0Q29udHJvbGxlcikpLnRoZW4ocmVzcG9uc2UgPT4ge1xuICAgICAgaWYgKCEoMCxfbmV0d29ya191dGlsc19qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLnZhbGlkYXRlUmVzcG9uc2VTdGF0dXMpKHJlc3BvbnNlLnN0YXR1cykpIHtcbiAgICAgICAgdGhyb3cgKDAsX25ldHdvcmtfdXRpbHNfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5jcmVhdGVSZXNwb25zZVN0YXR1c0Vycm9yKShyZXNwb25zZS5zdGF0dXMsIHVybCk7XG4gICAgICB9XG4gICAgICB0aGlzLl9yZWFkZXIgPSByZXNwb25zZS5ib2R5LmdldFJlYWRlcigpO1xuICAgICAgdGhpcy5faGVhZGVyc0NhcGFiaWxpdHkucmVzb2x2ZSgpO1xuICAgICAgY29uc3QgZ2V0UmVzcG9uc2VIZWFkZXIgPSBuYW1lID0+IHtcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmhlYWRlcnMuZ2V0KG5hbWUpO1xuICAgICAgfTtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgYWxsb3dSYW5nZVJlcXVlc3RzLFxuICAgICAgICBzdWdnZXN0ZWRMZW5ndGhcbiAgICAgIH0gPSAoMCxfbmV0d29ya191dGlsc19qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLnZhbGlkYXRlUmFuZ2VSZXF1ZXN0Q2FwYWJpbGl0aWVzKSh7XG4gICAgICAgIGdldFJlc3BvbnNlSGVhZGVyLFxuICAgICAgICBpc0h0dHA6IHRoaXMuX3N0cmVhbS5pc0h0dHAsXG4gICAgICAgIHJhbmdlQ2h1bmtTaXplOiB0aGlzLl9yYW5nZUNodW5rU2l6ZSxcbiAgICAgICAgZGlzYWJsZVJhbmdlOiB0aGlzLl9kaXNhYmxlUmFuZ2VcbiAgICAgIH0pO1xuICAgICAgdGhpcy5faXNSYW5nZVN1cHBvcnRlZCA9IGFsbG93UmFuZ2VSZXF1ZXN0cztcbiAgICAgIHRoaXMuX2NvbnRlbnRMZW5ndGggPSBzdWdnZXN0ZWRMZW5ndGggfHwgdGhpcy5fY29udGVudExlbmd0aDtcbiAgICAgIHRoaXMuX2ZpbGVuYW1lID0gKDAsX25ldHdvcmtfdXRpbHNfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5leHRyYWN0RmlsZW5hbWVGcm9tSGVhZGVyKShnZXRSZXNwb25zZUhlYWRlcik7XG4gICAgICBpZiAoIXRoaXMuX2lzU3RyZWFtaW5nU3VwcG9ydGVkICYmIHRoaXMuX2lzUmFuZ2VTdXBwb3J0ZWQpIHtcbiAgICAgICAgdGhpcy5jYW5jZWwobmV3IF9zaGFyZWRfdXRpbF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLkFib3J0RXhjZXB0aW9uKFwiU3RyZWFtaW5nIGlzIGRpc2FibGVkLlwiKSk7XG4gICAgICB9XG4gICAgfSkuY2F0Y2godGhpcy5faGVhZGVyc0NhcGFiaWxpdHkucmVqZWN0KTtcbiAgICB0aGlzLm9uUHJvZ3Jlc3MgPSBudWxsO1xuICB9XG4gIGdldCBoZWFkZXJzUmVhZHkoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2hlYWRlcnNDYXBhYmlsaXR5LnByb21pc2U7XG4gIH1cbiAgZ2V0IGZpbGVuYW1lKCkge1xuICAgIHJldHVybiB0aGlzLl9maWxlbmFtZTtcbiAgfVxuICBnZXQgY29udGVudExlbmd0aCgpIHtcbiAgICByZXR1cm4gdGhpcy5fY29udGVudExlbmd0aDtcbiAgfVxuICBnZXQgaXNSYW5nZVN1cHBvcnRlZCgpIHtcbiAgICByZXR1cm4gdGhpcy5faXNSYW5nZVN1cHBvcnRlZDtcbiAgfVxuICBnZXQgaXNTdHJlYW1pbmdTdXBwb3J0ZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2lzU3RyZWFtaW5nU3VwcG9ydGVkO1xuICB9XG4gIGFzeW5jIHJlYWQoKSB7XG4gICAgYXdhaXQgdGhpcy5faGVhZGVyc0NhcGFiaWxpdHkucHJvbWlzZTtcbiAgICBjb25zdCB7XG4gICAgICB2YWx1ZSxcbiAgICAgIGRvbmVcbiAgICB9ID0gYXdhaXQgdGhpcy5fcmVhZGVyLnJlYWQoKTtcbiAgICBpZiAoZG9uZSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdmFsdWUsXG4gICAgICAgIGRvbmVcbiAgICAgIH07XG4gICAgfVxuICAgIHRoaXMuX2xvYWRlZCArPSB2YWx1ZS5ieXRlTGVuZ3RoO1xuICAgIHRoaXMub25Qcm9ncmVzcz8uKHtcbiAgICAgIGxvYWRlZDogdGhpcy5fbG9hZGVkLFxuICAgICAgdG90YWw6IHRoaXMuX2NvbnRlbnRMZW5ndGhcbiAgICB9KTtcbiAgICByZXR1cm4ge1xuICAgICAgdmFsdWU6IGdldEFycmF5QnVmZmVyKHZhbHVlKSxcbiAgICAgIGRvbmU6IGZhbHNlXG4gICAgfTtcbiAgfVxuICBjYW5jZWwocmVhc29uKSB7XG4gICAgdGhpcy5fcmVhZGVyPy5jYW5jZWwocmVhc29uKTtcbiAgICB0aGlzLl9hYm9ydENvbnRyb2xsZXIuYWJvcnQoKTtcbiAgfVxufVxuY2xhc3MgUERGRmV0Y2hTdHJlYW1SYW5nZVJlYWRlciB7XG4gIGNvbnN0cnVjdG9yKHN0cmVhbSwgYmVnaW4sIGVuZCkge1xuICAgIHRoaXMuX3N0cmVhbSA9IHN0cmVhbTtcbiAgICB0aGlzLl9yZWFkZXIgPSBudWxsO1xuICAgIHRoaXMuX2xvYWRlZCA9IDA7XG4gICAgY29uc3Qgc291cmNlID0gc3RyZWFtLnNvdXJjZTtcbiAgICB0aGlzLl93aXRoQ3JlZGVudGlhbHMgPSBzb3VyY2Uud2l0aENyZWRlbnRpYWxzIHx8IGZhbHNlO1xuICAgIHRoaXMuX3JlYWRDYXBhYmlsaXR5ID0gbmV3IF9zaGFyZWRfdXRpbF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLlByb21pc2VDYXBhYmlsaXR5KCk7XG4gICAgdGhpcy5faXNTdHJlYW1pbmdTdXBwb3J0ZWQgPSAhc291cmNlLmRpc2FibGVTdHJlYW07XG4gICAgdGhpcy5fYWJvcnRDb250cm9sbGVyID0gbmV3IEFib3J0Q29udHJvbGxlcigpO1xuICAgIHRoaXMuX2hlYWRlcnMgPSBjcmVhdGVIZWFkZXJzKHRoaXMuX3N0cmVhbS5odHRwSGVhZGVycyk7XG4gICAgdGhpcy5faGVhZGVycy5hcHBlbmQoXCJSYW5nZVwiLCBgYnl0ZXM9JHtiZWdpbn0tJHtlbmQgLSAxfWApO1xuICAgIGNvbnN0IHVybCA9IHNvdXJjZS51cmw7XG4gICAgZmV0Y2godXJsLCBjcmVhdGVGZXRjaE9wdGlvbnModGhpcy5faGVhZGVycywgdGhpcy5fd2l0aENyZWRlbnRpYWxzLCB0aGlzLl9hYm9ydENvbnRyb2xsZXIpKS50aGVuKHJlc3BvbnNlID0+IHtcbiAgICAgIGlmICghKDAsX25ldHdvcmtfdXRpbHNfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy52YWxpZGF0ZVJlc3BvbnNlU3RhdHVzKShyZXNwb25zZS5zdGF0dXMpKSB7XG4gICAgICAgIHRocm93ICgwLF9uZXR3b3JrX3V0aWxzX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uY3JlYXRlUmVzcG9uc2VTdGF0dXNFcnJvcikocmVzcG9uc2Uuc3RhdHVzLCB1cmwpO1xuICAgICAgfVxuICAgICAgdGhpcy5fcmVhZENhcGFiaWxpdHkucmVzb2x2ZSgpO1xuICAgICAgdGhpcy5fcmVhZGVyID0gcmVzcG9uc2UuYm9keS5nZXRSZWFkZXIoKTtcbiAgICB9KS5jYXRjaCh0aGlzLl9yZWFkQ2FwYWJpbGl0eS5yZWplY3QpO1xuICAgIHRoaXMub25Qcm9ncmVzcyA9IG51bGw7XG4gIH1cbiAgZ2V0IGlzU3RyZWFtaW5nU3VwcG9ydGVkKCkge1xuICAgIHJldHVybiB0aGlzLl9pc1N0cmVhbWluZ1N1cHBvcnRlZDtcbiAgfVxuICBhc3luYyByZWFkKCkge1xuICAgIGF3YWl0IHRoaXMuX3JlYWRDYXBhYmlsaXR5LnByb21pc2U7XG4gICAgY29uc3Qge1xuICAgICAgdmFsdWUsXG4gICAgICBkb25lXG4gICAgfSA9IGF3YWl0IHRoaXMuX3JlYWRlci5yZWFkKCk7XG4gICAgaWYgKGRvbmUpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHZhbHVlLFxuICAgICAgICBkb25lXG4gICAgICB9O1xuICAgIH1cbiAgICB0aGlzLl9sb2FkZWQgKz0gdmFsdWUuYnl0ZUxlbmd0aDtcbiAgICB0aGlzLm9uUHJvZ3Jlc3M/Lih7XG4gICAgICBsb2FkZWQ6IHRoaXMuX2xvYWRlZFxuICAgIH0pO1xuICAgIHJldHVybiB7XG4gICAgICB2YWx1ZTogZ2V0QXJyYXlCdWZmZXIodmFsdWUpLFxuICAgICAgZG9uZTogZmFsc2VcbiAgICB9O1xuICB9XG4gIGNhbmNlbChyZWFzb24pIHtcbiAgICB0aGlzLl9yZWFkZXI/LmNhbmNlbChyZWFzb24pO1xuICAgIHRoaXMuX2Fib3J0Q29udHJvbGxlci5hYm9ydCgpO1xuICB9XG59XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDc0Mjpcbi8qKiovICgoX191bnVzZWRfd2VicGFja19fX3dlYnBhY2tfbW9kdWxlX18sIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuLyogaGFybW9ueSBleHBvcnQgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIHtcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgRm9udEZhY2VPYmplY3Q6ICgpID0+ICgvKiBiaW5kaW5nICovIEZvbnRGYWNlT2JqZWN0KSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgRm9udExvYWRlcjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gRm9udExvYWRlcilcbi8qIGhhcm1vbnkgZXhwb3J0ICovIH0pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9zaGFyZWRfdXRpbF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNjYpO1xuXG5jbGFzcyBGb250TG9hZGVyIHtcbiAgI3N5c3RlbUZvbnRzID0gbmV3IFNldCgpO1xuICBjb25zdHJ1Y3Rvcih7XG4gICAgb3duZXJEb2N1bWVudCA9IGdsb2JhbFRoaXMuZG9jdW1lbnQsXG4gICAgc3R5bGVFbGVtZW50ID0gbnVsbFxuICB9KSB7XG4gICAgdGhpcy5fZG9jdW1lbnQgPSBvd25lckRvY3VtZW50O1xuICAgIHRoaXMubmF0aXZlRm9udEZhY2VzID0gbmV3IFNldCgpO1xuICAgIHRoaXMuc3R5bGVFbGVtZW50ID0gbnVsbDtcbiAgICB0aGlzLmxvYWRpbmdSZXF1ZXN0cyA9IFtdO1xuICAgIHRoaXMubG9hZFRlc3RGb250SWQgPSAwO1xuICB9XG4gIGFkZE5hdGl2ZUZvbnRGYWNlKG5hdGl2ZUZvbnRGYWNlKSB7XG4gICAgdGhpcy5uYXRpdmVGb250RmFjZXMuYWRkKG5hdGl2ZUZvbnRGYWNlKTtcbiAgICB0aGlzLl9kb2N1bWVudC5mb250cy5hZGQobmF0aXZlRm9udEZhY2UpO1xuICB9XG4gIHJlbW92ZU5hdGl2ZUZvbnRGYWNlKG5hdGl2ZUZvbnRGYWNlKSB7XG4gICAgdGhpcy5uYXRpdmVGb250RmFjZXMuZGVsZXRlKG5hdGl2ZUZvbnRGYWNlKTtcbiAgICB0aGlzLl9kb2N1bWVudC5mb250cy5kZWxldGUobmF0aXZlRm9udEZhY2UpO1xuICB9XG4gIGluc2VydFJ1bGUocnVsZSkge1xuICAgIGlmICghdGhpcy5zdHlsZUVsZW1lbnQpIHtcbiAgICAgIHRoaXMuc3R5bGVFbGVtZW50ID0gdGhpcy5fZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuICAgICAgdGhpcy5fZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiaGVhZFwiKVswXS5hcHBlbmQodGhpcy5zdHlsZUVsZW1lbnQpO1xuICAgIH1cbiAgICBjb25zdCBzdHlsZVNoZWV0ID0gdGhpcy5zdHlsZUVsZW1lbnQuc2hlZXQ7XG4gICAgc3R5bGVTaGVldC5pbnNlcnRSdWxlKHJ1bGUsIHN0eWxlU2hlZXQuY3NzUnVsZXMubGVuZ3RoKTtcbiAgfVxuICBjbGVhcigpIHtcbiAgICBmb3IgKGNvbnN0IG5hdGl2ZUZvbnRGYWNlIG9mIHRoaXMubmF0aXZlRm9udEZhY2VzKSB7XG4gICAgICB0aGlzLl9kb2N1bWVudC5mb250cy5kZWxldGUobmF0aXZlRm9udEZhY2UpO1xuICAgIH1cbiAgICB0aGlzLm5hdGl2ZUZvbnRGYWNlcy5jbGVhcigpO1xuICAgIHRoaXMuI3N5c3RlbUZvbnRzLmNsZWFyKCk7XG4gICAgaWYgKHRoaXMuc3R5bGVFbGVtZW50KSB7XG4gICAgICB0aGlzLnN0eWxlRWxlbWVudC5yZW1vdmUoKTtcbiAgICAgIHRoaXMuc3R5bGVFbGVtZW50ID0gbnVsbDtcbiAgICB9XG4gIH1cbiAgYXN5bmMgbG9hZFN5c3RlbUZvbnQoe1xuICAgIHN5c3RlbUZvbnRJbmZvOiBpbmZvLFxuICAgIF9pbnNwZWN0Rm9udFxuICB9KSB7XG4gICAgaWYgKCFpbmZvIHx8IHRoaXMuI3N5c3RlbUZvbnRzLmhhcyhpbmZvLmxvYWRlZE5hbWUpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgICgwLF9zaGFyZWRfdXRpbF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLmFzc2VydCkoIXRoaXMuZGlzYWJsZUZvbnRGYWNlLCBcImxvYWRTeXN0ZW1Gb250IHNob3VsZG4ndCBiZSBjYWxsZWQgd2hlbiBgZGlzYWJsZUZvbnRGYWNlYCBpcyBzZXQuXCIpO1xuICAgIGlmICh0aGlzLmlzRm9udExvYWRpbmdBUElTdXBwb3J0ZWQpIHtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgbG9hZGVkTmFtZSxcbiAgICAgICAgc3JjLFxuICAgICAgICBzdHlsZVxuICAgICAgfSA9IGluZm87XG4gICAgICBjb25zdCBmb250RmFjZSA9IG5ldyBGb250RmFjZShsb2FkZWROYW1lLCBzcmMsIHN0eWxlKTtcbiAgICAgIHRoaXMuYWRkTmF0aXZlRm9udEZhY2UoZm9udEZhY2UpO1xuICAgICAgdHJ5IHtcbiAgICAgICAgYXdhaXQgZm9udEZhY2UubG9hZCgpO1xuICAgICAgICB0aGlzLiNzeXN0ZW1Gb250cy5hZGQobG9hZGVkTmFtZSk7XG4gICAgICAgIF9pbnNwZWN0Rm9udD8uKGluZm8pO1xuICAgICAgfSBjYXRjaCB7XG4gICAgICAgICgwLF9zaGFyZWRfdXRpbF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLndhcm4pKGBDYW5ub3QgbG9hZCBzeXN0ZW0gZm9udDogJHtpbmZvLmJhc2VGb250TmFtZX0sIGluc3RhbGxpbmcgaXQgY291bGQgaGVscCB0byBpbXByb3ZlIFBERiByZW5kZXJpbmcuYCk7XG4gICAgICAgIHRoaXMucmVtb3ZlTmF0aXZlRm9udEZhY2UoZm9udEZhY2UpO1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAoMCxfc2hhcmVkX3V0aWxfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy51bnJlYWNoYWJsZSkoXCJOb3QgaW1wbGVtZW50ZWQ6IGxvYWRTeXN0ZW1Gb250IHdpdGhvdXQgdGhlIEZvbnQgTG9hZGluZyBBUEkuXCIpO1xuICB9XG4gIGFzeW5jIGJpbmQoZm9udCkge1xuICAgIGlmIChmb250LmF0dGFjaGVkIHx8IGZvbnQubWlzc2luZ0ZpbGUgJiYgIWZvbnQuc3lzdGVtRm9udEluZm8pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZm9udC5hdHRhY2hlZCA9IHRydWU7XG4gICAgaWYgKGZvbnQuc3lzdGVtRm9udEluZm8pIHtcbiAgICAgIGF3YWl0IHRoaXMubG9hZFN5c3RlbUZvbnQoZm9udCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICh0aGlzLmlzRm9udExvYWRpbmdBUElTdXBwb3J0ZWQpIHtcbiAgICAgIGNvbnN0IG5hdGl2ZUZvbnRGYWNlID0gZm9udC5jcmVhdGVOYXRpdmVGb250RmFjZSgpO1xuICAgICAgaWYgKG5hdGl2ZUZvbnRGYWNlKSB7XG4gICAgICAgIHRoaXMuYWRkTmF0aXZlRm9udEZhY2UobmF0aXZlRm9udEZhY2UpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGF3YWl0IG5hdGl2ZUZvbnRGYWNlLmxvYWRlZDtcbiAgICAgICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgICAgICAoMCxfc2hhcmVkX3V0aWxfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy53YXJuKShgRmFpbGVkIHRvIGxvYWQgZm9udCAnJHtuYXRpdmVGb250RmFjZS5mYW1pbHl9JzogJyR7ZXh9Jy5gKTtcbiAgICAgICAgICBmb250LmRpc2FibGVGb250RmFjZSA9IHRydWU7XG4gICAgICAgICAgdGhyb3cgZXg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgcnVsZSA9IGZvbnQuY3JlYXRlRm9udEZhY2VSdWxlKCk7XG4gICAgaWYgKHJ1bGUpIHtcbiAgICAgIHRoaXMuaW5zZXJ0UnVsZShydWxlKTtcbiAgICAgIGlmICh0aGlzLmlzU3luY0ZvbnRMb2FkaW5nU3VwcG9ydGVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xuICAgICAgICBjb25zdCByZXF1ZXN0ID0gdGhpcy5fcXVldWVMb2FkaW5nQ2FsbGJhY2socmVzb2x2ZSk7XG4gICAgICAgIHRoaXMuX3ByZXBhcmVGb250TG9hZEV2ZW50KGZvbnQsIHJlcXVlc3QpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIGdldCBpc0ZvbnRMb2FkaW5nQVBJU3VwcG9ydGVkKCkge1xuICAgIGNvbnN0IGhhc0ZvbnRzID0gISF0aGlzLl9kb2N1bWVudD8uZm9udHM7XG4gICAgcmV0dXJuICgwLF9zaGFyZWRfdXRpbF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLnNoYWRvdykodGhpcywgXCJpc0ZvbnRMb2FkaW5nQVBJU3VwcG9ydGVkXCIsIGhhc0ZvbnRzKTtcbiAgfVxuICBnZXQgaXNTeW5jRm9udExvYWRpbmdTdXBwb3J0ZWQoKSB7XG4gICAgbGV0IHN1cHBvcnRlZCA9IGZhbHNlO1xuICAgIGlmIChfc2hhcmVkX3V0aWxfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5pc05vZGVKUykge1xuICAgICAgc3VwcG9ydGVkID0gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBuYXZpZ2F0b3IgIT09IFwidW5kZWZpbmVkXCIgJiYgdHlwZW9mIG5hdmlnYXRvcj8udXNlckFnZW50ID09PSBcInN0cmluZ1wiICYmIC9Nb3ppbGxhXFwvNS4wLio/cnY6XFxkKy4qPyBHZWNrby8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSkge1xuICAgICAgc3VwcG9ydGVkID0gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuICgwLF9zaGFyZWRfdXRpbF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLnNoYWRvdykodGhpcywgXCJpc1N5bmNGb250TG9hZGluZ1N1cHBvcnRlZFwiLCBzdXBwb3J0ZWQpO1xuICB9XG4gIF9xdWV1ZUxvYWRpbmdDYWxsYmFjayhjYWxsYmFjaykge1xuICAgIGZ1bmN0aW9uIGNvbXBsZXRlUmVxdWVzdCgpIHtcbiAgICAgICgwLF9zaGFyZWRfdXRpbF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLmFzc2VydCkoIXJlcXVlc3QuZG9uZSwgXCJjb21wbGV0ZVJlcXVlc3QoKSBjYW5ub3QgYmUgY2FsbGVkIHR3aWNlLlwiKTtcbiAgICAgIHJlcXVlc3QuZG9uZSA9IHRydWU7XG4gICAgICB3aGlsZSAobG9hZGluZ1JlcXVlc3RzLmxlbmd0aCA+IDAgJiYgbG9hZGluZ1JlcXVlc3RzWzBdLmRvbmUpIHtcbiAgICAgICAgY29uc3Qgb3RoZXJSZXF1ZXN0ID0gbG9hZGluZ1JlcXVlc3RzLnNoaWZ0KCk7XG4gICAgICAgIHNldFRpbWVvdXQob3RoZXJSZXF1ZXN0LmNhbGxiYWNrLCAwKTtcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3Qge1xuICAgICAgbG9hZGluZ1JlcXVlc3RzXG4gICAgfSA9IHRoaXM7XG4gICAgY29uc3QgcmVxdWVzdCA9IHtcbiAgICAgIGRvbmU6IGZhbHNlLFxuICAgICAgY29tcGxldGU6IGNvbXBsZXRlUmVxdWVzdCxcbiAgICAgIGNhbGxiYWNrXG4gICAgfTtcbiAgICBsb2FkaW5nUmVxdWVzdHMucHVzaChyZXF1ZXN0KTtcbiAgICByZXR1cm4gcmVxdWVzdDtcbiAgfVxuICBnZXQgX2xvYWRUZXN0Rm9udCgpIHtcbiAgICBjb25zdCB0ZXN0Rm9udCA9IGF0b2IoXCJUMVJVVHdBTEFJQUFBd0F3UTBaR0lESHRaZzRBQUFPWUFBQUFnVVpHVkUxbGt6WndBQUFFSEFBQUFCeEhSRVZHQUJRQVwiICsgXCJGUUFBQkRnQUFBQWVUMU12TWxZTll3a0FBQUVnQUFBQVlHTnRZWEFCRFFMVUFBQUNOQUFBQVVKb1pXRmsveFZGRFFBQVwiICsgXCJBTHdBQUFBMmFHaGxZUWRrQStvQUFBRDBBQUFBSkdodGRIZ0Q2QUFBQUFBRVdBQUFBQVp0WVhod0FBSlFBQUFBQVJnQVwiICsgXCJBQUFHYm1GdFpWam1kSDRBQUFHQUFBQUFzWEJ2YzNUL2hnQXpBQUFEZUFBQUFDQUFBUUFBQUFFQUFMWlJGc1JmRHp6MVwiICsgXCJBQXNENkFBQUFBRE9CT1RMQUFBQUFNNEtIRHdBQUFBQUErZ0RJUUFBQUFnQUFnQUFBQUFBQUFBQkFBQURJUUFBQUZvRFwiICsgXCI2QUFBQUFBRDZBQUJBQUFBQUFBQUFBQUFBQUFBQUFBQUFRQUFVQUFBQWdBQUFBUUQ2QUgwQUFVQUFBS0tBcndBQUFDTVwiICsgXCJBb29DdkFBQUFlQUFNUUVDQUFBQ0FBWUpBQUFBQUFBQUFBQUFBUUFBQUFBQUFBQUFBQUFBQUZCbVJXUUF3QUF1QUM0RFwiICsgXCJJUDg0QUZvRElRQUFBQUFBQVFBQUFBQUFBQUFBQUNBQUlBQUJBQUFBRGdDdUFBRUFBQUFBQUFBQUFRQUFBQUVBQUFBQVwiICsgXCJBQUVBQVFBQUFBRUFBQUFBQUFJQUFRQUFBQUVBQUFBQUFBTUFBUUFBQUFFQUFBQUFBQVFBQVFBQUFBRUFBQUFBQUFVQVwiICsgXCJBUUFBQUFFQUFBQUFBQVlBQVFBQUFBTUFBUVFKQUFBQUFnQUJBQU1BQVFRSkFBRUFBZ0FCQUFNQUFRUUpBQUlBQWdBQlwiICsgXCJBQU1BQVFRSkFBTUFBZ0FCQUFNQUFRUUpBQVFBQWdBQkFBTUFBUVFKQUFVQUFnQUJBQU1BQVFRSkFBWUFBZ0FCV0FCWVwiICsgXCJBQUFBQUFBQUF3QUFBQU1BQUFBY0FBRUFBQUFBQUR3QUF3QUJBQUFBSEFBRUFDQUFBQUFFQUFRQUFRQUFBQzcvL3dBQVwiICsgXCJBQzcvLy8vVEFBRUFBQUFBQUFBQkJnQUFBUUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQVwiICsgXCJBQUFBQUFBQUFBQUFBQUFBQUFFQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQVwiICsgXCJBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQVwiICsgXCJBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQVwiICsgXCJBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQVwiICsgXCJBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFNQUFBQUFBQUQvZ3dBeUFBQUFBUUFBQUFBQUFBQUFBQUFBQUFBQVwiICsgXCJBQUFCQUFRRUFBRUJBUUpZQUFFQkFTSDREd0Q0R3dIRUF2Z2NBL2dYQkl3TUFZdUwrbno1dFFYa0Q1ajNDQkxuRVFBQ1wiICsgXCJBUUVCSVZoWVdGaFlXRmhZV0ZoWVdGaFlXRmhZV0ZoWVdGaFlXRmhZV0ZoWVdGaFlBQUFCQVFBQUR3QUNBUUVFRS90M1wiICsgXCJEb3Y2ZkFINmZBVCtmUHA4K253SERvc01Ddm0xQ3ZtMURBejZmQlFBQUFBQUFBQUJBQUFBQU1tSmJ6RUFBQUFBemdUalwiICsgXCJGUUFBQUFET0JPUXBBQUVBQUFBQUFBQUFEQUFVQUFRQUFBQUJBQUFBQWdBQkFBQUFBQUFBQUFBRDZBQUFBQUFBQUE9PVwiKTtcbiAgICByZXR1cm4gKDAsX3NoYXJlZF91dGlsX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uc2hhZG93KSh0aGlzLCBcIl9sb2FkVGVzdEZvbnRcIiwgdGVzdEZvbnQpO1xuICB9XG4gIF9wcmVwYXJlRm9udExvYWRFdmVudChmb250LCByZXF1ZXN0KSB7XG4gICAgZnVuY3Rpb24gaW50MzIoZGF0YSwgb2Zmc2V0KSB7XG4gICAgICByZXR1cm4gZGF0YS5jaGFyQ29kZUF0KG9mZnNldCkgPDwgMjQgfCBkYXRhLmNoYXJDb2RlQXQob2Zmc2V0ICsgMSkgPDwgMTYgfCBkYXRhLmNoYXJDb2RlQXQob2Zmc2V0ICsgMikgPDwgOCB8IGRhdGEuY2hhckNvZGVBdChvZmZzZXQgKyAzKSAmIDB4ZmY7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHNwbGljZVN0cmluZyhzLCBvZmZzZXQsIHJlbW92ZSwgaW5zZXJ0KSB7XG4gICAgICBjb25zdCBjaHVuazEgPSBzLnN1YnN0cmluZygwLCBvZmZzZXQpO1xuICAgICAgY29uc3QgY2h1bmsyID0gcy5zdWJzdHJpbmcob2Zmc2V0ICsgcmVtb3ZlKTtcbiAgICAgIHJldHVybiBjaHVuazEgKyBpbnNlcnQgKyBjaHVuazI7XG4gICAgfVxuICAgIGxldCBpLCBpaTtcbiAgICBjb25zdCBjYW52YXMgPSB0aGlzLl9kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiY2FudmFzXCIpO1xuICAgIGNhbnZhcy53aWR0aCA9IDE7XG4gICAgY2FudmFzLmhlaWdodCA9IDE7XG4gICAgY29uc3QgY3R4ID0gY2FudmFzLmdldENvbnRleHQoXCIyZFwiKTtcbiAgICBsZXQgY2FsbGVkID0gMDtcbiAgICBmdW5jdGlvbiBpc0ZvbnRSZWFkeShuYW1lLCBjYWxsYmFjaykge1xuICAgICAgaWYgKCsrY2FsbGVkID4gMzApIHtcbiAgICAgICAgKDAsX3NoYXJlZF91dGlsX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18ud2FybikoXCJMb2FkIHRlc3QgZm9udCBuZXZlciBsb2FkZWQuXCIpO1xuICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjdHguZm9udCA9IFwiMzBweCBcIiArIG5hbWU7XG4gICAgICBjdHguZmlsbFRleHQoXCIuXCIsIDAsIDIwKTtcbiAgICAgIGNvbnN0IGltYWdlRGF0YSA9IGN0eC5nZXRJbWFnZURhdGEoMCwgMCwgMSwgMSk7XG4gICAgICBpZiAoaW1hZ2VEYXRhLmRhdGFbM10gPiAwKSB7XG4gICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHNldFRpbWVvdXQoaXNGb250UmVhZHkuYmluZChudWxsLCBuYW1lLCBjYWxsYmFjaykpO1xuICAgIH1cbiAgICBjb25zdCBsb2FkVGVzdEZvbnRJZCA9IGBsdCR7RGF0ZS5ub3coKX0ke3RoaXMubG9hZFRlc3RGb250SWQrK31gO1xuICAgIGxldCBkYXRhID0gdGhpcy5fbG9hZFRlc3RGb250O1xuICAgIGNvbnN0IENPTU1FTlRfT0ZGU0VUID0gOTc2O1xuICAgIGRhdGEgPSBzcGxpY2VTdHJpbmcoZGF0YSwgQ09NTUVOVF9PRkZTRVQsIGxvYWRUZXN0Rm9udElkLmxlbmd0aCwgbG9hZFRlc3RGb250SWQpO1xuICAgIGNvbnN0IENGRl9DSEVDS1NVTV9PRkZTRVQgPSAxNjtcbiAgICBjb25zdCBYWFhYX1ZBTFVFID0gMHg1ODU4NTg1ODtcbiAgICBsZXQgY2hlY2tzdW0gPSBpbnQzMihkYXRhLCBDRkZfQ0hFQ0tTVU1fT0ZGU0VUKTtcbiAgICBmb3IgKGkgPSAwLCBpaSA9IGxvYWRUZXN0Rm9udElkLmxlbmd0aCAtIDM7IGkgPCBpaTsgaSArPSA0KSB7XG4gICAgICBjaGVja3N1bSA9IGNoZWNrc3VtIC0gWFhYWF9WQUxVRSArIGludDMyKGxvYWRUZXN0Rm9udElkLCBpKSB8IDA7XG4gICAgfVxuICAgIGlmIChpIDwgbG9hZFRlc3RGb250SWQubGVuZ3RoKSB7XG4gICAgICBjaGVja3N1bSA9IGNoZWNrc3VtIC0gWFhYWF9WQUxVRSArIGludDMyKGxvYWRUZXN0Rm9udElkICsgXCJYWFhcIiwgaSkgfCAwO1xuICAgIH1cbiAgICBkYXRhID0gc3BsaWNlU3RyaW5nKGRhdGEsIENGRl9DSEVDS1NVTV9PRkZTRVQsIDQsICgwLF9zaGFyZWRfdXRpbF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLnN0cmluZzMyKShjaGVja3N1bSkpO1xuICAgIGNvbnN0IHVybCA9IGB1cmwoZGF0YTpmb250L29wZW50eXBlO2Jhc2U2NCwke2J0b2EoZGF0YSl9KTtgO1xuICAgIGNvbnN0IHJ1bGUgPSBgQGZvbnQtZmFjZSB7Zm9udC1mYW1pbHk6XCIke2xvYWRUZXN0Rm9udElkfVwiO3NyYzoke3VybH19YDtcbiAgICB0aGlzLmluc2VydFJ1bGUocnVsZSk7XG4gICAgY29uc3QgZGl2ID0gdGhpcy5fZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICBkaXYuc3R5bGUudmlzaWJpbGl0eSA9IFwiaGlkZGVuXCI7XG4gICAgZGl2LnN0eWxlLndpZHRoID0gZGl2LnN0eWxlLmhlaWdodCA9IFwiMTBweFwiO1xuICAgIGRpdi5zdHlsZS5wb3NpdGlvbiA9IFwiYWJzb2x1dGVcIjtcbiAgICBkaXYuc3R5bGUudG9wID0gZGl2LnN0eWxlLmxlZnQgPSBcIjBweFwiO1xuICAgIGZvciAoY29uc3QgbmFtZSBvZiBbZm9udC5sb2FkZWROYW1lLCBsb2FkVGVzdEZvbnRJZF0pIHtcbiAgICAgIGNvbnN0IHNwYW4gPSB0aGlzLl9kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcbiAgICAgIHNwYW4udGV4dENvbnRlbnQgPSBcIkhpXCI7XG4gICAgICBzcGFuLnN0eWxlLmZvbnRGYW1pbHkgPSBuYW1lO1xuICAgICAgZGl2LmFwcGVuZChzcGFuKTtcbiAgICB9XG4gICAgdGhpcy5fZG9jdW1lbnQuYm9keS5hcHBlbmQoZGl2KTtcbiAgICBpc0ZvbnRSZWFkeShsb2FkVGVzdEZvbnRJZCwgKCkgPT4ge1xuICAgICAgZGl2LnJlbW92ZSgpO1xuICAgICAgcmVxdWVzdC5jb21wbGV0ZSgpO1xuICAgIH0pO1xuICB9XG59XG5jbGFzcyBGb250RmFjZU9iamVjdCB7XG4gIGNvbnN0cnVjdG9yKHRyYW5zbGF0ZWREYXRhLCB7XG4gICAgaXNFdmFsU3VwcG9ydGVkID0gdHJ1ZSxcbiAgICBkaXNhYmxlRm9udEZhY2UgPSBmYWxzZSxcbiAgICBpZ25vcmVFcnJvcnMgPSBmYWxzZSxcbiAgICBpbnNwZWN0Rm9udCA9IG51bGxcbiAgfSkge1xuICAgIHRoaXMuY29tcGlsZWRHbHlwaHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIGZvciAoY29uc3QgaSBpbiB0cmFuc2xhdGVkRGF0YSkge1xuICAgICAgdGhpc1tpXSA9IHRyYW5zbGF0ZWREYXRhW2ldO1xuICAgIH1cbiAgICB0aGlzLmlzRXZhbFN1cHBvcnRlZCA9IGlzRXZhbFN1cHBvcnRlZCAhPT0gZmFsc2U7XG4gICAgdGhpcy5kaXNhYmxlRm9udEZhY2UgPSBkaXNhYmxlRm9udEZhY2UgPT09IHRydWU7XG4gICAgdGhpcy5pZ25vcmVFcnJvcnMgPSBpZ25vcmVFcnJvcnMgPT09IHRydWU7XG4gICAgdGhpcy5faW5zcGVjdEZvbnQgPSBpbnNwZWN0Rm9udDtcbiAgfVxuICBjcmVhdGVOYXRpdmVGb250RmFjZSgpIHtcbiAgICBpZiAoIXRoaXMuZGF0YSB8fCB0aGlzLmRpc2FibGVGb250RmFjZSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGxldCBuYXRpdmVGb250RmFjZTtcbiAgICBpZiAoIXRoaXMuY3NzRm9udEluZm8pIHtcbiAgICAgIG5hdGl2ZUZvbnRGYWNlID0gbmV3IEZvbnRGYWNlKHRoaXMubG9hZGVkTmFtZSwgdGhpcy5kYXRhLCB7fSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGNzcyA9IHtcbiAgICAgICAgd2VpZ2h0OiB0aGlzLmNzc0ZvbnRJbmZvLmZvbnRXZWlnaHRcbiAgICAgIH07XG4gICAgICBpZiAodGhpcy5jc3NGb250SW5mby5pdGFsaWNBbmdsZSkge1xuICAgICAgICBjc3Muc3R5bGUgPSBgb2JsaXF1ZSAke3RoaXMuY3NzRm9udEluZm8uaXRhbGljQW5nbGV9ZGVnYDtcbiAgICAgIH1cbiAgICAgIG5hdGl2ZUZvbnRGYWNlID0gbmV3IEZvbnRGYWNlKHRoaXMuY3NzRm9udEluZm8uZm9udEZhbWlseSwgdGhpcy5kYXRhLCBjc3MpO1xuICAgIH1cbiAgICB0aGlzLl9pbnNwZWN0Rm9udD8uKHRoaXMpO1xuICAgIHJldHVybiBuYXRpdmVGb250RmFjZTtcbiAgfVxuICBjcmVhdGVGb250RmFjZVJ1bGUoKSB7XG4gICAgaWYgKCF0aGlzLmRhdGEgfHwgdGhpcy5kaXNhYmxlRm9udEZhY2UpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBjb25zdCBkYXRhID0gKDAsX3NoYXJlZF91dGlsX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uYnl0ZXNUb1N0cmluZykodGhpcy5kYXRhKTtcbiAgICBjb25zdCB1cmwgPSBgdXJsKGRhdGE6JHt0aGlzLm1pbWV0eXBlfTtiYXNlNjQsJHtidG9hKGRhdGEpfSk7YDtcbiAgICBsZXQgcnVsZTtcbiAgICBpZiAoIXRoaXMuY3NzRm9udEluZm8pIHtcbiAgICAgIHJ1bGUgPSBgQGZvbnQtZmFjZSB7Zm9udC1mYW1pbHk6XCIke3RoaXMubG9hZGVkTmFtZX1cIjtzcmM6JHt1cmx9fWA7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCBjc3MgPSBgZm9udC13ZWlnaHQ6ICR7dGhpcy5jc3NGb250SW5mby5mb250V2VpZ2h0fTtgO1xuICAgICAgaWYgKHRoaXMuY3NzRm9udEluZm8uaXRhbGljQW5nbGUpIHtcbiAgICAgICAgY3NzICs9IGBmb250LXN0eWxlOiBvYmxpcXVlICR7dGhpcy5jc3NGb250SW5mby5pdGFsaWNBbmdsZX1kZWc7YDtcbiAgICAgIH1cbiAgICAgIHJ1bGUgPSBgQGZvbnQtZmFjZSB7Zm9udC1mYW1pbHk6XCIke3RoaXMuY3NzRm9udEluZm8uZm9udEZhbWlseX1cIjske2Nzc31zcmM6JHt1cmx9fWA7XG4gICAgfVxuICAgIHRoaXMuX2luc3BlY3RGb250Py4odGhpcywgdXJsKTtcbiAgICByZXR1cm4gcnVsZTtcbiAgfVxuICBnZXRQYXRoR2VuZXJhdG9yKG9ianMsIGNoYXJhY3Rlcikge1xuICAgIGlmICh0aGlzLmNvbXBpbGVkR2x5cGhzW2NoYXJhY3Rlcl0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIHRoaXMuY29tcGlsZWRHbHlwaHNbY2hhcmFjdGVyXTtcbiAgICB9XG4gICAgbGV0IGNtZHM7XG4gICAgdHJ5IHtcbiAgICAgIGNtZHMgPSBvYmpzLmdldCh0aGlzLmxvYWRlZE5hbWUgKyBcIl9wYXRoX1wiICsgY2hhcmFjdGVyKTtcbiAgICB9IGNhdGNoIChleCkge1xuICAgICAgaWYgKCF0aGlzLmlnbm9yZUVycm9ycykge1xuICAgICAgICB0aHJvdyBleDtcbiAgICAgIH1cbiAgICAgICgwLF9zaGFyZWRfdXRpbF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLndhcm4pKGBnZXRQYXRoR2VuZXJhdG9yIC0gaWdub3JpbmcgY2hhcmFjdGVyOiBcIiR7ZXh9XCIuYCk7XG4gICAgICByZXR1cm4gdGhpcy5jb21waWxlZEdseXBoc1tjaGFyYWN0ZXJdID0gZnVuY3Rpb24gKGMsIHNpemUpIHt9O1xuICAgIH1cbiAgICBpZiAodGhpcy5pc0V2YWxTdXBwb3J0ZWQgJiYgX3NoYXJlZF91dGlsX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uRmVhdHVyZVRlc3QuaXNFdmFsU3VwcG9ydGVkKSB7XG4gICAgICBjb25zdCBqc0J1ZiA9IFtdO1xuICAgICAgZm9yIChjb25zdCBjdXJyZW50IG9mIGNtZHMpIHtcbiAgICAgICAgY29uc3QgYXJncyA9IGN1cnJlbnQuYXJncyAhPT0gdW5kZWZpbmVkID8gY3VycmVudC5hcmdzLmpvaW4oXCIsXCIpIDogXCJcIjtcbiAgICAgICAganNCdWYucHVzaChcImMuXCIsIGN1cnJlbnQuY21kLCBcIihcIiwgYXJncywgXCIpO1xcblwiKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLmNvbXBpbGVkR2x5cGhzW2NoYXJhY3Rlcl0gPSBuZXcgRnVuY3Rpb24oXCJjXCIsIFwic2l6ZVwiLCBqc0J1Zi5qb2luKFwiXCIpKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuY29tcGlsZWRHbHlwaHNbY2hhcmFjdGVyXSA9IGZ1bmN0aW9uIChjLCBzaXplKSB7XG4gICAgICBmb3IgKGNvbnN0IGN1cnJlbnQgb2YgY21kcykge1xuICAgICAgICBpZiAoY3VycmVudC5jbWQgPT09IFwic2NhbGVcIikge1xuICAgICAgICAgIGN1cnJlbnQuYXJncyA9IFtzaXplLCAtc2l6ZV07XG4gICAgICAgIH1cbiAgICAgICAgY1tjdXJyZW50LmNtZF0uYXBwbHkoYywgY3VycmVudC5hcmdzKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG59XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDQ3Mjpcbi8qKiovICgoX191bnVzZWRfd2VicGFja19fX3dlYnBhY2tfbW9kdWxlX18sIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuLyogaGFybW9ueSBleHBvcnQgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIHtcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgTWV0YWRhdGE6ICgpID0+ICgvKiBiaW5kaW5nICovIE1ldGFkYXRhKVxuLyogaGFybW9ueSBleHBvcnQgKi8gfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX3NoYXJlZF91dGlsX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI2Nik7XG5cbmNsYXNzIE1ldGFkYXRhIHtcbiAgI21ldGFkYXRhTWFwO1xuICAjZGF0YTtcbiAgY29uc3RydWN0b3Ioe1xuICAgIHBhcnNlZERhdGEsXG4gICAgcmF3RGF0YVxuICB9KSB7XG4gICAgdGhpcy4jbWV0YWRhdGFNYXAgPSBwYXJzZWREYXRhO1xuICAgIHRoaXMuI2RhdGEgPSByYXdEYXRhO1xuICB9XG4gIGdldFJhdygpIHtcbiAgICByZXR1cm4gdGhpcy4jZGF0YTtcbiAgfVxuICBnZXQobmFtZSkge1xuICAgIHJldHVybiB0aGlzLiNtZXRhZGF0YU1hcC5nZXQobmFtZSkgPz8gbnVsbDtcbiAgfVxuICBnZXRBbGwoKSB7XG4gICAgcmV0dXJuICgwLF9zaGFyZWRfdXRpbF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLm9iamVjdEZyb21NYXApKHRoaXMuI21ldGFkYXRhTWFwKTtcbiAgfVxuICBoYXMobmFtZSkge1xuICAgIHJldHVybiB0aGlzLiNtZXRhZGF0YU1hcC5oYXMobmFtZSk7XG4gIH1cbn1cblxuXG4vKioqLyB9KSxcblxuLyoqKi8gNDc0OlxuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX19fd2VicGFja19tb2R1bGVfXywgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG4vKiBoYXJtb255IGV4cG9ydCAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywge1xuLyogaGFybW9ueSBleHBvcnQgKi8gICBQREZOZXR3b3JrU3RyZWFtOiAoKSA9PiAoLyogYmluZGluZyAqLyBQREZOZXR3b3JrU3RyZWFtKVxuLyogaGFybW9ueSBleHBvcnQgKi8gfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX3NoYXJlZF91dGlsX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI2Nik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX25ldHdvcmtfdXRpbHNfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMjUzKTtcblxuXG47XG5jb25zdCBPS19SRVNQT05TRSA9IDIwMDtcbmNvbnN0IFBBUlRJQUxfQ09OVEVOVF9SRVNQT05TRSA9IDIwNjtcbmZ1bmN0aW9uIGdldEFycmF5QnVmZmVyKHhocikge1xuICBjb25zdCBkYXRhID0geGhyLnJlc3BvbnNlO1xuICBpZiAodHlwZW9mIGRhdGEgIT09IFwic3RyaW5nXCIpIHtcbiAgICByZXR1cm4gZGF0YTtcbiAgfVxuICByZXR1cm4gKDAsX3NoYXJlZF91dGlsX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uc3RyaW5nVG9CeXRlcykoZGF0YSkuYnVmZmVyO1xufVxuY2xhc3MgTmV0d29ya01hbmFnZXIge1xuICBjb25zdHJ1Y3Rvcih1cmwsIGFyZ3MgPSB7fSkge1xuICAgIHRoaXMudXJsID0gdXJsO1xuICAgIHRoaXMuaXNIdHRwID0gL15odHRwcz86L2kudGVzdCh1cmwpO1xuICAgIHRoaXMuaHR0cEhlYWRlcnMgPSB0aGlzLmlzSHR0cCAmJiBhcmdzLmh0dHBIZWFkZXJzIHx8IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdGhpcy53aXRoQ3JlZGVudGlhbHMgPSBhcmdzLndpdGhDcmVkZW50aWFscyB8fCBmYWxzZTtcbiAgICB0aGlzLmN1cnJYaHJJZCA9IDA7XG4gICAgdGhpcy5wZW5kaW5nUmVxdWVzdHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB9XG4gIHJlcXVlc3RSYW5nZShiZWdpbiwgZW5kLCBsaXN0ZW5lcnMpIHtcbiAgICBjb25zdCBhcmdzID0ge1xuICAgICAgYmVnaW4sXG4gICAgICBlbmRcbiAgICB9O1xuICAgIGZvciAoY29uc3QgcHJvcCBpbiBsaXN0ZW5lcnMpIHtcbiAgICAgIGFyZ3NbcHJvcF0gPSBsaXN0ZW5lcnNbcHJvcF07XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnJlcXVlc3QoYXJncyk7XG4gIH1cbiAgcmVxdWVzdEZ1bGwobGlzdGVuZXJzKSB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdChsaXN0ZW5lcnMpO1xuICB9XG4gIHJlcXVlc3QoYXJncykge1xuICAgIGNvbnN0IHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgIGNvbnN0IHhocklkID0gdGhpcy5jdXJyWGhySWQrKztcbiAgICBjb25zdCBwZW5kaW5nUmVxdWVzdCA9IHRoaXMucGVuZGluZ1JlcXVlc3RzW3hocklkXSA9IHtcbiAgICAgIHhoclxuICAgIH07XG4gICAgeGhyLm9wZW4oXCJHRVRcIiwgdGhpcy51cmwpO1xuICAgIHhoci53aXRoQ3JlZGVudGlhbHMgPSB0aGlzLndpdGhDcmVkZW50aWFscztcbiAgICBmb3IgKGNvbnN0IHByb3BlcnR5IGluIHRoaXMuaHR0cEhlYWRlcnMpIHtcbiAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy5odHRwSGVhZGVyc1twcm9wZXJ0eV07XG4gICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKHByb3BlcnR5LCB2YWx1ZSk7XG4gICAgfVxuICAgIGlmICh0aGlzLmlzSHR0cCAmJiBcImJlZ2luXCIgaW4gYXJncyAmJiBcImVuZFwiIGluIGFyZ3MpIHtcbiAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKFwiUmFuZ2VcIiwgYGJ5dGVzPSR7YXJncy5iZWdpbn0tJHthcmdzLmVuZCAtIDF9YCk7XG4gICAgICBwZW5kaW5nUmVxdWVzdC5leHBlY3RlZFN0YXR1cyA9IFBBUlRJQUxfQ09OVEVOVF9SRVNQT05TRTtcbiAgICB9IGVsc2Uge1xuICAgICAgcGVuZGluZ1JlcXVlc3QuZXhwZWN0ZWRTdGF0dXMgPSBPS19SRVNQT05TRTtcbiAgICB9XG4gICAgeGhyLnJlc3BvbnNlVHlwZSA9IFwiYXJyYXlidWZmZXJcIjtcbiAgICBpZiAoYXJncy5vbkVycm9yKSB7XG4gICAgICB4aHIub25lcnJvciA9IGZ1bmN0aW9uIChldnQpIHtcbiAgICAgICAgYXJncy5vbkVycm9yKHhoci5zdGF0dXMpO1xuICAgICAgfTtcbiAgICB9XG4gICAgeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IHRoaXMub25TdGF0ZUNoYW5nZS5iaW5kKHRoaXMsIHhocklkKTtcbiAgICB4aHIub25wcm9ncmVzcyA9IHRoaXMub25Qcm9ncmVzcy5iaW5kKHRoaXMsIHhocklkKTtcbiAgICBwZW5kaW5nUmVxdWVzdC5vbkhlYWRlcnNSZWNlaXZlZCA9IGFyZ3Mub25IZWFkZXJzUmVjZWl2ZWQ7XG4gICAgcGVuZGluZ1JlcXVlc3Qub25Eb25lID0gYXJncy5vbkRvbmU7XG4gICAgcGVuZGluZ1JlcXVlc3Qub25FcnJvciA9IGFyZ3Mub25FcnJvcjtcbiAgICBwZW5kaW5nUmVxdWVzdC5vblByb2dyZXNzID0gYXJncy5vblByb2dyZXNzO1xuICAgIHhoci5zZW5kKG51bGwpO1xuICAgIHJldHVybiB4aHJJZDtcbiAgfVxuICBvblByb2dyZXNzKHhocklkLCBldnQpIHtcbiAgICBjb25zdCBwZW5kaW5nUmVxdWVzdCA9IHRoaXMucGVuZGluZ1JlcXVlc3RzW3hocklkXTtcbiAgICBpZiAoIXBlbmRpbmdSZXF1ZXN0KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHBlbmRpbmdSZXF1ZXN0Lm9uUHJvZ3Jlc3M/LihldnQpO1xuICB9XG4gIG9uU3RhdGVDaGFuZ2UoeGhySWQsIGV2dCkge1xuICAgIGNvbnN0IHBlbmRpbmdSZXF1ZXN0ID0gdGhpcy5wZW5kaW5nUmVxdWVzdHNbeGhySWRdO1xuICAgIGlmICghcGVuZGluZ1JlcXVlc3QpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgeGhyID0gcGVuZGluZ1JlcXVlc3QueGhyO1xuICAgIGlmICh4aHIucmVhZHlTdGF0ZSA+PSAyICYmIHBlbmRpbmdSZXF1ZXN0Lm9uSGVhZGVyc1JlY2VpdmVkKSB7XG4gICAgICBwZW5kaW5nUmVxdWVzdC5vbkhlYWRlcnNSZWNlaXZlZCgpO1xuICAgICAgZGVsZXRlIHBlbmRpbmdSZXF1ZXN0Lm9uSGVhZGVyc1JlY2VpdmVkO1xuICAgIH1cbiAgICBpZiAoeGhyLnJlYWR5U3RhdGUgIT09IDQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKCEoeGhySWQgaW4gdGhpcy5wZW5kaW5nUmVxdWVzdHMpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGRlbGV0ZSB0aGlzLnBlbmRpbmdSZXF1ZXN0c1t4aHJJZF07XG4gICAgaWYgKHhoci5zdGF0dXMgPT09IDAgJiYgdGhpcy5pc0h0dHApIHtcbiAgICAgIHBlbmRpbmdSZXF1ZXN0Lm9uRXJyb3I/Lih4aHIuc3RhdHVzKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgeGhyU3RhdHVzID0geGhyLnN0YXR1cyB8fCBPS19SRVNQT05TRTtcbiAgICBjb25zdCBva19yZXNwb25zZV9vbl9yYW5nZV9yZXF1ZXN0ID0geGhyU3RhdHVzID09PSBPS19SRVNQT05TRSAmJiBwZW5kaW5nUmVxdWVzdC5leHBlY3RlZFN0YXR1cyA9PT0gUEFSVElBTF9DT05URU5UX1JFU1BPTlNFO1xuICAgIGlmICghb2tfcmVzcG9uc2Vfb25fcmFuZ2VfcmVxdWVzdCAmJiB4aHJTdGF0dXMgIT09IHBlbmRpbmdSZXF1ZXN0LmV4cGVjdGVkU3RhdHVzKSB7XG4gICAgICBwZW5kaW5nUmVxdWVzdC5vbkVycm9yPy4oeGhyLnN0YXR1cyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGNodW5rID0gZ2V0QXJyYXlCdWZmZXIoeGhyKTtcbiAgICBpZiAoeGhyU3RhdHVzID09PSBQQVJUSUFMX0NPTlRFTlRfUkVTUE9OU0UpIHtcbiAgICAgIGNvbnN0IHJhbmdlSGVhZGVyID0geGhyLmdldFJlc3BvbnNlSGVhZGVyKFwiQ29udGVudC1SYW5nZVwiKTtcbiAgICAgIGNvbnN0IG1hdGNoZXMgPSAvYnl0ZXMgKFxcZCspLShcXGQrKVxcLyhcXGQrKS8uZXhlYyhyYW5nZUhlYWRlcik7XG4gICAgICBwZW5kaW5nUmVxdWVzdC5vbkRvbmUoe1xuICAgICAgICBiZWdpbjogcGFyc2VJbnQobWF0Y2hlc1sxXSwgMTApLFxuICAgICAgICBjaHVua1xuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChjaHVuaykge1xuICAgICAgcGVuZGluZ1JlcXVlc3Qub25Eb25lKHtcbiAgICAgICAgYmVnaW46IDAsXG4gICAgICAgIGNodW5rXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcGVuZGluZ1JlcXVlc3Qub25FcnJvcj8uKHhoci5zdGF0dXMpO1xuICAgIH1cbiAgfVxuICBnZXRSZXF1ZXN0WGhyKHhocklkKSB7XG4gICAgcmV0dXJuIHRoaXMucGVuZGluZ1JlcXVlc3RzW3hocklkXS54aHI7XG4gIH1cbiAgaXNQZW5kaW5nUmVxdWVzdCh4aHJJZCkge1xuICAgIHJldHVybiB4aHJJZCBpbiB0aGlzLnBlbmRpbmdSZXF1ZXN0cztcbiAgfVxuICBhYm9ydFJlcXVlc3QoeGhySWQpIHtcbiAgICBjb25zdCB4aHIgPSB0aGlzLnBlbmRpbmdSZXF1ZXN0c1t4aHJJZF0ueGhyO1xuICAgIGRlbGV0ZSB0aGlzLnBlbmRpbmdSZXF1ZXN0c1t4aHJJZF07XG4gICAgeGhyLmFib3J0KCk7XG4gIH1cbn1cbmNsYXNzIFBERk5ldHdvcmtTdHJlYW0ge1xuICBjb25zdHJ1Y3Rvcihzb3VyY2UpIHtcbiAgICB0aGlzLl9zb3VyY2UgPSBzb3VyY2U7XG4gICAgdGhpcy5fbWFuYWdlciA9IG5ldyBOZXR3b3JrTWFuYWdlcihzb3VyY2UudXJsLCB7XG4gICAgICBodHRwSGVhZGVyczogc291cmNlLmh0dHBIZWFkZXJzLFxuICAgICAgd2l0aENyZWRlbnRpYWxzOiBzb3VyY2Uud2l0aENyZWRlbnRpYWxzXG4gICAgfSk7XG4gICAgdGhpcy5fcmFuZ2VDaHVua1NpemUgPSBzb3VyY2UucmFuZ2VDaHVua1NpemU7XG4gICAgdGhpcy5fZnVsbFJlcXVlc3RSZWFkZXIgPSBudWxsO1xuICAgIHRoaXMuX3JhbmdlUmVxdWVzdFJlYWRlcnMgPSBbXTtcbiAgfVxuICBfb25SYW5nZVJlcXVlc3RSZWFkZXJDbG9zZWQocmVhZGVyKSB7XG4gICAgY29uc3QgaSA9IHRoaXMuX3JhbmdlUmVxdWVzdFJlYWRlcnMuaW5kZXhPZihyZWFkZXIpO1xuICAgIGlmIChpID49IDApIHtcbiAgICAgIHRoaXMuX3JhbmdlUmVxdWVzdFJlYWRlcnMuc3BsaWNlKGksIDEpO1xuICAgIH1cbiAgfVxuICBnZXRGdWxsUmVhZGVyKCkge1xuICAgICgwLF9zaGFyZWRfdXRpbF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLmFzc2VydCkoIXRoaXMuX2Z1bGxSZXF1ZXN0UmVhZGVyLCBcIlBERk5ldHdvcmtTdHJlYW0uZ2V0RnVsbFJlYWRlciBjYW4gb25seSBiZSBjYWxsZWQgb25jZS5cIik7XG4gICAgdGhpcy5fZnVsbFJlcXVlc3RSZWFkZXIgPSBuZXcgUERGTmV0d29ya1N0cmVhbUZ1bGxSZXF1ZXN0UmVhZGVyKHRoaXMuX21hbmFnZXIsIHRoaXMuX3NvdXJjZSk7XG4gICAgcmV0dXJuIHRoaXMuX2Z1bGxSZXF1ZXN0UmVhZGVyO1xuICB9XG4gIGdldFJhbmdlUmVhZGVyKGJlZ2luLCBlbmQpIHtcbiAgICBjb25zdCByZWFkZXIgPSBuZXcgUERGTmV0d29ya1N0cmVhbVJhbmdlUmVxdWVzdFJlYWRlcih0aGlzLl9tYW5hZ2VyLCBiZWdpbiwgZW5kKTtcbiAgICByZWFkZXIub25DbG9zZWQgPSB0aGlzLl9vblJhbmdlUmVxdWVzdFJlYWRlckNsb3NlZC5iaW5kKHRoaXMpO1xuICAgIHRoaXMuX3JhbmdlUmVxdWVzdFJlYWRlcnMucHVzaChyZWFkZXIpO1xuICAgIHJldHVybiByZWFkZXI7XG4gIH1cbiAgY2FuY2VsQWxsUmVxdWVzdHMocmVhc29uKSB7XG4gICAgdGhpcy5fZnVsbFJlcXVlc3RSZWFkZXI/LmNhbmNlbChyZWFzb24pO1xuICAgIGZvciAoY29uc3QgcmVhZGVyIG9mIHRoaXMuX3JhbmdlUmVxdWVzdFJlYWRlcnMuc2xpY2UoMCkpIHtcbiAgICAgIHJlYWRlci5jYW5jZWwocmVhc29uKTtcbiAgICB9XG4gIH1cbn1cbmNsYXNzIFBERk5ldHdvcmtTdHJlYW1GdWxsUmVxdWVzdFJlYWRlciB7XG4gIGNvbnN0cnVjdG9yKG1hbmFnZXIsIHNvdXJjZSkge1xuICAgIHRoaXMuX21hbmFnZXIgPSBtYW5hZ2VyO1xuICAgIGNvbnN0IGFyZ3MgPSB7XG4gICAgICBvbkhlYWRlcnNSZWNlaXZlZDogdGhpcy5fb25IZWFkZXJzUmVjZWl2ZWQuYmluZCh0aGlzKSxcbiAgICAgIG9uRG9uZTogdGhpcy5fb25Eb25lLmJpbmQodGhpcyksXG4gICAgICBvbkVycm9yOiB0aGlzLl9vbkVycm9yLmJpbmQodGhpcyksXG4gICAgICBvblByb2dyZXNzOiB0aGlzLl9vblByb2dyZXNzLmJpbmQodGhpcylcbiAgICB9O1xuICAgIHRoaXMuX3VybCA9IHNvdXJjZS51cmw7XG4gICAgdGhpcy5fZnVsbFJlcXVlc3RJZCA9IG1hbmFnZXIucmVxdWVzdEZ1bGwoYXJncyk7XG4gICAgdGhpcy5faGVhZGVyc1JlY2VpdmVkQ2FwYWJpbGl0eSA9IG5ldyBfc2hhcmVkX3V0aWxfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5Qcm9taXNlQ2FwYWJpbGl0eSgpO1xuICAgIHRoaXMuX2Rpc2FibGVSYW5nZSA9IHNvdXJjZS5kaXNhYmxlUmFuZ2UgfHwgZmFsc2U7XG4gICAgdGhpcy5fY29udGVudExlbmd0aCA9IHNvdXJjZS5sZW5ndGg7XG4gICAgdGhpcy5fcmFuZ2VDaHVua1NpemUgPSBzb3VyY2UucmFuZ2VDaHVua1NpemU7XG4gICAgaWYgKCF0aGlzLl9yYW5nZUNodW5rU2l6ZSAmJiAhdGhpcy5fZGlzYWJsZVJhbmdlKSB7XG4gICAgICB0aGlzLl9kaXNhYmxlUmFuZ2UgPSB0cnVlO1xuICAgIH1cbiAgICB0aGlzLl9pc1N0cmVhbWluZ1N1cHBvcnRlZCA9IGZhbHNlO1xuICAgIHRoaXMuX2lzUmFuZ2VTdXBwb3J0ZWQgPSBmYWxzZTtcbiAgICB0aGlzLl9jYWNoZWRDaHVua3MgPSBbXTtcbiAgICB0aGlzLl9yZXF1ZXN0cyA9IFtdO1xuICAgIHRoaXMuX2RvbmUgPSBmYWxzZTtcbiAgICB0aGlzLl9zdG9yZWRFcnJvciA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl9maWxlbmFtZSA9IG51bGw7XG4gICAgdGhpcy5vblByb2dyZXNzID0gbnVsbDtcbiAgfVxuICBfb25IZWFkZXJzUmVjZWl2ZWQoKSB7XG4gICAgY29uc3QgZnVsbFJlcXVlc3RYaHJJZCA9IHRoaXMuX2Z1bGxSZXF1ZXN0SWQ7XG4gICAgY29uc3QgZnVsbFJlcXVlc3RYaHIgPSB0aGlzLl9tYW5hZ2VyLmdldFJlcXVlc3RYaHIoZnVsbFJlcXVlc3RYaHJJZCk7XG4gICAgY29uc3QgZ2V0UmVzcG9uc2VIZWFkZXIgPSBuYW1lID0+IHtcbiAgICAgIHJldHVybiBmdWxsUmVxdWVzdFhoci5nZXRSZXNwb25zZUhlYWRlcihuYW1lKTtcbiAgICB9O1xuICAgIGNvbnN0IHtcbiAgICAgIGFsbG93UmFuZ2VSZXF1ZXN0cyxcbiAgICAgIHN1Z2dlc3RlZExlbmd0aFxuICAgIH0gPSAoMCxfbmV0d29ya191dGlsc19qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLnZhbGlkYXRlUmFuZ2VSZXF1ZXN0Q2FwYWJpbGl0aWVzKSh7XG4gICAgICBnZXRSZXNwb25zZUhlYWRlcixcbiAgICAgIGlzSHR0cDogdGhpcy5fbWFuYWdlci5pc0h0dHAsXG4gICAgICByYW5nZUNodW5rU2l6ZTogdGhpcy5fcmFuZ2VDaHVua1NpemUsXG4gICAgICBkaXNhYmxlUmFuZ2U6IHRoaXMuX2Rpc2FibGVSYW5nZVxuICAgIH0pO1xuICAgIGlmIChhbGxvd1JhbmdlUmVxdWVzdHMpIHtcbiAgICAgIHRoaXMuX2lzUmFuZ2VTdXBwb3J0ZWQgPSB0cnVlO1xuICAgIH1cbiAgICB0aGlzLl9jb250ZW50TGVuZ3RoID0gc3VnZ2VzdGVkTGVuZ3RoIHx8IHRoaXMuX2NvbnRlbnRMZW5ndGg7XG4gICAgdGhpcy5fZmlsZW5hbWUgPSAoMCxfbmV0d29ya191dGlsc19qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLmV4dHJhY3RGaWxlbmFtZUZyb21IZWFkZXIpKGdldFJlc3BvbnNlSGVhZGVyKTtcbiAgICBpZiAodGhpcy5faXNSYW5nZVN1cHBvcnRlZCkge1xuICAgICAgdGhpcy5fbWFuYWdlci5hYm9ydFJlcXVlc3QoZnVsbFJlcXVlc3RYaHJJZCk7XG4gICAgfVxuICAgIHRoaXMuX2hlYWRlcnNSZWNlaXZlZENhcGFiaWxpdHkucmVzb2x2ZSgpO1xuICB9XG4gIF9vbkRvbmUoZGF0YSkge1xuICAgIGlmIChkYXRhKSB7XG4gICAgICBpZiAodGhpcy5fcmVxdWVzdHMubGVuZ3RoID4gMCkge1xuICAgICAgICBjb25zdCByZXF1ZXN0Q2FwYWJpbGl0eSA9IHRoaXMuX3JlcXVlc3RzLnNoaWZ0KCk7XG4gICAgICAgIHJlcXVlc3RDYXBhYmlsaXR5LnJlc29sdmUoe1xuICAgICAgICAgIHZhbHVlOiBkYXRhLmNodW5rLFxuICAgICAgICAgIGRvbmU6IGZhbHNlXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fY2FjaGVkQ2h1bmtzLnB1c2goZGF0YS5jaHVuayk7XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuX2RvbmUgPSB0cnVlO1xuICAgIGlmICh0aGlzLl9jYWNoZWRDaHVua3MubGVuZ3RoID4gMCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IHJlcXVlc3RDYXBhYmlsaXR5IG9mIHRoaXMuX3JlcXVlc3RzKSB7XG4gICAgICByZXF1ZXN0Q2FwYWJpbGl0eS5yZXNvbHZlKHtcbiAgICAgICAgdmFsdWU6IHVuZGVmaW5lZCxcbiAgICAgICAgZG9uZTogdHJ1ZVxuICAgICAgfSk7XG4gICAgfVxuICAgIHRoaXMuX3JlcXVlc3RzLmxlbmd0aCA9IDA7XG4gIH1cbiAgX29uRXJyb3Ioc3RhdHVzKSB7XG4gICAgdGhpcy5fc3RvcmVkRXJyb3IgPSAoMCxfbmV0d29ya191dGlsc19qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLmNyZWF0ZVJlc3BvbnNlU3RhdHVzRXJyb3IpKHN0YXR1cywgdGhpcy5fdXJsKTtcbiAgICB0aGlzLl9oZWFkZXJzUmVjZWl2ZWRDYXBhYmlsaXR5LnJlamVjdCh0aGlzLl9zdG9yZWRFcnJvcik7XG4gICAgZm9yIChjb25zdCByZXF1ZXN0Q2FwYWJpbGl0eSBvZiB0aGlzLl9yZXF1ZXN0cykge1xuICAgICAgcmVxdWVzdENhcGFiaWxpdHkucmVqZWN0KHRoaXMuX3N0b3JlZEVycm9yKTtcbiAgICB9XG4gICAgdGhpcy5fcmVxdWVzdHMubGVuZ3RoID0gMDtcbiAgICB0aGlzLl9jYWNoZWRDaHVua3MubGVuZ3RoID0gMDtcbiAgfVxuICBfb25Qcm9ncmVzcyhldnQpIHtcbiAgICB0aGlzLm9uUHJvZ3Jlc3M/Lih7XG4gICAgICBsb2FkZWQ6IGV2dC5sb2FkZWQsXG4gICAgICB0b3RhbDogZXZ0Lmxlbmd0aENvbXB1dGFibGUgPyBldnQudG90YWwgOiB0aGlzLl9jb250ZW50TGVuZ3RoXG4gICAgfSk7XG4gIH1cbiAgZ2V0IGZpbGVuYW1lKCkge1xuICAgIHJldHVybiB0aGlzLl9maWxlbmFtZTtcbiAgfVxuICBnZXQgaXNSYW5nZVN1cHBvcnRlZCgpIHtcbiAgICByZXR1cm4gdGhpcy5faXNSYW5nZVN1cHBvcnRlZDtcbiAgfVxuICBnZXQgaXNTdHJlYW1pbmdTdXBwb3J0ZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2lzU3RyZWFtaW5nU3VwcG9ydGVkO1xuICB9XG4gIGdldCBjb250ZW50TGVuZ3RoKCkge1xuICAgIHJldHVybiB0aGlzLl9jb250ZW50TGVuZ3RoO1xuICB9XG4gIGdldCBoZWFkZXJzUmVhZHkoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2hlYWRlcnNSZWNlaXZlZENhcGFiaWxpdHkucHJvbWlzZTtcbiAgfVxuICBhc3luYyByZWFkKCkge1xuICAgIGlmICh0aGlzLl9zdG9yZWRFcnJvcikge1xuICAgICAgdGhyb3cgdGhpcy5fc3RvcmVkRXJyb3I7XG4gICAgfVxuICAgIGlmICh0aGlzLl9jYWNoZWRDaHVua3MubGVuZ3RoID4gMCkge1xuICAgICAgY29uc3QgY2h1bmsgPSB0aGlzLl9jYWNoZWRDaHVua3Muc2hpZnQoKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHZhbHVlOiBjaHVuayxcbiAgICAgICAgZG9uZTogZmFsc2VcbiAgICAgIH07XG4gICAgfVxuICAgIGlmICh0aGlzLl9kb25lKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB2YWx1ZTogdW5kZWZpbmVkLFxuICAgICAgICBkb25lOiB0cnVlXG4gICAgICB9O1xuICAgIH1cbiAgICBjb25zdCByZXF1ZXN0Q2FwYWJpbGl0eSA9IG5ldyBfc2hhcmVkX3V0aWxfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5Qcm9taXNlQ2FwYWJpbGl0eSgpO1xuICAgIHRoaXMuX3JlcXVlc3RzLnB1c2gocmVxdWVzdENhcGFiaWxpdHkpO1xuICAgIHJldHVybiByZXF1ZXN0Q2FwYWJpbGl0eS5wcm9taXNlO1xuICB9XG4gIGNhbmNlbChyZWFzb24pIHtcbiAgICB0aGlzLl9kb25lID0gdHJ1ZTtcbiAgICB0aGlzLl9oZWFkZXJzUmVjZWl2ZWRDYXBhYmlsaXR5LnJlamVjdChyZWFzb24pO1xuICAgIGZvciAoY29uc3QgcmVxdWVzdENhcGFiaWxpdHkgb2YgdGhpcy5fcmVxdWVzdHMpIHtcbiAgICAgIHJlcXVlc3RDYXBhYmlsaXR5LnJlc29sdmUoe1xuICAgICAgICB2YWx1ZTogdW5kZWZpbmVkLFxuICAgICAgICBkb25lOiB0cnVlXG4gICAgICB9KTtcbiAgICB9XG4gICAgdGhpcy5fcmVxdWVzdHMubGVuZ3RoID0gMDtcbiAgICBpZiAodGhpcy5fbWFuYWdlci5pc1BlbmRpbmdSZXF1ZXN0KHRoaXMuX2Z1bGxSZXF1ZXN0SWQpKSB7XG4gICAgICB0aGlzLl9tYW5hZ2VyLmFib3J0UmVxdWVzdCh0aGlzLl9mdWxsUmVxdWVzdElkKTtcbiAgICB9XG4gICAgdGhpcy5fZnVsbFJlcXVlc3RSZWFkZXIgPSBudWxsO1xuICB9XG59XG5jbGFzcyBQREZOZXR3b3JrU3RyZWFtUmFuZ2VSZXF1ZXN0UmVhZGVyIHtcbiAgY29uc3RydWN0b3IobWFuYWdlciwgYmVnaW4sIGVuZCkge1xuICAgIHRoaXMuX21hbmFnZXIgPSBtYW5hZ2VyO1xuICAgIGNvbnN0IGFyZ3MgPSB7XG4gICAgICBvbkRvbmU6IHRoaXMuX29uRG9uZS5iaW5kKHRoaXMpLFxuICAgICAgb25FcnJvcjogdGhpcy5fb25FcnJvci5iaW5kKHRoaXMpLFxuICAgICAgb25Qcm9ncmVzczogdGhpcy5fb25Qcm9ncmVzcy5iaW5kKHRoaXMpXG4gICAgfTtcbiAgICB0aGlzLl91cmwgPSBtYW5hZ2VyLnVybDtcbiAgICB0aGlzLl9yZXF1ZXN0SWQgPSBtYW5hZ2VyLnJlcXVlc3RSYW5nZShiZWdpbiwgZW5kLCBhcmdzKTtcbiAgICB0aGlzLl9yZXF1ZXN0cyA9IFtdO1xuICAgIHRoaXMuX3F1ZXVlZENodW5rID0gbnVsbDtcbiAgICB0aGlzLl9kb25lID0gZmFsc2U7XG4gICAgdGhpcy5fc3RvcmVkRXJyb3IgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5vblByb2dyZXNzID0gbnVsbDtcbiAgICB0aGlzLm9uQ2xvc2VkID0gbnVsbDtcbiAgfVxuICBfY2xvc2UoKSB7XG4gICAgdGhpcy5vbkNsb3NlZD8uKHRoaXMpO1xuICB9XG4gIF9vbkRvbmUoZGF0YSkge1xuICAgIGNvbnN0IGNodW5rID0gZGF0YS5jaHVuaztcbiAgICBpZiAodGhpcy5fcmVxdWVzdHMubGVuZ3RoID4gMCkge1xuICAgICAgY29uc3QgcmVxdWVzdENhcGFiaWxpdHkgPSB0aGlzLl9yZXF1ZXN0cy5zaGlmdCgpO1xuICAgICAgcmVxdWVzdENhcGFiaWxpdHkucmVzb2x2ZSh7XG4gICAgICAgIHZhbHVlOiBjaHVuayxcbiAgICAgICAgZG9uZTogZmFsc2VcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9xdWV1ZWRDaHVuayA9IGNodW5rO1xuICAgIH1cbiAgICB0aGlzLl9kb25lID0gdHJ1ZTtcbiAgICBmb3IgKGNvbnN0IHJlcXVlc3RDYXBhYmlsaXR5IG9mIHRoaXMuX3JlcXVlc3RzKSB7XG4gICAgICByZXF1ZXN0Q2FwYWJpbGl0eS5yZXNvbHZlKHtcbiAgICAgICAgdmFsdWU6IHVuZGVmaW5lZCxcbiAgICAgICAgZG9uZTogdHJ1ZVxuICAgICAgfSk7XG4gICAgfVxuICAgIHRoaXMuX3JlcXVlc3RzLmxlbmd0aCA9IDA7XG4gICAgdGhpcy5fY2xvc2UoKTtcbiAgfVxuICBfb25FcnJvcihzdGF0dXMpIHtcbiAgICB0aGlzLl9zdG9yZWRFcnJvciA9ICgwLF9uZXR3b3JrX3V0aWxzX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uY3JlYXRlUmVzcG9uc2VTdGF0dXNFcnJvcikoc3RhdHVzLCB0aGlzLl91cmwpO1xuICAgIGZvciAoY29uc3QgcmVxdWVzdENhcGFiaWxpdHkgb2YgdGhpcy5fcmVxdWVzdHMpIHtcbiAgICAgIHJlcXVlc3RDYXBhYmlsaXR5LnJlamVjdCh0aGlzLl9zdG9yZWRFcnJvcik7XG4gICAgfVxuICAgIHRoaXMuX3JlcXVlc3RzLmxlbmd0aCA9IDA7XG4gICAgdGhpcy5fcXVldWVkQ2h1bmsgPSBudWxsO1xuICB9XG4gIF9vblByb2dyZXNzKGV2dCkge1xuICAgIGlmICghdGhpcy5pc1N0cmVhbWluZ1N1cHBvcnRlZCkge1xuICAgICAgdGhpcy5vblByb2dyZXNzPy4oe1xuICAgICAgICBsb2FkZWQ6IGV2dC5sb2FkZWRcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICBnZXQgaXNTdHJlYW1pbmdTdXBwb3J0ZWQoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGFzeW5jIHJlYWQoKSB7XG4gICAgaWYgKHRoaXMuX3N0b3JlZEVycm9yKSB7XG4gICAgICB0aHJvdyB0aGlzLl9zdG9yZWRFcnJvcjtcbiAgICB9XG4gICAgaWYgKHRoaXMuX3F1ZXVlZENodW5rICE9PSBudWxsKSB7XG4gICAgICBjb25zdCBjaHVuayA9IHRoaXMuX3F1ZXVlZENodW5rO1xuICAgICAgdGhpcy5fcXVldWVkQ2h1bmsgPSBudWxsO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdmFsdWU6IGNodW5rLFxuICAgICAgICBkb25lOiBmYWxzZVxuICAgICAgfTtcbiAgICB9XG4gICAgaWYgKHRoaXMuX2RvbmUpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHZhbHVlOiB1bmRlZmluZWQsXG4gICAgICAgIGRvbmU6IHRydWVcbiAgICAgIH07XG4gICAgfVxuICAgIGNvbnN0IHJlcXVlc3RDYXBhYmlsaXR5ID0gbmV3IF9zaGFyZWRfdXRpbF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLlByb21pc2VDYXBhYmlsaXR5KCk7XG4gICAgdGhpcy5fcmVxdWVzdHMucHVzaChyZXF1ZXN0Q2FwYWJpbGl0eSk7XG4gICAgcmV0dXJuIHJlcXVlc3RDYXBhYmlsaXR5LnByb21pc2U7XG4gIH1cbiAgY2FuY2VsKHJlYXNvbikge1xuICAgIHRoaXMuX2RvbmUgPSB0cnVlO1xuICAgIGZvciAoY29uc3QgcmVxdWVzdENhcGFiaWxpdHkgb2YgdGhpcy5fcmVxdWVzdHMpIHtcbiAgICAgIHJlcXVlc3RDYXBhYmlsaXR5LnJlc29sdmUoe1xuICAgICAgICB2YWx1ZTogdW5kZWZpbmVkLFxuICAgICAgICBkb25lOiB0cnVlXG4gICAgICB9KTtcbiAgICB9XG4gICAgdGhpcy5fcmVxdWVzdHMubGVuZ3RoID0gMDtcbiAgICBpZiAodGhpcy5fbWFuYWdlci5pc1BlbmRpbmdSZXF1ZXN0KHRoaXMuX3JlcXVlc3RJZCkpIHtcbiAgICAgIHRoaXMuX21hbmFnZXIuYWJvcnRSZXF1ZXN0KHRoaXMuX3JlcXVlc3RJZCk7XG4gICAgfVxuICAgIHRoaXMuX2Nsb3NlKCk7XG4gIH1cbn1cblxuXG4vKioqLyB9KSxcblxuLyoqKi8gMjUzOlxuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX19fd2VicGFja19tb2R1bGVfXywgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5cbi8vIEVYUE9SVFNcbl9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCB7XG4gIGNyZWF0ZVJlc3BvbnNlU3RhdHVzRXJyb3I6ICgpID0+ICgvKiBiaW5kaW5nICovIGNyZWF0ZVJlc3BvbnNlU3RhdHVzRXJyb3IpLFxuICBleHRyYWN0RmlsZW5hbWVGcm9tSGVhZGVyOiAoKSA9PiAoLyogYmluZGluZyAqLyBleHRyYWN0RmlsZW5hbWVGcm9tSGVhZGVyKSxcbiAgdmFsaWRhdGVSYW5nZVJlcXVlc3RDYXBhYmlsaXRpZXM6ICgpID0+ICgvKiBiaW5kaW5nICovIHZhbGlkYXRlUmFuZ2VSZXF1ZXN0Q2FwYWJpbGl0aWVzKSxcbiAgdmFsaWRhdGVSZXNwb25zZVN0YXR1czogKCkgPT4gKC8qIGJpbmRpbmcgKi8gdmFsaWRhdGVSZXNwb25zZVN0YXR1cylcbn0pO1xuXG4vLyBFWFRFUk5BTCBNT0RVTEU6IC4vc3JjL3NoYXJlZC91dGlsLmpzXG52YXIgdXRpbCA9IF9fd2VicGFja19yZXF1aXJlX18oMjY2KTtcbjsvLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9kaXNwbGF5L2NvbnRlbnRfZGlzcG9zaXRpb24uanNcblxuZnVuY3Rpb24gZ2V0RmlsZW5hbWVGcm9tQ29udGVudERpc3Bvc2l0aW9uSGVhZGVyKGNvbnRlbnREaXNwb3NpdGlvbikge1xuICBsZXQgbmVlZHNFbmNvZGluZ0ZpeHVwID0gdHJ1ZTtcbiAgbGV0IHRtcCA9IHRvUGFyYW1SZWdFeHAoXCJmaWxlbmFtZVxcXFwqXCIsIFwiaVwiKS5leGVjKGNvbnRlbnREaXNwb3NpdGlvbik7XG4gIGlmICh0bXApIHtcbiAgICB0bXAgPSB0bXBbMV07XG4gICAgbGV0IGZpbGVuYW1lID0gcmZjMjYxNnVucXVvdGUodG1wKTtcbiAgICBmaWxlbmFtZSA9IHVuZXNjYXBlKGZpbGVuYW1lKTtcbiAgICBmaWxlbmFtZSA9IHJmYzU5ODdkZWNvZGUoZmlsZW5hbWUpO1xuICAgIGZpbGVuYW1lID0gcmZjMjA0N2RlY29kZShmaWxlbmFtZSk7XG4gICAgcmV0dXJuIGZpeHVwRW5jb2RpbmcoZmlsZW5hbWUpO1xuICB9XG4gIHRtcCA9IHJmYzIyMzFnZXRwYXJhbShjb250ZW50RGlzcG9zaXRpb24pO1xuICBpZiAodG1wKSB7XG4gICAgY29uc3QgZmlsZW5hbWUgPSByZmMyMDQ3ZGVjb2RlKHRtcCk7XG4gICAgcmV0dXJuIGZpeHVwRW5jb2RpbmcoZmlsZW5hbWUpO1xuICB9XG4gIHRtcCA9IHRvUGFyYW1SZWdFeHAoXCJmaWxlbmFtZVwiLCBcImlcIikuZXhlYyhjb250ZW50RGlzcG9zaXRpb24pO1xuICBpZiAodG1wKSB7XG4gICAgdG1wID0gdG1wWzFdO1xuICAgIGxldCBmaWxlbmFtZSA9IHJmYzI2MTZ1bnF1b3RlKHRtcCk7XG4gICAgZmlsZW5hbWUgPSByZmMyMDQ3ZGVjb2RlKGZpbGVuYW1lKTtcbiAgICByZXR1cm4gZml4dXBFbmNvZGluZyhmaWxlbmFtZSk7XG4gIH1cbiAgZnVuY3Rpb24gdG9QYXJhbVJlZ0V4cChhdHRyaWJ1dGVQYXR0ZXJuLCBmbGFncykge1xuICAgIHJldHVybiBuZXcgUmVnRXhwKFwiKD86Xnw7KVxcXFxzKlwiICsgYXR0cmlidXRlUGF0dGVybiArIFwiXFxcXHMqPVxcXFxzKlwiICsgXCIoXCIgKyAnW15cIjtcXFxcc11bXjtcXFxcc10qJyArIFwifFwiICsgJ1wiKD86W15cIlxcXFxcXFxcXXxcXFxcXFxcXFwiPykrXCI/JyArIFwiKVwiLCBmbGFncyk7XG4gIH1cbiAgZnVuY3Rpb24gdGV4dGRlY29kZShlbmNvZGluZywgdmFsdWUpIHtcbiAgICBpZiAoZW5jb2RpbmcpIHtcbiAgICAgIGlmICghL15bXFx4MDAtXFx4RkZdKyQvLnRlc3QodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGRlY29kZXIgPSBuZXcgVGV4dERlY29kZXIoZW5jb2RpbmcsIHtcbiAgICAgICAgICBmYXRhbDogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgYnVmZmVyID0gKDAsdXRpbC5zdHJpbmdUb0J5dGVzKSh2YWx1ZSk7XG4gICAgICAgIHZhbHVlID0gZGVjb2Rlci5kZWNvZGUoYnVmZmVyKTtcbiAgICAgICAgbmVlZHNFbmNvZGluZ0ZpeHVwID0gZmFsc2U7XG4gICAgICB9IGNhdGNoIHt9XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICBmdW5jdGlvbiBmaXh1cEVuY29kaW5nKHZhbHVlKSB7XG4gICAgaWYgKG5lZWRzRW5jb2RpbmdGaXh1cCAmJiAvW1xceDgwLVxceGZmXS8udGVzdCh2YWx1ZSkpIHtcbiAgICAgIHZhbHVlID0gdGV4dGRlY29kZShcInV0Zi04XCIsIHZhbHVlKTtcbiAgICAgIGlmIChuZWVkc0VuY29kaW5nRml4dXApIHtcbiAgICAgICAgdmFsdWUgPSB0ZXh0ZGVjb2RlKFwiaXNvLTg4NTktMVwiLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICBmdW5jdGlvbiByZmMyMjMxZ2V0cGFyYW0oY29udGVudERpc3Bvc2l0aW9uU3RyKSB7XG4gICAgY29uc3QgbWF0Y2hlcyA9IFtdO1xuICAgIGxldCBtYXRjaDtcbiAgICBjb25zdCBpdGVyID0gdG9QYXJhbVJlZ0V4cChcImZpbGVuYW1lXFxcXCooKD8hMFxcXFxkKVxcXFxkKykoXFxcXCo/KVwiLCBcImlnXCIpO1xuICAgIHdoaWxlICgobWF0Y2ggPSBpdGVyLmV4ZWMoY29udGVudERpc3Bvc2l0aW9uU3RyKSkgIT09IG51bGwpIHtcbiAgICAgIGxldCBbLCBuLCBxdW90LCBwYXJ0XSA9IG1hdGNoO1xuICAgICAgbiA9IHBhcnNlSW50KG4sIDEwKTtcbiAgICAgIGlmIChuIGluIG1hdGNoZXMpIHtcbiAgICAgICAgaWYgKG4gPT09IDApIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIG1hdGNoZXNbbl0gPSBbcXVvdCwgcGFydF07XG4gICAgfVxuICAgIGNvbnN0IHBhcnRzID0gW107XG4gICAgZm9yIChsZXQgbiA9IDA7IG4gPCBtYXRjaGVzLmxlbmd0aDsgKytuKSB7XG4gICAgICBpZiAoIShuIGluIG1hdGNoZXMpKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgbGV0IFtxdW90LCBwYXJ0XSA9IG1hdGNoZXNbbl07XG4gICAgICBwYXJ0ID0gcmZjMjYxNnVucXVvdGUocGFydCk7XG4gICAgICBpZiAocXVvdCkge1xuICAgICAgICBwYXJ0ID0gdW5lc2NhcGUocGFydCk7XG4gICAgICAgIGlmIChuID09PSAwKSB7XG4gICAgICAgICAgcGFydCA9IHJmYzU5ODdkZWNvZGUocGFydCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHBhcnRzLnB1c2gocGFydCk7XG4gICAgfVxuICAgIHJldHVybiBwYXJ0cy5qb2luKFwiXCIpO1xuICB9XG4gIGZ1bmN0aW9uIHJmYzI2MTZ1bnF1b3RlKHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlLnN0YXJ0c1dpdGgoJ1wiJykpIHtcbiAgICAgIGNvbnN0IHBhcnRzID0gdmFsdWUuc2xpY2UoMSkuc3BsaXQoJ1xcXFxcIicpO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXJ0cy5sZW5ndGg7ICsraSkge1xuICAgICAgICBjb25zdCBxdW90aW5kZXggPSBwYXJ0c1tpXS5pbmRleE9mKCdcIicpO1xuICAgICAgICBpZiAocXVvdGluZGV4ICE9PSAtMSkge1xuICAgICAgICAgIHBhcnRzW2ldID0gcGFydHNbaV0uc2xpY2UoMCwgcXVvdGluZGV4KTtcbiAgICAgICAgICBwYXJ0cy5sZW5ndGggPSBpICsgMTtcbiAgICAgICAgfVxuICAgICAgICBwYXJ0c1tpXSA9IHBhcnRzW2ldLnJlcGxhY2VBbGwoL1xcXFwoLikvZywgXCIkMVwiKTtcbiAgICAgIH1cbiAgICAgIHZhbHVlID0gcGFydHMuam9pbignXCInKTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIGZ1bmN0aW9uIHJmYzU5ODdkZWNvZGUoZXh0dmFsdWUpIHtcbiAgICBjb25zdCBlbmNvZGluZ2VuZCA9IGV4dHZhbHVlLmluZGV4T2YoXCInXCIpO1xuICAgIGlmIChlbmNvZGluZ2VuZCA9PT0gLTEpIHtcbiAgICAgIHJldHVybiBleHR2YWx1ZTtcbiAgICB9XG4gICAgY29uc3QgZW5jb2RpbmcgPSBleHR2YWx1ZS5zbGljZSgwLCBlbmNvZGluZ2VuZCk7XG4gICAgY29uc3QgbGFuZ3ZhbHVlID0gZXh0dmFsdWUuc2xpY2UoZW5jb2RpbmdlbmQgKyAxKTtcbiAgICBjb25zdCB2YWx1ZSA9IGxhbmd2YWx1ZS5yZXBsYWNlKC9eW14nXSonLywgXCJcIik7XG4gICAgcmV0dXJuIHRleHRkZWNvZGUoZW5jb2RpbmcsIHZhbHVlKTtcbiAgfVxuICBmdW5jdGlvbiByZmMyMDQ3ZGVjb2RlKHZhbHVlKSB7XG4gICAgaWYgKCF2YWx1ZS5zdGFydHNXaXRoKFwiPT9cIikgfHwgL1tcXHgwMC1cXHgxOVxceDgwLVxceGZmXS8udGVzdCh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlLnJlcGxhY2VBbGwoLz1cXD8oW1xcdy1dKilcXD8oW1FxQmJdKVxcPygoPzpbXj9dfFxcPyg/IT0pKSopXFw/PS9nLCBmdW5jdGlvbiAobWF0Y2hlcywgY2hhcnNldCwgZW5jb2RpbmcsIHRleHQpIHtcbiAgICAgIGlmIChlbmNvZGluZyA9PT0gXCJxXCIgfHwgZW5jb2RpbmcgPT09IFwiUVwiKSB7XG4gICAgICAgIHRleHQgPSB0ZXh0LnJlcGxhY2VBbGwoXCJfXCIsIFwiIFwiKTtcbiAgICAgICAgdGV4dCA9IHRleHQucmVwbGFjZUFsbCgvPShbMC05YS1mQS1GXXsyfSkvZywgZnVuY3Rpb24gKG1hdGNoLCBoZXgpIHtcbiAgICAgICAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShwYXJzZUludChoZXgsIDE2KSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdGV4dGRlY29kZShjaGFyc2V0LCB0ZXh0KTtcbiAgICAgIH1cbiAgICAgIHRyeSB7XG4gICAgICAgIHRleHQgPSBhdG9iKHRleHQpO1xuICAgICAgfSBjYXRjaCB7fVxuICAgICAgcmV0dXJuIHRleHRkZWNvZGUoY2hhcnNldCwgdGV4dCk7XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIFwiXCI7XG59XG5cbi8vIEVYVEVSTkFMIE1PRFVMRTogLi9zcmMvZGlzcGxheS9kaXNwbGF5X3V0aWxzLmpzXG52YXIgZGlzcGxheV91dGlscyA9IF9fd2VicGFja19yZXF1aXJlX18oNDczKTtcbjsvLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9kaXNwbGF5L25ldHdvcmtfdXRpbHMuanNcblxuXG5cbmZ1bmN0aW9uIHZhbGlkYXRlUmFuZ2VSZXF1ZXN0Q2FwYWJpbGl0aWVzKHtcbiAgZ2V0UmVzcG9uc2VIZWFkZXIsXG4gIGlzSHR0cCxcbiAgcmFuZ2VDaHVua1NpemUsXG4gIGRpc2FibGVSYW5nZVxufSkge1xuICBjb25zdCByZXR1cm5WYWx1ZXMgPSB7XG4gICAgYWxsb3dSYW5nZVJlcXVlc3RzOiBmYWxzZSxcbiAgICBzdWdnZXN0ZWRMZW5ndGg6IHVuZGVmaW5lZFxuICB9O1xuICBjb25zdCBsZW5ndGggPSBwYXJzZUludChnZXRSZXNwb25zZUhlYWRlcihcIkNvbnRlbnQtTGVuZ3RoXCIpLCAxMCk7XG4gIGlmICghTnVtYmVyLmlzSW50ZWdlcihsZW5ndGgpKSB7XG4gICAgcmV0dXJuIHJldHVyblZhbHVlcztcbiAgfVxuICByZXR1cm5WYWx1ZXMuc3VnZ2VzdGVkTGVuZ3RoID0gbGVuZ3RoO1xuICBpZiAobGVuZ3RoIDw9IDIgKiByYW5nZUNodW5rU2l6ZSkge1xuICAgIHJldHVybiByZXR1cm5WYWx1ZXM7XG4gIH1cbiAgaWYgKGRpc2FibGVSYW5nZSB8fCAhaXNIdHRwKSB7XG4gICAgcmV0dXJuIHJldHVyblZhbHVlcztcbiAgfVxuICBpZiAoZ2V0UmVzcG9uc2VIZWFkZXIoXCJBY2NlcHQtUmFuZ2VzXCIpICE9PSBcImJ5dGVzXCIpIHtcbiAgICByZXR1cm4gcmV0dXJuVmFsdWVzO1xuICB9XG4gIGNvbnN0IGNvbnRlbnRFbmNvZGluZyA9IGdldFJlc3BvbnNlSGVhZGVyKFwiQ29udGVudC1FbmNvZGluZ1wiKSB8fCBcImlkZW50aXR5XCI7XG4gIGlmIChjb250ZW50RW5jb2RpbmcgIT09IFwiaWRlbnRpdHlcIikge1xuICAgIHJldHVybiByZXR1cm5WYWx1ZXM7XG4gIH1cbiAgcmV0dXJuVmFsdWVzLmFsbG93UmFuZ2VSZXF1ZXN0cyA9IHRydWU7XG4gIHJldHVybiByZXR1cm5WYWx1ZXM7XG59XG5mdW5jdGlvbiBleHRyYWN0RmlsZW5hbWVGcm9tSGVhZGVyKGdldFJlc3BvbnNlSGVhZGVyKSB7XG4gIGNvbnN0IGNvbnRlbnREaXNwb3NpdGlvbiA9IGdldFJlc3BvbnNlSGVhZGVyKFwiQ29udGVudC1EaXNwb3NpdGlvblwiKTtcbiAgaWYgKGNvbnRlbnREaXNwb3NpdGlvbikge1xuICAgIGxldCBmaWxlbmFtZSA9IGdldEZpbGVuYW1lRnJvbUNvbnRlbnREaXNwb3NpdGlvbkhlYWRlcihjb250ZW50RGlzcG9zaXRpb24pO1xuICAgIGlmIChmaWxlbmFtZS5pbmNsdWRlcyhcIiVcIikpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGZpbGVuYW1lID0gZGVjb2RlVVJJQ29tcG9uZW50KGZpbGVuYW1lKTtcbiAgICAgIH0gY2F0Y2gge31cbiAgICB9XG4gICAgaWYgKCgwLGRpc3BsYXlfdXRpbHMuaXNQZGZGaWxlKShmaWxlbmFtZSkpIHtcbiAgICAgIHJldHVybiBmaWxlbmFtZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5mdW5jdGlvbiBjcmVhdGVSZXNwb25zZVN0YXR1c0Vycm9yKHN0YXR1cywgdXJsKSB7XG4gIGlmIChzdGF0dXMgPT09IDQwNCB8fCBzdGF0dXMgPT09IDAgJiYgdXJsLnN0YXJ0c1dpdGgoXCJmaWxlOlwiKSkge1xuICAgIHJldHVybiBuZXcgdXRpbC5NaXNzaW5nUERGRXhjZXB0aW9uKCdNaXNzaW5nIFBERiBcIicgKyB1cmwgKyAnXCIuJyk7XG4gIH1cbiAgcmV0dXJuIG5ldyB1dGlsLlVuZXhwZWN0ZWRSZXNwb25zZUV4Y2VwdGlvbihgVW5leHBlY3RlZCBzZXJ2ZXIgcmVzcG9uc2UgKCR7c3RhdHVzfSkgd2hpbGUgcmV0cmlldmluZyBQREYgXCIke3VybH1cIi5gLCBzdGF0dXMpO1xufVxuZnVuY3Rpb24gdmFsaWRhdGVSZXNwb25zZVN0YXR1cyhzdGF0dXMpIHtcbiAgcmV0dXJuIHN0YXR1cyA9PT0gMjAwIHx8IHN0YXR1cyA9PT0gMjA2O1xufVxuXG5cbi8qKiovIH0pLFxuXG4vKioqLyA0OTg6XG4vKioqLyAoKF9fd2VicGFja19tb2R1bGVfXywgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmEoX193ZWJwYWNrX21vZHVsZV9fLCBhc3luYyAoX193ZWJwYWNrX2hhbmRsZV9hc3luY19kZXBlbmRlbmNpZXNfXywgX193ZWJwYWNrX2FzeW5jX3Jlc3VsdF9fKSA9PiB7IHRyeSB7XG4vKiBoYXJtb255IGV4cG9ydCAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywge1xuLyogaGFybW9ueSBleHBvcnQgKi8gICBQREZOb2RlU3RyZWFtOiAoKSA9PiAoLyogYmluZGluZyAqLyBQREZOb2RlU3RyZWFtKVxuLyogaGFybW9ueSBleHBvcnQgKi8gfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX3NoYXJlZF91dGlsX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI2Nik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX25ldHdvcmtfdXRpbHNfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMjUzKTtcblxuXG47XG5sZXQgZnMsIGh0dHAsIGh0dHBzLCB1cmw7XG5pZiAoX3NoYXJlZF91dGlsX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uaXNOb2RlSlMpIHtcbiAgZnMgPSBhd2FpdCBpbXBvcnQoLyogd2VicGFja0lnbm9yZTogdHJ1ZSAqLyBcImZzXCIpO1xuICBodHRwID0gYXdhaXQgaW1wb3J0KC8qIHdlYnBhY2tJZ25vcmU6IHRydWUgKi8gXCJodHRwXCIpO1xuICBodHRwcyA9IGF3YWl0IGltcG9ydCgvKiB3ZWJwYWNrSWdub3JlOiB0cnVlICovIFwiaHR0cHNcIik7XG4gIHVybCA9IGF3YWl0IGltcG9ydCgvKiB3ZWJwYWNrSWdub3JlOiB0cnVlICovIFwidXJsXCIpO1xufVxuY29uc3QgZmlsZVVyaVJlZ2V4ID0gL15maWxlOlxcL1xcL1xcL1thLXpBLVpdOlxcLy87XG5mdW5jdGlvbiBwYXJzZVVybChzb3VyY2VVcmwpIHtcbiAgY29uc3QgcGFyc2VkVXJsID0gdXJsLnBhcnNlKHNvdXJjZVVybCk7XG4gIGlmIChwYXJzZWRVcmwucHJvdG9jb2wgPT09IFwiZmlsZTpcIiB8fCBwYXJzZWRVcmwuaG9zdCkge1xuICAgIHJldHVybiBwYXJzZWRVcmw7XG4gIH1cbiAgaWYgKC9eW2Etel06Wy9cXFxcXS9pLnRlc3Qoc291cmNlVXJsKSkge1xuICAgIHJldHVybiB1cmwucGFyc2UoYGZpbGU6Ly8vJHtzb3VyY2VVcmx9YCk7XG4gIH1cbiAgaWYgKCFwYXJzZWRVcmwuaG9zdCkge1xuICAgIHBhcnNlZFVybC5wcm90b2NvbCA9IFwiZmlsZTpcIjtcbiAgfVxuICByZXR1cm4gcGFyc2VkVXJsO1xufVxuY2xhc3MgUERGTm9kZVN0cmVhbSB7XG4gIGNvbnN0cnVjdG9yKHNvdXJjZSkge1xuICAgIHRoaXMuc291cmNlID0gc291cmNlO1xuICAgIHRoaXMudXJsID0gcGFyc2VVcmwoc291cmNlLnVybCk7XG4gICAgdGhpcy5pc0h0dHAgPSB0aGlzLnVybC5wcm90b2NvbCA9PT0gXCJodHRwOlwiIHx8IHRoaXMudXJsLnByb3RvY29sID09PSBcImh0dHBzOlwiO1xuICAgIHRoaXMuaXNGc1VybCA9IHRoaXMudXJsLnByb3RvY29sID09PSBcImZpbGU6XCI7XG4gICAgdGhpcy5odHRwSGVhZGVycyA9IHRoaXMuaXNIdHRwICYmIHNvdXJjZS5odHRwSGVhZGVycyB8fCB7fTtcbiAgICB0aGlzLl9mdWxsUmVxdWVzdFJlYWRlciA9IG51bGw7XG4gICAgdGhpcy5fcmFuZ2VSZXF1ZXN0UmVhZGVycyA9IFtdO1xuICB9XG4gIGdldCBfcHJvZ3Jlc3NpdmVEYXRhTGVuZ3RoKCkge1xuICAgIHJldHVybiB0aGlzLl9mdWxsUmVxdWVzdFJlYWRlcj8uX2xvYWRlZCA/PyAwO1xuICB9XG4gIGdldEZ1bGxSZWFkZXIoKSB7XG4gICAgKDAsX3NoYXJlZF91dGlsX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uYXNzZXJ0KSghdGhpcy5fZnVsbFJlcXVlc3RSZWFkZXIsIFwiUERGTm9kZVN0cmVhbS5nZXRGdWxsUmVhZGVyIGNhbiBvbmx5IGJlIGNhbGxlZCBvbmNlLlwiKTtcbiAgICB0aGlzLl9mdWxsUmVxdWVzdFJlYWRlciA9IHRoaXMuaXNGc1VybCA/IG5ldyBQREZOb2RlU3RyZWFtRnNGdWxsUmVhZGVyKHRoaXMpIDogbmV3IFBERk5vZGVTdHJlYW1GdWxsUmVhZGVyKHRoaXMpO1xuICAgIHJldHVybiB0aGlzLl9mdWxsUmVxdWVzdFJlYWRlcjtcbiAgfVxuICBnZXRSYW5nZVJlYWRlcihzdGFydCwgZW5kKSB7XG4gICAgaWYgKGVuZCA8PSB0aGlzLl9wcm9ncmVzc2l2ZURhdGFMZW5ndGgpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBjb25zdCByYW5nZVJlYWRlciA9IHRoaXMuaXNGc1VybCA/IG5ldyBQREZOb2RlU3RyZWFtRnNSYW5nZVJlYWRlcih0aGlzLCBzdGFydCwgZW5kKSA6IG5ldyBQREZOb2RlU3RyZWFtUmFuZ2VSZWFkZXIodGhpcywgc3RhcnQsIGVuZCk7XG4gICAgdGhpcy5fcmFuZ2VSZXF1ZXN0UmVhZGVycy5wdXNoKHJhbmdlUmVhZGVyKTtcbiAgICByZXR1cm4gcmFuZ2VSZWFkZXI7XG4gIH1cbiAgY2FuY2VsQWxsUmVxdWVzdHMocmVhc29uKSB7XG4gICAgdGhpcy5fZnVsbFJlcXVlc3RSZWFkZXI/LmNhbmNlbChyZWFzb24pO1xuICAgIGZvciAoY29uc3QgcmVhZGVyIG9mIHRoaXMuX3JhbmdlUmVxdWVzdFJlYWRlcnMuc2xpY2UoMCkpIHtcbiAgICAgIHJlYWRlci5jYW5jZWwocmVhc29uKTtcbiAgICB9XG4gIH1cbn1cbmNsYXNzIEJhc2VGdWxsUmVhZGVyIHtcbiAgY29uc3RydWN0b3Ioc3RyZWFtKSB7XG4gICAgdGhpcy5fdXJsID0gc3RyZWFtLnVybDtcbiAgICB0aGlzLl9kb25lID0gZmFsc2U7XG4gICAgdGhpcy5fc3RvcmVkRXJyb3IgPSBudWxsO1xuICAgIHRoaXMub25Qcm9ncmVzcyA9IG51bGw7XG4gICAgY29uc3Qgc291cmNlID0gc3RyZWFtLnNvdXJjZTtcbiAgICB0aGlzLl9jb250ZW50TGVuZ3RoID0gc291cmNlLmxlbmd0aDtcbiAgICB0aGlzLl9sb2FkZWQgPSAwO1xuICAgIHRoaXMuX2ZpbGVuYW1lID0gbnVsbDtcbiAgICB0aGlzLl9kaXNhYmxlUmFuZ2UgPSBzb3VyY2UuZGlzYWJsZVJhbmdlIHx8IGZhbHNlO1xuICAgIHRoaXMuX3JhbmdlQ2h1bmtTaXplID0gc291cmNlLnJhbmdlQ2h1bmtTaXplO1xuICAgIGlmICghdGhpcy5fcmFuZ2VDaHVua1NpemUgJiYgIXRoaXMuX2Rpc2FibGVSYW5nZSkge1xuICAgICAgdGhpcy5fZGlzYWJsZVJhbmdlID0gdHJ1ZTtcbiAgICB9XG4gICAgdGhpcy5faXNTdHJlYW1pbmdTdXBwb3J0ZWQgPSAhc291cmNlLmRpc2FibGVTdHJlYW07XG4gICAgdGhpcy5faXNSYW5nZVN1cHBvcnRlZCA9ICFzb3VyY2UuZGlzYWJsZVJhbmdlO1xuICAgIHRoaXMuX3JlYWRhYmxlU3RyZWFtID0gbnVsbDtcbiAgICB0aGlzLl9yZWFkQ2FwYWJpbGl0eSA9IG5ldyBfc2hhcmVkX3V0aWxfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5Qcm9taXNlQ2FwYWJpbGl0eSgpO1xuICAgIHRoaXMuX2hlYWRlcnNDYXBhYmlsaXR5ID0gbmV3IF9zaGFyZWRfdXRpbF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLlByb21pc2VDYXBhYmlsaXR5KCk7XG4gIH1cbiAgZ2V0IGhlYWRlcnNSZWFkeSgpIHtcbiAgICByZXR1cm4gdGhpcy5faGVhZGVyc0NhcGFiaWxpdHkucHJvbWlzZTtcbiAgfVxuICBnZXQgZmlsZW5hbWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2ZpbGVuYW1lO1xuICB9XG4gIGdldCBjb250ZW50TGVuZ3RoKCkge1xuICAgIHJldHVybiB0aGlzLl9jb250ZW50TGVuZ3RoO1xuICB9XG4gIGdldCBpc1JhbmdlU3VwcG9ydGVkKCkge1xuICAgIHJldHVybiB0aGlzLl9pc1JhbmdlU3VwcG9ydGVkO1xuICB9XG4gIGdldCBpc1N0cmVhbWluZ1N1cHBvcnRlZCgpIHtcbiAgICByZXR1cm4gdGhpcy5faXNTdHJlYW1pbmdTdXBwb3J0ZWQ7XG4gIH1cbiAgYXN5bmMgcmVhZCgpIHtcbiAgICBhd2FpdCB0aGlzLl9yZWFkQ2FwYWJpbGl0eS5wcm9taXNlO1xuICAgIGlmICh0aGlzLl9kb25lKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB2YWx1ZTogdW5kZWZpbmVkLFxuICAgICAgICBkb25lOiB0cnVlXG4gICAgICB9O1xuICAgIH1cbiAgICBpZiAodGhpcy5fc3RvcmVkRXJyb3IpIHtcbiAgICAgIHRocm93IHRoaXMuX3N0b3JlZEVycm9yO1xuICAgIH1cbiAgICBjb25zdCBjaHVuayA9IHRoaXMuX3JlYWRhYmxlU3RyZWFtLnJlYWQoKTtcbiAgICBpZiAoY2h1bmsgPT09IG51bGwpIHtcbiAgICAgIHRoaXMuX3JlYWRDYXBhYmlsaXR5ID0gbmV3IF9zaGFyZWRfdXRpbF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLlByb21pc2VDYXBhYmlsaXR5KCk7XG4gICAgICByZXR1cm4gdGhpcy5yZWFkKCk7XG4gICAgfVxuICAgIHRoaXMuX2xvYWRlZCArPSBjaHVuay5sZW5ndGg7XG4gICAgdGhpcy5vblByb2dyZXNzPy4oe1xuICAgICAgbG9hZGVkOiB0aGlzLl9sb2FkZWQsXG4gICAgICB0b3RhbDogdGhpcy5fY29udGVudExlbmd0aFxuICAgIH0pO1xuICAgIGNvbnN0IGJ1ZmZlciA9IG5ldyBVaW50OEFycmF5KGNodW5rKS5idWZmZXI7XG4gICAgcmV0dXJuIHtcbiAgICAgIHZhbHVlOiBidWZmZXIsXG4gICAgICBkb25lOiBmYWxzZVxuICAgIH07XG4gIH1cbiAgY2FuY2VsKHJlYXNvbikge1xuICAgIGlmICghdGhpcy5fcmVhZGFibGVTdHJlYW0pIHtcbiAgICAgIHRoaXMuX2Vycm9yKHJlYXNvbik7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuX3JlYWRhYmxlU3RyZWFtLmRlc3Ryb3kocmVhc29uKTtcbiAgfVxuICBfZXJyb3IocmVhc29uKSB7XG4gICAgdGhpcy5fc3RvcmVkRXJyb3IgPSByZWFzb247XG4gICAgdGhpcy5fcmVhZENhcGFiaWxpdHkucmVzb2x2ZSgpO1xuICB9XG4gIF9zZXRSZWFkYWJsZVN0cmVhbShyZWFkYWJsZVN0cmVhbSkge1xuICAgIHRoaXMuX3JlYWRhYmxlU3RyZWFtID0gcmVhZGFibGVTdHJlYW07XG4gICAgcmVhZGFibGVTdHJlYW0ub24oXCJyZWFkYWJsZVwiLCAoKSA9PiB7XG4gICAgICB0aGlzLl9yZWFkQ2FwYWJpbGl0eS5yZXNvbHZlKCk7XG4gICAgfSk7XG4gICAgcmVhZGFibGVTdHJlYW0ub24oXCJlbmRcIiwgKCkgPT4ge1xuICAgICAgcmVhZGFibGVTdHJlYW0uZGVzdHJveSgpO1xuICAgICAgdGhpcy5fZG9uZSA9IHRydWU7XG4gICAgICB0aGlzLl9yZWFkQ2FwYWJpbGl0eS5yZXNvbHZlKCk7XG4gICAgfSk7XG4gICAgcmVhZGFibGVTdHJlYW0ub24oXCJlcnJvclwiLCByZWFzb24gPT4ge1xuICAgICAgdGhpcy5fZXJyb3IocmVhc29uKTtcbiAgICB9KTtcbiAgICBpZiAoIXRoaXMuX2lzU3RyZWFtaW5nU3VwcG9ydGVkICYmIHRoaXMuX2lzUmFuZ2VTdXBwb3J0ZWQpIHtcbiAgICAgIHRoaXMuX2Vycm9yKG5ldyBfc2hhcmVkX3V0aWxfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5BYm9ydEV4Y2VwdGlvbihcInN0cmVhbWluZyBpcyBkaXNhYmxlZFwiKSk7XG4gICAgfVxuICAgIGlmICh0aGlzLl9zdG9yZWRFcnJvcikge1xuICAgICAgdGhpcy5fcmVhZGFibGVTdHJlYW0uZGVzdHJveSh0aGlzLl9zdG9yZWRFcnJvcik7XG4gICAgfVxuICB9XG59XG5jbGFzcyBCYXNlUmFuZ2VSZWFkZXIge1xuICBjb25zdHJ1Y3RvcihzdHJlYW0pIHtcbiAgICB0aGlzLl91cmwgPSBzdHJlYW0udXJsO1xuICAgIHRoaXMuX2RvbmUgPSBmYWxzZTtcbiAgICB0aGlzLl9zdG9yZWRFcnJvciA9IG51bGw7XG4gICAgdGhpcy5vblByb2dyZXNzID0gbnVsbDtcbiAgICB0aGlzLl9sb2FkZWQgPSAwO1xuICAgIHRoaXMuX3JlYWRhYmxlU3RyZWFtID0gbnVsbDtcbiAgICB0aGlzLl9yZWFkQ2FwYWJpbGl0eSA9IG5ldyBfc2hhcmVkX3V0aWxfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5Qcm9taXNlQ2FwYWJpbGl0eSgpO1xuICAgIGNvbnN0IHNvdXJjZSA9IHN0cmVhbS5zb3VyY2U7XG4gICAgdGhpcy5faXNTdHJlYW1pbmdTdXBwb3J0ZWQgPSAhc291cmNlLmRpc2FibGVTdHJlYW07XG4gIH1cbiAgZ2V0IGlzU3RyZWFtaW5nU3VwcG9ydGVkKCkge1xuICAgIHJldHVybiB0aGlzLl9pc1N0cmVhbWluZ1N1cHBvcnRlZDtcbiAgfVxuICBhc3luYyByZWFkKCkge1xuICAgIGF3YWl0IHRoaXMuX3JlYWRDYXBhYmlsaXR5LnByb21pc2U7XG4gICAgaWYgKHRoaXMuX2RvbmUpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHZhbHVlOiB1bmRlZmluZWQsXG4gICAgICAgIGRvbmU6IHRydWVcbiAgICAgIH07XG4gICAgfVxuICAgIGlmICh0aGlzLl9zdG9yZWRFcnJvcikge1xuICAgICAgdGhyb3cgdGhpcy5fc3RvcmVkRXJyb3I7XG4gICAgfVxuICAgIGNvbnN0IGNodW5rID0gdGhpcy5fcmVhZGFibGVTdHJlYW0ucmVhZCgpO1xuICAgIGlmIChjaHVuayA9PT0gbnVsbCkge1xuICAgICAgdGhpcy5fcmVhZENhcGFiaWxpdHkgPSBuZXcgX3NoYXJlZF91dGlsX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uUHJvbWlzZUNhcGFiaWxpdHkoKTtcbiAgICAgIHJldHVybiB0aGlzLnJlYWQoKTtcbiAgICB9XG4gICAgdGhpcy5fbG9hZGVkICs9IGNodW5rLmxlbmd0aDtcbiAgICB0aGlzLm9uUHJvZ3Jlc3M/Lih7XG4gICAgICBsb2FkZWQ6IHRoaXMuX2xvYWRlZFxuICAgIH0pO1xuICAgIGNvbnN0IGJ1ZmZlciA9IG5ldyBVaW50OEFycmF5KGNodW5rKS5idWZmZXI7XG4gICAgcmV0dXJuIHtcbiAgICAgIHZhbHVlOiBidWZmZXIsXG4gICAgICBkb25lOiBmYWxzZVxuICAgIH07XG4gIH1cbiAgY2FuY2VsKHJlYXNvbikge1xuICAgIGlmICghdGhpcy5fcmVhZGFibGVTdHJlYW0pIHtcbiAgICAgIHRoaXMuX2Vycm9yKHJlYXNvbik7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuX3JlYWRhYmxlU3RyZWFtLmRlc3Ryb3kocmVhc29uKTtcbiAgfVxuICBfZXJyb3IocmVhc29uKSB7XG4gICAgdGhpcy5fc3RvcmVkRXJyb3IgPSByZWFzb247XG4gICAgdGhpcy5fcmVhZENhcGFiaWxpdHkucmVzb2x2ZSgpO1xuICB9XG4gIF9zZXRSZWFkYWJsZVN0cmVhbShyZWFkYWJsZVN0cmVhbSkge1xuICAgIHRoaXMuX3JlYWRhYmxlU3RyZWFtID0gcmVhZGFibGVTdHJlYW07XG4gICAgcmVhZGFibGVTdHJlYW0ub24oXCJyZWFkYWJsZVwiLCAoKSA9PiB7XG4gICAgICB0aGlzLl9yZWFkQ2FwYWJpbGl0eS5yZXNvbHZlKCk7XG4gICAgfSk7XG4gICAgcmVhZGFibGVTdHJlYW0ub24oXCJlbmRcIiwgKCkgPT4ge1xuICAgICAgcmVhZGFibGVTdHJlYW0uZGVzdHJveSgpO1xuICAgICAgdGhpcy5fZG9uZSA9IHRydWU7XG4gICAgICB0aGlzLl9yZWFkQ2FwYWJpbGl0eS5yZXNvbHZlKCk7XG4gICAgfSk7XG4gICAgcmVhZGFibGVTdHJlYW0ub24oXCJlcnJvclwiLCByZWFzb24gPT4ge1xuICAgICAgdGhpcy5fZXJyb3IocmVhc29uKTtcbiAgICB9KTtcbiAgICBpZiAodGhpcy5fc3RvcmVkRXJyb3IpIHtcbiAgICAgIHRoaXMuX3JlYWRhYmxlU3RyZWFtLmRlc3Ryb3kodGhpcy5fc3RvcmVkRXJyb3IpO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gY3JlYXRlUmVxdWVzdE9wdGlvbnMocGFyc2VkVXJsLCBoZWFkZXJzKSB7XG4gIHJldHVybiB7XG4gICAgcHJvdG9jb2w6IHBhcnNlZFVybC5wcm90b2NvbCxcbiAgICBhdXRoOiBwYXJzZWRVcmwuYXV0aCxcbiAgICBob3N0OiBwYXJzZWRVcmwuaG9zdG5hbWUsXG4gICAgcG9ydDogcGFyc2VkVXJsLnBvcnQsXG4gICAgcGF0aDogcGFyc2VkVXJsLnBhdGgsXG4gICAgbWV0aG9kOiBcIkdFVFwiLFxuICAgIGhlYWRlcnNcbiAgfTtcbn1cbmNsYXNzIFBERk5vZGVTdHJlYW1GdWxsUmVhZGVyIGV4dGVuZHMgQmFzZUZ1bGxSZWFkZXIge1xuICBjb25zdHJ1Y3RvcihzdHJlYW0pIHtcbiAgICBzdXBlcihzdHJlYW0pO1xuICAgIGNvbnN0IGhhbmRsZVJlc3BvbnNlID0gcmVzcG9uc2UgPT4ge1xuICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1c0NvZGUgPT09IDQwNCkge1xuICAgICAgICBjb25zdCBlcnJvciA9IG5ldyBfc2hhcmVkX3V0aWxfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5NaXNzaW5nUERGRXhjZXB0aW9uKGBNaXNzaW5nIFBERiBcIiR7dGhpcy5fdXJsfVwiLmApO1xuICAgICAgICB0aGlzLl9zdG9yZWRFcnJvciA9IGVycm9yO1xuICAgICAgICB0aGlzLl9oZWFkZXJzQ2FwYWJpbGl0eS5yZWplY3QoZXJyb3IpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB0aGlzLl9oZWFkZXJzQ2FwYWJpbGl0eS5yZXNvbHZlKCk7XG4gICAgICB0aGlzLl9zZXRSZWFkYWJsZVN0cmVhbShyZXNwb25zZSk7XG4gICAgICBjb25zdCBnZXRSZXNwb25zZUhlYWRlciA9IG5hbWUgPT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5fcmVhZGFibGVTdHJlYW0uaGVhZGVyc1tuYW1lLnRvTG93ZXJDYXNlKCldO1xuICAgICAgfTtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgYWxsb3dSYW5nZVJlcXVlc3RzLFxuICAgICAgICBzdWdnZXN0ZWRMZW5ndGhcbiAgICAgIH0gPSAoMCxfbmV0d29ya191dGlsc19qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLnZhbGlkYXRlUmFuZ2VSZXF1ZXN0Q2FwYWJpbGl0aWVzKSh7XG4gICAgICAgIGdldFJlc3BvbnNlSGVhZGVyLFxuICAgICAgICBpc0h0dHA6IHN0cmVhbS5pc0h0dHAsXG4gICAgICAgIHJhbmdlQ2h1bmtTaXplOiB0aGlzLl9yYW5nZUNodW5rU2l6ZSxcbiAgICAgICAgZGlzYWJsZVJhbmdlOiB0aGlzLl9kaXNhYmxlUmFuZ2VcbiAgICAgIH0pO1xuICAgICAgdGhpcy5faXNSYW5nZVN1cHBvcnRlZCA9IGFsbG93UmFuZ2VSZXF1ZXN0cztcbiAgICAgIHRoaXMuX2NvbnRlbnRMZW5ndGggPSBzdWdnZXN0ZWRMZW5ndGggfHwgdGhpcy5fY29udGVudExlbmd0aDtcbiAgICAgIHRoaXMuX2ZpbGVuYW1lID0gKDAsX25ldHdvcmtfdXRpbHNfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5leHRyYWN0RmlsZW5hbWVGcm9tSGVhZGVyKShnZXRSZXNwb25zZUhlYWRlcik7XG4gICAgfTtcbiAgICB0aGlzLl9yZXF1ZXN0ID0gbnVsbDtcbiAgICBpZiAodGhpcy5fdXJsLnByb3RvY29sID09PSBcImh0dHA6XCIpIHtcbiAgICAgIHRoaXMuX3JlcXVlc3QgPSBodHRwLnJlcXVlc3QoY3JlYXRlUmVxdWVzdE9wdGlvbnModGhpcy5fdXJsLCBzdHJlYW0uaHR0cEhlYWRlcnMpLCBoYW5kbGVSZXNwb25zZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX3JlcXVlc3QgPSBodHRwcy5yZXF1ZXN0KGNyZWF0ZVJlcXVlc3RPcHRpb25zKHRoaXMuX3VybCwgc3RyZWFtLmh0dHBIZWFkZXJzKSwgaGFuZGxlUmVzcG9uc2UpO1xuICAgIH1cbiAgICB0aGlzLl9yZXF1ZXN0Lm9uKFwiZXJyb3JcIiwgcmVhc29uID0+IHtcbiAgICAgIHRoaXMuX3N0b3JlZEVycm9yID0gcmVhc29uO1xuICAgICAgdGhpcy5faGVhZGVyc0NhcGFiaWxpdHkucmVqZWN0KHJlYXNvbik7XG4gICAgfSk7XG4gICAgdGhpcy5fcmVxdWVzdC5lbmQoKTtcbiAgfVxufVxuY2xhc3MgUERGTm9kZVN0cmVhbVJhbmdlUmVhZGVyIGV4dGVuZHMgQmFzZVJhbmdlUmVhZGVyIHtcbiAgY29uc3RydWN0b3Ioc3RyZWFtLCBzdGFydCwgZW5kKSB7XG4gICAgc3VwZXIoc3RyZWFtKTtcbiAgICB0aGlzLl9odHRwSGVhZGVycyA9IHt9O1xuICAgIGZvciAoY29uc3QgcHJvcGVydHkgaW4gc3RyZWFtLmh0dHBIZWFkZXJzKSB7XG4gICAgICBjb25zdCB2YWx1ZSA9IHN0cmVhbS5odHRwSGVhZGVyc1twcm9wZXJ0eV07XG4gICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX2h0dHBIZWFkZXJzW3Byb3BlcnR5XSA9IHZhbHVlO1xuICAgIH1cbiAgICB0aGlzLl9odHRwSGVhZGVycy5SYW5nZSA9IGBieXRlcz0ke3N0YXJ0fS0ke2VuZCAtIDF9YDtcbiAgICBjb25zdCBoYW5kbGVSZXNwb25zZSA9IHJlc3BvbnNlID0+IHtcbiAgICAgIGlmIChyZXNwb25zZS5zdGF0dXNDb2RlID09PSA0MDQpIHtcbiAgICAgICAgY29uc3QgZXJyb3IgPSBuZXcgX3NoYXJlZF91dGlsX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uTWlzc2luZ1BERkV4Y2VwdGlvbihgTWlzc2luZyBQREYgXCIke3RoaXMuX3VybH1cIi5gKTtcbiAgICAgICAgdGhpcy5fc3RvcmVkRXJyb3IgPSBlcnJvcjtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdGhpcy5fc2V0UmVhZGFibGVTdHJlYW0ocmVzcG9uc2UpO1xuICAgIH07XG4gICAgdGhpcy5fcmVxdWVzdCA9IG51bGw7XG4gICAgaWYgKHRoaXMuX3VybC5wcm90b2NvbCA9PT0gXCJodHRwOlwiKSB7XG4gICAgICB0aGlzLl9yZXF1ZXN0ID0gaHR0cC5yZXF1ZXN0KGNyZWF0ZVJlcXVlc3RPcHRpb25zKHRoaXMuX3VybCwgdGhpcy5faHR0cEhlYWRlcnMpLCBoYW5kbGVSZXNwb25zZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX3JlcXVlc3QgPSBodHRwcy5yZXF1ZXN0KGNyZWF0ZVJlcXVlc3RPcHRpb25zKHRoaXMuX3VybCwgdGhpcy5faHR0cEhlYWRlcnMpLCBoYW5kbGVSZXNwb25zZSk7XG4gICAgfVxuICAgIHRoaXMuX3JlcXVlc3Qub24oXCJlcnJvclwiLCByZWFzb24gPT4ge1xuICAgICAgdGhpcy5fc3RvcmVkRXJyb3IgPSByZWFzb247XG4gICAgfSk7XG4gICAgdGhpcy5fcmVxdWVzdC5lbmQoKTtcbiAgfVxufVxuY2xhc3MgUERGTm9kZVN0cmVhbUZzRnVsbFJlYWRlciBleHRlbmRzIEJhc2VGdWxsUmVhZGVyIHtcbiAgY29uc3RydWN0b3Ioc3RyZWFtKSB7XG4gICAgc3VwZXIoc3RyZWFtKTtcbiAgICBsZXQgcGF0aCA9IGRlY29kZVVSSUNvbXBvbmVudCh0aGlzLl91cmwucGF0aCk7XG4gICAgaWYgKGZpbGVVcmlSZWdleC50ZXN0KHRoaXMuX3VybC5ocmVmKSkge1xuICAgICAgcGF0aCA9IHBhdGgucmVwbGFjZSgvXlxcLy8sIFwiXCIpO1xuICAgIH1cbiAgICBmcy5sc3RhdChwYXRoLCAoZXJyb3IsIHN0YXQpID0+IHtcbiAgICAgIGlmIChlcnJvcikge1xuICAgICAgICBpZiAoZXJyb3IuY29kZSA9PT0gXCJFTk9FTlRcIikge1xuICAgICAgICAgIGVycm9yID0gbmV3IF9zaGFyZWRfdXRpbF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLk1pc3NpbmdQREZFeGNlcHRpb24oYE1pc3NpbmcgUERGIFwiJHtwYXRofVwiLmApO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3N0b3JlZEVycm9yID0gZXJyb3I7XG4gICAgICAgIHRoaXMuX2hlYWRlcnNDYXBhYmlsaXR5LnJlamVjdChlcnJvcik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRoaXMuX2NvbnRlbnRMZW5ndGggPSBzdGF0LnNpemU7XG4gICAgICB0aGlzLl9zZXRSZWFkYWJsZVN0cmVhbShmcy5jcmVhdGVSZWFkU3RyZWFtKHBhdGgpKTtcbiAgICAgIHRoaXMuX2hlYWRlcnNDYXBhYmlsaXR5LnJlc29sdmUoKTtcbiAgICB9KTtcbiAgfVxufVxuY2xhc3MgUERGTm9kZVN0cmVhbUZzUmFuZ2VSZWFkZXIgZXh0ZW5kcyBCYXNlUmFuZ2VSZWFkZXIge1xuICBjb25zdHJ1Y3RvcihzdHJlYW0sIHN0YXJ0LCBlbmQpIHtcbiAgICBzdXBlcihzdHJlYW0pO1xuICAgIGxldCBwYXRoID0gZGVjb2RlVVJJQ29tcG9uZW50KHRoaXMuX3VybC5wYXRoKTtcbiAgICBpZiAoZmlsZVVyaVJlZ2V4LnRlc3QodGhpcy5fdXJsLmhyZWYpKSB7XG4gICAgICBwYXRoID0gcGF0aC5yZXBsYWNlKC9eXFwvLywgXCJcIik7XG4gICAgfVxuICAgIHRoaXMuX3NldFJlYWRhYmxlU3RyZWFtKGZzLmNyZWF0ZVJlYWRTdHJlYW0ocGF0aCwge1xuICAgICAgc3RhcnQsXG4gICAgICBlbmQ6IGVuZCAtIDFcbiAgICB9KSk7XG4gIH1cbn1cblxuX193ZWJwYWNrX2FzeW5jX3Jlc3VsdF9fKCk7XG59IGNhdGNoKGUpIHsgX193ZWJwYWNrX2FzeW5jX3Jlc3VsdF9fKGUpOyB9IH0sIDEpO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gNzM4OlxuLyoqKi8gKChfX3dlYnBhY2tfbW9kdWxlX18sIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuX193ZWJwYWNrX3JlcXVpcmVfXy5hKF9fd2VicGFja19tb2R1bGVfXywgYXN5bmMgKF9fd2VicGFja19oYW5kbGVfYXN5bmNfZGVwZW5kZW5jaWVzX18sIF9fd2VicGFja19hc3luY19yZXN1bHRfXykgPT4geyB0cnkge1xuLyogaGFybW9ueSBleHBvcnQgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIHtcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgTm9kZUNNYXBSZWFkZXJGYWN0b3J5OiAoKSA9PiAoLyogYmluZGluZyAqLyBOb2RlQ01hcFJlYWRlckZhY3RvcnkpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBOb2RlQ2FudmFzRmFjdG9yeTogKCkgPT4gKC8qIGJpbmRpbmcgKi8gTm9kZUNhbnZhc0ZhY3RvcnkpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBOb2RlRmlsdGVyRmFjdG9yeTogKCkgPT4gKC8qIGJpbmRpbmcgKi8gTm9kZUZpbHRlckZhY3RvcnkpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBOb2RlU3RhbmRhcmRGb250RGF0YUZhY3Rvcnk6ICgpID0+ICgvKiBiaW5kaW5nICovIE5vZGVTdGFuZGFyZEZvbnREYXRhRmFjdG9yeSlcbi8qIGhhcm1vbnkgZXhwb3J0ICovIH0pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9iYXNlX2ZhY3RvcnlfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyA9IF9fd2VicGFja19yZXF1aXJlX18oODIyKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfc2hhcmVkX3V0aWxfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMjY2KTtcblxuXG47XG5sZXQgZnMsIGNhbnZhcywgcGF0aDJkX3BvbHlmaWxsO1xuaWYgKF9zaGFyZWRfdXRpbF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLmlzTm9kZUpTKSB7XG4gIGZzID0gYXdhaXQgaW1wb3J0KC8qIHdlYnBhY2tJZ25vcmU6IHRydWUgKi8gXCJmc1wiKTtcbiAgdHJ5IHtcbiAgICBjYW52YXMgPSBhd2FpdCBpbXBvcnQoLyogd2VicGFja0lnbm9yZTogdHJ1ZSAqLyBcImNhbnZhc1wiKTtcbiAgfSBjYXRjaCB7fVxuICB0cnkge1xuICAgIHBhdGgyZF9wb2x5ZmlsbCA9IGF3YWl0IGltcG9ydCgvKiB3ZWJwYWNrSWdub3JlOiB0cnVlICovIFwicGF0aDJkLXBvbHlmaWxsXCIpO1xuICB9IGNhdGNoIHt9XG59XG47XG5jb25zdCBmZXRjaERhdGEgPSBmdW5jdGlvbiAodXJsKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgZnMucmVhZEZpbGUodXJsLCAoZXJyb3IsIGRhdGEpID0+IHtcbiAgICAgIGlmIChlcnJvciB8fCAhZGF0YSkge1xuICAgICAgICByZWplY3QobmV3IEVycm9yKGVycm9yKSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHJlc29sdmUobmV3IFVpbnQ4QXJyYXkoZGF0YSkpO1xuICAgIH0pO1xuICB9KTtcbn07XG5jbGFzcyBOb2RlRmlsdGVyRmFjdG9yeSBleHRlbmRzIF9iYXNlX2ZhY3RvcnlfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5CYXNlRmlsdGVyRmFjdG9yeSB7fVxuY2xhc3MgTm9kZUNhbnZhc0ZhY3RvcnkgZXh0ZW5kcyBfYmFzZV9mYWN0b3J5X2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uQmFzZUNhbnZhc0ZhY3Rvcnkge1xuICBfY3JlYXRlQ2FudmFzKHdpZHRoLCBoZWlnaHQpIHtcbiAgICByZXR1cm4gY2FudmFzLmNyZWF0ZUNhbnZhcyh3aWR0aCwgaGVpZ2h0KTtcbiAgfVxufVxuY2xhc3MgTm9kZUNNYXBSZWFkZXJGYWN0b3J5IGV4dGVuZHMgX2Jhc2VfZmFjdG9yeV9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLkJhc2VDTWFwUmVhZGVyRmFjdG9yeSB7XG4gIF9mZXRjaERhdGEodXJsLCBjb21wcmVzc2lvblR5cGUpIHtcbiAgICByZXR1cm4gZmV0Y2hEYXRhKHVybCkudGhlbihkYXRhID0+IHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGNNYXBEYXRhOiBkYXRhLFxuICAgICAgICBjb21wcmVzc2lvblR5cGVcbiAgICAgIH07XG4gICAgfSk7XG4gIH1cbn1cbmNsYXNzIE5vZGVTdGFuZGFyZEZvbnREYXRhRmFjdG9yeSBleHRlbmRzIF9iYXNlX2ZhY3RvcnlfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5CYXNlU3RhbmRhcmRGb250RGF0YUZhY3Rvcnkge1xuICBfZmV0Y2hEYXRhKHVybCkge1xuICAgIHJldHVybiBmZXRjaERhdGEodXJsKTtcbiAgfVxufVxuXG5fX3dlYnBhY2tfYXN5bmNfcmVzdWx0X18oKTtcbn0gY2F0Y2goZSkgeyBfX3dlYnBhY2tfYXN5bmNfcmVzdWx0X18oZSk7IH0gfSwgMSk7XG5cbi8qKiovIH0pLFxuXG4vKioqLyA4OTA6XG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfX193ZWJwYWNrX21vZHVsZV9fLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cbi8qIGhhcm1vbnkgZXhwb3J0ICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCB7XG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIE9wdGlvbmFsQ29udGVudENvbmZpZzogKCkgPT4gKC8qIGJpbmRpbmcgKi8gT3B0aW9uYWxDb250ZW50Q29uZmlnKVxuLyogaGFybW9ueSBleHBvcnQgKi8gfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX3NoYXJlZF91dGlsX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI2Nik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX3NoYXJlZF9tdXJtdXJoYXNoM19qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4MjUpO1xuXG5cbmNvbnN0IElOVEVSTkFMID0gU3ltYm9sKFwiSU5URVJOQUxcIik7XG5jbGFzcyBPcHRpb25hbENvbnRlbnRHcm91cCB7XG4gICN2aXNpYmxlID0gdHJ1ZTtcbiAgY29uc3RydWN0b3IobmFtZSwgaW50ZW50KSB7XG4gICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICB0aGlzLmludGVudCA9IGludGVudDtcbiAgfVxuICBnZXQgdmlzaWJsZSgpIHtcbiAgICByZXR1cm4gdGhpcy4jdmlzaWJsZTtcbiAgfVxuICBfc2V0VmlzaWJsZShpbnRlcm5hbCwgdmlzaWJsZSkge1xuICAgIGlmIChpbnRlcm5hbCAhPT0gSU5URVJOQUwpIHtcbiAgICAgICgwLF9zaGFyZWRfdXRpbF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLnVucmVhY2hhYmxlKShcIkludGVybmFsIG1ldGhvZCBgX3NldFZpc2libGVgIGNhbGxlZC5cIik7XG4gICAgfVxuICAgIHRoaXMuI3Zpc2libGUgPSB2aXNpYmxlO1xuICB9XG59XG5jbGFzcyBPcHRpb25hbENvbnRlbnRDb25maWcge1xuICAjY2FjaGVkR2V0SGFzaCA9IG51bGw7XG4gICNncm91cHMgPSBuZXcgTWFwKCk7XG4gICNpbml0aWFsSGFzaCA9IG51bGw7XG4gICNvcmRlciA9IG51bGw7XG4gIGNvbnN0cnVjdG9yKGRhdGEpIHtcbiAgICB0aGlzLm5hbWUgPSBudWxsO1xuICAgIHRoaXMuY3JlYXRvciA9IG51bGw7XG4gICAgaWYgKGRhdGEgPT09IG51bGwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5uYW1lID0gZGF0YS5uYW1lO1xuICAgIHRoaXMuY3JlYXRvciA9IGRhdGEuY3JlYXRvcjtcbiAgICB0aGlzLiNvcmRlciA9IGRhdGEub3JkZXI7XG4gICAgZm9yIChjb25zdCBncm91cCBvZiBkYXRhLmdyb3Vwcykge1xuICAgICAgdGhpcy4jZ3JvdXBzLnNldChncm91cC5pZCwgbmV3IE9wdGlvbmFsQ29udGVudEdyb3VwKGdyb3VwLm5hbWUsIGdyb3VwLmludGVudCkpO1xuICAgIH1cbiAgICBpZiAoZGF0YS5iYXNlU3RhdGUgPT09IFwiT0ZGXCIpIHtcbiAgICAgIGZvciAoY29uc3QgZ3JvdXAgb2YgdGhpcy4jZ3JvdXBzLnZhbHVlcygpKSB7XG4gICAgICAgIGdyb3VwLl9zZXRWaXNpYmxlKElOVEVSTkFMLCBmYWxzZSk7XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAoY29uc3Qgb24gb2YgZGF0YS5vbikge1xuICAgICAgdGhpcy4jZ3JvdXBzLmdldChvbikuX3NldFZpc2libGUoSU5URVJOQUwsIHRydWUpO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IG9mZiBvZiBkYXRhLm9mZikge1xuICAgICAgdGhpcy4jZ3JvdXBzLmdldChvZmYpLl9zZXRWaXNpYmxlKElOVEVSTkFMLCBmYWxzZSk7XG4gICAgfVxuICAgIHRoaXMuI2luaXRpYWxIYXNoID0gdGhpcy5nZXRIYXNoKCk7XG4gIH1cbiAgI2V2YWx1YXRlVmlzaWJpbGl0eUV4cHJlc3Npb24oYXJyYXkpIHtcbiAgICBjb25zdCBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG4gICAgaWYgKGxlbmd0aCA8IDIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBjb25zdCBvcGVyYXRvciA9IGFycmF5WzBdO1xuICAgIGZvciAobGV0IGkgPSAxOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGVsZW1lbnQgPSBhcnJheVtpXTtcbiAgICAgIGxldCBzdGF0ZTtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KGVsZW1lbnQpKSB7XG4gICAgICAgIHN0YXRlID0gdGhpcy4jZXZhbHVhdGVWaXNpYmlsaXR5RXhwcmVzc2lvbihlbGVtZW50KTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy4jZ3JvdXBzLmhhcyhlbGVtZW50KSkge1xuICAgICAgICBzdGF0ZSA9IHRoaXMuI2dyb3Vwcy5nZXQoZWxlbWVudCkudmlzaWJsZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICgwLF9zaGFyZWRfdXRpbF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLndhcm4pKGBPcHRpb25hbCBjb250ZW50IGdyb3VwIG5vdCBmb3VuZDogJHtlbGVtZW50fWApO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHN3aXRjaCAob3BlcmF0b3IpIHtcbiAgICAgICAgY2FzZSBcIkFuZFwiOlxuICAgICAgICAgIGlmICghc3RhdGUpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJPclwiOlxuICAgICAgICAgIGlmIChzdGF0ZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwiTm90XCI6XG4gICAgICAgICAgcmV0dXJuICFzdGF0ZTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG9wZXJhdG9yID09PSBcIkFuZFwiO1xuICB9XG4gIGlzVmlzaWJsZShncm91cCkge1xuICAgIGlmICh0aGlzLiNncm91cHMuc2l6ZSA9PT0gMCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmICghZ3JvdXApIHtcbiAgICAgICgwLF9zaGFyZWRfdXRpbF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLndhcm4pKFwiT3B0aW9uYWwgY29udGVudCBncm91cCBub3QgZGVmaW5lZC5cIik7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKGdyb3VwLnR5cGUgPT09IFwiT0NHXCIpIHtcbiAgICAgIGlmICghdGhpcy4jZ3JvdXBzLmhhcyhncm91cC5pZCkpIHtcbiAgICAgICAgKDAsX3NoYXJlZF91dGlsX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18ud2FybikoYE9wdGlvbmFsIGNvbnRlbnQgZ3JvdXAgbm90IGZvdW5kOiAke2dyb3VwLmlkfWApO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLiNncm91cHMuZ2V0KGdyb3VwLmlkKS52aXNpYmxlO1xuICAgIH0gZWxzZSBpZiAoZ3JvdXAudHlwZSA9PT0gXCJPQ01EXCIpIHtcbiAgICAgIGlmIChncm91cC5leHByZXNzaW9uKSB7XG4gICAgICAgIHJldHVybiB0aGlzLiNldmFsdWF0ZVZpc2liaWxpdHlFeHByZXNzaW9uKGdyb3VwLmV4cHJlc3Npb24pO1xuICAgICAgfVxuICAgICAgaWYgKCFncm91cC5wb2xpY3kgfHwgZ3JvdXAucG9saWN5ID09PSBcIkFueU9uXCIpIHtcbiAgICAgICAgZm9yIChjb25zdCBpZCBvZiBncm91cC5pZHMpIHtcbiAgICAgICAgICBpZiAoIXRoaXMuI2dyb3Vwcy5oYXMoaWQpKSB7XG4gICAgICAgICAgICAoMCxfc2hhcmVkX3V0aWxfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy53YXJuKShgT3B0aW9uYWwgY29udGVudCBncm91cCBub3QgZm91bmQ6ICR7aWR9YCk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHRoaXMuI2dyb3Vwcy5nZXQoaWQpLnZpc2libGUpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9IGVsc2UgaWYgKGdyb3VwLnBvbGljeSA9PT0gXCJBbGxPblwiKSB7XG4gICAgICAgIGZvciAoY29uc3QgaWQgb2YgZ3JvdXAuaWRzKSB7XG4gICAgICAgICAgaWYgKCF0aGlzLiNncm91cHMuaGFzKGlkKSkge1xuICAgICAgICAgICAgKDAsX3NoYXJlZF91dGlsX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18ud2FybikoYE9wdGlvbmFsIGNvbnRlbnQgZ3JvdXAgbm90IGZvdW5kOiAke2lkfWApO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghdGhpcy4jZ3JvdXBzLmdldChpZCkudmlzaWJsZSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0gZWxzZSBpZiAoZ3JvdXAucG9saWN5ID09PSBcIkFueU9mZlwiKSB7XG4gICAgICAgIGZvciAoY29uc3QgaWQgb2YgZ3JvdXAuaWRzKSB7XG4gICAgICAgICAgaWYgKCF0aGlzLiNncm91cHMuaGFzKGlkKSkge1xuICAgICAgICAgICAgKDAsX3NoYXJlZF91dGlsX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18ud2FybikoYE9wdGlvbmFsIGNvbnRlbnQgZ3JvdXAgbm90IGZvdW5kOiAke2lkfWApO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghdGhpcy4jZ3JvdXBzLmdldChpZCkudmlzaWJsZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH0gZWxzZSBpZiAoZ3JvdXAucG9saWN5ID09PSBcIkFsbE9mZlwiKSB7XG4gICAgICAgIGZvciAoY29uc3QgaWQgb2YgZ3JvdXAuaWRzKSB7XG4gICAgICAgICAgaWYgKCF0aGlzLiNncm91cHMuaGFzKGlkKSkge1xuICAgICAgICAgICAgKDAsX3NoYXJlZF91dGlsX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18ud2FybikoYE9wdGlvbmFsIGNvbnRlbnQgZ3JvdXAgbm90IGZvdW5kOiAke2lkfWApO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh0aGlzLiNncm91cHMuZ2V0KGlkKS52aXNpYmxlKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgKDAsX3NoYXJlZF91dGlsX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18ud2FybikoYFVua25vd24gb3B0aW9uYWwgY29udGVudCBwb2xpY3kgJHtncm91cC5wb2xpY3l9LmApO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgICgwLF9zaGFyZWRfdXRpbF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLndhcm4pKGBVbmtub3duIGdyb3VwIHR5cGUgJHtncm91cC50eXBlfS5gKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBzZXRWaXNpYmlsaXR5KGlkLCB2aXNpYmxlID0gdHJ1ZSkge1xuICAgIGlmICghdGhpcy4jZ3JvdXBzLmhhcyhpZCkpIHtcbiAgICAgICgwLF9zaGFyZWRfdXRpbF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLndhcm4pKGBPcHRpb25hbCBjb250ZW50IGdyb3VwIG5vdCBmb3VuZDogJHtpZH1gKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy4jZ3JvdXBzLmdldChpZCkuX3NldFZpc2libGUoSU5URVJOQUwsICEhdmlzaWJsZSk7XG4gICAgdGhpcy4jY2FjaGVkR2V0SGFzaCA9IG51bGw7XG4gIH1cbiAgZ2V0IGhhc0luaXRpYWxWaXNpYmlsaXR5KCkge1xuICAgIHJldHVybiB0aGlzLiNpbml0aWFsSGFzaCA9PT0gbnVsbCB8fCB0aGlzLmdldEhhc2goKSA9PT0gdGhpcy4jaW5pdGlhbEhhc2g7XG4gIH1cbiAgZ2V0T3JkZXIoKSB7XG4gICAgaWYgKCF0aGlzLiNncm91cHMuc2l6ZSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGlmICh0aGlzLiNvcmRlcikge1xuICAgICAgcmV0dXJuIHRoaXMuI29yZGVyLnNsaWNlKCk7XG4gICAgfVxuICAgIHJldHVybiBbLi4udGhpcy4jZ3JvdXBzLmtleXMoKV07XG4gIH1cbiAgZ2V0R3JvdXBzKCkge1xuICAgIHJldHVybiB0aGlzLiNncm91cHMuc2l6ZSA+IDAgPyAoMCxfc2hhcmVkX3V0aWxfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5vYmplY3RGcm9tTWFwKSh0aGlzLiNncm91cHMpIDogbnVsbDtcbiAgfVxuICBnZXRHcm91cChpZCkge1xuICAgIHJldHVybiB0aGlzLiNncm91cHMuZ2V0KGlkKSB8fCBudWxsO1xuICB9XG4gIGdldEhhc2goKSB7XG4gICAgaWYgKHRoaXMuI2NhY2hlZEdldEhhc2ggIT09IG51bGwpIHtcbiAgICAgIHJldHVybiB0aGlzLiNjYWNoZWRHZXRIYXNoO1xuICAgIH1cbiAgICBjb25zdCBoYXNoID0gbmV3IF9zaGFyZWRfbXVybXVyaGFzaDNfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5NdXJtdXJIYXNoM182NCgpO1xuICAgIGZvciAoY29uc3QgW2lkLCBncm91cF0gb2YgdGhpcy4jZ3JvdXBzKSB7XG4gICAgICBoYXNoLnVwZGF0ZShgJHtpZH06JHtncm91cC52aXNpYmxlfWApO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy4jY2FjaGVkR2V0SGFzaCA9IGhhc2guaGV4ZGlnZXN0KCk7XG4gIH1cbn1cblxuXG4vKioqLyB9KSxcblxuLyoqKi8gNzM5OlxuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX19fd2VicGFja19tb2R1bGVfXywgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG4vKiBoYXJtb255IGV4cG9ydCAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywge1xuLyogaGFybW9ueSBleHBvcnQgKi8gICByZW5kZXJUZXh0TGF5ZXI6ICgpID0+ICgvKiBiaW5kaW5nICovIHJlbmRlclRleHRMYXllciksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIHVwZGF0ZVRleHRMYXllcjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gdXBkYXRlVGV4dExheWVyKVxuLyogaGFybW9ueSBleHBvcnQgKi8gfSk7XG4vKiB1bnVzZWQgaGFybW9ueSBleHBvcnQgVGV4dExheWVyUmVuZGVyVGFzayAqL1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9zaGFyZWRfdXRpbF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNjYpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9kaXNwbGF5X3V0aWxzX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ3Myk7XG5cblxuY29uc3QgTUFYX1RFWFRfRElWU19UT19SRU5ERVIgPSAxMDAwMDA7XG5jb25zdCBERUZBVUxUX0ZPTlRfU0laRSA9IDMwO1xuY29uc3QgREVGQVVMVF9GT05UX0FTQ0VOVCA9IDAuODtcbmNvbnN0IGFzY2VudENhY2hlID0gbmV3IE1hcCgpO1xuZnVuY3Rpb24gZ2V0Q3R4KHNpemUsIGlzT2Zmc2NyZWVuQ2FudmFzU3VwcG9ydGVkKSB7XG4gIGxldCBjdHg7XG4gIGlmIChpc09mZnNjcmVlbkNhbnZhc1N1cHBvcnRlZCAmJiBfc2hhcmVkX3V0aWxfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5GZWF0dXJlVGVzdC5pc09mZnNjcmVlbkNhbnZhc1N1cHBvcnRlZCkge1xuICAgIGN0eCA9IG5ldyBPZmZzY3JlZW5DYW52YXMoc2l6ZSwgc2l6ZSkuZ2V0Q29udGV4dChcIjJkXCIsIHtcbiAgICAgIGFscGhhOiBmYWxzZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIik7XG4gICAgY2FudmFzLndpZHRoID0gY2FudmFzLmhlaWdodCA9IHNpemU7XG4gICAgY3R4ID0gY2FudmFzLmdldENvbnRleHQoXCIyZFwiLCB7XG4gICAgICBhbHBoYTogZmFsc2VcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gY3R4O1xufVxuZnVuY3Rpb24gZ2V0QXNjZW50KGZvbnRGYW1pbHksIGlzT2Zmc2NyZWVuQ2FudmFzU3VwcG9ydGVkKSB7XG4gIGNvbnN0IGNhY2hlZEFzY2VudCA9IGFzY2VudENhY2hlLmdldChmb250RmFtaWx5KTtcbiAgaWYgKGNhY2hlZEFzY2VudCkge1xuICAgIHJldHVybiBjYWNoZWRBc2NlbnQ7XG4gIH1cbiAgY29uc3QgY3R4ID0gZ2V0Q3R4KERFRkFVTFRfRk9OVF9TSVpFLCBpc09mZnNjcmVlbkNhbnZhc1N1cHBvcnRlZCk7XG4gIGN0eC5mb250ID0gYCR7REVGQVVMVF9GT05UX1NJWkV9cHggJHtmb250RmFtaWx5fWA7XG4gIGNvbnN0IG1ldHJpY3MgPSBjdHgubWVhc3VyZVRleHQoXCJcIik7XG4gIGxldCBhc2NlbnQgPSBtZXRyaWNzLmZvbnRCb3VuZGluZ0JveEFzY2VudDtcbiAgbGV0IGRlc2NlbnQgPSBNYXRoLmFicyhtZXRyaWNzLmZvbnRCb3VuZGluZ0JveERlc2NlbnQpO1xuICBpZiAoYXNjZW50KSB7XG4gICAgY29uc3QgcmF0aW8gPSBhc2NlbnQgLyAoYXNjZW50ICsgZGVzY2VudCk7XG4gICAgYXNjZW50Q2FjaGUuc2V0KGZvbnRGYW1pbHksIHJhdGlvKTtcbiAgICBjdHguY2FudmFzLndpZHRoID0gY3R4LmNhbnZhcy5oZWlnaHQgPSAwO1xuICAgIHJldHVybiByYXRpbztcbiAgfVxuICBjdHguc3Ryb2tlU3R5bGUgPSBcInJlZFwiO1xuICBjdHguY2xlYXJSZWN0KDAsIDAsIERFRkFVTFRfRk9OVF9TSVpFLCBERUZBVUxUX0ZPTlRfU0laRSk7XG4gIGN0eC5zdHJva2VUZXh0KFwiZ1wiLCAwLCAwKTtcbiAgbGV0IHBpeGVscyA9IGN0eC5nZXRJbWFnZURhdGEoMCwgMCwgREVGQVVMVF9GT05UX1NJWkUsIERFRkFVTFRfRk9OVF9TSVpFKS5kYXRhO1xuICBkZXNjZW50ID0gMDtcbiAgZm9yIChsZXQgaSA9IHBpeGVscy5sZW5ndGggLSAxIC0gMzsgaSA+PSAwOyBpIC09IDQpIHtcbiAgICBpZiAocGl4ZWxzW2ldID4gMCkge1xuICAgICAgZGVzY2VudCA9IE1hdGguY2VpbChpIC8gNCAvIERFRkFVTFRfRk9OVF9TSVpFKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICBjdHguY2xlYXJSZWN0KDAsIDAsIERFRkFVTFRfRk9OVF9TSVpFLCBERUZBVUxUX0ZPTlRfU0laRSk7XG4gIGN0eC5zdHJva2VUZXh0KFwiQVwiLCAwLCBERUZBVUxUX0ZPTlRfU0laRSk7XG4gIHBpeGVscyA9IGN0eC5nZXRJbWFnZURhdGEoMCwgMCwgREVGQVVMVF9GT05UX1NJWkUsIERFRkFVTFRfRk9OVF9TSVpFKS5kYXRhO1xuICBhc2NlbnQgPSAwO1xuICBmb3IgKGxldCBpID0gMCwgaWkgPSBwaXhlbHMubGVuZ3RoOyBpIDwgaWk7IGkgKz0gNCkge1xuICAgIGlmIChwaXhlbHNbaV0gPiAwKSB7XG4gICAgICBhc2NlbnQgPSBERUZBVUxUX0ZPTlRfU0laRSAtIE1hdGguZmxvb3IoaSAvIDQgLyBERUZBVUxUX0ZPTlRfU0laRSk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgY3R4LmNhbnZhcy53aWR0aCA9IGN0eC5jYW52YXMuaGVpZ2h0ID0gMDtcbiAgaWYgKGFzY2VudCkge1xuICAgIGNvbnN0IHJhdGlvID0gYXNjZW50IC8gKGFzY2VudCArIGRlc2NlbnQpO1xuICAgIGFzY2VudENhY2hlLnNldChmb250RmFtaWx5LCByYXRpbyk7XG4gICAgcmV0dXJuIHJhdGlvO1xuICB9XG4gIGFzY2VudENhY2hlLnNldChmb250RmFtaWx5LCBERUZBVUxUX0ZPTlRfQVNDRU5UKTtcbiAgcmV0dXJuIERFRkFVTFRfRk9OVF9BU0NFTlQ7XG59XG5mdW5jdGlvbiBhcHBlbmRUZXh0KHRhc2ssIGdlb20sIHN0eWxlcykge1xuICBjb25zdCB0ZXh0RGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XG4gIGNvbnN0IHRleHREaXZQcm9wZXJ0aWVzID0ge1xuICAgIGFuZ2xlOiAwLFxuICAgIGNhbnZhc1dpZHRoOiAwLFxuICAgIGhhc1RleHQ6IGdlb20uc3RyICE9PSBcIlwiLFxuICAgIGhhc0VPTDogZ2VvbS5oYXNFT0wsXG4gICAgZm9udFNpemU6IDBcbiAgfTtcbiAgdGFzay5fdGV4dERpdnMucHVzaCh0ZXh0RGl2KTtcbiAgY29uc3QgdHggPSBfc2hhcmVkX3V0aWxfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5VdGlsLnRyYW5zZm9ybSh0YXNrLl90cmFuc2Zvcm0sIGdlb20udHJhbnNmb3JtKTtcbiAgbGV0IGFuZ2xlID0gTWF0aC5hdGFuMih0eFsxXSwgdHhbMF0pO1xuICBjb25zdCBzdHlsZSA9IHN0eWxlc1tnZW9tLmZvbnROYW1lXTtcbiAgaWYgKHN0eWxlLnZlcnRpY2FsKSB7XG4gICAgYW5nbGUgKz0gTWF0aC5QSSAvIDI7XG4gIH1cbiAgY29uc3QgZm9udEZhbWlseSA9IHRhc2suX2ZvbnRJbnNwZWN0b3JFbmFibGVkICYmIHN0eWxlLmZvbnRTdWJzdGl0dXRpb24gfHwgc3R5bGUuZm9udEZhbWlseTtcbiAgY29uc3QgZm9udEhlaWdodCA9IE1hdGguaHlwb3QodHhbMl0sIHR4WzNdKTtcbiAgY29uc3QgZm9udEFzY2VudCA9IGZvbnRIZWlnaHQgKiBnZXRBc2NlbnQoZm9udEZhbWlseSwgdGFzay5faXNPZmZzY3JlZW5DYW52YXNTdXBwb3J0ZWQpO1xuICBsZXQgbGVmdCwgdG9wO1xuICBpZiAoYW5nbGUgPT09IDApIHtcbiAgICBsZWZ0ID0gdHhbNF07XG4gICAgdG9wID0gdHhbNV0gLSBmb250QXNjZW50O1xuICB9IGVsc2Uge1xuICAgIGxlZnQgPSB0eFs0XSArIGZvbnRBc2NlbnQgKiBNYXRoLnNpbihhbmdsZSk7XG4gICAgdG9wID0gdHhbNV0gLSBmb250QXNjZW50ICogTWF0aC5jb3MoYW5nbGUpO1xuICB9XG4gIGNvbnN0IHNjYWxlRmFjdG9yU3RyID0gXCJjYWxjKHZhcigtLXNjYWxlLWZhY3RvcikqXCI7XG4gIGNvbnN0IGRpdlN0eWxlID0gdGV4dERpdi5zdHlsZTtcbiAgaWYgKHRhc2suX2NvbnRhaW5lciA9PT0gdGFzay5fcm9vdENvbnRhaW5lcikge1xuICAgIGRpdlN0eWxlLmxlZnQgPSBgJHsoMTAwICogbGVmdCAvIHRhc2suX3BhZ2VXaWR0aCkudG9GaXhlZCgyKX0lYDtcbiAgICBkaXZTdHlsZS50b3AgPSBgJHsoMTAwICogdG9wIC8gdGFzay5fcGFnZUhlaWdodCkudG9GaXhlZCgyKX0lYDtcbiAgfSBlbHNlIHtcbiAgICBkaXZTdHlsZS5sZWZ0ID0gYCR7c2NhbGVGYWN0b3JTdHJ9JHtsZWZ0LnRvRml4ZWQoMil9cHgpYDtcbiAgICBkaXZTdHlsZS50b3AgPSBgJHtzY2FsZUZhY3RvclN0cn0ke3RvcC50b0ZpeGVkKDIpfXB4KWA7XG4gIH1cbiAgZGl2U3R5bGUuZm9udFNpemUgPSBgJHtzY2FsZUZhY3RvclN0cn0ke2ZvbnRIZWlnaHQudG9GaXhlZCgyKX1weClgO1xuICBkaXZTdHlsZS5mb250RmFtaWx5ID0gZm9udEZhbWlseTtcbiAgdGV4dERpdlByb3BlcnRpZXMuZm9udFNpemUgPSBmb250SGVpZ2h0O1xuICB0ZXh0RGl2LnNldEF0dHJpYnV0ZShcInJvbGVcIiwgXCJwcmVzZW50YXRpb25cIik7XG4gIHRleHREaXYudGV4dENvbnRlbnQgPSBnZW9tLnN0cjtcbiAgdGV4dERpdi5kaXIgPSBnZW9tLmRpcjtcbiAgaWYgKHRhc2suX2ZvbnRJbnNwZWN0b3JFbmFibGVkKSB7XG4gICAgdGV4dERpdi5kYXRhc2V0LmZvbnROYW1lID0gc3R5bGUuZm9udFN1YnN0aXR1dGlvbkxvYWRlZE5hbWUgfHwgZ2VvbS5mb250TmFtZTtcbiAgfVxuICBpZiAoYW5nbGUgIT09IDApIHtcbiAgICB0ZXh0RGl2UHJvcGVydGllcy5hbmdsZSA9IGFuZ2xlICogKDE4MCAvIE1hdGguUEkpO1xuICB9XG4gIGxldCBzaG91bGRTY2FsZVRleHQgPSBmYWxzZTtcbiAgaWYgKGdlb20uc3RyLmxlbmd0aCA+IDEpIHtcbiAgICBzaG91bGRTY2FsZVRleHQgPSB0cnVlO1xuICB9IGVsc2UgaWYgKGdlb20uc3RyICE9PSBcIiBcIiAmJiBnZW9tLnRyYW5zZm9ybVswXSAhPT0gZ2VvbS50cmFuc2Zvcm1bM10pIHtcbiAgICBjb25zdCBhYnNTY2FsZVggPSBNYXRoLmFicyhnZW9tLnRyYW5zZm9ybVswXSksXG4gICAgICBhYnNTY2FsZVkgPSBNYXRoLmFicyhnZW9tLnRyYW5zZm9ybVszXSk7XG4gICAgaWYgKGFic1NjYWxlWCAhPT0gYWJzU2NhbGVZICYmIE1hdGgubWF4KGFic1NjYWxlWCwgYWJzU2NhbGVZKSAvIE1hdGgubWluKGFic1NjYWxlWCwgYWJzU2NhbGVZKSA+IDEuNSkge1xuICAgICAgc2hvdWxkU2NhbGVUZXh0ID0gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgaWYgKHNob3VsZFNjYWxlVGV4dCkge1xuICAgIHRleHREaXZQcm9wZXJ0aWVzLmNhbnZhc1dpZHRoID0gc3R5bGUudmVydGljYWwgPyBnZW9tLmhlaWdodCA6IGdlb20ud2lkdGg7XG4gIH1cbiAgdGFzay5fdGV4dERpdlByb3BlcnRpZXMuc2V0KHRleHREaXYsIHRleHREaXZQcm9wZXJ0aWVzKTtcbiAgaWYgKHRhc2suX2lzUmVhZGFibGVTdHJlYW0pIHtcbiAgICB0YXNrLl9sYXlvdXRUZXh0KHRleHREaXYpO1xuICB9XG59XG5mdW5jdGlvbiBsYXlvdXQocGFyYW1zKSB7XG4gIGNvbnN0IHtcbiAgICBkaXYsXG4gICAgc2NhbGUsXG4gICAgcHJvcGVydGllcyxcbiAgICBjdHgsXG4gICAgcHJldkZvbnRTaXplLFxuICAgIHByZXZGb250RmFtaWx5XG4gIH0gPSBwYXJhbXM7XG4gIGNvbnN0IHtcbiAgICBzdHlsZVxuICB9ID0gZGl2O1xuICBsZXQgdHJhbnNmb3JtID0gXCJcIjtcbiAgaWYgKHByb3BlcnRpZXMuY2FudmFzV2lkdGggIT09IDAgJiYgcHJvcGVydGllcy5oYXNUZXh0KSB7XG4gICAgY29uc3Qge1xuICAgICAgZm9udEZhbWlseVxuICAgIH0gPSBzdHlsZTtcbiAgICBjb25zdCB7XG4gICAgICBjYW52YXNXaWR0aCxcbiAgICAgIGZvbnRTaXplXG4gICAgfSA9IHByb3BlcnRpZXM7XG4gICAgaWYgKHByZXZGb250U2l6ZSAhPT0gZm9udFNpemUgfHwgcHJldkZvbnRGYW1pbHkgIT09IGZvbnRGYW1pbHkpIHtcbiAgICAgIGN0eC5mb250ID0gYCR7Zm9udFNpemUgKiBzY2FsZX1weCAke2ZvbnRGYW1pbHl9YDtcbiAgICAgIHBhcmFtcy5wcmV2Rm9udFNpemUgPSBmb250U2l6ZTtcbiAgICAgIHBhcmFtcy5wcmV2Rm9udEZhbWlseSA9IGZvbnRGYW1pbHk7XG4gICAgfVxuICAgIGNvbnN0IHtcbiAgICAgIHdpZHRoXG4gICAgfSA9IGN0eC5tZWFzdXJlVGV4dChkaXYudGV4dENvbnRlbnQpO1xuICAgIGlmICh3aWR0aCA+IDApIHtcbiAgICAgIHRyYW5zZm9ybSA9IGBzY2FsZVgoJHtjYW52YXNXaWR0aCAqIHNjYWxlIC8gd2lkdGh9KWA7XG4gICAgfVxuICB9XG4gIGlmIChwcm9wZXJ0aWVzLmFuZ2xlICE9PSAwKSB7XG4gICAgdHJhbnNmb3JtID0gYHJvdGF0ZSgke3Byb3BlcnRpZXMuYW5nbGV9ZGVnKSAke3RyYW5zZm9ybX1gO1xuICB9XG4gIGlmICh0cmFuc2Zvcm0ubGVuZ3RoID4gMCkge1xuICAgIHN0eWxlLnRyYW5zZm9ybSA9IHRyYW5zZm9ybTtcbiAgfVxufVxuZnVuY3Rpb24gcmVuZGVyKHRhc2spIHtcbiAgaWYgKHRhc2suX2NhbmNlbGVkKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IHRleHREaXZzID0gdGFzay5fdGV4dERpdnM7XG4gIGNvbnN0IGNhcGFiaWxpdHkgPSB0YXNrLl9jYXBhYmlsaXR5O1xuICBjb25zdCB0ZXh0RGl2c0xlbmd0aCA9IHRleHREaXZzLmxlbmd0aDtcbiAgaWYgKHRleHREaXZzTGVuZ3RoID4gTUFYX1RFWFRfRElWU19UT19SRU5ERVIpIHtcbiAgICBjYXBhYmlsaXR5LnJlc29sdmUoKTtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKCF0YXNrLl9pc1JlYWRhYmxlU3RyZWFtKSB7XG4gICAgZm9yIChjb25zdCB0ZXh0RGl2IG9mIHRleHREaXZzKSB7XG4gICAgICB0YXNrLl9sYXlvdXRUZXh0KHRleHREaXYpO1xuICAgIH1cbiAgfVxuICBjYXBhYmlsaXR5LnJlc29sdmUoKTtcbn1cbmNsYXNzIFRleHRMYXllclJlbmRlclRhc2sge1xuICBjb25zdHJ1Y3Rvcih7XG4gICAgdGV4dENvbnRlbnRTb3VyY2UsXG4gICAgY29udGFpbmVyLFxuICAgIHZpZXdwb3J0LFxuICAgIHRleHREaXZzLFxuICAgIHRleHREaXZQcm9wZXJ0aWVzLFxuICAgIHRleHRDb250ZW50SXRlbXNTdHIsXG4gICAgaXNPZmZzY3JlZW5DYW52YXNTdXBwb3J0ZWRcbiAgfSkge1xuICAgIHRoaXMuX3RleHRDb250ZW50U291cmNlID0gdGV4dENvbnRlbnRTb3VyY2U7XG4gICAgdGhpcy5faXNSZWFkYWJsZVN0cmVhbSA9IHRleHRDb250ZW50U291cmNlIGluc3RhbmNlb2YgUmVhZGFibGVTdHJlYW07XG4gICAgdGhpcy5fY29udGFpbmVyID0gdGhpcy5fcm9vdENvbnRhaW5lciA9IGNvbnRhaW5lcjtcbiAgICB0aGlzLl90ZXh0RGl2cyA9IHRleHREaXZzIHx8IFtdO1xuICAgIHRoaXMuX3RleHRDb250ZW50SXRlbXNTdHIgPSB0ZXh0Q29udGVudEl0ZW1zU3RyIHx8IFtdO1xuICAgIHRoaXMuX2lzT2Zmc2NyZWVuQ2FudmFzU3VwcG9ydGVkID0gaXNPZmZzY3JlZW5DYW52YXNTdXBwb3J0ZWQ7XG4gICAgdGhpcy5fZm9udEluc3BlY3RvckVuYWJsZWQgPSAhIWdsb2JhbFRoaXMuRm9udEluc3BlY3Rvcj8uZW5hYmxlZDtcbiAgICB0aGlzLl9yZWFkZXIgPSBudWxsO1xuICAgIHRoaXMuX3RleHREaXZQcm9wZXJ0aWVzID0gdGV4dERpdlByb3BlcnRpZXMgfHwgbmV3IFdlYWtNYXAoKTtcbiAgICB0aGlzLl9jYW5jZWxlZCA9IGZhbHNlO1xuICAgIHRoaXMuX2NhcGFiaWxpdHkgPSBuZXcgX3NoYXJlZF91dGlsX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uUHJvbWlzZUNhcGFiaWxpdHkoKTtcbiAgICB0aGlzLl9sYXlvdXRUZXh0UGFyYW1zID0ge1xuICAgICAgcHJldkZvbnRTaXplOiBudWxsLFxuICAgICAgcHJldkZvbnRGYW1pbHk6IG51bGwsXG4gICAgICBkaXY6IG51bGwsXG4gICAgICBzY2FsZTogdmlld3BvcnQuc2NhbGUgKiAoZ2xvYmFsVGhpcy5kZXZpY2VQaXhlbFJhdGlvIHx8IDEpLFxuICAgICAgcHJvcGVydGllczogbnVsbCxcbiAgICAgIGN0eDogZ2V0Q3R4KDAsIGlzT2Zmc2NyZWVuQ2FudmFzU3VwcG9ydGVkKVxuICAgIH07XG4gICAgY29uc3Qge1xuICAgICAgcGFnZVdpZHRoLFxuICAgICAgcGFnZUhlaWdodCxcbiAgICAgIHBhZ2VYLFxuICAgICAgcGFnZVlcbiAgICB9ID0gdmlld3BvcnQucmF3RGltcztcbiAgICB0aGlzLl90cmFuc2Zvcm0gPSBbMSwgMCwgMCwgLTEsIC1wYWdlWCwgcGFnZVkgKyBwYWdlSGVpZ2h0XTtcbiAgICB0aGlzLl9wYWdlV2lkdGggPSBwYWdlV2lkdGg7XG4gICAgdGhpcy5fcGFnZUhlaWdodCA9IHBhZ2VIZWlnaHQ7XG4gICAgKDAsX2Rpc3BsYXlfdXRpbHNfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5zZXRMYXllckRpbWVuc2lvbnMpKGNvbnRhaW5lciwgdmlld3BvcnQpO1xuICAgIHRoaXMuX2NhcGFiaWxpdHkucHJvbWlzZS5maW5hbGx5KCgpID0+IHtcbiAgICAgIHRoaXMuX2xheW91dFRleHRQYXJhbXMgPSBudWxsO1xuICAgIH0pLmNhdGNoKCgpID0+IHt9KTtcbiAgfVxuICBnZXQgcHJvbWlzZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9XG4gIGNhbmNlbCgpIHtcbiAgICB0aGlzLl9jYW5jZWxlZCA9IHRydWU7XG4gICAgaWYgKHRoaXMuX3JlYWRlcikge1xuICAgICAgdGhpcy5fcmVhZGVyLmNhbmNlbChuZXcgX3NoYXJlZF91dGlsX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uQWJvcnRFeGNlcHRpb24oXCJUZXh0TGF5ZXIgdGFzayBjYW5jZWxsZWQuXCIpKS5jYXRjaCgoKSA9PiB7fSk7XG4gICAgICB0aGlzLl9yZWFkZXIgPSBudWxsO1xuICAgIH1cbiAgICB0aGlzLl9jYXBhYmlsaXR5LnJlamVjdChuZXcgX3NoYXJlZF91dGlsX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uQWJvcnRFeGNlcHRpb24oXCJUZXh0TGF5ZXIgdGFzayBjYW5jZWxsZWQuXCIpKTtcbiAgfVxuICBfcHJvY2Vzc0l0ZW1zKGl0ZW1zLCBzdHlsZUNhY2hlKSB7XG4gICAgZm9yIChjb25zdCBpdGVtIG9mIGl0ZW1zKSB7XG4gICAgICBpZiAoaXRlbS5zdHIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAoaXRlbS50eXBlID09PSBcImJlZ2luTWFya2VkQ29udGVudFByb3BzXCIgfHwgaXRlbS50eXBlID09PSBcImJlZ2luTWFya2VkQ29udGVudFwiKSB7XG4gICAgICAgICAgY29uc3QgcGFyZW50ID0gdGhpcy5fY29udGFpbmVyO1xuICAgICAgICAgIHRoaXMuX2NvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO1xuICAgICAgICAgIHRoaXMuX2NvbnRhaW5lci5jbGFzc0xpc3QuYWRkKFwibWFya2VkQ29udGVudFwiKTtcbiAgICAgICAgICBpZiAoaXRlbS5pZCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5fY29udGFpbmVyLnNldEF0dHJpYnV0ZShcImlkXCIsIGAke2l0ZW0uaWR9YCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHBhcmVudC5hcHBlbmQodGhpcy5fY29udGFpbmVyKTtcbiAgICAgICAgfSBlbHNlIGlmIChpdGVtLnR5cGUgPT09IFwiZW5kTWFya2VkQ29udGVudFwiKSB7XG4gICAgICAgICAgdGhpcy5fY29udGFpbmVyID0gdGhpcy5fY29udGFpbmVyLnBhcmVudE5vZGU7XG4gICAgICAgIH1cbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICB0aGlzLl90ZXh0Q29udGVudEl0ZW1zU3RyLnB1c2goaXRlbS5zdHIpO1xuICAgICAgYXBwZW5kVGV4dCh0aGlzLCBpdGVtLCBzdHlsZUNhY2hlKTtcbiAgICB9XG4gIH1cbiAgX2xheW91dFRleHQodGV4dERpdikge1xuICAgIGNvbnN0IHRleHREaXZQcm9wZXJ0aWVzID0gdGhpcy5fbGF5b3V0VGV4dFBhcmFtcy5wcm9wZXJ0aWVzID0gdGhpcy5fdGV4dERpdlByb3BlcnRpZXMuZ2V0KHRleHREaXYpO1xuICAgIHRoaXMuX2xheW91dFRleHRQYXJhbXMuZGl2ID0gdGV4dERpdjtcbiAgICBsYXlvdXQodGhpcy5fbGF5b3V0VGV4dFBhcmFtcyk7XG4gICAgaWYgKHRleHREaXZQcm9wZXJ0aWVzLmhhc1RleHQpIHtcbiAgICAgIHRoaXMuX2NvbnRhaW5lci5hcHBlbmQodGV4dERpdik7XG4gICAgfVxuICAgIGlmICh0ZXh0RGl2UHJvcGVydGllcy5oYXNFT0wpIHtcbiAgICAgIGNvbnN0IGJyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJyXCIpO1xuICAgICAgYnIuc2V0QXR0cmlidXRlKFwicm9sZVwiLCBcInByZXNlbnRhdGlvblwiKTtcbiAgICAgIHRoaXMuX2NvbnRhaW5lci5hcHBlbmQoYnIpO1xuICAgIH1cbiAgfVxuICBfcmVuZGVyKCkge1xuICAgIGNvbnN0IGNhcGFiaWxpdHkgPSBuZXcgX3NoYXJlZF91dGlsX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uUHJvbWlzZUNhcGFiaWxpdHkoKTtcbiAgICBsZXQgc3R5bGVDYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgaWYgKHRoaXMuX2lzUmVhZGFibGVTdHJlYW0pIHtcbiAgICAgIGNvbnN0IHB1bXAgPSAoKSA9PiB7XG4gICAgICAgIHRoaXMuX3JlYWRlci5yZWFkKCkudGhlbigoe1xuICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgIGRvbmVcbiAgICAgICAgfSkgPT4ge1xuICAgICAgICAgIGlmIChkb25lKSB7XG4gICAgICAgICAgICBjYXBhYmlsaXR5LnJlc29sdmUoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgT2JqZWN0LmFzc2lnbihzdHlsZUNhY2hlLCB2YWx1ZS5zdHlsZXMpO1xuICAgICAgICAgIHRoaXMuX3Byb2Nlc3NJdGVtcyh2YWx1ZS5pdGVtcywgc3R5bGVDYWNoZSk7XG4gICAgICAgICAgcHVtcCgpO1xuICAgICAgICB9LCBjYXBhYmlsaXR5LnJlamVjdCk7XG4gICAgICB9O1xuICAgICAgdGhpcy5fcmVhZGVyID0gdGhpcy5fdGV4dENvbnRlbnRTb3VyY2UuZ2V0UmVhZGVyKCk7XG4gICAgICBwdW1wKCk7XG4gICAgfSBlbHNlIGlmICh0aGlzLl90ZXh0Q29udGVudFNvdXJjZSkge1xuICAgICAgY29uc3Qge1xuICAgICAgICBpdGVtcyxcbiAgICAgICAgc3R5bGVzXG4gICAgICB9ID0gdGhpcy5fdGV4dENvbnRlbnRTb3VyY2U7XG4gICAgICB0aGlzLl9wcm9jZXNzSXRlbXMoaXRlbXMsIHN0eWxlcyk7XG4gICAgICBjYXBhYmlsaXR5LnJlc29sdmUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyBcInRleHRDb250ZW50U291cmNlXCIgcGFyYW1ldGVyIHNwZWNpZmllZC4nKTtcbiAgICB9XG4gICAgY2FwYWJpbGl0eS5wcm9taXNlLnRoZW4oKCkgPT4ge1xuICAgICAgc3R5bGVDYWNoZSA9IG51bGw7XG4gICAgICByZW5kZXIodGhpcyk7XG4gICAgfSwgdGhpcy5fY2FwYWJpbGl0eS5yZWplY3QpO1xuICB9XG59XG5mdW5jdGlvbiByZW5kZXJUZXh0TGF5ZXIocGFyYW1zKSB7XG4gIGNvbnN0IHRhc2sgPSBuZXcgVGV4dExheWVyUmVuZGVyVGFzayhwYXJhbXMpO1xuICB0YXNrLl9yZW5kZXIoKTtcbiAgcmV0dXJuIHRhc2s7XG59XG5mdW5jdGlvbiB1cGRhdGVUZXh0TGF5ZXIoe1xuICBjb250YWluZXIsXG4gIHZpZXdwb3J0LFxuICB0ZXh0RGl2cyxcbiAgdGV4dERpdlByb3BlcnRpZXMsXG4gIGlzT2Zmc2NyZWVuQ2FudmFzU3VwcG9ydGVkLFxuICBtdXN0Um90YXRlID0gdHJ1ZSxcbiAgbXVzdFJlc2NhbGUgPSB0cnVlXG59KSB7XG4gIGlmIChtdXN0Um90YXRlKSB7XG4gICAgKDAsX2Rpc3BsYXlfdXRpbHNfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5zZXRMYXllckRpbWVuc2lvbnMpKGNvbnRhaW5lciwge1xuICAgICAgcm90YXRpb246IHZpZXdwb3J0LnJvdGF0aW9uXG4gICAgfSk7XG4gIH1cbiAgaWYgKG11c3RSZXNjYWxlKSB7XG4gICAgY29uc3QgY3R4ID0gZ2V0Q3R4KDAsIGlzT2Zmc2NyZWVuQ2FudmFzU3VwcG9ydGVkKTtcbiAgICBjb25zdCBzY2FsZSA9IHZpZXdwb3J0LnNjYWxlICogKGdsb2JhbFRoaXMuZGV2aWNlUGl4ZWxSYXRpbyB8fCAxKTtcbiAgICBjb25zdCBwYXJhbXMgPSB7XG4gICAgICBwcmV2Rm9udFNpemU6IG51bGwsXG4gICAgICBwcmV2Rm9udEZhbWlseTogbnVsbCxcbiAgICAgIGRpdjogbnVsbCxcbiAgICAgIHNjYWxlLFxuICAgICAgcHJvcGVydGllczogbnVsbCxcbiAgICAgIGN0eFxuICAgIH07XG4gICAgZm9yIChjb25zdCBkaXYgb2YgdGV4dERpdnMpIHtcbiAgICAgIHBhcmFtcy5wcm9wZXJ0aWVzID0gdGV4dERpdlByb3BlcnRpZXMuZ2V0KGRpdik7XG4gICAgICBwYXJhbXMuZGl2ID0gZGl2O1xuICAgICAgbGF5b3V0KHBhcmFtcyk7XG4gICAgfVxuICB9XG59XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDkyOlxuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX19fd2VicGFja19tb2R1bGVfXywgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG4vKiBoYXJtb255IGV4cG9ydCAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywge1xuLyogaGFybW9ueSBleHBvcnQgKi8gICBQREZEYXRhVHJhbnNwb3J0U3RyZWFtOiAoKSA9PiAoLyogYmluZGluZyAqLyBQREZEYXRhVHJhbnNwb3J0U3RyZWFtKVxuLyogaGFybW9ueSBleHBvcnQgKi8gfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX3NoYXJlZF91dGlsX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI2Nik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX2Rpc3BsYXlfdXRpbHNfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyA9IF9fd2VicGFja19yZXF1aXJlX18oNDczKTtcblxuXG5jbGFzcyBQREZEYXRhVHJhbnNwb3J0U3RyZWFtIHtcbiAgY29uc3RydWN0b3Ioe1xuICAgIGxlbmd0aCxcbiAgICBpbml0aWFsRGF0YSxcbiAgICBwcm9ncmVzc2l2ZURvbmUgPSBmYWxzZSxcbiAgICBjb250ZW50RGlzcG9zaXRpb25GaWxlbmFtZSA9IG51bGwsXG4gICAgZGlzYWJsZVJhbmdlID0gZmFsc2UsXG4gICAgZGlzYWJsZVN0cmVhbSA9IGZhbHNlXG4gIH0sIHBkZkRhdGFSYW5nZVRyYW5zcG9ydCkge1xuICAgICgwLF9zaGFyZWRfdXRpbF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLmFzc2VydCkocGRmRGF0YVJhbmdlVHJhbnNwb3J0LCAnUERGRGF0YVRyYW5zcG9ydFN0cmVhbSAtIG1pc3NpbmcgcmVxdWlyZWQgXCJwZGZEYXRhUmFuZ2VUcmFuc3BvcnRcIiBhcmd1bWVudC4nKTtcbiAgICB0aGlzLl9xdWV1ZWRDaHVua3MgPSBbXTtcbiAgICB0aGlzLl9wcm9ncmVzc2l2ZURvbmUgPSBwcm9ncmVzc2l2ZURvbmU7XG4gICAgdGhpcy5fY29udGVudERpc3Bvc2l0aW9uRmlsZW5hbWUgPSBjb250ZW50RGlzcG9zaXRpb25GaWxlbmFtZTtcbiAgICBpZiAoaW5pdGlhbERhdGE/Lmxlbmd0aCA+IDApIHtcbiAgICAgIGNvbnN0IGJ1ZmZlciA9IGluaXRpYWxEYXRhIGluc3RhbmNlb2YgVWludDhBcnJheSAmJiBpbml0aWFsRGF0YS5ieXRlTGVuZ3RoID09PSBpbml0aWFsRGF0YS5idWZmZXIuYnl0ZUxlbmd0aCA/IGluaXRpYWxEYXRhLmJ1ZmZlciA6IG5ldyBVaW50OEFycmF5KGluaXRpYWxEYXRhKS5idWZmZXI7XG4gICAgICB0aGlzLl9xdWV1ZWRDaHVua3MucHVzaChidWZmZXIpO1xuICAgIH1cbiAgICB0aGlzLl9wZGZEYXRhUmFuZ2VUcmFuc3BvcnQgPSBwZGZEYXRhUmFuZ2VUcmFuc3BvcnQ7XG4gICAgdGhpcy5faXNTdHJlYW1pbmdTdXBwb3J0ZWQgPSAhZGlzYWJsZVN0cmVhbTtcbiAgICB0aGlzLl9pc1JhbmdlU3VwcG9ydGVkID0gIWRpc2FibGVSYW5nZTtcbiAgICB0aGlzLl9jb250ZW50TGVuZ3RoID0gbGVuZ3RoO1xuICAgIHRoaXMuX2Z1bGxSZXF1ZXN0UmVhZGVyID0gbnVsbDtcbiAgICB0aGlzLl9yYW5nZVJlYWRlcnMgPSBbXTtcbiAgICB0aGlzLl9wZGZEYXRhUmFuZ2VUcmFuc3BvcnQuYWRkUmFuZ2VMaXN0ZW5lcigoYmVnaW4sIGNodW5rKSA9PiB7XG4gICAgICB0aGlzLl9vblJlY2VpdmVEYXRhKHtcbiAgICAgICAgYmVnaW4sXG4gICAgICAgIGNodW5rXG4gICAgICB9KTtcbiAgICB9KTtcbiAgICB0aGlzLl9wZGZEYXRhUmFuZ2VUcmFuc3BvcnQuYWRkUHJvZ3Jlc3NMaXN0ZW5lcigobG9hZGVkLCB0b3RhbCkgPT4ge1xuICAgICAgdGhpcy5fb25Qcm9ncmVzcyh7XG4gICAgICAgIGxvYWRlZCxcbiAgICAgICAgdG90YWxcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHRoaXMuX3BkZkRhdGFSYW5nZVRyYW5zcG9ydC5hZGRQcm9ncmVzc2l2ZVJlYWRMaXN0ZW5lcihjaHVuayA9PiB7XG4gICAgICB0aGlzLl9vblJlY2VpdmVEYXRhKHtcbiAgICAgICAgY2h1bmtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHRoaXMuX3BkZkRhdGFSYW5nZVRyYW5zcG9ydC5hZGRQcm9ncmVzc2l2ZURvbmVMaXN0ZW5lcigoKSA9PiB7XG4gICAgICB0aGlzLl9vblByb2dyZXNzaXZlRG9uZSgpO1xuICAgIH0pO1xuICAgIHRoaXMuX3BkZkRhdGFSYW5nZVRyYW5zcG9ydC50cmFuc3BvcnRSZWFkeSgpO1xuICB9XG4gIF9vblJlY2VpdmVEYXRhKHtcbiAgICBiZWdpbixcbiAgICBjaHVua1xuICB9KSB7XG4gICAgY29uc3QgYnVmZmVyID0gY2h1bmsgaW5zdGFuY2VvZiBVaW50OEFycmF5ICYmIGNodW5rLmJ5dGVMZW5ndGggPT09IGNodW5rLmJ1ZmZlci5ieXRlTGVuZ3RoID8gY2h1bmsuYnVmZmVyIDogbmV3IFVpbnQ4QXJyYXkoY2h1bmspLmJ1ZmZlcjtcbiAgICBpZiAoYmVnaW4gPT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKHRoaXMuX2Z1bGxSZXF1ZXN0UmVhZGVyKSB7XG4gICAgICAgIHRoaXMuX2Z1bGxSZXF1ZXN0UmVhZGVyLl9lbnF1ZXVlKGJ1ZmZlcik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9xdWV1ZWRDaHVua3MucHVzaChidWZmZXIpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBmb3VuZCA9IHRoaXMuX3JhbmdlUmVhZGVycy5zb21lKGZ1bmN0aW9uIChyYW5nZVJlYWRlcikge1xuICAgICAgICBpZiAocmFuZ2VSZWFkZXIuX2JlZ2luICE9PSBiZWdpbikge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByYW5nZVJlYWRlci5fZW5xdWV1ZShidWZmZXIpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0pO1xuICAgICAgKDAsX3NoYXJlZF91dGlsX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uYXNzZXJ0KShmb3VuZCwgXCJfb25SZWNlaXZlRGF0YSAtIG5vIGBQREZEYXRhVHJhbnNwb3J0U3RyZWFtUmFuZ2VSZWFkZXJgIGluc3RhbmNlIGZvdW5kLlwiKTtcbiAgICB9XG4gIH1cbiAgZ2V0IF9wcm9ncmVzc2l2ZURhdGFMZW5ndGgoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2Z1bGxSZXF1ZXN0UmVhZGVyPy5fbG9hZGVkID8/IDA7XG4gIH1cbiAgX29uUHJvZ3Jlc3MoZXZ0KSB7XG4gICAgaWYgKGV2dC50b3RhbCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLl9yYW5nZVJlYWRlcnNbMF0/Lm9uUHJvZ3Jlc3M/Lih7XG4gICAgICAgIGxvYWRlZDogZXZ0LmxvYWRlZFxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2Z1bGxSZXF1ZXN0UmVhZGVyPy5vblByb2dyZXNzPy4oe1xuICAgICAgICBsb2FkZWQ6IGV2dC5sb2FkZWQsXG4gICAgICAgIHRvdGFsOiBldnQudG90YWxcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICBfb25Qcm9ncmVzc2l2ZURvbmUoKSB7XG4gICAgdGhpcy5fZnVsbFJlcXVlc3RSZWFkZXI/LnByb2dyZXNzaXZlRG9uZSgpO1xuICAgIHRoaXMuX3Byb2dyZXNzaXZlRG9uZSA9IHRydWU7XG4gIH1cbiAgX3JlbW92ZVJhbmdlUmVhZGVyKHJlYWRlcikge1xuICAgIGNvbnN0IGkgPSB0aGlzLl9yYW5nZVJlYWRlcnMuaW5kZXhPZihyZWFkZXIpO1xuICAgIGlmIChpID49IDApIHtcbiAgICAgIHRoaXMuX3JhbmdlUmVhZGVycy5zcGxpY2UoaSwgMSk7XG4gICAgfVxuICB9XG4gIGdldEZ1bGxSZWFkZXIoKSB7XG4gICAgKDAsX3NoYXJlZF91dGlsX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uYXNzZXJ0KSghdGhpcy5fZnVsbFJlcXVlc3RSZWFkZXIsIFwiUERGRGF0YVRyYW5zcG9ydFN0cmVhbS5nZXRGdWxsUmVhZGVyIGNhbiBvbmx5IGJlIGNhbGxlZCBvbmNlLlwiKTtcbiAgICBjb25zdCBxdWV1ZWRDaHVua3MgPSB0aGlzLl9xdWV1ZWRDaHVua3M7XG4gICAgdGhpcy5fcXVldWVkQ2h1bmtzID0gbnVsbDtcbiAgICByZXR1cm4gbmV3IFBERkRhdGFUcmFuc3BvcnRTdHJlYW1SZWFkZXIodGhpcywgcXVldWVkQ2h1bmtzLCB0aGlzLl9wcm9ncmVzc2l2ZURvbmUsIHRoaXMuX2NvbnRlbnREaXNwb3NpdGlvbkZpbGVuYW1lKTtcbiAgfVxuICBnZXRSYW5nZVJlYWRlcihiZWdpbiwgZW5kKSB7XG4gICAgaWYgKGVuZCA8PSB0aGlzLl9wcm9ncmVzc2l2ZURhdGFMZW5ndGgpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBjb25zdCByZWFkZXIgPSBuZXcgUERGRGF0YVRyYW5zcG9ydFN0cmVhbVJhbmdlUmVhZGVyKHRoaXMsIGJlZ2luLCBlbmQpO1xuICAgIHRoaXMuX3BkZkRhdGFSYW5nZVRyYW5zcG9ydC5yZXF1ZXN0RGF0YVJhbmdlKGJlZ2luLCBlbmQpO1xuICAgIHRoaXMuX3JhbmdlUmVhZGVycy5wdXNoKHJlYWRlcik7XG4gICAgcmV0dXJuIHJlYWRlcjtcbiAgfVxuICBjYW5jZWxBbGxSZXF1ZXN0cyhyZWFzb24pIHtcbiAgICB0aGlzLl9mdWxsUmVxdWVzdFJlYWRlcj8uY2FuY2VsKHJlYXNvbik7XG4gICAgZm9yIChjb25zdCByZWFkZXIgb2YgdGhpcy5fcmFuZ2VSZWFkZXJzLnNsaWNlKDApKSB7XG4gICAgICByZWFkZXIuY2FuY2VsKHJlYXNvbik7XG4gICAgfVxuICAgIHRoaXMuX3BkZkRhdGFSYW5nZVRyYW5zcG9ydC5hYm9ydCgpO1xuICB9XG59XG5jbGFzcyBQREZEYXRhVHJhbnNwb3J0U3RyZWFtUmVhZGVyIHtcbiAgY29uc3RydWN0b3Ioc3RyZWFtLCBxdWV1ZWRDaHVua3MsIHByb2dyZXNzaXZlRG9uZSA9IGZhbHNlLCBjb250ZW50RGlzcG9zaXRpb25GaWxlbmFtZSA9IG51bGwpIHtcbiAgICB0aGlzLl9zdHJlYW0gPSBzdHJlYW07XG4gICAgdGhpcy5fZG9uZSA9IHByb2dyZXNzaXZlRG9uZSB8fCBmYWxzZTtcbiAgICB0aGlzLl9maWxlbmFtZSA9ICgwLF9kaXNwbGF5X3V0aWxzX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uaXNQZGZGaWxlKShjb250ZW50RGlzcG9zaXRpb25GaWxlbmFtZSkgPyBjb250ZW50RGlzcG9zaXRpb25GaWxlbmFtZSA6IG51bGw7XG4gICAgdGhpcy5fcXVldWVkQ2h1bmtzID0gcXVldWVkQ2h1bmtzIHx8IFtdO1xuICAgIHRoaXMuX2xvYWRlZCA9IDA7XG4gICAgZm9yIChjb25zdCBjaHVuayBvZiB0aGlzLl9xdWV1ZWRDaHVua3MpIHtcbiAgICAgIHRoaXMuX2xvYWRlZCArPSBjaHVuay5ieXRlTGVuZ3RoO1xuICAgIH1cbiAgICB0aGlzLl9yZXF1ZXN0cyA9IFtdO1xuICAgIHRoaXMuX2hlYWRlcnNSZWFkeSA9IFByb21pc2UucmVzb2x2ZSgpO1xuICAgIHN0cmVhbS5fZnVsbFJlcXVlc3RSZWFkZXIgPSB0aGlzO1xuICAgIHRoaXMub25Qcm9ncmVzcyA9IG51bGw7XG4gIH1cbiAgX2VucXVldWUoY2h1bmspIHtcbiAgICBpZiAodGhpcy5fZG9uZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAodGhpcy5fcmVxdWVzdHMubGVuZ3RoID4gMCkge1xuICAgICAgY29uc3QgcmVxdWVzdENhcGFiaWxpdHkgPSB0aGlzLl9yZXF1ZXN0cy5zaGlmdCgpO1xuICAgICAgcmVxdWVzdENhcGFiaWxpdHkucmVzb2x2ZSh7XG4gICAgICAgIHZhbHVlOiBjaHVuayxcbiAgICAgICAgZG9uZTogZmFsc2VcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9xdWV1ZWRDaHVua3MucHVzaChjaHVuayk7XG4gICAgfVxuICAgIHRoaXMuX2xvYWRlZCArPSBjaHVuay5ieXRlTGVuZ3RoO1xuICB9XG4gIGdldCBoZWFkZXJzUmVhZHkoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2hlYWRlcnNSZWFkeTtcbiAgfVxuICBnZXQgZmlsZW5hbWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2ZpbGVuYW1lO1xuICB9XG4gIGdldCBpc1JhbmdlU3VwcG9ydGVkKCkge1xuICAgIHJldHVybiB0aGlzLl9zdHJlYW0uX2lzUmFuZ2VTdXBwb3J0ZWQ7XG4gIH1cbiAgZ2V0IGlzU3RyZWFtaW5nU3VwcG9ydGVkKCkge1xuICAgIHJldHVybiB0aGlzLl9zdHJlYW0uX2lzU3RyZWFtaW5nU3VwcG9ydGVkO1xuICB9XG4gIGdldCBjb250ZW50TGVuZ3RoKCkge1xuICAgIHJldHVybiB0aGlzLl9zdHJlYW0uX2NvbnRlbnRMZW5ndGg7XG4gIH1cbiAgYXN5bmMgcmVhZCgpIHtcbiAgICBpZiAodGhpcy5fcXVldWVkQ2h1bmtzLmxlbmd0aCA+IDApIHtcbiAgICAgIGNvbnN0IGNodW5rID0gdGhpcy5fcXVldWVkQ2h1bmtzLnNoaWZ0KCk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB2YWx1ZTogY2h1bmssXG4gICAgICAgIGRvbmU6IGZhbHNlXG4gICAgICB9O1xuICAgIH1cbiAgICBpZiAodGhpcy5fZG9uZSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdmFsdWU6IHVuZGVmaW5lZCxcbiAgICAgICAgZG9uZTogdHJ1ZVxuICAgICAgfTtcbiAgICB9XG4gICAgY29uc3QgcmVxdWVzdENhcGFiaWxpdHkgPSBuZXcgX3NoYXJlZF91dGlsX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uUHJvbWlzZUNhcGFiaWxpdHkoKTtcbiAgICB0aGlzLl9yZXF1ZXN0cy5wdXNoKHJlcXVlc3RDYXBhYmlsaXR5KTtcbiAgICByZXR1cm4gcmVxdWVzdENhcGFiaWxpdHkucHJvbWlzZTtcbiAgfVxuICBjYW5jZWwocmVhc29uKSB7XG4gICAgdGhpcy5fZG9uZSA9IHRydWU7XG4gICAgZm9yIChjb25zdCByZXF1ZXN0Q2FwYWJpbGl0eSBvZiB0aGlzLl9yZXF1ZXN0cykge1xuICAgICAgcmVxdWVzdENhcGFiaWxpdHkucmVzb2x2ZSh7XG4gICAgICAgIHZhbHVlOiB1bmRlZmluZWQsXG4gICAgICAgIGRvbmU6IHRydWVcbiAgICAgIH0pO1xuICAgIH1cbiAgICB0aGlzLl9yZXF1ZXN0cy5sZW5ndGggPSAwO1xuICB9XG4gIHByb2dyZXNzaXZlRG9uZSgpIHtcbiAgICBpZiAodGhpcy5fZG9uZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLl9kb25lID0gdHJ1ZTtcbiAgfVxufVxuY2xhc3MgUERGRGF0YVRyYW5zcG9ydFN0cmVhbVJhbmdlUmVhZGVyIHtcbiAgY29uc3RydWN0b3Ioc3RyZWFtLCBiZWdpbiwgZW5kKSB7XG4gICAgdGhpcy5fc3RyZWFtID0gc3RyZWFtO1xuICAgIHRoaXMuX2JlZ2luID0gYmVnaW47XG4gICAgdGhpcy5fZW5kID0gZW5kO1xuICAgIHRoaXMuX3F1ZXVlZENodW5rID0gbnVsbDtcbiAgICB0aGlzLl9yZXF1ZXN0cyA9IFtdO1xuICAgIHRoaXMuX2RvbmUgPSBmYWxzZTtcbiAgICB0aGlzLm9uUHJvZ3Jlc3MgPSBudWxsO1xuICB9XG4gIF9lbnF1ZXVlKGNodW5rKSB7XG4gICAgaWYgKHRoaXMuX2RvbmUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHRoaXMuX3JlcXVlc3RzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhpcy5fcXVldWVkQ2h1bmsgPSBjaHVuaztcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgcmVxdWVzdHNDYXBhYmlsaXR5ID0gdGhpcy5fcmVxdWVzdHMuc2hpZnQoKTtcbiAgICAgIHJlcXVlc3RzQ2FwYWJpbGl0eS5yZXNvbHZlKHtcbiAgICAgICAgdmFsdWU6IGNodW5rLFxuICAgICAgICBkb25lOiBmYWxzZVxuICAgICAgfSk7XG4gICAgICBmb3IgKGNvbnN0IHJlcXVlc3RDYXBhYmlsaXR5IG9mIHRoaXMuX3JlcXVlc3RzKSB7XG4gICAgICAgIHJlcXVlc3RDYXBhYmlsaXR5LnJlc29sdmUoe1xuICAgICAgICAgIHZhbHVlOiB1bmRlZmluZWQsXG4gICAgICAgICAgZG9uZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX3JlcXVlc3RzLmxlbmd0aCA9IDA7XG4gICAgfVxuICAgIHRoaXMuX2RvbmUgPSB0cnVlO1xuICAgIHRoaXMuX3N0cmVhbS5fcmVtb3ZlUmFuZ2VSZWFkZXIodGhpcyk7XG4gIH1cbiAgZ2V0IGlzU3RyZWFtaW5nU3VwcG9ydGVkKCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBhc3luYyByZWFkKCkge1xuICAgIGlmICh0aGlzLl9xdWV1ZWRDaHVuaykge1xuICAgICAgY29uc3QgY2h1bmsgPSB0aGlzLl9xdWV1ZWRDaHVuaztcbiAgICAgIHRoaXMuX3F1ZXVlZENodW5rID0gbnVsbDtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHZhbHVlOiBjaHVuayxcbiAgICAgICAgZG9uZTogZmFsc2VcbiAgICAgIH07XG4gICAgfVxuICAgIGlmICh0aGlzLl9kb25lKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB2YWx1ZTogdW5kZWZpbmVkLFxuICAgICAgICBkb25lOiB0cnVlXG4gICAgICB9O1xuICAgIH1cbiAgICBjb25zdCByZXF1ZXN0Q2FwYWJpbGl0eSA9IG5ldyBfc2hhcmVkX3V0aWxfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5Qcm9taXNlQ2FwYWJpbGl0eSgpO1xuICAgIHRoaXMuX3JlcXVlc3RzLnB1c2gocmVxdWVzdENhcGFiaWxpdHkpO1xuICAgIHJldHVybiByZXF1ZXN0Q2FwYWJpbGl0eS5wcm9taXNlO1xuICB9XG4gIGNhbmNlbChyZWFzb24pIHtcbiAgICB0aGlzLl9kb25lID0gdHJ1ZTtcbiAgICBmb3IgKGNvbnN0IHJlcXVlc3RDYXBhYmlsaXR5IG9mIHRoaXMuX3JlcXVlc3RzKSB7XG4gICAgICByZXF1ZXN0Q2FwYWJpbGl0eS5yZXNvbHZlKHtcbiAgICAgICAgdmFsdWU6IHVuZGVmaW5lZCxcbiAgICAgICAgZG9uZTogdHJ1ZVxuICAgICAgfSk7XG4gICAgfVxuICAgIHRoaXMuX3JlcXVlc3RzLmxlbmd0aCA9IDA7XG4gICAgdGhpcy5fc3RyZWFtLl9yZW1vdmVSYW5nZVJlYWRlcih0aGlzKTtcbiAgfVxufVxuXG5cbi8qKiovIH0pLFxuXG4vKioqLyAzNjg6XG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfX193ZWJwYWNrX21vZHVsZV9fLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cbi8qIGhhcm1vbnkgZXhwb3J0ICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCB7XG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIEdsb2JhbFdvcmtlck9wdGlvbnM6ICgpID0+ICgvKiBiaW5kaW5nICovIEdsb2JhbFdvcmtlck9wdGlvbnMpXG4vKiBoYXJtb255IGV4cG9ydCAqLyB9KTtcbmNvbnN0IEdsb2JhbFdvcmtlck9wdGlvbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuR2xvYmFsV29ya2VyT3B0aW9ucy53b3JrZXJQb3J0ID0gbnVsbDtcbkdsb2JhbFdvcmtlck9wdGlvbnMud29ya2VyU3JjID0gXCJcIjtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gMTYwOlxuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX19fd2VicGFja19tb2R1bGVfXywgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG4vKiBoYXJtb255IGV4cG9ydCAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywge1xuLyogaGFybW9ueSBleHBvcnQgKi8gICBYZmFMYXllcjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gWGZhTGF5ZXIpXG4vKiBoYXJtb255IGV4cG9ydCAqLyB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfeGZhX3RleHRfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyA9IF9fd2VicGFja19yZXF1aXJlX18oNTIxKTtcblxuY2xhc3MgWGZhTGF5ZXIge1xuICBzdGF0aWMgc2V0dXBTdG9yYWdlKGh0bWwsIGlkLCBlbGVtZW50LCBzdG9yYWdlLCBpbnRlbnQpIHtcbiAgICBjb25zdCBzdG9yZWREYXRhID0gc3RvcmFnZS5nZXRWYWx1ZShpZCwge1xuICAgICAgdmFsdWU6IG51bGxcbiAgICB9KTtcbiAgICBzd2l0Y2ggKGVsZW1lbnQubmFtZSkge1xuICAgICAgY2FzZSBcInRleHRhcmVhXCI6XG4gICAgICAgIGlmIChzdG9yZWREYXRhLnZhbHVlICE9PSBudWxsKSB7XG4gICAgICAgICAgaHRtbC50ZXh0Q29udGVudCA9IHN0b3JlZERhdGEudmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGludGVudCA9PT0gXCJwcmludFwiKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgaHRtbC5hZGRFdmVudExpc3RlbmVyKFwiaW5wdXRcIiwgZXZlbnQgPT4ge1xuICAgICAgICAgIHN0b3JhZ2Uuc2V0VmFsdWUoaWQsIHtcbiAgICAgICAgICAgIHZhbHVlOiBldmVudC50YXJnZXQudmFsdWVcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcImlucHV0XCI6XG4gICAgICAgIGlmIChlbGVtZW50LmF0dHJpYnV0ZXMudHlwZSA9PT0gXCJyYWRpb1wiIHx8IGVsZW1lbnQuYXR0cmlidXRlcy50eXBlID09PSBcImNoZWNrYm94XCIpIHtcbiAgICAgICAgICBpZiAoc3RvcmVkRGF0YS52YWx1ZSA9PT0gZWxlbWVudC5hdHRyaWJ1dGVzLnhmYU9uKSB7XG4gICAgICAgICAgICBodG1sLnNldEF0dHJpYnV0ZShcImNoZWNrZWRcIiwgdHJ1ZSk7XG4gICAgICAgICAgfSBlbHNlIGlmIChzdG9yZWREYXRhLnZhbHVlID09PSBlbGVtZW50LmF0dHJpYnV0ZXMueGZhT2ZmKSB7XG4gICAgICAgICAgICBodG1sLnJlbW92ZUF0dHJpYnV0ZShcImNoZWNrZWRcIik7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChpbnRlbnQgPT09IFwicHJpbnRcIikge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIGh0bWwuYWRkRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLCBldmVudCA9PiB7XG4gICAgICAgICAgICBzdG9yYWdlLnNldFZhbHVlKGlkLCB7XG4gICAgICAgICAgICAgIHZhbHVlOiBldmVudC50YXJnZXQuY2hlY2tlZCA/IGV2ZW50LnRhcmdldC5nZXRBdHRyaWJ1dGUoXCJ4ZmFPblwiKSA6IGV2ZW50LnRhcmdldC5nZXRBdHRyaWJ1dGUoXCJ4ZmFPZmZcIilcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChzdG9yZWREYXRhLnZhbHVlICE9PSBudWxsKSB7XG4gICAgICAgICAgICBodG1sLnNldEF0dHJpYnV0ZShcInZhbHVlXCIsIHN0b3JlZERhdGEudmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaW50ZW50ID09PSBcInByaW50XCIpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBodG1sLmFkZEV2ZW50TGlzdGVuZXIoXCJpbnB1dFwiLCBldmVudCA9PiB7XG4gICAgICAgICAgICBzdG9yYWdlLnNldFZhbHVlKGlkLCB7XG4gICAgICAgICAgICAgIHZhbHVlOiBldmVudC50YXJnZXQudmFsdWVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcInNlbGVjdFwiOlxuICAgICAgICBpZiAoc3RvcmVkRGF0YS52YWx1ZSAhPT0gbnVsbCkge1xuICAgICAgICAgIGh0bWwuc2V0QXR0cmlidXRlKFwidmFsdWVcIiwgc3RvcmVkRGF0YS52YWx1ZSk7XG4gICAgICAgICAgZm9yIChjb25zdCBvcHRpb24gb2YgZWxlbWVudC5jaGlsZHJlbikge1xuICAgICAgICAgICAgaWYgKG9wdGlvbi5hdHRyaWJ1dGVzLnZhbHVlID09PSBzdG9yZWREYXRhLnZhbHVlKSB7XG4gICAgICAgICAgICAgIG9wdGlvbi5hdHRyaWJ1dGVzLnNlbGVjdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAob3B0aW9uLmF0dHJpYnV0ZXMuaGFzT3duUHJvcGVydHkoXCJzZWxlY3RlZFwiKSkge1xuICAgICAgICAgICAgICBkZWxldGUgb3B0aW9uLmF0dHJpYnV0ZXMuc2VsZWN0ZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGh0bWwuYWRkRXZlbnRMaXN0ZW5lcihcImlucHV0XCIsIGV2ZW50ID0+IHtcbiAgICAgICAgICBjb25zdCBvcHRpb25zID0gZXZlbnQudGFyZ2V0Lm9wdGlvbnM7XG4gICAgICAgICAgY29uc3QgdmFsdWUgPSBvcHRpb25zLnNlbGVjdGVkSW5kZXggPT09IC0xID8gXCJcIiA6IG9wdGlvbnNbb3B0aW9ucy5zZWxlY3RlZEluZGV4XS52YWx1ZTtcbiAgICAgICAgICBzdG9yYWdlLnNldFZhbHVlKGlkLCB7XG4gICAgICAgICAgICB2YWx1ZVxuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHN0YXRpYyBzZXRBdHRyaWJ1dGVzKHtcbiAgICBodG1sLFxuICAgIGVsZW1lbnQsXG4gICAgc3RvcmFnZSA9IG51bGwsXG4gICAgaW50ZW50LFxuICAgIGxpbmtTZXJ2aWNlXG4gIH0pIHtcbiAgICBjb25zdCB7XG4gICAgICBhdHRyaWJ1dGVzXG4gICAgfSA9IGVsZW1lbnQ7XG4gICAgY29uc3QgaXNIVE1MQW5jaG9yRWxlbWVudCA9IGh0bWwgaW5zdGFuY2VvZiBIVE1MQW5jaG9yRWxlbWVudDtcbiAgICBpZiAoYXR0cmlidXRlcy50eXBlID09PSBcInJhZGlvXCIpIHtcbiAgICAgIGF0dHJpYnV0ZXMubmFtZSA9IGAke2F0dHJpYnV0ZXMubmFtZX0tJHtpbnRlbnR9YDtcbiAgICB9XG4gICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMoYXR0cmlidXRlcykpIHtcbiAgICAgIGlmICh2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgc3dpdGNoIChrZXkpIHtcbiAgICAgICAgY2FzZSBcImNsYXNzXCI6XG4gICAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCkge1xuICAgICAgICAgICAgaHRtbC5zZXRBdHRyaWJ1dGUoa2V5LCB2YWx1ZS5qb2luKFwiIFwiKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwiZGF0YUlkXCI6XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJpZFwiOlxuICAgICAgICAgIGh0bWwuc2V0QXR0cmlidXRlKFwiZGF0YS1lbGVtZW50LWlkXCIsIHZhbHVlKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcInN0eWxlXCI6XG4gICAgICAgICAgT2JqZWN0LmFzc2lnbihodG1sLnN0eWxlLCB2YWx1ZSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJ0ZXh0Q29udGVudFwiOlxuICAgICAgICAgIGh0bWwudGV4dENvbnRlbnQgPSB2YWx1ZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBpZiAoIWlzSFRNTEFuY2hvckVsZW1lbnQgfHwga2V5ICE9PSBcImhyZWZcIiAmJiBrZXkgIT09IFwibmV3V2luZG93XCIpIHtcbiAgICAgICAgICAgIGh0bWwuc2V0QXR0cmlidXRlKGtleSwgdmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlzSFRNTEFuY2hvckVsZW1lbnQpIHtcbiAgICAgIGxpbmtTZXJ2aWNlLmFkZExpbmtBdHRyaWJ1dGVzKGh0bWwsIGF0dHJpYnV0ZXMuaHJlZiwgYXR0cmlidXRlcy5uZXdXaW5kb3cpO1xuICAgIH1cbiAgICBpZiAoc3RvcmFnZSAmJiBhdHRyaWJ1dGVzLmRhdGFJZCkge1xuICAgICAgdGhpcy5zZXR1cFN0b3JhZ2UoaHRtbCwgYXR0cmlidXRlcy5kYXRhSWQsIGVsZW1lbnQsIHN0b3JhZ2UpO1xuICAgIH1cbiAgfVxuICBzdGF0aWMgcmVuZGVyKHBhcmFtZXRlcnMpIHtcbiAgICBjb25zdCBzdG9yYWdlID0gcGFyYW1ldGVycy5hbm5vdGF0aW9uU3RvcmFnZTtcbiAgICBjb25zdCBsaW5rU2VydmljZSA9IHBhcmFtZXRlcnMubGlua1NlcnZpY2U7XG4gICAgY29uc3Qgcm9vdCA9IHBhcmFtZXRlcnMueGZhSHRtbDtcbiAgICBjb25zdCBpbnRlbnQgPSBwYXJhbWV0ZXJzLmludGVudCB8fCBcImRpc3BsYXlcIjtcbiAgICBjb25zdCByb290SHRtbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQocm9vdC5uYW1lKTtcbiAgICBpZiAocm9vdC5hdHRyaWJ1dGVzKSB7XG4gICAgICB0aGlzLnNldEF0dHJpYnV0ZXMoe1xuICAgICAgICBodG1sOiByb290SHRtbCxcbiAgICAgICAgZWxlbWVudDogcm9vdCxcbiAgICAgICAgaW50ZW50LFxuICAgICAgICBsaW5rU2VydmljZVxuICAgICAgfSk7XG4gICAgfVxuICAgIGNvbnN0IGlzTm90Rm9yUmljaFRleHQgPSBpbnRlbnQgIT09IFwicmljaFRleHRcIjtcbiAgICBjb25zdCByb290RGl2ID0gcGFyYW1ldGVycy5kaXY7XG4gICAgcm9vdERpdi5hcHBlbmQocm9vdEh0bWwpO1xuICAgIGlmIChwYXJhbWV0ZXJzLnZpZXdwb3J0KSB7XG4gICAgICBjb25zdCB0cmFuc2Zvcm0gPSBgbWF0cml4KCR7cGFyYW1ldGVycy52aWV3cG9ydC50cmFuc2Zvcm0uam9pbihcIixcIil9KWA7XG4gICAgICByb290RGl2LnN0eWxlLnRyYW5zZm9ybSA9IHRyYW5zZm9ybTtcbiAgICB9XG4gICAgaWYgKGlzTm90Rm9yUmljaFRleHQpIHtcbiAgICAgIHJvb3REaXYuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgXCJ4ZmFMYXllciB4ZmFGb250XCIpO1xuICAgIH1cbiAgICBjb25zdCB0ZXh0RGl2cyA9IFtdO1xuICAgIGlmIChyb290LmNoaWxkcmVuLmxlbmd0aCA9PT0gMCkge1xuICAgICAgaWYgKHJvb3QudmFsdWUpIHtcbiAgICAgICAgY29uc3Qgbm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHJvb3QudmFsdWUpO1xuICAgICAgICByb290SHRtbC5hcHBlbmQobm9kZSk7XG4gICAgICAgIGlmIChpc05vdEZvclJpY2hUZXh0ICYmIF94ZmFfdGV4dF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLlhmYVRleHQuc2hvdWxkQnVpbGRUZXh0KHJvb3QubmFtZSkpIHtcbiAgICAgICAgICB0ZXh0RGl2cy5wdXNoKG5vZGUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0ZXh0RGl2c1xuICAgICAgfTtcbiAgICB9XG4gICAgY29uc3Qgc3RhY2sgPSBbW3Jvb3QsIC0xLCByb290SHRtbF1dO1xuICAgIHdoaWxlIChzdGFjay5sZW5ndGggPiAwKSB7XG4gICAgICBjb25zdCBbcGFyZW50LCBpLCBodG1sXSA9IHN0YWNrLmF0KC0xKTtcbiAgICAgIGlmIChpICsgMSA9PT0gcGFyZW50LmNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgICBzdGFjay5wb3AoKTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBjb25zdCBjaGlsZCA9IHBhcmVudC5jaGlsZHJlblsrK3N0YWNrLmF0KC0xKVsxXV07XG4gICAgICBpZiAoY2hpbGQgPT09IG51bGwpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBjb25zdCB7XG4gICAgICAgIG5hbWVcbiAgICAgIH0gPSBjaGlsZDtcbiAgICAgIGlmIChuYW1lID09PSBcIiN0ZXh0XCIpIHtcbiAgICAgICAgY29uc3Qgbm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNoaWxkLnZhbHVlKTtcbiAgICAgICAgdGV4dERpdnMucHVzaChub2RlKTtcbiAgICAgICAgaHRtbC5hcHBlbmQobm9kZSk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgY29uc3QgY2hpbGRIdG1sID0gY2hpbGQ/LmF0dHJpYnV0ZXM/LnhtbG5zID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKGNoaWxkLmF0dHJpYnV0ZXMueG1sbnMsIG5hbWUpIDogZG9jdW1lbnQuY3JlYXRlRWxlbWVudChuYW1lKTtcbiAgICAgIGh0bWwuYXBwZW5kKGNoaWxkSHRtbCk7XG4gICAgICBpZiAoY2hpbGQuYXR0cmlidXRlcykge1xuICAgICAgICB0aGlzLnNldEF0dHJpYnV0ZXMoe1xuICAgICAgICAgIGh0bWw6IGNoaWxkSHRtbCxcbiAgICAgICAgICBlbGVtZW50OiBjaGlsZCxcbiAgICAgICAgICBzdG9yYWdlLFxuICAgICAgICAgIGludGVudCxcbiAgICAgICAgICBsaW5rU2VydmljZVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGlmIChjaGlsZC5jaGlsZHJlbj8ubGVuZ3RoID4gMCkge1xuICAgICAgICBzdGFjay5wdXNoKFtjaGlsZCwgLTEsIGNoaWxkSHRtbF0pO1xuICAgICAgfSBlbHNlIGlmIChjaGlsZC52YWx1ZSkge1xuICAgICAgICBjb25zdCBub2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY2hpbGQudmFsdWUpO1xuICAgICAgICBpZiAoaXNOb3RGb3JSaWNoVGV4dCAmJiBfeGZhX3RleHRfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5YZmFUZXh0LnNob3VsZEJ1aWxkVGV4dChuYW1lKSkge1xuICAgICAgICAgIHRleHREaXZzLnB1c2gobm9kZSk7XG4gICAgICAgIH1cbiAgICAgICAgY2hpbGRIdG1sLmFwcGVuZChub2RlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgZm9yIChjb25zdCBlbCBvZiByb290RGl2LnF1ZXJ5U2VsZWN0b3JBbGwoXCIueGZhTm9uSW50ZXJhY3RpdmUgaW5wdXQsIC54ZmFOb25JbnRlcmFjdGl2ZSB0ZXh0YXJlYVwiKSkge1xuICAgICAgZWwuc2V0QXR0cmlidXRlKFwicmVhZE9ubHlcIiwgdHJ1ZSk7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICB0ZXh0RGl2c1xuICAgIH07XG4gIH1cbiAgc3RhdGljIHVwZGF0ZShwYXJhbWV0ZXJzKSB7XG4gICAgY29uc3QgdHJhbnNmb3JtID0gYG1hdHJpeCgke3BhcmFtZXRlcnMudmlld3BvcnQudHJhbnNmb3JtLmpvaW4oXCIsXCIpfSlgO1xuICAgIHBhcmFtZXRlcnMuZGl2LnN0eWxlLnRyYW5zZm9ybSA9IHRyYW5zZm9ybTtcbiAgICBwYXJhbWV0ZXJzLmRpdi5oaWRkZW4gPSBmYWxzZTtcbiAgfVxufVxuXG5cbi8qKiovIH0pLFxuXG4vKioqLyA1MjE6XG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfX193ZWJwYWNrX21vZHVsZV9fLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cbi8qIGhhcm1vbnkgZXhwb3J0ICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCB7XG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFhmYVRleHQ6ICgpID0+ICgvKiBiaW5kaW5nICovIFhmYVRleHQpXG4vKiBoYXJtb255IGV4cG9ydCAqLyB9KTtcbmNsYXNzIFhmYVRleHQge1xuICBzdGF0aWMgdGV4dENvbnRlbnQoeGZhKSB7XG4gICAgY29uc3QgaXRlbXMgPSBbXTtcbiAgICBjb25zdCBvdXRwdXQgPSB7XG4gICAgICBpdGVtcyxcbiAgICAgIHN0eWxlczogT2JqZWN0LmNyZWF0ZShudWxsKVxuICAgIH07XG4gICAgZnVuY3Rpb24gd2Fsayhub2RlKSB7XG4gICAgICBpZiAoIW5vZGUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgbGV0IHN0ciA9IG51bGw7XG4gICAgICBjb25zdCBuYW1lID0gbm9kZS5uYW1lO1xuICAgICAgaWYgKG5hbWUgPT09IFwiI3RleHRcIikge1xuICAgICAgICBzdHIgPSBub2RlLnZhbHVlO1xuICAgICAgfSBlbHNlIGlmICghWGZhVGV4dC5zaG91bGRCdWlsZFRleHQobmFtZSkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSBlbHNlIGlmIChub2RlPy5hdHRyaWJ1dGVzPy50ZXh0Q29udGVudCkge1xuICAgICAgICBzdHIgPSBub2RlLmF0dHJpYnV0ZXMudGV4dENvbnRlbnQ7XG4gICAgICB9IGVsc2UgaWYgKG5vZGUudmFsdWUpIHtcbiAgICAgICAgc3RyID0gbm9kZS52YWx1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChzdHIgIT09IG51bGwpIHtcbiAgICAgICAgaXRlbXMucHVzaCh7XG4gICAgICAgICAgc3RyXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgaWYgKCFub2RlLmNoaWxkcmVuKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGZvciAoY29uc3QgY2hpbGQgb2Ygbm9kZS5jaGlsZHJlbikge1xuICAgICAgICB3YWxrKGNoaWxkKTtcbiAgICAgIH1cbiAgICB9XG4gICAgd2Fsayh4ZmEpO1xuICAgIHJldHVybiBvdXRwdXQ7XG4gIH1cbiAgc3RhdGljIHNob3VsZEJ1aWxkVGV4dChuYW1lKSB7XG4gICAgcmV0dXJuICEobmFtZSA9PT0gXCJ0ZXh0YXJlYVwiIHx8IG5hbWUgPT09IFwiaW5wdXRcIiB8fCBuYW1lID09PSBcIm9wdGlvblwiIHx8IG5hbWUgPT09IFwic2VsZWN0XCIpO1xuICB9XG59XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDkwNzpcbi8qKiovICgoX193ZWJwYWNrX21vZHVsZV9fLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cbl9fd2VicGFja19yZXF1aXJlX18uYShfX3dlYnBhY2tfbW9kdWxlX18sIGFzeW5jIChfX3dlYnBhY2tfaGFuZGxlX2FzeW5jX2RlcGVuZGVuY2llc19fLCBfX3dlYnBhY2tfYXN5bmNfcmVzdWx0X18pID0+IHsgdHJ5IHtcbi8qIGhhcm1vbnkgZXhwb3J0ICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCB7XG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIEFib3J0RXhjZXB0aW9uOiAoKSA9PiAoLyogcmVleHBvcnQgc2FmZSAqLyBfc2hhcmVkX3V0aWxfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5BYm9ydEV4Y2VwdGlvbiksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIEFubm90YXRpb25FZGl0b3JMYXllcjogKCkgPT4gKC8qIHJlZXhwb3J0IHNhZmUgKi8gX2Rpc3BsYXlfZWRpdG9yX2Fubm90YXRpb25fZWRpdG9yX2xheWVyX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X18uQW5ub3RhdGlvbkVkaXRvckxheWVyKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgQW5ub3RhdGlvbkVkaXRvclBhcmFtc1R5cGU6ICgpID0+ICgvKiByZWV4cG9ydCBzYWZlICovIF9zaGFyZWRfdXRpbF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLkFubm90YXRpb25FZGl0b3JQYXJhbXNUeXBlKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgQW5ub3RhdGlvbkVkaXRvclR5cGU6ICgpID0+ICgvKiByZWV4cG9ydCBzYWZlICovIF9zaGFyZWRfdXRpbF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLkFubm90YXRpb25FZGl0b3JUeXBlKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgQW5ub3RhdGlvbkVkaXRvclVJTWFuYWdlcjogKCkgPT4gKC8qIHJlZXhwb3J0IHNhZmUgKi8gX2Rpc3BsYXlfZWRpdG9yX3Rvb2xzX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X18uQW5ub3RhdGlvbkVkaXRvclVJTWFuYWdlciksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIEFubm90YXRpb25MYXllcjogKCkgPT4gKC8qIHJlZXhwb3J0IHNhZmUgKi8gX2Rpc3BsYXlfYW5ub3RhdGlvbl9sYXllcl9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNl9fLkFubm90YXRpb25MYXllciksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIEFubm90YXRpb25Nb2RlOiAoKSA9PiAoLyogcmVleHBvcnQgc2FmZSAqLyBfc2hhcmVkX3V0aWxfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5Bbm5vdGF0aW9uTW9kZSksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIENNYXBDb21wcmVzc2lvblR5cGU6ICgpID0+ICgvKiByZWV4cG9ydCBzYWZlICovIF9zaGFyZWRfdXRpbF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLkNNYXBDb21wcmVzc2lvblR5cGUpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBDb2xvclBpY2tlcjogKCkgPT4gKC8qIHJlZXhwb3J0IHNhZmUgKi8gX2Rpc3BsYXlfZWRpdG9yX2NvbG9yX3BpY2tlcl9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfN19fLkNvbG9yUGlja2VyKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgRE9NU1ZHRmFjdG9yeTogKCkgPT4gKC8qIHJlZXhwb3J0IHNhZmUgKi8gX2Rpc3BsYXlfZGlzcGxheV91dGlsc19qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fLkRPTVNWR0ZhY3RvcnkpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBEcmF3TGF5ZXI6ICgpID0+ICgvKiByZWV4cG9ydCBzYWZlICovIF9kaXNwbGF5X2RyYXdfbGF5ZXJfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzhfXy5EcmF3TGF5ZXIpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBGZWF0dXJlVGVzdDogKCkgPT4gKC8qIHJlZXhwb3J0IHNhZmUgKi8gX3NoYXJlZF91dGlsX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uRmVhdHVyZVRlc3QpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBHbG9iYWxXb3JrZXJPcHRpb25zOiAoKSA9PiAoLyogcmVleHBvcnQgc2FmZSAqLyBfZGlzcGxheV93b3JrZXJfb3B0aW9uc19qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfOV9fLkdsb2JhbFdvcmtlck9wdGlvbnMpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBJbWFnZUtpbmQ6ICgpID0+ICgvKiByZWV4cG9ydCBzYWZlICovIF9zaGFyZWRfdXRpbF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLkltYWdlS2luZCksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIEludmFsaWRQREZFeGNlcHRpb246ICgpID0+ICgvKiByZWV4cG9ydCBzYWZlICovIF9zaGFyZWRfdXRpbF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLkludmFsaWRQREZFeGNlcHRpb24pLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBNaXNzaW5nUERGRXhjZXB0aW9uOiAoKSA9PiAoLyogcmVleHBvcnQgc2FmZSAqLyBfc2hhcmVkX3V0aWxfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5NaXNzaW5nUERGRXhjZXB0aW9uKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgT1BTOiAoKSA9PiAoLyogcmVleHBvcnQgc2FmZSAqLyBfc2hhcmVkX3V0aWxfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5PUFMpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBPdXRsaW5lcjogKCkgPT4gKC8qIHJlZXhwb3J0IHNhZmUgKi8gX2Rpc3BsYXlfZWRpdG9yX291dGxpbmVyX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xMF9fLk91dGxpbmVyKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgUERGRGF0YVJhbmdlVHJhbnNwb3J0OiAoKSA9PiAoLyogcmVleHBvcnQgc2FmZSAqLyBfZGlzcGxheV9hcGlfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5QREZEYXRhUmFuZ2VUcmFuc3BvcnQpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBQREZEYXRlU3RyaW5nOiAoKSA9PiAoLyogcmVleHBvcnQgc2FmZSAqLyBfZGlzcGxheV9kaXNwbGF5X3V0aWxzX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18uUERGRGF0ZVN0cmluZyksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFBERldvcmtlcjogKCkgPT4gKC8qIHJlZXhwb3J0IHNhZmUgKi8gX2Rpc3BsYXlfYXBpX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uUERGV29ya2VyKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgUGFzc3dvcmRSZXNwb25zZXM6ICgpID0+ICgvKiByZWV4cG9ydCBzYWZlICovIF9zaGFyZWRfdXRpbF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLlBhc3N3b3JkUmVzcG9uc2VzKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgUGVybWlzc2lvbkZsYWc6ICgpID0+ICgvKiByZWV4cG9ydCBzYWZlICovIF9zaGFyZWRfdXRpbF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLlBlcm1pc3Npb25GbGFnKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgUGl4ZWxzUGVySW5jaDogKCkgPT4gKC8qIHJlZXhwb3J0IHNhZmUgKi8gX2Rpc3BsYXlfZGlzcGxheV91dGlsc19qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fLlBpeGVsc1BlckluY2gpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBQcm9taXNlQ2FwYWJpbGl0eTogKCkgPT4gKC8qIHJlZXhwb3J0IHNhZmUgKi8gX3NoYXJlZF91dGlsX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uUHJvbWlzZUNhcGFiaWxpdHkpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBSZW5kZXJpbmdDYW5jZWxsZWRFeGNlcHRpb246ICgpID0+ICgvKiByZWV4cG9ydCBzYWZlICovIF9kaXNwbGF5X2Rpc3BsYXlfdXRpbHNfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXy5SZW5kZXJpbmdDYW5jZWxsZWRFeGNlcHRpb24pLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBVbmV4cGVjdGVkUmVzcG9uc2VFeGNlcHRpb246ICgpID0+ICgvKiByZWV4cG9ydCBzYWZlICovIF9zaGFyZWRfdXRpbF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLlVuZXhwZWN0ZWRSZXNwb25zZUV4Y2VwdGlvbiksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFV0aWw6ICgpID0+ICgvKiByZWV4cG9ydCBzYWZlICovIF9zaGFyZWRfdXRpbF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLlV0aWwpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBWZXJib3NpdHlMZXZlbDogKCkgPT4gKC8qIHJlZXhwb3J0IHNhZmUgKi8gX3NoYXJlZF91dGlsX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uVmVyYm9zaXR5TGV2ZWwpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBYZmFMYXllcjogKCkgPT4gKC8qIHJlZXhwb3J0IHNhZmUgKi8gX2Rpc3BsYXlfeGZhX2xheWVyX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xMV9fLlhmYUxheWVyKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgYnVpbGQ6ICgpID0+ICgvKiByZWV4cG9ydCBzYWZlICovIF9kaXNwbGF5X2FwaV9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLmJ1aWxkKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgY3JlYXRlVmFsaWRBYnNvbHV0ZVVybDogKCkgPT4gKC8qIHJlZXhwb3J0IHNhZmUgKi8gX3NoYXJlZF91dGlsX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uY3JlYXRlVmFsaWRBYnNvbHV0ZVVybCksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIGZldGNoRGF0YTogKCkgPT4gKC8qIHJlZXhwb3J0IHNhZmUgKi8gX2Rpc3BsYXlfZGlzcGxheV91dGlsc19qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fLmZldGNoRGF0YSksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIGdldERvY3VtZW50OiAoKSA9PiAoLyogcmVleHBvcnQgc2FmZSAqLyBfZGlzcGxheV9hcGlfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5nZXREb2N1bWVudCksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIGdldEZpbGVuYW1lRnJvbVVybDogKCkgPT4gKC8qIHJlZXhwb3J0IHNhZmUgKi8gX2Rpc3BsYXlfZGlzcGxheV91dGlsc19qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fLmdldEZpbGVuYW1lRnJvbVVybCksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIGdldFBkZkZpbGVuYW1lRnJvbVVybDogKCkgPT4gKC8qIHJlZXhwb3J0IHNhZmUgKi8gX2Rpc3BsYXlfZGlzcGxheV91dGlsc19qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fLmdldFBkZkZpbGVuYW1lRnJvbVVybCksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIGdldFhmYVBhZ2VWaWV3cG9ydDogKCkgPT4gKC8qIHJlZXhwb3J0IHNhZmUgKi8gX2Rpc3BsYXlfZGlzcGxheV91dGlsc19qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fLmdldFhmYVBhZ2VWaWV3cG9ydCksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIGlzRGF0YVNjaGVtZTogKCkgPT4gKC8qIHJlZXhwb3J0IHNhZmUgKi8gX2Rpc3BsYXlfZGlzcGxheV91dGlsc19qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fLmlzRGF0YVNjaGVtZSksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIGlzUGRmRmlsZTogKCkgPT4gKC8qIHJlZXhwb3J0IHNhZmUgKi8gX2Rpc3BsYXlfZGlzcGxheV91dGlsc19qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fLmlzUGRmRmlsZSksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIG5vQ29udGV4dE1lbnU6ICgpID0+ICgvKiByZWV4cG9ydCBzYWZlICovIF9kaXNwbGF5X2Rpc3BsYXlfdXRpbHNfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXy5ub0NvbnRleHRNZW51KSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgbm9ybWFsaXplVW5pY29kZTogKCkgPT4gKC8qIHJlZXhwb3J0IHNhZmUgKi8gX3NoYXJlZF91dGlsX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18ubm9ybWFsaXplVW5pY29kZSksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIHJlbmRlclRleHRMYXllcjogKCkgPT4gKC8qIHJlZXhwb3J0IHNhZmUgKi8gX2Rpc3BsYXlfdGV4dF9sYXllcl9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fLnJlbmRlclRleHRMYXllciksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIHNldExheWVyRGltZW5zaW9uczogKCkgPT4gKC8qIHJlZXhwb3J0IHNhZmUgKi8gX2Rpc3BsYXlfZGlzcGxheV91dGlsc19qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fLnNldExheWVyRGltZW5zaW9ucyksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIHNoYWRvdzogKCkgPT4gKC8qIHJlZXhwb3J0IHNhZmUgKi8gX3NoYXJlZF91dGlsX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uc2hhZG93KSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgdXBkYXRlVGV4dExheWVyOiAoKSA9PiAoLyogcmVleHBvcnQgc2FmZSAqLyBfZGlzcGxheV90ZXh0X2xheWVyX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX18udXBkYXRlVGV4dExheWVyKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgdmVyc2lvbjogKCkgPT4gKC8qIHJlZXhwb3J0IHNhZmUgKi8gX2Rpc3BsYXlfYXBpX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18udmVyc2lvbilcbi8qIGhhcm1vbnkgZXhwb3J0ICovIH0pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9zaGFyZWRfdXRpbF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNjYpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9kaXNwbGF5X2FwaV9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0MDYpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9kaXNwbGF5X2Rpc3BsYXlfdXRpbHNfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXyA9IF9fd2VicGFja19yZXF1aXJlX18oNDczKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfZGlzcGxheV90ZXh0X2xheWVyX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDczOSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX2Rpc3BsYXlfZWRpdG9yX2Fubm90YXRpb25fZWRpdG9yX2xheWVyX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYyOSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX2Rpc3BsYXlfZWRpdG9yX3Rvb2xzX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgxMik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX2Rpc3BsYXlfYW5ub3RhdGlvbl9sYXllcl9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNl9fID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2NDApO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9kaXNwbGF5X2VkaXRvcl9jb2xvcl9waWNrZXJfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzdfXyA9IF9fd2VicGFja19yZXF1aXJlX18oOTcpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9kaXNwbGF5X2RyYXdfbGF5ZXJfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzhfXyA9IF9fd2VicGFja19yZXF1aXJlX18oNDIzKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfZGlzcGxheV93b3JrZXJfb3B0aW9uc19qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfOV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNjgpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9kaXNwbGF5X2VkaXRvcl9vdXRsaW5lcl9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTBfXyA9IF9fd2VicGFja19yZXF1aXJlX18oNDA1KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfZGlzcGxheV94ZmFfbGF5ZXJfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzExX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE2MCk7XG52YXIgX193ZWJwYWNrX2FzeW5jX2RlcGVuZGVuY2llc19fID0gX193ZWJwYWNrX2hhbmRsZV9hc3luY19kZXBlbmRlbmNpZXNfXyhbX2Rpc3BsYXlfYXBpX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19dKTtcbl9kaXNwbGF5X2FwaV9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fID0gKF9fd2VicGFja19hc3luY19kZXBlbmRlbmNpZXNfXy50aGVuID8gKGF3YWl0IF9fd2VicGFja19hc3luY19kZXBlbmRlbmNpZXNfXykoKSA6IF9fd2VicGFja19hc3luY19kZXBlbmRlbmNpZXNfXylbMF07XG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5jb25zdCBwZGZqc1ZlcnNpb24gPSAnNC4wLjM3OSc7XG5jb25zdCBwZGZqc0J1aWxkID0gJzllMTRkMDRmZCc7XG5cbl9fd2VicGFja19hc3luY19yZXN1bHRfXygpO1xufSBjYXRjaChlKSB7IF9fd2VicGFja19hc3luY19yZXN1bHRfXyhlKTsgfSB9KTtcblxuLyoqKi8gfSksXG5cbi8qKiovIDY5NDpcbi8qKiovICgoX191bnVzZWRfd2VicGFja19fX3dlYnBhY2tfbW9kdWxlX18sIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuLyogaGFybW9ueSBleHBvcnQgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIHtcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgTWVzc2FnZUhhbmRsZXI6ICgpID0+ICgvKiBiaW5kaW5nICovIE1lc3NhZ2VIYW5kbGVyKVxuLyogaGFybW9ueSBleHBvcnQgKi8gfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX3V0aWxfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMjY2KTtcblxuY29uc3QgQ2FsbGJhY2tLaW5kID0ge1xuICBVTktOT1dOOiAwLFxuICBEQVRBOiAxLFxuICBFUlJPUjogMlxufTtcbmNvbnN0IFN0cmVhbUtpbmQgPSB7XG4gIFVOS05PV046IDAsXG4gIENBTkNFTDogMSxcbiAgQ0FOQ0VMX0NPTVBMRVRFOiAyLFxuICBDTE9TRTogMyxcbiAgRU5RVUVVRTogNCxcbiAgRVJST1I6IDUsXG4gIFBVTEw6IDYsXG4gIFBVTExfQ09NUExFVEU6IDcsXG4gIFNUQVJUX0NPTVBMRVRFOiA4XG59O1xuZnVuY3Rpb24gd3JhcFJlYXNvbihyZWFzb24pIHtcbiAgaWYgKCEocmVhc29uIGluc3RhbmNlb2YgRXJyb3IgfHwgdHlwZW9mIHJlYXNvbiA9PT0gXCJvYmplY3RcIiAmJiByZWFzb24gIT09IG51bGwpKSB7XG4gICAgKDAsX3V0aWxfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy51bnJlYWNoYWJsZSkoJ3dyYXBSZWFzb246IEV4cGVjdGVkIFwicmVhc29uXCIgdG8gYmUgYSAocG9zc2libHkgY2xvbmVkKSBFcnJvci4nKTtcbiAgfVxuICBzd2l0Y2ggKHJlYXNvbi5uYW1lKSB7XG4gICAgY2FzZSBcIkFib3J0RXhjZXB0aW9uXCI6XG4gICAgICByZXR1cm4gbmV3IF91dGlsX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uQWJvcnRFeGNlcHRpb24ocmVhc29uLm1lc3NhZ2UpO1xuICAgIGNhc2UgXCJNaXNzaW5nUERGRXhjZXB0aW9uXCI6XG4gICAgICByZXR1cm4gbmV3IF91dGlsX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uTWlzc2luZ1BERkV4Y2VwdGlvbihyZWFzb24ubWVzc2FnZSk7XG4gICAgY2FzZSBcIlBhc3N3b3JkRXhjZXB0aW9uXCI6XG4gICAgICByZXR1cm4gbmV3IF91dGlsX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uUGFzc3dvcmRFeGNlcHRpb24ocmVhc29uLm1lc3NhZ2UsIHJlYXNvbi5jb2RlKTtcbiAgICBjYXNlIFwiVW5leHBlY3RlZFJlc3BvbnNlRXhjZXB0aW9uXCI6XG4gICAgICByZXR1cm4gbmV3IF91dGlsX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uVW5leHBlY3RlZFJlc3BvbnNlRXhjZXB0aW9uKHJlYXNvbi5tZXNzYWdlLCByZWFzb24uc3RhdHVzKTtcbiAgICBjYXNlIFwiVW5rbm93bkVycm9yRXhjZXB0aW9uXCI6XG4gICAgICByZXR1cm4gbmV3IF91dGlsX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uVW5rbm93bkVycm9yRXhjZXB0aW9uKHJlYXNvbi5tZXNzYWdlLCByZWFzb24uZGV0YWlscyk7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBuZXcgX3V0aWxfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5Vbmtub3duRXJyb3JFeGNlcHRpb24ocmVhc29uLm1lc3NhZ2UsIHJlYXNvbi50b1N0cmluZygpKTtcbiAgfVxufVxuY2xhc3MgTWVzc2FnZUhhbmRsZXIge1xuICBjb25zdHJ1Y3Rvcihzb3VyY2VOYW1lLCB0YXJnZXROYW1lLCBjb21PYmopIHtcbiAgICB0aGlzLnNvdXJjZU5hbWUgPSBzb3VyY2VOYW1lO1xuICAgIHRoaXMudGFyZ2V0TmFtZSA9IHRhcmdldE5hbWU7XG4gICAgdGhpcy5jb21PYmogPSBjb21PYmo7XG4gICAgdGhpcy5jYWxsYmFja0lkID0gMTtcbiAgICB0aGlzLnN0cmVhbUlkID0gMTtcbiAgICB0aGlzLnN0cmVhbVNpbmtzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB0aGlzLnN0cmVhbUNvbnRyb2xsZXJzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB0aGlzLmNhbGxiYWNrQ2FwYWJpbGl0aWVzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB0aGlzLmFjdGlvbkhhbmRsZXIgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRoaXMuX29uQ29tT2JqT25NZXNzYWdlID0gZXZlbnQgPT4ge1xuICAgICAgY29uc3QgZGF0YSA9IGV2ZW50LmRhdGE7XG4gICAgICBpZiAoZGF0YS50YXJnZXROYW1lICE9PSB0aGlzLnNvdXJjZU5hbWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKGRhdGEuc3RyZWFtKSB7XG4gICAgICAgIHRoaXMuI3Byb2Nlc3NTdHJlYW1NZXNzYWdlKGRhdGEpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoZGF0YS5jYWxsYmFjaykge1xuICAgICAgICBjb25zdCBjYWxsYmFja0lkID0gZGF0YS5jYWxsYmFja0lkO1xuICAgICAgICBjb25zdCBjYXBhYmlsaXR5ID0gdGhpcy5jYWxsYmFja0NhcGFiaWxpdGllc1tjYWxsYmFja0lkXTtcbiAgICAgICAgaWYgKCFjYXBhYmlsaXR5KSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDYW5ub3QgcmVzb2x2ZSBjYWxsYmFjayAke2NhbGxiYWNrSWR9YCk7XG4gICAgICAgIH1cbiAgICAgICAgZGVsZXRlIHRoaXMuY2FsbGJhY2tDYXBhYmlsaXRpZXNbY2FsbGJhY2tJZF07XG4gICAgICAgIGlmIChkYXRhLmNhbGxiYWNrID09PSBDYWxsYmFja0tpbmQuREFUQSkge1xuICAgICAgICAgIGNhcGFiaWxpdHkucmVzb2x2ZShkYXRhLmRhdGEpO1xuICAgICAgICB9IGVsc2UgaWYgKGRhdGEuY2FsbGJhY2sgPT09IENhbGxiYWNrS2luZC5FUlJPUikge1xuICAgICAgICAgIGNhcGFiaWxpdHkucmVqZWN0KHdyYXBSZWFzb24oZGF0YS5yZWFzb24pKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbmV4cGVjdGVkIGNhbGxiYWNrIGNhc2VcIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY29uc3QgYWN0aW9uID0gdGhpcy5hY3Rpb25IYW5kbGVyW2RhdGEuYWN0aW9uXTtcbiAgICAgIGlmICghYWN0aW9uKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5rbm93biBhY3Rpb24gZnJvbSB3b3JrZXI6ICR7ZGF0YS5hY3Rpb259YCk7XG4gICAgICB9XG4gICAgICBpZiAoZGF0YS5jYWxsYmFja0lkKSB7XG4gICAgICAgIGNvbnN0IGNiU291cmNlTmFtZSA9IHRoaXMuc291cmNlTmFtZTtcbiAgICAgICAgY29uc3QgY2JUYXJnZXROYW1lID0gZGF0YS5zb3VyY2VOYW1lO1xuICAgICAgICBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgICAgIHJlc29sdmUoYWN0aW9uKGRhdGEuZGF0YSkpO1xuICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgICBjb21PYmoucG9zdE1lc3NhZ2Uoe1xuICAgICAgICAgICAgc291cmNlTmFtZTogY2JTb3VyY2VOYW1lLFxuICAgICAgICAgICAgdGFyZ2V0TmFtZTogY2JUYXJnZXROYW1lLFxuICAgICAgICAgICAgY2FsbGJhY2s6IENhbGxiYWNrS2luZC5EQVRBLFxuICAgICAgICAgICAgY2FsbGJhY2tJZDogZGF0YS5jYWxsYmFja0lkLFxuICAgICAgICAgICAgZGF0YTogcmVzdWx0XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0sIGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgICAgICBjb21PYmoucG9zdE1lc3NhZ2Uoe1xuICAgICAgICAgICAgc291cmNlTmFtZTogY2JTb3VyY2VOYW1lLFxuICAgICAgICAgICAgdGFyZ2V0TmFtZTogY2JUYXJnZXROYW1lLFxuICAgICAgICAgICAgY2FsbGJhY2s6IENhbGxiYWNrS2luZC5FUlJPUixcbiAgICAgICAgICAgIGNhbGxiYWNrSWQ6IGRhdGEuY2FsbGJhY2tJZCxcbiAgICAgICAgICAgIHJlYXNvbjogd3JhcFJlYXNvbihyZWFzb24pXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoZGF0YS5zdHJlYW1JZCkge1xuICAgICAgICB0aGlzLiNjcmVhdGVTdHJlYW1TaW5rKGRhdGEpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBhY3Rpb24oZGF0YS5kYXRhKTtcbiAgICB9O1xuICAgIGNvbU9iai5hZGRFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLCB0aGlzLl9vbkNvbU9iak9uTWVzc2FnZSk7XG4gIH1cbiAgb24oYWN0aW9uTmFtZSwgaGFuZGxlcikge1xuICAgIGNvbnN0IGFoID0gdGhpcy5hY3Rpb25IYW5kbGVyO1xuICAgIGlmIChhaFthY3Rpb25OYW1lXSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBUaGVyZSBpcyBhbHJlYWR5IGFuIGFjdGlvbk5hbWUgY2FsbGVkIFwiJHthY3Rpb25OYW1lfVwiYCk7XG4gICAgfVxuICAgIGFoW2FjdGlvbk5hbWVdID0gaGFuZGxlcjtcbiAgfVxuICBzZW5kKGFjdGlvbk5hbWUsIGRhdGEsIHRyYW5zZmVycykge1xuICAgIHRoaXMuY29tT2JqLnBvc3RNZXNzYWdlKHtcbiAgICAgIHNvdXJjZU5hbWU6IHRoaXMuc291cmNlTmFtZSxcbiAgICAgIHRhcmdldE5hbWU6IHRoaXMudGFyZ2V0TmFtZSxcbiAgICAgIGFjdGlvbjogYWN0aW9uTmFtZSxcbiAgICAgIGRhdGFcbiAgICB9LCB0cmFuc2ZlcnMpO1xuICB9XG4gIHNlbmRXaXRoUHJvbWlzZShhY3Rpb25OYW1lLCBkYXRhLCB0cmFuc2ZlcnMpIHtcbiAgICBjb25zdCBjYWxsYmFja0lkID0gdGhpcy5jYWxsYmFja0lkKys7XG4gICAgY29uc3QgY2FwYWJpbGl0eSA9IG5ldyBfdXRpbF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLlByb21pc2VDYXBhYmlsaXR5KCk7XG4gICAgdGhpcy5jYWxsYmFja0NhcGFiaWxpdGllc1tjYWxsYmFja0lkXSA9IGNhcGFiaWxpdHk7XG4gICAgdHJ5IHtcbiAgICAgIHRoaXMuY29tT2JqLnBvc3RNZXNzYWdlKHtcbiAgICAgICAgc291cmNlTmFtZTogdGhpcy5zb3VyY2VOYW1lLFxuICAgICAgICB0YXJnZXROYW1lOiB0aGlzLnRhcmdldE5hbWUsXG4gICAgICAgIGFjdGlvbjogYWN0aW9uTmFtZSxcbiAgICAgICAgY2FsbGJhY2tJZCxcbiAgICAgICAgZGF0YVxuICAgICAgfSwgdHJhbnNmZXJzKTtcbiAgICB9IGNhdGNoIChleCkge1xuICAgICAgY2FwYWJpbGl0eS5yZWplY3QoZXgpO1xuICAgIH1cbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9XG4gIHNlbmRXaXRoU3RyZWFtKGFjdGlvbk5hbWUsIGRhdGEsIHF1ZXVlaW5nU3RyYXRlZ3ksIHRyYW5zZmVycykge1xuICAgIGNvbnN0IHN0cmVhbUlkID0gdGhpcy5zdHJlYW1JZCsrLFxuICAgICAgc291cmNlTmFtZSA9IHRoaXMuc291cmNlTmFtZSxcbiAgICAgIHRhcmdldE5hbWUgPSB0aGlzLnRhcmdldE5hbWUsXG4gICAgICBjb21PYmogPSB0aGlzLmNvbU9iajtcbiAgICByZXR1cm4gbmV3IFJlYWRhYmxlU3RyZWFtKHtcbiAgICAgIHN0YXJ0OiBjb250cm9sbGVyID0+IHtcbiAgICAgICAgY29uc3Qgc3RhcnRDYXBhYmlsaXR5ID0gbmV3IF91dGlsX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uUHJvbWlzZUNhcGFiaWxpdHkoKTtcbiAgICAgICAgdGhpcy5zdHJlYW1Db250cm9sbGVyc1tzdHJlYW1JZF0gPSB7XG4gICAgICAgICAgY29udHJvbGxlcixcbiAgICAgICAgICBzdGFydENhbGw6IHN0YXJ0Q2FwYWJpbGl0eSxcbiAgICAgICAgICBwdWxsQ2FsbDogbnVsbCxcbiAgICAgICAgICBjYW5jZWxDYWxsOiBudWxsLFxuICAgICAgICAgIGlzQ2xvc2VkOiBmYWxzZVxuICAgICAgICB9O1xuICAgICAgICBjb21PYmoucG9zdE1lc3NhZ2Uoe1xuICAgICAgICAgIHNvdXJjZU5hbWUsXG4gICAgICAgICAgdGFyZ2V0TmFtZSxcbiAgICAgICAgICBhY3Rpb246IGFjdGlvbk5hbWUsXG4gICAgICAgICAgc3RyZWFtSWQsXG4gICAgICAgICAgZGF0YSxcbiAgICAgICAgICBkZXNpcmVkU2l6ZTogY29udHJvbGxlci5kZXNpcmVkU2l6ZVxuICAgICAgICB9LCB0cmFuc2ZlcnMpO1xuICAgICAgICByZXR1cm4gc3RhcnRDYXBhYmlsaXR5LnByb21pc2U7XG4gICAgICB9LFxuICAgICAgcHVsbDogY29udHJvbGxlciA9PiB7XG4gICAgICAgIGNvbnN0IHB1bGxDYXBhYmlsaXR5ID0gbmV3IF91dGlsX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uUHJvbWlzZUNhcGFiaWxpdHkoKTtcbiAgICAgICAgdGhpcy5zdHJlYW1Db250cm9sbGVyc1tzdHJlYW1JZF0ucHVsbENhbGwgPSBwdWxsQ2FwYWJpbGl0eTtcbiAgICAgICAgY29tT2JqLnBvc3RNZXNzYWdlKHtcbiAgICAgICAgICBzb3VyY2VOYW1lLFxuICAgICAgICAgIHRhcmdldE5hbWUsXG4gICAgICAgICAgc3RyZWFtOiBTdHJlYW1LaW5kLlBVTEwsXG4gICAgICAgICAgc3RyZWFtSWQsXG4gICAgICAgICAgZGVzaXJlZFNpemU6IGNvbnRyb2xsZXIuZGVzaXJlZFNpemVcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBwdWxsQ2FwYWJpbGl0eS5wcm9taXNlO1xuICAgICAgfSxcbiAgICAgIGNhbmNlbDogcmVhc29uID0+IHtcbiAgICAgICAgKDAsX3V0aWxfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5hc3NlcnQpKHJlYXNvbiBpbnN0YW5jZW9mIEVycm9yLCBcImNhbmNlbCBtdXN0IGhhdmUgYSB2YWxpZCByZWFzb25cIik7XG4gICAgICAgIGNvbnN0IGNhbmNlbENhcGFiaWxpdHkgPSBuZXcgX3V0aWxfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5Qcm9taXNlQ2FwYWJpbGl0eSgpO1xuICAgICAgICB0aGlzLnN0cmVhbUNvbnRyb2xsZXJzW3N0cmVhbUlkXS5jYW5jZWxDYWxsID0gY2FuY2VsQ2FwYWJpbGl0eTtcbiAgICAgICAgdGhpcy5zdHJlYW1Db250cm9sbGVyc1tzdHJlYW1JZF0uaXNDbG9zZWQgPSB0cnVlO1xuICAgICAgICBjb21PYmoucG9zdE1lc3NhZ2Uoe1xuICAgICAgICAgIHNvdXJjZU5hbWUsXG4gICAgICAgICAgdGFyZ2V0TmFtZSxcbiAgICAgICAgICBzdHJlYW06IFN0cmVhbUtpbmQuQ0FOQ0VMLFxuICAgICAgICAgIHN0cmVhbUlkLFxuICAgICAgICAgIHJlYXNvbjogd3JhcFJlYXNvbihyZWFzb24pXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gY2FuY2VsQ2FwYWJpbGl0eS5wcm9taXNlO1xuICAgICAgfVxuICAgIH0sIHF1ZXVlaW5nU3RyYXRlZ3kpO1xuICB9XG4gICNjcmVhdGVTdHJlYW1TaW5rKGRhdGEpIHtcbiAgICBjb25zdCBzdHJlYW1JZCA9IGRhdGEuc3RyZWFtSWQsXG4gICAgICBzb3VyY2VOYW1lID0gdGhpcy5zb3VyY2VOYW1lLFxuICAgICAgdGFyZ2V0TmFtZSA9IGRhdGEuc291cmNlTmFtZSxcbiAgICAgIGNvbU9iaiA9IHRoaXMuY29tT2JqO1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzLFxuICAgICAgYWN0aW9uID0gdGhpcy5hY3Rpb25IYW5kbGVyW2RhdGEuYWN0aW9uXTtcbiAgICBjb25zdCBzdHJlYW1TaW5rID0ge1xuICAgICAgZW5xdWV1ZShjaHVuaywgc2l6ZSA9IDEsIHRyYW5zZmVycykge1xuICAgICAgICBpZiAodGhpcy5pc0NhbmNlbGxlZCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBsYXN0RGVzaXJlZFNpemUgPSB0aGlzLmRlc2lyZWRTaXplO1xuICAgICAgICB0aGlzLmRlc2lyZWRTaXplIC09IHNpemU7XG4gICAgICAgIGlmIChsYXN0RGVzaXJlZFNpemUgPiAwICYmIHRoaXMuZGVzaXJlZFNpemUgPD0gMCkge1xuICAgICAgICAgIHRoaXMuc2lua0NhcGFiaWxpdHkgPSBuZXcgX3V0aWxfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5Qcm9taXNlQ2FwYWJpbGl0eSgpO1xuICAgICAgICAgIHRoaXMucmVhZHkgPSB0aGlzLnNpbmtDYXBhYmlsaXR5LnByb21pc2U7XG4gICAgICAgIH1cbiAgICAgICAgY29tT2JqLnBvc3RNZXNzYWdlKHtcbiAgICAgICAgICBzb3VyY2VOYW1lLFxuICAgICAgICAgIHRhcmdldE5hbWUsXG4gICAgICAgICAgc3RyZWFtOiBTdHJlYW1LaW5kLkVOUVVFVUUsXG4gICAgICAgICAgc3RyZWFtSWQsXG4gICAgICAgICAgY2h1bmtcbiAgICAgICAgfSwgdHJhbnNmZXJzKTtcbiAgICAgIH0sXG4gICAgICBjbG9zZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNDYW5jZWxsZWQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5pc0NhbmNlbGxlZCA9IHRydWU7XG4gICAgICAgIGNvbU9iai5wb3N0TWVzc2FnZSh7XG4gICAgICAgICAgc291cmNlTmFtZSxcbiAgICAgICAgICB0YXJnZXROYW1lLFxuICAgICAgICAgIHN0cmVhbTogU3RyZWFtS2luZC5DTE9TRSxcbiAgICAgICAgICBzdHJlYW1JZFxuICAgICAgICB9KTtcbiAgICAgICAgZGVsZXRlIHNlbGYuc3RyZWFtU2lua3Nbc3RyZWFtSWRdO1xuICAgICAgfSxcbiAgICAgIGVycm9yKHJlYXNvbikge1xuICAgICAgICAoMCxfdXRpbF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLmFzc2VydCkocmVhc29uIGluc3RhbmNlb2YgRXJyb3IsIFwiZXJyb3IgbXVzdCBoYXZlIGEgdmFsaWQgcmVhc29uXCIpO1xuICAgICAgICBpZiAodGhpcy5pc0NhbmNlbGxlZCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmlzQ2FuY2VsbGVkID0gdHJ1ZTtcbiAgICAgICAgY29tT2JqLnBvc3RNZXNzYWdlKHtcbiAgICAgICAgICBzb3VyY2VOYW1lLFxuICAgICAgICAgIHRhcmdldE5hbWUsXG4gICAgICAgICAgc3RyZWFtOiBTdHJlYW1LaW5kLkVSUk9SLFxuICAgICAgICAgIHN0cmVhbUlkLFxuICAgICAgICAgIHJlYXNvbjogd3JhcFJlYXNvbihyZWFzb24pXG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICAgIHNpbmtDYXBhYmlsaXR5OiBuZXcgX3V0aWxfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5Qcm9taXNlQ2FwYWJpbGl0eSgpLFxuICAgICAgb25QdWxsOiBudWxsLFxuICAgICAgb25DYW5jZWw6IG51bGwsXG4gICAgICBpc0NhbmNlbGxlZDogZmFsc2UsXG4gICAgICBkZXNpcmVkU2l6ZTogZGF0YS5kZXNpcmVkU2l6ZSxcbiAgICAgIHJlYWR5OiBudWxsXG4gICAgfTtcbiAgICBzdHJlYW1TaW5rLnNpbmtDYXBhYmlsaXR5LnJlc29sdmUoKTtcbiAgICBzdHJlYW1TaW5rLnJlYWR5ID0gc3RyZWFtU2luay5zaW5rQ2FwYWJpbGl0eS5wcm9taXNlO1xuICAgIHRoaXMuc3RyZWFtU2lua3Nbc3RyZWFtSWRdID0gc3RyZWFtU2luaztcbiAgICBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgcmVzb2x2ZShhY3Rpb24oZGF0YS5kYXRhLCBzdHJlYW1TaW5rKSk7XG4gICAgfSkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICBjb21PYmoucG9zdE1lc3NhZ2Uoe1xuICAgICAgICBzb3VyY2VOYW1lLFxuICAgICAgICB0YXJnZXROYW1lLFxuICAgICAgICBzdHJlYW06IFN0cmVhbUtpbmQuU1RBUlRfQ09NUExFVEUsXG4gICAgICAgIHN0cmVhbUlkLFxuICAgICAgICBzdWNjZXNzOiB0cnVlXG4gICAgICB9KTtcbiAgICB9LCBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgICBjb21PYmoucG9zdE1lc3NhZ2Uoe1xuICAgICAgICBzb3VyY2VOYW1lLFxuICAgICAgICB0YXJnZXROYW1lLFxuICAgICAgICBzdHJlYW06IFN0cmVhbUtpbmQuU1RBUlRfQ09NUExFVEUsXG4gICAgICAgIHN0cmVhbUlkLFxuICAgICAgICByZWFzb246IHdyYXBSZWFzb24ocmVhc29uKVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbiAgI3Byb2Nlc3NTdHJlYW1NZXNzYWdlKGRhdGEpIHtcbiAgICBjb25zdCBzdHJlYW1JZCA9IGRhdGEuc3RyZWFtSWQsXG4gICAgICBzb3VyY2VOYW1lID0gdGhpcy5zb3VyY2VOYW1lLFxuICAgICAgdGFyZ2V0TmFtZSA9IGRhdGEuc291cmNlTmFtZSxcbiAgICAgIGNvbU9iaiA9IHRoaXMuY29tT2JqO1xuICAgIGNvbnN0IHN0cmVhbUNvbnRyb2xsZXIgPSB0aGlzLnN0cmVhbUNvbnRyb2xsZXJzW3N0cmVhbUlkXSxcbiAgICAgIHN0cmVhbVNpbmsgPSB0aGlzLnN0cmVhbVNpbmtzW3N0cmVhbUlkXTtcbiAgICBzd2l0Y2ggKGRhdGEuc3RyZWFtKSB7XG4gICAgICBjYXNlIFN0cmVhbUtpbmQuU1RBUlRfQ09NUExFVEU6XG4gICAgICAgIGlmIChkYXRhLnN1Y2Nlc3MpIHtcbiAgICAgICAgICBzdHJlYW1Db250cm9sbGVyLnN0YXJ0Q2FsbC5yZXNvbHZlKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3RyZWFtQ29udHJvbGxlci5zdGFydENhbGwucmVqZWN0KHdyYXBSZWFzb24oZGF0YS5yZWFzb24pKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgU3RyZWFtS2luZC5QVUxMX0NPTVBMRVRFOlxuICAgICAgICBpZiAoZGF0YS5zdWNjZXNzKSB7XG4gICAgICAgICAgc3RyZWFtQ29udHJvbGxlci5wdWxsQ2FsbC5yZXNvbHZlKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3RyZWFtQ29udHJvbGxlci5wdWxsQ2FsbC5yZWplY3Qod3JhcFJlYXNvbihkYXRhLnJlYXNvbikpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBTdHJlYW1LaW5kLlBVTEw6XG4gICAgICAgIGlmICghc3RyZWFtU2luaykge1xuICAgICAgICAgIGNvbU9iai5wb3N0TWVzc2FnZSh7XG4gICAgICAgICAgICBzb3VyY2VOYW1lLFxuICAgICAgICAgICAgdGFyZ2V0TmFtZSxcbiAgICAgICAgICAgIHN0cmVhbTogU3RyZWFtS2luZC5QVUxMX0NPTVBMRVRFLFxuICAgICAgICAgICAgc3RyZWFtSWQsXG4gICAgICAgICAgICBzdWNjZXNzOiB0cnVlXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN0cmVhbVNpbmsuZGVzaXJlZFNpemUgPD0gMCAmJiBkYXRhLmRlc2lyZWRTaXplID4gMCkge1xuICAgICAgICAgIHN0cmVhbVNpbmsuc2lua0NhcGFiaWxpdHkucmVzb2x2ZSgpO1xuICAgICAgICB9XG4gICAgICAgIHN0cmVhbVNpbmsuZGVzaXJlZFNpemUgPSBkYXRhLmRlc2lyZWRTaXplO1xuICAgICAgICBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgICAgIHJlc29sdmUoc3RyZWFtU2luay5vblB1bGw/LigpKTtcbiAgICAgICAgfSkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgY29tT2JqLnBvc3RNZXNzYWdlKHtcbiAgICAgICAgICAgIHNvdXJjZU5hbWUsXG4gICAgICAgICAgICB0YXJnZXROYW1lLFxuICAgICAgICAgICAgc3RyZWFtOiBTdHJlYW1LaW5kLlBVTExfQ09NUExFVEUsXG4gICAgICAgICAgICBzdHJlYW1JZCxcbiAgICAgICAgICAgIHN1Y2Nlc3M6IHRydWVcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSwgZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgICAgIGNvbU9iai5wb3N0TWVzc2FnZSh7XG4gICAgICAgICAgICBzb3VyY2VOYW1lLFxuICAgICAgICAgICAgdGFyZ2V0TmFtZSxcbiAgICAgICAgICAgIHN0cmVhbTogU3RyZWFtS2luZC5QVUxMX0NPTVBMRVRFLFxuICAgICAgICAgICAgc3RyZWFtSWQsXG4gICAgICAgICAgICByZWFzb246IHdyYXBSZWFzb24ocmVhc29uKVxuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFN0cmVhbUtpbmQuRU5RVUVVRTpcbiAgICAgICAgKDAsX3V0aWxfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5hc3NlcnQpKHN0cmVhbUNvbnRyb2xsZXIsIFwiZW5xdWV1ZSBzaG91bGQgaGF2ZSBzdHJlYW0gY29udHJvbGxlclwiKTtcbiAgICAgICAgaWYgKHN0cmVhbUNvbnRyb2xsZXIuaXNDbG9zZWQpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBzdHJlYW1Db250cm9sbGVyLmNvbnRyb2xsZXIuZW5xdWV1ZShkYXRhLmNodW5rKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFN0cmVhbUtpbmQuQ0xPU0U6XG4gICAgICAgICgwLF91dGlsX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uYXNzZXJ0KShzdHJlYW1Db250cm9sbGVyLCBcImNsb3NlIHNob3VsZCBoYXZlIHN0cmVhbSBjb250cm9sbGVyXCIpO1xuICAgICAgICBpZiAoc3RyZWFtQ29udHJvbGxlci5pc0Nsb3NlZCkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHN0cmVhbUNvbnRyb2xsZXIuaXNDbG9zZWQgPSB0cnVlO1xuICAgICAgICBzdHJlYW1Db250cm9sbGVyLmNvbnRyb2xsZXIuY2xvc2UoKTtcbiAgICAgICAgdGhpcy4jZGVsZXRlU3RyZWFtQ29udHJvbGxlcihzdHJlYW1Db250cm9sbGVyLCBzdHJlYW1JZCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBTdHJlYW1LaW5kLkVSUk9SOlxuICAgICAgICAoMCxfdXRpbF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLmFzc2VydCkoc3RyZWFtQ29udHJvbGxlciwgXCJlcnJvciBzaG91bGQgaGF2ZSBzdHJlYW0gY29udHJvbGxlclwiKTtcbiAgICAgICAgc3RyZWFtQ29udHJvbGxlci5jb250cm9sbGVyLmVycm9yKHdyYXBSZWFzb24oZGF0YS5yZWFzb24pKTtcbiAgICAgICAgdGhpcy4jZGVsZXRlU3RyZWFtQ29udHJvbGxlcihzdHJlYW1Db250cm9sbGVyLCBzdHJlYW1JZCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBTdHJlYW1LaW5kLkNBTkNFTF9DT01QTEVURTpcbiAgICAgICAgaWYgKGRhdGEuc3VjY2Vzcykge1xuICAgICAgICAgIHN0cmVhbUNvbnRyb2xsZXIuY2FuY2VsQ2FsbC5yZXNvbHZlKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3RyZWFtQ29udHJvbGxlci5jYW5jZWxDYWxsLnJlamVjdCh3cmFwUmVhc29uKGRhdGEucmVhc29uKSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy4jZGVsZXRlU3RyZWFtQ29udHJvbGxlcihzdHJlYW1Db250cm9sbGVyLCBzdHJlYW1JZCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBTdHJlYW1LaW5kLkNBTkNFTDpcbiAgICAgICAgaWYgKCFzdHJlYW1TaW5rKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgICAgICByZXNvbHZlKHN0cmVhbVNpbmsub25DYW5jZWw/Lih3cmFwUmVhc29uKGRhdGEucmVhc29uKSkpO1xuICAgICAgICB9KS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBjb21PYmoucG9zdE1lc3NhZ2Uoe1xuICAgICAgICAgICAgc291cmNlTmFtZSxcbiAgICAgICAgICAgIHRhcmdldE5hbWUsXG4gICAgICAgICAgICBzdHJlYW06IFN0cmVhbUtpbmQuQ0FOQ0VMX0NPTVBMRVRFLFxuICAgICAgICAgICAgc3RyZWFtSWQsXG4gICAgICAgICAgICBzdWNjZXNzOiB0cnVlXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0sIGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgICAgICBjb21PYmoucG9zdE1lc3NhZ2Uoe1xuICAgICAgICAgICAgc291cmNlTmFtZSxcbiAgICAgICAgICAgIHRhcmdldE5hbWUsXG4gICAgICAgICAgICBzdHJlYW06IFN0cmVhbUtpbmQuQ0FOQ0VMX0NPTVBMRVRFLFxuICAgICAgICAgICAgc3RyZWFtSWQsXG4gICAgICAgICAgICByZWFzb246IHdyYXBSZWFzb24ocmVhc29uKVxuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgc3RyZWFtU2luay5zaW5rQ2FwYWJpbGl0eS5yZWplY3Qod3JhcFJlYXNvbihkYXRhLnJlYXNvbikpO1xuICAgICAgICBzdHJlYW1TaW5rLmlzQ2FuY2VsbGVkID0gdHJ1ZTtcbiAgICAgICAgZGVsZXRlIHRoaXMuc3RyZWFtU2lua3Nbc3RyZWFtSWRdO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlVuZXhwZWN0ZWQgc3RyZWFtIGNhc2VcIik7XG4gICAgfVxuICB9XG4gIGFzeW5jICNkZWxldGVTdHJlYW1Db250cm9sbGVyKHN0cmVhbUNvbnRyb2xsZXIsIHN0cmVhbUlkKSB7XG4gICAgYXdhaXQgUHJvbWlzZS5hbGxTZXR0bGVkKFtzdHJlYW1Db250cm9sbGVyLnN0YXJ0Q2FsbD8ucHJvbWlzZSwgc3RyZWFtQ29udHJvbGxlci5wdWxsQ2FsbD8ucHJvbWlzZSwgc3RyZWFtQ29udHJvbGxlci5jYW5jZWxDYWxsPy5wcm9taXNlXSk7XG4gICAgZGVsZXRlIHRoaXMuc3RyZWFtQ29udHJvbGxlcnNbc3RyZWFtSWRdO1xuICB9XG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy5jb21PYmoucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIiwgdGhpcy5fb25Db21PYmpPbk1lc3NhZ2UpO1xuICB9XG59XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDgyNTpcbi8qKiovICgoX191bnVzZWRfd2VicGFja19fX3dlYnBhY2tfbW9kdWxlX18sIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuLyogaGFybW9ueSBleHBvcnQgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIHtcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgTXVybXVySGFzaDNfNjQ6ICgpID0+ICgvKiBiaW5kaW5nICovIE11cm11ckhhc2gzXzY0KVxuLyogaGFybW9ueSBleHBvcnQgKi8gfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX3V0aWxfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMjY2KTtcblxuY29uc3QgU0VFRCA9IDB4YzNkMmUxZjA7XG5jb25zdCBNQVNLX0hJR0ggPSAweGZmZmYwMDAwO1xuY29uc3QgTUFTS19MT1cgPSAweGZmZmY7XG5jbGFzcyBNdXJtdXJIYXNoM182NCB7XG4gIGNvbnN0cnVjdG9yKHNlZWQpIHtcbiAgICB0aGlzLmgxID0gc2VlZCA/IHNlZWQgJiAweGZmZmZmZmZmIDogU0VFRDtcbiAgICB0aGlzLmgyID0gc2VlZCA/IHNlZWQgJiAweGZmZmZmZmZmIDogU0VFRDtcbiAgfVxuICB1cGRhdGUoaW5wdXQpIHtcbiAgICBsZXQgZGF0YSwgbGVuZ3RoO1xuICAgIGlmICh0eXBlb2YgaW5wdXQgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIGRhdGEgPSBuZXcgVWludDhBcnJheShpbnB1dC5sZW5ndGggKiAyKTtcbiAgICAgIGxlbmd0aCA9IDA7XG4gICAgICBmb3IgKGxldCBpID0gMCwgaWkgPSBpbnB1dC5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGNvZGUgPSBpbnB1dC5jaGFyQ29kZUF0KGkpO1xuICAgICAgICBpZiAoY29kZSA8PSAweGZmKSB7XG4gICAgICAgICAgZGF0YVtsZW5ndGgrK10gPSBjb2RlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRhdGFbbGVuZ3RoKytdID0gY29kZSA+Pj4gODtcbiAgICAgICAgICBkYXRhW2xlbmd0aCsrXSA9IGNvZGUgJiAweGZmO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICgoMCxfdXRpbF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLmlzQXJyYXlCdWZmZXIpKGlucHV0KSkge1xuICAgICAgZGF0YSA9IGlucHV0LnNsaWNlKCk7XG4gICAgICBsZW5ndGggPSBkYXRhLmJ5dGVMZW5ndGg7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIldyb25nIGRhdGEgZm9ybWF0IGluIE11cm11ckhhc2gzXzY0X3VwZGF0ZS4gXCIgKyBcIklucHV0IG11c3QgYmUgYSBzdHJpbmcgb3IgYXJyYXkuXCIpO1xuICAgIH1cbiAgICBjb25zdCBibG9ja0NvdW50cyA9IGxlbmd0aCA+PiAyO1xuICAgIGNvbnN0IHRhaWxMZW5ndGggPSBsZW5ndGggLSBibG9ja0NvdW50cyAqIDQ7XG4gICAgY29uc3QgZGF0YVVpbnQzMiA9IG5ldyBVaW50MzJBcnJheShkYXRhLmJ1ZmZlciwgMCwgYmxvY2tDb3VudHMpO1xuICAgIGxldCBrMSA9IDAsXG4gICAgICBrMiA9IDA7XG4gICAgbGV0IGgxID0gdGhpcy5oMSxcbiAgICAgIGgyID0gdGhpcy5oMjtcbiAgICBjb25zdCBDMSA9IDB4Y2M5ZTJkNTEsXG4gICAgICBDMiA9IDB4MWI4NzM1OTM7XG4gICAgY29uc3QgQzFfTE9XID0gQzEgJiBNQVNLX0xPVyxcbiAgICAgIEMyX0xPVyA9IEMyICYgTUFTS19MT1c7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBibG9ja0NvdW50czsgaSsrKSB7XG4gICAgICBpZiAoaSAmIDEpIHtcbiAgICAgICAgazEgPSBkYXRhVWludDMyW2ldO1xuICAgICAgICBrMSA9IGsxICogQzEgJiBNQVNLX0hJR0ggfCBrMSAqIEMxX0xPVyAmIE1BU0tfTE9XO1xuICAgICAgICBrMSA9IGsxIDw8IDE1IHwgazEgPj4+IDE3O1xuICAgICAgICBrMSA9IGsxICogQzIgJiBNQVNLX0hJR0ggfCBrMSAqIEMyX0xPVyAmIE1BU0tfTE9XO1xuICAgICAgICBoMSBePSBrMTtcbiAgICAgICAgaDEgPSBoMSA8PCAxMyB8IGgxID4+PiAxOTtcbiAgICAgICAgaDEgPSBoMSAqIDUgKyAweGU2NTQ2YjY0O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgazIgPSBkYXRhVWludDMyW2ldO1xuICAgICAgICBrMiA9IGsyICogQzEgJiBNQVNLX0hJR0ggfCBrMiAqIEMxX0xPVyAmIE1BU0tfTE9XO1xuICAgICAgICBrMiA9IGsyIDw8IDE1IHwgazIgPj4+IDE3O1xuICAgICAgICBrMiA9IGsyICogQzIgJiBNQVNLX0hJR0ggfCBrMiAqIEMyX0xPVyAmIE1BU0tfTE9XO1xuICAgICAgICBoMiBePSBrMjtcbiAgICAgICAgaDIgPSBoMiA8PCAxMyB8IGgyID4+PiAxOTtcbiAgICAgICAgaDIgPSBoMiAqIDUgKyAweGU2NTQ2YjY0O1xuICAgICAgfVxuICAgIH1cbiAgICBrMSA9IDA7XG4gICAgc3dpdGNoICh0YWlsTGVuZ3RoKSB7XG4gICAgICBjYXNlIDM6XG4gICAgICAgIGsxIF49IGRhdGFbYmxvY2tDb3VudHMgKiA0ICsgMl0gPDwgMTY7XG4gICAgICBjYXNlIDI6XG4gICAgICAgIGsxIF49IGRhdGFbYmxvY2tDb3VudHMgKiA0ICsgMV0gPDwgODtcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgazEgXj0gZGF0YVtibG9ja0NvdW50cyAqIDRdO1xuICAgICAgICBrMSA9IGsxICogQzEgJiBNQVNLX0hJR0ggfCBrMSAqIEMxX0xPVyAmIE1BU0tfTE9XO1xuICAgICAgICBrMSA9IGsxIDw8IDE1IHwgazEgPj4+IDE3O1xuICAgICAgICBrMSA9IGsxICogQzIgJiBNQVNLX0hJR0ggfCBrMSAqIEMyX0xPVyAmIE1BU0tfTE9XO1xuICAgICAgICBpZiAoYmxvY2tDb3VudHMgJiAxKSB7XG4gICAgICAgICAgaDEgXj0gazE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaDIgXj0gazE7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5oMSA9IGgxO1xuICAgIHRoaXMuaDIgPSBoMjtcbiAgfVxuICBoZXhkaWdlc3QoKSB7XG4gICAgbGV0IGgxID0gdGhpcy5oMSxcbiAgICAgIGgyID0gdGhpcy5oMjtcbiAgICBoMSBePSBoMiA+Pj4gMTtcbiAgICBoMSA9IGgxICogMHhlZDU1OGNjZCAmIE1BU0tfSElHSCB8IGgxICogMHg4Y2NkICYgTUFTS19MT1c7XG4gICAgaDIgPSBoMiAqIDB4ZmY1MWFmZDcgJiBNQVNLX0hJR0ggfCAoKGgyIDw8IDE2IHwgaDEgPj4+IDE2KSAqIDB4YWZkN2VkNTUgJiBNQVNLX0hJR0gpID4+PiAxNjtcbiAgICBoMSBePSBoMiA+Pj4gMTtcbiAgICBoMSA9IGgxICogMHgxYTg1ZWM1MyAmIE1BU0tfSElHSCB8IGgxICogMHhlYzUzICYgTUFTS19MT1c7XG4gICAgaDIgPSBoMiAqIDB4YzRjZWI5ZmUgJiBNQVNLX0hJR0ggfCAoKGgyIDw8IDE2IHwgaDEgPj4+IDE2KSAqIDB4YjlmZTFhODUgJiBNQVNLX0hJR0gpID4+PiAxNjtcbiAgICBoMSBePSBoMiA+Pj4gMTtcbiAgICByZXR1cm4gKGgxID4+PiAwKS50b1N0cmluZygxNikucGFkU3RhcnQoOCwgXCIwXCIpICsgKGgyID4+PiAwKS50b1N0cmluZygxNikucGFkU3RhcnQoOCwgXCIwXCIpO1xuICB9XG59XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDI2Njpcbi8qKiovICgoX191bnVzZWRfd2VicGFja19fX3dlYnBhY2tfbW9kdWxlX18sIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuLyogaGFybW9ueSBleHBvcnQgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIHtcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgQWJvcnRFeGNlcHRpb246ICgpID0+ICgvKiBiaW5kaW5nICovIEFib3J0RXhjZXB0aW9uKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgQW5ub3RhdGlvbkJvcmRlclN0eWxlVHlwZTogKCkgPT4gKC8qIGJpbmRpbmcgKi8gQW5ub3RhdGlvbkJvcmRlclN0eWxlVHlwZSksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIEFubm90YXRpb25FZGl0b3JQYXJhbXNUeXBlOiAoKSA9PiAoLyogYmluZGluZyAqLyBBbm5vdGF0aW9uRWRpdG9yUGFyYW1zVHlwZSksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIEFubm90YXRpb25FZGl0b3JQcmVmaXg6ICgpID0+ICgvKiBiaW5kaW5nICovIEFubm90YXRpb25FZGl0b3JQcmVmaXgpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBBbm5vdGF0aW9uRWRpdG9yVHlwZTogKCkgPT4gKC8qIGJpbmRpbmcgKi8gQW5ub3RhdGlvbkVkaXRvclR5cGUpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBBbm5vdGF0aW9uTW9kZTogKCkgPT4gKC8qIGJpbmRpbmcgKi8gQW5ub3RhdGlvbk1vZGUpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBBbm5vdGF0aW9uUHJlZml4OiAoKSA9PiAoLyogYmluZGluZyAqLyBBbm5vdGF0aW9uUHJlZml4KSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgQW5ub3RhdGlvblR5cGU6ICgpID0+ICgvKiBiaW5kaW5nICovIEFubm90YXRpb25UeXBlKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgQmFzZUV4Y2VwdGlvbjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gQmFzZUV4Y2VwdGlvbiksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIENNYXBDb21wcmVzc2lvblR5cGU6ICgpID0+ICgvKiBiaW5kaW5nICovIENNYXBDb21wcmVzc2lvblR5cGUpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBGT05UX0lERU5USVRZX01BVFJJWDogKCkgPT4gKC8qIGJpbmRpbmcgKi8gRk9OVF9JREVOVElUWV9NQVRSSVgpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBGZWF0dXJlVGVzdDogKCkgPT4gKC8qIGJpbmRpbmcgKi8gRmVhdHVyZVRlc3QpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBGb3JtYXRFcnJvcjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gRm9ybWF0RXJyb3IpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBJREVOVElUWV9NQVRSSVg6ICgpID0+ICgvKiBiaW5kaW5nICovIElERU5USVRZX01BVFJJWCksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIEltYWdlS2luZDogKCkgPT4gKC8qIGJpbmRpbmcgKi8gSW1hZ2VLaW5kKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgSW52YWxpZFBERkV4Y2VwdGlvbjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gSW52YWxpZFBERkV4Y2VwdGlvbiksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIExJTkVfRkFDVE9SOiAoKSA9PiAoLyogYmluZGluZyAqLyBMSU5FX0ZBQ1RPUiksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIE1BWF9JTUFHRV9TSVpFX1RPX0NBQ0hFOiAoKSA9PiAoLyogYmluZGluZyAqLyBNQVhfSU1BR0VfU0laRV9UT19DQUNIRSksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIE1pc3NpbmdQREZFeGNlcHRpb246ICgpID0+ICgvKiBiaW5kaW5nICovIE1pc3NpbmdQREZFeGNlcHRpb24pLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBPUFM6ICgpID0+ICgvKiBiaW5kaW5nICovIE9QUyksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFBhc3N3b3JkRXhjZXB0aW9uOiAoKSA9PiAoLyogYmluZGluZyAqLyBQYXNzd29yZEV4Y2VwdGlvbiksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFBhc3N3b3JkUmVzcG9uc2VzOiAoKSA9PiAoLyogYmluZGluZyAqLyBQYXNzd29yZFJlc3BvbnNlcyksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFBlcm1pc3Npb25GbGFnOiAoKSA9PiAoLyogYmluZGluZyAqLyBQZXJtaXNzaW9uRmxhZyksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFByb21pc2VDYXBhYmlsaXR5OiAoKSA9PiAoLyogYmluZGluZyAqLyBQcm9taXNlQ2FwYWJpbGl0eSksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFJlbmRlcmluZ0ludGVudEZsYWc6ICgpID0+ICgvKiBiaW5kaW5nICovIFJlbmRlcmluZ0ludGVudEZsYWcpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBUZXh0UmVuZGVyaW5nTW9kZTogKCkgPT4gKC8qIGJpbmRpbmcgKi8gVGV4dFJlbmRlcmluZ01vZGUpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBVbmV4cGVjdGVkUmVzcG9uc2VFeGNlcHRpb246ICgpID0+ICgvKiBiaW5kaW5nICovIFVuZXhwZWN0ZWRSZXNwb25zZUV4Y2VwdGlvbiksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFVua25vd25FcnJvckV4Y2VwdGlvbjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gVW5rbm93bkVycm9yRXhjZXB0aW9uKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgVXRpbDogKCkgPT4gKC8qIGJpbmRpbmcgKi8gVXRpbCksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFZlcmJvc2l0eUxldmVsOiAoKSA9PiAoLyogYmluZGluZyAqLyBWZXJib3NpdHlMZXZlbCksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIGFzc2VydDogKCkgPT4gKC8qIGJpbmRpbmcgKi8gYXNzZXJ0KSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgYnl0ZXNUb1N0cmluZzogKCkgPT4gKC8qIGJpbmRpbmcgKi8gYnl0ZXNUb1N0cmluZyksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIGNyZWF0ZVZhbGlkQWJzb2x1dGVVcmw6ICgpID0+ICgvKiBiaW5kaW5nICovIGNyZWF0ZVZhbGlkQWJzb2x1dGVVcmwpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBnZXRVdWlkOiAoKSA9PiAoLyogYmluZGluZyAqLyBnZXRVdWlkKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgZ2V0VmVyYm9zaXR5TGV2ZWw6ICgpID0+ICgvKiBiaW5kaW5nICovIGdldFZlcmJvc2l0eUxldmVsKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgaW5mbzogKCkgPT4gKC8qIGJpbmRpbmcgKi8gaW5mbyksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIGlzQXJyYXlCdWZmZXI6ICgpID0+ICgvKiBiaW5kaW5nICovIGlzQXJyYXlCdWZmZXIpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBpc05vZGVKUzogKCkgPT4gKC8qIGJpbmRpbmcgKi8gaXNOb2RlSlMpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBub3JtYWxpemVVbmljb2RlOiAoKSA9PiAoLyogYmluZGluZyAqLyBub3JtYWxpemVVbmljb2RlKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgb2JqZWN0RnJvbU1hcDogKCkgPT4gKC8qIGJpbmRpbmcgKi8gb2JqZWN0RnJvbU1hcCksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIHNldFZlcmJvc2l0eUxldmVsOiAoKSA9PiAoLyogYmluZGluZyAqLyBzZXRWZXJib3NpdHlMZXZlbCksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIHNoYWRvdzogKCkgPT4gKC8qIGJpbmRpbmcgKi8gc2hhZG93KSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgc3RyaW5nMzI6ICgpID0+ICgvKiBiaW5kaW5nICovIHN0cmluZzMyKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgc3RyaW5nVG9CeXRlczogKCkgPT4gKC8qIGJpbmRpbmcgKi8gc3RyaW5nVG9CeXRlcyksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIHVucmVhY2hhYmxlOiAoKSA9PiAoLyogYmluZGluZyAqLyB1bnJlYWNoYWJsZSksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIHdhcm46ICgpID0+ICgvKiBiaW5kaW5nICovIHdhcm4pXG4vKiBoYXJtb255IGV4cG9ydCAqLyB9KTtcbi8qIHVudXNlZCBoYXJtb255IGV4cG9ydHMgQW5ub3RhdGlvbkFjdGlvbkV2ZW50VHlwZSwgQW5ub3RhdGlvbkZpZWxkRmxhZywgQW5ub3RhdGlvbkZsYWcsIEFubm90YXRpb25SZXBseVR5cGUsIEJBU0VMSU5FX0ZBQ1RPUiwgRG9jdW1lbnRBY3Rpb25FdmVudFR5cGUsIGdldE1vZGlmaWNhdGlvbkRhdGUsIGlzQXJyYXlFcXVhbCwgTElORV9ERVNDRU5UX0ZBQ1RPUiwgb2JqZWN0U2l6ZSwgUGFnZUFjdGlvbkV2ZW50VHlwZSwgc3RyaW5nVG9QREZTdHJpbmcsIHN0cmluZ1RvVVRGOFN0cmluZywgdXRmOFN0cmluZ1RvU3RyaW5nICovXG5jb25zdCBpc05vZGVKUyA9IHR5cGVvZiBwcm9jZXNzID09PSBcIm9iamVjdFwiICYmIHByb2Nlc3MgKyBcIlwiID09PSBcIltvYmplY3QgcHJvY2Vzc11cIiAmJiAhcHJvY2Vzcy52ZXJzaW9ucy5udyAmJiAhKHByb2Nlc3MudmVyc2lvbnMuZWxlY3Ryb24gJiYgcHJvY2Vzcy50eXBlICYmIHByb2Nlc3MudHlwZSAhPT0gXCJicm93c2VyXCIpO1xuY29uc3QgSURFTlRJVFlfTUFUUklYID0gWzEsIDAsIDAsIDEsIDAsIDBdO1xuY29uc3QgRk9OVF9JREVOVElUWV9NQVRSSVggPSBbMC4wMDEsIDAsIDAsIDAuMDAxLCAwLCAwXTtcbmNvbnN0IE1BWF9JTUFHRV9TSVpFX1RPX0NBQ0hFID0gMTBlNjtcbmNvbnN0IExJTkVfRkFDVE9SID0gMS4zNTtcbmNvbnN0IExJTkVfREVTQ0VOVF9GQUNUT1IgPSAwLjM1O1xuY29uc3QgQkFTRUxJTkVfRkFDVE9SID0gTElORV9ERVNDRU5UX0ZBQ1RPUiAvIExJTkVfRkFDVE9SO1xuY29uc3QgUmVuZGVyaW5nSW50ZW50RmxhZyA9IHtcbiAgQU5ZOiAweDAxLFxuICBESVNQTEFZOiAweDAyLFxuICBQUklOVDogMHgwNCxcbiAgU0FWRTogMHgwOCxcbiAgQU5OT1RBVElPTlNfRk9STVM6IDB4MTAsXG4gIEFOTk9UQVRJT05TX1NUT1JBR0U6IDB4MjAsXG4gIEFOTk9UQVRJT05TX0RJU0FCTEU6IDB4NDAsXG4gIE9QTElTVDogMHgxMDBcbn07XG5jb25zdCBBbm5vdGF0aW9uTW9kZSA9IHtcbiAgRElTQUJMRTogMCxcbiAgRU5BQkxFOiAxLFxuICBFTkFCTEVfRk9STVM6IDIsXG4gIEVOQUJMRV9TVE9SQUdFOiAzXG59O1xuY29uc3QgQW5ub3RhdGlvbkVkaXRvclByZWZpeCA9IFwicGRmanNfaW50ZXJuYWxfZWRpdG9yX1wiO1xuY29uc3QgQW5ub3RhdGlvbkVkaXRvclR5cGUgPSB7XG4gIERJU0FCTEU6IC0xLFxuICBOT05FOiAwLFxuICBGUkVFVEVYVDogMyxcbiAgSElHSExJR0hUOiA5LFxuICBTVEFNUDogMTMsXG4gIElOSzogMTVcbn07XG5jb25zdCBBbm5vdGF0aW9uRWRpdG9yUGFyYW1zVHlwZSA9IHtcbiAgUkVTSVpFOiAxLFxuICBDUkVBVEU6IDIsXG4gIEZSRUVURVhUX1NJWkU6IDExLFxuICBGUkVFVEVYVF9DT0xPUjogMTIsXG4gIEZSRUVURVhUX09QQUNJVFk6IDEzLFxuICBJTktfQ09MT1I6IDIxLFxuICBJTktfVEhJQ0tORVNTOiAyMixcbiAgSU5LX09QQUNJVFk6IDIzLFxuICBISUdITElHSFRfQ09MT1I6IDMxLFxuICBISUdITElHSFRfREVGQVVMVF9DT0xPUjogMzJcbn07XG5jb25zdCBQZXJtaXNzaW9uRmxhZyA9IHtcbiAgUFJJTlQ6IDB4MDQsXG4gIE1PRElGWV9DT05URU5UUzogMHgwOCxcbiAgQ09QWTogMHgxMCxcbiAgTU9ESUZZX0FOTk9UQVRJT05TOiAweDIwLFxuICBGSUxMX0lOVEVSQUNUSVZFX0ZPUk1TOiAweDEwMCxcbiAgQ09QWV9GT1JfQUNDRVNTSUJJTElUWTogMHgyMDAsXG4gIEFTU0VNQkxFOiAweDQwMCxcbiAgUFJJTlRfSElHSF9RVUFMSVRZOiAweDgwMFxufTtcbmNvbnN0IFRleHRSZW5kZXJpbmdNb2RlID0ge1xuICBGSUxMOiAwLFxuICBTVFJPS0U6IDEsXG4gIEZJTExfU1RST0tFOiAyLFxuICBJTlZJU0lCTEU6IDMsXG4gIEZJTExfQUREX1RPX1BBVEg6IDQsXG4gIFNUUk9LRV9BRERfVE9fUEFUSDogNSxcbiAgRklMTF9TVFJPS0VfQUREX1RPX1BBVEg6IDYsXG4gIEFERF9UT19QQVRIOiA3LFxuICBGSUxMX1NUUk9LRV9NQVNLOiAzLFxuICBBRERfVE9fUEFUSF9GTEFHOiA0XG59O1xuY29uc3QgSW1hZ2VLaW5kID0ge1xuICBHUkFZU0NBTEVfMUJQUDogMSxcbiAgUkdCXzI0QlBQOiAyLFxuICBSR0JBXzMyQlBQOiAzXG59O1xuY29uc3QgQW5ub3RhdGlvblR5cGUgPSB7XG4gIFRFWFQ6IDEsXG4gIExJTks6IDIsXG4gIEZSRUVURVhUOiAzLFxuICBMSU5FOiA0LFxuICBTUVVBUkU6IDUsXG4gIENJUkNMRTogNixcbiAgUE9MWUdPTjogNyxcbiAgUE9MWUxJTkU6IDgsXG4gIEhJR0hMSUdIVDogOSxcbiAgVU5ERVJMSU5FOiAxMCxcbiAgU1FVSUdHTFk6IDExLFxuICBTVFJJS0VPVVQ6IDEyLFxuICBTVEFNUDogMTMsXG4gIENBUkVUOiAxNCxcbiAgSU5LOiAxNSxcbiAgUE9QVVA6IDE2LFxuICBGSUxFQVRUQUNITUVOVDogMTcsXG4gIFNPVU5EOiAxOCxcbiAgTU9WSUU6IDE5LFxuICBXSURHRVQ6IDIwLFxuICBTQ1JFRU46IDIxLFxuICBQUklOVEVSTUFSSzogMjIsXG4gIFRSQVBORVQ6IDIzLFxuICBXQVRFUk1BUks6IDI0LFxuICBUSFJFRUQ6IDI1LFxuICBSRURBQ1Q6IDI2XG59O1xuY29uc3QgQW5ub3RhdGlvblJlcGx5VHlwZSA9IHtcbiAgR1JPVVA6IFwiR3JvdXBcIixcbiAgUkVQTFk6IFwiUlwiXG59O1xuY29uc3QgQW5ub3RhdGlvbkZsYWcgPSB7XG4gIElOVklTSUJMRTogMHgwMSxcbiAgSElEREVOOiAweDAyLFxuICBQUklOVDogMHgwNCxcbiAgTk9aT09NOiAweDA4LFxuICBOT1JPVEFURTogMHgxMCxcbiAgTk9WSUVXOiAweDIwLFxuICBSRUFET05MWTogMHg0MCxcbiAgTE9DS0VEOiAweDgwLFxuICBUT0dHTEVOT1ZJRVc6IDB4MTAwLFxuICBMT0NLRURDT05URU5UUzogMHgyMDBcbn07XG5jb25zdCBBbm5vdGF0aW9uRmllbGRGbGFnID0ge1xuICBSRUFET05MWTogMHgwMDAwMDAxLFxuICBSRVFVSVJFRDogMHgwMDAwMDAyLFxuICBOT0VYUE9SVDogMHgwMDAwMDA0LFxuICBNVUxUSUxJTkU6IDB4MDAwMTAwMCxcbiAgUEFTU1dPUkQ6IDB4MDAwMjAwMCxcbiAgTk9UT0dHTEVUT09GRjogMHgwMDA0MDAwLFxuICBSQURJTzogMHgwMDA4MDAwLFxuICBQVVNIQlVUVE9OOiAweDAwMTAwMDAsXG4gIENPTUJPOiAweDAwMjAwMDAsXG4gIEVESVQ6IDB4MDA0MDAwMCxcbiAgU09SVDogMHgwMDgwMDAwLFxuICBGSUxFU0VMRUNUOiAweDAxMDAwMDAsXG4gIE1VTFRJU0VMRUNUOiAweDAyMDAwMDAsXG4gIERPTk9UU1BFTExDSEVDSzogMHgwNDAwMDAwLFxuICBET05PVFNDUk9MTDogMHgwODAwMDAwLFxuICBDT01COiAweDEwMDAwMDAsXG4gIFJJQ0hURVhUOiAweDIwMDAwMDAsXG4gIFJBRElPU0lOVU5JU09OOiAweDIwMDAwMDAsXG4gIENPTU1JVE9OU0VMQ0hBTkdFOiAweDQwMDAwMDBcbn07XG5jb25zdCBBbm5vdGF0aW9uQm9yZGVyU3R5bGVUeXBlID0ge1xuICBTT0xJRDogMSxcbiAgREFTSEVEOiAyLFxuICBCRVZFTEVEOiAzLFxuICBJTlNFVDogNCxcbiAgVU5ERVJMSU5FOiA1XG59O1xuY29uc3QgQW5ub3RhdGlvbkFjdGlvbkV2ZW50VHlwZSA9IHtcbiAgRTogXCJNb3VzZSBFbnRlclwiLFxuICBYOiBcIk1vdXNlIEV4aXRcIixcbiAgRDogXCJNb3VzZSBEb3duXCIsXG4gIFU6IFwiTW91c2UgVXBcIixcbiAgRm86IFwiRm9jdXNcIixcbiAgQmw6IFwiQmx1clwiLFxuICBQTzogXCJQYWdlT3BlblwiLFxuICBQQzogXCJQYWdlQ2xvc2VcIixcbiAgUFY6IFwiUGFnZVZpc2libGVcIixcbiAgUEk6IFwiUGFnZUludmlzaWJsZVwiLFxuICBLOiBcIktleXN0cm9rZVwiLFxuICBGOiBcIkZvcm1hdFwiLFxuICBWOiBcIlZhbGlkYXRlXCIsXG4gIEM6IFwiQ2FsY3VsYXRlXCJcbn07XG5jb25zdCBEb2N1bWVudEFjdGlvbkV2ZW50VHlwZSA9IHtcbiAgV0M6IFwiV2lsbENsb3NlXCIsXG4gIFdTOiBcIldpbGxTYXZlXCIsXG4gIERTOiBcIkRpZFNhdmVcIixcbiAgV1A6IFwiV2lsbFByaW50XCIsXG4gIERQOiBcIkRpZFByaW50XCJcbn07XG5jb25zdCBQYWdlQWN0aW9uRXZlbnRUeXBlID0ge1xuICBPOiBcIlBhZ2VPcGVuXCIsXG4gIEM6IFwiUGFnZUNsb3NlXCJcbn07XG5jb25zdCBWZXJib3NpdHlMZXZlbCA9IHtcbiAgRVJST1JTOiAwLFxuICBXQVJOSU5HUzogMSxcbiAgSU5GT1M6IDVcbn07XG5jb25zdCBDTWFwQ29tcHJlc3Npb25UeXBlID0ge1xuICBOT05FOiAwLFxuICBCSU5BUlk6IDFcbn07XG5jb25zdCBPUFMgPSB7XG4gIGRlcGVuZGVuY3k6IDEsXG4gIHNldExpbmVXaWR0aDogMixcbiAgc2V0TGluZUNhcDogMyxcbiAgc2V0TGluZUpvaW46IDQsXG4gIHNldE1pdGVyTGltaXQ6IDUsXG4gIHNldERhc2g6IDYsXG4gIHNldFJlbmRlcmluZ0ludGVudDogNyxcbiAgc2V0RmxhdG5lc3M6IDgsXG4gIHNldEdTdGF0ZTogOSxcbiAgc2F2ZTogMTAsXG4gIHJlc3RvcmU6IDExLFxuICB0cmFuc2Zvcm06IDEyLFxuICBtb3ZlVG86IDEzLFxuICBsaW5lVG86IDE0LFxuICBjdXJ2ZVRvOiAxNSxcbiAgY3VydmVUbzI6IDE2LFxuICBjdXJ2ZVRvMzogMTcsXG4gIGNsb3NlUGF0aDogMTgsXG4gIHJlY3RhbmdsZTogMTksXG4gIHN0cm9rZTogMjAsXG4gIGNsb3NlU3Ryb2tlOiAyMSxcbiAgZmlsbDogMjIsXG4gIGVvRmlsbDogMjMsXG4gIGZpbGxTdHJva2U6IDI0LFxuICBlb0ZpbGxTdHJva2U6IDI1LFxuICBjbG9zZUZpbGxTdHJva2U6IDI2LFxuICBjbG9zZUVPRmlsbFN0cm9rZTogMjcsXG4gIGVuZFBhdGg6IDI4LFxuICBjbGlwOiAyOSxcbiAgZW9DbGlwOiAzMCxcbiAgYmVnaW5UZXh0OiAzMSxcbiAgZW5kVGV4dDogMzIsXG4gIHNldENoYXJTcGFjaW5nOiAzMyxcbiAgc2V0V29yZFNwYWNpbmc6IDM0LFxuICBzZXRIU2NhbGU6IDM1LFxuICBzZXRMZWFkaW5nOiAzNixcbiAgc2V0Rm9udDogMzcsXG4gIHNldFRleHRSZW5kZXJpbmdNb2RlOiAzOCxcbiAgc2V0VGV4dFJpc2U6IDM5LFxuICBtb3ZlVGV4dDogNDAsXG4gIHNldExlYWRpbmdNb3ZlVGV4dDogNDEsXG4gIHNldFRleHRNYXRyaXg6IDQyLFxuICBuZXh0TGluZTogNDMsXG4gIHNob3dUZXh0OiA0NCxcbiAgc2hvd1NwYWNlZFRleHQ6IDQ1LFxuICBuZXh0TGluZVNob3dUZXh0OiA0NixcbiAgbmV4dExpbmVTZXRTcGFjaW5nU2hvd1RleHQ6IDQ3LFxuICBzZXRDaGFyV2lkdGg6IDQ4LFxuICBzZXRDaGFyV2lkdGhBbmRCb3VuZHM6IDQ5LFxuICBzZXRTdHJva2VDb2xvclNwYWNlOiA1MCxcbiAgc2V0RmlsbENvbG9yU3BhY2U6IDUxLFxuICBzZXRTdHJva2VDb2xvcjogNTIsXG4gIHNldFN0cm9rZUNvbG9yTjogNTMsXG4gIHNldEZpbGxDb2xvcjogNTQsXG4gIHNldEZpbGxDb2xvck46IDU1LFxuICBzZXRTdHJva2VHcmF5OiA1NixcbiAgc2V0RmlsbEdyYXk6IDU3LFxuICBzZXRTdHJva2VSR0JDb2xvcjogNTgsXG4gIHNldEZpbGxSR0JDb2xvcjogNTksXG4gIHNldFN0cm9rZUNNWUtDb2xvcjogNjAsXG4gIHNldEZpbGxDTVlLQ29sb3I6IDYxLFxuICBzaGFkaW5nRmlsbDogNjIsXG4gIGJlZ2luSW5saW5lSW1hZ2U6IDYzLFxuICBiZWdpbkltYWdlRGF0YTogNjQsXG4gIGVuZElubGluZUltYWdlOiA2NSxcbiAgcGFpbnRYT2JqZWN0OiA2NixcbiAgbWFya1BvaW50OiA2NyxcbiAgbWFya1BvaW50UHJvcHM6IDY4LFxuICBiZWdpbk1hcmtlZENvbnRlbnQ6IDY5LFxuICBiZWdpbk1hcmtlZENvbnRlbnRQcm9wczogNzAsXG4gIGVuZE1hcmtlZENvbnRlbnQ6IDcxLFxuICBiZWdpbkNvbXBhdDogNzIsXG4gIGVuZENvbXBhdDogNzMsXG4gIHBhaW50Rm9ybVhPYmplY3RCZWdpbjogNzQsXG4gIHBhaW50Rm9ybVhPYmplY3RFbmQ6IDc1LFxuICBiZWdpbkdyb3VwOiA3NixcbiAgZW5kR3JvdXA6IDc3LFxuICBiZWdpbkFubm90YXRpb246IDgwLFxuICBlbmRBbm5vdGF0aW9uOiA4MSxcbiAgcGFpbnRJbWFnZU1hc2tYT2JqZWN0OiA4MyxcbiAgcGFpbnRJbWFnZU1hc2tYT2JqZWN0R3JvdXA6IDg0LFxuICBwYWludEltYWdlWE9iamVjdDogODUsXG4gIHBhaW50SW5saW5lSW1hZ2VYT2JqZWN0OiA4NixcbiAgcGFpbnRJbmxpbmVJbWFnZVhPYmplY3RHcm91cDogODcsXG4gIHBhaW50SW1hZ2VYT2JqZWN0UmVwZWF0OiA4OCxcbiAgcGFpbnRJbWFnZU1hc2tYT2JqZWN0UmVwZWF0OiA4OSxcbiAgcGFpbnRTb2xpZENvbG9ySW1hZ2VNYXNrOiA5MCxcbiAgY29uc3RydWN0UGF0aDogOTFcbn07XG5jb25zdCBQYXNzd29yZFJlc3BvbnNlcyA9IHtcbiAgTkVFRF9QQVNTV09SRDogMSxcbiAgSU5DT1JSRUNUX1BBU1NXT1JEOiAyXG59O1xubGV0IHZlcmJvc2l0eSA9IFZlcmJvc2l0eUxldmVsLldBUk5JTkdTO1xuZnVuY3Rpb24gc2V0VmVyYm9zaXR5TGV2ZWwobGV2ZWwpIHtcbiAgaWYgKE51bWJlci5pc0ludGVnZXIobGV2ZWwpKSB7XG4gICAgdmVyYm9zaXR5ID0gbGV2ZWw7XG4gIH1cbn1cbmZ1bmN0aW9uIGdldFZlcmJvc2l0eUxldmVsKCkge1xuICByZXR1cm4gdmVyYm9zaXR5O1xufVxuZnVuY3Rpb24gaW5mbyhtc2cpIHtcbiAgaWYgKHZlcmJvc2l0eSA+PSBWZXJib3NpdHlMZXZlbC5JTkZPUykge1xuICAgIGNvbnNvbGUubG9nKGBJbmZvOiAke21zZ31gKTtcbiAgfVxufVxuZnVuY3Rpb24gd2Fybihtc2cpIHtcbiAgaWYgKHZlcmJvc2l0eSA+PSBWZXJib3NpdHlMZXZlbC5XQVJOSU5HUykge1xuICAgIGNvbnNvbGUubG9nKGBXYXJuaW5nOiAke21zZ31gKTtcbiAgfVxufVxuZnVuY3Rpb24gdW5yZWFjaGFibGUobXNnKSB7XG4gIHRocm93IG5ldyBFcnJvcihtc2cpO1xufVxuZnVuY3Rpb24gYXNzZXJ0KGNvbmQsIG1zZykge1xuICBpZiAoIWNvbmQpIHtcbiAgICB1bnJlYWNoYWJsZShtc2cpO1xuICB9XG59XG5mdW5jdGlvbiBfaXNWYWxpZFByb3RvY29sKHVybCkge1xuICBzd2l0Y2ggKHVybD8ucHJvdG9jb2wpIHtcbiAgICBjYXNlIFwiaHR0cDpcIjpcbiAgICBjYXNlIFwiaHR0cHM6XCI6XG4gICAgY2FzZSBcImZ0cDpcIjpcbiAgICBjYXNlIFwibWFpbHRvOlwiOlxuICAgIGNhc2UgXCJ0ZWw6XCI6XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5mdW5jdGlvbiBjcmVhdGVWYWxpZEFic29sdXRlVXJsKHVybCwgYmFzZVVybCA9IG51bGwsIG9wdGlvbnMgPSBudWxsKSB7XG4gIGlmICghdXJsKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgdHJ5IHtcbiAgICBpZiAob3B0aW9ucyAmJiB0eXBlb2YgdXJsID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBpZiAob3B0aW9ucy5hZGREZWZhdWx0UHJvdG9jb2wgJiYgdXJsLnN0YXJ0c1dpdGgoXCJ3d3cuXCIpKSB7XG4gICAgICAgIGNvbnN0IGRvdHMgPSB1cmwubWF0Y2goL1xcLi9nKTtcbiAgICAgICAgaWYgKGRvdHM/Lmxlbmd0aCA+PSAyKSB7XG4gICAgICAgICAgdXJsID0gYGh0dHA6Ly8ke3VybH1gO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAob3B0aW9ucy50cnlDb252ZXJ0RW5jb2RpbmcpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB1cmwgPSBzdHJpbmdUb1VURjhTdHJpbmcodXJsKTtcbiAgICAgICAgfSBjYXRjaCB7fVxuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBhYnNvbHV0ZVVybCA9IGJhc2VVcmwgPyBuZXcgVVJMKHVybCwgYmFzZVVybCkgOiBuZXcgVVJMKHVybCk7XG4gICAgaWYgKF9pc1ZhbGlkUHJvdG9jb2woYWJzb2x1dGVVcmwpKSB7XG4gICAgICByZXR1cm4gYWJzb2x1dGVVcmw7XG4gICAgfVxuICB9IGNhdGNoIHt9XG4gIHJldHVybiBudWxsO1xufVxuZnVuY3Rpb24gc2hhZG93KG9iaiwgcHJvcCwgdmFsdWUsIG5vblNlcmlhbGl6YWJsZSA9IGZhbHNlKSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIHByb3AsIHtcbiAgICB2YWx1ZSxcbiAgICBlbnVtZXJhYmxlOiAhbm9uU2VyaWFsaXphYmxlLFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICB3cml0YWJsZTogZmFsc2VcbiAgfSk7XG4gIHJldHVybiB2YWx1ZTtcbn1cbmNvbnN0IEJhc2VFeGNlcHRpb24gPSBmdW5jdGlvbiBCYXNlRXhjZXB0aW9uQ2xvc3VyZSgpIHtcbiAgZnVuY3Rpb24gQmFzZUV4Y2VwdGlvbihtZXNzYWdlLCBuYW1lKSB7XG4gICAgaWYgKHRoaXMuY29uc3RydWN0b3IgPT09IEJhc2VFeGNlcHRpb24pIHtcbiAgICAgIHVucmVhY2hhYmxlKFwiQ2Fubm90IGluaXRpYWxpemUgQmFzZUV4Y2VwdGlvbi5cIik7XG4gICAgfVxuICAgIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG4gICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgfVxuICBCYXNlRXhjZXB0aW9uLnByb3RvdHlwZSA9IG5ldyBFcnJvcigpO1xuICBCYXNlRXhjZXB0aW9uLmNvbnN0cnVjdG9yID0gQmFzZUV4Y2VwdGlvbjtcbiAgcmV0dXJuIEJhc2VFeGNlcHRpb247XG59KCk7XG5jbGFzcyBQYXNzd29yZEV4Y2VwdGlvbiBleHRlbmRzIEJhc2VFeGNlcHRpb24ge1xuICBjb25zdHJ1Y3Rvcihtc2csIGNvZGUpIHtcbiAgICBzdXBlcihtc2csIFwiUGFzc3dvcmRFeGNlcHRpb25cIik7XG4gICAgdGhpcy5jb2RlID0gY29kZTtcbiAgfVxufVxuY2xhc3MgVW5rbm93bkVycm9yRXhjZXB0aW9uIGV4dGVuZHMgQmFzZUV4Y2VwdGlvbiB7XG4gIGNvbnN0cnVjdG9yKG1zZywgZGV0YWlscykge1xuICAgIHN1cGVyKG1zZywgXCJVbmtub3duRXJyb3JFeGNlcHRpb25cIik7XG4gICAgdGhpcy5kZXRhaWxzID0gZGV0YWlscztcbiAgfVxufVxuY2xhc3MgSW52YWxpZFBERkV4Y2VwdGlvbiBleHRlbmRzIEJhc2VFeGNlcHRpb24ge1xuICBjb25zdHJ1Y3Rvcihtc2cpIHtcbiAgICBzdXBlcihtc2csIFwiSW52YWxpZFBERkV4Y2VwdGlvblwiKTtcbiAgfVxufVxuY2xhc3MgTWlzc2luZ1BERkV4Y2VwdGlvbiBleHRlbmRzIEJhc2VFeGNlcHRpb24ge1xuICBjb25zdHJ1Y3Rvcihtc2cpIHtcbiAgICBzdXBlcihtc2csIFwiTWlzc2luZ1BERkV4Y2VwdGlvblwiKTtcbiAgfVxufVxuY2xhc3MgVW5leHBlY3RlZFJlc3BvbnNlRXhjZXB0aW9uIGV4dGVuZHMgQmFzZUV4Y2VwdGlvbiB7XG4gIGNvbnN0cnVjdG9yKG1zZywgc3RhdHVzKSB7XG4gICAgc3VwZXIobXNnLCBcIlVuZXhwZWN0ZWRSZXNwb25zZUV4Y2VwdGlvblwiKTtcbiAgICB0aGlzLnN0YXR1cyA9IHN0YXR1cztcbiAgfVxufVxuY2xhc3MgRm9ybWF0RXJyb3IgZXh0ZW5kcyBCYXNlRXhjZXB0aW9uIHtcbiAgY29uc3RydWN0b3IobXNnKSB7XG4gICAgc3VwZXIobXNnLCBcIkZvcm1hdEVycm9yXCIpO1xuICB9XG59XG5jbGFzcyBBYm9ydEV4Y2VwdGlvbiBleHRlbmRzIEJhc2VFeGNlcHRpb24ge1xuICBjb25zdHJ1Y3Rvcihtc2cpIHtcbiAgICBzdXBlcihtc2csIFwiQWJvcnRFeGNlcHRpb25cIik7XG4gIH1cbn1cbmZ1bmN0aW9uIGJ5dGVzVG9TdHJpbmcoYnl0ZXMpIHtcbiAgaWYgKHR5cGVvZiBieXRlcyAhPT0gXCJvYmplY3RcIiB8fCBieXRlcz8ubGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICB1bnJlYWNoYWJsZShcIkludmFsaWQgYXJndW1lbnQgZm9yIGJ5dGVzVG9TdHJpbmdcIik7XG4gIH1cbiAgY29uc3QgbGVuZ3RoID0gYnl0ZXMubGVuZ3RoO1xuICBjb25zdCBNQVhfQVJHVU1FTlRfQ09VTlQgPSA4MTkyO1xuICBpZiAobGVuZ3RoIDwgTUFYX0FSR1VNRU5UX0NPVU5UKSB7XG4gICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCwgYnl0ZXMpO1xuICB9XG4gIGNvbnN0IHN0ckJ1ZiA9IFtdO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSArPSBNQVhfQVJHVU1FTlRfQ09VTlQpIHtcbiAgICBjb25zdCBjaHVua0VuZCA9IE1hdGgubWluKGkgKyBNQVhfQVJHVU1FTlRfQ09VTlQsIGxlbmd0aCk7XG4gICAgY29uc3QgY2h1bmsgPSBieXRlcy5zdWJhcnJheShpLCBjaHVua0VuZCk7XG4gICAgc3RyQnVmLnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLCBjaHVuaykpO1xuICB9XG4gIHJldHVybiBzdHJCdWYuam9pbihcIlwiKTtcbn1cbmZ1bmN0aW9uIHN0cmluZ1RvQnl0ZXMoc3RyKSB7XG4gIGlmICh0eXBlb2Ygc3RyICE9PSBcInN0cmluZ1wiKSB7XG4gICAgdW5yZWFjaGFibGUoXCJJbnZhbGlkIGFyZ3VtZW50IGZvciBzdHJpbmdUb0J5dGVzXCIpO1xuICB9XG4gIGNvbnN0IGxlbmd0aCA9IHN0ci5sZW5ndGg7XG4gIGNvbnN0IGJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkobGVuZ3RoKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIGJ5dGVzW2ldID0gc3RyLmNoYXJDb2RlQXQoaSkgJiAweGZmO1xuICB9XG4gIHJldHVybiBieXRlcztcbn1cbmZ1bmN0aW9uIHN0cmluZzMyKHZhbHVlKSB7XG4gIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKHZhbHVlID4+IDI0ICYgMHhmZiwgdmFsdWUgPj4gMTYgJiAweGZmLCB2YWx1ZSA+PiA4ICYgMHhmZiwgdmFsdWUgJiAweGZmKTtcbn1cbmZ1bmN0aW9uIG9iamVjdFNpemUob2JqKSB7XG4gIHJldHVybiBPYmplY3Qua2V5cyhvYmopLmxlbmd0aDtcbn1cbmZ1bmN0aW9uIG9iamVjdEZyb21NYXAobWFwKSB7XG4gIGNvbnN0IG9iaiA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIG1hcCkge1xuICAgIG9ialtrZXldID0gdmFsdWU7XG4gIH1cbiAgcmV0dXJuIG9iajtcbn1cbmZ1bmN0aW9uIGlzTGl0dGxlRW5kaWFuKCkge1xuICBjb25zdCBidWZmZXI4ID0gbmV3IFVpbnQ4QXJyYXkoNCk7XG4gIGJ1ZmZlcjhbMF0gPSAxO1xuICBjb25zdCB2aWV3MzIgPSBuZXcgVWludDMyQXJyYXkoYnVmZmVyOC5idWZmZXIsIDAsIDEpO1xuICByZXR1cm4gdmlldzMyWzBdID09PSAxO1xufVxuZnVuY3Rpb24gaXNFdmFsU3VwcG9ydGVkKCkge1xuICB0cnkge1xuICAgIG5ldyBGdW5jdGlvbihcIlwiKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBjYXRjaCB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5jbGFzcyBGZWF0dXJlVGVzdCB7XG4gIHN0YXRpYyBnZXQgaXNMaXR0bGVFbmRpYW4oKSB7XG4gICAgcmV0dXJuIHNoYWRvdyh0aGlzLCBcImlzTGl0dGxlRW5kaWFuXCIsIGlzTGl0dGxlRW5kaWFuKCkpO1xuICB9XG4gIHN0YXRpYyBnZXQgaXNFdmFsU3VwcG9ydGVkKCkge1xuICAgIHJldHVybiBzaGFkb3codGhpcywgXCJpc0V2YWxTdXBwb3J0ZWRcIiwgaXNFdmFsU3VwcG9ydGVkKCkpO1xuICB9XG4gIHN0YXRpYyBnZXQgaXNPZmZzY3JlZW5DYW52YXNTdXBwb3J0ZWQoKSB7XG4gICAgcmV0dXJuIHNoYWRvdyh0aGlzLCBcImlzT2Zmc2NyZWVuQ2FudmFzU3VwcG9ydGVkXCIsIHR5cGVvZiBPZmZzY3JlZW5DYW52YXMgIT09IFwidW5kZWZpbmVkXCIpO1xuICB9XG4gIHN0YXRpYyBnZXQgcGxhdGZvcm0oKSB7XG4gICAgaWYgKHR5cGVvZiBuYXZpZ2F0b3IgIT09IFwidW5kZWZpbmVkXCIgJiYgdHlwZW9mIG5hdmlnYXRvcj8ucGxhdGZvcm0gPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIHJldHVybiBzaGFkb3codGhpcywgXCJwbGF0Zm9ybVwiLCB7XG4gICAgICAgIGlzTWFjOiBuYXZpZ2F0b3IucGxhdGZvcm0uaW5jbHVkZXMoXCJNYWNcIilcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gc2hhZG93KHRoaXMsIFwicGxhdGZvcm1cIiwge1xuICAgICAgaXNNYWM6IGZhbHNlXG4gICAgfSk7XG4gIH1cbiAgc3RhdGljIGdldCBpc0NTU1JvdW5kU3VwcG9ydGVkKCkge1xuICAgIHJldHVybiBzaGFkb3codGhpcywgXCJpc0NTU1JvdW5kU3VwcG9ydGVkXCIsIGdsb2JhbFRoaXMuQ1NTPy5zdXBwb3J0cz8uKFwid2lkdGg6IHJvdW5kKDEuNXB4LCAxcHgpXCIpKTtcbiAgfVxufVxuY29uc3QgaGV4TnVtYmVycyA9IFsuLi5BcnJheSgyNTYpLmtleXMoKV0ubWFwKG4gPT4gbi50b1N0cmluZygxNikucGFkU3RhcnQoMiwgXCIwXCIpKTtcbmNsYXNzIFV0aWwge1xuICBzdGF0aWMgbWFrZUhleENvbG9yKHIsIGcsIGIpIHtcbiAgICByZXR1cm4gYCMke2hleE51bWJlcnNbcl19JHtoZXhOdW1iZXJzW2ddfSR7aGV4TnVtYmVyc1tiXX1gO1xuICB9XG4gIHN0YXRpYyBzY2FsZU1pbk1heCh0cmFuc2Zvcm0sIG1pbk1heCkge1xuICAgIGxldCB0ZW1wO1xuICAgIGlmICh0cmFuc2Zvcm1bMF0pIHtcbiAgICAgIGlmICh0cmFuc2Zvcm1bMF0gPCAwKSB7XG4gICAgICAgIHRlbXAgPSBtaW5NYXhbMF07XG4gICAgICAgIG1pbk1heFswXSA9IG1pbk1heFsxXTtcbiAgICAgICAgbWluTWF4WzFdID0gdGVtcDtcbiAgICAgIH1cbiAgICAgIG1pbk1heFswXSAqPSB0cmFuc2Zvcm1bMF07XG4gICAgICBtaW5NYXhbMV0gKj0gdHJhbnNmb3JtWzBdO1xuICAgICAgaWYgKHRyYW5zZm9ybVszXSA8IDApIHtcbiAgICAgICAgdGVtcCA9IG1pbk1heFsyXTtcbiAgICAgICAgbWluTWF4WzJdID0gbWluTWF4WzNdO1xuICAgICAgICBtaW5NYXhbM10gPSB0ZW1wO1xuICAgICAgfVxuICAgICAgbWluTWF4WzJdICo9IHRyYW5zZm9ybVszXTtcbiAgICAgIG1pbk1heFszXSAqPSB0cmFuc2Zvcm1bM107XG4gICAgfSBlbHNlIHtcbiAgICAgIHRlbXAgPSBtaW5NYXhbMF07XG4gICAgICBtaW5NYXhbMF0gPSBtaW5NYXhbMl07XG4gICAgICBtaW5NYXhbMl0gPSB0ZW1wO1xuICAgICAgdGVtcCA9IG1pbk1heFsxXTtcbiAgICAgIG1pbk1heFsxXSA9IG1pbk1heFszXTtcbiAgICAgIG1pbk1heFszXSA9IHRlbXA7XG4gICAgICBpZiAodHJhbnNmb3JtWzFdIDwgMCkge1xuICAgICAgICB0ZW1wID0gbWluTWF4WzJdO1xuICAgICAgICBtaW5NYXhbMl0gPSBtaW5NYXhbM107XG4gICAgICAgIG1pbk1heFszXSA9IHRlbXA7XG4gICAgICB9XG4gICAgICBtaW5NYXhbMl0gKj0gdHJhbnNmb3JtWzFdO1xuICAgICAgbWluTWF4WzNdICo9IHRyYW5zZm9ybVsxXTtcbiAgICAgIGlmICh0cmFuc2Zvcm1bMl0gPCAwKSB7XG4gICAgICAgIHRlbXAgPSBtaW5NYXhbMF07XG4gICAgICAgIG1pbk1heFswXSA9IG1pbk1heFsxXTtcbiAgICAgICAgbWluTWF4WzFdID0gdGVtcDtcbiAgICAgIH1cbiAgICAgIG1pbk1heFswXSAqPSB0cmFuc2Zvcm1bMl07XG4gICAgICBtaW5NYXhbMV0gKj0gdHJhbnNmb3JtWzJdO1xuICAgIH1cbiAgICBtaW5NYXhbMF0gKz0gdHJhbnNmb3JtWzRdO1xuICAgIG1pbk1heFsxXSArPSB0cmFuc2Zvcm1bNF07XG4gICAgbWluTWF4WzJdICs9IHRyYW5zZm9ybVs1XTtcbiAgICBtaW5NYXhbM10gKz0gdHJhbnNmb3JtWzVdO1xuICB9XG4gIHN0YXRpYyB0cmFuc2Zvcm0obTEsIG0yKSB7XG4gICAgcmV0dXJuIFttMVswXSAqIG0yWzBdICsgbTFbMl0gKiBtMlsxXSwgbTFbMV0gKiBtMlswXSArIG0xWzNdICogbTJbMV0sIG0xWzBdICogbTJbMl0gKyBtMVsyXSAqIG0yWzNdLCBtMVsxXSAqIG0yWzJdICsgbTFbM10gKiBtMlszXSwgbTFbMF0gKiBtMls0XSArIG0xWzJdICogbTJbNV0gKyBtMVs0XSwgbTFbMV0gKiBtMls0XSArIG0xWzNdICogbTJbNV0gKyBtMVs1XV07XG4gIH1cbiAgc3RhdGljIGFwcGx5VHJhbnNmb3JtKHAsIG0pIHtcbiAgICBjb25zdCB4dCA9IHBbMF0gKiBtWzBdICsgcFsxXSAqIG1bMl0gKyBtWzRdO1xuICAgIGNvbnN0IHl0ID0gcFswXSAqIG1bMV0gKyBwWzFdICogbVszXSArIG1bNV07XG4gICAgcmV0dXJuIFt4dCwgeXRdO1xuICB9XG4gIHN0YXRpYyBhcHBseUludmVyc2VUcmFuc2Zvcm0ocCwgbSkge1xuICAgIGNvbnN0IGQgPSBtWzBdICogbVszXSAtIG1bMV0gKiBtWzJdO1xuICAgIGNvbnN0IHh0ID0gKHBbMF0gKiBtWzNdIC0gcFsxXSAqIG1bMl0gKyBtWzJdICogbVs1XSAtIG1bNF0gKiBtWzNdKSAvIGQ7XG4gICAgY29uc3QgeXQgPSAoLXBbMF0gKiBtWzFdICsgcFsxXSAqIG1bMF0gKyBtWzRdICogbVsxXSAtIG1bNV0gKiBtWzBdKSAvIGQ7XG4gICAgcmV0dXJuIFt4dCwgeXRdO1xuICB9XG4gIHN0YXRpYyBnZXRBeGlhbEFsaWduZWRCb3VuZGluZ0JveChyLCBtKSB7XG4gICAgY29uc3QgcDEgPSB0aGlzLmFwcGx5VHJhbnNmb3JtKHIsIG0pO1xuICAgIGNvbnN0IHAyID0gdGhpcy5hcHBseVRyYW5zZm9ybShyLnNsaWNlKDIsIDQpLCBtKTtcbiAgICBjb25zdCBwMyA9IHRoaXMuYXBwbHlUcmFuc2Zvcm0oW3JbMF0sIHJbM11dLCBtKTtcbiAgICBjb25zdCBwNCA9IHRoaXMuYXBwbHlUcmFuc2Zvcm0oW3JbMl0sIHJbMV1dLCBtKTtcbiAgICByZXR1cm4gW01hdGgubWluKHAxWzBdLCBwMlswXSwgcDNbMF0sIHA0WzBdKSwgTWF0aC5taW4ocDFbMV0sIHAyWzFdLCBwM1sxXSwgcDRbMV0pLCBNYXRoLm1heChwMVswXSwgcDJbMF0sIHAzWzBdLCBwNFswXSksIE1hdGgubWF4KHAxWzFdLCBwMlsxXSwgcDNbMV0sIHA0WzFdKV07XG4gIH1cbiAgc3RhdGljIGludmVyc2VUcmFuc2Zvcm0obSkge1xuICAgIGNvbnN0IGQgPSBtWzBdICogbVszXSAtIG1bMV0gKiBtWzJdO1xuICAgIHJldHVybiBbbVszXSAvIGQsIC1tWzFdIC8gZCwgLW1bMl0gLyBkLCBtWzBdIC8gZCwgKG1bMl0gKiBtWzVdIC0gbVs0XSAqIG1bM10pIC8gZCwgKG1bNF0gKiBtWzFdIC0gbVs1XSAqIG1bMF0pIC8gZF07XG4gIH1cbiAgc3RhdGljIHNpbmd1bGFyVmFsdWVEZWNvbXBvc2UyZFNjYWxlKG0pIHtcbiAgICBjb25zdCB0cmFuc3Bvc2UgPSBbbVswXSwgbVsyXSwgbVsxXSwgbVszXV07XG4gICAgY29uc3QgYSA9IG1bMF0gKiB0cmFuc3Bvc2VbMF0gKyBtWzFdICogdHJhbnNwb3NlWzJdO1xuICAgIGNvbnN0IGIgPSBtWzBdICogdHJhbnNwb3NlWzFdICsgbVsxXSAqIHRyYW5zcG9zZVszXTtcbiAgICBjb25zdCBjID0gbVsyXSAqIHRyYW5zcG9zZVswXSArIG1bM10gKiB0cmFuc3Bvc2VbMl07XG4gICAgY29uc3QgZCA9IG1bMl0gKiB0cmFuc3Bvc2VbMV0gKyBtWzNdICogdHJhbnNwb3NlWzNdO1xuICAgIGNvbnN0IGZpcnN0ID0gKGEgKyBkKSAvIDI7XG4gICAgY29uc3Qgc2Vjb25kID0gTWF0aC5zcXJ0KChhICsgZCkgKiogMiAtIDQgKiAoYSAqIGQgLSBjICogYikpIC8gMjtcbiAgICBjb25zdCBzeCA9IGZpcnN0ICsgc2Vjb25kIHx8IDE7XG4gICAgY29uc3Qgc3kgPSBmaXJzdCAtIHNlY29uZCB8fCAxO1xuICAgIHJldHVybiBbTWF0aC5zcXJ0KHN4KSwgTWF0aC5zcXJ0KHN5KV07XG4gIH1cbiAgc3RhdGljIG5vcm1hbGl6ZVJlY3QocmVjdCkge1xuICAgIGNvbnN0IHIgPSByZWN0LnNsaWNlKDApO1xuICAgIGlmIChyZWN0WzBdID4gcmVjdFsyXSkge1xuICAgICAgclswXSA9IHJlY3RbMl07XG4gICAgICByWzJdID0gcmVjdFswXTtcbiAgICB9XG4gICAgaWYgKHJlY3RbMV0gPiByZWN0WzNdKSB7XG4gICAgICByWzFdID0gcmVjdFszXTtcbiAgICAgIHJbM10gPSByZWN0WzFdO1xuICAgIH1cbiAgICByZXR1cm4gcjtcbiAgfVxuICBzdGF0aWMgaW50ZXJzZWN0KHJlY3QxLCByZWN0Mikge1xuICAgIGNvbnN0IHhMb3cgPSBNYXRoLm1heChNYXRoLm1pbihyZWN0MVswXSwgcmVjdDFbMl0pLCBNYXRoLm1pbihyZWN0MlswXSwgcmVjdDJbMl0pKTtcbiAgICBjb25zdCB4SGlnaCA9IE1hdGgubWluKE1hdGgubWF4KHJlY3QxWzBdLCByZWN0MVsyXSksIE1hdGgubWF4KHJlY3QyWzBdLCByZWN0MlsyXSkpO1xuICAgIGlmICh4TG93ID4geEhpZ2gpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBjb25zdCB5TG93ID0gTWF0aC5tYXgoTWF0aC5taW4ocmVjdDFbMV0sIHJlY3QxWzNdKSwgTWF0aC5taW4ocmVjdDJbMV0sIHJlY3QyWzNdKSk7XG4gICAgY29uc3QgeUhpZ2ggPSBNYXRoLm1pbihNYXRoLm1heChyZWN0MVsxXSwgcmVjdDFbM10pLCBNYXRoLm1heChyZWN0MlsxXSwgcmVjdDJbM10pKTtcbiAgICBpZiAoeUxvdyA+IHlIaWdoKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIFt4TG93LCB5TG93LCB4SGlnaCwgeUhpZ2hdO1xuICB9XG4gIHN0YXRpYyBiZXppZXJCb3VuZGluZ0JveCh4MCwgeTAsIHgxLCB5MSwgeDIsIHkyLCB4MywgeTMpIHtcbiAgICBjb25zdCB0dmFsdWVzID0gW10sXG4gICAgICBib3VuZHMgPSBbW10sIFtdXTtcbiAgICBsZXQgYSwgYiwgYywgdCwgdDEsIHQyLCBiMmFjLCBzcXJ0YjJhYztcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDI7ICsraSkge1xuICAgICAgaWYgKGkgPT09IDApIHtcbiAgICAgICAgYiA9IDYgKiB4MCAtIDEyICogeDEgKyA2ICogeDI7XG4gICAgICAgIGEgPSAtMyAqIHgwICsgOSAqIHgxIC0gOSAqIHgyICsgMyAqIHgzO1xuICAgICAgICBjID0gMyAqIHgxIC0gMyAqIHgwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYiA9IDYgKiB5MCAtIDEyICogeTEgKyA2ICogeTI7XG4gICAgICAgIGEgPSAtMyAqIHkwICsgOSAqIHkxIC0gOSAqIHkyICsgMyAqIHkzO1xuICAgICAgICBjID0gMyAqIHkxIC0gMyAqIHkwO1xuICAgICAgfVxuICAgICAgaWYgKE1hdGguYWJzKGEpIDwgMWUtMTIpIHtcbiAgICAgICAgaWYgKE1hdGguYWJzKGIpIDwgMWUtMTIpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICB0ID0gLWMgLyBiO1xuICAgICAgICBpZiAoMCA8IHQgJiYgdCA8IDEpIHtcbiAgICAgICAgICB0dmFsdWVzLnB1c2godCk7XG4gICAgICAgIH1cbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBiMmFjID0gYiAqIGIgLSA0ICogYyAqIGE7XG4gICAgICBzcXJ0YjJhYyA9IE1hdGguc3FydChiMmFjKTtcbiAgICAgIGlmIChiMmFjIDwgMCkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIHQxID0gKC1iICsgc3FydGIyYWMpIC8gKDIgKiBhKTtcbiAgICAgIGlmICgwIDwgdDEgJiYgdDEgPCAxKSB7XG4gICAgICAgIHR2YWx1ZXMucHVzaCh0MSk7XG4gICAgICB9XG4gICAgICB0MiA9ICgtYiAtIHNxcnRiMmFjKSAvICgyICogYSk7XG4gICAgICBpZiAoMCA8IHQyICYmIHQyIDwgMSkge1xuICAgICAgICB0dmFsdWVzLnB1c2godDIpO1xuICAgICAgfVxuICAgIH1cbiAgICBsZXQgaiA9IHR2YWx1ZXMubGVuZ3RoLFxuICAgICAgbXQ7XG4gICAgY29uc3QgamxlbiA9IGo7XG4gICAgd2hpbGUgKGotLSkge1xuICAgICAgdCA9IHR2YWx1ZXNbal07XG4gICAgICBtdCA9IDEgLSB0O1xuICAgICAgYm91bmRzWzBdW2pdID0gbXQgKiBtdCAqIG10ICogeDAgKyAzICogbXQgKiBtdCAqIHQgKiB4MSArIDMgKiBtdCAqIHQgKiB0ICogeDIgKyB0ICogdCAqIHQgKiB4MztcbiAgICAgIGJvdW5kc1sxXVtqXSA9IG10ICogbXQgKiBtdCAqIHkwICsgMyAqIG10ICogbXQgKiB0ICogeTEgKyAzICogbXQgKiB0ICogdCAqIHkyICsgdCAqIHQgKiB0ICogeTM7XG4gICAgfVxuICAgIGJvdW5kc1swXVtqbGVuXSA9IHgwO1xuICAgIGJvdW5kc1sxXVtqbGVuXSA9IHkwO1xuICAgIGJvdW5kc1swXVtqbGVuICsgMV0gPSB4MztcbiAgICBib3VuZHNbMV1bamxlbiArIDFdID0geTM7XG4gICAgYm91bmRzWzBdLmxlbmd0aCA9IGJvdW5kc1sxXS5sZW5ndGggPSBqbGVuICsgMjtcbiAgICByZXR1cm4gW01hdGgubWluKC4uLmJvdW5kc1swXSksIE1hdGgubWluKC4uLmJvdW5kc1sxXSksIE1hdGgubWF4KC4uLmJvdW5kc1swXSksIE1hdGgubWF4KC4uLmJvdW5kc1sxXSldO1xuICB9XG59XG5jb25zdCBQREZTdHJpbmdUcmFuc2xhdGVUYWJsZSA9ICgvKiB1bnVzZWQgcHVyZSBleHByZXNzaW9uIG9yIHN1cGVyICovIG51bGwgJiYgKFswLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAweDJkOCwgMHgyYzcsIDB4MmM2LCAweDJkOSwgMHgyZGQsIDB4MmRiLCAweDJkYSwgMHgyZGMsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDB4MjAyMiwgMHgyMDIwLCAweDIwMjEsIDB4MjAyNiwgMHgyMDE0LCAweDIwMTMsIDB4MTkyLCAweDIwNDQsIDB4MjAzOSwgMHgyMDNhLCAweDIyMTIsIDB4MjAzMCwgMHgyMDFlLCAweDIwMWMsIDB4MjAxZCwgMHgyMDE4LCAweDIwMTksIDB4MjAxYSwgMHgyMTIyLCAweGZiMDEsIDB4ZmIwMiwgMHgxNDEsIDB4MTUyLCAweDE2MCwgMHgxNzgsIDB4MTdkLCAweDEzMSwgMHgxNDIsIDB4MTUzLCAweDE2MSwgMHgxN2UsIDAsIDB4MjBhY10pKTtcbmZ1bmN0aW9uIHN0cmluZ1RvUERGU3RyaW5nKHN0cikge1xuICBpZiAoc3RyWzBdID49IFwiXFx4RUZcIikge1xuICAgIGxldCBlbmNvZGluZztcbiAgICBpZiAoc3RyWzBdID09PSBcIlxceEZFXCIgJiYgc3RyWzFdID09PSBcIlxceEZGXCIpIHtcbiAgICAgIGVuY29kaW5nID0gXCJ1dGYtMTZiZVwiO1xuICAgICAgaWYgKHN0ci5sZW5ndGggJSAyID09PSAxKSB7XG4gICAgICAgIHN0ciA9IHN0ci5zbGljZSgwLCAtMSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChzdHJbMF0gPT09IFwiXFx4RkZcIiAmJiBzdHJbMV0gPT09IFwiXFx4RkVcIikge1xuICAgICAgZW5jb2RpbmcgPSBcInV0Zi0xNmxlXCI7XG4gICAgICBpZiAoc3RyLmxlbmd0aCAlIDIgPT09IDEpIHtcbiAgICAgICAgc3RyID0gc3RyLnNsaWNlKDAsIC0xKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHN0clswXSA9PT0gXCJcXHhFRlwiICYmIHN0clsxXSA9PT0gXCJcXHhCQlwiICYmIHN0clsyXSA9PT0gXCJcXHhCRlwiKSB7XG4gICAgICBlbmNvZGluZyA9IFwidXRmLThcIjtcbiAgICB9XG4gICAgaWYgKGVuY29kaW5nKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCBkZWNvZGVyID0gbmV3IFRleHREZWNvZGVyKGVuY29kaW5nLCB7XG4gICAgICAgICAgZmF0YWw6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IGJ1ZmZlciA9IHN0cmluZ1RvQnl0ZXMoc3RyKTtcbiAgICAgICAgY29uc3QgZGVjb2RlZCA9IGRlY29kZXIuZGVjb2RlKGJ1ZmZlcik7XG4gICAgICAgIGlmICghZGVjb2RlZC5pbmNsdWRlcyhcIlxceDFiXCIpKSB7XG4gICAgICAgICAgcmV0dXJuIGRlY29kZWQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRlY29kZWQucmVwbGFjZUFsbCgvXFx4MWJbXlxceDFiXSooPzpcXHgxYnwkKS9nLCBcIlwiKTtcbiAgICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICAgIHdhcm4oYHN0cmluZ1RvUERGU3RyaW5nOiBcIiR7ZXh9XCIuYCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGNvbnN0IHN0ckJ1ZiA9IFtdO1xuICBmb3IgKGxldCBpID0gMCwgaWkgPSBzdHIubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgIGNvbnN0IGNoYXJDb2RlID0gc3RyLmNoYXJDb2RlQXQoaSk7XG4gICAgaWYgKGNoYXJDb2RlID09PSAweDFiKSB7XG4gICAgICB3aGlsZSAoKytpIDwgaWkgJiYgc3RyLmNoYXJDb2RlQXQoaSkgIT09IDB4MWIpIHt9XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgY29uc3QgY29kZSA9IFBERlN0cmluZ1RyYW5zbGF0ZVRhYmxlW2NoYXJDb2RlXTtcbiAgICBzdHJCdWYucHVzaChjb2RlID8gU3RyaW5nLmZyb21DaGFyQ29kZShjb2RlKSA6IHN0ci5jaGFyQXQoaSkpO1xuICB9XG4gIHJldHVybiBzdHJCdWYuam9pbihcIlwiKTtcbn1cbmZ1bmN0aW9uIHN0cmluZ1RvVVRGOFN0cmluZyhzdHIpIHtcbiAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChlc2NhcGUoc3RyKSk7XG59XG5mdW5jdGlvbiB1dGY4U3RyaW5nVG9TdHJpbmcoc3RyKSB7XG4gIHJldHVybiB1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoc3RyKSk7XG59XG5mdW5jdGlvbiBpc0FycmF5QnVmZmVyKHYpIHtcbiAgcmV0dXJuIHR5cGVvZiB2ID09PSBcIm9iamVjdFwiICYmIHY/LmJ5dGVMZW5ndGggIT09IHVuZGVmaW5lZDtcbn1cbmZ1bmN0aW9uIGlzQXJyYXlFcXVhbChhcnIxLCBhcnIyKSB7XG4gIGlmIChhcnIxLmxlbmd0aCAhPT0gYXJyMi5sZW5ndGgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgZm9yIChsZXQgaSA9IDAsIGlpID0gYXJyMS5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG4gICAgaWYgKGFycjFbaV0gIT09IGFycjJbaV0pIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG5mdW5jdGlvbiBnZXRNb2RpZmljYXRpb25EYXRlKGRhdGUgPSBuZXcgRGF0ZSgpKSB7XG4gIGNvbnN0IGJ1ZmZlciA9IFtkYXRlLmdldFVUQ0Z1bGxZZWFyKCkudG9TdHJpbmcoKSwgKGRhdGUuZ2V0VVRDTW9udGgoKSArIDEpLnRvU3RyaW5nKCkucGFkU3RhcnQoMiwgXCIwXCIpLCBkYXRlLmdldFVUQ0RhdGUoKS50b1N0cmluZygpLnBhZFN0YXJ0KDIsIFwiMFwiKSwgZGF0ZS5nZXRVVENIb3VycygpLnRvU3RyaW5nKCkucGFkU3RhcnQoMiwgXCIwXCIpLCBkYXRlLmdldFVUQ01pbnV0ZXMoKS50b1N0cmluZygpLnBhZFN0YXJ0KDIsIFwiMFwiKSwgZGF0ZS5nZXRVVENTZWNvbmRzKCkudG9TdHJpbmcoKS5wYWRTdGFydCgyLCBcIjBcIildO1xuICByZXR1cm4gYnVmZmVyLmpvaW4oXCJcIik7XG59XG5jbGFzcyBQcm9taXNlQ2FwYWJpbGl0eSB7XG4gICNzZXR0bGVkID0gZmFsc2U7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMucHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHRoaXMucmVzb2x2ZSA9IGRhdGEgPT4ge1xuICAgICAgICB0aGlzLiNzZXR0bGVkID0gdHJ1ZTtcbiAgICAgICAgcmVzb2x2ZShkYXRhKTtcbiAgICAgIH07XG4gICAgICB0aGlzLnJlamVjdCA9IHJlYXNvbiA9PiB7XG4gICAgICAgIHRoaXMuI3NldHRsZWQgPSB0cnVlO1xuICAgICAgICByZWplY3QocmVhc29uKTtcbiAgICAgIH07XG4gICAgfSk7XG4gIH1cbiAgZ2V0IHNldHRsZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuI3NldHRsZWQ7XG4gIH1cbn1cbmxldCBOb3JtYWxpemVSZWdleCA9IG51bGw7XG5sZXQgTm9ybWFsaXphdGlvbk1hcCA9IG51bGw7XG5mdW5jdGlvbiBub3JtYWxpemVVbmljb2RlKHN0cikge1xuICBpZiAoIU5vcm1hbGl6ZVJlZ2V4KSB7XG4gICAgTm9ybWFsaXplUmVnZXggPSAvKFtcXHUwMGEwXFx1MDBiNVxcdTAzN2VcXHUwZWIzXFx1MjAwMC1cXHUyMDBhXFx1MjAyZlxcdTIxMjZcXHVmYjAwLVxcdWZiMDRcXHVmYjA2XFx1ZmIyMC1cXHVmYjM2XFx1ZmIzOC1cXHVmYjNjXFx1ZmIzZVxcdWZiNDAtXFx1ZmI0MVxcdWZiNDMtXFx1ZmI0NFxcdWZiNDYtXFx1ZmJhMVxcdWZiYTQtXFx1ZmJhOVxcdWZiYWUtXFx1ZmJiMVxcdWZiZDMtXFx1ZmJkY1xcdWZiZGUtXFx1ZmJlN1xcdWZiZWEtXFx1ZmJmOFxcdWZiZmMtXFx1ZmJmZFxcdWZjMDAtXFx1ZmM1ZFxcdWZjNjQtXFx1ZmNmMVxcdWZjZjUtXFx1ZmQzZFxcdWZkODhcXHVmZGY0XFx1ZmRmYS1cXHVmZGZiXFx1ZmU3MVxcdWZlNzdcXHVmZTc5XFx1ZmU3YlxcdWZlN2RdKyl8KFxcdWZiMDUrKS9ndTtcbiAgICBOb3JtYWxpemF0aW9uTWFwID0gbmV3IE1hcChbW1wi76yFXCIsIFwixb90XCJdXSk7XG4gIH1cbiAgcmV0dXJuIHN0ci5yZXBsYWNlQWxsKE5vcm1hbGl6ZVJlZ2V4LCAoXywgcDEsIHAyKSA9PiB7XG4gICAgcmV0dXJuIHAxID8gcDEubm9ybWFsaXplKFwiTkZLQ1wiKSA6IE5vcm1hbGl6YXRpb25NYXAuZ2V0KHAyKTtcbiAgfSk7XG59XG5mdW5jdGlvbiBnZXRVdWlkKCkge1xuICBpZiAodHlwZW9mIGNyeXB0byAhPT0gXCJ1bmRlZmluZWRcIiAmJiB0eXBlb2YgY3J5cHRvPy5yYW5kb21VVUlEID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICByZXR1cm4gY3J5cHRvLnJhbmRvbVVVSUQoKTtcbiAgfVxuICBjb25zdCBidWYgPSBuZXcgVWludDhBcnJheSgzMik7XG4gIGlmICh0eXBlb2YgY3J5cHRvICE9PSBcInVuZGVmaW5lZFwiICYmIHR5cGVvZiBjcnlwdG8/LmdldFJhbmRvbVZhbHVlcyA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhidWYpO1xuICB9IGVsc2Uge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMzI7IGkrKykge1xuICAgICAgYnVmW2ldID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMjU1KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGJ5dGVzVG9TdHJpbmcoYnVmKTtcbn1cbmNvbnN0IEFubm90YXRpb25QcmVmaXggPSBcInBkZmpzX2ludGVybmFsX2lkX1wiO1xuXG5cbi8qKiovIH0pXG5cbi8qKioqKiovIH0pO1xuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKioqKiovIC8vIFRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIHZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcbi8qKioqKiovIFxuLyoqKioqKi8gLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbi8qKioqKiovIGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcbi8qKioqKiovIFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4vKioqKioqLyBcdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuLyoqKioqKi8gXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcbi8qKioqKiovIFx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG4vKioqKioqLyBcdH1cbi8qKioqKiovIFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbi8qKioqKiovIFx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG4vKioqKioqLyBcdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuLyoqKioqKi8gXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG4vKioqKioqLyBcdFx0ZXhwb3J0czoge31cbi8qKioqKiovIFx0fTtcbi8qKioqKiovIFxuLyoqKioqKi8gXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbi8qKioqKiovIFx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG4vKioqKioqLyBcbi8qKioqKiovIFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbi8qKioqKiovIFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuLyoqKioqKi8gfVxuLyoqKioqKi8gXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKioqKi8gLyogd2VicGFjay9ydW50aW1lL2FzeW5jIG1vZHVsZSAqL1xuLyoqKioqKi8gKCgpID0+IHtcbi8qKioqKiovIFx0dmFyIHdlYnBhY2tRdWV1ZXMgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgPyBTeW1ib2woXCJ3ZWJwYWNrIHF1ZXVlc1wiKSA6IFwiX193ZWJwYWNrX3F1ZXVlc19fXCI7XG4vKioqKioqLyBcdHZhciB3ZWJwYWNrRXhwb3J0cyA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiA/IFN5bWJvbChcIndlYnBhY2sgZXhwb3J0c1wiKSA6IFwiX193ZWJwYWNrX2V4cG9ydHNfX1wiO1xuLyoqKioqKi8gXHR2YXIgd2VicGFja0Vycm9yID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiID8gU3ltYm9sKFwid2VicGFjayBlcnJvclwiKSA6IFwiX193ZWJwYWNrX2Vycm9yX19cIjtcbi8qKioqKiovIFx0dmFyIHJlc29sdmVRdWV1ZSA9IChxdWV1ZSkgPT4ge1xuLyoqKioqKi8gXHRcdGlmKHF1ZXVlICYmIHF1ZXVlLmQgPCAxKSB7XG4vKioqKioqLyBcdFx0XHRxdWV1ZS5kID0gMTtcbi8qKioqKiovIFx0XHRcdHF1ZXVlLmZvckVhY2goKGZuKSA9PiAoZm4uci0tKSk7XG4vKioqKioqLyBcdFx0XHRxdWV1ZS5mb3JFYWNoKChmbikgPT4gKGZuLnItLSA/IGZuLnIrKyA6IGZuKCkpKTtcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdH1cbi8qKioqKiovIFx0dmFyIHdyYXBEZXBzID0gKGRlcHMpID0+IChkZXBzLm1hcCgoZGVwKSA9PiB7XG4vKioqKioqLyBcdFx0aWYoZGVwICE9PSBudWxsICYmIHR5cGVvZiBkZXAgPT09IFwib2JqZWN0XCIpIHtcbi8qKioqKiovIFx0XHRcdGlmKGRlcFt3ZWJwYWNrUXVldWVzXSkgcmV0dXJuIGRlcDtcbi8qKioqKiovIFx0XHRcdGlmKGRlcC50aGVuKSB7XG4vKioqKioqLyBcdFx0XHRcdHZhciBxdWV1ZSA9IFtdO1xuLyoqKioqKi8gXHRcdFx0XHRxdWV1ZS5kID0gMDtcbi8qKioqKiovIFx0XHRcdFx0ZGVwLnRoZW4oKHIpID0+IHtcbi8qKioqKiovIFx0XHRcdFx0XHRvYmpbd2VicGFja0V4cG9ydHNdID0gcjtcbi8qKioqKiovIFx0XHRcdFx0XHRyZXNvbHZlUXVldWUocXVldWUpO1xuLyoqKioqKi8gXHRcdFx0XHR9LCAoZSkgPT4ge1xuLyoqKioqKi8gXHRcdFx0XHRcdG9ialt3ZWJwYWNrRXJyb3JdID0gZTtcbi8qKioqKiovIFx0XHRcdFx0XHRyZXNvbHZlUXVldWUocXVldWUpO1xuLyoqKioqKi8gXHRcdFx0XHR9KTtcbi8qKioqKiovIFx0XHRcdFx0dmFyIG9iaiA9IHt9O1xuLyoqKioqKi8gXHRcdFx0XHRvYmpbd2VicGFja1F1ZXVlc10gPSAoZm4pID0+IChmbihxdWV1ZSkpO1xuLyoqKioqKi8gXHRcdFx0XHRyZXR1cm4gb2JqO1xuLyoqKioqKi8gXHRcdFx0fVxuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovIFx0XHR2YXIgcmV0ID0ge307XG4vKioqKioqLyBcdFx0cmV0W3dlYnBhY2tRdWV1ZXNdID0geCA9PiB7fTtcbi8qKioqKiovIFx0XHRyZXRbd2VicGFja0V4cG9ydHNdID0gZGVwO1xuLyoqKioqKi8gXHRcdHJldHVybiByZXQ7XG4vKioqKioqLyBcdH0pKTtcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5hID0gKG1vZHVsZSwgYm9keSwgaGFzQXdhaXQpID0+IHtcbi8qKioqKiovIFx0XHR2YXIgcXVldWU7XG4vKioqKioqLyBcdFx0aGFzQXdhaXQgJiYgKChxdWV1ZSA9IFtdKS5kID0gLTEpO1xuLyoqKioqKi8gXHRcdHZhciBkZXBRdWV1ZXMgPSBuZXcgU2V0KCk7XG4vKioqKioqLyBcdFx0dmFyIGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cztcbi8qKioqKiovIFx0XHR2YXIgY3VycmVudERlcHM7XG4vKioqKioqLyBcdFx0dmFyIG91dGVyUmVzb2x2ZTtcbi8qKioqKiovIFx0XHR2YXIgcmVqZWN0O1xuLyoqKioqKi8gXHRcdHZhciBwcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlaikgPT4ge1xuLyoqKioqKi8gXHRcdFx0cmVqZWN0ID0gcmVqO1xuLyoqKioqKi8gXHRcdFx0b3V0ZXJSZXNvbHZlID0gcmVzb2x2ZTtcbi8qKioqKiovIFx0XHR9KTtcbi8qKioqKiovIFx0XHRwcm9taXNlW3dlYnBhY2tFeHBvcnRzXSA9IGV4cG9ydHM7XG4vKioqKioqLyBcdFx0cHJvbWlzZVt3ZWJwYWNrUXVldWVzXSA9IChmbikgPT4gKHF1ZXVlICYmIGZuKHF1ZXVlKSwgZGVwUXVldWVzLmZvckVhY2goZm4pLCBwcm9taXNlW1wiY2F0Y2hcIl0oeCA9PiB7fSkpO1xuLyoqKioqKi8gXHRcdG1vZHVsZS5leHBvcnRzID0gcHJvbWlzZTtcbi8qKioqKiovIFx0XHRib2R5KChkZXBzKSA9PiB7XG4vKioqKioqLyBcdFx0XHRjdXJyZW50RGVwcyA9IHdyYXBEZXBzKGRlcHMpO1xuLyoqKioqKi8gXHRcdFx0dmFyIGZuO1xuLyoqKioqKi8gXHRcdFx0dmFyIGdldFJlc3VsdCA9ICgpID0+IChjdXJyZW50RGVwcy5tYXAoKGQpID0+IHtcbi8qKioqKiovIFx0XHRcdFx0aWYoZFt3ZWJwYWNrRXJyb3JdKSB0aHJvdyBkW3dlYnBhY2tFcnJvcl07XG4vKioqKioqLyBcdFx0XHRcdHJldHVybiBkW3dlYnBhY2tFeHBvcnRzXTtcbi8qKioqKiovIFx0XHRcdH0pKVxuLyoqKioqKi8gXHRcdFx0dmFyIHByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuLyoqKioqKi8gXHRcdFx0XHRmbiA9ICgpID0+IChyZXNvbHZlKGdldFJlc3VsdCkpO1xuLyoqKioqKi8gXHRcdFx0XHRmbi5yID0gMDtcbi8qKioqKiovIFx0XHRcdFx0dmFyIGZuUXVldWUgPSAocSkgPT4gKHEgIT09IHF1ZXVlICYmICFkZXBRdWV1ZXMuaGFzKHEpICYmIChkZXBRdWV1ZXMuYWRkKHEpLCBxICYmICFxLmQgJiYgKGZuLnIrKywgcS5wdXNoKGZuKSkpKTtcbi8qKioqKiovIFx0XHRcdFx0Y3VycmVudERlcHMubWFwKChkZXApID0+IChkZXBbd2VicGFja1F1ZXVlc10oZm5RdWV1ZSkpKTtcbi8qKioqKiovIFx0XHRcdH0pO1xuLyoqKioqKi8gXHRcdFx0cmV0dXJuIGZuLnIgPyBwcm9taXNlIDogZ2V0UmVzdWx0KCk7XG4vKioqKioqLyBcdFx0fSwgKGVycikgPT4gKChlcnIgPyByZWplY3QocHJvbWlzZVt3ZWJwYWNrRXJyb3JdID0gZXJyKSA6IG91dGVyUmVzb2x2ZShleHBvcnRzKSksIHJlc29sdmVRdWV1ZShxdWV1ZSkpKTtcbi8qKioqKiovIFx0XHRxdWV1ZSAmJiBxdWV1ZS5kIDwgMCAmJiAocXVldWUuZCA9IDApO1xuLyoqKioqKi8gXHR9O1xuLyoqKioqKi8gfSkoKTtcbi8qKioqKiovIFxuLyoqKioqKi8gLyogd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzICovXG4vKioqKioqLyAoKCkgPT4ge1xuLyoqKioqKi8gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG4vKioqKioqLyBcdFx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuLyoqKioqKi8gXHRcdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG4vKioqKioqLyBcdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG4vKioqKioqLyBcdFx0XHR9XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi8gXHR9O1xuLyoqKioqKi8gfSkoKTtcbi8qKioqKiovIFxuLyoqKioqKi8gLyogd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCAqL1xuLyoqKioqKi8gKCgpID0+IHtcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKVxuLyoqKioqKi8gfSkoKTtcbi8qKioqKiovIFxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKioqKiovIFxuLyoqKioqKi8gLy8gc3RhcnR1cFxuLyoqKioqKi8gLy8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4vKioqKioqLyAvLyBUaGlzIGVudHJ5IG1vZHVsZSB1c2VkICdtb2R1bGUnIHNvIGl0IGNhbid0IGJlIGlubGluZWRcbi8qKioqKiovIHZhciBfX3dlYnBhY2tfZXhwb3J0c19fID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5MDcpO1xuLyoqKioqKi8gX193ZWJwYWNrX2V4cG9ydHNfXyA9IGdsb2JhbFRoaXMucGRmanNMaWIgPSBhd2FpdCAoZ2xvYmFsVGhpcy5wZGZqc0xpYlByb21pc2UgPSBfX3dlYnBhY2tfZXhwb3J0c19fKTtcbi8qKioqKiovIHZhciBfX3dlYnBhY2tfZXhwb3J0c19fQWJvcnRFeGNlcHRpb24gPSBfX3dlYnBhY2tfZXhwb3J0c19fLkFib3J0RXhjZXB0aW9uO1xuLyoqKioqKi8gdmFyIF9fd2VicGFja19leHBvcnRzX19Bbm5vdGF0aW9uRWRpdG9yTGF5ZXIgPSBfX3dlYnBhY2tfZXhwb3J0c19fLkFubm90YXRpb25FZGl0b3JMYXllcjtcbi8qKioqKiovIHZhciBfX3dlYnBhY2tfZXhwb3J0c19fQW5ub3RhdGlvbkVkaXRvclBhcmFtc1R5cGUgPSBfX3dlYnBhY2tfZXhwb3J0c19fLkFubm90YXRpb25FZGl0b3JQYXJhbXNUeXBlO1xuLyoqKioqKi8gdmFyIF9fd2VicGFja19leHBvcnRzX19Bbm5vdGF0aW9uRWRpdG9yVHlwZSA9IF9fd2VicGFja19leHBvcnRzX18uQW5ub3RhdGlvbkVkaXRvclR5cGU7XG4vKioqKioqLyB2YXIgX193ZWJwYWNrX2V4cG9ydHNfX0Fubm90YXRpb25FZGl0b3JVSU1hbmFnZXIgPSBfX3dlYnBhY2tfZXhwb3J0c19fLkFubm90YXRpb25FZGl0b3JVSU1hbmFnZXI7XG4vKioqKioqLyB2YXIgX193ZWJwYWNrX2V4cG9ydHNfX0Fubm90YXRpb25MYXllciA9IF9fd2VicGFja19leHBvcnRzX18uQW5ub3RhdGlvbkxheWVyO1xuLyoqKioqKi8gdmFyIF9fd2VicGFja19leHBvcnRzX19Bbm5vdGF0aW9uTW9kZSA9IF9fd2VicGFja19leHBvcnRzX18uQW5ub3RhdGlvbk1vZGU7XG4vKioqKioqLyB2YXIgX193ZWJwYWNrX2V4cG9ydHNfX0NNYXBDb21wcmVzc2lvblR5cGUgPSBfX3dlYnBhY2tfZXhwb3J0c19fLkNNYXBDb21wcmVzc2lvblR5cGU7XG4vKioqKioqLyB2YXIgX193ZWJwYWNrX2V4cG9ydHNfX0NvbG9yUGlja2VyID0gX193ZWJwYWNrX2V4cG9ydHNfXy5Db2xvclBpY2tlcjtcbi8qKioqKiovIHZhciBfX3dlYnBhY2tfZXhwb3J0c19fRE9NU1ZHRmFjdG9yeSA9IF9fd2VicGFja19leHBvcnRzX18uRE9NU1ZHRmFjdG9yeTtcbi8qKioqKiovIHZhciBfX3dlYnBhY2tfZXhwb3J0c19fRHJhd0xheWVyID0gX193ZWJwYWNrX2V4cG9ydHNfXy5EcmF3TGF5ZXI7XG4vKioqKioqLyB2YXIgX193ZWJwYWNrX2V4cG9ydHNfX0ZlYXR1cmVUZXN0ID0gX193ZWJwYWNrX2V4cG9ydHNfXy5GZWF0dXJlVGVzdDtcbi8qKioqKiovIHZhciBfX3dlYnBhY2tfZXhwb3J0c19fR2xvYmFsV29ya2VyT3B0aW9ucyA9IF9fd2VicGFja19leHBvcnRzX18uR2xvYmFsV29ya2VyT3B0aW9ucztcbi8qKioqKiovIHZhciBfX3dlYnBhY2tfZXhwb3J0c19fSW1hZ2VLaW5kID0gX193ZWJwYWNrX2V4cG9ydHNfXy5JbWFnZUtpbmQ7XG4vKioqKioqLyB2YXIgX193ZWJwYWNrX2V4cG9ydHNfX0ludmFsaWRQREZFeGNlcHRpb24gPSBfX3dlYnBhY2tfZXhwb3J0c19fLkludmFsaWRQREZFeGNlcHRpb247XG4vKioqKioqLyB2YXIgX193ZWJwYWNrX2V4cG9ydHNfX01pc3NpbmdQREZFeGNlcHRpb24gPSBfX3dlYnBhY2tfZXhwb3J0c19fLk1pc3NpbmdQREZFeGNlcHRpb247XG4vKioqKioqLyB2YXIgX193ZWJwYWNrX2V4cG9ydHNfX09QUyA9IF9fd2VicGFja19leHBvcnRzX18uT1BTO1xuLyoqKioqKi8gdmFyIF9fd2VicGFja19leHBvcnRzX19PdXRsaW5lciA9IF9fd2VicGFja19leHBvcnRzX18uT3V0bGluZXI7XG4vKioqKioqLyB2YXIgX193ZWJwYWNrX2V4cG9ydHNfX1BERkRhdGFSYW5nZVRyYW5zcG9ydCA9IF9fd2VicGFja19leHBvcnRzX18uUERGRGF0YVJhbmdlVHJhbnNwb3J0O1xuLyoqKioqKi8gdmFyIF9fd2VicGFja19leHBvcnRzX19QREZEYXRlU3RyaW5nID0gX193ZWJwYWNrX2V4cG9ydHNfXy5QREZEYXRlU3RyaW5nO1xuLyoqKioqKi8gdmFyIF9fd2VicGFja19leHBvcnRzX19QREZXb3JrZXIgPSBfX3dlYnBhY2tfZXhwb3J0c19fLlBERldvcmtlcjtcbi8qKioqKiovIHZhciBfX3dlYnBhY2tfZXhwb3J0c19fUGFzc3dvcmRSZXNwb25zZXMgPSBfX3dlYnBhY2tfZXhwb3J0c19fLlBhc3N3b3JkUmVzcG9uc2VzO1xuLyoqKioqKi8gdmFyIF9fd2VicGFja19leHBvcnRzX19QZXJtaXNzaW9uRmxhZyA9IF9fd2VicGFja19leHBvcnRzX18uUGVybWlzc2lvbkZsYWc7XG4vKioqKioqLyB2YXIgX193ZWJwYWNrX2V4cG9ydHNfX1BpeGVsc1BlckluY2ggPSBfX3dlYnBhY2tfZXhwb3J0c19fLlBpeGVsc1BlckluY2g7XG4vKioqKioqLyB2YXIgX193ZWJwYWNrX2V4cG9ydHNfX1Byb21pc2VDYXBhYmlsaXR5ID0gX193ZWJwYWNrX2V4cG9ydHNfXy5Qcm9taXNlQ2FwYWJpbGl0eTtcbi8qKioqKiovIHZhciBfX3dlYnBhY2tfZXhwb3J0c19fUmVuZGVyaW5nQ2FuY2VsbGVkRXhjZXB0aW9uID0gX193ZWJwYWNrX2V4cG9ydHNfXy5SZW5kZXJpbmdDYW5jZWxsZWRFeGNlcHRpb247XG4vKioqKioqLyB2YXIgX193ZWJwYWNrX2V4cG9ydHNfX1VuZXhwZWN0ZWRSZXNwb25zZUV4Y2VwdGlvbiA9IF9fd2VicGFja19leHBvcnRzX18uVW5leHBlY3RlZFJlc3BvbnNlRXhjZXB0aW9uO1xuLyoqKioqKi8gdmFyIF9fd2VicGFja19leHBvcnRzX19VdGlsID0gX193ZWJwYWNrX2V4cG9ydHNfXy5VdGlsO1xuLyoqKioqKi8gdmFyIF9fd2VicGFja19leHBvcnRzX19WZXJib3NpdHlMZXZlbCA9IF9fd2VicGFja19leHBvcnRzX18uVmVyYm9zaXR5TGV2ZWw7XG4vKioqKioqLyB2YXIgX193ZWJwYWNrX2V4cG9ydHNfX1hmYUxheWVyID0gX193ZWJwYWNrX2V4cG9ydHNfXy5YZmFMYXllcjtcbi8qKioqKiovIHZhciBfX3dlYnBhY2tfZXhwb3J0c19fYnVpbGQgPSBfX3dlYnBhY2tfZXhwb3J0c19fLmJ1aWxkO1xuLyoqKioqKi8gdmFyIF9fd2VicGFja19leHBvcnRzX19jcmVhdGVWYWxpZEFic29sdXRlVXJsID0gX193ZWJwYWNrX2V4cG9ydHNfXy5jcmVhdGVWYWxpZEFic29sdXRlVXJsO1xuLyoqKioqKi8gdmFyIF9fd2VicGFja19leHBvcnRzX19mZXRjaERhdGEgPSBfX3dlYnBhY2tfZXhwb3J0c19fLmZldGNoRGF0YTtcbi8qKioqKiovIHZhciBfX3dlYnBhY2tfZXhwb3J0c19fZ2V0RG9jdW1lbnQgPSBfX3dlYnBhY2tfZXhwb3J0c19fLmdldERvY3VtZW50O1xuLyoqKioqKi8gdmFyIF9fd2VicGFja19leHBvcnRzX19nZXRGaWxlbmFtZUZyb21VcmwgPSBfX3dlYnBhY2tfZXhwb3J0c19fLmdldEZpbGVuYW1lRnJvbVVybDtcbi8qKioqKiovIHZhciBfX3dlYnBhY2tfZXhwb3J0c19fZ2V0UGRmRmlsZW5hbWVGcm9tVXJsID0gX193ZWJwYWNrX2V4cG9ydHNfXy5nZXRQZGZGaWxlbmFtZUZyb21Vcmw7XG4vKioqKioqLyB2YXIgX193ZWJwYWNrX2V4cG9ydHNfX2dldFhmYVBhZ2VWaWV3cG9ydCA9IF9fd2VicGFja19leHBvcnRzX18uZ2V0WGZhUGFnZVZpZXdwb3J0O1xuLyoqKioqKi8gdmFyIF9fd2VicGFja19leHBvcnRzX19pc0RhdGFTY2hlbWUgPSBfX3dlYnBhY2tfZXhwb3J0c19fLmlzRGF0YVNjaGVtZTtcbi8qKioqKiovIHZhciBfX3dlYnBhY2tfZXhwb3J0c19faXNQZGZGaWxlID0gX193ZWJwYWNrX2V4cG9ydHNfXy5pc1BkZkZpbGU7XG4vKioqKioqLyB2YXIgX193ZWJwYWNrX2V4cG9ydHNfX25vQ29udGV4dE1lbnUgPSBfX3dlYnBhY2tfZXhwb3J0c19fLm5vQ29udGV4dE1lbnU7XG4vKioqKioqLyB2YXIgX193ZWJwYWNrX2V4cG9ydHNfX25vcm1hbGl6ZVVuaWNvZGUgPSBfX3dlYnBhY2tfZXhwb3J0c19fLm5vcm1hbGl6ZVVuaWNvZGU7XG4vKioqKioqLyB2YXIgX193ZWJwYWNrX2V4cG9ydHNfX3JlbmRlclRleHRMYXllciA9IF9fd2VicGFja19leHBvcnRzX18ucmVuZGVyVGV4dExheWVyO1xuLyoqKioqKi8gdmFyIF9fd2VicGFja19leHBvcnRzX19zZXRMYXllckRpbWVuc2lvbnMgPSBfX3dlYnBhY2tfZXhwb3J0c19fLnNldExheWVyRGltZW5zaW9ucztcbi8qKioqKiovIHZhciBfX3dlYnBhY2tfZXhwb3J0c19fc2hhZG93ID0gX193ZWJwYWNrX2V4cG9ydHNfXy5zaGFkb3c7XG4vKioqKioqLyB2YXIgX193ZWJwYWNrX2V4cG9ydHNfX3VwZGF0ZVRleHRMYXllciA9IF9fd2VicGFja19leHBvcnRzX18udXBkYXRlVGV4dExheWVyO1xuLyoqKioqKi8gdmFyIF9fd2VicGFja19leHBvcnRzX192ZXJzaW9uID0gX193ZWJwYWNrX2V4cG9ydHNfXy52ZXJzaW9uO1xuLyoqKioqKi8gZXhwb3J0IHsgX193ZWJwYWNrX2V4cG9ydHNfX0Fib3J0RXhjZXB0aW9uIGFzIEFib3J0RXhjZXB0aW9uLCBfX3dlYnBhY2tfZXhwb3J0c19fQW5ub3RhdGlvbkVkaXRvckxheWVyIGFzIEFubm90YXRpb25FZGl0b3JMYXllciwgX193ZWJwYWNrX2V4cG9ydHNfX0Fubm90YXRpb25FZGl0b3JQYXJhbXNUeXBlIGFzIEFubm90YXRpb25FZGl0b3JQYXJhbXNUeXBlLCBfX3dlYnBhY2tfZXhwb3J0c19fQW5ub3RhdGlvbkVkaXRvclR5cGUgYXMgQW5ub3RhdGlvbkVkaXRvclR5cGUsIF9fd2VicGFja19leHBvcnRzX19Bbm5vdGF0aW9uRWRpdG9yVUlNYW5hZ2VyIGFzIEFubm90YXRpb25FZGl0b3JVSU1hbmFnZXIsIF9fd2VicGFja19leHBvcnRzX19Bbm5vdGF0aW9uTGF5ZXIgYXMgQW5ub3RhdGlvbkxheWVyLCBfX3dlYnBhY2tfZXhwb3J0c19fQW5ub3RhdGlvbk1vZGUgYXMgQW5ub3RhdGlvbk1vZGUsIF9fd2VicGFja19leHBvcnRzX19DTWFwQ29tcHJlc3Npb25UeXBlIGFzIENNYXBDb21wcmVzc2lvblR5cGUsIF9fd2VicGFja19leHBvcnRzX19Db2xvclBpY2tlciBhcyBDb2xvclBpY2tlciwgX193ZWJwYWNrX2V4cG9ydHNfX0RPTVNWR0ZhY3RvcnkgYXMgRE9NU1ZHRmFjdG9yeSwgX193ZWJwYWNrX2V4cG9ydHNfX0RyYXdMYXllciBhcyBEcmF3TGF5ZXIsIF9fd2VicGFja19leHBvcnRzX19GZWF0dXJlVGVzdCBhcyBGZWF0dXJlVGVzdCwgX193ZWJwYWNrX2V4cG9ydHNfX0dsb2JhbFdvcmtlck9wdGlvbnMgYXMgR2xvYmFsV29ya2VyT3B0aW9ucywgX193ZWJwYWNrX2V4cG9ydHNfX0ltYWdlS2luZCBhcyBJbWFnZUtpbmQsIF9fd2VicGFja19leHBvcnRzX19JbnZhbGlkUERGRXhjZXB0aW9uIGFzIEludmFsaWRQREZFeGNlcHRpb24sIF9fd2VicGFja19leHBvcnRzX19NaXNzaW5nUERGRXhjZXB0aW9uIGFzIE1pc3NpbmdQREZFeGNlcHRpb24sIF9fd2VicGFja19leHBvcnRzX19PUFMgYXMgT1BTLCBfX3dlYnBhY2tfZXhwb3J0c19fT3V0bGluZXIgYXMgT3V0bGluZXIsIF9fd2VicGFja19leHBvcnRzX19QREZEYXRhUmFuZ2VUcmFuc3BvcnQgYXMgUERGRGF0YVJhbmdlVHJhbnNwb3J0LCBfX3dlYnBhY2tfZXhwb3J0c19fUERGRGF0ZVN0cmluZyBhcyBQREZEYXRlU3RyaW5nLCBfX3dlYnBhY2tfZXhwb3J0c19fUERGV29ya2VyIGFzIFBERldvcmtlciwgX193ZWJwYWNrX2V4cG9ydHNfX1Bhc3N3b3JkUmVzcG9uc2VzIGFzIFBhc3N3b3JkUmVzcG9uc2VzLCBfX3dlYnBhY2tfZXhwb3J0c19fUGVybWlzc2lvbkZsYWcgYXMgUGVybWlzc2lvbkZsYWcsIF9fd2VicGFja19leHBvcnRzX19QaXhlbHNQZXJJbmNoIGFzIFBpeGVsc1BlckluY2gsIF9fd2VicGFja19leHBvcnRzX19Qcm9taXNlQ2FwYWJpbGl0eSBhcyBQcm9taXNlQ2FwYWJpbGl0eSwgX193ZWJwYWNrX2V4cG9ydHNfX1JlbmRlcmluZ0NhbmNlbGxlZEV4Y2VwdGlvbiBhcyBSZW5kZXJpbmdDYW5jZWxsZWRFeGNlcHRpb24sIF9fd2VicGFja19leHBvcnRzX19VbmV4cGVjdGVkUmVzcG9uc2VFeGNlcHRpb24gYXMgVW5leHBlY3RlZFJlc3BvbnNlRXhjZXB0aW9uLCBfX3dlYnBhY2tfZXhwb3J0c19fVXRpbCBhcyBVdGlsLCBfX3dlYnBhY2tfZXhwb3J0c19fVmVyYm9zaXR5TGV2ZWwgYXMgVmVyYm9zaXR5TGV2ZWwsIF9fd2VicGFja19leHBvcnRzX19YZmFMYXllciBhcyBYZmFMYXllciwgX193ZWJwYWNrX2V4cG9ydHNfX2J1aWxkIGFzIGJ1aWxkLCBfX3dlYnBhY2tfZXhwb3J0c19fY3JlYXRlVmFsaWRBYnNvbHV0ZVVybCBhcyBjcmVhdGVWYWxpZEFic29sdXRlVXJsLCBfX3dlYnBhY2tfZXhwb3J0c19fZmV0Y2hEYXRhIGFzIGZldGNoRGF0YSwgX193ZWJwYWNrX2V4cG9ydHNfX2dldERvY3VtZW50IGFzIGdldERvY3VtZW50LCBfX3dlYnBhY2tfZXhwb3J0c19fZ2V0RmlsZW5hbWVGcm9tVXJsIGFzIGdldEZpbGVuYW1lRnJvbVVybCwgX193ZWJwYWNrX2V4cG9ydHNfX2dldFBkZkZpbGVuYW1lRnJvbVVybCBhcyBnZXRQZGZGaWxlbmFtZUZyb21VcmwsIF9fd2VicGFja19leHBvcnRzX19nZXRYZmFQYWdlVmlld3BvcnQgYXMgZ2V0WGZhUGFnZVZpZXdwb3J0LCBfX3dlYnBhY2tfZXhwb3J0c19faXNEYXRhU2NoZW1lIGFzIGlzRGF0YVNjaGVtZSwgX193ZWJwYWNrX2V4cG9ydHNfX2lzUGRmRmlsZSBhcyBpc1BkZkZpbGUsIF9fd2VicGFja19leHBvcnRzX19ub0NvbnRleHRNZW51IGFzIG5vQ29udGV4dE1lbnUsIF9fd2VicGFja19leHBvcnRzX19ub3JtYWxpemVVbmljb2RlIGFzIG5vcm1hbGl6ZVVuaWNvZGUsIF9fd2VicGFja19leHBvcnRzX19yZW5kZXJUZXh0TGF5ZXIgYXMgcmVuZGVyVGV4dExheWVyLCBfX3dlYnBhY2tfZXhwb3J0c19fc2V0TGF5ZXJEaW1lbnNpb25zIGFzIHNldExheWVyRGltZW5zaW9ucywgX193ZWJwYWNrX2V4cG9ydHNfX3NoYWRvdyBhcyBzaGFkb3csIF9fd2VicGFja19leHBvcnRzX191cGRhdGVUZXh0TGF5ZXIgYXMgdXBkYXRlVGV4dExheWVyLCBfX3dlYnBhY2tfZXhwb3J0c19fdmVyc2lvbiBhcyB2ZXJzaW9uIH07XG4vKioqKioqLyBcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGRmLm1qcy5tYXAiLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIi8vIHN0YXJ0dXBcbi8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLy8gVGhpcyBlbnRyeSBtb2R1bGUgdXNlZCAnbW9kdWxlJyBzbyBpdCBjYW4ndCBiZSBpbmxpbmVkXG52YXIgX193ZWJwYWNrX2V4cG9ydHNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMzE2KTtcbiJdLCJuYW1lcyI6WyJ3ZWJwYWNrUXVldWVzIiwid2VicGFja0V4cG9ydHMiLCJ3ZWJwYWNrRXJyb3IiLCJyZXNvbHZlUXVldWUiLCJkb2N1bWVudCIsInQiLCJjcmVhdGVFbGVtZW50IiwiYXBwZW5kQ2hpbGQiLCJjcmVhdGVUZXh0Tm9kZSIsImhlYWQiLCJlIiwiY29uc29sZSIsImVycm9yIiwibW9kdWxlIiwiZXhwb3J0cyIsImkiLCJpc1JlYWRPbmx5U3VwcG9ydGVkIiwidG9vbGJveCIsImljb24iLCJ0aXRsZSIsImNvbnRlbnRsZXNzIiwiZW5hYmxlTGluZUJyZWFrcyIsIkRFRkFVTFRfUVVPVEVfUExBQ0VIT0xERVIiLCJERUZBVUxUX0NBUFRJT05fUExBQ0VIT0xERVIiLCJBTElHTk1FTlRTIiwibGVmdCIsImNlbnRlciIsIkRFRkFVTFRfQUxJR05NRU5UIiwiY29udmVyc2lvbkNvbmZpZyIsImltcG9ydCIsImV4cG9ydCIsImNhcHRpb24iLCJ0ZXh0IiwiQ1NTIiwiYmFzZUNsYXNzIiwidGhpcyIsImFwaSIsInN0eWxlcyIsImJsb2NrIiwid3JhcHBlciIsImlucHV0Iiwic2V0dGluZ3MiLCJuYW1lIiwiY29uc3RydWN0b3IiLCJkYXRhIiwiY29uZmlnIiwibiIsInJlYWRPbmx5IiwiciIsImEiLCJkIiwicXVvdGVQbGFjZWhvbGRlciIsImNhcHRpb25QbGFjZWhvbGRlciIsImFsaWdubWVudCIsIk9iamVjdCIsInZhbHVlcyIsImluY2x1ZGVzIiwiZGVmYXVsdEFsaWdubWVudCIsInJlbmRlciIsIl9tYWtlIiwiY29udGVudEVkaXRhYmxlIiwiaW5uZXJIVE1MIiwiZGF0YXNldCIsInBsYWNlaG9sZGVyIiwic2F2ZSIsInF1ZXJ5U2VsZWN0b3IiLCJhc3NpZ24iLCJzYW5pdGl6ZSIsImJyIiwicmVuZGVyU2V0dGluZ3MiLCJ0b1VwcGVyQ2FzZSIsInN1YnN0ciIsIm1hcCIsImxhYmVsIiwiaTE4biIsIm9uQWN0aXZhdGUiLCJfdG9nZ2xlVHVuZSIsImlzQWN0aXZlIiwiY2xvc2VPbkFjdGl2YXRlIiwiQXJyYXkiLCJpc0FycmF5IiwiY2xhc3NMaXN0IiwiYWRkIiwibyIsInNlbGYiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiYXN5bmNJdGVyYXRvciIsInMiLCJ0b1N0cmluZ1RhZyIsImMiLCJkZWZpbmVQcm9wZXJ0eSIsInZhbHVlIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwidSIsInYiLCJjcmVhdGUiLCJUIiwiX2ludm9rZSIsImgiLCJFcnJvciIsInAiLCJTIiwibWV0aG9kIiwiYXJnIiwiZGVsZWdhdGUiLCJMIiwieSIsInNlbnQiLCJfc2VudCIsImRpc3BhdGNoRXhjZXB0aW9uIiwiYWJydXB0IiwibCIsInR5cGUiLCJkb25lIiwiZiIsImNhbGwiLCJ3cmFwIiwiZyIsImsiLCJiIiwibSIsImdldFByb3RvdHlwZU9mIiwieCIsIkIiLCJ3IiwiTyIsImZvckVhY2giLCJFIiwicmVzb2x2ZSIsIl9fYXdhaXQiLCJ0aGVuIiwicmV0dXJuIiwiVHlwZUVycm9yIiwicmVzdWx0TmFtZSIsIm5leHQiLCJuZXh0TG9jIiwiQyIsInRyeUxvYyIsImNhdGNoTG9jIiwiZmluYWxseUxvYyIsImFmdGVyTG9jIiwidHJ5RW50cmllcyIsInB1c2giLCJqIiwiY29tcGxldGlvbiIsInJlc2V0IiwiaXNOYU4iLCJsZW5ndGgiLCJkaXNwbGF5TmFtZSIsImlzR2VuZXJhdG9yRnVuY3Rpb24iLCJtYXJrIiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJhd3JhcCIsIkFzeW5jSXRlcmF0b3IiLCJhc3luYyIsIlByb21pc2UiLCJrZXlzIiwicmV2ZXJzZSIsInBvcCIsInByZXYiLCJjaGFyQXQiLCJzbGljZSIsInN0b3AiLCJydmFsIiwiY29tcGxldGUiLCJmaW5pc2giLCJjYXRjaCIsImRlbGVnYXRlWWllbGQiLCJyZWdlbmVyYXRvclJ1bnRpbWUiLCJnbG9iYWxUaGlzIiwiRnVuY3Rpb24iLCJrZXkiLCJ0YXJnZXQiLCJpc0NvbnRlbnRFZGl0YWJsZSIsImFjdGl2ZUVsZW1lbnQiLCJmb2N1cyIsImdldFNlbGVjdGlvbiIsImdldFJhbmdlQXQiLCJjbG9uZVJhbmdlIiwic2VsZWN0Tm9kZUNvbnRlbnRzIiwic2V0RW5kIiwiZW5kQ29udGFpbmVyIiwiZW5kT2Zmc2V0IiwidG9TdHJpbmciLCJzZWxlY3Rpb25TdGFydCIsIndpbmRvdyIsImNyZWF0ZVJhbmdlIiwiY291bnQiLCJjb2xsYXBzZSIsInJlbW92ZUFsbFJhbmdlcyIsImFkZFJhbmdlIiwic2V0U2VsZWN0aW9uUmFuZ2UiLCJzZWxlY3ROb2RlIiwic2V0U3RhcnQiLCJub2RlVHlwZSIsIk5vZGUiLCJURVhUX05PREUiLCJ0ZXh0Q29udGVudCIsImNoaWxkTm9kZXMiLCJhcHBseSIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiZ2V0IiwiYXJndW1lbnRzIiwiaG9sZGVyIiwib2JzZXJ2ZXIiLCJkZWJvdW5jZVRpbWVyIiwibXV0YXRpb25EZWJvdW5jZXIiLCJkZWJvdW5jZSIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJtdXRhdGlvbkhhbmRsZXIiLCJvYnNlcnZlIiwiY2hpbGRMaXN0IiwiYXR0cmlidXRlcyIsInN1YnRyZWUiLCJjaGFyYWN0ZXJEYXRhIiwiY2hhcmFjdGVyRGF0YU9sZFZhbHVlIiwib25EZXN0cm95IiwiY29udGFpbnMiLCJjbGVhclRpbWVvdXQiLCJzZXRUaW1lb3V0IiwiQ3VzdG9tRXZlbnQiLCJkaXNwYXRjaEV2ZW50IiwiZGlzY29ubmVjdCIsImdldE93blByb3BlcnR5U3ltYm9scyIsImZpbHRlciIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiZWRpdG9yIiwib25VcGRhdGUiLCJtYXhMZW5ndGgiLCJzaG9ydGN1dHMiLCJ1bmRvIiwicmVkbyIsImJsb2NrcyIsImNhcmV0IiwiY29uZmlndXJhdGlvbiIsImRlZmF1bHRCbG9jayIsImdldEVsZW1lbnRCeUlkIiwic2hvdWxkU2F2ZUhpc3RvcnkiLCJyZWdpc3RlckNoYW5nZSIsInNldE11dGF0aW9uT2JzZXJ2ZXIiLCJzZXRFdmVudExpc3RlbmVycyIsImluaXRpYWxJdGVtIiwiY2xlYXIiLCJzaGlmdCIsImluZGV4Iiwic3RhdGUiLCJzdGFjayIsInBvc2l0aW9uIiwic2V0UmVhZE9ubHkiLCJlZGl0b3JEaWRVcGRhdGUiLCJKU09OIiwic3RyaW5naWZ5IiwidHJ1bmNhdGUiLCJNYXRoIiwibWluIiwiZ2V0Q3VycmVudEJsb2NrSW5kZXgiLCJnZXRCbG9ja3NDb3VudCIsImdldENhcmV0SW5kZXgiLCJjYXJldEluZGV4IiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsImZpcnN0Q2hpbGQiLCJnZXRQb3MiLCJpZCIsImluc2VydCIsInNldFRvQmxvY2siLCJzb21lIiwiY2FuVW5kbyIsImJsb2NrV2FzRGVsZXRlZCIsImluc2VydERlbGV0ZWRCbG9jayIsImJsb2NrV2FzU2tpcHBlZCIsImRlbGV0ZSIsInNldENhcmV0SW5kZXgiLCJibG9ja1dhc0Ryb3BwZWQiLCJjb250ZW50Q2hhbmdlZEluTm9Gb2N1c0Jsb2NrIiwiZ2V0QmxvY2tCeUluZGV4IiwidXBkYXRlIiwic2V0UG9zIiwiaW5zZXJ0QmxvY2siLCJjYW5SZWRvIiwiaW5zZXJ0U2tpcHBlZEJsb2NrcyIsIkNNRCIsInRlc3QiLCJuYXZpZ2F0b3IiLCJwbGF0Zm9ybSIsIkFMVCIsIlNISUZUIiwidG9Mb3dlckNhc2UiLCJyZXBsYWNlIiwic3BsaXQiLCJwYXJzZUtleXMiLCJyZWR1Y2UiLCJwcmV2ZW50RGVmYXVsdCIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiYnV0dG9uIiwic2hvd19jcmVhdGVfZGlhbG9nIiwicmFuZ2UiLCJ0b29sYmFyIiwiaW5zZXJ0QWRqYWNlbnRIVE1MIiwic2V0dGluZ3NfZGlhbG9nIiwicGFyZW50RWxlbWVudCIsInN0eWxlIiwiY3VycmVudFRvcCIsInBhcnNlSW50IiwidG9wIiwicmVtb3ZlIiwiY2xhc3NlcyIsImlubGluZV9zdHlsZSIsImN1c3RvbV9zdHlsZSIsInNldEF0dHJpYnV0ZSIsInNlbGVjdGVkVGV4dCIsImV4dHJhY3RDb250ZW50cyIsImluc2VydE5vZGUiLCJzZWxlY3Rpb24iLCJleHBhbmRUb1RhZyIsInNob3dfY2hhbmdlX2RpYWxvZyIsImVsZW1lbnQiLCJmaW5kUGFyZW50VGFnIiwic2V0dGluZ3NfZGlhbG9nX2h0bWwiLCJnZXRBdHRyaWJ1dGUiLCJzdXJyb3VuZCIsImNoZWNrU3RhdGUiLCJhbmNob3JOb2RlIiwiYW5jaG9yRWxlbWVudCIsIkVsZW1lbnQiLCJjbG9zZXN0IiwiY3VzdG9tc3R5bGUiLCJlbCIsInRyaW0iLCJOb3RlVG9vbCIsImFkZF9hbGxfc2hvd19ub3RlX3NldHRpbmdzX2xpc3RlbmVycyIsIm5vdGVzIiwic2hvd19ub3RlX3NldHRpbmdzX2VkaXRvciIsIm5vdGUiLCJsb2ciLCJub3RlX3R5cGUiLCJub3RlX2NvbnRlbnQiLCJzaG93X25vdGVfc2V0dGluZ3MiLCJzcGFuIiwiY2xhc3MiLCJzdGF0dXNfdGltZXIiLCJyZW5kZXJfcHJvamVjdF9saXN0ZW5lciIsInByb2plY3RfaWQiLCJjaGVja19yZW5kZXJpbmdfc3RhdHVzIiwicmVuZGVyX2lkIiwic3RhdHVzIiwic2hvd19wZGYiLCJyZW5kZXJpbmdfaWQiLCJyZW5kZXJQYWdlIiwicGFnZU51bWJlciIsImNhbnZhcyIsInBkZiIsImdldFBhZ2UiLCJwYWdlIiwidmlld3BvcnQiLCJnZXRWaWV3cG9ydCIsInNjYWxlIiwiaGVpZ2h0Iiwid2lkdGgiLCJjYW52YXNDb250ZXh0IiwiZ2V0Q29udGV4dCIsInBkZl91cmwiLCJkb3dubG9hZF9idXR0b24iLCJocmVmIiwidmlld2VyIiwicHJvbWlzZSIsInBhZ2VfbnVtIiwibnVtUGFnZXMiLCJ3b3JrZXJTcmMiLCJzZW5kX3VwZGF0ZV9jb250ZW50X2Jsb2NrcyIsInNlY3Rpb25fcGF0aCIsImZldGNoIiwiaGVhZGVycyIsImJvZHkiLCJyZXNwb25zZSIsIm9rIiwianNvbiIsInJlc3BvbnNlX2RhdGEiLCJzZW5kX2dldF9jb250ZW50X2Jsb2NrcyIsInNlbmRfcmVuZGVyX3Byb2plY3QiLCJzZW5kX2dldF9yZW5kZXJpbmdfc3RhdHVzIiwiUXVvdGUiLCJVbmRvIiwidHlwaW5nX3RpbWVyIiwic2hvd19lZGl0b3IiLCJmaXJzdF9jaGFuZ2UiLCJ0b29scyIsImhlYWRlciIsInJhdyIsImxpc3QiLCJpbmxpbmVUb29sYmFyIiwiZGVmYXVsdFN0eWxlIiwicXVvdGUiLCJjdXN0b21fc3R5bGVfdG9vbCIsIm9uQ2hhbmdlIiwiZXZlbnQiLCJzYXZlX2NoYW5nZXMiLCJvblJlYWR5IiwiaW5pdGlhbGl6ZSIsImlzUmVhZHkiLCJ0eXBpbmdfaGFuZGxlciIsInNob3dfbmV3X2VkaXRvciIsInNob3dfYWxlcnQiLCJtZXNzYWdlIiwiZmxvb3IiLCJyYW5kb20iLCJhbGVydF9odG1sIiwiSGFuZGxlYmFycyIsInRlbXBsYXRlcyIsImFsZXJ0X3RtcGwiLCJhbGVydCIsIlBlIiwiVGUiLCJnbG9iYWwiLCJyZWdpc3RlciIsInJldmVydCIsIm1hdGNoZXMiLCJtYXRjaGVzU2VsZWN0b3IiLCJtb3pNYXRjaGVzU2VsZWN0b3IiLCJtc01hdGNoZXNTZWxlY3RvciIsIm9NYXRjaGVzU2VsZWN0b3IiLCJ3ZWJraXRNYXRjaGVzU2VsZWN0b3IiLCJvd25lckRvY3VtZW50IiwicXVlcnlTZWxlY3RvckFsbCIsIml0ZW0iLCJkb2N1bWVudEVsZW1lbnQiLCJwYXJlbnROb2RlIiwicHJlcGVuZCIsImNyZWF0ZURvY3VtZW50RnJhZ21lbnQiLCJpbnNlcnRCZWZvcmUiLCJzY3JvbGxJbnRvVmlld0lmTmVlZGVkIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImdldFByb3BlcnR5VmFsdWUiLCJvZmZzZXRUb3AiLCJzY3JvbGxUb3AiLCJjbGllbnRIZWlnaHQiLCJvZmZzZXRMZWZ0Iiwic2Nyb2xsTGVmdCIsImNsaWVudFdpZHRoIiwic2Nyb2xsSW50b1ZpZXciLCJyZXF1ZXN0SWRsZUNhbGxiYWNrIiwiRGF0ZSIsIm5vdyIsImRpZFRpbWVvdXQiLCJ0aW1lUmVtYWluaW5nIiwibWF4IiwiY2FuY2VsSWRsZUNhbGxiYWNrIiwiYXQiLCJWRVJCT1NFIiwiSU5GTyIsIldBUk4iLCJFUlJPUiIsIm1lIiwibG9nTGV2ZWwiLCJ1bnNoaWZ0IiwiYmluZCIsIlkiLCJvZSIsIm1hdGNoIiwiTSIsIkQiLCJHIiwiSmUiLCJRZSIsIlciLCJsdCIsImN0IiwieGUiLCJldCIsIkllIiwibGVhZGluZyIsInRyYWlsaW5nIiwicmUiLCJNZSIsInllIiwid2luIiwibWFjIiwieDExIiwibGludXgiLCJmaW5kIiwiYXBwVmVyc2lvbiIsImluZGV4T2YiLCIkdCIsIll0IiwiY3J5cHRvIiwiZ2V0UmFuZG9tVmFsdWVzIiwiVWludDhBcnJheSIsIkR0IiwiTGUiLCJsZSIsInNldCIsInRlIiwibWF0Y2hNZWRpYSIsInR0IiwibWF4VG91Y2hQb2ludHMiLCJpc1NpbmdsZVRhZyIsInRhZ05hbWUiLCJpc0xpbmVCcmVha1RhZyIsIm1ha2UiLCJhcHBlbmQiLCJzd2FwIiwicmVtb3ZlQ2hpbGQiLCJmaW5kQWxsIiwiYWxsSW5wdXRzU2VsZWN0b3IiLCJqb2luIiwiZmluZEFsbElucHV0cyIsImlzTmF0aXZlSW5wdXQiLCJjb250YWluc09ubHlJbmxpbmVFbGVtZW50cyIsImdldERlZXBlc3RCbG9ja0VsZW1lbnRzIiwiZ2V0RGVlcGVzdE5vZGUiLCJFTEVNRU5UX05PREUiLCJpc0VsZW1lbnQiLCJpc0ZyYWdtZW50IiwiRE9DVU1FTlRfRlJBR01FTlRfTk9ERSIsImNhblNldENhcmV0IiwiaXNOb2RlRW1wdHkiLCJSZWdFeHAiLCJpc0xlYWYiLCJpc0VtcHR5Iiwibm9ybWFsaXplIiwiZnJvbSIsImlzSFRNTFN0cmluZyIsImNoaWxkRWxlbWVudENvdW50IiwiZ2V0Q29udGVudExlbmd0aCIsImJsb2NrRWxlbWVudHMiLCJjaGlsZHJlbiIsImV2ZXJ5IiwiZ2V0SG9sZGVyIiwiaXNBbmNob3IiLCJvZmZzZXQiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJwYWdlWE9mZnNldCIsInBhZ2VZT2Zmc2V0IiwiYm90dG9tIiwicmlnaHQiLCJodCIsInVpIiwiYmxvY2tUdW5lcyIsInRvZ2dsZXIiLCJjb252ZXJ0ZXIiLCJBZGQiLCJwb3BvdmVyIiwiRmlsdGVyIiwidG9vbE5hbWVzIiwiVGV4dCIsIkxpbmsiLCJCb2xkIiwiSXRhbGljIiwibGluayIsInN0dWIiLCJEZWxldGUiLCJtb3ZlVXAiLCJtb3ZlRG93biIsImllIiwiX3QiLCJzZXREaWN0aW9uYXJ5IiwiY3VycmVudERpY3Rpb25hcnkiLCJnZXROYW1lc3BhY2UiLCJ6IiwidXQiLCJFZSIsInN1YnNjcmliZXJzIiwib24iLCJvbmNlIiwic3BsaWNlIiwiZW1pdCIsIm9mZiIsIndhcm4iLCJkZXN0cm95IiwiZWUiLCJzZWxlY3RlZCIsInN0cmV0Y2hlZCIsImZvY3VzYWJsZSIsInZhbGlkYXRlIiwiZGlzcGF0Y2hDaGFuZ2UiLCJGZSIsImFsbExpc3RlbmVycyIsIlh0IiwiZXZlbnRUeXBlIiwiaGFuZGxlciIsIm9wdGlvbnMiLCJmaW5kT25lIiwib2ZmQnlJZCIsImZpbmRCeUlkIiwiZmluZEJ5RXZlbnRUYXJnZXQiLCJyZW1vdmVBbGwiLCJmaW5kQnlUeXBlIiwiZmluZEJ5SGFuZGxlciIsImV2ZW50c0Rpc3BhdGNoZXIiLCJub2RlcyIsImxpc3RlbmVycyIsInJlYWRPbmx5TXV0YWJsZUxpc3RlbmVycyIsIm11dGFibGVMaXN0ZW5lcklkcyIsImNsZWFyQWxsIiwiRWRpdG9yIiwicmVtb3ZlQWxsTm9kZXMiLCJIVE1MRWxlbWVudCIsImlzUnRsIiwiZGlyZWN0aW9uIiwiaW5zdGFuY2UiLCJzYXZlZFNlbGVjdGlvblJhbmdlIiwiaXNGYWtlQmFja2dyb3VuZEVuYWJsZWQiLCJjb21tYW5kQmFja2dyb3VuZCIsImNvbW1hbmRSZW1vdmVGb3JtYXQiLCJlZGl0b3JXcmFwcGVyIiwiZWRpdG9yWm9uZSIsImFuY2hvck9mZnNldCIsImlzQ29sbGFwc2VkIiwiaXNBdEVkaXRvciIsImlzU2VsZWN0aW9uQXRFZGl0b3IiLCJmb2N1c05vZGUiLCJpc1JhbmdlQXRFZGl0b3IiLCJzdGFydENvbnRhaW5lciIsImlzU2VsZWN0aW9uRXhpc3RzIiwiZ2V0UmFuZ2VGcm9tU2VsZWN0aW9uIiwicmFuZ2VDb3VudCIsInJlY3QiLCJib3VuZGluZ0xlZnQiLCJib3VuZGluZ1RvcCIsImJvdW5kaW5nV2lkdGgiLCJib3VuZGluZ0hlaWdodCIsInNldEN1cnNvciIsInNlbGVjdGlvbkVuZCIsImlzUmFuZ2VJbnNpZGVDb250YWluZXIiLCJhZGRGYWtlQ3Vyc29yIiwibXV0YXRpb25GcmVlIiwiaXNGYWtlQ3Vyc29ySW5zaWRlQ29udGFpbmVyIiwicmVtb3ZlRmFrZUN1cnNvciIsInJlbW92ZUZha2VCYWNrZ3JvdW5kIiwiZXhlY0NvbW1hbmQiLCJzZXRGYWtlQmFja2dyb3VuZCIsInJlc3RvcmUiLCJjbGVhclNhdmVkIiwiY29sbGFwc2VUb0VuZCIsIkFlIiwicHQiLCJmdCIsImd0Iiwib3QiLCJtZXJnZWFibGUiLCJYIiwiQVBQRU5EX0NBTExCQUNLIiwiUkVOREVSRUQiLCJNT1ZFRCIsIlVQREFURUQiLCJSRU1PVkVEIiwiT05fUEFTVEUiLCJSIiwidG9vbCIsInR1bmVzRGF0YSIsInN1cGVyIiwiY2FjaGVkSW5wdXRzIiwidG9vbFJlbmRlcmVkRWxlbWVudCIsInR1bmVzSW5zdGFuY2VzIiwiTWFwIiwiZGVmYXVsdFR1bmVzSW5zdGFuY2VzIiwidW5hdmFpbGFibGVUdW5lc0RhdGEiLCJpbnB1dEluZGV4IiwiZWRpdG9yRXZlbnRCdXMiLCJoYW5kbGVGb2N1cyIsImRyb3BJbnB1dHNDYWNoZSIsInVwZGF0ZUN1cnJlbnRJbnB1dCIsImRpZE11dGF0ZWQiLCJJbnB1dEV2ZW50IiwiZGV0ZWN0VG9vbFJvb3RDaGFuZ2UiLCJhZGRlZE5vZGVzIiwicmVtb3ZlZE5vZGVzIiwiYmxvY2tBUEkiLCJ0b29sSW5zdGFuY2UiLCJ0dW5lcyIsImNvbXBvc2VUdW5lcyIsImNvbXBvc2UiLCJ3YXRjaEJsb2NrTXV0YXRpb25zIiwiYWRkSW5wdXRFdmVudHMiLCJ3cmFwcGVyU3RyZXRjaGVkIiwiY29udGVudCIsImRyb3BUYXJnZXQiLCJpbnB1dHMiLCJjdXJyZW50SW5wdXQiLCJmaW5kSW5kZXgiLCJmaXJzdElucHV0IiwibGFzdElucHV0IiwibmV4dElucHV0IiwicHJldmlvdXNJbnB1dCIsInNhbml0aXplQ29uZmlnIiwibWVyZ2UiLCJwbHVnaW5zQ29udGVudCIsImhhc01lZGlhIiwidG9nZ2xlIiwibWVyZ2VXaXRoIiwiZW50cmllcyIsInBlcmZvcm1hbmNlIiwidGltZSIsImdldFR1bmVzIiwiZmxhdCIsInVud2F0Y2hCbG9ja011dGF0aW9ucyIsInJlbW92ZUlucHV0RXZlbnRzIiwiZ2V0QWN0aXZlVG9vbGJveEVudHJ5IiwiVnQiLCJleHBvcnREYXRhQXNTdHJpbmciLCJlbyIsImlzSW50ZXJuYWwiLCJoYXMiLCJyZWRhY3RvckRvbUNoYW5nZWRDYWxsYmFjayIsIm11dGF0aW9ucyIsIlF0IiwiSGUiLCJpc1R1bmUiLCJtZXRob2RzIiwiZ2V0TWV0aG9kc0ZvclRvb2wiLCJfZSIsImxvIiwic2hvdyIsImdldFdyYXBwZXIiLCJjb25maXJtIiwicHJvbXB0IiwiaG1yIiwidHJhbnNmb3JtIiwiaW5zZXJ0SW50byIsImxvY2FscyIsImJ0b2EiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsInNvdXJjZXMiLCJzb3VyY2VSb290IiwiY29uY2F0IiwiYWxsIiwiYXRvYiIsIkkiLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsInJlZnMiLCJwYXJ0cyIsIkgiLCJiYXNlIiwiY3NzIiwibWVkaWEiLCJzb3VyY2VNYXAiLCJpbnNlcnRBdCIsIm5leHRTaWJsaW5nIiwiYmVmb3JlIiwiQSIsImF0dHJzIiwiWiIsInNpbmdsZXRvbiIsImNlIiwiVVJMIiwiY3JlYXRlT2JqZWN0VVJMIiwicmV2b2tlT2JqZWN0VVJMIiwiQmxvYiIsInJlbCIsImRlIiwiUSIsIkNlIiwiT3QiLCJjb252ZXJ0VG9BYnNvbHV0ZVVybHMiLCJOdCIsIkdlIiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJERUJVRyIsIlUiLCJKIiwiQm9vbGVhbiIsImxvY2F0aW9uIiwicHJvdG9jb2wiLCJob3N0IiwicGF0aG5hbWUiLCJjYW5jZWxIYW5kbGVyIiwib2tIYW5kbGVyIiwib2tUZXh0IiwiY2FuY2VsVGV4dCIsImlucHV0VHlwZSIsImNvIiwiaG8iLCJPZSIsImZvIiwidGFncyIsIm5vZGVOYW1lIiwiY2xlYW4iLCJpbXBsZW1lbnRhdGlvbiIsImNyZWF0ZUhUTUxEb2N1bWVudCIsIl9zYW5pdGl6ZSIsImNyZWF0ZVRyZWVXYWxrZXIiLCJOb2RlRmlsdGVyIiwiU0hPV19URVhUIiwiU0hPV19FTEVNRU5UIiwiU0hPV19DT01NRU5UIiwiQ09NTUVOVF9OT0RFIiwia2VlcE5lc3RlZEJsb2NrRWxlbWVudHMiLCJyZW1vdmVBdHRyaWJ1dGUiLCJwcmV2aW91c0VsZW1lbnRTaWJsaW5nIiwibmV4dEVsZW1lbnRTaWJsaW5nIiwiZ28iLCJidCIsInplIiwiViIsImJvIiwidm8iLCJtbyIsImtvIiwiSHQiLCJOZSIsIkNvIiwic2hvd2VkIiwib2Zmc2V0UmlnaHQiLCJoaWRpbmdEZWxheSIsImhhbmRsZVdpbmRvd1Njcm9sbCIsImhpZGUiLCJsb2FkU3R5bGVzIiwicHJlcGFyZSIsInBhc3NpdmUiLCJ0b29sdGlwIiwidG9vbHRpcENvbnRlbnQiLCJ0b29sdGlwU2hvd24iLCJwbGFjZW1lbnQiLCJoaWRpbmdUaW1lb3V0IiwibWFyZ2luVG9wIiwibWFyZ2luTGVmdCIsIm1hcmdpblJpZ2h0IiwibWFyZ2luQm90dG9tIiwiZGVsYXkiLCJwbGFjZVRvcCIsInBsYWNlTGVmdCIsInBsYWNlUmlnaHQiLCJwbGFjZUJvdHRvbSIsInNob3dpbmdUaW1lb3V0Iiwib25Ib3ZlciIsIm9mZnNldFdpZHRoIiwiYXBwbHlQbGFjZW1lbnQiLCJvZmZzZXRIZWlnaHQiLCJUbyIsIkYiLCJVZSIsIlJlIiwiZ2UiLCJLIiwibXQiLCJrdCIsIml0IiwiXyIsInJvb3QiLCJjb25maXJtYXRpb25TdGF0ZSIsInJlbW92ZVNwZWNpYWxGb2N1c0JlaGF2aW9yIiwibm9Gb2N1cyIsInJlbW92ZVNwZWNpYWxIb3ZlckJlaGF2aW9yIiwibm9Ib3ZlciIsIm9uRXJyb3JBbmltYXRpb25FbmQiLCJ3b2JibGVBbmltYXRpb24iLCJwYXJhbXMiLCJpc0Rpc2FibGVkIiwiaXNDb25maXJtYXRpb25TdGF0ZUVuYWJsZWQiLCJpc0ZvY3VzZWQiLCJmb2N1c2VkIiwiY29udGFpbmVyIiwic2Vjb25kYXJ5VGl0bGUiLCJhY3RpdmUiLCJkaXNhYmxlZCIsImhpZGRlbiIsImdldEVsZW1lbnQiLCJoYW5kbGVDbGljayIsImFjdGl2YXRlT3JFbmFibGVDb25maXJtYXRpb25Nb2RlIiwidG9nZ2xlQWN0aXZlIiwidG9nZ2xlSGlkZGVuIiwiZGlzYWJsZUNvbmZpcm1hdGlvbk1vZGUiLCJvbkZvY3VzIiwiZGlzYWJsZVNwZWNpYWxIb3ZlckFuZEZvY3VzQmVoYXZpb3IiLCJpdGVtTmFtZSIsInNlY29uZGFyeUxhYmVsIiwiZW5hYmxlQ29uZmlybWF0aW9uTW9kZSIsImNvbmZpcm1hdGlvbiIsImVuYWJsZVNwZWNpYWxIb3ZlckFuZEZvY3VzQmVoYXZpb3IiLCJhbmltYXRlRXJyb3IiLCJoZSIsImN1cnNvciIsIml0ZW1zIiwiZm9jdXNlZENzc0NsYXNzIiwiY3VycmVudEl0ZW0iLCJkcm9wQ3Vyc29yIiwic2V0SXRlbXMiLCJsZWFmTm9kZXNBbmRSZXR1cm5JbmRleCIsImRpcmVjdGlvbnMiLCJSSUdIVCIsInByZXZpb3VzIiwiTEVGVCIsIm5lIiwicSIsImFjdGl2YXRlZCIsImZsaXBDYWxsYmFja3MiLCJvbktleURvd24iLCJpc0V2ZW50UmVhZHlGb3JIYW5kbGluZyIsInVzZWRLZXlzIiwia2V5Q29kZSIsImhhbmRsZVRhYlByZXNzIiwiZmxpcExlZnQiLCJmbGlwUmlnaHQiLCJoYW5kbGVFbnRlclByZXNzIiwiZm9jdXNlZEl0ZW1DbGFzcyIsImFjdGl2YXRlQ2FsbGJhY2siLCJhbGxvd2VkS2V5cyIsImlzQWN0aXZhdGVkIiwiYWN0aXZhdGUiLCJkZWFjdGl2YXRlIiwiZm9jdXNGaXJzdCIsImZsaXBDYWxsYmFjayIsImhhc0ZvY3VzIiwib25GbGlwIiwicmVtb3ZlT25GbGlwIiwic2hpZnRLZXkiLCJzdG9wUHJvcGFnYXRpb24iLCJjbGljayIsInBlIiwib25TZWFyY2giLCJzZWFyY2hRdWVyeSIsImZvdW5kSXRlbXMiLCJ0YWJJbmRleCIsImNoZWNrSXRlbSIsInVlIiwibG9jayIsImxvY2tIYXJkIiwic2Nyb2xsTG9ja2VkIiwidW5sb2NrIiwidW5sb2NrSGFyZCIsInNjcm9sbFBvc2l0aW9uIiwic2V0UHJvcGVydHkiLCJzY3JvbGxMb2NrZWRIYXJkIiwic2Nyb2xsVG8iLCJ2dCIsImpvIiwiJG8iLCJiZSIsIkNsb3NlIiwiTiIsInNjb3BlRWxlbWVudCIsInNjcm9sbExvY2tlciIsIm5vdGhpbmdGb3VuZE1lc3NhZ2UiLCJjdXN0b21Db250ZW50Iiwib3ZlcmxheSIsIm1lc3NhZ2VzIiwibm90aGluZ0ZvdW5kIiwic2VhcmNoIiwiY3VzdG9tQ29udGVudEZsaXBwYWJsZUl0ZW1zIiwiYWRkQ3VzdG9tQ29udGVudCIsInNlYXJjaGFibGUiLCJhZGRTZWFyY2giLCJpbml0aWFsaXplRmxpcHBlciIsInBvcG92ZXJPcGVuVG9wIiwicG9wb3Zlck9wZW5lZCIsIm5vdGhpbmdGb3VuZE1lc3NhZ2VEaXNwbGF5ZWQiLCJjdXN0b21Db250ZW50SGlkZGVuIiwib3ZlcmxheUhpZGRlbiIsImZsaXBwZXIiLCJzaG91bGRPcGVuQm90dG9tIiwiZmxpcHBhYmxlRWxlbWVudHMiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJnZXRUYXJnZXRJdGVtIiwiaGFuZGxlSXRlbUNsaWNrIiwidG9nZ2xlTm90aGluZ0ZvdW5kTWVzc2FnZSIsInRvZ2dsZUN1c3RvbUNvbnRlbnQiLCJjb21wb3NlZFBhdGgiLCJ0b2dnbGVJdGVtQWN0aXZlbmVzc0lmTmVlZGVkIiwiY2xvbmVOb2RlIiwidmlzaWJpbGl0eSIsImlubmVySGVpZ2h0IiwiamUiLCJXbyIsIiQiLCJvcGVuZWQiLCJ0b2dnbGluZ0NhbGxiYWNrIiwiY29udmVyc2lvblRvb2xiYXJXcmFwcGVyIiwiY29udmVyc2lvblRvb2xiYXJTaG93ZWQiLCJjb252ZXJzaW9uVG9vbGJhclRvb2xzIiwiY29udmVyc2lvblRvb2xiYXJMYWJlbCIsImNvbnZlcnNpb25Ub29sIiwiY29udmVyc2lvblRvb2xIaWRkZW4iLCJjb252ZXJzaW9uVG9vbEljb24iLCJjb252ZXJzaW9uVG9vbFNlY29uZGFyeUxhYmVsIiwiY29udmVyc2lvblRvb2xGb2N1c2VkIiwiY29udmVyc2lvblRvb2xBY3RpdmUiLCJVSSIsImVkaXRvclJ0bEZpeCIsImFkZFRvb2xzIiwiZW5hYmxlRmxpcHBlciIsImNsb3NlIiwib3BlbiIsImZpbHRlclRvb2xzIiwiaGFzVG9vbHMiLCJyZXBsYWNlV2l0aEJsb2NrIiwiQmxvY2tNYW5hZ2VyIiwiQmxvY2tTZWxlY3Rpb24iLCJJbmxpbmVUb29sYmFyIiwiQ2FyZXQiLCJjb252ZXJ0IiwiY3VycmVudEJsb2NrIiwiY2xlYXJTZWxlY3Rpb24iLCJwb3NpdGlvbnMiLCJFTkQiLCJUb29scyIsImJsb2NrVG9vbHMiLCJhZGRUb29sSWZWYWxpZCIsImFkZFRvb2wiLCJzaG9ydGN1dCIsImlubmVyVGV4dCIsInRvb2xib3hJdGVtIiwiRGUiLCJLbyIsImNvbW1hbmRzIiwicGFyc2VTaG9ydGN1dE5hbWUiLCJjYWxsYmFjayIsImV4ZWN1dGVTaG9ydGN1dCIsImV4ZWN1dGUiLCJQIiwiQkFDS1NQQUNFIiwiRU5URVIiLCJFU0NBUEUiLCJVUCIsIkRPV04iLCJJTlNFUlQiLCJERUxFVEUiLCJzdXBwb3J0ZWRDb21tYW5kcyIsImN0cmxLZXkiLCJtZXRhS2V5IiwiYWx0S2V5Iiwia2V5Q29kZXMiLCJYbyIsImFlIiwicmVnaXN0ZXJlZFNob3J0Y3V0cyIsImZpbmRTaG9ydGN1dCIsInFvIiwiWm8iLCJ4dCIsImtlIiwiT3BlbmVkIiwiQ2xvc2VkIiwiQmxvY2tBZGRlZCIsInd0IiwiaTE4bkxhYmVscyIsIm9uUG9wb3ZlckNsb3NlIiwidG9vbHNUb0JlRGlzcGxheWVkIiwicmVkYWN0b3IiLCJ0b29sYm94SXRlbXNUb0JlRGlzcGxheWVkIiwiZW5hYmxlU2hvcnRjdXRzIiwicmVtb3ZlQWxsU2hvcnRjdXRzIiwidG9vbEJ1dHRvbkFjdGl2YXRlZCIsImluc2VydE5ld0Jsb2NrIiwiZW5hYmxlU2hvcnRjdXRGb3JUb29sIiwiY29tcG9zZUJsb2NrRGF0YSIsIiRlIiwieXQiLCJCZSIsIkJsb2NrIiwiSW5saW5lIiwiVHVuZSIsInZlIiwiU2hvcnRjdXQiLCJUb29sYm94IiwiRW5hYmxlZElubGluZVRvb2xzIiwiRW5hYmxlZEJsb2NrVHVuZXMiLCJDb25maWciLCJFdCIsIlNhbml0aXplQ29uZmlnIiwic2UiLCJJc0VuYWJsZWRMaW5lQnJlYWtzIiwiQ29udmVyc2lvbkNvbmZpZyIsIklzUmVhZE9ubHlTdXBwb3J0ZWQiLCJQYXN0ZUNvbmZpZyIsIldlIiwiSXNJbmxpbmUiLCJUaXRsZSIsIkJ0IiwiSXNUdW5lIiwiWWUiLCJjb25zdHJ1Y3RhYmxlIiwiaXNEZWZhdWx0IiwiZGVmYXVsdFBsYWNlaG9sZGVyIiwidG9vbE5hbWUiLCJpc0lubGluZSIsImlzQmxvY2siLCJTZSIsIndvcmtpbmdBcmVhIiwiYXJyYXkiLCJOdW1iZXIiLCJSZWZsZWN0IiwiaW5zZXJ0VG9ET00iLCJtb3ZlIiwiY29tcG9zZUJsb2NrRXZlbnQiLCJmcm9tSW5kZXgiLCJ0b0luZGV4IiwicmVwbGFjZVdpdGgiLCJpbnNlcnRNYW55IiwiRG9jdW1lbnRGcmFnbWVudCIsImFmdGVyIiwiaW5zZXJ0QWZ0ZXIiLCJpbnNlcnRBZGphY2VudEVsZW1lbnQiLCJkZXRhaWwiLCJudCIsInN0IiwicnQiLCJ0aSIsImNvbXBsZXRlZCIsIndlIiwiU1RBUlQiLCJERUZBVUxUIiwic2hhZG93Q2FyZXQiLCJpc0F0U3RhcnQiLCJmb2N1c09mZnNldCIsImdldEhpZ2hlckxldmVsU2libGluZ3MiLCJpc0F0RW5kIiwic2VsZWN0QmxvY2siLCJzZXRDdXJyZW50QmxvY2tCeUNoaWxkTm9kZSIsInNldFRvSW5wdXQiLCJzY3JvbGxCeSIsInNldFRvVGhlTGFzdEJsb2NrIiwibGFzdEJsb2NrIiwiaW5zZXJ0QXRFbmQiLCJleHRyYWN0RnJhZ21lbnRGcm9tQ2FyZXRQb3NpdGlvbiIsImRlbGV0ZUNvbnRlbnRzIiwic3Vic3RyaW5nIiwibmF2aWdhdGVOZXh0IiwibmV4dEJsb2NrIiwibmF2aWdhdGVQcmV2aW91cyIsInByZXZpb3VzQmxvY2siLCJjcmVhdGVTaGFkb3ciLCJyZXN0b3JlQ2FyZXQiLCJpbnNlcnRDb250ZW50QXRDYXJldFBvc2l0aW9uIiwibGFzdENoaWxkIiwiQ3QiLCJNSU1FX1RZUEUiLCJ0b29sc1RhZ3MiLCJ0YWdzQnlUb29sIiwidG9vbHNQYXR0ZXJucyIsInRvb2xzRmlsZXMiLCJleGNlcHRpb25MaXN0IiwicHJvY2Vzc1Rvb2wiLCJwYXN0ZUNvbmZpZyIsIm9uUGFzdGUiLCJnZXRUYWdzQ29uZmlnIiwiZ2V0RmlsZXNDb25maWciLCJnZXRQYXR0ZXJuc0NvbmZpZyIsImhhbmRsZVBhc3RlRXZlbnQiLCJUb29sYmFyIiwiaXNOYXRpdmVCZWhhdmlvdXIiLCJjbGlwYm9hcmREYXRhIiwidHlwZXMiLCJwcm9jZXNzRGF0YVRyYW5zZmVyIiwicHJvY2Vzc1Rvb2xzIiwidG9nZ2xlUmVhZE9ubHkiLCJ1bnNldENhbGxiYWNrIiwic2V0Q2FsbGJhY2siLCJwcm9jZXNzRmlsZXMiLCJmaWxlcyIsImdldERhdGEiLCJpbnNlcnRFZGl0b3JKU0RhdGEiLCJwYXJzZSIsInNhbml0aXphdGlvbkNvbmZpZyIsImdldEFsbElubGluZVRvb2xzU2FuaXRpemVDb25maWciLCJwcm9jZXNzVGV4dCIsInByb2Nlc3NIVE1MIiwicHJvY2Vzc1BsYWluIiwicHJvY2Vzc1NpbmdsZUJsb2NrIiwicHJvY2Vzc0lubGluZVBhc3RlIiwiY29sbGVjdFRhZ05hbWVzIiwiZXh0ZW5zaW9ucyIsIm1pbWVUeXBlcyIsImp0IiwicGF0dGVybnMiLCJwYXR0ZXJuIiwicHJvY2Vzc0ZpbGUiLCJwYXN0ZSIsIlV0IiwiY29tcG9zZVBhc3RlRXZlbnQiLCJmaWxlIiwiZ2V0Tm9kZXMiLCJkZWZhdWx0VG9vbCIsImJhc2VTYW5pdGl6ZUNvbmZpZyIsIm91dGVySFRNTCIsIlBBVFRFUk5fUFJPQ0VTU0lOR19NQVhfTEVOR1RIIiwicHJvY2Vzc1BhdHRlcm4iLCJleGVjIiwicHJvY2Vzc0VsZW1lbnROb2RlIiwiVHQiLCJmZSIsImlzUmVjdFNlbGVjdGlvbkFjdGl2YXRlZCIsIlNDUk9MTF9TUEVFRCIsIkhFSUdIVF9PRl9TQ1JPTExfWk9ORSIsIkJPVFRPTV9TQ1JPTExfWk9ORSIsIlRPUF9TQ1JPTExfWk9ORSIsIk1BSU5fTU9VU0VfQlVUVE9OIiwibW91c2Vkb3duIiwiaXNTY3JvbGxpbmciLCJpblNjcm9sbFpvbmUiLCJzdGFydFgiLCJzdGFydFkiLCJtb3VzZVgiLCJtb3VzZVkiLCJzdGFja09mU2VsZWN0ZWQiLCJsaXN0ZW5lcklkcyIsIm92ZXJsYXlDb250YWluZXIiLCJ0b3BTY3JvbGxab25lIiwiYm90dG9tU2Nyb2xsWm9uZSIsImVuYWJsZU1vZHVsZUJpbmRpbmdzIiwic3RhcnRTZWxlY3Rpb24iLCJlbGVtZW50RnJvbVBvaW50IiwiYWxsQmxvY2tzU2VsZWN0ZWQiLCJlbmRTZWxlY3Rpb24iLCJvdmVybGF5UmVjdGFuZ2xlIiwiZGlzcGxheSIsImlzUmVjdEFjdGl2YXRlZCIsImdlbkhUTUwiLCJwcm9jZXNzTW91c2VEb3duIiwicHJvY2Vzc01vdXNlTW92ZSIsInByb2Nlc3NNb3VzZUxlYXZlIiwicHJvY2Vzc1Njcm9sbCIsInByb2Nlc3NNb3VzZVVwIiwicGFnZVgiLCJwYWdlWSIsImNoYW5naW5nUmVjdGFuZ2xlIiwic2Nyb2xsQnlab25lcyIsImNsaWVudFkiLCJzY3JvbGxWZXJ0aWNhbCIsInJpZ2h0UG9zIiwibGVmdFBvcyIsImdlbkluZm9Gb3JNb3VzZVNlbGVjdGlvbiIsInJlY3RDcm9zc2VzQmxvY2tzIiwic2hyaW5rUmVjdGFuZ2xlVG9Qb2ludCIsInVwZGF0ZVJlY3RhbmdsZVNpemUiLCJ0cnlTZWxlY3ROZXh0QmxvY2siLCJpbnZlcnNlU2VsZWN0aW9uIiwic2VsZWN0QmxvY2tCeUluZGV4IiwidW5TZWxlY3RCbG9ja0J5SW5kZXgiLCJnZXRCbG9ja0J5Q2hpbGROb2RlIiwiYWRkQmxvY2tJblNlbGVjdGlvbiIsIktlIiwiREVGQVVMVF9QTEFDRUhPTERFUiIsIl9DU1MiLCJvbktleVVwIiwiX3BsYWNlaG9sZGVyIiwiX2RhdGEiLCJfZWxlbWVudCIsIl9wcmVzZXJ2ZUJsYW5rIiwicHJlc2VydmVCbGFuayIsImNvZGUiLCJkcmF3VmlldyIsImh5ZHJhdGUiLCJYZSIsImNvbW1hbmROYW1lIiwiYnV0dG9uQWN0aXZlIiwiYnV0dG9uTW9kaWZpZXIiLCJxdWVyeUNvbW1hbmRTdGF0ZSIsIlZlIiwicWUiLCJjb21tYW5kTGluayIsImNvbW1hbmRVbmxpbmsiLCJFTlRFUl9LRVkiLCJidXR0b25VbmxpbmsiLCJpbnB1dFNob3dlZCIsImlucHV0T3BlbmVkIiwibm90aWZpZXIiLCJyZW5kZXJBY3Rpb25zIiwiZW50ZXJQcmVzc2VkIiwidW5saW5rIiwiY2xvc2VBY3Rpb25zIiwidG9nZ2xlQWN0aW9ucyIsIm9wZW5BY3Rpb25zIiwidmFsaWRhdGVVUkwiLCJwcmVwYXJlTGluayIsImluc2VydExpbmsiLCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJhZGRQcm90b2NvbCIsIlN0IiwiaW5mbyIsInN1YnRpdGxlIiwic2F2ZWREYXRhIiwiaGkiLCJpbmxpbmVUb29scyIsImludGVybmFsVG9vbHMiLCJleHRlcm5hbFRvb2xzIiwicGkiLCJmaSIsIkl0IiwiWmUiLCJpc0xpbmVCcmVha3NFbmFibGVkIiwiZW5hYmxlZElubGluZVRvb2xzIiwiZW5hYmxlZEJsb2NrVHVuZXMiLCJnaSIsImVkaXRvckNvbmZpZyIsImdldENvbnN0cnVjdG9yIiwiTXQiLCJhbmltYXRpb24iLCJhYnMiLCJzY3JvbGxZIiwidG9nZ2xlQmxvY2tTZXR0aW5ncyIsIkx0IiwiQXQiLCJiaSIsIm1pIiwic3R1YlRvb2wiLCJ0b29sc0F2YWlsYWJsZSIsInRvb2xzVW5hdmFpbGFibGUiLCJhdmFpbGFibGUiLCJ1bmF2YWlsYWJsZSIsImludGVybmFsIiwidmFsaWRhdGVUb29scyIsInByZXBhcmVDb25maWciLCJmYWN0b3J5IiwiQVBJIiwiZ2V0TGlzdE9mUHJlcGFyZUZ1bmN0aW9ucyIsImZ1bmN0aW9uIiwienQiLCJ0b29sUHJlcGFyZU1ldGhvZFN1Y2Nlc3MiLCJ0b29sUHJlcGFyZU1ldGhvZEZhbGxiYWNrIiwicHJlcGFyZUJsb2NrVG9vbHMiLCJib2xkIiwiaXRhbGljIiwicGFyYWdyYXBoIiwiYXNzaWduSW5saW5lVG9vbHNUb0Jsb2NrVG9vbCIsImFzc2lnbkJsb2NrVHVuZXNUb0Jsb2NrVG9vbCIsImtpIiwid2kiLCJCbG9ja3NBUEkiLCJuZWVkVG9Gb2N1cyIsImdldEJsb2NrQnlJZCIsInZhbGlkYXRlSW5kZXgiLCJjb21wb3NlQmxvY2siLCJyZW5kZXJGcm9tSFRNTCIsImdldEJ5SWQiLCJnZXRCbG9ja0luZGV4Iiwic3RyZXRjaEJsb2NrIiwiY3VycmVudEJsb2NrSW5kZXgiLCJyZW1vdmVCbG9jayIsIk1vZGlmaWNhdGlvbnNPYnNlcnZlciIsImRpc2FibGUiLCJSZW5kZXJlciIsImVuYWJsZSIsIlBhc3RlIiwiQ2FyZXRBUEkiLCJzZXRUb0ZpcnN0QmxvY2siLCJmaXJzdEJsb2NrIiwic2V0VG9MYXN0QmxvY2siLCJzZXRUb1ByZXZpb3VzQmxvY2siLCJzZXRUb05leHRCbG9jayIsIkV2ZW50c0FQSSIsIkkxOG5BUEkiLCJldmVudHMiLCJMaXN0ZW5lcnNBUEkiLCJOb3RpZmllckFQSSIsInNhbml0aXplciIsIlNhbml0aXplckFQSSIsInNhdmVyIiwiU2F2ZXJBUEkiLCJTZWxlY3Rpb25BUEkiLCJTdHlsZXNBUEkiLCJUb29sYmFyQVBJIiwiSW5saW5lVG9vbGJhckFQSSIsIlRvb2x0aXBBUEkiLCJSZWFkT25seUFQSSIsIlVpQVBJIiwidHJ5VG9TaG93IiwiaXNFbmFibGVkIiwiUmVhZE9ubHkiLCJyZWplY3QiLCJTYXZlciIsImlubGluZVRvb2xCdXR0b24iLCJpbmxpbmVUb29sQnV0dG9uQWN0aXZlIiwibG9hZGVyIiwic2V0dGluZ3NCdXR0b24iLCJzZXR0aW5nc0J1dHRvbkFjdGl2ZSIsInRvZ2dsZVRvb2xib3giLCJtb3ZlQW5kT3BlbiIsIkJsb2NrU2V0dGluZ3MiLCJTbyIsImVkaXRvck5vZGVzIiwiY2xvc2VkIiwiY2xlYXJDYWNoZSIsInJlc29sdmVUdW5lQWxpYXNlcyIsImdldENvbnRyb2xzIiwiQ3Jvc3NCbG9ja1NlbGVjdGlvbiIsImlzQ3Jvc3NCbG9ja1NlbGVjdGlvblN0YXJ0ZWQiLCJ1bnNlbGVjdEJsb2NrIiwiQW8iLCJDb252ZXJzaW9uVG9vbGJhciIsInRvb2xib3hJbnN0YW5jZSIsImFjdGlvbnMiLCJhY3Rpb25zT3BlbmVkIiwidG9vbGJhck9wZW5lZCIsIm9wZW5lZFRvb2xib3hIb2xkZXJNb2RpZmllciIsInBsdXNCdXR0b24iLCJwbHVzQnV0dG9uU2hvcnRjdXQiLCJzZXR0aW5nc1RvZ2dsZXIiLCJzZXR0aW5nc1RvZ2dsZXJIaWRkZW4iLCJob3ZlcmVkQmxvY2siLCJibG9ja0FjdGlvbnMiLCJibG9ja1R1bmVzVG9nZ2xlciIsImRpc2FibGVNb2R1bGVCaW5kaW5ncyIsImRyYXdVSSIsInRpbWVvdXQiLCJpc01vYmlsZSIsInBhZGRpbmdUb3AiLCJwbHVzQnV0dG9uQ2xpY2tlZCIsIm1ha2VUb29sYm94Iiwic2V0dGluZ3NUb2dnbGVyQ2xpY2tlZCIsImlubGluZVRvb2xiYXJTaG93ZWQiLCJpbmxpbmVUb29sYmFyTGVmdE9yaWVudGVkIiwiaW5saW5lVG9vbGJhclJpZ2h0T3JpZW50ZWQiLCJpbmxpbmVUb29sYmFyU2hvcnRjdXQiLCJidXR0b25zV3JhcHBlciIsImFjdGlvbnNXcmFwcGVyIiwiaW5wdXRGaWVsZCIsImZvY3VzZWRCdXR0b24iLCJjb252ZXJzaW9uVG9nZ2xlciIsImNvbnZlcnNpb25Ub2dnbGVyQXJyb3ciLCJjb252ZXJzaW9uVG9nZ2xlckhpZGRlbiIsImNvbnZlcnNpb25Ub2dnbGVyQ29udGVudCIsInRvZ2dsZXJBbmRCdXR0b25zV3JhcHBlciIsInRvb2xiYXJWZXJ0aWNhbE1hcmdpbiIsImJ1dHRvbnNMaXN0IiwiYWxsb3dlZFRvU2hvdyIsImFkZFRvb2xzRmlsdGVyZWQiLCJ0b29sc0luc3RhbmNlcyIsImdldFRvb2xTaG9ydGN1dCIsImNvbnRhaW5zTm9kZSIsImJ1dHRvbnMiLCJhZGRDb252ZXJzaW9uVG9nZ2xlciIsInByZXBhcmVDb252ZXJzaW9uVG9vbGJhciIsInJlY2FsY3VsYXRlV2lkdGgiLCJjb250ZW50UmVjdCIsImdldEJsb2NrIiwic2l6ZSIsInNldENvbnZlcnNpb25Ub2dnbGVyQ29udGVudCIsInRvb2xDbGlja2VkIiwiY2hlY2tUb29sc1N0YXRlIiwiQmxvY2tFdmVudHMiLCJrZXlkb3duIiwiYmVmb3JlS2V5ZG93blByb2Nlc3NpbmciLCJiYWNrc3BhY2UiLCJlbnRlciIsImFycm93UmlnaHRBbmREb3duIiwiYXJyb3dMZWZ0QW5kVXAiLCJ0YWJQcmVzc2VkIiwiY29tbWFuZFNsYXNoUHJlc3NlZCIsInNsYXNoUHJlc3NlZCIsIm5lZWRUb29sYmFyQ2xvc2luZyIsImtleXVwIiwiY2hlY2tFbXB0aW5lc3MiLCJkcmFnT3ZlciIsImRyYWdMZWF2ZSIsImhhbmRsZUNvbW1hbmRDIiwiYW55QmxvY2tTZWxlY3RlZCIsImNvcHlTZWxlY3RlZEJsb2NrcyIsImhhbmRsZUNvbW1hbmRYIiwicmVtb3ZlU2VsZWN0ZWRCbG9ja3MiLCJpbnNlcnREZWZhdWx0QmxvY2tBdEluZGV4Iiwic2VsZWN0ZWRCbG9ja3MiLCJhY3RpdmF0ZUJsb2NrU2V0dGluZ3MiLCJhY3RpdmF0ZVRvb2xib3giLCJzb21lVG9vbGJhck9wZW5lZCIsInNvbWVGbGlwcGVyQnV0dG9uRm9jdXNlZCIsIm1lcmdlQmxvY2tzIiwidG9nZ2xlQmxvY2tTZWxlY3RlZFN0YXRlIiwiY2xvc2VBbGxUb29sYmFycyIsIl9jdXJyZW50QmxvY2tJbmRleCIsIl9ibG9ja3MiLCJuZXh0Q29udGVudGZ1bEJsb2NrIiwicHJldmlvdXNDb250ZW50ZnVsQmxvY2siLCJpc0VkaXRvckVtcHR5IiwiUHJveHkiLCJiaW5kQmxvY2tFdmVudHMiLCJibG9ja0RpZE11dGF0ZWQiLCJyZW1vdmVBbGxCbG9ja3MiLCJpc0VxdWFsTm9kZSIsInRvIiwiZHJvcFBvaW50ZXIiLCJhbnlCbG9ja1NlbGVjdGVkQ2FjaGUiLCJuZWVkVG9TZWxlY3RBbGwiLCJuYXRpdmVJbnB1dFNlbGVjdGVkIiwicmVhZHlUb0Jsb2NrU2VsZWN0aW9uIiwic2FuaXRpemVyQ29uZmlnIiwiaDEiLCJoMiIsImgzIiwiaDQiLCJoNSIsImg2Iiwib2wiLCJ1bCIsImxpIiwiaW1nIiwic3JjIiwic2VsZWN0QWxsQmxvY2tzIiwiaGFuZGxlQ29tbWFuZEEiLCJSZWN0YW5nbGVTZWxlY3Rpb24iLCJLZXlib2FyZEV2ZW50Iiwic2V0RGF0YSIsIm9uTW91c2VVcCIsIm9uTW91c2VPdmVyIiwicmVsYXRlZFRhcmdldCIsImxhc3RTZWxlY3RlZEJsb2NrIiwiZmlyc3RTZWxlY3RlZEJsb2NrIiwidG9nZ2xlQmxvY2tzU2VsZWN0ZWRTdGF0ZSIsImVuYWJsZUNyb3NzQmxvY2tTZWxlY3Rpb24iLCJ3YXRjaFNlbGVjdGlvbiIsIkRyYWdORHJvcCIsImlzU3RhcnRlZEF0RWRpdG9yIiwicHJvY2Vzc0Ryb3AiLCJwcm9jZXNzRHJhZ1N0YXJ0IiwicHJvY2Vzc0RyYWdPdmVyIiwiZGF0YVRyYW5zZmVyIiwiYmF0Y2hpbmdUaW1lb3V0IiwiYmF0Y2hpbmdPbkNoYW5nZVF1ZXVlIiwiYmF0Y2hUaW1lIiwibXV0YXRpb25PYnNlcnZlciIsInJlZGFjdG9yQ2hhbmdlZCIsInBhcnRpY3VsYXJCbG9ja0NoYW5nZWQiLCJ0b29sc0RvbnRTdXBwb3J0UmVhZE9ubHkiLCJyZWFkT25seUVuYWJsZWQiLCJ0aHJvd0NyaXRpY2FsRXJyb3IiLCJjb21wb3NlU3R1YkRhdGFGb3JUb29sIiwiZ2V0U2F2ZWREYXRhIiwibWFrZU91dHB1dCIsImlzVmFsaWQiLCJ2ZXJzaW9uIiwiY29udGVudFJlY3RDYWNoZSIsInJlc2l6ZURlYm91bmNlciIsIndpbmRvd1Jlc2l6ZSIsImVkaXRvcldyYXBwZXJOYXJyb3ciLCJlZGl0b3Jab25lSGlkZGVuIiwiZWRpdG9yRW1wdHkiLCJjaGVja0lzTW9iaWxlIiwiaW5uZXJXaWR0aCIsInBhZGRpbmdCb3R0b20iLCJtaW5IZWlnaHQiLCJub25jZSIsInJlZGFjdG9yQ2xpY2tlZCIsImRvY3VtZW50VG91Y2hlZCIsImNhcHR1cmUiLCJkb2N1bWVudEtleWRvd24iLCJkb2N1bWVudENsaWNrZWQiLCJzZWxlY3Rpb25DaGFuZ2VkIiwid2F0Y2hCbG9ja0hvdmVyZWRFdmVudHMiLCJiYWNrc3BhY2VQcmVzc2VkIiwiZXNjYXBlUHJlc3NlZCIsImRlZmF1bHRCZWhhdmlvdXIiLCJpc1RydXN0ZWQiLCJNb3VzZUV2ZW50IiwiY2xpZW50WCIsInRvdWNoZXMiLCJvcmlnaW4iLCJXdCIsIkt0IiwicHJvY2Vzc0JvdHRvbVpvbmVDbGljayIsInlpIiwibW9kdWxlSW5zdGFuY2VzIiwiaW5pdCIsInN0YXJ0IiwiYXV0b2ZvY3VzIiwiaG9sZGVySWQiLCJGdCIsImluaXRpYWxCbG9jayIsImhpZGVUb29sYmFyIiwiY29uc3RydWN0TW9kdWxlcyIsImNvbmZpZ3VyZU1vZHVsZXMiLCJnZXRNb2R1bGVzRGlmZiIsIkVpIiwiZXhwb3J0QVBJIiwiX3NldHRpbmdzIiwibm9ybWFsaXplRGF0YSIsImdldFRhZyIsImxldmVsIiwiZGVmYXVsdExldmVsIiwibnVtYmVyIiwibGV2ZWxzIiwic3ZnIiwic2V0TGV2ZWwiLCJjdXJyZW50TGV2ZWwiLCJyZXBsYWNlQ2hpbGQiLCJ0YWciLCJfZWxlbWVudHMiLCJtYWtlTWFpblRhZyIsImdldE91dG9mTGlzdCIsInRvZ2dsZVR1bmUiLCJwYXN0ZUhhbmRsZXIiLCJ3cmFwcGVyT3JkZXJlZCIsIndyYXBwZXJVbm9yZGVyZWQiLCJiYXNlQmxvY2siLCJoYXNDaGlsZE5vZGVzIiwic2VsZWN0SXRlbSIsIlJhbmdlIiwiZGlzcGxheUluVG9vbGJveCIsInRleHRhcmVhIiwiaHRtbCIsInJlc2l6ZURlYm91bmNlIiwib25JbnB1dCIsInJlc2l6ZSIsInNjcm9sbEhlaWdodCIsIl9fd2VicGFja19tb2R1bGVzX18iLCJfX3VudXNlZF93ZWJwYWNrX19fd2VicGFja19tb2R1bGVfXyIsIkFubm90YXRpb25MYXllciIsIkZyZWVUZXh0QW5ub3RhdGlvbkVsZW1lbnQiLCJJbmtBbm5vdGF0aW9uRWxlbWVudCIsIlN0YW1wQW5ub3RhdGlvbkVsZW1lbnQiLCJ1dGlsIiwiZGlzcGxheV91dGlscyIsImFubm90YXRpb25fc3RvcmFnZSIsIm1ha2VDb2xvckNvbXAiLCJwYWRTdGFydCIsInNjYWxlQW5kQ2xhbXAiLCJDb2xvckNvbnZlcnRlcnMiLCJDTVlLX0ciLCJHX0NNWUsiLCJHX1JHQiIsIkdfcmdiIiwiR19IVE1MIiwiUkdCX0ciLCJSR0JfcmdiIiwiY29sb3IiLCJSR0JfSFRNTCIsIlRfSFRNTCIsIlRfcmdiIiwiQ01ZS19SR0IiLCJDTVlLX3JnYiIsIkNNWUtfSFRNTCIsImNvbXBvbmVudHMiLCJyZ2IiLCJSR0JfQ01ZSyIsInhmYV9sYXllciIsIkRFRkFVTFRfVEFCX0lOREVYIiwiR2V0RWxlbWVudHNCeU5hbWVTZXQiLCJXZWFrU2V0IiwiZ2V0UmVjdERpbXMiLCJBbm5vdGF0aW9uRWxlbWVudEZhY3RvcnkiLCJwYXJhbWV0ZXJzIiwiYW5ub3RhdGlvblR5cGUiLCJBbm5vdGF0aW9uVHlwZSIsIkxJTksiLCJMaW5rQW5ub3RhdGlvbkVsZW1lbnQiLCJURVhUIiwiVGV4dEFubm90YXRpb25FbGVtZW50IiwiV0lER0VUIiwiZmllbGRUeXBlIiwiVGV4dFdpZGdldEFubm90YXRpb25FbGVtZW50IiwicmFkaW9CdXR0b24iLCJSYWRpb0J1dHRvbldpZGdldEFubm90YXRpb25FbGVtZW50IiwiY2hlY2tCb3giLCJDaGVja2JveFdpZGdldEFubm90YXRpb25FbGVtZW50IiwiUHVzaEJ1dHRvbldpZGdldEFubm90YXRpb25FbGVtZW50IiwiQ2hvaWNlV2lkZ2V0QW5ub3RhdGlvbkVsZW1lbnQiLCJTaWduYXR1cmVXaWRnZXRBbm5vdGF0aW9uRWxlbWVudCIsIldpZGdldEFubm90YXRpb25FbGVtZW50IiwiUE9QVVAiLCJQb3B1cEFubm90YXRpb25FbGVtZW50IiwiRlJFRVRFWFQiLCJMSU5FIiwiTGluZUFubm90YXRpb25FbGVtZW50IiwiU1FVQVJFIiwiU3F1YXJlQW5ub3RhdGlvbkVsZW1lbnQiLCJDSVJDTEUiLCJDaXJjbGVBbm5vdGF0aW9uRWxlbWVudCIsIlBPTFlMSU5FIiwiUG9seWxpbmVBbm5vdGF0aW9uRWxlbWVudCIsIkNBUkVUIiwiQ2FyZXRBbm5vdGF0aW9uRWxlbWVudCIsIklOSyIsIlBPTFlHT04iLCJQb2x5Z29uQW5ub3RhdGlvbkVsZW1lbnQiLCJISUdITElHSFQiLCJIaWdobGlnaHRBbm5vdGF0aW9uRWxlbWVudCIsIlVOREVSTElORSIsIlVuZGVybGluZUFubm90YXRpb25FbGVtZW50IiwiU1FVSUdHTFkiLCJTcXVpZ2dseUFubm90YXRpb25FbGVtZW50IiwiU1RSSUtFT1VUIiwiU3RyaWtlT3V0QW5ub3RhdGlvbkVsZW1lbnQiLCJTVEFNUCIsIkZJTEVBVFRBQ0hNRU5UIiwiRmlsZUF0dGFjaG1lbnRBbm5vdGF0aW9uRWxlbWVudCIsIkFubm90YXRpb25FbGVtZW50IiwiaXNSZW5kZXJhYmxlIiwiaWdub3JlQm9yZGVyIiwiY3JlYXRlUXVhZHJpbGF0ZXJhbHMiLCJsYXllciIsImxpbmtTZXJ2aWNlIiwiZG93bmxvYWRNYW5hZ2VyIiwiaW1hZ2VSZXNvdXJjZXNQYXRoIiwicmVuZGVyRm9ybXMiLCJzdmdGYWN0b3J5IiwiYW5ub3RhdGlvblN0b3JhZ2UiLCJlbmFibGVTY3JpcHRpbmciLCJoYXNKU0FjdGlvbnMiLCJfZmllbGRPYmplY3RzIiwiZmllbGRPYmplY3RzIiwicGFyZW50IiwiX2NyZWF0ZUNvbnRhaW5lciIsIl9jcmVhdGVRdWFkcmlsYXRlcmFscyIsIl9oYXNQb3B1cERhdGEiLCJ0aXRsZU9iaiIsImNvbnRlbnRzT2JqIiwicmljaFRleHQiLCJzdHIiLCJoYXNQb3B1cERhdGEiLCJ6SW5kZXgiLCJwb3B1cFJlZiIsIm5vUm90YXRlIiwicGFnZVdpZHRoIiwicGFnZUhlaWdodCIsInJhd0RpbXMiLCJyb3RhdGlvbiIsImhhc093bkNhbnZhcyIsInNldFJvdGF0aW9uIiwiVXRpbCIsIm5vcm1hbGl6ZVJlY3QiLCJ2aWV3IiwiYm9yZGVyU3R5bGUiLCJib3JkZXJXaWR0aCIsImhvcml6b250YWxSYWRpdXMiLCJob3Jpem9udGFsQ29ybmVyUmFkaXVzIiwidmVydGljYWxSYWRpdXMiLCJ2ZXJ0aWNhbENvcm5lclJhZGl1cyIsInJhZGl1cyIsImJvcmRlclJhZGl1cyIsIkFubm90YXRpb25Cb3JkZXJTdHlsZVR5cGUiLCJTT0xJRCIsIkRBU0hFRCIsIkJFVkVMRUQiLCJJTlNFVCIsImJvcmRlckJvdHRvbVN0eWxlIiwiYm9yZGVyQ29sb3IiLCJtYWtlSGV4Q29sb3IiLCJhbmdsZSIsImVsZW1lbnRXaWR0aCIsImVsZW1lbnRIZWlnaHQiLCJfY29tbW9uQWN0aW9ucyIsInNldENvbG9yIiwianNOYW1lIiwic3R5bGVOYW1lIiwiY29sb3JUeXBlIiwiY29sb3JBcnJheSIsInNldFZhbHVlIiwic2hhZG93Iiwibm9WaWV3Iiwibm9QcmludCIsInByaW50IiwicHJldmVudFNjcm9sbCIsInVzZXJOYW1lIiwicmVhZG9ubHkiLCJyZXF1aXJlZCIsIl9zZXRSZXF1aXJlZCIsImJnQ29sb3IiLCJmaWxsQ29sb3IiLCJmZ0NvbG9yIiwidGV4dENvbG9yIiwic3Ryb2tlQ29sb3IiLCJfZGlzcGF0Y2hFdmVudEZyb21TYW5kYm94IiwianNFdmVudCIsImNvbW1vbkFjdGlvbnMiLCJhY3Rpb24iLCJfc2V0RGVmYXVsdFByb3BlcnRpZXNGcm9tSlMiLCJzdG9yZWREYXRhIiwiZ2V0UmF3VmFsdWUiLCJhY3Rpb25OYW1lIiwicXVhZFBvaW50cyIsInJlY3RCbFgiLCJyZWN0QmxZIiwicmVjdFRyWCIsInJlY3RUclkiLCJ0clgiLCJ0clkiLCJibFgiLCJibFkiLCJzdmdCdWZmZXIiLCJkZWZzIiwiY2xpcFBhdGgiLCJyZWN0V2lkdGgiLCJyZWN0SGVpZ2h0IiwiYmFja2dyb3VuZEltYWdlIiwiX2NyZWF0ZVBvcHVwIiwicG9wdXAiLCJtb2RpZmljYXRpb25EYXRlIiwicGFyZW50UmVjdCIsImVsZW1lbnRzIiwiZGl2IiwidW5yZWFjaGFibGUiLCJfZ2V0RWxlbWVudHNCeU5hbWUiLCJza2lwSWQiLCJmaWVsZHMiLCJmaWVsZE9iaiIsImV4cG9ydFZhbHVlcyIsImV4cG9ydFZhbHVlIiwiZG9tRWxlbWVudCIsImdldEVsZW1lbnRzQnlOYW1lIiwibWF5YmVTaG93IiwiZm9yY2VIaWRlIiwiZ2V0RWxlbWVudHNUb1RyaWdnZXJQb3B1cCIsImFkZEhpZ2hsaWdodEFyZWEiLCJ0cmlnZ2VycyIsIl9pc0VkaXRhYmxlIiwiX2VkaXRPbkRvdWJsZUNsaWNrIiwiYW5ub3RhdGlvbkVkaXRvclR5cGUiLCJtb2RlIiwiZWRpdElkIiwiZXZlbnRCdXMiLCJkaXNwYXRjaCIsInNvdXJjZSIsImlzVG9vbHRpcE9ubHkiLCJpc0JvdW5kIiwidXJsIiwiYWRkTGlua0F0dHJpYnV0ZXMiLCJuZXdXaW5kb3ciLCJfYmluZE5hbWVkQWN0aW9uIiwiYXR0YWNobWVudCIsImF0dGFjaG1lbnREZXN0Iiwic2V0T0NHU3RhdGUiLCJkZXN0IiwiX2JpbmRMaW5rIiwiQWN0aW9uIiwiX2JpbmRKU0FjdGlvbiIsInJlc2V0Rm9ybSIsIl9iaW5kUmVzZXRGb3JtQWN0aW9uIiwiZGVzdGluYXRpb24iLCJnZXREZXN0aW5hdGlvbkhhc2giLCJvbmNsaWNrIiwiZ29Ub0Rlc3RpbmF0aW9uIiwiZ2V0QW5jaG9yVXJsIiwiZXhlY3V0ZU5hbWVkQWN0aW9uIiwib3Blbk9yRG93bmxvYWREYXRhIiwiZmlsZW5hbWUiLCJleGVjdXRlU2V0T0NHU3RhdGUiLCJvdGhlckNsaWNrQWN0aW9uIiwicmVzZXRGb3JtRmllbGRzIiwicmVzZXRGb3JtUmVmcyIsImluY2x1ZGUiLCJhbGxGaWVsZHMiLCJmaWVsZElkcyIsIlNldCIsImZpZWxkTmFtZSIsImZpZWxkIiwic3RvcmFnZSIsImFsbElkcyIsImRlZmF1bHRWYWx1ZSIsIkV2ZW50IiwiaWRzIiwiaW1hZ2UiLCJhbHRlcm5hdGl2ZVRleHQiLCJzaG93RWxlbWVudEFuZEhpZGVDYW52YXMiLCJwcmV2aW91c1NpYmxpbmciLCJfZ2V0S2V5TW9kaWZpZXIiLCJGZWF0dXJlVGVzdCIsImlzTWFjIiwiX3NldEV2ZW50TGlzdGVuZXIiLCJlbGVtZW50RGF0YSIsImJhc2VOYW1lIiwiZXZlbnROYW1lIiwidmFsdWVHZXR0ZXIiLCJtb2RpZmllciIsIl9zZXRFdmVudExpc3RlbmVycyIsIm5hbWVzIiwiZ2V0dGVyIiwiQmx1ciIsIkZvY3VzIiwiX3NldEJhY2tncm91bmRDb2xvciIsImJhY2tncm91bmRDb2xvciIsIl9zZXRUZXh0U3R5bGUiLCJmb250Q29sb3IiLCJkZWZhdWx0QXBwZWFyYW5jZURhdGEiLCJmb250U2l6ZSIsImNvbXB1dGVkRm9udFNpemUiLCJyb3VuZFRvT25lRGVjaW1hbCIsInJvdW5kIiwibXVsdGlMaW5lIiwibGluZUhlaWdodCIsIkxJTkVfRkFDVE9SIiwidGV4dEFsaWdubWVudCIsInRleHRBbGlnbiIsImlzUmVxdWlyZWQiLCJoYXNBcHBlYXJhbmNlIiwiZmllbGRWYWx1ZSIsInNldFByb3BlcnR5T25TaWJsaW5ncyIsImtleUluU3RvcmFnZSIsImdldFZhbHVlIiwibWF4TGVuIiwiY2hhckxpbWl0IiwiZmllbGRGb3JtYXR0ZWRWYWx1ZXMiLCJmb3JtYXR0ZWRWYWx1ZSIsImNvbWIiLCJyZXBsYWNlQWxsIiwidXNlclZhbHVlIiwibGFzdENvbW1pdHRlZFZhbHVlIiwiY29tbWl0S2V5IiwiZG9Ob3RTY3JvbGwiLCJvdmVyZmxvd1kiLCJvdmVyZmxvd1giLCJkZWZhdWx0RmllbGRWYWx1ZSIsImJsdXJMaXN0ZW5lciIsInNlbFJhbmdlIiwid2lsbENvbW1pdCIsInNlbFN0YXJ0Iiwic2VsRW5kIiwiX2JsdXJMaXN0ZW5lciIsIktleXN0cm9rZSIsImNoYW5nZSIsImNvbWJXaWR0aCIsImxldHRlclNwYWNpbmciLCJ2ZXJ0aWNhbEFsaWduIiwiY2hlY2tlZCIsImNoZWNrYm94IiwiY3VyQ2hlY2tlZCIsImJ1dHRvblZhbHVlIiwicmFkaW8iLCJwZGZCdXR0b25WYWx1ZSIsImxpbmtFbGVtZW50Iiwic2VsZWN0RWxlbWVudCIsImFkZEFuRW1wdHlFbnRyeSIsImNvbWJvIiwibXVsdGlTZWxlY3QiLCJtdWx0aXBsZSIsIm9wdGlvbiIsIm9wdGlvbkVsZW1lbnQiLCJkaXNwbGF5VmFsdWUiLCJyZW1vdmVFbXB0eUVudHJ5Iiwibm9uZU9wdGlvbkVsZW1lbnQiLCJpc0V4cG9ydCIsInNlbGVjdGVkSW5kZXgiLCJzZWxlY3RlZFZhbHVlcyIsImdldEl0ZW1zIiwibXVsdGlwbGVTZWxlY3Rpb24iLCJzZWxlY3RDaGlsZCIsImluZGljZXMiLCJlZGl0YWJsZSIsImNoYW5nZUV4Iiwia2V5RG93biIsIlBvcHVwRWxlbWVudCIsImVsZW1lbnRJZHMiLCJBbm5vdGF0aW9uUHJlZml4IiwiUERGRGF0ZVN0cmluZyIsInRvRGF0ZU9iamVjdCIsInRyaWdnZXIiLCJmbGF0TWFwIiwiY2xhc3NOYW1lIiwiYmFzZUNvbG9yIiwib3V0bGluZUNvbG9yIiwic3VwcG9ydHMiLCJCQUNLR1JPVU5EX0VOTElHSFQiLCJkaXIiLCJkYXRlIiwidG9Mb2NhbGVEYXRlU3RyaW5nIiwidG9Mb2NhbGVUaW1lU3RyaW5nIiwiY29udGVudHMiLCJfZm9ybWF0Q29udGVudHMiLCJYZmFMYXllciIsInhmYUh0bWwiLCJpbnRlbnQiLCJ1c2VQYXJlbnRSZWN0IiwiaW50ZXJzZWN0Iiwibm9ybWFsaXplZFJlY3QiLCJwYXJlbnRXaWR0aCIsInBvcHVwTGVmdCIsInBvcHVwVG9wIiwibGluZXMiLCJpaSIsImxpbmUiLCJpc1Zpc2libGUiLCJ0ZXh0UG9zaXRpb24iLCJBbm5vdGF0aW9uRWRpdG9yVHlwZSIsImxpbmVTcGFuIiwibGluZUNvb3JkaW5hdGVzIiwic3F1YXJlIiwiY2lyY2xlIiwiY29udGFpbmVyQ2xhc3NOYW1lIiwic3ZnRWxlbWVudE5hbWUiLCJwb2ludHMiLCJjb29yZGluYXRlIiwidmVydGljZXMiLCJwb2x5bGluZSIsImlua0xpc3QiLCJpbmtMaXN0cyIsImdldEZpbGVuYW1lRnJvbVVybCIsImZpbGxBbHBoYSIsImV2dCIsImFjY2Vzc2liaWxpdHlNYW5hZ2VyIiwiYW5ub3RhdGlvbkNhbnZhc01hcCIsImNvbnRlbnRFbGVtZW50IiwibW92ZUVsZW1lbnRJbkRPTSIsImFubm90YXRpb25zIiwic2V0TGF5ZXJEaW1lbnNpb25zIiwicG9wdXBUb0VsZW1lbnRzIiwiZWxlbWVudFBhcmFtcyIsIkRPTVNWR0ZhY3RvcnkiLCJBbm5vdGF0aW9uU3RvcmFnZSIsIm5vSFRNTCIsImlzUG9wdXBBbm5vdGF0aW9uIiwicmVuZGVyZWQiLCJnZXRFZGl0YWJsZUFubm90YXRpb25zIiwiZ2V0RWRpdGFibGVBbm5vdGF0aW9uIiwiUHJpbnRBbm5vdGF0aW9uU3RvcmFnZSIsIlNlcmlhbGl6YWJsZUVtcHR5IiwiX3NoYXJlZF91dGlsX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJfZWRpdG9yX2VkaXRvcl9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fIiwiX3NoYXJlZF9tdXJtdXJoYXNoM19qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fIiwiZnJlZXplIiwiaGFzaCIsInRyYW5zZmVyIiwidW5kZWZpbmVkIiwib25TZXRNb2RpZmllZCIsIm9uUmVzZXRNb2RpZmllZCIsIm9uQW5ub3RhdGlvbkVkaXRvciIsInJlc2V0TW9kaWZpZWQiLCJBbm5vdGF0aW9uRWRpdG9yIiwib2JqIiwibW9kaWZpZWQiLCJlbnRyeSIsInZhbCIsIl90eXBlIiwiZ2V0QWxsIiwib2JqZWN0RnJvbU1hcCIsInNldEFsbCIsInNlcmlhbGl6YWJsZSIsIk11cm11ckhhc2gzXzY0IiwiY29udGV4dCIsImhhc0JpdG1hcCIsInNlcmlhbGl6ZWQiLCJzZXJpYWxpemUiLCJiaXRtYXAiLCJoZXhkaWdlc3QiLCJjbG9uZSIsInN0cnVjdHVyZWRDbG9uZSIsIl9fd2VicGFja19tb2R1bGVfXyIsIl9fd2VicGFja19oYW5kbGVfYXN5bmNfZGVwZW5kZW5jaWVzX18iLCJfX3dlYnBhY2tfYXN5bmNfcmVzdWx0X18iLCJQREZEYXRhUmFuZ2VUcmFuc3BvcnQiLCJQREZXb3JrZXIiLCJidWlsZCIsImdldERvY3VtZW50IiwiX2Fubm90YXRpb25fc3RvcmFnZV9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fIiwiX2Rpc3BsYXlfdXRpbHNfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXyIsIl9mb250X2xvYWRlcl9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fIiwiZGlzcGxheV9ub2RlX3V0aWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X18iLCJfY2FudmFzX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X18iLCJfd29ya2VyX29wdGlvbnNfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzZfXyIsIl9zaGFyZWRfbWVzc2FnZV9oYW5kbGVyX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV83X18iLCJfbWV0YWRhdGFfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzhfXyIsIl9vcHRpb25hbF9jb250ZW50X2NvbmZpZ19qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfOV9fIiwiX3RyYW5zcG9ydF9zdHJlYW1fanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzEwX18iLCJkaXNwbGF5X2ZldGNoX3N0cmVhbV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTFfXyIsImRpc3BsYXlfbmV0d29ya19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTJfXyIsImRpc3BsYXlfbm9kZV9zdHJlYW1fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzEzX18iLCJfeGZhX3RleHRfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE0X18iLCJfX3dlYnBhY2tfYXN5bmNfZGVwZW5kZW5jaWVzX18iLCJERUZBVUxUX1JBTkdFX0NIVU5LX1NJWkUiLCJSRU5ERVJJTkdfQ0FOQ0VMTEVEX1RJTUVPVVQiLCJERUxBWUVEX0NMRUFOVVBfVElNRU9VVCIsIkRlZmF1bHRDYW52YXNGYWN0b3J5IiwiaXNOb2RlSlMiLCJOb2RlQ2FudmFzRmFjdG9yeSIsIkRPTUNhbnZhc0ZhY3RvcnkiLCJEZWZhdWx0Q01hcFJlYWRlckZhY3RvcnkiLCJOb2RlQ01hcFJlYWRlckZhY3RvcnkiLCJET01DTWFwUmVhZGVyRmFjdG9yeSIsIkRlZmF1bHRGaWx0ZXJGYWN0b3J5IiwiTm9kZUZpbHRlckZhY3RvcnkiLCJET01GaWx0ZXJGYWN0b3J5IiwiRGVmYXVsdFN0YW5kYXJkRm9udERhdGFGYWN0b3J5IiwiTm9kZVN0YW5kYXJkRm9udERhdGFGYWN0b3J5IiwiRE9NU3RhbmRhcmRGb250RGF0YUZhY3RvcnkiLCJpc0FycmF5QnVmZmVyIiwidGFzayIsIlBERkRvY3VtZW50TG9hZGluZ1Rhc2siLCJkb2NJZCIsImdldFVybFByb3AiLCJnZXREYXRhUHJvcCIsImh0dHBIZWFkZXJzIiwid2l0aENyZWRlbnRpYWxzIiwicGFzc3dvcmQiLCJyYW5nZVRyYW5zcG9ydCIsInJhbmdlQ2h1bmtTaXplIiwiaXNJbnRlZ2VyIiwid29ya2VyIiwidmVyYm9zaXR5IiwiZG9jQmFzZVVybCIsImlzRGF0YVNjaGVtZSIsImNNYXBVcmwiLCJjTWFwUGFja2VkIiwiQ01hcFJlYWRlckZhY3RvcnkiLCJzdGFuZGFyZEZvbnREYXRhVXJsIiwiU3RhbmRhcmRGb250RGF0YUZhY3RvcnkiLCJpZ25vcmVFcnJvcnMiLCJzdG9wQXRFcnJvcnMiLCJtYXhJbWFnZVNpemUiLCJpc0V2YWxTdXBwb3J0ZWQiLCJpc09mZnNjcmVlbkNhbnZhc1N1cHBvcnRlZCIsImNhbnZhc01heEFyZWFJbkJ5dGVzIiwiZGlzYWJsZUZvbnRGYWNlIiwiZm9udEV4dHJhUHJvcGVydGllcyIsImVuYWJsZVhmYSIsImRpc2FibGVSYW5nZSIsImRpc2FibGVTdHJlYW0iLCJkaXNhYmxlQXV0b0ZldGNoIiwicGRmQnVnIiwiTmFOIiwidXNlU3lzdGVtRm9udHMiLCJ1c2VXb3JrZXJGZXRjaCIsImlzVmFsaWRGZXRjaFVybCIsImJhc2VVUkkiLCJjYW52YXNGYWN0b3J5IiwiZmlsdGVyRmFjdG9yeSIsInNldFZlcmJvc2l0eUxldmVsIiwidHJhbnNwb3J0RmFjdG9yeSIsImNNYXBSZWFkZXJGYWN0b3J5IiwiYmFzZVVybCIsImlzQ29tcHJlc3NlZCIsInN0YW5kYXJkRm9udERhdGFGYWN0b3J5Iiwid29ya2VyUGFyYW1zIiwicG9ydCIsIkdsb2JhbFdvcmtlck9wdGlvbnMiLCJ3b3JrZXJQb3J0IiwiZnJvbVBvcnQiLCJfd29ya2VyIiwiZmV0Y2hEb2NQYXJhbXMiLCJhcGlWZXJzaW9uIiwiZXZhbHVhdG9yT3B0aW9ucyIsInRyYW5zcG9ydFBhcmFtcyIsInN0eWxlRWxlbWVudCIsImRlc3Ryb3llZCIsIndvcmtlcklkUHJvbWlzZSIsIl9mZXRjaERvY3VtZW50IiwibmV0d29ya1N0cmVhbVByb21pc2UiLCJuZXR3b3JrU3RyZWFtIiwiUERGRGF0YVRyYW5zcG9ydFN0cmVhbSIsImluaXRpYWxEYXRhIiwicHJvZ3Jlc3NpdmVEb25lIiwiY29udGVudERpc3Bvc2l0aW9uRmlsZW5hbWUiLCJQREZOb2RlU3RyZWFtIiwiUERGRmV0Y2hTdHJlYW0iLCJQREZOZXR3b3JrU3RyZWFtIiwid29ya2VySWQiLCJtZXNzYWdlSGFuZGxlciIsIk1lc3NhZ2VIYW5kbGVyIiwidHJhbnNwb3J0IiwiV29ya2VyVHJhbnNwb3J0IiwiX3RyYW5zcG9ydCIsInNlbmQiLCJfY2FwYWJpbGl0eSIsInNlbmRXaXRoUHJvbWlzZSIsImJ1ZmZlciIsIkJ1ZmZlciIsImJ5dGVMZW5ndGgiLCJzdHJpbmdUb0J5dGVzIiwic3RhdGljIiwiUHJvbWlzZUNhcGFiaWxpdHkiLCJvblBhc3N3b3JkIiwib25Qcm9ncmVzcyIsIl9wZW5kaW5nRGVzdHJveSIsImV4IiwiX3JhbmdlTGlzdGVuZXJzIiwiX3Byb2dyZXNzTGlzdGVuZXJzIiwiX3Byb2dyZXNzaXZlUmVhZExpc3RlbmVycyIsIl9wcm9ncmVzc2l2ZURvbmVMaXN0ZW5lcnMiLCJfcmVhZHlDYXBhYmlsaXR5IiwiYWRkUmFuZ2VMaXN0ZW5lciIsImxpc3RlbmVyIiwiYWRkUHJvZ3Jlc3NMaXN0ZW5lciIsImFkZFByb2dyZXNzaXZlUmVhZExpc3RlbmVyIiwiYWRkUHJvZ3Jlc3NpdmVEb25lTGlzdGVuZXIiLCJvbkRhdGFSYW5nZSIsImJlZ2luIiwiY2h1bmsiLCJvbkRhdGFQcm9ncmVzcyIsImxvYWRlZCIsInRvdGFsIiwib25EYXRhUHJvZ3Jlc3NpdmVSZWFkIiwib25EYXRhUHJvZ3Jlc3NpdmVEb25lIiwidHJhbnNwb3J0UmVhZHkiLCJyZXF1ZXN0RGF0YVJhbmdlIiwiZW5kIiwiYWJvcnQiLCJQREZEb2N1bWVudFByb3h5IiwicGRmSW5mbyIsIl9wZGZJbmZvIiwiZmluZ2VycHJpbnRzIiwiaXNQdXJlWGZhIiwiX2h0bWxGb3JYZmEiLCJhbGxYZmFIdG1sIiwiZ2V0UGFnZUluZGV4IiwicmVmIiwiZ2V0RGVzdGluYXRpb25zIiwiZ2V0RGVzdGluYXRpb24iLCJnZXRQYWdlTGFiZWxzIiwiZ2V0UGFnZUxheW91dCIsImdldFBhZ2VNb2RlIiwiZ2V0Vmlld2VyUHJlZmVyZW5jZXMiLCJnZXRPcGVuQWN0aW9uIiwiZ2V0QXR0YWNobWVudHMiLCJnZXRKU0FjdGlvbnMiLCJnZXREb2NKU0FjdGlvbnMiLCJnZXRPdXRsaW5lIiwiZ2V0T3B0aW9uYWxDb250ZW50Q29uZmlnIiwiZ2V0UGVybWlzc2lvbnMiLCJnZXRNZXRhZGF0YSIsImdldE1hcmtJbmZvIiwic2F2ZURvY3VtZW50IiwiZ2V0RG93bmxvYWRJbmZvIiwiZG93bmxvYWRJbmZvQ2FwYWJpbGl0eSIsImNsZWFudXAiLCJrZWVwTG9hZGVkRm9udHMiLCJzdGFydENsZWFudXAiLCJsb2FkaW5nVGFzayIsImxvYWRpbmdQYXJhbXMiLCJnZXRGaWVsZE9iamVjdHMiLCJnZXRDYWxjdWxhdGlvbk9yZGVySWRzIiwiUERGUGFnZVByb3h5IiwicGFnZUluZGV4IiwicGFnZUluZm8iLCJfcGFnZUluZGV4IiwiX3BhZ2VJbmZvIiwiX3N0YXRzIiwiU3RhdFRpbWVyIiwiX3BkZkJ1ZyIsImNvbW1vbk9ianMiLCJvYmpzIiwiUERGT2JqZWN0cyIsIl9tYXliZUNsZWFudXBBZnRlclJlbmRlciIsIl9pbnRlbnRTdGF0ZXMiLCJyb3RhdGUiLCJ1c2VyVW5pdCIsIm9mZnNldFgiLCJvZmZzZXRZIiwiZG9udEZsaXAiLCJQYWdlVmlld3BvcnQiLCJ2aWV3Qm94IiwiZ2V0QW5ub3RhdGlvbnMiLCJpbnRlbnRBcmdzIiwiZ2V0UmVuZGVyaW5nSW50ZW50IiwicmVuZGVyaW5nSW50ZW50IiwiZ2V0UGFnZUpTQWN0aW9ucyIsImdldFhmYSIsImFubm90YXRpb25Nb2RlIiwiQW5ub3RhdGlvbk1vZGUiLCJFTkFCTEUiLCJiYWNrZ3JvdW5kIiwib3B0aW9uYWxDb250ZW50Q29uZmlnUHJvbWlzZSIsInBhZ2VDb2xvcnMiLCJwcmludEFubm90YXRpb25TdG9yYWdlIiwiaW50ZW50U3RhdGUiLCJjYWNoZUtleSIsInN0cmVhbVJlYWRlckNhbmNlbFRpbWVvdXQiLCJpbnRlbnRQcmludCIsIlJlbmRlcmluZ0ludGVudEZsYWciLCJQUklOVCIsImRpc3BsYXlSZWFkeUNhcGFiaWxpdHkiLCJvcGVyYXRvckxpc3QiLCJmbkFycmF5IiwiYXJnc0FycmF5IiwibGFzdENodW5rIiwic2VwYXJhdGVBbm5vdHMiLCJfcHVtcE9wZXJhdG9yTGlzdCIsInJlbmRlclRhc2tzIiwiaW50ZXJuYWxSZW5kZXJUYXNrIiwiY2FwYWJpbGl0eSIsIl9hYm9ydE9wZXJhdG9yTGlzdCIsInJlYXNvbiIsInRpbWVFbmQiLCJJbnRlcm5hbFJlbmRlclRhc2siLCJ1c2VSZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJyZW5kZXJUYXNrIiwidHJhbnNwYXJlbmN5Iiwib3B0aW9uYWxDb250ZW50Q29uZmlnIiwiaW5pdGlhbGl6ZUdyYXBoaWNzIiwib3BlcmF0b3JMaXN0Q2hhbmdlZCIsImdldE9wZXJhdG9yTGlzdCIsIm9wTGlzdFRhc2siLCJvcExpc3RSZWFkQ2FwYWJpbGl0eSIsInN0cmVhbVRleHRDb250ZW50IiwiaW5jbHVkZU1hcmtlZENvbnRlbnQiLCJkaXNhYmxlTm9ybWFsaXphdGlvbiIsInNlbmRXaXRoU3RyZWFtIiwiaGlnaFdhdGVyTWFyayIsImdldFRleHRDb250ZW50IiwieGZhIiwiWGZhVGV4dCIsInJlYWRhYmxlU3RyZWFtIiwicmVhZGVyIiwiZ2V0UmVhZGVyIiwicHVtcCIsInJlYWQiLCJnZXRTdHJ1Y3RUcmVlIiwiX2Rlc3Ryb3kiLCJ3YWl0T24iLCJmb3JjZSIsImNhbmNlbCIsInJlc2V0U3RhdHMiLCJzdWNjZXNzIiwiZGVsYXllZCIsIl9zdGFydFJlbmRlclBhZ2UiLCJfcmVuZGVyUGFnZUNodW5rIiwib3BlcmF0b3JMaXN0Q2h1bmsiLCJhbm5vdGF0aW9uU3RvcmFnZVNlcmlhbGl6YWJsZSIsInN0cmVhbVJlYWRlciIsIlJlbmRlcmluZ0NhbmNlbGxlZEV4Y2VwdGlvbiIsImV4dHJhRGVsYXkiLCJBYm9ydEV4Y2VwdGlvbiIsImN1ckNhY2hlS2V5IiwiY3VySW50ZW50U3RhdGUiLCJzdGF0cyIsIkxvb3BiYWNrUG9ydCIsInBvc3RNZXNzYWdlIiwidGVybWluYXRlIiwiUERGV29ya2VyVXRpbCIsImlzV29ya2VyRGlzYWJsZWQiLCJmYWtlV29ya2VySWQiLCJpc1NhbWVPcmlnaW4iLCJvdGhlclVybCIsIm90aGVyIiwiY3JlYXRlQ0ROV3JhcHBlciIsImdldFZlcmJvc2l0eUxldmVsIiwiX3BvcnQiLCJfd2ViV29ya2VyIiwiX21lc3NhZ2VIYW5kbGVyIiwiV2Vha01hcCIsIl9pbml0aWFsaXplRnJvbVBvcnQiLCJfaW5pdGlhbGl6ZSIsIldvcmtlciIsInRlcm1pbmF0ZUVhcmx5Iiwib25Xb3JrZXJFcnJvciIsIl9zZXR1cEZha2VXb3JrZXIiLCJzZW5kVGVzdCIsInRlc3RPYmoiLCJfc2V0dXBGYWtlV29ya2VyR2xvYmFsIiwiV29ya2VyTWVzc2FnZUhhbmRsZXIiLCJ3b3JrZXJIYW5kbGVyIiwic2V0dXAiLCJjYWNoZWRQb3J0IiwicGRmanNXb3JrZXIiLCJmb250TG9hZGVyIiwiRm9udExvYWRlciIsIl9wYXJhbXMiLCJkZXN0cm95Q2FwYWJpbGl0eSIsIl9uZXR3b3JrU3RyZWFtIiwiX2Z1bGxSZWFkZXIiLCJfbGFzdFByb2dyZXNzIiwic2V0dXBNZXNzYWdlSGFuZGxlciIsImNhY2hlZFByb21pc2UiLCJpc09wTGlzdCIsIkRJU1BMQVkiLCJBTlkiLCJESVNBQkxFIiwiQU5OT1RBVElPTlNfRElTQUJMRSIsIkVOQUJMRV9GT1JNUyIsIkFOTk9UQVRJT05TX0ZPUk1TIiwiRU5BQkxFX1NUT1JBR0UiLCJBTk5PVEFUSU9OU19TVE9SQUdFIiwiT1BMSVNUIiwidGVybWluYXRlZCIsImNhbmNlbEFsbFJlcXVlc3RzIiwic2luayIsImFzc2VydCIsImdldEZ1bGxSZWFkZXIiLCJvblB1bGwiLCJBcnJheUJ1ZmZlciIsImVucXVldWUiLCJvbkNhbmNlbCIsInJlYWR5IiwicmVhZHlSZWFzb24iLCJoZWFkZXJzQ2FwYWJpbGl0eSIsImZ1bGxSZWFkZXIiLCJoZWFkZXJzUmVhZHkiLCJpc1N0cmVhbWluZ1N1cHBvcnRlZCIsImlzUmFuZ2VTdXBwb3J0ZWQiLCJjb250ZW50TGVuZ3RoIiwicmFuZ2VSZWFkZXIiLCJnZXRSYW5nZVJlYWRlciIsIl9udW1QYWdlcyIsImh0bWxGb3JYZmEiLCJQYXNzd29yZEV4Y2VwdGlvbiIsIkludmFsaWRQREZFeGNlcHRpb24iLCJNaXNzaW5nUERGRXhjZXB0aW9uIiwiVW5leHBlY3RlZFJlc3BvbnNlRXhjZXB0aW9uIiwiVW5rbm93bkVycm9yRXhjZXB0aW9uIiwiZGV0YWlscyIsImV4Y2VwdGlvbiIsInVwZGF0ZVBhc3N3b3JkIiwiZXhwb3J0ZWREYXRhIiwiZXhwb3J0ZWRFcnJvciIsImluc3BlY3RGb250IiwiRm9udEluc3BlY3RvciIsImVuYWJsZWQiLCJmb250IiwiZm9udEFkZGVkIiwiRm9udEZhY2VPYmplY3QiLCJmaW5hbGx5IiwiaW1hZ2VSZWYiLCJwYWdlUHJveHkiLCJkYXRhTGVuIiwiaW1hZ2VEYXRhIiwiTUFYX0lNQUdFX1NJWkVfVE9fQ0FDSEUiLCJudW0iLCJnZW4iLCJyZXN1bHRzIiwiT3B0aW9uYWxDb250ZW50Q29uZmlnIiwibWV0YWRhdGEiLCJNZXRhZGF0YSIsIm9iaklkIiwic2V0dGxlZCIsIlJlbmRlclRhc2siLCJvbkNvbnRpbnVlIiwiZm9ybSIsIm9wZXJhdG9yTGlzdElkeCIsInJ1bm5pbmciLCJncmFwaGljc1JlYWR5Q2FsbGJhY2siLCJncmFwaGljc1JlYWR5IiwiX3VzZVJlcXVlc3RBbmltYXRpb25GcmFtZSIsImNhbmNlbGxlZCIsIl9jYW5jZWxCb3VuZCIsIl9jb250aW51ZUJvdW5kIiwiX2NvbnRpbnVlIiwiX3NjaGVkdWxlTmV4dEJvdW5kIiwiX3NjaGVkdWxlTmV4dCIsIl9uZXh0Qm91bmQiLCJfbmV4dCIsIl9jYW52YXMiLCJTdGVwcGVyTWFuYWdlciIsInN0ZXBwZXIiLCJuZXh0QnJlYWtQb2ludCIsImdldE5leHRCcmVha1BvaW50IiwiZ2Z4IiwiQ2FudmFzR3JhcGhpY3MiLCJiZWdpbkRyYXdpbmciLCJlbmREcmF3aW5nIiwidXBkYXRlT3BlcmF0b3JMaXN0IiwiZXhlY3V0ZU9wZXJhdG9yTGlzdCIsIkJhc2VDTWFwUmVhZGVyRmFjdG9yeSIsIkJhc2VDYW52YXNGYWN0b3J5IiwiQmFzZUZpbHRlckZhY3RvcnkiLCJCYXNlU1ZHRmFjdG9yeSIsIkJhc2VTdGFuZGFyZEZvbnREYXRhRmFjdG9yeSIsImFkZEZpbHRlciIsIm1hcHMiLCJhZGRIQ01GaWx0ZXIiLCJhZGRIaWdobGlnaHRIQ01GaWx0ZXIiLCJuZXdGZ0NvbG9yIiwibmV3QmdDb2xvciIsImtlZXBIQ00iLCJfY3JlYXRlQ2FudmFzIiwiY2FudmFzQW5kQ29udGV4dCIsImNvbXByZXNzaW9uVHlwZSIsIkNNYXBDb21wcmVzc2lvblR5cGUiLCJCSU5BUlkiLCJOT05FIiwiX2ZldGNoRGF0YSIsInNraXBEaW1lbnNpb25zIiwiX2NyZWF0ZVNWRyIsIlBhdGhUeXBlIiwiYXBwbHlCb3VuZGluZ0JveCIsImN0eCIsImJib3giLCJyZWdpb24iLCJQYXRoMkQiLCJjbGlwIiwiQmFzZVNoYWRpbmdQYXR0ZXJuIiwiZ2V0UGF0dGVybiIsIlJhZGlhbEF4aWFsU2hhZGluZ1BhdHRlcm4iLCJJUiIsIl9iYm94IiwiX2NvbG9yU3RvcHMiLCJfcDAiLCJfcDEiLCJfcjAiLCJfcjEiLCJtYXRyaXgiLCJfY3JlYXRlR3JhZGllbnQiLCJncmFkIiwiY3JlYXRlTGluZWFyR3JhZGllbnQiLCJjcmVhdGVSYWRpYWxHcmFkaWVudCIsImNvbG9yU3RvcCIsImFkZENvbG9yU3RvcCIsIm93bmVyIiwiaW52ZXJzZSIsInBhdGhUeXBlIiwib3duZXJCQm94IiwiY3VycmVudCIsImdldENsaXBwZWRQYXRoQm91bmRpbmdCb3giLCJnZXRDdXJyZW50VHJhbnNmb3JtIiwiY2VpbCIsInRtcENhbnZhcyIsImNhY2hlZENhbnZhc2VzIiwiZ2V0Q2FudmFzIiwidG1wQ3R4IiwiY2xlYXJSZWN0IiwiYmVnaW5QYXRoIiwidHJhbnNsYXRlIiwiYmFzZVRyYW5zZm9ybSIsImZpbGxTdHlsZSIsImZpbGwiLCJjcmVhdGVQYXR0ZXJuIiwiZG9tTWF0cml4IiwiRE9NTWF0cml4Iiwic2V0VHJhbnNmb3JtIiwiZHJhd1RyaWFuZ2xlIiwicDEiLCJwMiIsInAzIiwiYzEiLCJjMiIsImMzIiwiY29vcmRzIiwiY29sb3JzIiwiYnl0ZXMiLCJyb3dTaXplIiwidG1wIiwieDEiLCJzY2FsZVgiLCJ5MSIsInNjYWxlWSIsIngyIiwieTIiLCJ4MyIsInkzIiwiYzFyIiwiYzFnIiwiYzFiIiwiYzJyIiwiYzJnIiwiYzJiIiwiYzNyIiwiYzNnIiwiYzNiIiwibWluWSIsIm1heFkiLCJ4YSIsImNhciIsImNhZyIsImNhYiIsInhiIiwiY2JyIiwiY2JnIiwiY2JiIiwieDFfIiwieDJfIiwiZHJhd0ZpZ3VyZSIsImZpZ3VyZSIsInBzIiwiY3MiLCJ2ZXJ0aWNlc1BlclJvdyIsInJvd3MiLCJjb2xzIiwiTWVzaFNoYWRpbmdQYXR0ZXJuIiwiX2Nvb3JkcyIsIl9jb2xvcnMiLCJfZmlndXJlcyIsIl9ib3VuZHMiLCJfYmFja2dyb3VuZCIsIl9jcmVhdGVNZXNoQ2FudmFzIiwiY29tYmluZWRTY2FsZSIsImJvdW5kc1dpZHRoIiwiYm91bmRzSGVpZ2h0IiwicGFkZGVkV2lkdGgiLCJCT1JERVJfU0laRSIsInBhZGRlZEhlaWdodCIsImNyZWF0ZUltYWdlRGF0YSIsInB1dEltYWdlRGF0YSIsInNpbmd1bGFyVmFsdWVEZWNvbXBvc2UyZFNjYWxlIiwibWF0cml4U2NhbGUiLCJ0ZW1wb3JhcnlQYXR0ZXJuQ2FudmFzIiwiRHVtbXlTaGFkaW5nUGF0dGVybiIsIlRpbGluZ1BhdHRlcm4iLCJjYW52YXNHcmFwaGljc0ZhY3RvcnkiLCJ4c3RlcCIsInlzdGVwIiwicGFpbnRUeXBlIiwidGlsaW5nVHlwZSIsImNyZWF0ZVBhdHRlcm5DYW52YXMiLCJ4MCIsInkwIiwiY3VyTWF0cml4U2NhbGUiLCJkaW14IiwiZ2V0U2l6ZUFuZFNjYWxlIiwiZGlteSIsImdyYXBoaWNzIiwiY3JlYXRlQ2FudmFzR3JhcGhpY3MiLCJncm91cExldmVsIiwic2V0RmlsbEFuZFN0cm9rZVN0eWxlVG9Db250ZXh0IiwiYWRqdXN0ZWRYMCIsImFkanVzdGVkWTAiLCJhZGp1c3RlZFgxIiwiYWRqdXN0ZWRZMSIsImNsaXBCYm94Iiwic3RlcCIsInJlYWxPdXRwdXRTaXplIiwibWF4U2l6ZSIsIk1BWF9QQVRURVJOX1NJWkUiLCJiYm94V2lkdGgiLCJiYm94SGVpZ2h0IiwidXBkYXRlUmVjdE1pbk1heCIsImVuZFBhdGgiLCJzdHJva2VTdHlsZSIsImNzc0NvbG9yIiwiRm9ybWF0RXJyb3IiLCJjb252ZXJ0QmxhY2tBbmRXaGl0ZVRvUkdCQSIsInNyY1BvcyIsIm5vbkJsYWNrQ29sb3IiLCJpbnZlcnNlRGVjb2RlIiwiYmxhY2siLCJpc0xpdHRsZUVuZGlhbiIsInplcm9NYXBwaW5nIiwib25lTWFwcGluZyIsIndpZHRoSW5Tb3VyY2UiLCJ3aWR0aFJlbWFpbmRlciIsInNyY0xlbmd0aCIsIlVpbnQzMkFycmF5IiwiZGVzdFBvcyIsImVsZW0iLCJNQVhfR1JPVVBfU0laRSIsIkZVTExfQ0hVTktfSEVJR0hUIiwiQ2FjaGVkQ2FudmFzZXMiLCJjYWNoZSIsImNhbnZhc0VudHJ5IiwiZHJhd0ltYWdlQXRJbnRlZ2VyQ29vcmRzIiwic3JjSW1nIiwic3JjWCIsInNyY1kiLCJzcmNXIiwic3JjSCIsImRlc3RYIiwiZGVzdFkiLCJkZXN0VyIsImRlc3RIIiwidHgiLCJ0eSIsInRsWCIsInJUbFgiLCJ0bFkiLCJyVGxZIiwiYnJYIiwicldpZHRoIiwiYnJZIiwickhlaWdodCIsInNpZ24iLCJkcmF3SW1hZ2UiLCJoeXBvdCIsIkNhbnZhc0V4dHJhU3RhdGUiLCJhbHBoYUlzU2hhcGUiLCJmb250U2l6ZVNjYWxlIiwidGV4dE1hdHJpeCIsIklERU5USVRZX01BVFJJWCIsInRleHRNYXRyaXhTY2FsZSIsImZvbnRNYXRyaXgiLCJGT05UX0lERU5USVRZX01BVFJJWCIsImxpbmVYIiwibGluZVkiLCJjaGFyU3BhY2luZyIsIndvcmRTcGFjaW5nIiwidGV4dEhTY2FsZSIsInRleHRSZW5kZXJpbmdNb2RlIiwiVGV4dFJlbmRlcmluZ01vZGUiLCJGSUxMIiwidGV4dFJpc2UiLCJwYXR0ZXJuRmlsbCIsInN0cm9rZUFscGhhIiwibGluZVdpZHRoIiwiYWN0aXZlU01hc2siLCJ0cmFuc2Zlck1hcHMiLCJzdGFydE5ld1BhdGhBbmRDbGlwQm94IiwiY2xpcEJveCIsInNldEN1cnJlbnRQb2ludCIsInVwZGF0ZVBhdGhNaW5NYXgiLCJhcHBseVRyYW5zZm9ybSIsIm1pblgiLCJtYXhYIiwicDQiLCJ1cGRhdGVTY2FsaW5nUGF0aE1pbk1heCIsIm1pbk1heCIsInNjYWxlTWluTWF4IiwidXBkYXRlQ3VydmVQYXRoTWluTWF4IiwiYm94IiwiYmV6aWVyQm91bmRpbmdCb3giLCJnZXRQYXRoQm91bmRpbmdCb3giLCJ4U3Ryb2tlUGFkIiwieVN0cm9rZVBhZCIsInVwZGF0ZUNsaXBGcm9tUGF0aCIsImlzRW1wdHlDbGlwIiwiSW5maW5pdHkiLCJwdXRCaW5hcnlJbWFnZURhdGEiLCJpbWdEYXRhIiwiSW1hZ2VEYXRhIiwicGFydGlhbENodW5rSGVpZ2h0IiwiZnVsbENodW5rcyIsInRvdGFsQ2h1bmtzIiwiY2h1bmtJbWdEYXRhIiwidGhpc0NodW5rSGVpZ2h0IiwiZWxlbXNJblRoaXNDaHVuayIsImtpbmQiLCJJbWFnZUtpbmQiLCJHUkFZU0NBTEVfMUJQUCIsImRlc3QzMiIsImRlc3QzMkRhdGFMZW5ndGgiLCJmdWxsU3JjRGlmZiIsIndoaXRlIiwic3JjRGlmZiIsImtFbmQiLCJrRW5kVW5yb2xsZWQiLCJtYXNrIiwic3JjQnl0ZSIsIlJHQkFfMzJCUFAiLCJzdWJhcnJheSIsIlJHQl8yNEJQUCIsInB1dEJpbmFyeUltYWdlTWFzayIsImNvcHlDdHhTdGF0ZSIsInNvdXJjZUN0eCIsImRlc3RDdHgiLCJwcm9wZXJ0aWVzIiwicHJvcGVydHkiLCJzZXRMaW5lRGFzaCIsImdldExpbmVEYXNoIiwibGluZURhc2hPZmZzZXQiLCJyZXNldEN0eFRvRGVmYXVsdCIsImZpbGxSdWxlIiwiZ2xvYmFsQWxwaGEiLCJsaW5lQ2FwIiwibGluZUpvaW4iLCJtaXRlckxpbWl0IiwiZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uIiwiY29tcG9zZVNNYXNrQmFja2Ryb3AiLCJyMCIsImcwIiwiYjAiLCJhbHBoYSIsImFscGhhXyIsImNvbXBvc2VTTWFza0FscGhhIiwibWFza0RhdGEiLCJsYXllckRhdGEiLCJ0cmFuc2Zlck1hcCIsImNvbXBvc2VTTWFza0x1bWlub3NpdHkiLCJnZXRJbWFnZVNtb290aGluZ0VuYWJsZWQiLCJpbnRlcnBvbGF0ZSIsImZyb3VuZCIsImFjdHVhbFNjYWxlIiwiZGV2aWNlUGl4ZWxSYXRpbyIsIlBpeGVsc1BlckluY2giLCJQREZfVE9fQ1NTX1VOSVRTIiwiTElORV9DQVBfU1RZTEVTIiwiTElORV9KT0lOX1NUWUxFUyIsIk5PUk1BTF9DTElQIiwiRU9fQ0xJUCIsImNhbnZhc0N0eCIsIm1hcmtlZENvbnRlbnRTdGFjayIsInN0YXRlU3RhY2siLCJwZW5kaW5nQ2xpcCIsInBlbmRpbmdFT0ZpbGwiLCJyZXMiLCJ4b2JqcyIsImdyb3VwU3RhY2siLCJwcm9jZXNzaW5nVHlwZTMiLCJiYXNlVHJhbnNmb3JtU3RhY2siLCJzbWFza1N0YWNrIiwic21hc2tDb3VudGVyIiwidGVtcFNNYXNrIiwic3VzcGVuZGVkQ3R4IiwiY29udGVudFZpc2libGUiLCJjYWNoZWRQYXR0ZXJucyIsInZpZXdwb3J0U2NhbGUiLCJvdXRwdXRTY2FsZVgiLCJvdXRwdXRTY2FsZVkiLCJfY2FjaGVkU2NhbGVGb3JTdHJva2luZyIsIl9jYWNoZWRHZXRTaW5nbGVQaXhlbFdpZHRoIiwiX2NhY2hlZEJpdG1hcHNNYXAiLCJnZXRPYmplY3QiLCJmYWxsYmFjayIsInN0YXJ0c1dpdGgiLCJzYXZlZEZpbGxTdHlsZSIsImZpbGxSZWN0IiwidHJhbnNwYXJlbnRDYW52YXMiLCJjb21wb3NpdGVDdHgiLCJleGVjdXRpb25TdGFydElkeCIsImNvbnRpbnVlQ2FsbGJhY2siLCJhcmdzQXJyYXlMZW4iLCJjaHVua09wZXJhdGlvbnMiLCJlbmRUaW1lIiwic3RlcHMiLCJmbklkIiwiYnJlYWtJdCIsIk9QUyIsImRlcGVuZGVuY3kiLCJkZXBPYmpJZCIsIm9ianNQb29sIiwiaW5TTWFza01vZGUiLCJIVE1MQ2FudmFzRWxlbWVudCIsImhjbUZpbHRlcklkIiwiZm9yZWdyb3VuZCIsInNhdmVkRmlsdGVyIiwiX3NjYWxlSW1hZ2UiLCJpbnZlcnNlVHJhbnNmb3JtIiwid2lkdGhTY2FsZSIsImhlaWdodFNjYWxlIiwicGFpbnRXaWR0aCIsInBhaW50SGVpZ2h0IiwidG1wQ2FudmFzSWQiLCJuZXdXaWR0aCIsIm5ld0hlaWdodCIsIl9jcmVhdGVNYXNrQ2FudmFzIiwiaXNQYXR0ZXJuRmlsbCIsImN1cnJlbnRUcmFuc2Zvcm0iLCJzY2FsZWQiLCJtYXNrQ2FudmFzIiwibWFpbktleSIsImNhY2hlZEltYWdlIiwibWFza1RvQ2FudmFzIiwiZ2V0QXhpYWxBbGlnbmVkQm91bmRpbmdCb3giLCJkcmF3bldpZHRoIiwiZHJhd25IZWlnaHQiLCJmaWxsQ2FudmFzIiwiZmlsbEN0eCIsImdldEN1cnJlbnRUcmFuc2Zvcm1JbnZlcnNlIiwiaW1hZ2VTbW9vdGhpbmdFbmFibGVkIiwic2V0TGluZVdpZHRoIiwic2V0TGluZUNhcCIsInNldExpbmVKb2luIiwic2V0TWl0ZXJMaW1pdCIsImxpbWl0Iiwic2V0RGFzaCIsImRhc2hBcnJheSIsImRhc2hQaGFzZSIsInNldFJlbmRlcmluZ0ludGVudCIsInNldEZsYXRuZXNzIiwiZmxhdG5lc3MiLCJzZXRHU3RhdGUiLCJzdGF0ZXMiLCJzZXRGb250IiwiY2hlY2tTTWFza1N0YXRlIiwiYmVnaW5TTWFza01vZGUiLCJlbmRTTWFza01vZGUiLCJjYWNoZUlkIiwic2NyYXRjaENhbnZhcyIsIl9yZW1vdmVNaXJyb3JpbmciLCJfX29yaWdpbmFsU2F2ZSIsIl9fb3JpZ2luYWxSZXN0b3JlIiwiX19vcmlnaW5hbFJvdGF0ZSIsIl9fb3JpZ2luYWxTY2FsZSIsIl9fb3JpZ2luYWxUcmFuc2xhdGUiLCJfX29yaWdpbmFsVHJhbnNmb3JtIiwiX19vcmlnaW5hbFNldFRyYW5zZm9ybSIsIl9fb3JpZ2luYWxSZXNldFRyYW5zZm9ybSIsInJlc2V0VHJhbnNmb3JtIiwiX19vcmlnaW5hbENsaXAiLCJfX29yaWdpbmFsTW92ZVRvIiwibW92ZVRvIiwiX19vcmlnaW5hbExpbmVUbyIsImxpbmVUbyIsIl9fb3JpZ2luYWxCZXppZXJDdXJ2ZVRvIiwiYmV6aWVyQ3VydmVUbyIsIl9fb3JpZ2luYWxSZWN0IiwiX19vcmlnaW5hbENsb3NlUGF0aCIsImNsb3NlUGF0aCIsIl9fb3JpZ2luYWxCZWdpblBhdGgiLCJydWxlIiwiY3AxeCIsImNwMXkiLCJjcDJ4IiwiY3AyeSIsIm1pcnJvckNvbnRleHRPcGVyYXRpb25zIiwiZGlydHlCb3giLCJzbWFzayIsImxheWVyQ3R4IiwibGF5ZXJCb3giLCJsYXllck9mZnNldFgiLCJsYXllck9mZnNldFkiLCJsYXllcldpZHRoIiwibGF5ZXJIZWlnaHQiLCJtYXNrQ3R4Iiwic3VidHlwZSIsImJhY2tkcm9wIiwibWFza09mZnNldFgiLCJtYXNrT2Zmc2V0WSIsImhhc0JhY2tkcm9wIiwiY29tcG9zZUZuIiwiY2h1bmtTaXplIiwicm93IiwiY2h1bmtIZWlnaHQiLCJnZXRJbWFnZURhdGEiLCJnZW5lcmljQ29tcG9zZVNNYXNrIiwiY29tcG9zZVNNYXNrIiwib2xkIiwiY29uc3RydWN0UGF0aCIsIm9wcyIsImFyZ3MiLCJpc1NjYWxpbmdNYXRyaXgiLCJtaW5NYXhGb3JCZXppZXIiLCJyZWN0YW5nbGUiLCJ4dyIsInloIiwiY3VydmVUbyIsImN1cnZlVG8yIiwiY3VydmVUbzMiLCJzdHJva2UiLCJjb25zdW1lUGF0aCIsInJlc2NhbGVBbmRTdHJva2UiLCJjbG9zZVN0cm9rZSIsIm5lZWRSZXN0b3JlIiwiZW9GaWxsIiwiZmlsbFN0cm9rZSIsImVvRmlsbFN0cm9rZSIsImNsb3NlRmlsbFN0cm9rZSIsImNsb3NlRU9GaWxsU3Ryb2tlIiwiZW9DbGlwIiwiYmVnaW5UZXh0IiwiZW5kVGV4dCIsInBhdGhzIiwicGVuZGluZ1RleHRQYXRocyIsInBhdGgiLCJhZGRUb1BhdGgiLCJzZXRDaGFyU3BhY2luZyIsInNwYWNpbmciLCJzZXRXb3JkU3BhY2luZyIsInNldEhTY2FsZSIsInNldExlYWRpbmciLCJmb250UmVmTmFtZSIsImZvbnRPYmoiLCJmb250RGlyZWN0aW9uIiwiaXNUeXBlM0ZvbnQiLCJsb2FkZWROYW1lIiwidHlwZWZhY2UiLCJzeXN0ZW1Gb250SW5mbyIsImZhbGxiYWNrTmFtZSIsImJyb3dzZXJGb250U2l6ZSIsInNldFRleHRSZW5kZXJpbmdNb2RlIiwic2V0VGV4dFJpc2UiLCJyaXNlIiwibW92ZVRleHQiLCJzZXRMZWFkaW5nTW92ZVRleHQiLCJzZXRUZXh0TWF0cml4IiwibmV4dExpbmUiLCJwYWludENoYXIiLCJjaGFyYWN0ZXIiLCJwYXR0ZXJuVHJhbnNmb3JtIiwiZmlsbFN0cm9rZU1vZGUiLCJGSUxMX1NUUk9LRV9NQVNLIiwiaXNBZGRUb1BhdGhTZXQiLCJBRERfVE9fUEFUSF9GTEFHIiwibWlzc2luZ0ZpbGUiLCJnZXRQYXRoR2VuZXJhdG9yIiwiRklMTF9TVFJPS0UiLCJTVFJPS0UiLCJmaWxsVGV4dCIsInN0cm9rZVRleHQiLCJpc0ZvbnRTdWJwaXhlbEFBRW5hYmxlZCIsInNob3dUZXh0IiwiZ2x5cGhzIiwic2hvd1R5cGUzVGV4dCIsImdseXBoc0xlbmd0aCIsInZlcnRpY2FsIiwic3BhY2luZ0RpciIsImRlZmF1bHRWTWV0cmljcyIsIndpZHRoQWR2YW5jZVNjYWxlIiwic2ltcGxlRmlsbFRleHQiLCJnZXRTaW5nbGVQaXhlbFdpZHRoIiwiaXNJbnZhbGlkUERGanNGb250IiwiY2hhcnMiLCJnbHlwaCIsInVuaWNvZGUiLCJyZXN0b3JlTmVlZGVkIiwiaXNTcGFjZSIsImZvbnRDaGFyIiwiYWNjZW50Iiwic2NhbGVkWCIsInNjYWxlZFkiLCJ2bWV0cmljIiwidngiLCJ2eSIsInJlbWVhc3VyZSIsIm1lYXN1cmVkV2lkdGgiLCJtZWFzdXJlVGV4dCIsImNoYXJhY3RlclNjYWxlWCIsImlzSW5Gb250Iiwic2NhbGVkQWNjZW50WCIsInNjYWxlZEFjY2VudFkiLCJzcGFjaW5nTGVuZ3RoIiwiSU5WSVNJQkxFIiwiY2hhclByb2NPcGVyYXRvckxpc3QiLCJvcGVyYXRvckxpc3RJZCIsInNldENoYXJXaWR0aCIsInhXaWR0aCIsInlXaWR0aCIsInNldENoYXJXaWR0aEFuZEJvdW5kcyIsImxseCIsImxseSIsInVyeCIsInVyeSIsImdldENvbG9yTl9QYXR0ZXJuIiwiX2dldFBhdHRlcm4iLCJzZXRTdHJva2VDb2xvck4iLCJzZXRGaWxsQ29sb3JOIiwic2V0U3Ryb2tlUkdCQ29sb3IiLCJzZXRGaWxsUkdCQ29sb3IiLCJnZXRTaGFkaW5nUGF0dGVybiIsInNoYWRpbmdGaWxsIiwiaW52IiwiYmVnaW5JbmxpbmVJbWFnZSIsImJlZ2luSW1hZ2VEYXRhIiwicGFpbnRGb3JtWE9iamVjdEJlZ2luIiwicGFpbnRGb3JtWE9iamVjdEVuZCIsImJlZ2luR3JvdXAiLCJncm91cCIsImN1cnJlbnRDdHgiLCJpc29sYXRlZCIsImtub2Nrb3V0IiwiYm91bmRzIiwiY2FudmFzQm91bmRzIiwiZ3JvdXBDdHgiLCJzdGFydFRyYW5zZm9ybUludmVyc2UiLCJlbmRHcm91cCIsImN1cnJlbnRNdHgiLCJiZWdpbkFubm90YXRpb24iLCJjYW52YXNXaWR0aCIsImNhbnZhc0hlaWdodCIsImFubm90YXRpb25DYW52YXMiLCJzYXZlZEN0eCIsImVuZEFubm90YXRpb24iLCJwYWludEltYWdlTWFza1hPYmplY3QiLCJjb21waWxlZCIsIlBPSU5UX1RZUEVTIiwid2lkdGgxIiwiajAiLCJsaW5lU2l6ZSIsInBvcyIsInN1bSIsIkludDMyQXJyYXkiLCJwMCIsInBwIiwiY29tcGlsZVR5cGUzR2x5cGgiLCJwYWludEltYWdlTWFza1hPYmplY3RSZXBlYXQiLCJza2V3WCIsInNrZXdZIiwidHJhbnMiLCJwYWludEltYWdlTWFza1hPYmplY3RHcm91cCIsImltYWdlcyIsInBhaW50SW1hZ2VYT2JqZWN0IiwicGFpbnRJbmxpbmVJbWFnZVhPYmplY3QiLCJwYWludEltYWdlWE9iamVjdFJlcGVhdCIsInBhaW50SW5saW5lSW1hZ2VYT2JqZWN0R3JvdXAiLCJhcHBseVRyYW5zZmVyTWFwc1RvQ2FudmFzIiwiYXBwbHlUcmFuc2Zlck1hcHNUb0JpdG1hcCIsImltZ1RvUGFpbnQiLCJwYWludFNvbGlkQ29sb3JJbWFnZU1hc2siLCJtYXJrUG9pbnQiLCJtYXJrUG9pbnRQcm9wcyIsImJlZ2luTWFya2VkQ29udGVudCIsInZpc2libGUiLCJiZWdpbk1hcmtlZENvbnRlbnRQcm9wcyIsImlzQ29udGVudFZpc2libGUiLCJlbmRNYXJrZWRDb250ZW50IiwiYmVnaW5Db21wYXQiLCJlbmRDb21wYXQiLCJhYnNEZXQiLCJub3JtWCIsIm5vcm1ZIiwiZ2V0U2NhbGVGb3JTdHJva2luZyIsImdldFRyYW5zZm9ybSIsInNjYWxlZExpbmVXaWR0aCIsInNjYWxlZFhMaW5lV2lkdGgiLCJzY2FsZWRZTGluZVdpZHRoIiwiYmFzZUFyZWEiLCJzYXZlUmVzdG9yZSIsImRhc2hlcyIsIm9wIiwiZmV0Y2hEYXRhIiwiZ2V0Q29sb3JWYWx1ZXMiLCJnZXRQZGZGaWxlbmFtZUZyb21VcmwiLCJnZXRSR0IiLCJnZXRYZmFQYWdlVmlld3BvcnQiLCJpc1BkZkZpbGUiLCJub0NvbnRleHRNZW51IiwiX2Jhc2VfZmFjdG9yeV9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwiX3NoYXJlZF91dGlsX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18iLCJTVkdfTlMiLCJQREYiLCJjb250YWluIiwiY3JlYXRlRWxlbWVudE5TIiwidGFibGVSIiwidGFibGVHIiwidGFibGVCIiwibWFwUiIsIm1hcEciLCJtYXBCIiwiYnVmZmVyUiIsImJ1ZmZlckciLCJidWZmZXJCIiwiZmdSR0IiLCJiZ1JHQiIsInRhYmxlIiwiZ2V0U3RlcHMiLCJhcnIiLCJmZ0dyYXkiLCJiZ0dyYXkiLCJuZXdGZ1JHQiIsIm5ld0JnUkdCIiwiZmciLCJiZyIsIm5ld1N0YXJ0IiwibmV3U3RlcCIsImZlQ29sb3JNYXRyaXgiLCJmZUNvbXBvbmVudFRyYW5zZmVyIiwiZnVuYyIsImZlRnVuYyIsInJUYWJsZSIsImdUYWJsZSIsImJUYWJsZSIsIl9kb2N1bWVudCIsInN0YXR1c1RleHQiLCJhcnJheUJ1ZmZlciIsImJsb2IiLCJyZXF1ZXN0IiwiWE1MSHR0cFJlcXVlc3QiLCJyZXNwb25zZVR5cGUiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZWFkeVN0YXRlIiwiRE9ORSIsInJlc3BvbnNlVGV4dCIsImNNYXBEYXRhIiwiY2VudGVyWCIsImNlbnRlclkiLCJyb3RhdGVBIiwicm90YXRlQiIsInJvdGF0ZUMiLCJyb3RhdGVEIiwib2Zmc2V0Q2FudmFzWCIsIm9mZnNldENhbnZhc1kiLCJjb252ZXJ0VG9WaWV3cG9ydFBvaW50IiwiY29udmVydFRvVmlld3BvcnRSZWN0YW5nbGUiLCJ0b3BMZWZ0IiwiYm90dG9tUmlnaHQiLCJjb252ZXJ0VG9QZGZQb2ludCIsImFwcGx5SW52ZXJzZVRyYW5zZm9ybSIsIkJhc2VFeGNlcHRpb24iLCJtc2ciLCJvbmx5U3RyaXBQYXRoIiwibGFzdEluZGV4T2YiLCJkZWZhdWx0RmlsZW5hbWUiLCJyZUZpbGVuYW1lIiwic3BsaXRVUkkiLCJzdWdnZXN0ZWRGaWxlbmFtZSIsImRlY29kZVVSSUNvbXBvbmVudCIsInN0YXJ0ZWQiLCJ0aW1lcyIsIm91dEJ1ZiIsImxvbmdlc3QiLCJwYWRFbmQiLCJwZGZEYXRlU3RyaW5nUmVnZXgiLCJ5ZWFyIiwibW9udGgiLCJkYXkiLCJob3VyIiwibWludXRlIiwic2Vjb25kIiwidW5pdmVyc2FsVGltZVJlbGF0aW9uIiwib2Zmc2V0SG91ciIsIm9mZnNldE1pbnV0ZSIsIlVUQyIsInhmYVBhZ2UiLCJjb2xvclJHQiIsImNvbXB1dGVkQ29sb3IiLCJpbnZlcnRTZWxmIiwibXVzdEZsaXAiLCJtdXN0Um90YXRlIiwidXNlUm91bmQiLCJpc0NTU1JvdW5kU3VwcG9ydGVkIiwid2lkdGhTdHIiLCJoZWlnaHRTdHIiLCJEcmF3TGF5ZXIiLCJfZGlzcGxheV91dGlsc19qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwic2V0UGFyZW50IiwiX3N2Z0ZhY3RvcnkiLCJoaWdobGlnaHQiLCJvdXRsaW5lcyIsIm9wYWNpdHkiLCJwYXRoSWQiLCJjbGlwUGF0aElkIiwiY2xpcFBhdGhVc2UiLCJ1c2UiLCJoaWdobGlnaHRPdXRsaW5lIiwidXNlMSIsInVzZTIiLCJwb2x5Z29ucyIsInBvbHlnb24iLCJwcmV2WCIsInByZXZZIiwidXBkYXRlQm94IiwiY2hhbmdlQ29sb3IiLCJjaGFuZ2VPcGFjaXR5IiwiYWRkQ2xhc3MiLCJyZW1vdmVDbGFzcyIsIkFubm90YXRpb25FZGl0b3JMYXllciIsImVkaXRvcl9lZGl0b3IiLCJhbm5vdGF0aW9uX2xheWVyIiwiRnJlZVRleHRFZGl0b3IiLCJlZGl0b3JEaXZCbHVyIiwiZWRpdG9yRGl2Rm9jdXMiLCJlZGl0b3JEaXZJbnB1dCIsImVkaXRvckRpdktleWRvd24iLCJfa2V5Ym9hcmRNYW5hZ2VyIiwicHJvdG8iLCJhcnJvd0NoZWNrZXIiLCJzbWFsbCIsIkFubm90YXRpb25FZGl0b3JVSU1hbmFnZXIiLCJUUkFOU0xBVEVfU01BTEwiLCJiaWciLCJUUkFOU0xBVEVfQklHIiwiS2V5Ym9hcmRNYW5hZ2VyIiwiY29tbWl0T3JSZW1vdmUiLCJidWJibGVzIiwiX3RyYW5zbGF0ZUVtcHR5IiwiY2hlY2tlciIsIl9kZWZhdWx0Q29sb3IiLCJfZGVmYXVsdExpbmVDb2xvciIsIl9kZWZhdWx0Rm9udFNpemUiLCJsMTBuIiwic3RyaW5ncyIsIl9pbnRlcm5hbFBhZGRpbmciLCJwYXJzZUZsb2F0IiwidXBkYXRlRGVmYXVsdFBhcmFtcyIsIkFubm90YXRpb25FZGl0b3JQYXJhbXNUeXBlIiwiRlJFRVRFWFRfU0laRSIsIkZSRUVURVhUX0NPTE9SIiwidXBkYXRlUGFyYW1zIiwiZGVmYXVsdFByb3BlcnRpZXNUb1VwZGF0ZSIsInByb3BlcnRpZXNUb1VwZGF0ZSIsInNldEZvbnRzaXplIiwiZWRpdG9yRGl2IiwicGFyZW50U2NhbGUiLCJzYXZlZEZvbnRzaXplIiwiYWRkQ29tbWFuZHMiLCJjbWQiLCJtdXN0RXhlYyIsIm92ZXJ3cml0ZUlmU2FtZVR5cGUiLCJrZWVwVW5kbyIsInNhdmVkQ29sb3IiLCJfdWlNYW5hZ2VyIiwidHJhbnNsYXRlU2VsZWN0ZWRFZGl0b3JzIiwiZ2V0SW5pdGlhbFRyYW5zbGF0aW9uIiwicmVidWlsZCIsImlzQXR0YWNoZWRUb0RPTSIsImVuYWJsZUVkaXRNb2RlIiwiaXNJbkVkaXRNb2RlIiwic2V0RWRpdGluZ1N0YXRlIiwidXBkYXRlVG9vbGJhciIsIm92ZXJsYXlEaXYiLCJfaXNEcmFnZ2FibGUiLCJkaXNhYmxlRWRpdE1vZGUiLCJpc0VkaXRpbmciLCJmb2N1c2luIiwiX2ZvY3VzRXZlbnRzQWxsb3dlZCIsIm9uY2VBZGRlZCIsIl9pbml0aWFsT3B0aW9ucyIsImlzQ2VudGVyZWQiLCJkaXZzIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJwYXJlbnRIZWlnaHQiLCJwYXJlbnREaW1lbnNpb25zIiwiY3VycmVudExheWVyIiwic2F2ZWREaXNwbGF5IiwicGFyZW50Um90YXRpb24iLCJmaXhBbmRTZXRQb3NpdGlvbiIsImNvbW1pdCIsInNhdmVkVGV4dCIsIm5ld1RleHQiLCJ0cmltRW5kIiwic2V0VGV4dCIsInNob3VsZEdldEtleWJvYXJkRXZlbnRzIiwiZW50ZXJJbkVkaXRNb2RlIiwiZGJsY2xpY2siLCJkaXNhYmxlRWRpdGluZyIsImVuYWJsZUVkaXRpbmciLCJiYXNlWCIsImJhc2VZIiwiX2wxMG5Qcm9taXNlIiwiYmluZEV2ZW50cyIsImFubm90YXRpb25FbGVtZW50SWQiLCJwYWdlVHJhbnNsYXRpb25Ub1NjcmVlbiIsInBhZ2VEaW1lbnNpb25zIiwicGFnZVRyYW5zbGF0aW9uIiwicG9zWCIsInBvc1kiLCJzZXRBdCIsInJlcGxhY2VDaGlsZHJlbiIsImNvbnRlbnREaXYiLCJkZXNlcmlhbGl6ZSIsInVpTWFuYWdlciIsImRlbGV0ZWQiLCJpc0ZvckNvcHlpbmciLCJwYWRkaW5nIiwiZ2V0UmVjdCIsIl9jb2xvck1hbmFnZXIiLCJzdHJ1Y3RUcmVlUGFyZW50SWQiLCJfc3RydWN0VHJlZVBhcmVudElkIiwiY29sb3JfcGlja2VyIiwiZWRpdG9yX291dGxpbmVyIiwiSGlnaGxpZ2h0RWRpdG9yIiwiaGlnaGxpZ2h0Q29sb3JzIiwiX2RlZmF1bHRPcGFjaXR5IiwiYm94ZXMiLCJvdXRsaW5lciIsIk91dGxpbmVyIiwiZ2V0T3V0bGluZXMiLCJvdXRsaW5lckZvck91dGxpbmUiLCJsYXN0UG9pbnQiLCJISUdITElHSFRfREVGQVVMVF9DT0xPUiIsInRvb2xiYXJQb3NpdGlvbiIsIkhJR0hMSUdIVF9DT0xPUiIsImRyYXdMYXllciIsInVwZGF0ZUNvbG9yIiwiYWRkRWRpdFRvb2xiYXIiLCJDb2xvclBpY2tlciIsImFkZENvbG9yUGlja2VyIiwiYWRkVW5kb2FibGVFZGl0b3IiLCJtdXN0QmVTZWxlY3RlZCIsInNlbGVjdCIsImhpZ2hsaWdodERpdiIsInNldERpbXMiLCJwb2ludGVyb3ZlciIsInBvaW50ZXJsZWF2ZSIsInVuc2VsZWN0Iiwic3giLCJzeSIsIm91dGxpbmUiLCJjYW5DcmVhdGVOZXdFbXB0eUVkaXRvciIsIklua0VkaXRvciIsImNhbnZhc1BvaW50ZXJtb3ZlIiwiY2FudmFzUG9pbnRlcmxlYXZlIiwiY2FudmFzUG9pbnRlcnVwIiwiY2FudmFzUG9pbnRlcmRvd24iLCJ0aGlja25lc3MiLCJiZXppZXJQYXRoMkQiLCJhbGxSYXdQYXRocyIsImN1cnJlbnRQYXRoIiwic2NhbGVGYWN0b3IiLCJ0cmFuc2xhdGlvblgiLCJ0cmFuc2xhdGlvblkiLCJfd2lsbEtlZXBBc3BlY3RSYXRpbyIsIklOS19USElDS05FU1MiLCJfZGVmYXVsdFRoaWNrbmVzcyIsIklOS19DT0xPUiIsIklOS19PUEFDSVRZIiwic2F2ZWRUaGlja25lc3MiLCJzYXZlZE9wYWNpdHkiLCJyZW1vdmVTaG91bGRSZXNjYWxlIiwiYWRkU2hvdWxkUmVzY2FsZSIsIm9uU2NhbGVDaGFuZ2luZyIsInNldERpbWVuc2lvbnMiLCJvcGFjaXR5VG9IZXgiLCJsYXN0WCIsImxhc3RZIiwicGF0aDJEIiwiYmV6aWVyIiwieHkiLCJsYXN0UG9pbnRzIiwiYmV6aWVyUG9pbnRzIiwiY29udHJvbDEiLCJjb250cm9sMiIsInNldEluRm9yZWdyb3VuZCIsImFkZElua0VkaXRvcklmTmVlZGVkIiwibW92ZUluRE9NIiwiYWRkVG9Bbm5vdGF0aW9uU3RvcmFnZSIsInNldEluQmFja2dyb3VuZCIsIlJlc2l6ZU9ic2VydmVyIiwiaXNSZXNpemFibGUiLCJzZXRBc3BlY3RSYXRpbyIsInJvdW5kZWRXaWR0aCIsInJvdW5kZWRIZWlnaHQiLCJmaXhEaW1zIiwic2NhbGVGYWN0b3JXIiwic2NhbGVGYWN0b3JIIiwiZmlyc3QiLCJzaGlmdFgiLCJzaGlmdFkiLCJqaiIsInAxMCIsInAxMSIsInAyMCIsInAyMSIsInAzMCIsInAzMSIsInA0MCIsInA0MSIsInhNaW4iLCJ4TWF4IiwieU1pbiIsInlNYXgiLCJmaXJzdFRpbWUiLCJNSU5fU0laRSIsInByZXZUcmFuc2xhdGlvblgiLCJwcmV2VHJhbnNsYXRpb25ZIiwidW5zY2FsZWRQYWRkaW5nIiwiU3RhbXBFZGl0b3IiLCJiaXRtYXBVcmwiLCJiaXRtYXBGaWxlIiwic3VwcG9ydGVkVHlwZXMiLCJzdXBwb3J0ZWRUeXBlc1N0ciIsImlzSGFuZGxpbmdNaW1lRm9yUGFzdGluZyIsIm1pbWUiLCJwYXN0ZUVkaXRvciIsImdldEFzRmlsZSIsImZyb21JZCIsImlzU3ZnIiwiZW5hYmxlV2FpdGluZyIsImltYWdlTWFuYWdlciIsImdldEZyb21JZCIsImdldEZyb21VcmwiLCJnZXRGcm9tRmlsZSIsImFjY2VwdCIsImRlbGV0ZUlkIiwiTUFYX1JBVElPIiwiZmFjdG9yIiwiX2V2ZW50QnVzIiwiZWRpdG9yVHlwZSIsImFkZEFsdFRleHRCdXR0b24iLCJiaXRtYXBXaWR0aCIsImJpdG1hcEhlaWdodCIsInByZXZXaWR0aCIsInByZXZIZWlnaHQiLCJvZmZzY3JlZW4iLCJPZmZzY3JlZW5DYW52YXMiLCJ0cmFuc2ZlclRvSW1hZ2VCaXRtYXAiLCJoY21GaWx0ZXIiLCJnZXRJbWFnZUZvckFsdFRleHQiLCJ0b1VybCIsImdldFN2Z1VybCIsInRvRGF0YVVSTCIsImJpdG1hcElkIiwiYWNjZXNzaWJpbGl0eURhdGEiLCJpc1ZhbGlkSWQiLCJhbHRUZXh0RGF0YSIsImRlY29yYXRpdmUiLCJhbHRUZXh0IiwiYWx0Iiwic3RhbXBzIiwiYXJlYSIsInByZXZEYXRhIiwicG9pbnRlcnVwIiwicG9pbnRlclVwQWZ0ZXJTZWxlY3Rpb24iLCJwb2ludGVyZG93biIsIl9lZGl0b3JUeXBlIiwiYW5ub3RhdGlvbkxheWVyIiwidGV4dExheWVyIiwiZWRpdG9yVHlwZXMiLCJfaW5pdGlhbGl6ZWQiLCJyZWdpc3RlckVkaXRvclR5cGVzIiwiYWRkTGF5ZXIiLCJ1cGRhdGVNb2RlIiwiZ2V0TW9kZSIsImRpc2FibGVUZXh0U2VsZWN0aW9uIiwidG9nZ2xlUG9pbnRlckV2ZW50cyIsImRpc2FibGVDbGljayIsImVuYWJsZVRleHRTZWxlY3Rpb24iLCJlbmFibGVDbGljayIsImlzQ29tbWl0dGluZyIsImFubm90YXRpb25FbGVtZW50SWRzIiwiZWRpdGFibGVzIiwiaXNEZWxldGVkQW5ub3RhdGlvbkVsZW1lbnQiLCJhZGRPclJlYnVpbGQiLCJoaWRkZW5Bbm5vdGF0aW9uSWRzIiwic2V0QWN0aXZlRWRpdG9yIiwiZ2V0QWN0aXZlIiwiYXR0YWNoIiwicmVtb3ZlRGVsZXRlZEFubm90YXRpb25FbGVtZW50IiwiZGV0YWNoIiwicmVtb3ZlUG9pbnRlckluVGV4dExheWVyIiwiYWRkRGVsZXRlZEFubm90YXRpb25FbGVtZW50IiwicmVtb3ZlRWRpdG9yIiwiY2hhbmdlUGFyZW50IiwiZGVsZXRlQW5ub3RhdGlvbkVsZW1lbnQiLCJhZGRFZGl0b3IiLCJtb3ZlRWRpdG9ySW5ET00iLCJuZWVkc1RvQmVSZWJ1aWx0IiwiZ2V0TmV4dElkIiwiZ2V0SWQiLCJhZGROZXdFZGl0b3IiLCJzZXRTZWxlY3RlZCIsInRvZ2dsZVNlbGVjdGVkIiwiaXNTZWxlY3RlZCIsIl9ldmVudCIsImNvbGxhcHNlZCIsImNvbW1vbkFuY2VzdG9yQ29udGFpbmVyIiwibGF5ZXJYIiwibGF5ZXJZIiwiYmJveGVzIiwiZ2V0Q2xpZW50UmVjdHMiLCJyb3RhdG9yIiwiZW1wdHkiLCJ1bnNlbGVjdEFsbCIsImZpbmROZXdQYXJlbnQiLCJmaW5kUGFyZW50IiwicmVtb3ZlTGF5ZXIiLCJnZXRFZGl0b3JzIiwib2xkUm90YXRpb24iLCJfdG9vbHNfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyIsIl9oaWRlRHJvcGRvd25Gcm9tS2V5Ym9hcmQiLCJfY29sb3JTZWxlY3RGcm9tS2V5Ym9hcmQiLCJfbW92ZVRvTmV4dCIsIl9tb3ZlVG9QcmV2aW91cyIsIl9tb3ZlVG9CZWdpbm5pbmciLCJfbW92ZVRvRW5kIiwicmVuZGVyQnV0dG9uIiwic3dhdGNoIiwicmVuZGVyTWFpbkRyb3Bkb3duIiwiZHJvcGRvd24iLCJwYXJhbVR5cGUiLCJyb2xlIiwiaGlkZURyb3Bkb3duIiwiZm9jdXNWaXNpYmxlIiwiY2hpbGQiLCJBbHRUZXh0IiwibDEwblByb21pc2UiLCJvbkNsaWNrIiwiZWRpdEFsdFRleHQiLCJERUxBWV9UT19TSE9XX1RPT0xUSVAiLCJFZGl0b3JUb29sYmFyIiwiZWRpdFRvb2xiYXIiLCJpbnNldElubGluZUVuZCIsImRpdmlkZXIiLCJjb2xvclBpY2tlciIsImZvY3Vzb3V0IiwiX3pJbmRleCIsIkNvbG9yTWFuYWdlciIsIl9yZXNpemVyS2V5Ym9hcmRNYW5hZ2VyIiwiX3Jlc2l6ZVdpdGhLZXlib2FyZCIsIl9zdG9wUmVzaXppbmdXaXRoS2V5Ym9hcmQiLCJwYWdlUm90YXRpb24iLCJ2aWV3UGFyYW1ldGVycyIsImdldEhleENvZGUiLCJmYWtlRWRpdG9yIiwiRmFrZUVkaXRvciIsIl9ib3JkZXJMaW5lV2lkdGgiLCJfdmFsdWUiLCJpc0VudGVySGFuZGxlZCIsImlzTXVsdGlwbGVTZWxlY3Rpb24iLCJzY3JlZW5Ub1BhZ2VUcmFuc2xhdGlvbiIsInRyYW5zbGF0ZUluUGFnZSIsImRyYWciLCJieCIsImJ5IiwidG9GaXhlZCIsInJlYWxTY2FsZSIsInNjYWxlZFdpZHRoIiwic2NhbGVkSGVpZ2h0Iiwid2lkdGhQZXJjZW50IiwiZW5kc1dpdGgiLCJoZWlnaHRQZXJjZW50IiwiYm91bmRSZXNpemVyUG9pbnRlcm1vdmUiLCJzYXZlZERyYWdnYWJsZSIsInBvaW50ZXJNb3ZlT3B0aW9ucyIsInNhdmVkWCIsInNhdmVkWSIsInNhdmVkV2lkdGgiLCJzYXZlZEhlaWdodCIsInNhdmVkUGFyZW50Q3Vyc29yIiwic2F2ZWRDdXJzb3IiLCJwb2ludGVyVXBDYWxsYmFjayIsIm5ld1giLCJuZXdZIiwibWluV2lkdGgiLCJyb3RhdGlvbk1hdHJpeCIsInRyYW5zZiIsImludlJvdGF0aW9uTWF0cml4IiwiZ2V0UG9pbnQiLCJnZXRPcHBvc2l0ZSIsImlzRGlhZ29uYWwiLCJpc0hvcml6b250YWwiLCJwb2ludCIsIm9wcG9zaXRlUG9pbnQiLCJ0cmFuc2ZPcHBvc2l0ZVBvaW50Iiwib3Bwb3NpdGVYIiwib3Bwb3NpdGVZIiwicmF0aW9YIiwicmF0aW9ZIiwiZGVsdGFYIiwiZGVsdGFZIiwibW92ZW1lbnRYIiwibW92ZW1lbnRZIiwib2xkRGlhZyIsImFsdFRleHRGaW5pc2giLCJyZW1vdmVFZGl0VG9vbGJhciIsImdldENsaWVudERpbWVuc2lvbnMiLCJtYXhXaWR0aCIsIm1heEhlaWdodCIsInBvaW50ZXJNb3ZlQ2FsbGJhY2siLCJzZXRVcERyYWdTZXNzaW9uIiwiZHJhZ1NlbGVjdGVkRWRpdG9ycyIsImVuZERyYWdTZXNzaW9uIiwiX3NldFBhcmVudEFuZFBvc2l0aW9uIiwiZ2V0UmVjdEluQ3VycmVudENvb3JkcyIsIl9hbmdsZSIsIm1ha2VSZXNpemFibGUiLCJib3VuZFJlc2l6ZXJLZXlkb3duIiwiYm91bmRSZXNpemVyQmx1ciIsImZpcnN0UG9zaXRpb24iLCJuZXh0Rmlyc3RQb3NpdGlvbiIsImFzcGVjdFJhdGlvIiwiaW5uZXJNYXJnaW4iLCJpc0xUUiIsIkVQU0lMT04iLCJzaGlmdGVkTWluWCIsInNoaWZ0ZWRNaW5ZIiwibGFzdEVkZ2UiLCJlZGdlIiwic29ydCIsIm91dGxpbmVWZXJ0aWNhbEVkZ2VzIiwiZWRnZXMiLCJhbGxFZGdlcyIsImVkZ2UxIiwiZWRnZTIiLCJsYXN0UG9pbnRYIiwibGFzdFBvaW50WSIsIm1pZGRsZSIsInk0IiwiX2Rpc3BsYXlfdXRpbHNfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyIsIklkTWFuYWdlciIsIkFubm90YXRpb25FZGl0b3JQcmVmaXgiLCJJbWFnZU1hbmFnZXIiLCJnZXRVdWlkIiwiX2lzU1ZHRml0dGluZ0NhbnZhcyIsIkltYWdlIiwiZGVjb2RlIiwicmF3RGF0YSIsInJlZkNvdW50ZXIiLCJtdXN0UmVtb3ZlQXNwZWN0UmF0aW9Qcm9taXNlIiwiZmlsZVJlYWRlciIsIkZpbGVSZWFkZXIiLCJpbWFnZUVsZW1lbnQiLCJpbWFnZVByb21pc2UiLCJvbmxvYWQiLCJzdmdVcmwiLCJyZXN1bHQiLCJvbmVycm9yIiwicmVhZEFzRGF0YVVSTCIsImNyZWF0ZUltYWdlQml0bWFwIiwibGFzdE1vZGlmaWVkIiwiQ29tbWFuZE1hbmFnZXIiLCJoYXNTb21ldGhpbmdUb1VuZG8iLCJoYXNTb21ldGhpbmdUb1JlZG8iLCJjYWxsYmFja3MiLCJhbGxLZXlzIiwiaXNNYWNLZXkiLCJSR0IiLCJfY29sb3JzTWFwcGluZyIsImJsdXIiLCJjb3B5IiwiY3V0Iiwib25FZGl0aW5nQWN0aW9uIiwib25QYWdlQ2hhbmdpbmciLCJvblJvdGF0aW9uQ2hhbmdpbmciLCJoYXNTZWxlY3RlZEVkaXRvciIsImhhc1NvbWV0aGluZ1RvQ29udHJvbCIsInRleHRJbnB1dENoZWNrZXIiLCJfc2VsZiIsIkhUTUxJbnB1dEVsZW1lbnQiLCJzZWxlY3RBbGwiLCJhZGROZXdFZGl0b3JGcm9tS2V5Ym9hcmQiLCJIVE1MQnV0dG9uRWxlbWVudCIsImFsdFRleHRNYW5hZ2VyIiwicGRmRG9jdW1lbnQiLCJfb24iLCJfb2ZmIiwicGFpciIsInNldE1haW5IaWdobGlnaHRDb2xvclBpY2tlciIsImZvY3VzTWFpbkNvbnRhaW5lciIsImRpc2FibGVVc2VyU2VsZWN0IiwicGFnZXNSb3RhdGlvbiIsImhhc1NlbGVjdGlvbiIsImxhc3RFZGl0b3IiLCJsYXN0QWN0aXZlRWxlbWVudCIsImFkZEVkaXRMaXN0ZW5lcnMiLCJyZW1vdmVFZGl0TGlzdGVuZXJzIiwiZWRpdG9ycyIsIm5ld0VkaXRvcnMiLCJkZXNlcmlhbGl6ZWRFZGl0b3IiLCJpc0VkaXRvckhhbmRsaW5nS2V5Ym9hcmQiLCJnZXRMYXllciIsImN1cnJlbnRQYWdlSW5kZXgiLCJpc0Zyb21LZXlib2FyZCIsIkNSRUFURSIsIm11c3RXYWl0IiwiZ2V0RWRpdG9yIiwiZWQiLCJmaXJzdFNlbGVjdGVkRWRpdG9yIiwibm9Db21taXQiLCJ0b3RhbFgiLCJ0b3RhbFkiLCJzYXZlZFBhZ2VJbmRleCIsIm5ld1BhZ2VJbmRleCIsIm11c3RCZUFkZGVkSW5VbmRvU3RhY2siLCJfbmV0d29ya191dGlsc19qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fIiwiY3JlYXRlRmV0Y2hPcHRpb25zIiwiYWJvcnRDb250cm9sbGVyIiwic2lnbmFsIiwiY3JlZGVudGlhbHMiLCJyZWRpcmVjdCIsImNyZWF0ZUhlYWRlcnMiLCJIZWFkZXJzIiwiZ2V0QXJyYXlCdWZmZXIiLCJpc0h0dHAiLCJfZnVsbFJlcXVlc3RSZWFkZXIiLCJfcmFuZ2VSZXF1ZXN0UmVhZGVycyIsIl9wcm9ncmVzc2l2ZURhdGFMZW5ndGgiLCJfbG9hZGVkIiwiUERGRmV0Y2hTdHJlYW1SZWFkZXIiLCJQREZGZXRjaFN0cmVhbVJhbmdlUmVhZGVyIiwic3RyZWFtIiwiX3N0cmVhbSIsIl9yZWFkZXIiLCJfZmlsZW5hbWUiLCJfd2l0aENyZWRlbnRpYWxzIiwiX2NvbnRlbnRMZW5ndGgiLCJfaGVhZGVyc0NhcGFiaWxpdHkiLCJfZGlzYWJsZVJhbmdlIiwiX3JhbmdlQ2h1bmtTaXplIiwiX2Fib3J0Q29udHJvbGxlciIsIkFib3J0Q29udHJvbGxlciIsIl9pc1N0cmVhbWluZ1N1cHBvcnRlZCIsIl9pc1JhbmdlU3VwcG9ydGVkIiwiX2hlYWRlcnMiLCJ2YWxpZGF0ZVJlc3BvbnNlU3RhdHVzIiwiY3JlYXRlUmVzcG9uc2VTdGF0dXNFcnJvciIsImdldFJlc3BvbnNlSGVhZGVyIiwiYWxsb3dSYW5nZVJlcXVlc3RzIiwic3VnZ2VzdGVkTGVuZ3RoIiwidmFsaWRhdGVSYW5nZVJlcXVlc3RDYXBhYmlsaXRpZXMiLCJleHRyYWN0RmlsZW5hbWVGcm9tSGVhZGVyIiwiX3JlYWRDYXBhYmlsaXR5IiwibmF0aXZlRm9udEZhY2VzIiwibG9hZGluZ1JlcXVlc3RzIiwibG9hZFRlc3RGb250SWQiLCJhZGROYXRpdmVGb250RmFjZSIsIm5hdGl2ZUZvbnRGYWNlIiwiZm9udHMiLCJyZW1vdmVOYXRpdmVGb250RmFjZSIsImluc2VydFJ1bGUiLCJzaGVldCIsImNzc1J1bGVzIiwibG9hZFN5c3RlbUZvbnQiLCJfaW5zcGVjdEZvbnQiLCJpc0ZvbnRMb2FkaW5nQVBJU3VwcG9ydGVkIiwiZm9udEZhY2UiLCJGb250RmFjZSIsImxvYWQiLCJiYXNlRm9udE5hbWUiLCJhdHRhY2hlZCIsImNyZWF0ZU5hdGl2ZUZvbnRGYWNlIiwiZmFtaWx5IiwiY3JlYXRlRm9udEZhY2VSdWxlIiwiaXNTeW5jRm9udExvYWRpbmdTdXBwb3J0ZWQiLCJfcXVldWVMb2FkaW5nQ2FsbGJhY2siLCJfcHJlcGFyZUZvbnRMb2FkRXZlbnQiLCJoYXNGb250cyIsInN1cHBvcnRlZCIsInVzZXJBZ2VudCIsIm90aGVyUmVxdWVzdCIsIl9sb2FkVGVzdEZvbnQiLCJ0ZXN0Rm9udCIsImludDMyIiwiY2hhckNvZGVBdCIsInNwbGljZVN0cmluZyIsImNhbGxlZCIsIlhYWFhfVkFMVUUiLCJjaGVja3N1bSIsInN0cmluZzMyIiwiZm9udEZhbWlseSIsImlzRm9udFJlYWR5IiwidHJhbnNsYXRlZERhdGEiLCJjb21waWxlZEdseXBocyIsImNzc0ZvbnRJbmZvIiwid2VpZ2h0IiwiZm9udFdlaWdodCIsIml0YWxpY0FuZ2xlIiwiYnl0ZXNUb1N0cmluZyIsIm1pbWV0eXBlIiwiY21kcyIsImpzQnVmIiwicGFyc2VkRGF0YSIsImdldFJhdyIsIk5ldHdvcmtNYW5hZ2VyIiwiY3VyclhocklkIiwicGVuZGluZ1JlcXVlc3RzIiwicmVxdWVzdFJhbmdlIiwicHJvcCIsInJlcXVlc3RGdWxsIiwieGhyIiwieGhySWQiLCJwZW5kaW5nUmVxdWVzdCIsInNldFJlcXVlc3RIZWFkZXIiLCJleHBlY3RlZFN0YXR1cyIsIm9uRXJyb3IiLCJvblN0YXRlQ2hhbmdlIiwib25wcm9ncmVzcyIsIm9uSGVhZGVyc1JlY2VpdmVkIiwib25Eb25lIiwieGhyU3RhdHVzIiwicmFuZ2VIZWFkZXIiLCJnZXRSZXF1ZXN0WGhyIiwiaXNQZW5kaW5nUmVxdWVzdCIsImFib3J0UmVxdWVzdCIsIl9zb3VyY2UiLCJfbWFuYWdlciIsIl9vblJhbmdlUmVxdWVzdFJlYWRlckNsb3NlZCIsIlBERk5ldHdvcmtTdHJlYW1GdWxsUmVxdWVzdFJlYWRlciIsIlBERk5ldHdvcmtTdHJlYW1SYW5nZVJlcXVlc3RSZWFkZXIiLCJvbkNsb3NlZCIsIm1hbmFnZXIiLCJfb25IZWFkZXJzUmVjZWl2ZWQiLCJfb25Eb25lIiwiX29uRXJyb3IiLCJfb25Qcm9ncmVzcyIsIl91cmwiLCJfZnVsbFJlcXVlc3RJZCIsIl9oZWFkZXJzUmVjZWl2ZWRDYXBhYmlsaXR5IiwiX2NhY2hlZENodW5rcyIsIl9yZXF1ZXN0cyIsIl9kb25lIiwiX3N0b3JlZEVycm9yIiwiZnVsbFJlcXVlc3RYaHJJZCIsImZ1bGxSZXF1ZXN0WGhyIiwicmVxdWVzdENhcGFiaWxpdHkiLCJsZW5ndGhDb21wdXRhYmxlIiwiX3JlcXVlc3RJZCIsIl9xdWV1ZWRDaHVuayIsIl9jbG9zZSIsInJldHVyblZhbHVlcyIsImNvbnRlbnREaXNwb3NpdGlvbiIsIm5lZWRzRW5jb2RpbmdGaXh1cCIsInRvUGFyYW1SZWdFeHAiLCJyZmMyNjE2dW5xdW90ZSIsInJmYzU5ODdkZWNvZGUiLCJyZmMyMDQ3ZGVjb2RlIiwiZml4dXBFbmNvZGluZyIsImNvbnRlbnREaXNwb3NpdGlvblN0ciIsIml0ZXIiLCJxdW90IiwicGFydCIsInJmYzIyMzFnZXRwYXJhbSIsImF0dHJpYnV0ZVBhdHRlcm4iLCJmbGFncyIsInRleHRkZWNvZGUiLCJlbmNvZGluZyIsImRlY29kZXIiLCJUZXh0RGVjb2RlciIsImZhdGFsIiwicXVvdGluZGV4IiwiZXh0dmFsdWUiLCJlbmNvZGluZ2VuZCIsImNoYXJzZXQiLCJoZXgiLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJnZXRGaWxlbmFtZUZyb21Db250ZW50RGlzcG9zaXRpb25IZWFkZXIiLCJmcyIsImh0dHAiLCJodHRwcyIsImZpbGVVcmlSZWdleCIsInBhcnNlVXJsIiwic291cmNlVXJsIiwicGFyc2VkVXJsIiwiaXNGc1VybCIsIlBERk5vZGVTdHJlYW1Gc0Z1bGxSZWFkZXIiLCJQREZOb2RlU3RyZWFtRnVsbFJlYWRlciIsIlBERk5vZGVTdHJlYW1Gc1JhbmdlUmVhZGVyIiwiUERGTm9kZVN0cmVhbVJhbmdlUmVhZGVyIiwiQmFzZUZ1bGxSZWFkZXIiLCJfcmVhZGFibGVTdHJlYW0iLCJfZXJyb3IiLCJfc2V0UmVhZGFibGVTdHJlYW0iLCJCYXNlUmFuZ2VSZWFkZXIiLCJjcmVhdGVSZXF1ZXN0T3B0aW9ucyIsImF1dGgiLCJob3N0bmFtZSIsImhhbmRsZVJlc3BvbnNlIiwic3RhdHVzQ29kZSIsIl9yZXF1ZXN0IiwiX2h0dHBIZWFkZXJzIiwibHN0YXQiLCJzdGF0IiwiY3JlYXRlUmVhZFN0cmVhbSIsInBhdGgyZF9wb2x5ZmlsbCIsInJlYWRGaWxlIiwiY3JlYXRlQ2FudmFzIiwiX3NoYXJlZF9tdXJtdXJoYXNoM19qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fIiwiSU5URVJOQUwiLCJPcHRpb25hbENvbnRlbnRHcm91cCIsIl9zZXRWaXNpYmxlIiwiY3JlYXRvciIsIm9yZGVyIiwiZ3JvdXBzIiwiYmFzZVN0YXRlIiwiZ2V0SGFzaCIsIm9wZXJhdG9yIiwiZXhwcmVzc2lvbiIsInBvbGljeSIsInNldFZpc2liaWxpdHkiLCJoYXNJbml0aWFsVmlzaWJpbGl0eSIsImdldE9yZGVyIiwiZ2V0R3JvdXBzIiwiZ2V0R3JvdXAiLCJyZW5kZXJUZXh0TGF5ZXIiLCJ1cGRhdGVUZXh0TGF5ZXIiLCJERUZBVUxUX0ZPTlRfU0laRSIsImFzY2VudENhY2hlIiwiZ2V0Q3R4IiwiYXBwZW5kVGV4dCIsImdlb20iLCJ0ZXh0RGl2IiwidGV4dERpdlByb3BlcnRpZXMiLCJoYXNUZXh0IiwiaGFzRU9MIiwiX3RleHREaXZzIiwiX3RyYW5zZm9ybSIsImF0YW4yIiwiZm9udE5hbWUiLCJQSSIsIl9mb250SW5zcGVjdG9yRW5hYmxlZCIsImZvbnRTdWJzdGl0dXRpb24iLCJmb250SGVpZ2h0IiwiZm9udEFzY2VudCIsImNhY2hlZEFzY2VudCIsIm1ldHJpY3MiLCJhc2NlbnQiLCJmb250Qm91bmRpbmdCb3hBc2NlbnQiLCJkZXNjZW50IiwiZm9udEJvdW5kaW5nQm94RGVzY2VudCIsInJhdGlvIiwicGl4ZWxzIiwiZ2V0QXNjZW50IiwiX2lzT2Zmc2NyZWVuQ2FudmFzU3VwcG9ydGVkIiwic2luIiwiY29zIiwic2NhbGVGYWN0b3JTdHIiLCJkaXZTdHlsZSIsIl9jb250YWluZXIiLCJfcm9vdENvbnRhaW5lciIsIl9wYWdlV2lkdGgiLCJfcGFnZUhlaWdodCIsImZvbnRTdWJzdGl0dXRpb25Mb2FkZWROYW1lIiwic2hvdWxkU2NhbGVUZXh0IiwiYWJzU2NhbGVYIiwiYWJzU2NhbGVZIiwiX3RleHREaXZQcm9wZXJ0aWVzIiwiX2lzUmVhZGFibGVTdHJlYW0iLCJfbGF5b3V0VGV4dCIsImxheW91dCIsInByZXZGb250U2l6ZSIsInByZXZGb250RmFtaWx5IiwiVGV4dExheWVyUmVuZGVyVGFzayIsInRleHRDb250ZW50U291cmNlIiwidGV4dERpdnMiLCJ0ZXh0Q29udGVudEl0ZW1zU3RyIiwiX3RleHRDb250ZW50U291cmNlIiwiUmVhZGFibGVTdHJlYW0iLCJfdGV4dENvbnRlbnRJdGVtc1N0ciIsIl9jYW5jZWxlZCIsIl9sYXlvdXRUZXh0UGFyYW1zIiwiX3Byb2Nlc3NJdGVtcyIsInN0eWxlQ2FjaGUiLCJfcmVuZGVyIiwibXVzdFJlc2NhbGUiLCJwZGZEYXRhUmFuZ2VUcmFuc3BvcnQiLCJfcXVldWVkQ2h1bmtzIiwiX3Byb2dyZXNzaXZlRG9uZSIsIl9jb250ZW50RGlzcG9zaXRpb25GaWxlbmFtZSIsIl9wZGZEYXRhUmFuZ2VUcmFuc3BvcnQiLCJfcmFuZ2VSZWFkZXJzIiwiX29uUmVjZWl2ZURhdGEiLCJfb25Qcm9ncmVzc2l2ZURvbmUiLCJfZW5xdWV1ZSIsImZvdW5kIiwiX2JlZ2luIiwiX3JlbW92ZVJhbmdlUmVhZGVyIiwicXVldWVkQ2h1bmtzIiwiUERGRGF0YVRyYW5zcG9ydFN0cmVhbVJlYWRlciIsIlBERkRhdGFUcmFuc3BvcnRTdHJlYW1SYW5nZVJlYWRlciIsIl9oZWFkZXJzUmVhZHkiLCJfZW5kIiwiX3hmYV90ZXh0X2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJzZXR1cFN0b3JhZ2UiLCJ4ZmFPbiIsInhmYU9mZiIsInNldEF0dHJpYnV0ZXMiLCJpc0hUTUxBbmNob3JFbGVtZW50IiwiSFRNTEFuY2hvckVsZW1lbnQiLCJkYXRhSWQiLCJyb290SHRtbCIsImlzTm90Rm9yUmljaFRleHQiLCJyb290RGl2Iiwibm9kZSIsInNob3VsZEJ1aWxkVGV4dCIsImNoaWxkSHRtbCIsInhtbG5zIiwib3V0cHV0Iiwid2FsayIsIl9kaXNwbGF5X2VkaXRvcl9hbm5vdGF0aW9uX2VkaXRvcl9sYXllcl9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fIiwiX2Rpc3BsYXlfZWRpdG9yX3Rvb2xzX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X18iLCJfZGlzcGxheV9hbm5vdGF0aW9uX2xheWVyX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV82X18iLCJfZGlzcGxheV9lZGl0b3JfY29sb3JfcGlja2VyX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV83X18iLCJfZGlzcGxheV9kaXNwbGF5X3V0aWxzX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18iLCJfZGlzcGxheV9kcmF3X2xheWVyX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV84X18iLCJfZGlzcGxheV93b3JrZXJfb3B0aW9uc19qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfOV9fIiwiX2Rpc3BsYXlfZWRpdG9yX291dGxpbmVyX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xMF9fIiwiX2Rpc3BsYXlfYXBpX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18iLCJQYXNzd29yZFJlc3BvbnNlcyIsIlBlcm1pc3Npb25GbGFnIiwiVmVyYm9zaXR5TGV2ZWwiLCJfZGlzcGxheV94ZmFfbGF5ZXJfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzExX18iLCJjcmVhdGVWYWxpZEFic29sdXRlVXJsIiwibm9ybWFsaXplVW5pY29kZSIsIl9kaXNwbGF5X3RleHRfbGF5ZXJfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfXyIsIl91dGlsX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJ3cmFwUmVhc29uIiwic291cmNlTmFtZSIsInRhcmdldE5hbWUiLCJjb21PYmoiLCJjYWxsYmFja0lkIiwic3RyZWFtSWQiLCJzdHJlYW1TaW5rcyIsInN0cmVhbUNvbnRyb2xsZXJzIiwiY2FsbGJhY2tDYXBhYmlsaXRpZXMiLCJhY3Rpb25IYW5kbGVyIiwiX29uQ29tT2JqT25NZXNzYWdlIiwiY2JTb3VyY2VOYW1lIiwiY2JUYXJnZXROYW1lIiwiYWgiLCJ0cmFuc2ZlcnMiLCJxdWV1ZWluZ1N0cmF0ZWd5IiwiY29udHJvbGxlciIsInN0YXJ0Q2FwYWJpbGl0eSIsInN0YXJ0Q2FsbCIsInB1bGxDYWxsIiwiY2FuY2VsQ2FsbCIsImlzQ2xvc2VkIiwiZGVzaXJlZFNpemUiLCJwdWxsIiwicHVsbENhcGFiaWxpdHkiLCJjYW5jZWxDYXBhYmlsaXR5Iiwic3RyZWFtU2luayIsImlzQ2FuY2VsbGVkIiwibGFzdERlc2lyZWRTaXplIiwic2lua0NhcGFiaWxpdHkiLCJzdHJlYW1Db250cm9sbGVyIiwiYWxsU2V0dGxlZCIsIlNFRUQiLCJNQVNLX0hJR0giLCJNQVNLX0xPVyIsInNlZWQiLCJibG9ja0NvdW50cyIsInRhaWxMZW5ndGgiLCJkYXRhVWludDMyIiwiazEiLCJrMiIsIkMxIiwiQzIiLCJDMV9MT1ciLCJDMl9MT1ciLCJwcm9jZXNzIiwidmVyc2lvbnMiLCJudyIsImVsZWN0cm9uIiwiU0FWRSIsIlJFU0laRSIsIkZSRUVURVhUX09QQUNJVFkiLCJNT0RJRllfQ09OVEVOVFMiLCJDT1BZIiwiTU9ESUZZX0FOTk9UQVRJT05TIiwiRklMTF9JTlRFUkFDVElWRV9GT1JNUyIsIkNPUFlfRk9SX0FDQ0VTU0lCSUxJVFkiLCJBU1NFTUJMRSIsIlBSSU5UX0hJR0hfUVVBTElUWSIsIkZJTExfQUREX1RPX1BBVEgiLCJTVFJPS0VfQUREX1RPX1BBVEgiLCJGSUxMX1NUUk9LRV9BRERfVE9fUEFUSCIsIkFERF9UT19QQVRIIiwiU09VTkQiLCJNT1ZJRSIsIlNDUkVFTiIsIlBSSU5URVJNQVJLIiwiVFJBUE5FVCIsIldBVEVSTUFSSyIsIlRIUkVFRCIsIlJFREFDVCIsIkVSUk9SUyIsIldBUk5JTkdTIiwiSU5GT1MiLCJzaG93U3BhY2VkVGV4dCIsIm5leHRMaW5lU2hvd1RleHQiLCJuZXh0TGluZVNldFNwYWNpbmdTaG93VGV4dCIsInNldFN0cm9rZUNvbG9yU3BhY2UiLCJzZXRGaWxsQ29sb3JTcGFjZSIsInNldFN0cm9rZUNvbG9yIiwic2V0RmlsbENvbG9yIiwic2V0U3Ryb2tlR3JheSIsInNldEZpbGxHcmF5Iiwic2V0U3Ryb2tlQ01ZS0NvbG9yIiwic2V0RmlsbENNWUtDb2xvciIsImVuZElubGluZUltYWdlIiwicGFpbnRYT2JqZWN0IiwiTkVFRF9QQVNTV09SRCIsIklOQ09SUkVDVF9QQVNTV09SRCIsImNvbmQiLCJhZGREZWZhdWx0UHJvdG9jb2wiLCJkb3RzIiwidHJ5Q29udmVydEVuY29kaW5nIiwiZXNjYXBlIiwiYWJzb2x1dGVVcmwiLCJfaXNWYWxpZFByb3RvY29sIiwibm9uU2VyaWFsaXphYmxlIiwiTUFYX0FSR1VNRU5UX0NPVU5UIiwic3RyQnVmIiwiY2h1bmtFbmQiLCJidWZmZXI4IiwiaGV4TnVtYmVycyIsInRlbXAiLCJtMSIsIm0yIiwidHJhbnNwb3NlIiwic3FydCIsInJlY3QxIiwicmVjdDIiLCJ4TG93IiwieEhpZ2giLCJ5TG93IiwieUhpZ2giLCJ0dmFsdWVzIiwidDEiLCJ0MiIsImIyYWMiLCJzcXJ0YjJhYyIsImpsZW4iLCJOb3JtYWxpemVSZWdleCIsIk5vcm1hbGl6YXRpb25NYXAiLCJyYW5kb21VVUlEIiwiYnVmIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJxdWV1ZSIsImZuIiwiaGFzQXdhaXQiLCJjdXJyZW50RGVwcyIsIm91dGVyUmVzb2x2ZSIsImRlcFF1ZXVlcyIsInJlaiIsImRlcHMiLCJkZXAiLCJyZXQiLCJ3cmFwRGVwcyIsImdldFJlc3VsdCIsImZuUXVldWUiLCJlcnIiLCJkZWZpbml0aW9uIiwiX193ZWJwYWNrX2V4cG9ydHNfX0dsb2JhbFdvcmtlck9wdGlvbnMiLCJwZGZqc0xpYiIsInBkZmpzTGliUHJvbWlzZSIsIl9fd2VicGFja19leHBvcnRzX19nZXREb2N1bWVudCIsIl9fd2VicGFja19yZXF1aXJlX18iXSwic291cmNlUm9vdCI6IiJ9