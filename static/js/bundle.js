/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var t,e,i,n,s={444:function(t){!function(){"use strict";try{if(typeof document<"u"){var t=document.createElement("style");t.appendChild(document.createTextNode('.image-tool{--bg-color: #cdd1e0;--front-color: #388ae5;--border-color: #e8e8eb}.image-tool__image{border-radius:3px;overflow:hidden;margin-bottom:10px}.image-tool__image-picture{max-width:100%;vertical-align:bottom;display:block}.image-tool__image-preloader{width:50px;height:50px;border-radius:50%;background-size:cover;margin:auto;position:relative;background-color:var(--bg-color);background-position:center center}.image-tool__image-preloader:after{content:"";position:absolute;z-index:3;width:60px;height:60px;border-radius:50%;border:2px solid var(--bg-color);border-top-color:var(--front-color);left:50%;top:50%;margin-top:-30px;margin-left:-30px;animation:image-preloader-spin 2s infinite linear;box-sizing:border-box}.image-tool__caption[contentEditable=true][data-placeholder]:before{position:absolute!important;content:attr(data-placeholder);color:#707684;font-weight:400;display:none}.image-tool__caption[contentEditable=true][data-placeholder]:empty:before{display:block}.image-tool__caption[contentEditable=true][data-placeholder]:empty:focus:before{display:none}.image-tool--empty .image-tool__image,.image-tool--empty .image-tool__caption,.image-tool--loading .image-tool__caption{display:none}.image-tool .cdx-button{display:flex;align-items:center;justify-content:center}.image-tool .cdx-button svg{height:auto;margin:0 6px 0 0}.image-tool--filled .cdx-button,.image-tool--filled .image-tool__image-preloader{display:none}.image-tool--loading .image-tool__image{min-height:200px;display:flex;border:1px solid var(--border-color);background-color:#fff}.image-tool--loading .image-tool__image-picture,.image-tool--loading .cdx-button{display:none}.image-tool--withBorder .image-tool__image{border:1px solid var(--border-color)}.image-tool--withBackground .image-tool__image{padding:15px;background:var(--bg-color)}.image-tool--withBackground .image-tool__image-picture{max-width:60%;margin:0 auto}.image-tool--stretched .image-tool__image-picture{width:100%}@keyframes image-preloader-spin{0%{transform:rotate(0)}to{transform:rotate(360deg)}}')),document.head.appendChild(t)}}catch(t){console.error("vite-plugin-css-injected-by-js",t)}}(),t.exports=function(){"use strict";const t='<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><rect width="14" height="14" x="5" y="5" stroke="currentColor" stroke-width="2" rx="4"/><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5.13968 15.32L8.69058 11.5661C9.02934 11.2036 9.48873 11 9.96774 11C10.4467 11 10.9061 11.2036 11.2449 11.5661L15.3871 16M13.5806 14.0664L15.0132 12.533C15.3519 12.1705 15.8113 11.9668 16.2903 11.9668C16.7693 11.9668 17.2287 12.1705 17.5675 12.533L18.841 13.9634"/><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.7778 9.33331H13.7867"/></svg>';function e(t,e=null,i={}){const n=document.createElement(t);Array.isArray(e)?n.classList.add(...e):e&&n.classList.add(e);for(const t in i)n[t]=i[t];return n}class i{constructor({api:t,config:i,onSelectFile:n,readOnly:s}){this.api=t,this.config=i,this.onSelectFile=n,this.readOnly=s,this.nodes={wrapper:e("div",[this.CSS.baseClass,this.CSS.wrapper]),imageContainer:e("div",[this.CSS.imageContainer]),fileButton:this.createFileButton(),imageEl:void 0,imagePreloader:e("div",this.CSS.imagePreloader),caption:e("div",[this.CSS.input,this.CSS.caption],{contentEditable:!this.readOnly})},this.nodes.caption.dataset.placeholder=this.config.captionPlaceholder,this.nodes.imageContainer.appendChild(this.nodes.imagePreloader),this.nodes.wrapper.appendChild(this.nodes.imageContainer),this.nodes.wrapper.appendChild(this.nodes.caption),this.nodes.wrapper.appendChild(this.nodes.fileButton)}get CSS(){return{baseClass:this.api.styles.block,loading:this.api.styles.loader,input:this.api.styles.input,button:this.api.styles.button,wrapper:"image-tool",imageContainer:"image-tool__image",imagePreloader:"image-tool__image-preloader",imageEl:"image-tool__image-picture",caption:"image-tool__caption"}}static get status(){return{EMPTY:"empty",UPLOADING:"loading",FILLED:"filled"}}render(t){return t.file&&0!==Object.keys(t.file).length?this.toggleStatus(i.status.UPLOADING):this.toggleStatus(i.status.EMPTY),this.nodes.wrapper}createFileButton(){const i=e("div",[this.CSS.button]);return i.innerHTML=this.config.buttonContent||`${t} ${this.api.i18n.t("Select an Image")}`,i.addEventListener("click",(()=>{this.onSelectFile()})),i}showPreloader(t){this.nodes.imagePreloader.style.backgroundImage=`url(${t})`,this.toggleStatus(i.status.UPLOADING)}hidePreloader(){this.nodes.imagePreloader.style.backgroundImage="",this.toggleStatus(i.status.EMPTY)}fillImage(t){const n=/\.mp4$/.test(t)?"VIDEO":"IMG",s={src:t};let o="load";"VIDEO"===n&&(s.autoplay=!0,s.loop=!0,s.muted=!0,s.playsinline=!0,o="loadeddata"),this.nodes.imageEl=e(n,this.CSS.imageEl,s),this.nodes.imageEl.addEventListener(o,(()=>{this.toggleStatus(i.status.FILLED),this.nodes.imagePreloader&&(this.nodes.imagePreloader.style.backgroundImage="")})),this.nodes.imageContainer.appendChild(this.nodes.imageEl)}fillCaption(t){this.nodes.caption&&(this.nodes.caption.innerHTML=t)}toggleStatus(t){for(const e in i.status)Object.prototype.hasOwnProperty.call(i.status,e)&&this.nodes.wrapper.classList.toggle(`${this.CSS.wrapper}--${i.status[e]}`,t===i.status[e])}applyTune(t,e){this.nodes.wrapper.classList.toggle(`${this.CSS.wrapper}--${t}`,e)}}var n,s={exports:{}};window,n=function(){return function(t){var e={};function i(n){if(e[n])return e[n].exports;var s=e[n]={i:n,l:!1,exports:{}};return t[n].call(s.exports,s,s.exports,i),s.l=!0,s.exports}return i.m=t,i.c=e,i.d=function(t,e,n){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},i.r=function(t){typeof Symbol<"u"&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e||4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var s in t)i.d(n,s,function(e){return t[e]}.bind(null,s));return n},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=3)}([function(t,e){var i;i=function(){return this}();try{i=i||new Function("return this")()}catch{"object"==typeof window&&(i=window)}t.exports=i},function(t,e,i){(function(t){var n=i(2),s=setTimeout;function o(){}function r(t){if(!(this instanceof r))throw new TypeError("Promises must be constructed via new");if("function"!=typeof t)throw new TypeError("not a function");this._state=0,this._handled=!1,this._value=void 0,this._deferreds=[],u(t,this)}function a(t,e){for(;3===t._state;)t=t._value;0!==t._state?(t._handled=!0,r._immediateFn((function(){var i=1===t._state?e.onFulfilled:e.onRejected;if(null!==i){var n;try{n=i(t._value)}catch(t){return void c(e.promise,t)}l(e.promise,n)}else(1===t._state?l:c)(e.promise,t._value)}))):t._deferreds.push(e)}function l(t,e){try{if(e===t)throw new TypeError("A promise cannot be resolved with itself.");if(e&&("object"==typeof e||"function"==typeof e)){var i=e.then;if(e instanceof r)return t._state=3,t._value=e,void d(t);if("function"==typeof i)return void u((n=i,s=e,function(){n.apply(s,arguments)}),t)}t._state=1,t._value=e,d(t)}catch(e){c(t,e)}var n,s}function c(t,e){t._state=2,t._value=e,d(t)}function d(t){2===t._state&&0===t._deferreds.length&&r._immediateFn((function(){t._handled||r._unhandledRejectionFn(t._value)}));for(var e=0,i=t._deferreds.length;e<i;e++)a(t,t._deferreds[e]);t._deferreds=null}function h(t,e,i){this.onFulfilled="function"==typeof t?t:null,this.onRejected="function"==typeof e?e:null,this.promise=i}function u(t,e){var i=!1;try{t((function(t){i||(i=!0,l(e,t))}),(function(t){i||(i=!0,c(e,t))}))}catch(t){if(i)return;i=!0,c(e,t)}}r.prototype.catch=function(t){return this.then(null,t)},r.prototype.then=function(t,e){var i=new this.constructor(o);return a(this,new h(t,e,i)),i},r.prototype.finally=n.a,r.all=function(t){return new r((function(e,i){if(!t||void 0===t.length)throw new TypeError("Promise.all accepts an array");var n=Array.prototype.slice.call(t);if(0===n.length)return e([]);var s=n.length;function o(t,r){try{if(r&&("object"==typeof r||"function"==typeof r)){var a=r.then;if("function"==typeof a)return void a.call(r,(function(e){o(t,e)}),i)}n[t]=r,0==--s&&e(n)}catch(t){i(t)}}for(var r=0;r<n.length;r++)o(r,n[r])}))},r.resolve=function(t){return t&&"object"==typeof t&&t.constructor===r?t:new r((function(e){e(t)}))},r.reject=function(t){return new r((function(e,i){i(t)}))},r.race=function(t){return new r((function(e,i){for(var n=0,s=t.length;n<s;n++)t[n].then(e,i)}))},r._immediateFn="function"==typeof t&&function(e){t(e)}||function(t){s(t,0)},r._unhandledRejectionFn=function(t){typeof console<"u"&&console&&console.warn("Possible Unhandled Promise Rejection:",t)},e.a=r}).call(this,i(5).setImmediate)},function(t,e,i){e.a=function(t){var e=this.constructor;return this.then((function(i){return e.resolve(t()).then((function(){return i}))}),(function(i){return e.resolve(t()).then((function(){return e.reject(i)}))}))}},function(t,e,i){function n(t){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}i(4);var s,o,r,a,l,c,d,h=i(8),u=(o=function(t){return new Promise((function(e,i){t=a(t),(t=l(t)).beforeSend&&t.beforeSend();var n=window.XMLHttpRequest?new window.XMLHttpRequest:new window.ActiveXObject("Microsoft.XMLHTTP");n.open(t.method,t.url),n.setRequestHeader("X-Requested-With","XMLHttpRequest"),Object.keys(t.headers).forEach((function(e){var i=t.headers[e];n.setRequestHeader(e,i)}));var s=t.ratio;n.upload.addEventListener("progress",(function(e){var i=Math.round(e.loaded/e.total*100),n=Math.ceil(i*s/100);t.progress(Math.min(n,100))}),!1),n.addEventListener("progress",(function(e){var i=Math.round(e.loaded/e.total*100),n=Math.ceil(i*(100-s)/100)+s;t.progress(Math.min(n,100))}),!1),n.onreadystatechange=function(){if(4===n.readyState){var t=n.response;try{t=JSON.parse(t)}catch{}var s=h.parseHeaders(n.getAllResponseHeaders()),o={body:t,code:n.status,headers:s};d(n.status)?e(o):i(o)}},n.send(t.data)}))},r=function(t){return t.method="POST",o(t)},a=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};if(t.url&&"string"!=typeof t.url)throw new Error("Url must be a string");if(t.url=t.url||"",t.method&&"string"!=typeof t.method)throw new Error("`method` must be a string or null");if(t.method=t.method?t.method.toUpperCase():"GET",t.headers&&"object"!==n(t.headers))throw new Error("`headers` must be an object or null");if(t.headers=t.headers||{},t.type&&("string"!=typeof t.type||!Object.values(s).includes(t.type)))throw new Error("`type` must be taken from module's «contentType» library");if(t.progress&&"function"!=typeof t.progress)throw new Error("`progress` must be a function or null");if(t.progress=t.progress||function(t){},t.beforeSend=t.beforeSend||function(t){},t.ratio&&"number"!=typeof t.ratio)throw new Error("`ratio` must be a number");if(t.ratio<0||t.ratio>100)throw new Error("`ratio` must be in a 0-100 interval");if(t.ratio=t.ratio||90,t.accept&&"string"!=typeof t.accept)throw new Error("`accept` must be a string with a list of allowed mime-types");if(t.accept=t.accept||"*/*",t.multiple&&"boolean"!=typeof t.multiple)throw new Error("`multiple` must be a true or false");if(t.multiple=t.multiple||!1,t.fieldName&&"string"!=typeof t.fieldName)throw new Error("`fieldName` must be a string");return t.fieldName=t.fieldName||"files",t},l=function(t){switch(t.method){case"GET":var e=c(t.data,s.URLENCODED);delete t.data,t.url=/\?/.test(t.url)?t.url+"&"+e:t.url+"?"+e;break;case"POST":case"PUT":case"DELETE":case"UPDATE":var i=function(){return(arguments.length>0&&void 0!==arguments[0]?arguments[0]:{}).type||s.JSON}(t);(h.isFormData(t.data)||h.isFormElement(t.data))&&(i=s.FORM),t.data=c(t.data,i),i!==u.contentType.FORM&&(t.headers["content-type"]=i)}return t},c=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};switch(arguments.length>1?arguments[1]:void 0){case s.URLENCODED:return h.urlEncode(t);case s.JSON:return h.jsonEncode(t);case s.FORM:return h.formEncode(t);default:return t}},d=function(t){return t>=200&&t<300},{contentType:s={URLENCODED:"application/x-www-form-urlencoded; charset=utf-8",FORM:"multipart/form-data",JSON:"application/json; charset=utf-8"},request:o,get:function(t){return t.method="GET",o(t)},post:r,transport:function(t){return t=a(t),h.selectFiles(t).then((function(e){for(var i=new FormData,n=0;n<e.length;n++)i.append(t.fieldName,e[n],e[n].name);h.isObject(t.data)&&Object.keys(t.data).forEach((function(e){var n=t.data[e];i.append(e,n)}));var s=t.beforeSend;return t.beforeSend=function(){return s(e)},t.data=i,r(t)}))},selectFiles:function(t){return delete(t=a(t)).beforeSend,h.selectFiles(t)}});t.exports=u},function(t,e,i){i.r(e);var n=i(1);window.Promise=window.Promise||n.a},function(t,e,i){(function(t){var n=void 0!==t&&t||typeof self<"u"&&self||window,s=Function.prototype.apply;function o(t,e){this._id=t,this._clearFn=e}e.setTimeout=function(){return new o(s.call(setTimeout,n,arguments),clearTimeout)},e.setInterval=function(){return new o(s.call(setInterval,n,arguments),clearInterval)},e.clearTimeout=e.clearInterval=function(t){t&&t.close()},o.prototype.unref=o.prototype.ref=function(){},o.prototype.close=function(){this._clearFn.call(n,this._id)},e.enroll=function(t,e){clearTimeout(t._idleTimeoutId),t._idleTimeout=e},e.unenroll=function(t){clearTimeout(t._idleTimeoutId),t._idleTimeout=-1},e._unrefActive=e.active=function(t){clearTimeout(t._idleTimeoutId);var e=t._idleTimeout;e>=0&&(t._idleTimeoutId=setTimeout((function(){t._onTimeout&&t._onTimeout()}),e))},i(6),e.setImmediate=typeof self<"u"&&self.setImmediate||void 0!==t&&t.setImmediate||this&&this.setImmediate,e.clearImmediate=typeof self<"u"&&self.clearImmediate||void 0!==t&&t.clearImmediate||this&&this.clearImmediate}).call(this,i(0))},function(t,e,i){(function(t,e){!function(t,i){if(!t.setImmediate){var n,s,o,r,a,l=1,c={},d=!1,h=t.document,u=Object.getPrototypeOf&&Object.getPrototypeOf(t);u=u&&u.setTimeout?u:t,"[object process]"==={}.toString.call(t.process)?n=function(t){e.nextTick((function(){g(t)}))}:function(){if(t.postMessage&&!t.importScripts){var e=!0,i=t.onmessage;return t.onmessage=function(){e=!1},t.postMessage("","*"),t.onmessage=i,e}}()?(r="setImmediate$"+Math.random()+"$",a=function(e){e.source===t&&"string"==typeof e.data&&0===e.data.indexOf(r)&&g(+e.data.slice(r.length))},t.addEventListener?t.addEventListener("message",a,!1):t.attachEvent("onmessage",a),n=function(e){t.postMessage(r+e,"*")}):t.MessageChannel?((o=new MessageChannel).port1.onmessage=function(t){g(t.data)},n=function(t){o.port2.postMessage(t)}):h&&"onreadystatechange"in h.createElement("script")?(s=h.documentElement,n=function(t){var e=h.createElement("script");e.onreadystatechange=function(){g(t),e.onreadystatechange=null,s.removeChild(e),e=null},s.appendChild(e)}):n=function(t){setTimeout(g,0,t)},u.setImmediate=function(t){"function"!=typeof t&&(t=new Function(""+t));for(var e=new Array(arguments.length-1),i=0;i<e.length;i++)e[i]=arguments[i+1];var s={callback:t,args:e};return c[l]=s,n(l),l++},u.clearImmediate=p}function p(t){delete c[t]}function g(t){if(d)setTimeout(g,0,t);else{var e=c[t];if(e){d=!0;try{!function(t){var e=t.callback,i=t.args;switch(i.length){case 0:e();break;case 1:e(i[0]);break;case 2:e(i[0],i[1]);break;case 3:e(i[0],i[1],i[2]);break;default:e.apply(undefined,i)}}(e)}finally{p(t),d=!1}}}}}(typeof self>"u"?void 0===t?this:t:self)}).call(this,i(0),i(7))},function(t,e){var i,n,s=t.exports={};function o(){throw new Error("setTimeout has not been defined")}function r(){throw new Error("clearTimeout has not been defined")}function a(t){if(i===setTimeout)return setTimeout(t,0);if((i===o||!i)&&setTimeout)return i=setTimeout,setTimeout(t,0);try{return i(t,0)}catch{try{return i.call(null,t,0)}catch{return i.call(this,t,0)}}}!function(){try{i="function"==typeof setTimeout?setTimeout:o}catch{i=o}try{n="function"==typeof clearTimeout?clearTimeout:r}catch{n=r}}();var l,c=[],d=!1,h=-1;function u(){d&&l&&(d=!1,l.length?c=l.concat(c):h=-1,c.length&&p())}function p(){if(!d){var t=a(u);d=!0;for(var e=c.length;e;){for(l=c,c=[];++h<e;)l&&l[h].run();h=-1,e=c.length}l=null,d=!1,function(t){if(n===clearTimeout)return clearTimeout(t);if((n===r||!n)&&clearTimeout)return n=clearTimeout,clearTimeout(t);try{n(t)}catch{try{return n.call(null,t)}catch{return n.call(this,t)}}}(t)}}function g(t,e){this.fun=t,this.array=e}function f(){}s.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var i=1;i<arguments.length;i++)e[i-1]=arguments[i];c.push(new g(t,e)),1!==c.length||d||a(p)},g.prototype.run=function(){this.fun.apply(null,this.array)},s.title="browser",s.browser=!0,s.env={},s.argv=[],s.version="",s.versions={},s.on=f,s.addListener=f,s.once=f,s.off=f,s.removeListener=f,s.removeAllListeners=f,s.emit=f,s.prependListener=f,s.prependOnceListener=f,s.listeners=function(t){return[]},s.binding=function(t){throw new Error("process.binding is not supported")},s.cwd=function(){return"/"},s.chdir=function(t){throw new Error("process.chdir is not supported")},s.umask=function(){return 0}},function(t,e,i){function n(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var s=i(9);t.exports=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}var e,i;return e=t,i=[{key:"urlEncode",value:function(t){return s(t)}},{key:"jsonEncode",value:function(t){return JSON.stringify(t)}},{key:"formEncode",value:function(t){if(this.isFormData(t))return t;if(this.isFormElement(t))return new FormData(t);if(this.isObject(t)){var e=new FormData;return Object.keys(t).forEach((function(i){var n=t[i];e.append(i,n)})),e}throw new Error("`data` must be an instance of Object, FormData or <FORM> HTMLElement")}},{key:"isObject",value:function(t){return"[object Object]"===Object.prototype.toString.call(t)}},{key:"isFormData",value:function(t){return t instanceof FormData}},{key:"isFormElement",value:function(t){return t instanceof HTMLFormElement}},{key:"selectFiles",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return new Promise((function(e,i){var n=document.createElement("INPUT");n.type="file",t.multiple&&n.setAttribute("multiple","multiple"),t.accept&&n.setAttribute("accept",t.accept),n.style.display="none",document.body.appendChild(n),n.addEventListener("change",(function(t){var i=t.target.files;e(i),document.body.removeChild(n)}),!1),n.click()}))}},{key:"parseHeaders",value:function(t){var e=t.trim().split(/[\r\n]+/),i={};return e.forEach((function(t){var e=t.split(": "),n=e.shift(),s=e.join(": ");n&&(i[n]=s)})),i}}],null&&n(e.prototype,null),i&&n(e,i),t}()},function(t,e){var i=function(t){return encodeURIComponent(t).replace(/[!'()*]/g,escape).replace(/%20/g,"+")},n=function(t,e,s,o){return e=e||null,s=s||"&",o=o||null,t?function(t){for(var e=new Array,i=0;i<t.length;i++)t[i]&&e.push(t[i]);return e}(Object.keys(t).map((function(r){var a,l,c=r;if(o&&(c=o+"["+c+"]"),"object"==typeof t[r]&&null!==t[r])a=n(t[r],null,s,c);else{e&&(l=c,c=!isNaN(parseFloat(l))&&isFinite(l)?e+Number(c):c);var d=t[r];d=(d=0===(d=!1===(d=!0===d?"1":d)?"0":d)?"0":d)||"",a=i(c)+"="+i(d)}return a}))).join(s).replace(/[!'()*]/g,""):""};t.exports=n}])},s.exports=n();const o=(r=s.exports)&&r.__esModule&&Object.prototype.hasOwnProperty.call(r,"default")?r.default:r;var r;function a(t){return t&&"function"==typeof t.then}class l{constructor({config:t,onUpload:e,onError:i}){this.config=t,this.onUpload=e,this.onError=i}uploadSelectedFile({onPreview:t}){const e=function(e){const i=new FileReader;i.readAsDataURL(e),i.onload=e=>{t(e.target.result)}};let i;i=this.config.uploader&&"function"==typeof this.config.uploader.uploadByFile?o.selectFiles({accept:this.config.types}).then((t=>{e(t[0]);const i=this.config.uploader.uploadByFile(t[0]);return a(i)||console.warn("Custom uploader method uploadByFile should return a Promise"),i})):o.transport({url:this.config.endpoints.byFile,data:this.config.additionalRequestData,accept:this.config.types,headers:this.config.additionalRequestHeaders,beforeSend:t=>{e(t[0])},fieldName:this.config.field}).then((t=>t.body)),i.then((t=>{this.onUpload(t)})).catch((t=>{this.onError(t)}))}uploadByUrl(t){let e;this.config.uploader&&"function"==typeof this.config.uploader.uploadByUrl?(e=this.config.uploader.uploadByUrl(t),a(e)||console.warn("Custom uploader method uploadByUrl should return a Promise")):e=o.post({url:this.config.endpoints.byUrl,data:Object.assign({url:t},this.config.additionalRequestData),type:o.contentType.JSON,headers:this.config.additionalRequestHeaders}).then((t=>t.body)),e.then((t=>{this.onUpload(t)})).catch((t=>{this.onError(t)}))}uploadByFile(t,{onPreview:e}){const i=new FileReader;let n;if(i.readAsDataURL(t),i.onload=t=>{e(t.target.result)},this.config.uploader&&"function"==typeof this.config.uploader.uploadByFile)n=this.config.uploader.uploadByFile(t),a(n)||console.warn("Custom uploader method uploadByFile should return a Promise");else{const e=new FormData;e.append(this.config.field,t),this.config.additionalRequestData&&Object.keys(this.config.additionalRequestData).length&&Object.entries(this.config.additionalRequestData).forEach((([t,i])=>{e.append(t,i)})),n=o.post({url:this.config.endpoints.byFile,data:e,type:o.contentType.JSON,headers:this.config.additionalRequestHeaders}).then((t=>t.body))}n.then((t=>{this.onUpload(t)})).catch((t=>{this.onError(t)}))}}class c{static get isReadOnlySupported(){return!0}static get toolbox(){return{icon:t,title:"Image"}}static get tunes(){return[{name:"withBorder",icon:'<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M18.9919 9.5H19.0015"/><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.5 5H14.5096"/><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M14.625 5H15C17.2091 5 19 6.79086 19 9V9.375"/><path stroke="currentColor" stroke-width="2" d="M9.375 5L9 5C6.79086 5 5 6.79086 5 9V9.375"/><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.3725 5H9.38207"/><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 9.5H5.00957"/><path stroke="currentColor" stroke-width="2" d="M9.375 19H9C6.79086 19 5 17.2091 5 15V14.625"/><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.3725 19H9.38207"/><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 14.55H5.00957"/><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M16 13V16M16 19V16M19 16H16M16 16H13"/></svg>',title:"With border",toggle:!0},{name:"stretched",icon:'<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 9L20 12L17 15"/><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14 12H20"/><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 9L4 12L7 15"/><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 12H10"/></svg>',title:"Stretch image",toggle:!0},{name:"withBackground",icon:'<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 19V19C9.13623 19 8.20435 19 7.46927 18.6955C6.48915 18.2895 5.71046 17.5108 5.30448 16.5307C5 15.7956 5 14.8638 5 13V12C5 9.19108 5 7.78661 5.67412 6.77772C5.96596 6.34096 6.34096 5.96596 6.77772 5.67412C7.78661 5 9.19108 5 12 5H13.5C14.8956 5 15.5933 5 16.1611 5.17224C17.4395 5.56004 18.44 6.56046 18.8278 7.83886C19 8.40666 19 9.10444 19 10.5V10.5"/><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M16 13V16M16 19V16M19 16H16M16 16H13"/><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6.5 17.5L17.5 6.5"/><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M18.9919 10.5H19.0015"/><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.9919 19H11.0015"/><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13L13 5"/></svg>',title:"With background",toggle:!0}]}constructor({data:t,config:e,api:n,readOnly:s,block:o}){this.api=n,this.readOnly=s,this.block=o,this.config={endpoints:e.endpoints||"",additionalRequestData:e.additionalRequestData||{},additionalRequestHeaders:e.additionalRequestHeaders||{},field:e.field||"image",types:e.types||"image/*",captionPlaceholder:this.api.i18n.t(e.captionPlaceholder||"Caption"),buttonContent:e.buttonContent||"",uploader:e.uploader||void 0,actions:e.actions||[]},this.uploader=new l({config:this.config,onUpload:t=>this.onUpload(t),onError:t=>this.uploadingFailed(t)}),this.ui=new i({api:n,config:this.config,onSelectFile:()=>{this.uploader.uploadSelectedFile({onPreview:t=>{this.ui.showPreloader(t)}})},readOnly:s}),this._data={},this.data=t}render(){return this.ui.render(this.data)}validate(t){return t.file&&t.file.url}save(){const t=this.ui.nodes.caption;return this._data.caption=t.innerHTML,this.data}renderSettings(){return c.tunes.concat(this.config.actions).map((t=>({icon:t.icon,label:this.api.i18n.t(t.title),name:t.name,toggle:t.toggle,isActive:this.data[t.name],onActivate:()=>{"function"!=typeof t.action?this.tuneToggled(t.name):t.action(t.name)}})))}appendCallback(){this.ui.nodes.fileButton.click()}static get pasteConfig(){return{tags:[{img:{src:!0}}],patterns:{image:/https?:\/\/\S+\.(gif|jpe?g|tiff|png|svg|webp)(\?[a-z0-9=]*)?$/i},files:{mimeTypes:["image/*"]}}}async onPaste(t){switch(t.type){case"tag":{const e=t.detail.data;if(/^blob:/.test(e.src)){const t=await(await fetch(e.src)).blob();this.uploadFile(t);break}this.uploadUrl(e.src);break}case"pattern":{const e=t.detail.data;this.uploadUrl(e);break}case"file":{const e=t.detail.file;this.uploadFile(e);break}}}set data(t){this.image=t.file,this._data.caption=t.caption||"",this.ui.fillCaption(this._data.caption),c.tunes.forEach((({name:e})=>{const i=typeof t[e]<"u"&&(!0===t[e]||"true"===t[e]);this.setTune(e,i)}))}get data(){return this._data}set image(t){this._data.file=t||{},t&&t.url&&this.ui.fillImage(t.url)}onUpload(t){t.success&&t.file?this.image=t.file:this.uploadingFailed("incorrect response: "+JSON.stringify(t))}uploadingFailed(t){console.log("Image Tool: uploading failed because of",t),this.api.notifier.show({message:this.api.i18n.t("Couldn’t upload image. Please try another."),style:"error"}),this.ui.hidePreloader()}tuneToggled(t){this.setTune(t,!this._data[t])}setTune(t,e){this._data[t]=e,this.ui.applyTune(t,e),"stretched"===t&&Promise.resolve().then((()=>{this.block.stretched=e})).catch((t=>{console.error(t)}))}uploadFile(t){this.uploader.uploadByFile(t,{onPreview:t=>{this.ui.showPreloader(t)}})}uploadUrl(t){this.ui.showPreloader(t),this.uploader.uploadByUrl(t)}}return c}()},752:function(t){!function(){"use strict";try{if(typeof document<"u"){var t=document.createElement("style");t.appendChild(document.createTextNode(".cdx-list{margin:0;padding-left:40px;outline:none}.cdx-list__item{padding:5.5px 0 5.5px 3px;line-height:1.6em}.cdx-list--unordered{list-style:disc}.cdx-list--ordered{list-style:decimal}.cdx-list-settings{display:flex}.cdx-list-settings .cdx-settings-button{width:50%}")),document.head.appendChild(t)}}catch(t){console.error("vite-plugin-css-injected-by-js",t)}}(),t.exports=function(){"use strict";const t='<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><line x1="9" x2="19" y1="7" y2="7" stroke="currentColor" stroke-linecap="round" stroke-width="2"/><line x1="9" x2="19" y1="12" y2="12" stroke="currentColor" stroke-linecap="round" stroke-width="2"/><line x1="9" x2="19" y1="17" y2="17" stroke="currentColor" stroke-linecap="round" stroke-width="2"/><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M5.00001 17H4.99002"/><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M5.00001 12H4.99002"/><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M5.00001 7H4.99002"/></svg>';return class{static get isReadOnlySupported(){return!0}static get enableLineBreaks(){return!0}static get toolbox(){return{icon:t,title:"List"}}constructor({data:e,config:i,api:n,readOnly:s}){this._elements={wrapper:null},this.api=n,this.readOnly=s,this.settings=[{name:"unordered",label:this.api.i18n.t("Unordered"),icon:t,default:"unordered"===i.defaultStyle||!1},{name:"ordered",label:this.api.i18n.t("Ordered"),icon:'<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><line x1="12" x2="19" y1="7" y2="7" stroke="currentColor" stroke-linecap="round" stroke-width="2"/><line x1="12" x2="19" y1="12" y2="12" stroke="currentColor" stroke-linecap="round" stroke-width="2"/><line x1="12" x2="19" y1="17" y2="17" stroke="currentColor" stroke-linecap="round" stroke-width="2"/><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M7.79999 14L7.79999 7.2135C7.79999 7.12872 7.7011 7.0824 7.63597 7.13668L4.79999 9.5"/></svg>',default:"ordered"===i.defaultStyle||!0}],this._data={style:this.settings.find((t=>!0===t.default)).name,items:[]},this.data=e}render(){return this._elements.wrapper=this.makeMainTag(this._data.style),this._data.items.length?this._data.items.forEach((t=>{this._elements.wrapper.appendChild(this._make("li",this.CSS.item,{innerHTML:t}))})):this._elements.wrapper.appendChild(this._make("li",this.CSS.item)),this.readOnly||this._elements.wrapper.addEventListener("keydown",(t=>{const[e,i]=[13,8];switch(t.keyCode){case e:this.getOutofList(t);break;case i:this.backspace(t)}}),!1),this._elements.wrapper}save(){return this.data}static get conversionConfig(){return{export:t=>t.items.join(". "),import:t=>({items:[t],style:"unordered"})}}static get sanitize(){return{style:{},items:{br:!0}}}renderSettings(){return this.settings.map((t=>({...t,isActive:this._data.style===t.name,closeOnActivate:!0,onActivate:()=>this.toggleTune(t.name)})))}onPaste(t){const e=t.detail.data;this.data=this.pasteHandler(e)}static get pasteConfig(){return{tags:["OL","UL","LI"]}}makeMainTag(t){const e="ordered"===t?this.CSS.wrapperOrdered:this.CSS.wrapperUnordered,i="ordered"===t?"ol":"ul";return this._make(i,[this.CSS.baseBlock,this.CSS.wrapper,e],{contentEditable:!this.readOnly})}toggleTune(t){const e=this.makeMainTag(t);for(;this._elements.wrapper.hasChildNodes();)e.appendChild(this._elements.wrapper.firstChild);this._elements.wrapper.replaceWith(e),this._elements.wrapper=e,this._data.style=t}get CSS(){return{baseBlock:this.api.styles.block,wrapper:"cdx-list",wrapperOrdered:"cdx-list--ordered",wrapperUnordered:"cdx-list--unordered",item:"cdx-list__item"}}set data(t){t||(t={}),this._data.style=t.style||this.settings.find((t=>!0===t.default)).name,this._data.items=t.items||[];const e=this._elements.wrapper;e&&e.parentNode.replaceChild(this.render(),e)}get data(){this._data.items=[];const t=this._elements.wrapper.querySelectorAll(`.${this.CSS.item}`);for(let e=0;e<t.length;e++)t[e].innerHTML.replace("<br>"," ").trim()&&this._data.items.push(t[e].innerHTML);return this._data}_make(t,e=null,i={}){const n=document.createElement(t);Array.isArray(e)?n.classList.add(...e):e&&n.classList.add(e);for(const t in i)n[t]=i[t];return n}get currentItem(){let t=window.getSelection().anchorNode;return t.nodeType!==Node.ELEMENT_NODE&&(t=t.parentNode),t.closest(`.${this.CSS.item}`)}getOutofList(t){const e=this._elements.wrapper.querySelectorAll("."+this.CSS.item);if(e.length<2)return;const i=e[e.length-1],n=this.currentItem;n===i&&!i.textContent.trim().length&&(n.parentElement.removeChild(n),this.api.blocks.insert(),this.api.caret.setToBlock(this.api.blocks.getCurrentBlockIndex()),t.preventDefault(),t.stopPropagation())}backspace(t){const e=this._elements.wrapper.querySelectorAll("."+this.CSS.item),i=e[0];i&&e.length<2&&!i.innerHTML.replace("<br>"," ").trim()&&t.preventDefault()}selectItem(t){t.preventDefault();const e=window.getSelection(),i=e.anchorNode.parentNode.closest("."+this.CSS.item),n=new Range;n.selectNodeContents(i),e.removeAllRanges(),e.addRange(n)}pasteHandler(t){const{tagName:e}=t;let i;switch(e){case"OL":i="ordered";break;case"UL":case"LI":i="unordered"}const n={style:i,items:[]};if("LI"===e)n.items=[t.innerHTML];else{const e=Array.from(t.querySelectorAll("LI"));n.items=e.map((t=>t.innerHTML)).filter((t=>!!t.trim()))}return n}}}()},371:function(t){!function(){"use strict";try{if(typeof document<"u"){var t=document.createElement("style");t.appendChild(document.createTextNode(".cdx-quote-icon svg{transform:rotate(180deg)}.cdx-quote{margin:0}.cdx-quote__text{min-height:158px;margin-bottom:10px}.cdx-quote [contentEditable=true][data-placeholder]:before{position:absolute;content:attr(data-placeholder);color:#707684;font-weight:400;opacity:0}.cdx-quote [contentEditable=true][data-placeholder]:empty:before{opacity:1}.cdx-quote [contentEditable=true][data-placeholder]:empty:focus:before{opacity:0}.cdx-quote-settings{display:flex}.cdx-quote-settings .cdx-settings-button{width:50%}")),document.head.appendChild(t)}}catch(t){console.error("vite-plugin-css-injected-by-js",t)}}(),t.exports=function(){"use strict";class t{static get isReadOnlySupported(){return!0}static get toolbox(){return{icon:'<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 10.8182L9 10.8182C8.80222 10.8182 8.60888 10.7649 8.44443 10.665C8.27998 10.5651 8.15181 10.4231 8.07612 10.257C8.00043 10.0909 7.98063 9.90808 8.01922 9.73174C8.0578 9.55539 8.15304 9.39341 8.29289 9.26627C8.43275 9.13913 8.61093 9.05255 8.80491 9.01747C8.99889 8.98239 9.19996 9.00039 9.38268 9.0692C9.56541 9.13801 9.72159 9.25453 9.83147 9.40403C9.94135 9.55353 10 9.72929 10 9.90909L10 12.1818C10 12.664 9.78929 13.1265 9.41421 13.4675C9.03914 13.8084 8.53043 14 8 14"/><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 10.8182L15 10.8182C14.8022 10.8182 14.6089 10.7649 14.4444 10.665C14.28 10.5651 14.1518 10.4231 14.0761 10.257C14.0004 10.0909 13.9806 9.90808 14.0192 9.73174C14.0578 9.55539 14.153 9.39341 14.2929 9.26627C14.4327 9.13913 14.6109 9.05255 14.8049 9.01747C14.9989 8.98239 15.2 9.00039 15.3827 9.0692C15.5654 9.13801 15.7216 9.25453 15.8315 9.40403C15.9414 9.55353 16 9.72929 16 9.90909L16 12.1818C16 12.664 15.7893 13.1265 15.4142 13.4675C15.0391 13.8084 14.5304 14 14 14"/></svg>',title:"Quote"}}static get contentless(){return!0}static get enableLineBreaks(){return!0}static get DEFAULT_QUOTE_PLACEHOLDER(){return"Enter a quote"}static get DEFAULT_CAPTION_PLACEHOLDER(){return"Enter a caption"}static get ALIGNMENTS(){return{left:"left",center:"center"}}static get DEFAULT_ALIGNMENT(){return t.ALIGNMENTS.left}static get conversionConfig(){return{import:"text",export:function(t){return t.caption?`${t.text} — ${t.caption}`:t.text}}}get CSS(){return{baseClass:this.api.styles.block,wrapper:"cdx-quote",text:"cdx-quote__text",input:this.api.styles.input,caption:"cdx-quote__caption"}}get settings(){return[{name:"left",icon:'<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M17 7L5 7"/><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M17 17H5"/><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M13 12L5 12"/></svg>'},{name:"center",icon:'<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M18 7L6 7"/><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M18 17H6"/><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M16 12L8 12"/></svg>'}]}constructor({data:e,config:i,api:n,readOnly:s}){const{ALIGNMENTS:o,DEFAULT_ALIGNMENT:r}=t;this.api=n,this.readOnly=s,this.quotePlaceholder=i.quotePlaceholder||t.DEFAULT_QUOTE_PLACEHOLDER,this.captionPlaceholder=i.captionPlaceholder||t.DEFAULT_CAPTION_PLACEHOLDER,this.data={text:e.text||"",caption:e.caption||"",alignment:Object.values(o).includes(e.alignment)&&e.alignment||i.defaultAlignment||r}}render(){const t=this._make("blockquote",[this.CSS.baseClass,this.CSS.wrapper]),e=this._make("div",[this.CSS.input,this.CSS.text],{contentEditable:!this.readOnly,innerHTML:this.data.text}),i=this._make("div",[this.CSS.input,this.CSS.caption],{contentEditable:!this.readOnly,innerHTML:this.data.caption});return e.dataset.placeholder=this.quotePlaceholder,i.dataset.placeholder=this.captionPlaceholder,t.appendChild(e),t.appendChild(i),t}save(t){const e=t.querySelector(`.${this.CSS.text}`),i=t.querySelector(`.${this.CSS.caption}`);return Object.assign(this.data,{text:e.innerHTML,caption:i.innerHTML})}static get sanitize(){return{text:{br:!0},caption:{br:!0},alignment:{}}}renderSettings(){const t=t=>t[0].toUpperCase()+t.substr(1);return this.settings.map((e=>({icon:e.icon,label:this.api.i18n.t(`Align ${t(e.name)}`),onActivate:()=>this._toggleTune(e.name),isActive:this.data.alignment===e.name,closeOnActivate:!0})))}_toggleTune(t){this.data.alignment=t}_make(t,e=null,i={}){const n=document.createElement(t);Array.isArray(e)?n.classList.add(...e):e&&n.classList.add(e);for(const t in i)n[t]=i[t];return n}}return t}()},176:t=>{var e;self,e=()=>(()=>{var t={757:(t,e,i)=>{t.exports=i(666)},666:t=>{var e=function(t){"use strict";var e,i=Object.prototype,n=i.hasOwnProperty,s="function"==typeof Symbol?Symbol:{},o=s.iterator||"@@iterator",r=s.asyncIterator||"@@asyncIterator",a=s.toStringTag||"@@toStringTag";function l(t,e,i){return Object.defineProperty(t,e,{value:i,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{l({},"")}catch(t){l=function(t,e,i){return t[e]=i}}function c(t,e,i,n){var s=e&&e.prototype instanceof m?e:m,o=Object.create(s.prototype),r=new T(n||[]);return o._invoke=function(t,e,i){var n=h;return function(s,o){if(n===p)throw new Error("Generator is already running");if(n===g){if("throw"===s)throw o;return I()}for(i.method=s,i.arg=o;;){var r=i.delegate;if(r){var a=A(r,i);if(a){if(a===f)continue;return a}}if("next"===i.method)i.sent=i._sent=i.arg;else if("throw"===i.method){if(n===h)throw n=g,i.arg;i.dispatchException(i.arg)}else"return"===i.method&&i.abrupt("return",i.arg);n=p;var l=d(t,e,i);if("normal"===l.type){if(n=i.done?g:u,l.arg===f)continue;return{value:l.arg,done:i.done}}"throw"===l.type&&(n=g,i.method="throw",i.arg=l.arg)}}}(t,i,r),o}function d(t,e,i){try{return{type:"normal",arg:t.call(e,i)}}catch(t){return{type:"throw",arg:t}}}t.wrap=c;var h="suspendedStart",u="suspendedYield",p="executing",g="completed",f={};function m(){}function b(){}function v(){}var y={};l(y,o,(function(){return this}));var w=Object.getPrototypeOf,k=w&&w(w(M([])));k&&k!==i&&n.call(k,o)&&(y=k);var x=v.prototype=m.prototype=Object.create(y);function E(t){["next","throw","return"].forEach((function(e){l(t,e,(function(t){return this._invoke(e,t)}))}))}function C(t,e){function i(s,o,r,a){var l=d(t[s],t,o);if("throw"!==l.type){var c=l.arg,h=c.value;return h&&"object"==typeof h&&n.call(h,"__await")?e.resolve(h.__await).then((function(t){i("next",t,r,a)}),(function(t){i("throw",t,r,a)})):e.resolve(h).then((function(t){c.value=t,r(c)}),(function(t){return i("throw",t,r,a)}))}a(l.arg)}var s;this._invoke=function(t,n){function o(){return new e((function(e,s){i(t,n,e,s)}))}return s=s?s.then(o,o):o()}}function A(t,i){var n=t.iterator[i.method];if(n===e){if(i.delegate=null,"throw"===i.method){if(t.iterator.return&&(i.method="return",i.arg=e,A(t,i),"throw"===i.method))return f;i.method="throw",i.arg=new TypeError("The iterator does not provide a 'throw' method")}return f}var s=d(n,t.iterator,i.arg);if("throw"===s.type)return i.method="throw",i.arg=s.arg,i.delegate=null,f;var o=s.arg;return o?o.done?(i[t.resultName]=o.value,i.next=t.nextLoc,"return"!==i.method&&(i.method="next",i.arg=e),i.delegate=null,f):o:(i.method="throw",i.arg=new TypeError("iterator result is not an object"),i.delegate=null,f)}function S(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function _(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function T(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(S,this),this.reset(!0)}function M(t){if(t){var i=t[o];if(i)return i.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var s=-1,r=function i(){for(;++s<t.length;)if(n.call(t,s))return i.value=t[s],i.done=!1,i;return i.value=e,i.done=!0,i};return r.next=r}}return{next:I}}function I(){return{value:e,done:!0}}return b.prototype=v,l(x,"constructor",v),l(v,"constructor",b),b.displayName=l(v,a,"GeneratorFunction"),t.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===b||"GeneratorFunction"===(e.displayName||e.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,v):(t.__proto__=v,l(t,a,"GeneratorFunction")),t.prototype=Object.create(x),t},t.awrap=function(t){return{__await:t}},E(C.prototype),l(C.prototype,r,(function(){return this})),t.AsyncIterator=C,t.async=function(e,i,n,s,o){void 0===o&&(o=Promise);var r=new C(c(e,i,n,s),o);return t.isGeneratorFunction(i)?r:r.next().then((function(t){return t.done?t.value:r.next()}))},E(x),l(x,a,"Generator"),l(x,o,(function(){return this})),l(x,"toString",(function(){return"[object Generator]"})),t.keys=function(t){var e=[];for(var i in t)e.push(i);return e.reverse(),function i(){for(;e.length;){var n=e.pop();if(n in t)return i.value=n,i.done=!1,i}return i.done=!0,i}},t.values=M,T.prototype={constructor:T,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(_),!t)for(var i in this)"t"===i.charAt(0)&&n.call(this,i)&&!isNaN(+i.slice(1))&&(this[i]=e)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var i=this;function s(n,s){return a.type="throw",a.arg=t,i.next=n,s&&(i.method="next",i.arg=e),!!s}for(var o=this.tryEntries.length-1;o>=0;--o){var r=this.tryEntries[o],a=r.completion;if("root"===r.tryLoc)return s("end");if(r.tryLoc<=this.prev){var l=n.call(r,"catchLoc"),c=n.call(r,"finallyLoc");if(l&&c){if(this.prev<r.catchLoc)return s(r.catchLoc,!0);if(this.prev<r.finallyLoc)return s(r.finallyLoc)}else if(l){if(this.prev<r.catchLoc)return s(r.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<r.finallyLoc)return s(r.finallyLoc)}}}},abrupt:function(t,e){for(var i=this.tryEntries.length-1;i>=0;--i){var s=this.tryEntries[i];if(s.tryLoc<=this.prev&&n.call(s,"finallyLoc")&&this.prev<s.finallyLoc){var o=s;break}}o&&("break"===t||"continue"===t)&&o.tryLoc<=e&&e<=o.finallyLoc&&(o=null);var r=o?o.completion:{};return r.type=t,r.arg=e,o?(this.method="next",this.next=o.finallyLoc,f):this.complete(r)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),f},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var i=this.tryEntries[e];if(i.finallyLoc===t)return this.complete(i.completion,i.afterLoc),_(i),f}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var i=this.tryEntries[e];if(i.tryLoc===t){var n=i.completion;if("throw"===n.type){var s=n.arg;_(i)}return s}}throw new Error("illegal catch attempt")},delegateYield:function(t,i,n){return this.delegate={iterator:M(t),resultName:i,nextLoc:n},"next"===this.method&&(this.arg=e),f}},t}(t.exports);try{regeneratorRuntime=e}catch(t){"object"==typeof globalThis?globalThis.regeneratorRuntime=e:Function("r","regeneratorRuntime = r")(e)}},571:function(t,e){var i,n;i=function(t){"use strict";var e=function(){function t(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,i,n){return i&&t(e.prototype,i),n&&t(e,n),e}}(),i=function(){function t(e){(function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")})(this,t),this.target=e,this.isContentEditable=e&&e.contentEditable}return e(t,[{key:"getPos",value:function(){if(document.activeElement!==this.target)return-1;if(this.isContentEditable){this.target.focus();var t=document.getSelection().getRangeAt(0),e=t.cloneRange();return e.selectNodeContents(this.target),e.setEnd(t.endContainer,t.endOffset),e.toString().length}return this.target.selectionStart}},{key:"setPos",value:function(t){if(this.isContentEditable){if(t>=0){var e=window.getSelection(),i=this.createRange(this.target,{count:t});i&&(i.collapse(!1),e.removeAllRanges(),e.addRange(i))}}else this.target.setSelectionRange(t,t)}},{key:"createRange",value:function(t,e,i){if(i||((i=document.createRange()).selectNode(t),i.setStart(t,0)),0===e.count)i.setEnd(t,e.count);else if(t&&e.count>0)if(t.nodeType===Node.TEXT_NODE)t.textContent.length<e.count?e.count-=t.textContent.length:(i.setEnd(t,e.count),e.count=0);else for(var n=0;n<t.childNodes.length&&(i=this.createRange(t.childNodes[n],e,i),0!==e.count);n++);return i}}]),t}();t.exports=i},void 0===(n=i.apply(e,[t]))||(t.exports=n)},334:(t,e,i)=>{t.exports=i(571)}},e={};function i(n){var s=e[n];if(void 0!==s)return s.exports;var o=e[n]={exports:{}};return t[n].call(o.exports,o,o.exports,i),o.exports}i.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return i.d(e,{a:e}),e},i.d=(t,e)=>{for(var n in e)i.o(e,n)&&!i.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},i.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e);var n={};return(()=>{"use strict";function t(t,e,i,n,s,o,r){try{var a=t[o](r),l=a.value}catch(t){return void i(t)}a.done?e(l):Promise.resolve(l).then(n,s)}function e(e){return function(){var i=this,n=arguments;return new Promise((function(s,o){var r=e.apply(i,n);function a(e){t(r,s,o,a,l,"next",e)}function l(e){t(r,s,o,a,l,"throw",e)}a(void 0)}))}}function s(t,e,i){return e in t?Object.defineProperty(t,e,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[e]=i,t}function o(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function r(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function a(t,e,i){return e&&r(t.prototype,e),i&&r(t,i),Object.defineProperty(t,"prototype",{writable:!1}),t}i.d(n,{default:()=>f});var l=i(757),c=i.n(l),d=i(334),h=i.n(d),u=function(){function t(e,i,n){o(this,t),this.holder=i,this.observer=null,this.debounceTimer=n,this.mutationDebouncer=this.debounce((function(){e()}),this.debounceTimer)}return a(t,[{key:"setMutationObserver",value:function(){var t=this,e=this.holder.querySelector(".codex-editor__redactor");this.observer=new MutationObserver((function(e){t.mutationHandler(e)})),this.observer.observe(e,{childList:!0,attributes:!0,subtree:!0,characterData:!0,characterDataOldValue:!0})}},{key:"mutationHandler",value:function(t){var e=this,i=!1;t.forEach((function(t){switch(t.type){case"childList":t.target===e.holder?e.onDestroy():i=!0;break;case"characterData":i=!0;break;case"attributes":t.target.classList.contains("ce-block")||t.target.classList.contains("tc-toolbox")||(i=!0)}})),i&&this.mutationDebouncer()}},{key:"debounce",value:function(t,e){var i,n=this;return function(){for(var s=arguments.length,o=new Array(s),r=0;r<s;r++)o[r]=arguments[r];var a=n;clearTimeout(i),i=setTimeout((function(){return t.apply(a,o)}),e)}}},{key:"onDestroy",value:function(){var t=new CustomEvent("destroy");document.dispatchEvent(t),this.observer.disconnect()}}]),t}();function p(t,e){var i=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),i.push.apply(i,n)}return i}function g(t){for(var e=1;e<arguments.length;e++){var i=null!=arguments[e]?arguments[e]:{};e%2?p(Object(i),!0).forEach((function(e){s(t,e,i[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(i)):p(Object(i)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(i,e))}))}return t}var f=function(){function t(e){var i=this,n=e.editor,s=e.config,r=void 0===s?{}:s,a=e.onUpdate,l=e.maxLength;o(this,t);var c={maxLength:30,onUpdate:function(){},config:{debounceTimer:200,shortcuts:{undo:["CMD+Z"],redo:["CMD+Y","CMD+SHIFT+Z"]}}},d=n.blocks,h=n.caret,p=n.configuration,f=p.holder,m=p.defaultBlock,b=c.config.shortcuts,v=r.shortcuts,y=g(g({},b),v),w=Array.isArray(y.undo)?y.undo:[y.undo],k=Array.isArray(y.redo)?y.redo:[y.redo],x=c.config.debounceTimer,E=r.debounceTimer,C=void 0===E?x:E;this.holder="string"==typeof f?document.getElementById(f):f,this.editor=n,this.defaultBlock=m,this.blocks=d,this.caret=h,this.shouldSaveHistory=!0,this.readOnly=p.readOnly,this.maxLength=l||c.maxLength,this.onUpdate=a||c.onUpdate,this.config={debounceTimer:C,shortcuts:{undo:w,redo:k}},new u((function(){return i.registerChange()}),this.holder,this.config.debounceTimer).setMutationObserver(),this.setEventListeners(),this.initialItem=null,this.clear()}var i,n,s;return a(t,[{key:"truncate",value:function(t,e){for(;t.length>e;)t.shift()}},{key:"initialize",value:function(t){var e="blocks"in t?t.blocks:t,i={index:e.length-1,state:e};this.stack[0]=i,this.initialItem=i}},{key:"clear",value:function(){this.stack=this.initialItem?[this.initialItem]:[{index:0,state:[{type:this.defaultBlock,data:{}}]}],this.position=0,this.onUpdate()}},{key:"setReadOnly",value:function(){var t=this.holder.querySelector(".ce-toolbox");this.readOnly=!t}},{key:"registerChange",value:function(){var t=this;this.setReadOnly(),this.readOnly||(this.editor&&this.editor.save&&this.shouldSaveHistory&&this.editor.save().then((function(e){t.editorDidUpdate(e.blocks)&&t.save(e.blocks)})),this.shouldSaveHistory=!0)}},{key:"editorDidUpdate",value:function(t){var e=this.stack[this.position].state;return!!t.length&&(t.length!==e.length||JSON.stringify(e)!==JSON.stringify(t))}},{key:"save",value:function(t){this.position>=this.maxLength&&this.truncate(this.stack,this.maxLength),this.position=Math.min(this.position,this.stack.length-1),this.stack=this.stack.slice(0,this.position+1);var e=this.blocks.getCurrentBlockIndex(),i=this.blocks.getBlocksCount(),n=e;t[e]||(n-=i-t.length);var s=!t[n]||"paragraph"!==t[n].type&&"header"!==t[n].type?null:this.getCaretIndex(e);this.stack.push({index:n,state:t,caretIndex:s}),this.position+=1,this.onUpdate()}},{key:"getCaretIndex",value:function(t){var e=this.holder.getElementsByClassName("ce-block__content");return new(h())(e[t].firstChild).getPos()}},{key:"insertDeletedBlock",value:function(t,e,i){for(var n=0;n<t.length;n+=1)if(!e[n]||t[n].id!==e[n].id){this.blocks.insert(t[n].type,t[n].data,{},n,!0),this.caret.setToBlock(i,"end");break}}},{key:"blockWasDropped",value:function(t,e){return t.length===e.length&&t.some((function(t,i){return t.id!==e[i].id}))}},{key:"blockWasSkipped",value:function(t,e,i,n){return t<e&&i.length!==n.length}},{key:"contentChangedInNoFocusBlock",value:function(t,e){return t!==e}},{key:"blockWasDeleted",value:function(t,e){return t.length>e.length}},{key:"undo",value:(s=e(c().mark((function t(){var e,i,n,s,o,r,a,l,d,h,u;return c().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(!this.canUndo()){t.next=43;break}if(e=this.stack[this.position],i=e.index,n=e.state,this.position-=1,this.shouldSaveHistory=!1,s=this.stack[this.position].index,o=this.stack[this.position],r=o.state,a=o.caretIndex,this.onUpdate(),l=this.blocks.getBlocksCount(),r[s]||(s-=1,this.stack[this.position].index=s),!this.blockWasDeleted(r,n)){t.next=13;break}this.insertDeletedBlock(r,n,s),t.next=38;break;case 13:if(!this.blockWasSkipped(s,i,r,n)){t.next=19;break}return t.next=16,this.blocks.delete(i);case 16:this.caret.setToBlock(s,"end"),t.next=38;break;case 19:if(!(l>r.length)){t.next=27;break}return t.next=22,this.blocks.render({blocks:r});case 22:return t.next=24,this.editor.blocks.insert(this.defaultBlock,{});case 24:this.setCaretIndex(s,a),t.next=38;break;case 27:if(!this.blockWasDropped(r,n)){t.next=33;break}return t.next=30,this.blocks.render({blocks:r});case 30:this.caret.setToBlock(s,"end"),t.next=38;break;case 33:if(!this.contentChangedInNoFocusBlock(s,i)){t.next=38;break}return d=this.blocks.getBlockByIndex(i),h=d.id,t.next=37,this.blocks.update(h,r[i].data);case 37:this.setCaretIndex(s,a);case 38:if(!(u=this.blocks.getBlockByIndex(s))){t.next=43;break}return t.next=42,this.blocks.update(u.id,r[s].data);case 42:this.setCaretIndex(s,a);case 43:case"end":return t.stop()}}),t,this)}))),function(){return s.apply(this,arguments)})},{key:"setCaretIndex",value:function(t,e){if(e&&-1!==e){var i=this.holder.getElementsByClassName("ce-block__content"),n=new(h())(i[t].firstChild);setTimeout((function(){return n.setPos(e)}),50)}else this.caret.setToBlock(t,"end")}},{key:"insertBlock",value:(n=e(c().mark((function t(e,i){return c().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,this.blocks.insert(e[i].type,e[i].data,{},i,!0);case 2:case"end":return t.stop()}}),t,this)}))),function(t,e){return n.apply(this,arguments)})},{key:"insertSkippedBlocks",value:function(t,e){for(var i=t;i<e.length;i+=1)this.insertBlock(e,i)}},{key:"redo",value:(i=e(c().mark((function t(){var e,i,n,s,o,r,a,l;return c().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(!this.canRedo()){t.next=26;break}if(this.position+=1,this.shouldSaveHistory=!1,e=this.stack[this.position],i=e.index,n=e.state,s=e.caretIndex,o=this.stack[this.position-1],r=o.index,a=o.state,!this.blockWasDeleted(a,n)){t.next=11;break}return t.next=8,this.blocks.delete();case 8:this.caret.setToBlock(i,"end"),t.next=20;break;case 11:if(!this.blockWasSkipped(r,i,n,a)){t.next=16;break}this.insertSkippedBlocks(a.length,n),this.caret.setToBlock(i,"end"),t.next=20;break;case 16:if(!this.blockWasDropped(n,a)||1===this.position){t.next=20;break}return t.next=19,this.blocks.render({blocks:n});case 19:this.caret.setToBlock(i,"end");case 20:if(this.onUpdate(),!(l=this.blocks.getBlockByIndex(i))){t.next=26;break}return t.next=25,this.blocks.update(l.id,n[i].data);case 25:this.setCaretIndex(i,s);case 26:case"end":return t.stop()}}),t,this)}))),function(){return i.apply(this,arguments)})},{key:"canUndo",value:function(){return!this.readOnly&&this.position>0}},{key:"canRedo",value:function(){return!this.readOnly&&this.position<this.count()}},{key:"count",value:function(){return this.stack.length-1}},{key:"parseKeys",value:function(t){var e={CMD:/(Mac)/i.test(navigator.platform)?"metaKey":"ctrlKey",ALT:"altKey",SHIFT:"shiftKey"},i=t.slice(0,-1).map((function(t){return e[t]})),n=i.includes("shiftKey")&&2===t.length?t[t.length-1].toUpperCase():t[t.length-1].toLowerCase();return i.push(n),i}},{key:"setEventListeners",value:function(){var t=this,e=this.holder,i=this.config.shortcuts,n=i.undo,s=i.redo,o=n.map((function(t){return t.replace(/ /g,"").split("+")})),r=s.map((function(t){return t.replace(/ /g,"").split("+")})),a=o.map((function(e){return t.parseKeys(e)})),l=r.map((function(e){return t.parseKeys(e)})),c=function(t,e){return e.reduce((function(e,i){return e||function(t,e){return 3===e.length&&t[e[0]]&&t[e[1]]&&t.key.toLowerCase()===e[2]}(t,i)}),!1)},d=function(t,e,i){return!(!function(t,e){return e.reduce((function(e,i){return e||function(t,e){return 2===e.length&&t[e[0]]&&t.key.toLowerCase()===e[1]}(t,i)}),!1)}(t,e)||c(t,i))||!!c(t,e)},h=function(e){d(e,a,l)&&(e.preventDefault(),t.undo())},u=function(e){d(e,l,a)&&(e.preventDefault(),t.redo())};e.addEventListener("keydown",h),e.addEventListener("keydown",u),e.addEventListener("destroy",(function(){e.removeEventListener("keydown",h),e.removeEventListener("keydown",u)}))}}],[{key:"isReadOnlySupported",get:function(){return!0}}]),t}()})(),n.default})(),t.exports=e()},552:(t,e,i)=>{"use strict";i.d(e,{G:()=>n});var n=function(){function t(t){var e=t.api;this.button=null,this.state=!1,this.api=e}return Object.defineProperty(t,"isInline",{get:function(){return!0},enumerable:!1,configurable:!0}),t.prototype.render=function(){return this.button=document.createElement("button"),this.button.type="button",this.button.textContent="CSS",this.button.classList.add("ce-inline-tool"),this.button},t.prototype.show_create_dialog=function(t){var e=this;if(!(document.getElementsByClassName("custom-style-tool-settings").length>0)){var i=document.getElementsByClassName("ce-inline-toolbar")[0];i.insertAdjacentHTML("afterend","<div class='custom-style-tool-settings'><label>Classes:</label><input class='cdx-input' id='custom-style-tool-settings-classes' type='text' placeholder='example-class1 my-class2'><label>Inline Style (CSS):</label><textarea class='cdx-input' id='custom-style-tool-settings-inline-style' placeholder='background-color: gray;'></textarea><div style='display: flex; justify-content: space-between'><button id='custom-style-abort' class='btn btn-sm btn-secondary mt-1'>Cancel</button><button id='custom-style-save' class='btn btn-sm btn-primary mt-1'>Save</button></div></div>");var n=i.parentElement.querySelector(".custom-style-tool-settings");n.style.left=i.style.left;var s=parseInt(i.style.top,10);n.style.top=s+40+"px",document.getElementById("custom-style-abort").addEventListener("click",(function(){n.remove()})),document.getElementById("custom-style-save").addEventListener("click",(function(){var i=document.getElementById("custom-style-tool-settings-classes").value,s=document.getElementById("custom-style-tool-settings-inline-style").value,o=document.createElement("customstyle");o.setAttribute("inline-style",s),o.setAttribute("classes",i);var r=t.extractContents();o.appendChild(r),t.insertNode(o),n.remove(),e.api.selection.expandToTag(o)}))}},t.prototype.show_change_dialog=function(t){if(!(document.getElementsByClassName("custom-style-tool-settings").length>0)){var e=this.api.selection.findParentTag("CUSTOMSTYLE"),i=document.getElementsByClassName("ce-inline-toolbar")[0],n="<div class='custom-style-tool-settings'><label>Classes:</label><input class='cdx-input' id='custom-style-tool-settings-classes' type='text' placeholder='example-class1 my-class2' value="+e.getAttribute("classes")+"><label>Inline Style (CSS):</label><textarea class='cdx-input' id='custom-style-tool-settings-inline-style' placeholder='background-color: gray;'>"+e.getAttribute("inline-style")+"</textarea><div style='display: flex; justify-content: space-between'><button id='custom-style-abort' class='btn btn-sm btn-secondary mt-1'>Cancel</button><button id='custom-style-delete' class='btn btn-sm btn-danger'>Delete</button><button id='custom-style-save' class='btn btn-sm btn-primary mt-1'>Save</button></div></div>";i.insertAdjacentHTML("afterend",n);var s=i.parentElement.querySelector(".custom-style-tool-settings");s.style.left=i.style.left;var o=parseInt(i.style.top,10);s.style.top=o+40+"px",document.getElementById("custom-style-abort").addEventListener("click",(function(){s.remove()})),document.getElementById("custom-style-save").addEventListener("click",(function(){e.setAttribute("classes",document.getElementById("custom-style-tool-settings-classes").value),e.setAttribute("inline-style",document.getElementById("custom-style-tool-settings-inline-style").value),s.remove()})),document.getElementById("custom-style-delete").addEventListener("click",(function(){var i=t.extractContents();e.remove(),t.insertNode(i),s.remove()}))}},t.prototype.surround=function(t){this.state?this.show_change_dialog(t):this.show_create_dialog(t)},t.prototype.checkState=function(t){var e=t.anchorNode;if(e){var i=e instanceof Element?e:e.parentElement;this.state=!!i.closest("customstyle")}},Object.defineProperty(t,"sanitize",{get:function(){return{customstyle:function(t){return t.getAttribute("inline-style").trim().length>0||t.getAttribute("classes").trim().length>0}}},enumerable:!1,configurable:!0}),t}()},320:(t,e,i)=>{"use strict";i.d(e,{W:()=>n});var n=function(){function t(e){e.data;var i=e.api;this.button=null,this.state=!1,this.api=i,t.add_all_show_note_settings_listeners()}return Object.defineProperty(t,"isInline",{get:function(){return!0},enumerable:!1,configurable:!0}),t.add_all_show_note_settings_listeners=function(){for(var t=document.getElementsByClassName("note"),e=0;e<t.length;e++)t[e].addEventListener("click",this.show_note_settings_editor)},t.show_note_settings_editor=function(t){for(var e=this,i=0,n=document.getElementsByClassName("note-settings");i<n.length;i++)n[i].remove();var s=t.target;console.log("Got clicked by:"),console.log(s);var o=s.getAttribute("note-type"),r=s.getAttribute("note-content"),a=document.getElementsByClassName("ce-inline-toolbar")[0],l="<div class='note-settings'><label>Modify Note:</label><select id='note-type' class='form-select form-select-sm'>";l+="footnote"===o?"<option value='footnote' selected>Footnote</option><option value='endnote'>Endnote</option>":"<option value='footnote'>Footnote</option><option value='endnote' selected>Endnote</option>",l+="</select><textarea id='note-content' class='form-control form-control-sm mt-1'>"+r+"</textarea><div style='display: flex; justify-content: space-between'><button id='note-delete' class='btn btn-sm btn-danger mt-1'>Delete Note</button><button id='note-abort' class='btn btn-sm btn-secondary mt-1'>Cancel</button><button id='note-save' class='btn btn-sm btn-primary mt-1'>Save</button></div></div>",a.insertAdjacentHTML("afterend",l);var c=a.parentElement.querySelector(".note-settings");c.style.left=a.style.left;var d=parseInt(a.style.top,10);c.style.top=d+40+"px",document.getElementById("note-save").addEventListener("click",(function(){var t=document.getElementById("note-type").value,e=document.getElementById("note-content").value;s.setAttribute("note-type",t),s.setAttribute("note-content",e),s.innerHTML="footnote"===t?"F":"E",c.remove()})),document.getElementById("note-abort").addEventListener("click",(function(){c.remove()})),document.getElementById("note-delete").addEventListener("click",(function(){return t=e,i=void 0,o=function(){return function(t,e){var i,n,s,o,r={label:0,sent:function(){if(1&s[0])throw s[1];return s[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(a){return function(l){return function(a){if(i)throw new TypeError("Generator is already executing.");for(;o&&(o=0,a[0]&&(r=0)),r;)try{if(i=1,n&&(s=2&a[0]?n.return:a[0]?n.throw||((s=n.return)&&s.call(n),0):n.next)&&!(s=s.call(n,a[1])).done)return s;switch(n=0,s&&(a=[2&a[0],s.value]),a[0]){case 0:case 1:s=a;break;case 4:return r.label++,{value:a[1],done:!1};case 5:r.label++,n=a[1],a=[0];continue;case 7:a=r.ops.pop(),r.trys.pop();continue;default:if(!((s=(s=r.trys).length>0&&s[s.length-1])||6!==a[0]&&2!==a[0])){r=0;continue}if(3===a[0]&&(!s||a[1]>s[0]&&a[1]<s[3])){r.label=a[1];break}if(6===a[0]&&r.label<s[1]){r.label=s[1],s=a;break}if(s&&r.label<s[2]){r.label=s[2],r.ops.push(a);break}s[2]&&r.ops.pop(),r.trys.pop();continue}a=e.call(t,r)}catch(t){a=[6,t],n=0}finally{i=s=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,l])}}}(this,(function(t){return s.remove(),c.remove(),[2]}))},new((n=void 0)||(n=Promise))((function(e,s){function r(t){try{l(o.next(t))}catch(t){s(t)}}function a(t){try{l(o.throw(t))}catch(t){s(t)}}function l(t){var i;t.done?e(t.value):(i=t.value,i instanceof n?i:new n((function(t){t(i)}))).then(r,a)}l((o=o.apply(t,i||[])).next())}));var t,i,n,o}))},t.prototype.render=function(){return this.button=document.createElement("button"),this.button.type="button",this.button.textContent="Note",this.button.classList.add("ce-inline-tool"),this.button},t.prototype.show_note_settings=function(e){if(!(document.getElementsByClassName("note-settings").length>0)){var i=document.getElementsByClassName("ce-inline-toolbar")[0];i.insertAdjacentHTML("afterend","<div class='note-settings'><label>Add new Note:</label><select id='note-type' class='form-select form-select-sm'><option value='footnote'>Footnote</option><option value='endnote'>Endnote</option></select><textarea id='note-content' class='form-control form-control-sm mt-1'></textarea><div style='display: flex; justify-content: space-between'><button id='note-abort' class='btn btn-sm btn-secondary mt-1'>Cancel</button><button id='note-save' class='btn btn-sm btn-primary mt-1'>Save</button></div></div>");var n=i.parentElement.querySelector(".note-settings");n.style.left=i.style.left;var s=parseInt(i.style.top,10);n.style.top=s+40+"px",document.getElementById("note-save").addEventListener("click",(function(){var i=document.getElementById("note-type").value,s=document.getElementById("note-content").value,o=document.createElement("span");o.setAttribute("note-type",i),o.setAttribute("note-content",s),o.innerHTML="footnote"===i?"F":"E",o.classList.add("note"),o.addEventListener("click",t.show_note_settings_editor),e.collapse(!1),e.insertNode(o),n.remove()})),document.getElementById("note-abort").addEventListener("click",(function(){n.remove()}))}},t.prototype.surround=function(t){this.state||this.show_note_settings(t)},t.prototype.checkState=function(t){var e=t.anchorNode;if(e){var i=e instanceof Element?e:e.parentElement;this.state=!!i.closest(".note")}},Object.defineProperty(t,"sanitize",{get:function(){return{span:function(t){return!!t.classList.contains("note")&&!(!t.getAttribute("note-type")||!t.getAttribute("note-content"))&&{"note-type":t.getAttribute("note-type"),"note-content":t.getAttribute("note-content"),class:"note"}}}},enumerable:!1,configurable:!0}),t}()},428:(t,e,i)=>{"use strict";i.a(t,(async(t,n)=>{try{i.d(e,{M:()=>d});var s=i(624),o=i(600),r=t([s]);s=(r.then?(await r)():r)[0];var a=function(t,e,i,n){return new(i||(i=Promise))((function(s,o){function r(t){try{l(n.next(t))}catch(t){o(t)}}function a(t){try{l(n.throw(t))}catch(t){o(t)}}function l(t){var e;t.done?s(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(r,a)}l((n=n.apply(t,e||[])).next())}))},l=function(t,e){var i,n,s,o,r={label:0,sent:function(){if(1&s[0])throw s[1];return s[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(a){return function(l){return function(a){if(i)throw new TypeError("Generator is already executing.");for(;o&&(o=0,a[0]&&(r=0)),r;)try{if(i=1,n&&(s=2&a[0]?n.return:a[0]?n.throw||((s=n.return)&&s.call(n),0):n.next)&&!(s=s.call(n,a[1])).done)return s;switch(n=0,s&&(a=[2&a[0],s.value]),a[0]){case 0:case 1:s=a;break;case 4:return r.label++,{value:a[1],done:!1};case 5:r.label++,n=a[1],a=[0];continue;case 7:a=r.ops.pop(),r.trys.pop();continue;default:if(!((s=(s=r.trys).length>0&&s[s.length-1])||6!==a[0]&&2!==a[0])){r=0;continue}if(3===a[0]&&(!s||a[1]>s[0]&&a[1]<s[3])){r.label=a[1];break}if(6===a[0]&&r.label<s[1]){r.label=s[1],s=a;break}if(s&&r.label<s[2]){r.label=s[2],r.ops.push(a);break}s[2]&&r.ops.pop(),r.trys.pop();continue}a=e.call(t,r)}catch(t){a=[6,t],n=0}finally{i=s=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,l])}}},c=null;function d(){return a(this,void 0,void 0,(function(){var t,e;return l(this,(function(i){switch(i.label){case 0:return null!==c?[2]:(t=globalThis.project_id,document.getElementById("editor-render-preview").classList.remove("hide"),[4,(0,o.iM)(t)]);case 1:return e=i.sent().data,console.log("Rendering id is: ",e),c=setTimeout(h,250,e),[2]}}))}))}function h(t){return a(this,void 0,void 0,(function(){var e;return l(this,(function(i){switch(i.label){case 0:return[4,(0,o.Og)(t)];case 1:return e=i.sent(),console.log(e),"Queued"===e.data?console.log("Rendering is still queued"):"Preparing"===e.data?console.log("Rendering is being prepared"):"Running"===e.data?console.log("Rendering is running"):"Finished"===e.data?console.log("Rendering finished"):e.data.hasOwnProperty("Failed")&&(console.log("Rendering failed"),console.log(e.data)),"Finished"===e.data||e.data.hasOwnProperty("Failed")?[3,2]:(c=setTimeout(h,200,t),[3,4]);case 2:return c=null,[4,u(t)];case 3:i.sent(),i.label=4;case 4:return[2]}}))}))}function u(t){return a(this,void 0,void 0,(function(){function e(t,e){return a(this,void 0,void 0,(function(){var i,n;return l(this,(function(s){switch(s.label){case 0:return[4,c.getPage(t)];case 1:return i=s.sent(),n=i.getViewport({scale:o}),e.height=n.height,e.width=n.width,i.render({canvasContext:e.getContext("2d"),viewport:n}),[2]}}))}))}var i,n,o,r,c,d,h;return l(this,(function(a){switch(a.label){case 0:return i="/download/renderings/"+t,(n=document.getElementById("editor_download_pdf_btn")).classList.remove("hide"),n.href=i,o=1,(r=document.getElementById("test")).innerHTML="",[4,s.gb(i).promise];case 1:c=a.sent(),d=1,a.label=2;case 2:return d<=c.numPages?((h=document.createElement("canvas")).classList.add("pdf-page"),r.appendChild(h),[4,e(d,h)]):[3,5];case 3:a.sent(),a.label=4;case 4:return d++,[3,2];case 5:return[2]}}))}))}s.eE.workerSrc="/js/pdf.worker.mjs",n()}catch(p){n(p)}}))},600:(t,e,i)=>{"use strict";i.d(e,{Iz:()=>r,Og:()=>l,SQ:()=>o,iM:()=>a});var n=function(t,e,i,n){return new(i||(i=Promise))((function(s,o){function r(t){try{l(n.next(t))}catch(t){o(t)}}function a(t){try{l(n.throw(t))}catch(t){o(t)}}function l(t){var e;t.done?s(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(r,a)}l((n=n.apply(t,e||[])).next())}))},s=function(t,e){var i,n,s,o,r={label:0,sent:function(){if(1&s[0])throw s[1];return s[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(a){return function(l){return function(a){if(i)throw new TypeError("Generator is already executing.");for(;o&&(o=0,a[0]&&(r=0)),r;)try{if(i=1,n&&(s=2&a[0]?n.return:a[0]?n.throw||((s=n.return)&&s.call(n),0):n.next)&&!(s=s.call(n,a[1])).done)return s;switch(n=0,s&&(a=[2&a[0],s.value]),a[0]){case 0:case 1:s=a;break;case 4:return r.label++,{value:a[1],done:!1};case 5:r.label++,n=a[1],a=[0];continue;case 7:a=r.ops.pop(),r.trys.pop();continue;default:if(!((s=(s=r.trys).length>0&&s[s.length-1])||6!==a[0]&&2!==a[0])){r=0;continue}if(3===a[0]&&(!s||a[1]>s[0]&&a[1]<s[3])){r.label=a[1];break}if(6===a[0]&&r.label<s[1]){r.label=s[1],s=a;break}if(s&&r.label<s[2]){r.label=s[2],r.ops.push(a);break}s[2]&&r.ops.pop(),r.trys.pop();continue}a=e.call(t,r)}catch(t){a=[6,t],n=0}finally{i=s=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,l])}}};function o(t,e,i){return n(this,void 0,void 0,(function(){var n,o;return s(this,(function(s){switch(s.label){case 0:return[4,fetch("/api/projects/"+t+"/sections/"+e+"/content_blocks/",{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(i)})];case 1:if((n=s.sent()).ok)return[3,2];throw new Error("Failed to update content block: ".concat(n.status));case 2:return[4,n.json()];case 3:if((o=s.sent()).hasOwnProperty("error"))throw console.error(o.error),new Error("Failed to save content blocks: ".concat(o.error));return[2,o];case 4:return[2]}}))}))}function r(t,e){return n(this,void 0,void 0,(function(){var i,n;return s(this,(function(s){switch(s.label){case 0:return[4,fetch("/api/projects/"+t+"/sections/"+e+"/content_blocks/",{method:"GET",headers:{"Content-Type":"application/json"}})];case 1:if((i=s.sent()).ok)return[3,2];throw new Error("Failed to get content blocks: ".concat(i.status));case 2:return[4,i.json()];case 3:if((n=s.sent()).hasOwnProperty("error"))throw new Error("Failed to get content blocks: ".concat(n.error));return[2,n];case 4:return[2]}}))}))}function a(t){return n(this,void 0,void 0,(function(){var e,i;return s(this,(function(n){switch(n.label){case 0:return[4,fetch("/api/projects/"+t+"/render",{method:"POST",headers:{"Content-Type":"application/json"}})];case 1:if((e=n.sent()).ok)return[3,2];throw new Error("Failed to render project: ".concat(e.status));case 2:return[4,e.json()];case 3:if((i=n.sent()).hasOwnProperty("error"))throw new Error("Failed to render project: ".concat(i.error));return[2,i];case 4:return[2]}}))}))}function l(t){return n(this,void 0,void 0,(function(){var e,i;return s(this,(function(n){switch(n.label){case 0:return[4,fetch("/api/renderings/"+t+"/status",{method:"GET",headers:{"Content-Type":"application/json"}})];case 1:if((e=n.sent()).ok)return[3,2];throw new Error("Failed to render project: ".concat(e.status));case 2:return[4,e.json()];case 3:if((i=n.sent()).hasOwnProperty("error"))throw new Error("Failed to render project: ".concat(i.error));return[2,i];case 4:return[2]}}))}))}},316:(t,e,i)=>{"use strict";i.a(t,(async(t,e)=>{try{var n=i(756),s=i(776),o=i(676),r=i(320),a=i(600),l=i(812),c=i(428),d=i(552),h=t([c]);c=(h.then?(await h)():h)[0];var u=function(t,e,i,n){return new(i||(i=Promise))((function(s,o){function r(t){try{l(n.next(t))}catch(t){o(t)}}function a(t){try{l(n.throw(t))}catch(t){o(t)}}function l(t){var e;t.done?s(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(r,a)}l((n=n.apply(t,e||[])).next())}))},p=function(t,e){var i,n,s,o,r={label:0,sent:function(){if(1&s[0])throw s[1];return s[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(a){return function(l){return function(a){if(i)throw new TypeError("Generator is already executing.");for(;o&&(o=0,a[0]&&(r=0)),r;)try{if(i=1,n&&(s=2&a[0]?n.return:a[0]?n.throw||((s=n.return)&&s.call(n),0):n.next)&&!(s=s.call(n,a[1])).done)return s;switch(n=0,s&&(a=[2&a[0],s.value]),a[0]){case 0:case 1:s=a;break;case 4:return r.label++,{value:a[1],done:!1};case 5:r.label++,n=a[1],a=[0];continue;case 7:a=r.ops.pop(),r.trys.pop();continue;default:if(!((s=(s=r.trys).length>0&&s[s.length-1])||6!==a[0]&&2!==a[0])){r=0;continue}if(3===a[0]&&(!s||a[1]>s[0]&&a[1]<s[3])){r.label=a[1];break}if(6===a[0]&&r.label<s[1]){r.label=s[1],s=a;break}if(s&&r.label<s[2]){r.label=s[2],r.ops.push(a);break}s[2]&&r.ops.pop(),r.trys.pop();continue}a=e.call(t,r)}catch(t){a=[6,t],n=0}finally{i=s=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,l])}}},g=i(371),f=i(176),m=i(444),b=i(752),v=null,y=null;function w(){return u(this,void 0,void 0,(function(){var t,e,i,h;return p(this,(function(u){switch(u.label){case 0:t=!0,document.getElementById("editor_render_project_btn").addEventListener("click",c.M),u.label=1;case 1:return u.trys.push([1,4,,5]),[4,a.Iz(globalThis.project_id,globalThis.section_path)];case 2:return e=u.sent().data,console.log(e),i="/api/projects/"+globalThis.project_id+"/uploads",[4,(y=new n.c({holder:"section_content_blocks_inner",tools:{header:s.c,raw:o.c,list:{class:b,inlineToolbar:!0,config:{defaultStyle:"unordered"}},note:r.W,quote:g,custom_style_tool:d.G,image:{class:m,config:{endpoints:{byFile:i,byUrl:"/api/fetch_image"}}}},data:{blocks:e},onChange:function(e,i){t?t=!1:k()},onReady:function(){new f({editor:y}).initialize({blocks:e})}})).isReady];case 3:return u.sent(),document.getElementById("section_content_blocks_inner").addEventListener("input",x),r.W.add_all_show_note_settings_listeners(),[3,5];case 4:return h=u.sent(),console.error(h),l.Y_("Couldn't load content.","danger"),[3,5];case 5:return[2]}}))}))}function k(){return u(this,void 0,void 0,(function(){var t,e;return p(this,(function(i){switch(i.label){case 0:return[4,y.save()];case 1:t=i.sent(),console.log(t),i.label=2;case 2:return i.trys.push([2,4,,5]),[4,a.SQ(globalThis.project_id,globalThis.section_path,t.blocks)];case 3:return i.sent(),l.Y_("Saved Changes.","success"),[3,5];case 4:return e=i.sent(),console.error(e),l.Y_("Couldn't save content.","danger"),[3,5];case 5:return[2]}}))}))}function x(){v&&clearTimeout(v),v=setTimeout((function(){return u(this,void 0,void 0,(function(){return p(this,(function(t){switch(t.label){case 0:return[4,k()];case 1:return t.sent(),[2]}}))}))}),500)}window.addEventListener("load",(function(){return u(this,void 0,void 0,(function(){return p(this,(function(t){return window.show_new_editor=function(){w()},[2]}))}))})),e()}catch(E){e(E)}}))},812:(t,e,i)=>{"use strict";function n(t,e){void 0===e&&(e="danger|warning|success|info|primary|secondary|light|dark");var i=Math.floor(1e8*Math.random()),n=Handlebars.templates.alert_tmpl({message:t,type:e,id:i});document.body.insertAdjacentHTML("afterbegin",n);var s=document.getElementById("alert_"+i);s.getElementsByClassName("alert-close")[0].addEventListener("click",(function(){s.remove()})),setTimeout((function(){null!==s&&s.remove()}),5e3)}i.d(e,{Y_:()=>n})},756:(t,e,i)=>{"use strict";function n(t){return t&&t.__esModule&&Object.prototype.hasOwnProperty.call(t,"default")?t.default:t}function s(){}i.d(e,{c:()=>Ce}),typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"&&self,Object.assign(s,{default:s,register:s,revert:function(){},__esModule:!0}),Element.prototype.matches||(Element.prototype.matches=Element.prototype.matchesSelector||Element.prototype.mozMatchesSelector||Element.prototype.msMatchesSelector||Element.prototype.oMatchesSelector||Element.prototype.webkitMatchesSelector||function(t){const e=(this.document||this.ownerDocument).querySelectorAll(t);let i=e.length;for(;--i>=0&&e.item(i)!==this;);return i>-1}),Element.prototype.closest||(Element.prototype.closest=function(t){let e=this;if(!document.documentElement.contains(e))return null;do{if(e.matches(t))return e;e=e.parentElement||e.parentNode}while(null!==e);return null}),Element.prototype.prepend||(Element.prototype.prepend=function(t){const e=document.createDocumentFragment();Array.isArray(t)||(t=[t]),t.forEach((t=>{const i=t instanceof Node;e.appendChild(i?t:document.createTextNode(t))})),this.insertBefore(e,this.firstChild)}),Element.prototype.scrollIntoViewIfNeeded||(Element.prototype.scrollIntoViewIfNeeded=function(t){t=0===arguments.length||!!t;const e=this.parentNode,i=window.getComputedStyle(e,null),n=parseInt(i.getPropertyValue("border-top-width")),s=parseInt(i.getPropertyValue("border-left-width")),o=this.offsetTop-e.offsetTop<e.scrollTop,r=this.offsetTop-e.offsetTop+this.clientHeight-n>e.scrollTop+e.clientHeight,a=this.offsetLeft-e.offsetLeft<e.scrollLeft,l=this.offsetLeft-e.offsetLeft+this.clientWidth-s>e.scrollLeft+e.clientWidth,c=o&&!r;(o||r)&&t&&(e.scrollTop=this.offsetTop-e.offsetTop-e.clientHeight/2-n+this.clientHeight/2),(a||l)&&t&&(e.scrollLeft=this.offsetLeft-e.offsetLeft-e.clientWidth/2-s+this.clientWidth/2),(o||r||a||l)&&!t&&this.scrollIntoView(c)}),window.requestIdleCallback=window.requestIdleCallback||function(t){const e=Date.now();return setTimeout((function(){t({didTimeout:!1,timeRemaining:function(){return Math.max(0,50-(Date.now()-e))}})}),1)},window.cancelIdleCallback=window.cancelIdleCallback||function(t){clearTimeout(t)};var o=(t=>(t.VERBOSE="VERBOSE",t.INFO="INFO",t.WARN="WARN",t.ERROR="ERROR",t))(o||{});const r=13,a=38,l=40;function c(t,e,i="log",n,s="color: inherit"){if(!("console"in window)||!window.console[i])return;const o=["info","log","warn","error"].includes(i),r=[];switch(c.logLevel){case"ERROR":if("error"!==i)return;break;case"WARN":if(!["error","warn"].includes(i))return;break;case"INFO":if(!o||t)return}n&&r.push(n);const a="Editor.js 2.29.0";t&&(o?(r.unshift("line-height: 1em;\n            color: #006FEA;\n            display: inline-block;\n            font-size: 11px;\n            line-height: 1em;\n            background-color: #fff;\n            padding: 4px 9px;\n            border-radius: 30px;\n            border: 1px solid rgba(56, 138, 229, 0.16);\n            margin: 4px 5px 4px 0;",s),e=`%c${a}%c ${e}`):e=`( ${a} )${e}`);try{o?n?console[i](`${e} %o`,...r):console[i](e,...r):console[i](e)}catch{}}c.logLevel="VERBOSE";const d=c.bind(window,!1),h=c.bind(window,!0);function u(t){return Object.prototype.toString.call(t).match(/\s([a-zA-Z]+)/)[1].toLowerCase()}function p(t){return"function"===u(t)||"asyncfunction"===u(t)}function g(t){return"object"===u(t)}function f(t){return"string"===u(t)}function m(t){return"number"===u(t)}function b(t){return"undefined"===u(t)}function v(t){return!t||0===Object.keys(t).length&&t.constructor===Object}function y(t){return t>47&&t<58||32===t||13===t||229===t||t>64&&t<91||t>95&&t<112||t>185&&t<193||t>218&&t<223}function w(t){return Array.prototype.slice.call(t)}function k(t,e){return function(){const i=this,n=arguments;window.setTimeout((()=>t.apply(i,n)),e)}}function x(t,e,i){let n;return(...s)=>{const o=this,r=i&&!n;window.clearTimeout(n),n=window.setTimeout((()=>{n=null,i||t.apply(o,s)}),e),r&&t.apply(o,s)}}function E(t,e,i=void 0){let n,s,o,r=null,a=0;i||(i={});const l=function(){a=!1===i.leading?0:Date.now(),r=null,o=t.apply(n,s),r||(n=s=null)};return function(){const c=Date.now();!a&&!1===i.leading&&(a=c);const d=e-(c-a);return n=this,s=arguments,d<=0||d>e?(r&&(clearTimeout(r),r=null),a=c,o=t.apply(n,s),r||(n=s=null)):!r&&!1!==i.trailing&&(r=setTimeout(l,d)),o}}function C(t){return t[0].toUpperCase()+t.slice(1)}function A(t,...e){if(!e.length)return t;const i=e.shift();if(g(t)&&g(i))for(const e in i)g(i[e])?(t[e]||Object.assign(t,{[e]:{}}),A(t[e],i[e])):Object.assign(t,{[e]:i[e]});return A(t,...e)}function S(t){const e=function(){const t={win:!1,mac:!1,x11:!1,linux:!1},e=Object.keys(t).find((t=>-1!==window.navigator.appVersion.toLowerCase().indexOf(t)));return e&&(t[e]=!0),t}();return t=t.replace(/shift/gi,"⇧").replace(/backspace/gi,"⌫").replace(/enter/gi,"⏎").replace(/up/gi,"↑").replace(/left/gi,"→").replace(/down/gi,"↓").replace(/right/gi,"←").replace(/escape/gi,"⎋").replace(/insert/gi,"Ins").replace(/delete/gi,"␡").replace(/\+/gi," + "),e.mac?t.replace(/ctrl|cmd/gi,"⌘").replace(/alt/gi,"⌥"):t.replace(/cmd/gi,"Ctrl").replace(/windows/gi,"WIN")}function _(){return((t=21)=>crypto.getRandomValues(new Uint8Array(t)).reduce(((t,e)=>t+((e&=63)<36?e.toString(36):e<62?(e-26).toString(36).toUpperCase():e>62?"-":"_")),""))(10)}function T(t,e,i){t&&h(`«${e}» is deprecated and will be removed in the next major release. Please use the «${i}» instead.`,"warn")}function M(t,e,i){const n=i.value?"value":"get",s=i[n],o=`#${e}Cache`;if(i[n]=function(...t){return void 0===this[o]&&(this[o]=s.apply(this,...t)),this[o]},"get"===n&&i.set){const e=i.set;i.set=function(i){delete t[o],e.apply(this,i)}}return i}function I(){return window.matchMedia("(max-width: 650px)").matches}const L=typeof window<"u"&&window.navigator&&window.navigator.platform&&(/iP(ad|hone|od)/.test(window.navigator.platform)||"MacIntel"===window.navigator.platform&&window.navigator.maxTouchPoints>1);class B{static isSingleTag(t){return t.tagName&&["AREA","BASE","BR","COL","COMMAND","EMBED","HR","IMG","INPUT","KEYGEN","LINK","META","PARAM","SOURCE","TRACK","WBR"].includes(t.tagName)}static isLineBreakTag(t){return t&&t.tagName&&["BR","WBR"].includes(t.tagName)}static make(t,e=null,i={}){const n=document.createElement(t);Array.isArray(e)?n.classList.add(...e):e&&n.classList.add(e);for(const t in i)Object.prototype.hasOwnProperty.call(i,t)&&(n[t]=i[t]);return n}static text(t){return document.createTextNode(t)}static append(t,e){Array.isArray(e)?e.forEach((e=>t.appendChild(e))):t.appendChild(e)}static prepend(t,e){Array.isArray(e)?(e=e.reverse()).forEach((e=>t.prepend(e))):t.prepend(e)}static swap(t,e){const i=document.createElement("div"),n=t.parentNode;n.insertBefore(i,t),n.insertBefore(t,e),n.insertBefore(e,i),n.removeChild(i)}static find(t=document,e){return t.querySelector(e)}static get(t){return document.getElementById(t)}static findAll(t=document,e){return t.querySelectorAll(e)}static get allInputsSelector(){return"[contenteditable=true], textarea, input:not([type]), "+["text","password","email","number","search","tel","url"].map((t=>`input[type="${t}"]`)).join(", ")}static findAllInputs(t){return w(t.querySelectorAll(B.allInputsSelector)).reduce(((t,e)=>B.isNativeInput(e)||B.containsOnlyInlineElements(e)?[...t,e]:[...t,...B.getDeepestBlockElements(e)]),[])}static getDeepestNode(t,e=!1){const i=e?"lastChild":"firstChild",n=e?"previousSibling":"nextSibling";if(t&&t.nodeType===Node.ELEMENT_NODE&&t[i]){let s=t[i];if(B.isSingleTag(s)&&!B.isNativeInput(s)&&!B.isLineBreakTag(s))if(s[n])s=s[n];else{if(!s.parentNode[n])return s.parentNode;s=s.parentNode[n]}return this.getDeepestNode(s,e)}return t}static isElement(t){return!m(t)&&t&&t.nodeType&&t.nodeType===Node.ELEMENT_NODE}static isFragment(t){return!m(t)&&t&&t.nodeType&&t.nodeType===Node.DOCUMENT_FRAGMENT_NODE}static isContentEditable(t){return"true"===t.contentEditable}static isNativeInput(t){return!(!t||!t.tagName)&&["INPUT","TEXTAREA"].includes(t.tagName)}static canSetCaret(t){let e=!0;if(B.isNativeInput(t))switch(t.type){case"file":case"checkbox":case"radio":case"hidden":case"submit":case"button":case"image":case"reset":e=!1}else e=B.isContentEditable(t);return e}static isNodeEmpty(t,e){let i;return!(this.isSingleTag(t)&&!this.isLineBreakTag(t))&&(i=this.isElement(t)&&this.isNativeInput(t)?t.value:t.textContent.replace("​",""),e&&(i=i.replace(new RegExp(e,"g"),"")),0===i.trim().length)}static isLeaf(t){return!!t&&0===t.childNodes.length}static isEmpty(t,e){t.normalize();const i=[t];for(;i.length>0;)if(t=i.shift()){if(this.isLeaf(t)&&!this.isNodeEmpty(t,e))return!1;t.childNodes&&i.push(...Array.from(t.childNodes))}return!0}static isHTMLString(t){const e=B.make("div");return e.innerHTML=t,e.childElementCount>0}static getContentLength(t){return B.isNativeInput(t)?t.value.length:t.nodeType===Node.TEXT_NODE?t.length:t.textContent.length}static get blockElements(){return["address","article","aside","blockquote","canvas","div","dl","dt","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","header","hgroup","hr","li","main","nav","noscript","ol","output","p","pre","ruby","section","table","tbody","thead","tr","tfoot","ul","video"]}static containsOnlyInlineElements(t){let e;f(t)?(e=document.createElement("div"),e.innerHTML=t):e=t;const i=t=>!B.blockElements.includes(t.tagName.toLowerCase())&&Array.from(t.children).every(i);return Array.from(e.children).every(i)}static getDeepestBlockElements(t){return B.containsOnlyInlineElements(t)?[t]:Array.from(t.children).reduce(((t,e)=>[...t,...B.getDeepestBlockElements(e)]),[])}static getHolder(t){return f(t)?document.getElementById(t):t}static isAnchor(t){return"a"===t.tagName.toLowerCase()}static offset(t){const e=t.getBoundingClientRect(),i=window.pageXOffset||document.documentElement.scrollLeft,n=window.pageYOffset||document.documentElement.scrollTop,s=e.top+n,o=e.left+i;return{top:s,left:o,bottom:s+e.height,right:o+e.width}}}const P={ui:{blockTunes:{toggler:{"Click to tune":"","or drag to move":""}},inlineToolbar:{converter:{"Convert to":""}},toolbar:{toolbox:{Add:""}},popover:{Filter:"","Nothing found":""}},toolNames:{Text:"",Link:"",Bold:"",Italic:""},tools:{link:{"Add a link":""},stub:{"The block can not be displayed correctly.":""}},blockTunes:{delete:{Delete:"","Click to delete":""},moveUp:{"Move up":""},moveDown:{"Move down":""}}},R=class{static ui(t,e){return R._t(t,e)}static t(t,e){return R._t(t,e)}static setDictionary(t){R.currentDictionary=t}static _t(t,e){const i=R.getNamespace(t);return i&&i[e]?i[e]:e}static getNamespace(t){return t.split(".").reduce(((t,e)=>t&&Object.keys(t).length?t[e]:{}),R.currentDictionary)}};let D=R;D.currentDictionary=P;class O extends Error{}class F{constructor(){this.subscribers={}}on(t,e){t in this.subscribers||(this.subscribers[t]=[]),this.subscribers[t].push(e)}once(t,e){t in this.subscribers||(this.subscribers[t]=[]);const i=n=>{const s=e(n),o=this.subscribers[t].indexOf(i);return-1!==o&&this.subscribers[t].splice(o,1),s};this.subscribers[t].push(i)}emit(t,e){v(this.subscribers)||!this.subscribers[t]||this.subscribers[t].reduce(((t,e)=>{const i=e(t);return void 0!==i?i:t}),e)}off(t,e){if(void 0!==this.subscribers[t]){for(let i=0;i<this.subscribers[t].length;i++)if(this.subscribers[t][i]===e){delete this.subscribers[t][i];break}}else console.warn(`EventDispatcher .off(): there is no subscribers for event "${t.toString()}". Probably, .off() called before .on()`)}destroy(){this.subscribers={}}}function N(t){Object.setPrototypeOf(this,{get id(){return t.id},get name(){return t.name},get config(){return t.config},get holder(){return t.holder},get isEmpty(){return t.isEmpty},get selected(){return t.selected},set stretched(e){t.stretched=e},get stretched(){return t.stretched},get focusable(){return t.focusable},call:(e,i)=>t.call(e,i),save:()=>t.save(),validate:e=>t.validate(e),dispatchChange(){t.dispatchChange()}})}class H{constructor(){this.allListeners=[]}on(t,e,i,n=!1){const s=function(t=""){return`${t}${Math.floor(1e8*Math.random()).toString(16)}`}("l"),o={id:s,element:t,eventType:e,handler:i,options:n};if(!this.findOne(t,e,i))return this.allListeners.push(o),t.addEventListener(e,i,n),s}off(t,e,i,n){const s=this.findAll(t,e,i);s.forEach(((t,e)=>{const i=this.allListeners.indexOf(s[e]);i>-1&&(this.allListeners.splice(i,1),t.element.removeEventListener(t.eventType,t.handler,t.options))}))}offById(t){const e=this.findById(t);e&&e.element.removeEventListener(e.eventType,e.handler,e.options)}findOne(t,e,i){const n=this.findAll(t,e,i);return n.length>0?n[0]:null}findAll(t,e,i){let n;const s=t?this.findByEventTarget(t):[];return n=t&&e&&i?s.filter((t=>t.eventType===e&&t.handler===i)):t&&e?s.filter((t=>t.eventType===e)):s,n}removeAll(){this.allListeners.map((t=>{t.element.removeEventListener(t.eventType,t.handler,t.options)})),this.allListeners=[]}destroy(){this.removeAll()}findByEventTarget(t){return this.allListeners.filter((e=>{if(e.element===t)return e}))}findByType(t){return this.allListeners.filter((e=>{if(e.eventType===t)return e}))}findByHandler(t){return this.allListeners.filter((e=>{if(e.handler===t)return e}))}findById(t){return this.allListeners.find((e=>e.id===t))}}class j{constructor({config:t,eventsDispatcher:e}){if(this.nodes={},this.listeners=new H,this.readOnlyMutableListeners={on:(t,e,i,n=!1)=>{this.mutableListenerIds.push(this.listeners.on(t,e,i,n))},clearAll:()=>{for(const t of this.mutableListenerIds)this.listeners.offById(t);this.mutableListenerIds=[]}},this.mutableListenerIds=[],new.target===j)throw new TypeError("Constructors for abstract class Module are not allowed.");this.config=t,this.eventsDispatcher=e}set state(t){this.Editor=t}removeAllNodes(){for(const t in this.nodes){const e=this.nodes[t];e instanceof HTMLElement&&e.remove()}}get isRtl(){return"rtl"===this.config.i18n.direction}}class U{constructor(){this.instance=null,this.selection=null,this.savedSelectionRange=null,this.isFakeBackgroundEnabled=!1,this.commandBackground="backColor",this.commandRemoveFormat="removeFormat"}static get CSS(){return{editorWrapper:"codex-editor",editorZone:"codex-editor__redactor"}}static get anchorNode(){const t=window.getSelection();return t?t.anchorNode:null}static get anchorElement(){const t=window.getSelection();if(!t)return null;const e=t.anchorNode;return e?B.isElement(e)?e:e.parentElement:null}static get anchorOffset(){const t=window.getSelection();return t?t.anchorOffset:null}static get isCollapsed(){const t=window.getSelection();return t?t.isCollapsed:null}static get isAtEditor(){return this.isSelectionAtEditor(U.get())}static isSelectionAtEditor(t){if(!t)return!1;let e=t.anchorNode||t.focusNode;e&&e.nodeType===Node.TEXT_NODE&&(e=e.parentNode);let i=null;return e&&e instanceof Element&&(i=e.closest(`.${U.CSS.editorZone}`)),!!i&&i.nodeType===Node.ELEMENT_NODE}static isRangeAtEditor(t){if(!t)return;let e=t.startContainer;e&&e.nodeType===Node.TEXT_NODE&&(e=e.parentNode);let i=null;return e&&e instanceof Element&&(i=e.closest(`.${U.CSS.editorZone}`)),!!i&&i.nodeType===Node.ELEMENT_NODE}static get isSelectionExists(){return!!U.get().anchorNode}static get range(){return this.getRangeFromSelection(this.get())}static getRangeFromSelection(t){return t&&t.rangeCount?t.getRangeAt(0):null}static get rect(){let t,e=document.selection,i={x:0,y:0,width:0,height:0};if(e&&"Control"!==e.type)return t=e.createRange(),i.x=t.boundingLeft,i.y=t.boundingTop,i.width=t.boundingWidth,i.height=t.boundingHeight,i;if(!window.getSelection)return d("Method window.getSelection is not supported","warn"),i;if(e=window.getSelection(),null===e.rangeCount||isNaN(e.rangeCount))return d("Method SelectionUtils.rangeCount is not supported","warn"),i;if(0===e.rangeCount)return i;if(t=e.getRangeAt(0).cloneRange(),t.getBoundingClientRect&&(i=t.getBoundingClientRect()),0===i.x&&0===i.y){const e=document.createElement("span");if(e.getBoundingClientRect){e.appendChild(document.createTextNode("​")),t.insertNode(e),i=e.getBoundingClientRect();const n=e.parentNode;n.removeChild(e),n.normalize()}}return i}static get text(){return window.getSelection?window.getSelection().toString():""}static get(){return window.getSelection()}static setCursor(t,e=0){const i=document.createRange(),n=window.getSelection();return B.isNativeInput(t)?B.canSetCaret(t)?(t.focus(),t.selectionStart=t.selectionEnd=e,t.getBoundingClientRect()):void 0:(i.setStart(t,e),i.setEnd(t,e),n.removeAllRanges(),n.addRange(i),i.getBoundingClientRect())}static isRangeInsideContainer(t){const e=U.range;return null!==e&&t.contains(e.startContainer)}static addFakeCursor(){const t=U.range;if(null===t)return;const e=B.make("span","codex-editor__fake-cursor");e.dataset.mutationFree="true",t.collapse(),t.insertNode(e)}static isFakeCursorInsideContainer(t){return null!==B.find(t,".codex-editor__fake-cursor")}static removeFakeCursor(t=document.body){const e=B.find(t,".codex-editor__fake-cursor");e&&e.remove()}removeFakeBackground(){this.isFakeBackgroundEnabled&&(this.isFakeBackgroundEnabled=!1,document.execCommand(this.commandRemoveFormat))}setFakeBackground(){document.execCommand(this.commandBackground,!1,"#a8d6ff"),this.isFakeBackgroundEnabled=!0}save(){this.savedSelectionRange=U.range}restore(){if(!this.savedSelectionRange)return;const t=window.getSelection();t.removeAllRanges(),t.addRange(this.savedSelectionRange)}clearSaved(){this.savedSelectionRange=null}collapseToEnd(){const t=window.getSelection(),e=document.createRange();e.selectNodeContents(t.focusNode),e.collapse(!1),t.removeAllRanges(),t.addRange(e)}findParentTag(t,e,i=10){const n=window.getSelection();let s=null;return n&&n.anchorNode&&n.focusNode?([n.anchorNode,n.focusNode].forEach((n=>{let o=i;for(;o>0&&n.parentNode&&(n.tagName!==t||(s=n,e&&n.classList&&!n.classList.contains(e)&&(s=null),!s));)n=n.parentNode,o--})),s):null}expandToTag(t){const e=window.getSelection();e.removeAllRanges();const i=document.createRange();i.selectNodeContents(t),e.addRange(i)}}const z="redactor dom changed",q="block changed",$="fake cursor is about to be toggled",V="fake cursor have been set";function W(t,e){return t.mergeable&&t.name===e.name}var G=(t=>(t.APPEND_CALLBACK="appendCallback",t.RENDERED="rendered",t.MOVED="moved",t.UPDATED="updated",t.REMOVED="removed",t.ON_PASTE="onPaste",t))(G||{});class K extends F{constructor({id:t=_(),data:e,tool:i,api:n,readOnly:s,tunesData:o},r){super(),this.cachedInputs=[],this.toolRenderedElement=null,this.tunesInstances=new Map,this.defaultTunesInstances=new Map,this.unavailableTunesData={},this.inputIndex=0,this.editorEventBus=null,this.handleFocus=()=>{this.dropInputsCache(),this.updateCurrentInput()},this.didMutated=(t=void 0)=>{const e=void 0===t,i=t instanceof InputEvent;let n;!e&&!i&&this.detectToolRootChange(t),n=!(!e&&!i&&t.length>0&&t.every((t=>{const{addedNodes:e,removedNodes:i,target:n}=t;return[...Array.from(e),...Array.from(i),n].some((t=>(B.isElement(t)||(t=t.parentElement),t&&null!==t.closest('[data-mutation-free="true"]'))))}))),n&&(this.dropInputsCache(),this.updateCurrentInput(),this.call("updated"),this.emit("didMutated",this))},this.name=i.name,this.id=t,this.settings=i.settings,this.config=i.settings.config||{},this.api=n,this.editorEventBus=r||null,this.blockAPI=new N(this),this.tool=i,this.toolInstance=i.create(e,this.blockAPI,s),this.tunes=i.tunes,this.composeTunes(o),this.holder=this.compose(),window.requestIdleCallback((()=>{this.watchBlockMutations(),this.addInputEvents()}))}static get CSS(){return{wrapper:"ce-block",wrapperStretched:"ce-block--stretched",content:"ce-block__content",selected:"ce-block--selected",dropTarget:"ce-block--drop-target"}}get inputs(){if(0!==this.cachedInputs.length)return this.cachedInputs;const t=B.findAllInputs(this.holder);return this.inputIndex>t.length-1&&(this.inputIndex=t.length-1),this.cachedInputs=t,t}get currentInput(){return this.inputs[this.inputIndex]}set currentInput(t){const e=this.inputs.findIndex((e=>e===t||e.contains(t)));-1!==e&&(this.inputIndex=e)}get firstInput(){return this.inputs[0]}get lastInput(){const t=this.inputs;return t[t.length-1]}get nextInput(){return this.inputs[this.inputIndex+1]}get previousInput(){return this.inputs[this.inputIndex-1]}get data(){return this.save().then((t=>t&&!v(t.data)?t.data:{}))}get sanitize(){return this.tool.sanitizeConfig}get mergeable(){return p(this.toolInstance.merge)}get focusable(){return 0!==this.inputs.length}get isEmpty(){const t=B.isEmpty(this.pluginsContent,"/"),e=!this.hasMedia;return t&&e}get hasMedia(){return!!this.holder.querySelector(["img","iframe","video","audio","source","input","textarea","twitterwidget"].join(","))}set selected(t){var e,i;this.holder.classList.toggle(K.CSS.selected,t);const n=!0===t&&U.isRangeInsideContainer(this.holder),s=!1===t&&U.isFakeCursorInsideContainer(this.holder);(n||s)&&(null==(e=this.editorEventBus)||e.emit($,{state:t}),n?U.addFakeCursor():U.removeFakeCursor(this.holder),null==(i=this.editorEventBus)||i.emit(V,{state:t}))}get selected(){return this.holder.classList.contains(K.CSS.selected)}set stretched(t){this.holder.classList.toggle(K.CSS.wrapperStretched,t)}get stretched(){return this.holder.classList.contains(K.CSS.wrapperStretched)}set dropTarget(t){this.holder.classList.toggle(K.CSS.dropTarget,t)}get pluginsContent(){return this.toolRenderedElement}call(t,e){if(p(this.toolInstance[t])){"appendCallback"===t&&d("`appendCallback` hook is deprecated and will be removed in the next major release. Use `rendered` hook instead","warn");try{this.toolInstance[t].call(this.toolInstance,e)}catch(e){d(`Error during '${t}' call: ${e.message}`,"error")}}}async mergeWith(t){await this.toolInstance.merge(t)}async save(){const t=await this.toolInstance.save(this.pluginsContent),e=this.unavailableTunesData;[...this.tunesInstances.entries(),...this.defaultTunesInstances.entries()].forEach((([t,i])=>{if(p(i.save))try{e[t]=i.save()}catch(t){d(`Tune ${i.constructor.name} save method throws an Error %o`,"warn",t)}}));const i=window.performance.now();let n;return Promise.resolve(t).then((t=>(n=window.performance.now(),{id:this.id,tool:this.name,data:t,tunes:e,time:n-i}))).catch((t=>{d(`Saving process for ${this.name} tool failed due to the ${t}`,"log","red")}))}async validate(t){let e=!0;return this.toolInstance.validate instanceof Function&&(e=await this.toolInstance.validate(t)),e}getTunes(){const t=document.createElement("div"),e=[];return["function"==typeof this.toolInstance.renderSettings?this.toolInstance.renderSettings():[],[...this.tunesInstances.values(),...this.defaultTunesInstances.values()].map((t=>t.render()))].flat().forEach((i=>{B.isElement(i)?t.appendChild(i):Array.isArray(i)?e.push(...i):e.push(i)})),[e,t]}updateCurrentInput(){this.currentInput=B.isNativeInput(document.activeElement)||!U.anchorNode?document.activeElement:U.anchorNode}dispatchChange(){this.didMutated()}destroy(){this.unwatchBlockMutations(),this.removeInputEvents(),super.destroy(),p(this.toolInstance.destroy)&&this.toolInstance.destroy()}async getActiveToolboxEntry(){const t=this.tool.toolbox;if(1===t.length)return Promise.resolve(this.tool.toolbox[0]);const e=await this.data;return t.find((t=>Object.entries(t.data).some((([t,i])=>e[t]&&function(t,e){const i=Array.isArray(t)||g(t),n=Array.isArray(e)||g(e);return i||n?JSON.stringify(t)===JSON.stringify(e):t===e}(e[t],i)))))}async exportDataAsString(){return function(t,e){const i=null==e?void 0:e.export;return p(i)?i(t):f(i)?t[i]:(void 0!==i&&d("Conversion «export» property must be a string or function. String means key of saved data object to export. Function should export processed string to export."),"")}(await this.data,this.tool.conversionConfig)}compose(){const t=B.make("div",K.CSS.wrapper),e=B.make("div",K.CSS.content),i=this.toolInstance.render();t.dataset.id=this.id,this.toolRenderedElement=i,e.appendChild(this.toolRenderedElement);let n=e;return[...this.tunesInstances.values(),...this.defaultTunesInstances.values()].forEach((t=>{if(p(t.wrap))try{n=t.wrap(n)}catch(e){d(`Tune ${t.constructor.name} wrap method throws an Error %o`,"warn",e)}})),t.appendChild(n),t}composeTunes(t){Array.from(this.tunes.values()).forEach((e=>{(e.isInternal?this.defaultTunesInstances:this.tunesInstances).set(e.name,e.create(t[e.name],this.blockAPI))})),Object.entries(t).forEach((([t,e])=>{this.tunesInstances.has(t)||(this.unavailableTunesData[t]=e)}))}addInputEvents(){this.inputs.forEach((t=>{t.addEventListener("focus",this.handleFocus),B.isNativeInput(t)&&t.addEventListener("input",this.didMutated)}))}removeInputEvents(){this.inputs.forEach((t=>{t.removeEventListener("focus",this.handleFocus),B.isNativeInput(t)&&t.removeEventListener("input",this.didMutated)}))}watchBlockMutations(){var t;this.redactorDomChangedCallback=t=>{const{mutations:e}=t;e.some((t=>function(t,e){const{type:i,target:n,addedNodes:s,removedNodes:o}=t;if(n===e)return!0;if(["characterData","attributes"].includes(i)){const t=n.nodeType===Node.TEXT_NODE?n.parentNode:n;return e.contains(t)}const r=Array.from(s).some((t=>e.contains(t))),a=Array.from(o).some((t=>e.contains(t)));return r||a}(t,this.toolRenderedElement)))&&this.didMutated(e)},null==(t=this.editorEventBus)||t.on(z,this.redactorDomChangedCallback)}unwatchBlockMutations(){var t;null==(t=this.editorEventBus)||t.off(z,this.redactorDomChangedCallback)}detectToolRootChange(t){t.forEach((t=>{if(Array.from(t.removedNodes).includes(this.toolRenderedElement)){const e=t.addedNodes[t.addedNodes.length-1];this.toolRenderedElement=e}}))}dropInputsCache(){this.cachedInputs=[]}}class X extends j{static getNamespace(t){return t.isTune()?`blockTunes.${t.name}`:`tools.${t.name}`}get methods(){return{t:()=>{h("I18n.t() method can be accessed only from Tools","warn")}}}getMethodsForTool(t){return Object.assign(this.methods,{t:e=>D.t(X.getNamespace(t),e)})}}var Y={},J={get exports(){return Y},set exports(t){Y=t}};window,J.exports=function(t){var e={};function i(n){if(e[n])return e[n].exports;var s=e[n]={i:n,l:!1,exports:{}};return t[n].call(s.exports,s,s.exports,i),s.l=!0,s.exports}return i.m=t,i.c=e,i.d=function(t,e,n){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},i.r=function(t){typeof Symbol<"u"&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e||4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var s in t)i.d(n,s,function(e){return t[e]}.bind(null,s));return n},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="/",i(i.s=0)}([function(t,e,i){var n,s;i(1),t.exports=(n=i(6),"cdx-notify--bounce-in",s=null,{show:function(t){if(t.message){!function(){if(s)return!0;s=n.getWrapper(),document.body.appendChild(s)}();var e=null,i=t.time||8e3;switch(t.type){case"confirm":e=n.confirm(t);break;case"prompt":e=n.prompt(t);break;default:e=n.alert(t),window.setTimeout((function(){e.remove()}),i)}s.appendChild(e),e.classList.add("cdx-notify--bounce-in")}}})},function(t,e,i){var n=i(2);"string"==typeof n&&(n=[[t.i,n,""]]);i(4)(n,{hmr:!0,transform:void 0,insertInto:void 0}),n.locals&&(t.exports=n.locals)},function(t,e,i){(t.exports=i(3)(!1)).push([t.i,'.cdx-notify--error{background:#fffbfb!important}.cdx-notify--error::before{background:#fb5d5d!important}.cdx-notify__input{max-width:130px;padding:5px 10px;background:#f7f7f7;border:0;border-radius:3px;font-size:13px;color:#656b7c;outline:0}.cdx-notify__input:-ms-input-placeholder{color:#656b7c}.cdx-notify__input::placeholder{color:#656b7c}.cdx-notify__input:focus:-ms-input-placeholder{color:rgba(101,107,124,.3)}.cdx-notify__input:focus::placeholder{color:rgba(101,107,124,.3)}.cdx-notify__button{border:none;border-radius:3px;font-size:13px;padding:5px 10px;cursor:pointer}.cdx-notify__button:last-child{margin-left:10px}.cdx-notify__button--cancel{background:#f2f5f7;box-shadow:0 2px 1px 0 rgba(16,19,29,0);color:#656b7c}.cdx-notify__button--cancel:hover{background:#eee}.cdx-notify__button--confirm{background:#34c992;box-shadow:0 1px 1px 0 rgba(18,49,35,.05);color:#fff}.cdx-notify__button--confirm:hover{background:#33b082}.cdx-notify__btns-wrapper{display:-ms-flexbox;display:flex;-ms-flex-flow:row nowrap;flex-flow:row nowrap;margin-top:5px}.cdx-notify__cross{position:absolute;top:5px;right:5px;width:10px;height:10px;padding:5px;opacity:.54;cursor:pointer}.cdx-notify__cross::after,.cdx-notify__cross::before{content:\'\';position:absolute;left:9px;top:5px;height:12px;width:2px;background:#575d67}.cdx-notify__cross::before{transform:rotate(-45deg)}.cdx-notify__cross::after{transform:rotate(45deg)}.cdx-notify__cross:hover{opacity:1}.cdx-notifies{position:fixed;z-index:2;bottom:20px;left:20px;font-family:-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,Oxygen,Ubuntu,Cantarell,"Fira Sans","Droid Sans","Helvetica Neue",sans-serif}.cdx-notify{position:relative;width:220px;margin-top:15px;padding:13px 16px;background:#fff;box-shadow:0 11px 17px 0 rgba(23,32,61,.13);border-radius:5px;font-size:14px;line-height:1.4em;word-wrap:break-word}.cdx-notify::before{content:\'\';position:absolute;display:block;top:0;left:0;width:3px;height:calc(100% - 6px);margin:3px;border-radius:5px;background:0 0}@keyframes bounceIn{0%{opacity:0;transform:scale(.3)}50%{opacity:1;transform:scale(1.05)}70%{transform:scale(.9)}100%{transform:scale(1)}}.cdx-notify--bounce-in{animation-name:bounceIn;animation-duration:.6s;animation-iteration-count:1}.cdx-notify--success{background:#fafffe!important}.cdx-notify--success::before{background:#41ffb1!important}',""])},function(t,e){t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var i=function(t,e){var i,n=t[1]||"",s=t[3];if(!s)return n;if(e&&"function"==typeof btoa){var o=(i=s,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(i))))+" */"),r=s.sources.map((function(t){return"/*# sourceURL="+s.sourceRoot+t+" */"}));return[n].concat(r).concat([o]).join("\n")}return[n].join("\n")}(e,t);return e[2]?"@media "+e[2]+"{"+i+"}":i})).join("")},e.i=function(t,i){"string"==typeof t&&(t=[[null,t,""]]);for(var n={},s=0;s<this.length;s++){var o=this[s][0];"number"==typeof o&&(n[o]=!0)}for(s=0;s<t.length;s++){var r=t[s];"number"==typeof r[0]&&n[r[0]]||(i&&!r[2]?r[2]=i:i&&(r[2]="("+r[2]+") and ("+i+")"),e.push(r))}},e}},function(t,e,i){var n,s,o,r={},a=(n=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===s&&(s=n.apply(this,arguments)),s}),l=(o={},function(t){if("function"==typeof t)return t();if(void 0===o[t]){var e=function(t){return document.querySelector(t)}.call(this,t);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch{e=null}o[t]=e}return o[t]}),c=null,d=0,h=[],u=i(5);function p(t,e){for(var i=0;i<t.length;i++){var n=t[i],s=r[n.id];if(s){s.refs++;for(var o=0;o<s.parts.length;o++)s.parts[o](n.parts[o]);for(;o<n.parts.length;o++)s.parts.push(y(n.parts[o],e))}else{var a=[];for(o=0;o<n.parts.length;o++)a.push(y(n.parts[o],e));r[n.id]={id:n.id,refs:1,parts:a}}}}function g(t,e){for(var i=[],n={},s=0;s<t.length;s++){var o=t[s],r=e.base?o[0]+e.base:o[0],a={css:o[1],media:o[2],sourceMap:o[3]};n[r]?n[r].parts.push(a):i.push(n[r]={id:r,parts:[a]})}return i}function f(t,e){var i=l(t.insertInto);if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var n=h[h.length-1];if("top"===t.insertAt)n?n.nextSibling?i.insertBefore(e,n.nextSibling):i.appendChild(e):i.insertBefore(e,i.firstChild),h.push(e);else if("bottom"===t.insertAt)i.appendChild(e);else{if("object"!=typeof t.insertAt||!t.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var s=l(t.insertInto+" "+t.insertAt.before);i.insertBefore(e,s)}}function m(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t);var e=h.indexOf(t);e>=0&&h.splice(e,1)}function b(t){var e=document.createElement("style");return void 0===t.attrs.type&&(t.attrs.type="text/css"),v(e,t.attrs),f(t,e),e}function v(t,e){Object.keys(e).forEach((function(i){t.setAttribute(i,e[i])}))}function y(t,e){var i,n,s,o,r,a;if(e.transform&&t.css){if(!(o=e.transform(t.css)))return function(){};t.css=o}if(e.singleton){var l=d++;i=c||(c=b(e)),n=x.bind(null,i,l,!1),s=x.bind(null,i,l,!0)}else t.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(r=e,a=document.createElement("link"),void 0===r.attrs.type&&(r.attrs.type="text/css"),r.attrs.rel="stylesheet",v(a,r.attrs),f(r,a),n=function(t,e,i){var n=i.css,s=i.sourceMap,o=void 0===e.convertToAbsoluteUrls&&s;(e.convertToAbsoluteUrls||o)&&(n=u(n)),s&&(n+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(s))))+" */");var r=new Blob([n],{type:"text/css"}),a=t.href;t.href=URL.createObjectURL(r),a&&URL.revokeObjectURL(a)}.bind(null,i=a,e),s=function(){m(i),i.href&&URL.revokeObjectURL(i.href)}):(i=b(e),n=function(t,e){var i=e.css,n=e.media;if(n&&t.setAttribute("media",n),t.styleSheet)t.styleSheet.cssText=i;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(i))}}.bind(null,i),s=function(){m(i)});return n(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;n(t=e)}else s()}}t.exports=function(t,e){if(typeof DEBUG<"u"&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(e=e||{}).attrs="object"==typeof e.attrs?e.attrs:{},e.singleton||"boolean"==typeof e.singleton||(e.singleton=a()),e.insertInto||(e.insertInto="head"),e.insertAt||(e.insertAt="bottom");var i=g(t,e);return p(i,e),function(t){for(var n=[],s=0;s<i.length;s++){var o=i[s];(a=r[o.id]).refs--,n.push(a)}for(t&&p(g(t,e),e),s=0;s<n.length;s++){var a;if(0===(a=n[s]).refs){for(var l=0;l<a.parts.length;l++)a.parts[l]();delete r[a.id]}}}};var w,k=(w=[],function(t,e){return w[t]=e,w.filter(Boolean).join("\n")});function x(t,e,i,n){var s=i?"":n.css;if(t.styleSheet)t.styleSheet.cssText=k(e,s);else{var o=document.createTextNode(s),r=t.childNodes;r[e]&&t.removeChild(r[e]),r.length?t.insertBefore(o,r[e]):t.appendChild(o)}}},function(t,e){t.exports=function(t){var e=typeof window<"u"&&window.location;if(!e)throw new Error("fixUrls requires window.location");if(!t||"string"!=typeof t)return t;var i=e.protocol+"//"+e.host,n=i+e.pathname.replace(/\/[^\/]*$/,"/");return t.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,(function(t,e){var s,o=e.trim().replace(/^"(.*)"$/,(function(t,e){return e})).replace(/^'(.*)'$/,(function(t,e){return e}));return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(o)?t:(s=0===o.indexOf("//")?o:0===o.indexOf("/")?i+o:n+o.replace(/^\.\//,""),"url("+JSON.stringify(s)+")")}))}},function(t,e,i){var n,s,o,r,a,l;t.exports=("cdx-notifies",n="cdx-notify",s="cdx-notify__cross",o="cdx-notify__button--confirm","cdx-notify__button--cancel","cdx-notify__input",r="cdx-notify__button",a="cdx-notify__btns-wrapper",{alert:l=function(t){var e=document.createElement("DIV"),i=document.createElement("DIV"),o=t.message,r=t.style;return e.classList.add(n),r&&e.classList.add(n+"--"+r),e.innerHTML=o,i.classList.add(s),i.addEventListener("click",e.remove.bind(e)),e.appendChild(i),e},confirm:function(t){var e=l(t),i=document.createElement("div"),n=document.createElement("button"),c=document.createElement("button"),d=e.querySelector("."+s),h=t.cancelHandler,u=t.okHandler;return i.classList.add(a),n.innerHTML=t.okText||"Confirm",c.innerHTML=t.cancelText||"Cancel",n.classList.add(r),c.classList.add(r),n.classList.add(o),c.classList.add("cdx-notify__button--cancel"),h&&"function"==typeof h&&(c.addEventListener("click",h),d.addEventListener("click",h)),u&&"function"==typeof u&&n.addEventListener("click",u),n.addEventListener("click",e.remove.bind(e)),c.addEventListener("click",e.remove.bind(e)),i.appendChild(n),i.appendChild(c),e.appendChild(i),e},prompt:function(t){var e=l(t),i=document.createElement("div"),n=document.createElement("button"),c=document.createElement("input"),d=e.querySelector("."+s),h=t.cancelHandler,u=t.okHandler;return i.classList.add(a),n.innerHTML=t.okText||"Ok",n.classList.add(r),n.classList.add(o),c.classList.add("cdx-notify__input"),t.placeholder&&c.setAttribute("placeholder",t.placeholder),t.default&&(c.value=t.default),t.inputType&&(c.type=t.inputType),h&&"function"==typeof h&&d.addEventListener("click",h),u&&"function"==typeof u&&n.addEventListener("click",(function(){u(c.value)})),n.addEventListener("click",e.remove.bind(e)),i.appendChild(c),i.appendChild(n),e.appendChild(i),e},getWrapper:function(){var t=document.createElement("DIV");return t.classList.add("cdx-notifies"),t}})}]);const Q=n(Y);class Z{show(t){Q.show(t)}}var tt={},et={get exports(){return tt},set exports(t){tt=t}};et.exports=function(){function t(t){var e=t.tags;if(!Object.keys(e).map((function(t){return typeof e[t]})).every((function(t){return"object"===t||"boolean"===t||"function"===t})))throw new Error("The configuration was invalid");this.config=t}var e=["P","LI","TD","TH","DIV","H1","H2","H3","H4","H5","H6","PRE"];function i(t){return-1!==e.indexOf(t.nodeName)}var n=["A","B","STRONG","I","EM","SUB","SUP","U","STRIKE"];function s(t){return-1!==n.indexOf(t.nodeName)}function o(t,e,i){return"function"==typeof t.tags[e]?t.tags[e](i):t.tags[e]}function r(t,e){return typeof e>"u"||"boolean"==typeof e&&!e}function a(t,e,i){var n=t.name.toLowerCase();return!0!==e&&("function"==typeof e[n]?!e[n](t.value,i):typeof e[n]>"u"||!1===e[n]||"string"==typeof e[n]&&e[n]!==t.value)}return t.prototype.clean=function(t){const e=document.implementation.createHTMLDocument(),i=e.createElement("div");return i.innerHTML=t,this._sanitize(e,i),i.innerHTML},t.prototype._sanitize=function(t,e){var n=function(t,e){return t.createTreeWalker(e,NodeFilter.SHOW_TEXT|NodeFilter.SHOW_ELEMENT|NodeFilter.SHOW_COMMENT,null,!1)}(t,e),l=n.firstChild();if(l)do{if(l.nodeType!==Node.TEXT_NODE){if(l.nodeType===Node.COMMENT_NODE){e.removeChild(l),this._sanitize(t,e);break}var c,d=s(l);d&&(c=Array.prototype.some.call(l.childNodes,i));var h=!!e.parentNode,u=i(e)&&i(l)&&h,p=l.nodeName.toLowerCase(),g=o(this.config,p,l);if(d&&c||r(0,g)||!this.config.keepNestedBlockElements&&u){if("SCRIPT"!==l.nodeName&&"STYLE"!==l.nodeName)for(;l.childNodes.length>0;)e.insertBefore(l.childNodes[0],l);e.removeChild(l),this._sanitize(t,e);break}for(var f=0;f<l.attributes.length;f+=1){var m=l.attributes[f];a(m,g,l)&&(l.removeAttribute(m.name),f-=1)}this._sanitize(t,l)}else if(""===l.data.trim()&&(l.previousElementSibling&&i(l.previousElementSibling)||l.nextElementSibling&&i(l.nextElementSibling))){e.removeChild(l),this._sanitize(t,e);break}}while(l=n.nextSibling())},t}();const it=tt;function nt(t,e){return t.map((t=>{const i=p(e)?e(t.tool):e;return v(i)||(t.data=ot(t.data,i)),t}))}function st(t,e={}){return new it({tags:e}).clean(t)}function ot(t,e){return Array.isArray(t)?function(t,e){return t.map((t=>ot(t,e)))}(t,e):g(t)?function(t,e){const i={};for(const n in t){if(!Object.prototype.hasOwnProperty.call(t,n))continue;const s=t[n],o=rt(e[n])?e[n]:e;i[n]=ot(s,o)}return i}(t,e):f(t)?function(t,e){return g(e)?st(t,e):!1===e?st(t,{}):t}(t,e):t}function rt(t){return g(t)||function(t){return"boolean"===u(t)}(t)||p(t)}var at={},lt={get exports(){return at},set exports(t){at=t}};!function(t,e){window,t.exports=function(t){var e={};function i(n){if(e[n])return e[n].exports;var s=e[n]={i:n,l:!1,exports:{}};return t[n].call(s.exports,s,s.exports,i),s.l=!0,s.exports}return i.m=t,i.c=e,i.d=function(t,e,n){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},i.r=function(t){typeof Symbol<"u"&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e||4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var s in t)i.d(n,s,function(e){return t[e]}.bind(null,s));return n},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=0)}([function(t,e,i){t.exports=i(1)},function(t,e,i){i.r(e),i.d(e,"default",(function(){return n}));class n{constructor(){this.nodes={wrapper:null,content:null},this.showed=!1,this.offsetTop=10,this.offsetLeft=10,this.offsetRight=10,this.hidingDelay=0,this.handleWindowScroll=()=>{this.showed&&this.hide(!0)},this.loadStyles(),this.prepare(),window.addEventListener("scroll",this.handleWindowScroll,{passive:!0})}get CSS(){return{tooltip:"ct",tooltipContent:"ct__content",tooltipShown:"ct--shown",placement:{left:"ct--left",bottom:"ct--bottom",right:"ct--right",top:"ct--top"}}}show(t,e,i){this.nodes.wrapper||this.prepare(),this.hidingTimeout&&clearTimeout(this.hidingTimeout);const n=Object.assign({placement:"bottom",marginTop:0,marginLeft:0,marginRight:0,marginBottom:0,delay:70,hidingDelay:0},i);if(n.hidingDelay&&(this.hidingDelay=n.hidingDelay),this.nodes.content.innerHTML="","string"==typeof e)this.nodes.content.appendChild(document.createTextNode(e));else{if(!(e instanceof Node))throw Error("[CodeX Tooltip] Wrong type of «content» passed. It should be an instance of Node or String. But "+typeof e+" given.");this.nodes.content.appendChild(e)}switch(this.nodes.wrapper.classList.remove(...Object.values(this.CSS.placement)),n.placement){case"top":this.placeTop(t,n);break;case"left":this.placeLeft(t,n);break;case"right":this.placeRight(t,n);break;default:this.placeBottom(t,n)}n&&n.delay?this.showingTimeout=setTimeout((()=>{this.nodes.wrapper.classList.add(this.CSS.tooltipShown),this.showed=!0}),n.delay):(this.nodes.wrapper.classList.add(this.CSS.tooltipShown),this.showed=!0)}hide(t=!1){if(this.hidingDelay&&!t)return this.hidingTimeout&&clearTimeout(this.hidingTimeout),void(this.hidingTimeout=setTimeout((()=>{this.hide(!0)}),this.hidingDelay));this.nodes.wrapper.classList.remove(this.CSS.tooltipShown),this.showed=!1,this.showingTimeout&&clearTimeout(this.showingTimeout)}onHover(t,e,i){t.addEventListener("mouseenter",(()=>{this.show(t,e,i)})),t.addEventListener("mouseleave",(()=>{this.hide()}))}destroy(){this.nodes.wrapper.remove(),window.removeEventListener("scroll",this.handleWindowScroll)}prepare(){this.nodes.wrapper=this.make("div",this.CSS.tooltip),this.nodes.content=this.make("div",this.CSS.tooltipContent),this.append(this.nodes.wrapper,this.nodes.content),this.append(document.body,this.nodes.wrapper)}loadStyles(){const t="codex-tooltips-style";if(document.getElementById(t))return;const e=i(2),n=this.make("style",null,{textContent:e.toString(),id:t});this.prepend(document.head,n)}placeBottom(t,e){const i=t.getBoundingClientRect(),n=i.left+t.clientWidth/2-this.nodes.wrapper.offsetWidth/2,s=i.bottom+window.pageYOffset+this.offsetTop+e.marginTop;this.applyPlacement("bottom",n,s)}placeTop(t,e){const i=t.getBoundingClientRect(),n=i.left+t.clientWidth/2-this.nodes.wrapper.offsetWidth/2,s=i.top+window.pageYOffset-this.nodes.wrapper.clientHeight-this.offsetTop;this.applyPlacement("top",n,s)}placeLeft(t,e){const i=t.getBoundingClientRect(),n=i.left-this.nodes.wrapper.offsetWidth-this.offsetLeft-e.marginLeft,s=i.top+window.pageYOffset+t.clientHeight/2-this.nodes.wrapper.offsetHeight/2;this.applyPlacement("left",n,s)}placeRight(t,e){const i=t.getBoundingClientRect(),n=i.right+this.offsetRight+e.marginRight,s=i.top+window.pageYOffset+t.clientHeight/2-this.nodes.wrapper.offsetHeight/2;this.applyPlacement("right",n,s)}applyPlacement(t,e,i){this.nodes.wrapper.classList.add(this.CSS.placement[t]),this.nodes.wrapper.style.left=e+"px",this.nodes.wrapper.style.top=i+"px"}make(t,e=null,i={}){const n=document.createElement(t);Array.isArray(e)?n.classList.add(...e):e&&n.classList.add(e);for(const t in i)i.hasOwnProperty(t)&&(n[t]=i[t]);return n}append(t,e){Array.isArray(e)?e.forEach((e=>t.appendChild(e))):t.appendChild(e)}prepend(t,e){Array.isArray(e)?(e=e.reverse()).forEach((e=>t.prepend(e))):t.prepend(e)}}},function(t,e){t.exports='.ct{z-index:999;opacity:0;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;pointer-events:none;-webkit-transition:opacity 50ms ease-in,-webkit-transform 70ms cubic-bezier(.215,.61,.355,1);transition:opacity 50ms ease-in,-webkit-transform 70ms cubic-bezier(.215,.61,.355,1);transition:opacity 50ms ease-in,transform 70ms cubic-bezier(.215,.61,.355,1);transition:opacity 50ms ease-in,transform 70ms cubic-bezier(.215,.61,.355,1),-webkit-transform 70ms cubic-bezier(.215,.61,.355,1);will-change:opacity,top,left;-webkit-box-shadow:0 8px 12px 0 rgba(29,32,43,.17),0 4px 5px -3px rgba(5,6,12,.49);box-shadow:0 8px 12px 0 rgba(29,32,43,.17),0 4px 5px -3px rgba(5,6,12,.49);border-radius:9px}.ct,.ct:before{position:absolute;top:0;left:0}.ct:before{content:"";bottom:0;right:0;background-color:#1d202b;z-index:-1;border-radius:4px}@supports(-webkit-mask-box-image:url("")){.ct:before{border-radius:0;-webkit-mask-box-image:url(\'data:image/svg+xml;charset=utf-8,<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24"><path d="M10.71 0h2.58c3.02 0 4.64.42 6.1 1.2a8.18 8.18 0 013.4 3.4C23.6 6.07 24 7.7 24 10.71v2.58c0 3.02-.42 4.64-1.2 6.1a8.18 8.18 0 01-3.4 3.4c-1.47.8-3.1 1.21-6.11 1.21H10.7c-3.02 0-4.64-.42-6.1-1.2a8.18 8.18 0 01-3.4-3.4C.4 17.93 0 16.3 0 13.29V10.7c0-3.02.42-4.64 1.2-6.1a8.18 8.18 0 013.4-3.4C6.07.4 7.7 0 10.71 0z"/></svg>\') 48% 41% 37.9% 53.3%}}@media (--mobile){.ct{display:none}}.ct__content{padding:6px 10px;color:#cdd1e0;font-size:12px;text-align:center;letter-spacing:.02em;line-height:1em}.ct:after{content:"";width:8px;height:8px;position:absolute;background-color:#1d202b;z-index:-1}.ct--bottom{-webkit-transform:translateY(5px);transform:translateY(5px)}.ct--bottom:after{top:-3px;left:50%;-webkit-transform:translateX(-50%) rotate(-45deg);transform:translateX(-50%) rotate(-45deg)}.ct--top{-webkit-transform:translateY(-5px);transform:translateY(-5px)}.ct--top:after{top:auto;bottom:-3px;left:50%;-webkit-transform:translateX(-50%) rotate(-45deg);transform:translateX(-50%) rotate(-45deg)}.ct--left{-webkit-transform:translateX(-5px);transform:translateX(-5px)}.ct--left:after{top:50%;left:auto;right:0;-webkit-transform:translate(41.6%,-50%) rotate(-45deg);transform:translate(41.6%,-50%) rotate(-45deg)}.ct--right{-webkit-transform:translateX(5px);transform:translateX(5px)}.ct--right:after{top:50%;left:0;-webkit-transform:translate(-41.6%,-50%) rotate(-45deg);transform:translate(-41.6%,-50%) rotate(-45deg)}.ct--shown{opacity:1;-webkit-transform:none;transform:none}'}]).default}(lt);const ct=n(at);let dt=null;function ht(){dt||(dt=new ct)}function ut(t=!1){ht(),null==dt||dt.hide(t)}function pt(t,e,i){ht(),null==dt||dt.onHover(t,e,i)}const gt=function t(e,i){const n={};return Object.entries(e).forEach((([e,s])=>{if(g(s)){const o=i?`${i}.${e}`:e;Object.values(s).every((t=>f(t)))?n[e]=o:n[e]=t(s,o)}else n[e]=s})),n}(P),ft='<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M7 10L11.8586 14.8586C11.9367 14.9367 12.0633 14.9367 12.1414 14.8586L17 10"/></svg>',mt='<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M7.69998 12.6L7.67896 12.62C6.53993 13.7048 6.52012 15.5155 7.63516 16.625V16.625C8.72293 17.7073 10.4799 17.7102 11.5712 16.6314L13.0263 15.193C14.0703 14.1609 14.2141 12.525 13.3662 11.3266L13.22 11.12"/><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M16.22 11.12L16.3564 10.9805C17.2895 10.0265 17.3478 8.5207 16.4914 7.49733V7.49733C15.5691 6.39509 13.9269 6.25143 12.8271 7.17675L11.3901 8.38588C10.0935 9.47674 9.95706 11.4241 11.0888 12.6852L11.12 12.72"/></svg>';class bt{constructor(t){this.nodes={root:null,icon:null},this.confirmationState=null,this.removeSpecialFocusBehavior=()=>{this.nodes.root.classList.remove(bt.CSS.noFocus)},this.removeSpecialHoverBehavior=()=>{this.nodes.root.classList.remove(bt.CSS.noHover)},this.onErrorAnimationEnd=()=>{this.nodes.icon.classList.remove(bt.CSS.wobbleAnimation),this.nodes.icon.removeEventListener("animationend",this.onErrorAnimationEnd)},this.params=t,this.nodes.root=this.make(t)}get isDisabled(){return this.params.isDisabled}get toggle(){return this.params.toggle}get title(){return this.params.title}get closeOnActivate(){return this.params.closeOnActivate}get isConfirmationStateEnabled(){return null!==this.confirmationState}get isFocused(){return this.nodes.root.classList.contains(bt.CSS.focused)}static get CSS(){return{container:"ce-popover-item",title:"ce-popover-item__title",secondaryTitle:"ce-popover-item__secondary-title",icon:"ce-popover-item__icon",active:"ce-popover-item--active",disabled:"ce-popover-item--disabled",focused:"ce-popover-item--focused",hidden:"ce-popover-item--hidden",confirmationState:"ce-popover-item--confirmation",noHover:"ce-popover-item--no-hover",noFocus:"ce-popover-item--no-focus",wobbleAnimation:"wobble"}}getElement(){return this.nodes.root}handleClick(){this.isConfirmationStateEnabled?this.activateOrEnableConfirmationMode(this.confirmationState):this.activateOrEnableConfirmationMode(this.params)}toggleActive(t){this.nodes.root.classList.toggle(bt.CSS.active,t)}toggleHidden(t){this.nodes.root.classList.toggle(bt.CSS.hidden,t)}reset(){this.isConfirmationStateEnabled&&this.disableConfirmationMode()}onFocus(){this.disableSpecialHoverAndFocusBehavior()}make(t){const e=B.make("div",bt.CSS.container);return t.name&&(e.dataset.itemName=t.name),this.nodes.icon=B.make("div",bt.CSS.icon,{innerHTML:t.icon||'<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><circle cx="12" cy="12" r="4" stroke="currentColor" stroke-width="2"/></svg>'}),e.appendChild(this.nodes.icon),e.appendChild(B.make("div",bt.CSS.title,{innerHTML:t.title||""})),t.secondaryLabel&&e.appendChild(B.make("div",bt.CSS.secondaryTitle,{textContent:t.secondaryLabel})),t.isActive&&e.classList.add(bt.CSS.active),t.isDisabled&&e.classList.add(bt.CSS.disabled),e}enableConfirmationMode(t){const e={...this.params,...t,confirmation:t.confirmation},i=this.make(e);this.nodes.root.innerHTML=i.innerHTML,this.nodes.root.classList.add(bt.CSS.confirmationState),this.confirmationState=t,this.enableSpecialHoverAndFocusBehavior()}disableConfirmationMode(){const t=this.make(this.params);this.nodes.root.innerHTML=t.innerHTML,this.nodes.root.classList.remove(bt.CSS.confirmationState),this.confirmationState=null,this.disableSpecialHoverAndFocusBehavior()}enableSpecialHoverAndFocusBehavior(){this.nodes.root.classList.add(bt.CSS.noHover),this.nodes.root.classList.add(bt.CSS.noFocus),this.nodes.root.addEventListener("mouseleave",this.removeSpecialHoverBehavior,{once:!0})}disableSpecialHoverAndFocusBehavior(){this.removeSpecialFocusBehavior(),this.removeSpecialHoverBehavior(),this.nodes.root.removeEventListener("mouseleave",this.removeSpecialHoverBehavior)}activateOrEnableConfirmationMode(t){if(void 0===t.confirmation)try{t.onActivate(t),this.disableConfirmationMode()}catch{this.animateError()}else this.enableConfirmationMode(t.confirmation)}animateError(){this.nodes.icon.classList.contains(bt.CSS.wobbleAnimation)||(this.nodes.icon.classList.add(bt.CSS.wobbleAnimation),this.nodes.icon.addEventListener("animationend",this.onErrorAnimationEnd))}}const vt=class{constructor(t,e){this.cursor=-1,this.items=[],this.items=t||[],this.focusedCssClass=e}get currentItem(){return-1===this.cursor?null:this.items[this.cursor]}setCursor(t){t<this.items.length&&t>=-1&&(this.dropCursor(),this.cursor=t,this.items[this.cursor].classList.add(this.focusedCssClass))}setItems(t){this.items=t}next(){this.cursor=this.leafNodesAndReturnIndex(vt.directions.RIGHT)}previous(){this.cursor=this.leafNodesAndReturnIndex(vt.directions.LEFT)}dropCursor(){-1!==this.cursor&&(this.items[this.cursor].classList.remove(this.focusedCssClass),this.cursor=-1)}leafNodesAndReturnIndex(t){if(0===this.items.length)return this.cursor;let e=this.cursor;return-1===e?e=t===vt.directions.RIGHT?-1:0:this.items[e].classList.remove(this.focusedCssClass),e=t===vt.directions.RIGHT?(e+1)%this.items.length:(this.items.length+e-1)%this.items.length,B.canSetCaret(this.items[e])&&k((()=>U.setCursor(this.items[e])),50)(),this.items[e].classList.add(this.focusedCssClass),e}};let yt=vt;yt.directions={RIGHT:"right",LEFT:"left"};class wt{constructor(t){this.iterator=null,this.activated=!1,this.flipCallbacks=[],this.onKeyDown=t=>{if(this.isEventReadyForHandling(t))switch(wt.usedKeys.includes(t.keyCode)&&t.preventDefault(),t.keyCode){case 9:this.handleTabPress(t);break;case 37:case a:this.flipLeft();break;case 39:case l:this.flipRight();break;case r:this.handleEnterPress(t)}},this.iterator=new yt(t.items,t.focusedItemClass),this.activateCallback=t.activateCallback,this.allowedKeys=t.allowedKeys||wt.usedKeys}get isActivated(){return this.activated}static get usedKeys(){return[9,37,39,r,a,l]}activate(t,e){this.activated=!0,t&&this.iterator.setItems(t),void 0!==e&&this.iterator.setCursor(e),document.addEventListener("keydown",this.onKeyDown,!0)}deactivate(){this.activated=!1,this.dropCursor(),document.removeEventListener("keydown",this.onKeyDown)}focusFirst(){this.dropCursor(),this.flipRight()}flipLeft(){this.iterator.previous(),this.flipCallback()}flipRight(){this.iterator.next(),this.flipCallback()}hasFocus(){return!!this.iterator.currentItem}onFlip(t){this.flipCallbacks.push(t)}removeOnFlip(t){this.flipCallbacks=this.flipCallbacks.filter((e=>e!==t))}dropCursor(){this.iterator.dropCursor()}isEventReadyForHandling(t){return this.activated&&this.allowedKeys.includes(t.keyCode)}handleTabPress(t){switch(t.shiftKey?yt.directions.LEFT:yt.directions.RIGHT){case yt.directions.RIGHT:this.flipRight();break;case yt.directions.LEFT:this.flipLeft()}}handleEnterPress(t){this.activated&&(this.iterator.currentItem&&(t.stopPropagation(),t.preventDefault(),this.iterator.currentItem.click()),p(this.activateCallback)&&this.activateCallback(this.iterator.currentItem))}flipCallback(){this.iterator.currentItem&&this.iterator.currentItem.scrollIntoViewIfNeeded(),this.flipCallbacks.forEach((t=>t()))}}class kt{static get CSS(){return{wrapper:"cdx-search-field",icon:"cdx-search-field__icon",input:"cdx-search-field__input"}}constructor({items:t,onSearch:e,placeholder:i}){this.listeners=new H,this.items=t,this.onSearch=e,this.render(i)}getElement(){return this.wrapper}focus(){this.input.focus()}clear(){this.input.value="",this.searchQuery="",this.onSearch("",this.foundItems)}destroy(){this.listeners.removeAll()}render(t){this.wrapper=B.make("div",kt.CSS.wrapper);const e=B.make("div",kt.CSS.icon,{innerHTML:'<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><circle cx="10.5" cy="10.5" r="5.5" stroke="currentColor" stroke-width="2"/><line x1="15.4142" x2="19" y1="15" y2="18.5858" stroke="currentColor" stroke-linecap="round" stroke-width="2"/></svg>'});this.input=B.make("input",kt.CSS.input,{placeholder:t,tabIndex:-1}),this.wrapper.appendChild(e),this.wrapper.appendChild(this.input),this.listeners.on(this.input,"input",(()=>{this.searchQuery=this.input.value,this.onSearch(this.searchQuery,this.foundItems)}))}get foundItems(){return this.items.filter((t=>this.checkItem(t)))}checkItem(t){var e;const i=(null==(e=t.title)?void 0:e.toLowerCase())||"",n=this.searchQuery.toLowerCase();return i.includes(n)}}const xt=class{lock(){L?this.lockHard():document.body.classList.add(xt.CSS.scrollLocked)}unlock(){L?this.unlockHard():document.body.classList.remove(xt.CSS.scrollLocked)}lockHard(){this.scrollPosition=window.pageYOffset,document.documentElement.style.setProperty("--window-scroll-offset",`${this.scrollPosition}px`),document.body.classList.add(xt.CSS.scrollLockedHard)}unlockHard(){document.body.classList.remove(xt.CSS.scrollLockedHard),null!==this.scrollPosition&&window.scrollTo(0,this.scrollPosition),this.scrollPosition=null}};let Et=xt;Et.CSS={scrollLocked:"ce-scroll-locked",scrollLockedHard:"ce-scroll-locked--hard"};var Ct=Object.defineProperty,At=Object.getOwnPropertyDescriptor,St=(t=>(t.Close="close",t))(St||{});const _t=class extends F{constructor(t){super(),this.scopeElement=document.body,this.listeners=new H,this.scrollLocker=new Et,this.nodes={wrapper:null,popover:null,nothingFoundMessage:null,customContent:null,items:null,overlay:null},this.messages={nothingFound:"Nothing found",search:"Search"},this.onFlip=()=>{this.items.find((t=>t.isFocused)).onFocus()},this.items=t.items.map((t=>new bt(t))),void 0!==t.scopeElement&&(this.scopeElement=t.scopeElement),t.messages&&(this.messages={...this.messages,...t.messages}),t.customContentFlippableItems&&(this.customContentFlippableItems=t.customContentFlippableItems),this.make(),t.customContent&&this.addCustomContent(t.customContent),t.searchable&&this.addSearch(),this.initializeFlipper()}static get CSS(){return{popover:"ce-popover",popoverOpenTop:"ce-popover--open-top",popoverOpened:"ce-popover--opened",search:"ce-popover__search",nothingFoundMessage:"ce-popover__nothing-found-message",nothingFoundMessageDisplayed:"ce-popover__nothing-found-message--displayed",customContent:"ce-popover__custom-content",customContentHidden:"ce-popover__custom-content--hidden",items:"ce-popover__items",overlay:"ce-popover__overlay",overlayHidden:"ce-popover__overlay--hidden"}}getElement(){return this.nodes.wrapper}hasFocus(){return this.flipper.hasFocus()}show(){this.shouldOpenBottom||(this.nodes.popover.style.setProperty("--popover-height",this.height+"px"),this.nodes.popover.classList.add(_t.CSS.popoverOpenTop)),this.nodes.overlay.classList.remove(_t.CSS.overlayHidden),this.nodes.popover.classList.add(_t.CSS.popoverOpened),this.flipper.activate(this.flippableElements),void 0!==this.search&&requestAnimationFrame((()=>{var t;null==(t=this.search)||t.focus()})),I()&&this.scrollLocker.lock()}hide(){this.nodes.popover.classList.remove(_t.CSS.popoverOpened),this.nodes.popover.classList.remove(_t.CSS.popoverOpenTop),this.nodes.overlay.classList.add(_t.CSS.overlayHidden),this.flipper.deactivate(),this.items.forEach((t=>t.reset())),void 0!==this.search&&this.search.clear(),I()&&this.scrollLocker.unlock(),this.emit("close")}destroy(){this.flipper.deactivate(),this.listeners.removeAll(),I()&&this.scrollLocker.unlock()}make(){this.nodes.popover=B.make("div",[_t.CSS.popover]),this.nodes.nothingFoundMessage=B.make("div",[_t.CSS.nothingFoundMessage],{textContent:this.messages.nothingFound}),this.nodes.popover.appendChild(this.nodes.nothingFoundMessage),this.nodes.items=B.make("div",[_t.CSS.items]),this.items.forEach((t=>{this.nodes.items.appendChild(t.getElement())})),this.nodes.popover.appendChild(this.nodes.items),this.listeners.on(this.nodes.popover,"click",(t=>{const e=this.getTargetItem(t);void 0!==e&&this.handleItemClick(e)})),this.nodes.wrapper=B.make("div"),this.nodes.overlay=B.make("div",[_t.CSS.overlay,_t.CSS.overlayHidden]),this.listeners.on(this.nodes.overlay,"click",(()=>{this.hide()})),this.nodes.wrapper.appendChild(this.nodes.overlay),this.nodes.wrapper.appendChild(this.nodes.popover)}addSearch(){this.search=new kt({items:this.items,placeholder:this.messages.search,onSearch:(t,e)=>{this.items.forEach((t=>{const i=!e.includes(t);t.toggleHidden(i)})),this.toggleNothingFoundMessage(0===e.length),this.toggleCustomContent(""!==t);const i=""===t?this.flippableElements:e.map((t=>t.getElement()));this.flipper.isActivated&&(this.flipper.deactivate(),this.flipper.activate(i))}});const t=this.search.getElement();t.classList.add(_t.CSS.search),this.nodes.popover.insertBefore(t,this.nodes.popover.firstChild)}addCustomContent(t){this.nodes.customContent=t,this.nodes.customContent.classList.add(_t.CSS.customContent),this.nodes.popover.insertBefore(t,this.nodes.popover.firstChild)}getTargetItem(t){return this.items.find((e=>t.composedPath().includes(e.getElement())))}handleItemClick(t){t.isDisabled||(this.items.filter((e=>e!==t)).forEach((t=>t.reset())),t.handleClick(),this.toggleItemActivenessIfNeeded(t),t.closeOnActivate&&this.hide())}initializeFlipper(){this.flipper=new wt({items:this.flippableElements,focusedItemClass:bt.CSS.focused,allowedKeys:[9,a,l,r]}),this.flipper.onFlip(this.onFlip)}get flippableElements(){const t=this.items.map((t=>t.getElement()));return(this.customContentFlippableItems||[]).concat(t)}get height(){let t=0;if(null===this.nodes.popover)return t;const e=this.nodes.popover.cloneNode(!0);return e.style.visibility="hidden",e.style.position="absolute",e.style.top="-1000px",e.classList.add(_t.CSS.popoverOpened),document.body.appendChild(e),t=e.offsetHeight,e.remove(),t}get shouldOpenBottom(){const t=this.nodes.popover.getBoundingClientRect(),e=this.scopeElement.getBoundingClientRect(),i=this.height,n=t.top+i,s=t.top-i,o=Math.min(window.innerHeight,e.bottom);return s<e.top||n<=o}toggleNothingFoundMessage(t){this.nodes.nothingFoundMessage.classList.toggle(_t.CSS.nothingFoundMessageDisplayed,t)}toggleCustomContent(t){var e;null==(e=this.nodes.customContent)||e.classList.toggle(_t.CSS.customContentHidden,t)}toggleItemActivenessIfNeeded(t){if(!0===t.toggle&&t.toggleActive(),"string"==typeof t.toggle){const e=this.items.filter((e=>e.toggle===t.toggle));if(1===e.length)return void t.toggleActive();e.forEach((e=>{e.toggleActive(e===t)}))}}};let Tt=_t;((t,e,i,n)=>{for(var s,o=At(e,i),r=t.length-1;r>=0;r--)(s=t[r])&&(o=s(e,i,o)||o);o&&Ct(e,i,o)})([M],Tt.prototype,"height");class Mt extends j{constructor(){super(...arguments),this.opened=!1,this.tools=[],this.flipper=null,this.togglingCallback=null}static get CSS(){return{conversionToolbarWrapper:"ce-conversion-toolbar",conversionToolbarShowed:"ce-conversion-toolbar--showed",conversionToolbarTools:"ce-conversion-toolbar__tools",conversionToolbarLabel:"ce-conversion-toolbar__label",conversionTool:"ce-conversion-tool",conversionToolHidden:"ce-conversion-tool--hidden",conversionToolIcon:"ce-conversion-tool__icon",conversionToolSecondaryLabel:"ce-conversion-tool__secondary-label",conversionToolFocused:"ce-conversion-tool--focused",conversionToolActive:"ce-conversion-tool--active"}}make(){this.nodes.wrapper=B.make("div",[Mt.CSS.conversionToolbarWrapper,...this.isRtl?[this.Editor.UI.CSS.editorRtlFix]:[]]),this.nodes.tools=B.make("div",Mt.CSS.conversionToolbarTools);const t=B.make("div",Mt.CSS.conversionToolbarLabel,{textContent:D.ui(gt.ui.inlineToolbar.converter,"Convert to")});return this.addTools(),this.enableFlipper(),B.append(this.nodes.wrapper,t),B.append(this.nodes.wrapper,this.nodes.tools),this.nodes.wrapper}destroy(){this.flipper&&(this.flipper.deactivate(),this.flipper=null),this.removeAllNodes()}toggle(t){this.opened?this.close():this.open(),p(t)&&(this.togglingCallback=t)}open(){this.filterTools(),this.opened=!0,this.nodes.wrapper.classList.add(Mt.CSS.conversionToolbarShowed),window.requestAnimationFrame((()=>{this.flipper.activate(this.tools.map((t=>t.button)).filter((t=>!t.classList.contains(Mt.CSS.conversionToolHidden)))),this.flipper.focusFirst(),p(this.togglingCallback)&&this.togglingCallback(!0)}))}close(){this.opened=!1,this.flipper.deactivate(),this.nodes.wrapper.classList.remove(Mt.CSS.conversionToolbarShowed),p(this.togglingCallback)&&this.togglingCallback(!1)}hasTools(){return 1!==this.tools.length||this.tools[0].name!==this.config.defaultBlock}async replaceWithBlock(t,e){const{BlockManager:i,BlockSelection:n,InlineToolbar:s,Caret:o}=this.Editor;i.convert(this.Editor.BlockManager.currentBlock,t,e),n.clearSelection(),this.close(),s.close(),window.requestAnimationFrame((()=>{o.setToBlock(this.Editor.BlockManager.currentBlock,o.positions.END)}))}addTools(){const t=this.Editor.Tools.blockTools;Array.from(t.entries()).forEach((([t,e])=>{var i;const n=e.conversionConfig;!n||!n.import||null==(i=e.toolbox)||i.forEach((e=>this.addToolIfValid(t,e)))}))}addToolIfValid(t,e){v(e)||!e.icon||this.addTool(t,e)}addTool(t,e){var i;const n=B.make("div",[Mt.CSS.conversionTool]),s=B.make("div",[Mt.CSS.conversionToolIcon]);n.dataset.tool=t,s.innerHTML=e.icon,B.append(n,s),B.append(n,B.text(D.t(gt.toolNames,e.title||C(t))));const o=null==(i=this.Editor.Tools.blockTools.get(t))?void 0:i.shortcut;if(o){const t=B.make("span",Mt.CSS.conversionToolSecondaryLabel,{innerText:S(o)});B.append(n,t)}B.append(this.nodes.tools,n),this.tools.push({name:t,button:n,toolboxItem:e}),this.listeners.on(n,"click",(async()=>{await this.replaceWithBlock(t,e.data)}))}async filterTools(){const{currentBlock:t}=this.Editor.BlockManager,e=await t.getActiveToolboxEntry();this.tools.forEach((i=>{let n=!1;if(e){const s=function(t,e){return t.icon===e.icon&&t.title===e.title}(e,i.toolboxItem);n=i.button.dataset.tool===t.name&&s}i.button.hidden=n,i.button.classList.toggle(Mt.CSS.conversionToolHidden,n)}))}enableFlipper(){this.flipper=new wt({focusedItemClass:Mt.CSS.conversionToolFocused})}}var It={},Lt={get exports(){return It},set exports(t){It=t}};!function(t,e){window,t.exports=function(t){var e={};function i(n){if(e[n])return e[n].exports;var s=e[n]={i:n,l:!1,exports:{}};return t[n].call(s.exports,s,s.exports,i),s.l=!0,s.exports}return i.m=t,i.c=e,i.d=function(t,e,n){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},i.r=function(t){typeof Symbol<"u"&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e||4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var s in t)i.d(n,s,function(e){return t[e]}.bind(null,s));return n},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=0)}([function(t,e,i){function n(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function s(t,e,i){return e&&n(t.prototype,e),i&&n(t,i),t}i.r(e);var o=function(){function t(e){var i=this;(function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")})(this,t),this.commands={},this.keys={},this.name=e.name,this.parseShortcutName(e.name),this.element=e.on,this.callback=e.callback,this.executeShortcut=function(t){i.execute(t)},this.element.addEventListener("keydown",this.executeShortcut,!1)}return s(t,null,[{key:"supportedCommands",get:function(){return{SHIFT:["SHIFT"],CMD:["CMD","CONTROL","COMMAND","WINDOWS","CTRL"],ALT:["ALT","OPTION"]}}},{key:"keyCodes",get:function(){return{0:48,1:49,2:50,3:51,4:52,5:53,6:54,7:55,8:56,9:57,A:65,B:66,C:67,D:68,E:69,F:70,G:71,H:72,I:73,J:74,K:75,L:76,M:77,N:78,O:79,P:80,Q:81,R:82,S:83,T:84,U:85,V:86,W:87,X:88,Y:89,Z:90,BACKSPACE:8,ENTER:13,ESCAPE:27,LEFT:37,UP:38,RIGHT:39,DOWN:40,INSERT:45,DELETE:46,".":190}}}]),s(t,[{key:"parseShortcutName",value:function(e){e=e.split("+");for(var i=0;i<e.length;i++){e[i]=e[i].toUpperCase();var n=!1;for(var s in t.supportedCommands)if(t.supportedCommands[s].includes(e[i])){n=this.commands[s]=!0;break}n||(this.keys[e[i]]=!0)}for(var o in t.supportedCommands)this.commands[o]||(this.commands[o]=!1)}},{key:"execute",value:function(e){var i,n={CMD:e.ctrlKey||e.metaKey,SHIFT:e.shiftKey,ALT:e.altKey},s=!0;for(i in this.commands)this.commands[i]!==n[i]&&(s=!1);var o,r=!0;for(o in this.keys)r=r&&e.keyCode===t.keyCodes[o];s&&r&&this.callback(e)}},{key:"remove",value:function(){this.element.removeEventListener("keydown",this.executeShortcut)}}]),t}();e.default=o}]).default}(Lt);const Bt=n(It),Pt=new class{constructor(){this.registeredShortcuts=new Map}add(t){if(this.findShortcut(t.on,t.name))throw Error(`Shortcut ${t.name} is already registered for ${t.on}. Please remove it before add a new handler.`);const e=new Bt({name:t.name,on:t.on,callback:t.handler}),i=this.registeredShortcuts.get(t.on)||[];this.registeredShortcuts.set(t.on,[...i,e])}remove(t,e){const i=this.findShortcut(t,e);if(!i)return;i.remove();const n=this.registeredShortcuts.get(t);this.registeredShortcuts.set(t,n.filter((t=>t!==i)))}findShortcut(t,e){return(this.registeredShortcuts.get(t)||[]).find((({name:t})=>t===e))}};var Rt=Object.defineProperty,Dt=Object.getOwnPropertyDescriptor,Ot=(t,e,i,n)=>{for(var s,o=n>1?void 0:n?Dt(e,i):e,r=t.length-1;r>=0;r--)(s=t[r])&&(o=(n?s(e,i,o):s(o))||o);return n&&o&&Rt(e,i,o),o},Ft=(t=>(t.Opened="toolbox-opened",t.Closed="toolbox-closed",t.BlockAdded="toolbox-block-added",t))(Ft||{});const Nt=class extends F{constructor({api:t,tools:e,i18nLabels:i}){super(),this.opened=!1,this.nodes={toolbox:null},this.onPopoverClose=()=>{this.opened=!1,this.emit("toolbox-closed")},this.api=t,this.tools=e,this.i18nLabels=i}get isEmpty(){return 0===this.toolsToBeDisplayed.length}static get CSS(){return{toolbox:"ce-toolbox"}}make(){return this.popover=new Tt({scopeElement:this.api.ui.nodes.redactor,searchable:!0,messages:{nothingFound:this.i18nLabels.nothingFound,search:this.i18nLabels.filter},items:this.toolboxItemsToBeDisplayed}),this.popover.on(St.Close,this.onPopoverClose),this.enableShortcuts(),this.nodes.toolbox=this.popover.getElement(),this.nodes.toolbox.classList.add(Nt.CSS.toolbox),this.nodes.toolbox}hasFocus(){var t;return null==(t=this.popover)?void 0:t.hasFocus()}destroy(){var t;super.destroy(),this.nodes&&this.nodes.toolbox&&(this.nodes.toolbox.remove(),this.nodes.toolbox=null),this.removeAllShortcuts(),null==(t=this.popover)||t.off(St.Close,this.onPopoverClose)}toolButtonActivated(t,e){this.insertNewBlock(t,e)}open(){var t;this.isEmpty||(null==(t=this.popover)||t.show(),this.opened=!0,this.emit("toolbox-opened"))}close(){var t;null==(t=this.popover)||t.hide(),this.opened=!1,this.emit("toolbox-closed")}toggle(){this.opened?this.close():this.open()}get toolsToBeDisplayed(){const t=[];return this.tools.forEach((e=>{e.toolbox&&t.push(e)})),t}get toolboxItemsToBeDisplayed(){const t=(t,e)=>({icon:t.icon,title:D.t(gt.toolNames,t.title||C(e.name)),name:e.name,onActivate:()=>{this.toolButtonActivated(e.name,t.data)},secondaryLabel:e.shortcut?S(e.shortcut):""});return this.toolsToBeDisplayed.reduce(((e,i)=>(Array.isArray(i.toolbox)?i.toolbox.forEach((n=>{e.push(t(n,i))})):void 0!==i.toolbox&&e.push(t(i.toolbox,i)),e)),[])}enableShortcuts(){this.toolsToBeDisplayed.forEach((t=>{const e=t.shortcut;e&&this.enableShortcutForTool(t.name,e)}))}enableShortcutForTool(t,e){Pt.add({name:e,on:this.api.ui.nodes.redactor,handler:e=>{e.preventDefault();const i=this.api.blocks.getCurrentBlockIndex(),n=this.api.blocks.getBlockByIndex(i);if(n)try{return this.api.blocks.convert(n.id,t),void window.requestAnimationFrame((()=>{this.api.caret.setToBlock(i,"end")}))}catch{}this.insertNewBlock(t)}})}removeAllShortcuts(){this.toolsToBeDisplayed.forEach((t=>{const e=t.shortcut;e&&Pt.remove(this.api.ui.nodes.redactor,e)}))}async insertNewBlock(t,e){const i=this.api.blocks.getCurrentBlockIndex(),n=this.api.blocks.getBlockByIndex(i);if(!n)return;const s=n.isEmpty?i:i+1;let o;if(e){const i=await this.api.blocks.composeBlockData(t);o=Object.assign(i,e)}const r=this.api.blocks.insert(t,o,void 0,s,void 0,n.isEmpty);r.call(G.APPEND_CALLBACK),this.api.caret.setToBlock(s),this.emit("toolbox-block-added",{block:r}),this.api.toolbar.close()}};let Ht=Nt;Ot([M],Ht.prototype,"toolsToBeDisplayed",1),Ot([M],Ht.prototype,"toolboxItemsToBeDisplayed",1);const jt="block hovered";var Ut=(t=>(t[t.Block=0]="Block",t[t.Inline=1]="Inline",t[t.Tune=2]="Tune",t))(Ut||{}),zt=(t=>(t.Shortcut="shortcut",t.Toolbox="toolbox",t.EnabledInlineTools="inlineToolbar",t.EnabledBlockTunes="tunes",t.Config="config",t))(zt||{}),qt=(t=>(t.Shortcut="shortcut",t.SanitizeConfig="sanitize",t))(qt||{}),$t=(t=>(t.IsEnabledLineBreaks="enableLineBreaks",t.Toolbox="toolbox",t.ConversionConfig="conversionConfig",t.IsReadOnlySupported="isReadOnlySupported",t.PasteConfig="pasteConfig",t))($t||{}),Vt=(t=>(t.IsInline="isInline",t.Title="title",t))(Vt||{}),Wt=(t=>(t.IsTune="isTune",t))(Wt||{});class Gt{constructor({name:t,constructable:e,config:i,api:n,isDefault:s,isInternal:o=!1,defaultPlaceholder:r}){this.api=n,this.name=t,this.constructable=e,this.config=i,this.isDefault=s,this.isInternal=o,this.defaultPlaceholder=r}get settings(){const t=this.config.config||{};return this.isDefault&&!("placeholder"in t)&&this.defaultPlaceholder&&(t.placeholder=this.defaultPlaceholder),t}reset(){if(p(this.constructable.reset))return this.constructable.reset()}prepare(){if(p(this.constructable.prepare))return this.constructable.prepare({toolName:this.name,config:this.settings})}get shortcut(){const t=this.constructable.shortcut;return this.config.shortcut||t}get sanitizeConfig(){return this.constructable.sanitize||{}}isInline(){return 1===this.type}isBlock(){return 0===this.type}isTune(){return 2===this.type}}class Kt{constructor(t){this.blocks=[],this.workingArea=t}get length(){return this.blocks.length}get array(){return this.blocks}get nodes(){return w(this.workingArea.children)}static set(t,e,i){return isNaN(Number(e))?(Reflect.set(t,e,i),!0):(t.insert(+e,i),!0)}static get(t,e){return isNaN(Number(e))?Reflect.get(t,e):t.get(+e)}push(t){this.blocks.push(t),this.insertToDOM(t)}swap(t,e){const i=this.blocks[e];B.swap(this.blocks[t].holder,i.holder),this.blocks[e]=this.blocks[t],this.blocks[t]=i}move(t,e){const i=this.blocks.splice(e,1)[0],n=t-1,s=Math.max(0,n),o=this.blocks[s];t>0?this.insertToDOM(i,"afterend",o):this.insertToDOM(i,"beforebegin",o),this.blocks.splice(t,0,i);const r=this.composeBlockEvent("move",{fromIndex:e,toIndex:t});i.call(G.MOVED,r)}insert(t,e,i=!1){if(!this.length)return void this.push(e);t>this.length&&(t=this.length),i&&(this.blocks[t].holder.remove(),this.blocks[t].call(G.REMOVED));const n=i?1:0;if(this.blocks.splice(t,n,e),t>0){const i=this.blocks[t-1];this.insertToDOM(e,"afterend",i)}else{const i=this.blocks[t+1];i?this.insertToDOM(e,"beforebegin",i):this.insertToDOM(e)}}replace(t,e){if(void 0===this.blocks[t])throw Error("Incorrect index");this.blocks[t].holder.replaceWith(e.holder),this.blocks[t]=e}insertMany(t,e){const i=new DocumentFragment;for(const e of t)i.appendChild(e.holder);if(this.length>0){if(e>0){const t=Math.min(e-1,this.length-1);this.blocks[t].holder.after(i)}else 0===e&&this.workingArea.prepend(i);this.blocks.splice(e,0,...t)}else this.blocks.push(...t),this.workingArea.appendChild(i);t.forEach((t=>t.call(G.RENDERED)))}remove(t){isNaN(t)&&(t=this.length-1),this.blocks[t].holder.remove(),this.blocks[t].call(G.REMOVED),this.blocks.splice(t,1)}removeAll(){this.workingArea.innerHTML="",this.blocks.forEach((t=>t.call(G.REMOVED))),this.blocks.length=0}insertAfter(t,e){const i=this.blocks.indexOf(t);this.insert(i+1,e)}get(t){return this.blocks[t]}indexOf(t){return this.blocks.indexOf(t)}insertToDOM(t,e,i){e?i.holder.insertAdjacentElement(e,t.holder):this.workingArea.appendChild(t.holder),t.call(G.RENDERED)}composeBlockEvent(t,e){return new CustomEvent(t,{detail:e})}}const Xt="block-removed",Yt="block-added",Jt="block-changed";class Qt{constructor(){this.completed=Promise.resolve()}add(t){return new Promise(((e,i)=>{this.completed=this.completed.then(t).then(e).catch(i)}))}}class Zt extends j{get positions(){return{START:"start",END:"end",DEFAULT:"default"}}static get CSS(){return{shadowCaret:"cdx-shadow-caret"}}get isAtStart(){const{currentBlock:t}=this.Editor.BlockManager;if(!t.focusable)return!0;const e=U.get(),i=B.getDeepestNode(t.currentInput);let n=e.focusNode;if(B.isNativeInput(i))return 0===i.selectionEnd;if(!e.anchorNode)return!1;let s=n.textContent.search(/\S/);-1===s&&(s=0);let o=e.focusOffset;return n.nodeType!==Node.TEXT_NODE&&n.childNodes.length&&(n.childNodes[o]?(n=n.childNodes[o],o=0):(n=n.childNodes[o-1],o=n.textContent.length)),!(!B.isLineBreakTag(i)&&!B.isEmpty(i)||!this.getHigherLevelSiblings(n,"left").every((t=>{const e=B.isLineBreakTag(t),i=1===t.children.length&&B.isLineBreakTag(t.children[0]),n=e||i;return B.isEmpty(t)&&!n}))||o!==s)||null===i||n===i&&o<=s}get isAtEnd(){const{currentBlock:t}=this.Editor.BlockManager;if(!t.focusable)return!0;const e=U.get();let i=e.focusNode;const n=B.getDeepestNode(t.currentInput,!0);if(B.isNativeInput(n))return n.selectionEnd===n.value.length;if(!e.focusNode)return!1;let s=e.focusOffset;if(i.nodeType!==Node.TEXT_NODE&&i.childNodes.length&&(i.childNodes[s-1]?(i=i.childNodes[s-1],s=i.textContent.length):(i=i.childNodes[0],s=0)),B.isLineBreakTag(n)||B.isEmpty(n)){const t=this.getHigherLevelSiblings(i,"right");if(t.every(((e,i)=>i===t.length-1&&B.isLineBreakTag(e)||B.isEmpty(e)&&!B.isLineBreakTag(e)))&&s===i.textContent.length)return!0}const o=n.textContent.replace(/\s+$/,"");return i===n&&s>=o.length}setToBlock(t,e=this.positions.DEFAULT,i=0){var n;const{BlockManager:s,BlockSelection:o}=this.Editor;if(o.clearSelection(),!t.focusable)return null==(n=window.getSelection())||n.removeAllRanges(),o.selectBlock(t),void(s.currentBlock=t);let r;switch(e){case this.positions.START:r=t.firstInput;break;case this.positions.END:r=t.lastInput;break;default:r=t.currentInput}if(!r)return;const a=B.getDeepestNode(r,e===this.positions.END),l=B.getContentLength(a);switch(!0){case e===this.positions.START:i=0;break;case e===this.positions.END:case i>l:i=l}this.set(a,i),s.setCurrentBlockByChildNode(t.holder),s.currentBlock.currentInput=r}setToInput(t,e=this.positions.DEFAULT,i=0){const{currentBlock:n}=this.Editor.BlockManager,s=B.getDeepestNode(t);switch(e){case this.positions.START:this.set(s,0);break;case this.positions.END:this.set(s,B.getContentLength(s));break;default:i&&this.set(s,i)}n.currentInput=t}set(t,e=0){const{top:i,bottom:n}=U.setCursor(t,e),{innerHeight:s}=window;i<0?window.scrollBy(0,i-30):n>s&&window.scrollBy(0,n-s+30)}setToTheLastBlock(){const t=this.Editor.BlockManager.lastBlock;if(t)if(t.tool.isDefault&&t.isEmpty)this.setToBlock(t);else{const t=this.Editor.BlockManager.insertAtEnd();this.setToBlock(t)}}extractFragmentFromCaretPosition(){const t=U.get();if(t.rangeCount){const e=t.getRangeAt(0),i=this.Editor.BlockManager.currentBlock.currentInput;if(e.deleteContents(),i){if(B.isNativeInput(i)){const t=i,e=document.createDocumentFragment(),n=t.value.substring(0,t.selectionStart),s=t.value.substring(t.selectionStart);return e.textContent=s,t.value=n,e}{const t=e.cloneRange();return t.selectNodeContents(i),t.setStart(e.endContainer,e.endOffset),t.extractContents()}}}}navigateNext(t=!1){const{BlockManager:e}=this.Editor,{currentBlock:i,nextBlock:n}=e,{nextInput:s}=i,o=this.isAtEnd;let r=n;const a=t||o;if(s&&a)return this.setToInput(s,this.positions.START),!0;if(null===r){if(i.tool.isDefault||!a)return!1;r=e.insertAtEnd()}return!!a&&(this.setToBlock(r,this.positions.START),!0)}navigatePrevious(t=!1){const{currentBlock:e,previousBlock:i}=this.Editor.BlockManager;if(!e)return!1;const{previousInput:n}=e,s=t||this.isAtStart;return n&&s?(this.setToInput(n,this.positions.END),!0):!(null===i||!s||(this.setToBlock(i,this.positions.END),0))}createShadow(t){const e=document.createElement("span");e.classList.add(Zt.CSS.shadowCaret),t.insertAdjacentElement("beforeend",e)}restoreCaret(t){const e=t.querySelector(`.${Zt.CSS.shadowCaret}`);if(!e)return;(new U).expandToTag(e);const i=document.createRange();i.selectNode(e),i.extractContents()}insertContentAtCaretPosition(t){const e=document.createDocumentFragment(),i=document.createElement("div"),n=U.get(),s=U.range;i.innerHTML=t,Array.from(i.childNodes).forEach((t=>e.appendChild(t))),0===e.childNodes.length&&e.appendChild(new Text);const o=e.lastChild;s.deleteContents(),s.insertNode(e);const r=document.createRange(),a=o.nodeType===Node.TEXT_NODE?o:o.firstChild;null!==a&&null!==a.textContent&&r.setStart(a,a.textContent.length),n.removeAllRanges(),n.addRange(r)}getHigherLevelSiblings(t,e){let i=t;const n=[];for(;i.parentNode&&"true"!==i.parentNode.contentEditable;)i=i.parentNode;const s="left"===e?"previousSibling":"nextSibling";for(;i[s];)i=i[s],n.push(i);return n}}const te=class extends j{constructor(){super(...arguments),this.MIME_TYPE="application/x-editor-js",this.toolsTags={},this.tagsByTool={},this.toolsPatterns=[],this.toolsFiles={},this.exceptionList=[],this.processTool=t=>{try{const e=t.create({},{},!1);if(!1===t.pasteConfig)return void this.exceptionList.push(t.name);if(!p(e.onPaste))return;this.getTagsConfig(t),this.getFilesConfig(t),this.getPatternsConfig(t)}catch(e){d(`Paste handling for «${t.name}» Tool hasn't been set up because of the error`,"warn",e)}},this.handlePasteEvent=async t=>{const{BlockManager:e,Toolbar:i}=this.Editor,n=e.setCurrentBlockByChildNode(t.target);!n||this.isNativeBehaviour(t.target)&&!t.clipboardData.types.includes("Files")||n&&this.exceptionList.includes(n.name)||(t.preventDefault(),this.processDataTransfer(t.clipboardData),i.close())}}async prepare(){this.processTools()}toggleReadOnly(t){t?this.unsetCallback():this.setCallback()}async processDataTransfer(t,e=!1){const{Tools:i}=this.Editor,n=t.types;if((n.includes?n.includes("Files"):n.contains("Files"))&&!v(this.toolsFiles))return void await this.processFiles(t.files);const s=t.getData(this.MIME_TYPE),o=t.getData("text/plain");let r=t.getData("text/html");if(s)try{return void this.insertEditorJSData(JSON.parse(s))}catch{}e&&o.trim()&&r.trim()&&(r="<p>"+(r.trim()?r:o)+"</p>");const a=Object.keys(this.toolsTags).reduce(((t,e)=>(t[e.toLowerCase()]=this.toolsTags[e].sanitizationConfig??{},t)),{}),l=st(r,Object.assign({},a,i.getAllInlineToolsSanitizeConfig(),{br:{}}));l.trim()&&l.trim()!==o&&B.isHTMLString(l)?await this.processText(l,!0):await this.processText(o)}async processText(t,e=!1){const{Caret:i,BlockManager:n}=this.Editor,s=e?this.processHTML(t):this.processPlain(t);if(!s.length)return;if(1===s.length)return void(s[0].isBlock?this.processSingleBlock(s.pop()):this.processInlinePaste(s.pop()));const o=n.currentBlock&&n.currentBlock.tool.isDefault&&n.currentBlock.isEmpty;s.map((async(t,e)=>this.insertBlock(t,0===e&&o))),n.currentBlock&&i.setToBlock(n.currentBlock,i.positions.END)}setCallback(){this.listeners.on(this.Editor.UI.nodes.holder,"paste",this.handlePasteEvent)}unsetCallback(){this.listeners.off(this.Editor.UI.nodes.holder,"paste",this.handlePasteEvent)}processTools(){const t=this.Editor.Tools.blockTools;Array.from(t.values()).forEach(this.processTool)}collectTagNames(t){return f(t)?[t]:g(t)?Object.keys(t):[]}getTagsConfig(t){if(!1===t.pasteConfig)return;const e=t.pasteConfig.tags||[],i=[];e.forEach((e=>{const n=this.collectTagNames(e);i.push(...n),n.forEach((i=>{if(Object.prototype.hasOwnProperty.call(this.toolsTags,i))return void d(`Paste handler for «${t.name}» Tool on «${i}» tag is skipped because it is already used by «${this.toolsTags[i].tool.name}» Tool.`,"warn");const n=g(e)?e[i]:null;this.toolsTags[i.toUpperCase()]={tool:t,sanitizationConfig:n}}))})),this.tagsByTool[t.name]=i.map((t=>t.toUpperCase()))}getFilesConfig(t){if(!1===t.pasteConfig)return;const{files:e={}}=t.pasteConfig;let{extensions:i,mimeTypes:n}=e;!i&&!n||(i&&!Array.isArray(i)&&(d(`«extensions» property of the onDrop config for «${t.name}» Tool should be an array`),i=[]),n&&!Array.isArray(n)&&(d(`«mimeTypes» property of the onDrop config for «${t.name}» Tool should be an array`),n=[]),n&&(n=n.filter((e=>!!function(t){return/^[-\w]+\/([-+\w]+|\*)$/.test(t)}(e)||(d(`MIME type value «${e}» for the «${t.name}» Tool is not a valid MIME type`,"warn"),!1)))),this.toolsFiles[t.name]={extensions:i||[],mimeTypes:n||[]})}getPatternsConfig(t){!1===t.pasteConfig||!t.pasteConfig.patterns||v(t.pasteConfig.patterns)||Object.entries(t.pasteConfig.patterns).forEach((([e,i])=>{i instanceof RegExp||d(`Pattern ${i} for «${t.name}» Tool is skipped because it should be a Regexp instance.`,"warn"),this.toolsPatterns.push({key:e,pattern:i,tool:t})}))}isNativeBehaviour(t){return B.isNativeInput(t)}async processFiles(t){const{BlockManager:e}=this.Editor;let i;i=await Promise.all(Array.from(t).map((t=>this.processFile(t)))),i=i.filter((t=>!!t));const n=e.currentBlock.tool.isDefault&&e.currentBlock.isEmpty;i.forEach(((t,i)=>{e.paste(t.type,t.event,0===i&&n)}))}async processFile(t){const e=function(t){return t.name.split(".").pop()}(t),i=Object.entries(this.toolsFiles).find((([i,{mimeTypes:n,extensions:s}])=>{const[o,r]=t.type.split("/"),a=s.find((t=>t.toLowerCase()===e.toLowerCase())),l=n.find((t=>{const[e,i]=t.split("/");return e===o&&(i===r||"*"===i)}));return!!a||!!l}));if(!i)return;const[n]=i;return{event:this.composePasteEvent("file",{file:t}),type:n}}processHTML(t){const{Tools:e}=this.Editor,i=B.make("DIV");return i.innerHTML=t,this.getNodes(i).map((t=>{let i,n=e.defaultTool,s=!1;switch(t.nodeType){case Node.DOCUMENT_FRAGMENT_NODE:i=B.make("div"),i.appendChild(t);break;case Node.ELEMENT_NODE:i=t,s=!0,this.toolsTags[i.tagName]&&(n=this.toolsTags[i.tagName].tool)}const{tags:o}=n.pasteConfig||{tags:[]},r=o.reduce(((t,e)=>(this.collectTagNames(e).forEach((i=>{const n=g(e)?e[i]:null;t[i.toLowerCase()]=n||{}})),t)),{}),a=Object.assign({},r,n.baseSanitizeConfig);if("table"===i.tagName.toLowerCase()){const t=st(i.outerHTML,a);i=B.make("div",void 0,{innerHTML:t}).firstChild}else i.innerHTML=st(i.innerHTML,a);const l=this.composePasteEvent("tag",{data:i});return{content:i,isBlock:s,tool:n.name,event:l}})).filter((t=>{const e=B.isEmpty(t.content),i=B.isSingleTag(t.content);return!e||i}))}processPlain(t){const{defaultBlock:e}=this.config;if(!t)return[];const i=e;return t.split(/\r?\n/).filter((t=>t.trim())).map((t=>{const e=B.make("div");e.textContent=t;const n=this.composePasteEvent("tag",{data:e});return{content:e,tool:i,isBlock:!1,event:n}}))}async processSingleBlock(t){const{Caret:e,BlockManager:i}=this.Editor,{currentBlock:n}=i;n&&t.tool===n.name&&B.containsOnlyInlineElements(t.content.innerHTML)?e.insertContentAtCaretPosition(t.content.innerHTML):this.insertBlock(t,(null==n?void 0:n.tool.isDefault)&&n.isEmpty)}async processInlinePaste(t){const{BlockManager:e,Caret:i}=this.Editor,{content:n}=t;if(e.currentBlock&&e.currentBlock.tool.isDefault&&n.textContent.length<te.PATTERN_PROCESSING_MAX_LENGTH){const t=await this.processPattern(n.textContent);if(t){const n=e.currentBlock&&e.currentBlock.tool.isDefault&&e.currentBlock.isEmpty,s=e.paste(t.tool,t.event,n);return void i.setToBlock(s,i.positions.END)}}if(e.currentBlock&&e.currentBlock.currentInput){const t=e.currentBlock.tool.baseSanitizeConfig;document.execCommand("insertHTML",!1,st(n.innerHTML,t))}else this.insertBlock(t)}async processPattern(t){const e=this.toolsPatterns.find((e=>{const i=e.pattern.exec(t);return!!i&&t===i.shift()}));return e?{event:this.composePasteEvent("pattern",{key:e.key,data:t}),tool:e.tool.name}:void 0}insertBlock(t,e=!1){const{BlockManager:i,Caret:n}=this.Editor,{currentBlock:s}=i;let o;if(e&&s&&s.isEmpty)return o=i.paste(t.tool,t.event,!0),void n.setToBlock(o,n.positions.END);o=i.paste(t.tool,t.event),n.setToBlock(o,n.positions.END)}insertEditorJSData(t){const{BlockManager:e,Caret:i,Tools:n}=this.Editor;nt(t,(t=>n.blockTools.get(t).sanitizeConfig)).forEach((({tool:t,data:n},s)=>{let o=!1;0===s&&(o=e.currentBlock&&e.currentBlock.tool.isDefault&&e.currentBlock.isEmpty);const r=e.insert({tool:t,data:n,replace:o});i.setToBlock(r,i.positions.END)}))}processElementNode(t,e,i){const n=Object.keys(this.toolsTags),s=t,{tool:o}=this.toolsTags[s.tagName]||{},r=this.tagsByTool[null==o?void 0:o.name]||[],a=n.includes(s.tagName),l=B.blockElements.includes(s.tagName.toLowerCase()),c=Array.from(s.children).some((({tagName:t})=>n.includes(t)&&!r.includes(t))),d=Array.from(s.children).some((({tagName:t})=>B.blockElements.includes(t.toLowerCase())));return l||a||c?a&&!c||l&&!d&&!c?[...e,i,s]:void 0:(i.appendChild(s),[...e,i])}getNodes(t){const e=Array.from(t.childNodes);let i;const n=(t,e)=>{if(B.isEmpty(e)&&!B.isSingleTag(e))return t;const s=t[t.length-1];let o=new DocumentFragment;switch(s&&B.isFragment(s)&&(o=t.pop()),e.nodeType){case Node.ELEMENT_NODE:if(i=this.processElementNode(e,t,o),i)return i;break;case Node.TEXT_NODE:return o.appendChild(e),[...t,o];default:return[...t,o]}return[...t,...Array.from(e.childNodes).reduce(n,[])]};return e.reduce(n,[])}composePasteEvent(t,e){return new CustomEvent(t,{detail:e})}};let ee=te;ee.PATTERN_PROCESSING_MAX_LENGTH=450;class ie extends j{constructor(){super(...arguments),this.isRectSelectionActivated=!1,this.SCROLL_SPEED=3,this.HEIGHT_OF_SCROLL_ZONE=40,this.BOTTOM_SCROLL_ZONE=1,this.TOP_SCROLL_ZONE=2,this.MAIN_MOUSE_BUTTON=0,this.mousedown=!1,this.isScrolling=!1,this.inScrollZone=null,this.startX=0,this.startY=0,this.mouseX=0,this.mouseY=0,this.stackOfSelected=[],this.listenerIds=[]}static get CSS(){return{overlay:"codex-editor-overlay",overlayContainer:"codex-editor-overlay__container",rect:"codex-editor-overlay__rectangle",topScrollZone:"codex-editor-overlay__scroll-zone--top",bottomScrollZone:"codex-editor-overlay__scroll-zone--bottom"}}prepare(){this.enableModuleBindings()}startSelection(t,e){const i=document.elementFromPoint(t-window.pageXOffset,e-window.pageYOffset);i.closest(`.${this.Editor.Toolbar.CSS.toolbar}`)||(this.Editor.BlockSelection.allBlocksSelected=!1,this.clearSelection(),this.stackOfSelected=[]);const n=[`.${K.CSS.content}`,`.${this.Editor.Toolbar.CSS.toolbar}`,`.${this.Editor.InlineToolbar.CSS.inlineToolbar}`],s=i.closest("."+this.Editor.UI.CSS.editorWrapper),o=n.some((t=>!!i.closest(t)));!s||o||(this.mousedown=!0,this.startX=t,this.startY=e)}endSelection(){this.mousedown=!1,this.startX=0,this.startY=0,this.overlayRectangle.style.display="none"}isRectActivated(){return this.isRectSelectionActivated}clearSelection(){this.isRectSelectionActivated=!1}enableModuleBindings(){const{container:t}=this.genHTML();this.listeners.on(t,"mousedown",(t=>{this.processMouseDown(t)}),!1),this.listeners.on(document.body,"mousemove",E((t=>{this.processMouseMove(t)}),10),{passive:!0}),this.listeners.on(document.body,"mouseleave",(()=>{this.processMouseLeave()})),this.listeners.on(window,"scroll",E((t=>{this.processScroll(t)}),10),{passive:!0}),this.listeners.on(document.body,"mouseup",(()=>{this.processMouseUp()}),!1)}processMouseDown(t){t.button===this.MAIN_MOUSE_BUTTON&&(null!==t.target.closest(B.allInputsSelector)||this.startSelection(t.pageX,t.pageY))}processMouseMove(t){this.changingRectangle(t),this.scrollByZones(t.clientY)}processMouseLeave(){this.clearSelection(),this.endSelection()}processScroll(t){this.changingRectangle(t)}processMouseUp(){this.clearSelection(),this.endSelection()}scrollByZones(t){this.inScrollZone=null,t<=this.HEIGHT_OF_SCROLL_ZONE&&(this.inScrollZone=this.TOP_SCROLL_ZONE),document.documentElement.clientHeight-t<=this.HEIGHT_OF_SCROLL_ZONE&&(this.inScrollZone=this.BOTTOM_SCROLL_ZONE),this.inScrollZone?this.isScrolling||(this.scrollVertical(this.inScrollZone===this.TOP_SCROLL_ZONE?-this.SCROLL_SPEED:this.SCROLL_SPEED),this.isScrolling=!0):this.isScrolling=!1}genHTML(){const{UI:t}=this.Editor,e=t.nodes.holder.querySelector("."+t.CSS.editorWrapper),i=B.make("div",ie.CSS.overlay,{}),n=B.make("div",ie.CSS.overlayContainer,{}),s=B.make("div",ie.CSS.rect,{});return n.appendChild(s),i.appendChild(n),e.appendChild(i),this.overlayRectangle=s,{container:e,overlay:i}}scrollVertical(t){if(!this.inScrollZone||!this.mousedown)return;const e=window.pageYOffset;window.scrollBy(0,t),this.mouseY+=window.pageYOffset-e,setTimeout((()=>{this.scrollVertical(t)}),0)}changingRectangle(t){if(!this.mousedown)return;void 0!==t.pageY&&(this.mouseX=t.pageX,this.mouseY=t.pageY);const{rightPos:e,leftPos:i,index:n}=this.genInfoForMouseSelection(),s=this.startX>e&&this.mouseX>e,o=this.startX<i&&this.mouseX<i;this.rectCrossesBlocks=!(s||o),this.isRectSelectionActivated||(this.rectCrossesBlocks=!1,this.isRectSelectionActivated=!0,this.shrinkRectangleToPoint(),this.overlayRectangle.style.display="block"),this.updateRectangleSize(),this.Editor.Toolbar.close(),void 0!==n&&(this.trySelectNextBlock(n),this.inverseSelection(),U.get().removeAllRanges())}shrinkRectangleToPoint(){this.overlayRectangle.style.left=this.startX-window.pageXOffset+"px",this.overlayRectangle.style.top=this.startY-window.pageYOffset+"px",this.overlayRectangle.style.bottom=`calc(100% - ${this.startY-window.pageYOffset}px`,this.overlayRectangle.style.right=`calc(100% - ${this.startX-window.pageXOffset}px`}inverseSelection(){const t=this.Editor.BlockManager.getBlockByIndex(this.stackOfSelected[0]).selected;if(this.rectCrossesBlocks&&!t)for(const t of this.stackOfSelected)this.Editor.BlockSelection.selectBlockByIndex(t);if(!this.rectCrossesBlocks&&t)for(const t of this.stackOfSelected)this.Editor.BlockSelection.unSelectBlockByIndex(t)}updateRectangleSize(){this.mouseY>=this.startY?(this.overlayRectangle.style.top=this.startY-window.pageYOffset+"px",this.overlayRectangle.style.bottom=`calc(100% - ${this.mouseY-window.pageYOffset}px`):(this.overlayRectangle.style.bottom=`calc(100% - ${this.startY-window.pageYOffset}px`,this.overlayRectangle.style.top=this.mouseY-window.pageYOffset+"px"),this.mouseX>=this.startX?(this.overlayRectangle.style.left=this.startX-window.pageXOffset+"px",this.overlayRectangle.style.right=`calc(100% - ${this.mouseX-window.pageXOffset}px`):(this.overlayRectangle.style.right=`calc(100% - ${this.startX-window.pageXOffset}px`,this.overlayRectangle.style.left=this.mouseX-window.pageXOffset+"px")}genInfoForMouseSelection(){const t=document.body.offsetWidth/2,e=this.mouseY-window.pageYOffset,i=document.elementFromPoint(t,e),n=this.Editor.BlockManager.getBlockByChildNode(i);let s;void 0!==n&&(s=this.Editor.BlockManager.blocks.findIndex((t=>t.holder===n.holder)));const o=this.Editor.BlockManager.lastBlock.holder.querySelector("."+K.CSS.content),r=Number.parseInt(window.getComputedStyle(o).width,10)/2;return{index:s,leftPos:t-r,rightPos:t+r}}addBlockInSelection(t){this.rectCrossesBlocks&&this.Editor.BlockSelection.selectBlockByIndex(t),this.stackOfSelected.push(t)}trySelectNextBlock(t){const e=this.stackOfSelected[this.stackOfSelected.length-1]===t,i=this.stackOfSelected.length;if(e)return;const n=this.stackOfSelected[i-1]-this.stackOfSelected[i-2]>0;let s=0;i>1&&(s=n?1:-1);const o=t>this.stackOfSelected[i-1]&&1===s,r=t<this.stackOfSelected[i-1]&&-1===s,a=!(o||r||0===s);if(!a&&(t>this.stackOfSelected[i-1]||void 0===this.stackOfSelected[i-1])){let e=this.stackOfSelected[i-1]+1||t;for(;e<=t;e++)this.addBlockInSelection(e);return}if(!a&&t<this.stackOfSelected[i-1]){for(let e=this.stackOfSelected[i-1]-1;e>=t;e--)this.addBlockInSelection(e);return}if(!a)return;let l,c=i-1;for(l=t>this.stackOfSelected[i-1]?()=>t>this.stackOfSelected[c]:()=>t<this.stackOfSelected[c];l();)this.rectCrossesBlocks&&this.Editor.BlockSelection.unSelectBlockByIndex(this.stackOfSelected[c]),this.stackOfSelected.pop(),c--}}!function(){try{if(typeof document<"u"){var t=document.createElement("style");t.appendChild(document.createTextNode(".ce-paragraph{line-height:1.6em;outline:none}.ce-paragraph[data-placeholder]:empty:before{content:attr(data-placeholder);color:#707684;font-weight:400;opacity:0}.codex-editor--empty .ce-block:first-child .ce-paragraph[data-placeholder]:empty:before{opacity:1}.codex-editor--toolbox-opened .ce-block:first-child .ce-paragraph[data-placeholder]:empty:before,.codex-editor--empty .ce-block:first-child .ce-paragraph[data-placeholder]:empty:focus:before{opacity:0}.ce-paragraph p:first-of-type{margin-top:0}.ce-paragraph p:last-of-type{margin-bottom:0}")),document.head.appendChild(t)}}catch(t){console.error("vite-plugin-css-injected-by-js",t)}}();class ne{static get DEFAULT_PLACEHOLDER(){return""}constructor({data:t,config:e,api:i,readOnly:n}){this.api=i,this.readOnly=n,this._CSS={block:this.api.styles.block,wrapper:"ce-paragraph"},this.readOnly||(this.onKeyUp=this.onKeyUp.bind(this)),this._placeholder=e.placeholder?e.placeholder:ne.DEFAULT_PLACEHOLDER,this._data={},this._element=null,this._preserveBlank=void 0!==e.preserveBlank&&e.preserveBlank,this.data=t}onKeyUp(t){if("Backspace"!==t.code&&"Delete"!==t.code)return;const{textContent:e}=this._element;""===e&&(this._element.innerHTML="")}drawView(){const t=document.createElement("DIV");return t.classList.add(this._CSS.wrapper,this._CSS.block),t.contentEditable=!1,t.dataset.placeholder=this.api.i18n.t(this._placeholder),this._data.text&&(t.innerHTML=this._data.text),this.readOnly||(t.contentEditable=!0,t.addEventListener("keyup",this.onKeyUp)),t}render(){return this._element=this.drawView(),this._element}merge(t){const e={text:this.data.text+t.text};this.data=e}validate(t){return!(""===t.text.trim()&&!this._preserveBlank)}save(t){return{text:t.innerHTML}}onPaste(t){const e={text:t.detail.data.innerHTML};this.data=e}static get conversionConfig(){return{export:"text",import:"text"}}static get sanitize(){return{text:{br:!0}}}static get isReadOnlySupported(){return!0}get data(){if(null!==this._element){const t=this._element.innerHTML;this._data.text=t}return this._data}set data(t){this._data=t||{},null!==this._element&&this.hydrate()}hydrate(){window.requestAnimationFrame((()=>{this._element.innerHTML=this._data.text||""}))}static get pasteConfig(){return{tags:["P"]}}static get toolbox(){return{icon:'<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M8 9V7.2C8 7.08954 8.08954 7 8.2 7L12 7M16 9V7.2C16 7.08954 15.9105 7 15.8 7L12 7M12 7L12 17M12 17H10M12 17H14"/></svg>',title:"Text"}}}class se{constructor(){this.commandName="bold",this.CSS={button:"ce-inline-tool",buttonActive:"ce-inline-tool--active",buttonModifier:"ce-inline-tool--bold"},this.nodes={button:void 0}}static get sanitize(){return{b:{}}}render(){return this.nodes.button=document.createElement("button"),this.nodes.button.type="button",this.nodes.button.classList.add(this.CSS.button,this.CSS.buttonModifier),this.nodes.button.innerHTML='<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M9 12L9 7.1C9 7.04477 9.04477 7 9.1 7H10.4C11.5 7 14 7.1 14 9.5C14 9.5 14 12 11 12M9 12V16.8C9 16.9105 9.08954 17 9.2 17H12.5C14 17 15 16 15 14.5C15 11.7046 11 12 11 12M9 12H11"/></svg>',this.nodes.button}surround(){document.execCommand(this.commandName)}checkState(){const t=document.queryCommandState(this.commandName);return this.nodes.button.classList.toggle(this.CSS.buttonActive,t),t}get shortcut(){return"CMD+B"}}se.isInline=!0,se.title="Bold";class oe{constructor(){this.commandName="italic",this.CSS={button:"ce-inline-tool",buttonActive:"ce-inline-tool--active",buttonModifier:"ce-inline-tool--italic"},this.nodes={button:null}}static get sanitize(){return{i:{}}}render(){return this.nodes.button=document.createElement("button"),this.nodes.button.type="button",this.nodes.button.classList.add(this.CSS.button,this.CSS.buttonModifier),this.nodes.button.innerHTML='<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M13.34 10C12.4223 12.7337 11 17 11 17"/><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M14.21 7H14.2"/></svg>',this.nodes.button}surround(){document.execCommand(this.commandName)}checkState(){const t=document.queryCommandState(this.commandName);return this.nodes.button.classList.toggle(this.CSS.buttonActive,t),t}get shortcut(){return"CMD+I"}}oe.isInline=!0,oe.title="Italic";class re{constructor({api:t}){this.commandLink="createLink",this.commandUnlink="unlink",this.ENTER_KEY=13,this.CSS={button:"ce-inline-tool",buttonActive:"ce-inline-tool--active",buttonModifier:"ce-inline-tool--link",buttonUnlink:"ce-inline-tool--unlink",input:"ce-inline-tool-input",inputShowed:"ce-inline-tool-input--showed"},this.nodes={button:null,input:null},this.inputOpened=!1,this.toolbar=t.toolbar,this.inlineToolbar=t.inlineToolbar,this.notifier=t.notifier,this.i18n=t.i18n,this.selection=new U}static get sanitize(){return{a:{href:!0,target:"_blank",rel:"nofollow"}}}render(){return this.nodes.button=document.createElement("button"),this.nodes.button.type="button",this.nodes.button.classList.add(this.CSS.button,this.CSS.buttonModifier),this.nodes.button.innerHTML=mt,this.nodes.button}renderActions(){return this.nodes.input=document.createElement("input"),this.nodes.input.placeholder=this.i18n.t("Add a link"),this.nodes.input.classList.add(this.CSS.input),this.nodes.input.addEventListener("keydown",(t=>{t.keyCode===this.ENTER_KEY&&this.enterPressed(t)})),this.nodes.input}surround(t){if(t){this.inputOpened?(this.selection.restore(),this.selection.removeFakeBackground()):(this.selection.setFakeBackground(),this.selection.save());const t=this.selection.findParentTag("A");if(t)return this.selection.expandToTag(t),this.unlink(),this.closeActions(),this.checkState(),void this.toolbar.close()}this.toggleActions()}checkState(){const t=this.selection.findParentTag("A");if(t){this.nodes.button.innerHTML='<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M15.7795 11.5C15.7795 11.5 16.053 11.1962 16.5497 10.6722C17.4442 9.72856 17.4701 8.2475 16.5781 7.30145V7.30145C15.6482 6.31522 14.0873 6.29227 13.1288 7.25073L11.8796 8.49999"/><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M8.24517 12.3883C8.24517 12.3883 7.97171 12.6922 7.47504 13.2161C6.58051 14.1598 6.55467 15.6408 7.44666 16.5869V16.5869C8.37653 17.5731 9.93744 17.5961 10.8959 16.6376L12.1452 15.3883"/><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M17.7802 15.1032L16.597 14.9422C16.0109 14.8624 15.4841 15.3059 15.4627 15.8969L15.4199 17.0818"/><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M6.39064 9.03238L7.58432 9.06668C8.17551 9.08366 8.6522 8.58665 8.61056 7.99669L8.5271 6.81397"/><line x1="12.1142" x2="11.7" y1="12.2" y2="11.7858" stroke="currentColor" stroke-linecap="round" stroke-width="2"/></svg>',this.nodes.button.classList.add(this.CSS.buttonUnlink),this.nodes.button.classList.add(this.CSS.buttonActive),this.openActions();const e=t.getAttribute("href");this.nodes.input.value="null"!==e?e:"",this.selection.save()}else this.nodes.button.innerHTML=mt,this.nodes.button.classList.remove(this.CSS.buttonUnlink),this.nodes.button.classList.remove(this.CSS.buttonActive);return!!t}clear(){this.closeActions()}get shortcut(){return"CMD+K"}toggleActions(){this.inputOpened?this.closeActions(!1):this.openActions(!0)}openActions(t=!1){this.nodes.input.classList.add(this.CSS.inputShowed),t&&this.nodes.input.focus(),this.inputOpened=!0}closeActions(t=!0){if(this.selection.isFakeBackgroundEnabled){const t=new U;t.save(),this.selection.restore(),this.selection.removeFakeBackground(),t.restore()}this.nodes.input.classList.remove(this.CSS.inputShowed),this.nodes.input.value="",t&&this.selection.clearSaved(),this.inputOpened=!1}enterPressed(t){let e=this.nodes.input.value||"";return e.trim()?this.validateURL(e)?(e=this.prepareLink(e),this.selection.restore(),this.selection.removeFakeBackground(),this.insertLink(e),t.preventDefault(),t.stopPropagation(),t.stopImmediatePropagation(),this.selection.collapseToEnd(),void this.inlineToolbar.close()):(this.notifier.show({message:"Pasted link is not valid.",style:"error"}),void d("Incorrect Link pasted","warn",e)):(this.selection.restore(),this.unlink(),t.preventDefault(),void this.closeActions())}validateURL(t){return!/\s/.test(t)}prepareLink(t){return t=t.trim(),this.addProtocol(t)}addProtocol(t){if(/^(\w+):(\/\/)?/.test(t))return t;const e=/^\/[^/\s]/.test(t),i="#"===t.substring(0,1),n=/^\/\/[^/\s]/.test(t);return!e&&!i&&!n&&(t="http://"+t),t}insertLink(t){const e=this.selection.findParentTag("A");e&&this.selection.expandToTag(e),document.execCommand(this.commandLink,!1,t)}unlink(){document.execCommand(this.commandUnlink)}}re.isInline=!0,re.title="Link";class ae{constructor({data:t,api:e}){this.CSS={wrapper:"ce-stub",info:"ce-stub__info",title:"ce-stub__title",subtitle:"ce-stub__subtitle"},this.api=e,this.title=t.title||this.api.i18n.t("Error"),this.subtitle=this.api.i18n.t("The block can not be displayed correctly."),this.savedData=t.savedData,this.wrapper=this.make()}render(){return this.wrapper}save(){return this.savedData}make(){const t=B.make("div",this.CSS.wrapper),e=B.make("div",this.CSS.info),i=B.make("div",this.CSS.title,{textContent:this.title}),n=B.make("div",this.CSS.subtitle,{textContent:this.subtitle});return t.innerHTML='<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><rect width="14" height="14" x="5" y="5" stroke="currentColor" stroke-width="2" rx="4"/><line x1="12" x2="12" y1="9" y2="12" stroke="currentColor" stroke-linecap="round" stroke-width="2"/><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M12 15.02V15.01"/></svg>',e.appendChild(i),e.appendChild(n),t.appendChild(e),t}}ae.isReadOnlySupported=!0;class le extends Gt{constructor(){super(...arguments),this.type=Ut.Inline}get title(){return this.constructable[Vt.Title]}create(){return new this.constructable({api:this.api.getMethodsForTool(this),config:this.settings})}}class ce extends Gt{constructor(){super(...arguments),this.type=Ut.Tune}create(t,e){return new this.constructable({api:this.api.getMethodsForTool(this),config:this.settings,block:e,data:t})}}class de extends Map{get blockTools(){const t=Array.from(this.entries()).filter((([,t])=>t.isBlock()));return new de(t)}get inlineTools(){const t=Array.from(this.entries()).filter((([,t])=>t.isInline()));return new de(t)}get blockTunes(){const t=Array.from(this.entries()).filter((([,t])=>t.isTune()));return new de(t)}get internalTools(){const t=Array.from(this.entries()).filter((([,t])=>t.isInternal));return new de(t)}get externalTools(){const t=Array.from(this.entries()).filter((([,t])=>!t.isInternal));return new de(t)}}var he=Object.defineProperty,ue=Object.getOwnPropertyDescriptor,pe=(t,e,i,n)=>{for(var s,o=n>1?void 0:n?ue(e,i):e,r=t.length-1;r>=0;r--)(s=t[r])&&(o=(n?s(e,i,o):s(o))||o);return n&&o&&he(e,i,o),o};class ge extends Gt{constructor(){super(...arguments),this.type=Ut.Block,this.inlineTools=new de,this.tunes=new de}create(t,e,i){return new this.constructable({data:t,block:e,readOnly:i,api:this.api.getMethodsForTool(this),config:this.settings})}get isReadOnlySupported(){return!0===this.constructable[$t.IsReadOnlySupported]}get isLineBreaksEnabled(){return this.constructable[$t.IsEnabledLineBreaks]}get toolbox(){const t=this.constructable[$t.Toolbox],e=this.config[zt.Toolbox];if(!v(t)&&!1!==e)return e?Array.isArray(t)?Array.isArray(e)?e.map(((e,i)=>{const n=t[i];return n?{...n,...e}:e})):[e]:Array.isArray(e)?e:[{...t,...e}]:Array.isArray(t)?t:[t]}get conversionConfig(){return this.constructable[$t.ConversionConfig]}get enabledInlineTools(){return this.config[zt.EnabledInlineTools]||!1}get enabledBlockTunes(){return this.config[zt.EnabledBlockTunes]}get pasteConfig(){return this.constructable[$t.PasteConfig]??{}}get sanitizeConfig(){const t=super.sanitizeConfig,e=this.baseSanitizeConfig;if(v(t))return e;const i={};for(const n in t)if(Object.prototype.hasOwnProperty.call(t,n)){const s=t[n];g(s)?i[n]=Object.assign({},e,s):i[n]=s}return i}get baseSanitizeConfig(){const t={};return Array.from(this.inlineTools.values()).forEach((e=>Object.assign(t,e.sanitizeConfig))),Array.from(this.tunes.values()).forEach((e=>Object.assign(t,e.sanitizeConfig))),t}}pe([M],ge.prototype,"sanitizeConfig",1),pe([M],ge.prototype,"baseSanitizeConfig",1);class fe{constructor(t,e,i){this.api=i,this.config=t,this.editorConfig=e}get(t){const{class:e,isInternal:i=!1,...n}=this.config[t];return new(this.getConstructor(e))({name:t,constructable:e,config:n,api:this.api,isDefault:t===this.editorConfig.defaultBlock,defaultPlaceholder:this.editorConfig.placeholder,isInternal:i})}getConstructor(t){switch(!0){case t[Vt.IsInline]:return le;case t[Wt.IsTune]:return ce;default:return ge}}}class me{constructor({api:t}){this.CSS={animation:"wobble"},this.api=t}render(){return{icon:ft,title:this.api.i18n.t("Move down"),onActivate:()=>this.handleClick(),name:"move-down"}}handleClick(){const t=this.api.blocks.getCurrentBlockIndex(),e=this.api.blocks.getBlockByIndex(t+1);if(!e)throw new Error("Unable to move Block down since it is already the last");const i=e.holder,n=i.getBoundingClientRect();let s=Math.abs(window.innerHeight-i.offsetHeight);n.top<window.innerHeight&&(s=window.scrollY+i.offsetHeight),window.scrollTo(0,s),this.api.blocks.move(t+1),this.api.toolbar.toggleBlockSettings(!0)}}me.isTune=!0;class be{constructor({api:t}){this.api=t}render(){return{icon:'<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M8 8L12 12M12 12L16 16M12 12L16 8M12 12L8 16"/></svg>',title:this.api.i18n.t("Delete"),name:"delete",confirmation:{title:this.api.i18n.t("Click to delete"),onActivate:()=>this.handleClick()}}}handleClick(){this.api.blocks.delete()}}be.isTune=!0;class ve{constructor({api:t}){this.CSS={animation:"wobble"},this.api=t}render(){return{icon:'<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M7 15L11.8586 10.1414C11.9367 10.0633 12.0633 10.0633 12.1414 10.1414L17 15"/></svg>',title:this.api.i18n.t("Move up"),onActivate:()=>this.handleClick(),name:"move-up"}}handleClick(){const t=this.api.blocks.getCurrentBlockIndex(),e=this.api.blocks.getBlockByIndex(t),i=this.api.blocks.getBlockByIndex(t-1);if(0===t||!e||!i)throw new Error("Unable to move Block up since it is already the first");const n=e.holder,s=i.holder,o=n.getBoundingClientRect(),r=s.getBoundingClientRect();let a;a=r.top>0?Math.abs(o.top)-Math.abs(r.top):Math.abs(o.top)+r.height,window.scrollBy(0,-1*a),this.api.blocks.move(t-1),this.api.toolbar.toggleBlockSettings(!0)}}ve.isTune=!0;var ye=Object.defineProperty,we=Object.getOwnPropertyDescriptor;class ke extends j{constructor(){super(...arguments),this.stubTool="stub",this.toolsAvailable=new de,this.toolsUnavailable=new de}get available(){return this.toolsAvailable}get unavailable(){return this.toolsUnavailable}get inlineTools(){return this.available.inlineTools}get blockTools(){return this.available.blockTools}get blockTunes(){return this.available.blockTunes}get defaultTool(){return this.blockTools.get(this.config.defaultBlock)}get internal(){return this.available.internalTools}async prepare(){if(this.validateTools(),this.config.tools=A({},this.internalTools,this.config.tools),!Object.prototype.hasOwnProperty.call(this.config,"tools")||0===Object.keys(this.config.tools).length)throw Error("Can't start without tools");const t=this.prepareConfig();this.factory=new fe(t,this.config,this.Editor.API);const e=this.getListOfPrepareFunctions(t);if(0===e.length)return Promise.resolve();await async function(t,e=(()=>{}),i=(()=>{})){return t.reduce((async(t,n)=>(await t,async function(t,e,i){try{await t.function(t.data),await e(b(t.data)?{}:t.data)}catch{i(b(t.data)?{}:t.data)}}(n,e,i))),Promise.resolve())}(e,(t=>{this.toolPrepareMethodSuccess(t)}),(t=>{this.toolPrepareMethodFallback(t)})),this.prepareBlockTools()}getAllInlineToolsSanitizeConfig(){const t={};return Array.from(this.inlineTools.values()).forEach((e=>{Object.assign(t,e.sanitizeConfig)})),t}destroy(){Object.values(this.available).forEach((async t=>{p(t.reset)&&await t.reset()}))}get internalTools(){return{bold:{class:se,isInternal:!0},italic:{class:oe,isInternal:!0},link:{class:re,isInternal:!0},paragraph:{class:ne,inlineToolbar:!0,isInternal:!0},stub:{class:ae,isInternal:!0},moveUp:{class:ve,isInternal:!0},delete:{class:be,isInternal:!0},moveDown:{class:me,isInternal:!0}}}toolPrepareMethodSuccess(t){const e=this.factory.get(t.toolName);if(e.isInline()){const t=["render","surround","checkState"].filter((t=>!e.create()[t]));if(t.length)return d(`Incorrect Inline Tool: ${e.name}. Some of required methods is not implemented %o`,"warn",t),void this.toolsUnavailable.set(e.name,e)}this.toolsAvailable.set(e.name,e)}toolPrepareMethodFallback(t){this.toolsUnavailable.set(t.toolName,this.factory.get(t.toolName))}getListOfPrepareFunctions(t){const e=[];return Object.entries(t).forEach((([t,i])=>{e.push({function:p(i.class.prepare)?i.class.prepare:()=>{},data:{toolName:t,config:i.config}})})),e}prepareBlockTools(){Array.from(this.blockTools.values()).forEach((t=>{this.assignInlineToolsToBlockTool(t),this.assignBlockTunesToBlockTool(t)}))}assignInlineToolsToBlockTool(t){if(!1!==this.config.inlineToolbar){if(!0===t.enabledInlineTools)return void(t.inlineTools=new de(Array.isArray(this.config.inlineToolbar)?this.config.inlineToolbar.map((t=>[t,this.inlineTools.get(t)])):Array.from(this.inlineTools.entries())));Array.isArray(t.enabledInlineTools)&&(t.inlineTools=new de(t.enabledInlineTools.map((t=>[t,this.inlineTools.get(t)]))))}}assignBlockTunesToBlockTool(t){if(!1!==t.enabledBlockTunes){if(Array.isArray(t.enabledBlockTunes)){const e=new de(t.enabledBlockTunes.map((t=>[t,this.blockTunes.get(t)])));return void(t.tunes=new de([...e,...this.blockTunes.internalTools]))}if(Array.isArray(this.config.tunes)){const e=new de(this.config.tunes.map((t=>[t,this.blockTunes.get(t)])));return void(t.tunes=new de([...e,...this.blockTunes.internalTools]))}t.tunes=this.blockTunes.internalTools}}validateTools(){for(const t in this.config.tools)if(Object.prototype.hasOwnProperty.call(this.config.tools,t)){if(t in this.internalTools)return;const e=this.config.tools[t];if(!p(e)&&!p(e.class))throw Error(`Tool «${t}» must be a constructor function or an object with function in the «class» property`)}}prepareConfig(){const t={};for(const e in this.config.tools)g(this.config.tools[e])?t[e]=this.config.tools[e]:t[e]={class:this.config.tools[e]};return t}}((t,e,i,n)=>{for(var s,o=we(e,i),r=t.length-1;r>=0;r--)(s=t[r])&&(o=s(e,i,o)||o);o&&ye(e,i,o)})([M],ke.prototype,"getAllInlineToolsSanitizeConfig");const xe={BlocksAPI:class extends j{constructor(){super(...arguments),this.insert=(t=this.config.defaultBlock,e={},i={},n,s,o,r)=>new N(this.Editor.BlockManager.insert({id:r,tool:t,data:e,index:n,needToFocus:s,replace:o})),this.composeBlockData=async t=>{const e=this.Editor.Tools.blockTools.get(t);return new K({tool:e,api:this.Editor.API,readOnly:!0,data:{},tunesData:{}}).data},this.update=async(t,e)=>{const{BlockManager:i}=this.Editor,n=i.getBlockById(t);if(void 0===n)throw new Error(`Block with id "${t}" not found`);return new N(await i.update(n,e))},this.convert=(t,e,i)=>{var n,s;const{BlockManager:o,Tools:r}=this.Editor,a=o.getBlockById(t);if(!a)throw new Error(`Block with id "${t}" not found`);const l=r.blockTools.get(a.name),c=r.blockTools.get(e);if(!c)throw new Error(`Block Tool with type "${e}" not found`);const d=void 0!==(null==(n=null==l?void 0:l.conversionConfig)?void 0:n.export),h=void 0!==(null==(s=c.conversionConfig)?void 0:s.import);if(!d||!h){const t=[!d&&C(a.name),!h&&C(e)].filter(Boolean).join(" and ");throw new Error(`Conversion from "${a.name}" to "${e}" is not possible. ${t} tool(s) should provide a "conversionConfig"`)}o.convert(a,e,i)},this.insertMany=(t,e=this.Editor.BlockManager.blocks.length-1)=>{this.validateIndex(e);const i=t.map((({id:t,type:e,data:i})=>this.Editor.BlockManager.composeBlock({id:t,tool:e||this.config.defaultBlock,data:i})));return this.Editor.BlockManager.insertMany(i,e),i.map((t=>new N(t)))}}get methods(){return{clear:()=>this.clear(),render:t=>this.render(t),renderFromHTML:t=>this.renderFromHTML(t),delete:t=>this.delete(t),swap:(t,e)=>this.swap(t,e),move:(t,e)=>this.move(t,e),getBlockByIndex:t=>this.getBlockByIndex(t),getById:t=>this.getById(t),getCurrentBlockIndex:()=>this.getCurrentBlockIndex(),getBlockIndex:t=>this.getBlockIndex(t),getBlocksCount:()=>this.getBlocksCount(),stretchBlock:(t,e=!0)=>this.stretchBlock(t,e),insertNewBlock:()=>this.insertNewBlock(),insert:this.insert,insertMany:this.insertMany,update:this.update,composeBlockData:this.composeBlockData,convert:this.convert}}getBlocksCount(){return this.Editor.BlockManager.blocks.length}getCurrentBlockIndex(){return this.Editor.BlockManager.currentBlockIndex}getBlockIndex(t){const e=this.Editor.BlockManager.getBlockById(t);if(e)return this.Editor.BlockManager.getBlockIndex(e);h("There is no block with id `"+t+"`","warn")}getBlockByIndex(t){const e=this.Editor.BlockManager.getBlockByIndex(t);if(void 0!==e)return new N(e);h("There is no block at index `"+t+"`","warn")}getById(t){const e=this.Editor.BlockManager.getBlockById(t);return void 0===e?(h("There is no block with id `"+t+"`","warn"),null):new N(e)}swap(t,e){d("`blocks.swap()` method is deprecated and will be removed in the next major release. Use `block.move()` method instead","info"),this.Editor.BlockManager.swap(t,e)}move(t,e){this.Editor.BlockManager.move(t,e)}delete(t=this.Editor.BlockManager.currentBlockIndex){try{const e=this.Editor.BlockManager.getBlockByIndex(t);this.Editor.BlockManager.removeBlock(e)}catch(t){return void h(t,"warn")}0===this.Editor.BlockManager.blocks.length&&this.Editor.BlockManager.insert(),this.Editor.BlockManager.currentBlock&&this.Editor.Caret.setToBlock(this.Editor.BlockManager.currentBlock,this.Editor.Caret.positions.END),this.Editor.Toolbar.close()}async clear(){await this.Editor.BlockManager.clear(!0),this.Editor.InlineToolbar.close()}async render(t){if(void 0===t||void 0===t.blocks)throw new Error("Incorrect data passed to the render() method");this.Editor.ModificationsObserver.disable(),await this.Editor.BlockManager.clear(),await this.Editor.Renderer.render(t.blocks),this.Editor.ModificationsObserver.enable()}renderFromHTML(t){return this.Editor.BlockManager.clear(),this.Editor.Paste.processText(t,!0)}stretchBlock(t,e=!0){T(!0,"blocks.stretchBlock()","BlockAPI");const i=this.Editor.BlockManager.getBlockByIndex(t);i&&(i.stretched=e)}insertNewBlock(){d("Method blocks.insertNewBlock() is deprecated and it will be removed in the next major release. Use blocks.insert() instead.","warn"),this.insert()}validateIndex(t){if("number"!=typeof t)throw new Error("Index should be a number");if(t<0)throw new Error("Index should be greater than or equal to 0");if(null===t)throw new Error("Index should be greater than or equal to 0")}},CaretAPI:class extends j{constructor(){super(...arguments),this.setToFirstBlock=(t=this.Editor.Caret.positions.DEFAULT,e=0)=>!!this.Editor.BlockManager.firstBlock&&(this.Editor.Caret.setToBlock(this.Editor.BlockManager.firstBlock,t,e),!0),this.setToLastBlock=(t=this.Editor.Caret.positions.DEFAULT,e=0)=>!!this.Editor.BlockManager.lastBlock&&(this.Editor.Caret.setToBlock(this.Editor.BlockManager.lastBlock,t,e),!0),this.setToPreviousBlock=(t=this.Editor.Caret.positions.DEFAULT,e=0)=>!!this.Editor.BlockManager.previousBlock&&(this.Editor.Caret.setToBlock(this.Editor.BlockManager.previousBlock,t,e),!0),this.setToNextBlock=(t=this.Editor.Caret.positions.DEFAULT,e=0)=>!!this.Editor.BlockManager.nextBlock&&(this.Editor.Caret.setToBlock(this.Editor.BlockManager.nextBlock,t,e),!0),this.setToBlock=(t,e=this.Editor.Caret.positions.DEFAULT,i=0)=>!!this.Editor.BlockManager.blocks[t]&&(this.Editor.Caret.setToBlock(this.Editor.BlockManager.blocks[t],e,i),!0),this.focus=(t=!1)=>t?this.setToLastBlock(this.Editor.Caret.positions.END):this.setToFirstBlock(this.Editor.Caret.positions.START)}get methods(){return{setToFirstBlock:this.setToFirstBlock,setToLastBlock:this.setToLastBlock,setToPreviousBlock:this.setToPreviousBlock,setToNextBlock:this.setToNextBlock,setToBlock:this.setToBlock,focus:this.focus}}},EventsAPI:class extends j{get methods(){return{emit:(t,e)=>this.emit(t,e),off:(t,e)=>this.off(t,e),on:(t,e)=>this.on(t,e)}}on(t,e){this.eventsDispatcher.on(t,e)}emit(t,e){this.eventsDispatcher.emit(t,e)}off(t,e){this.eventsDispatcher.off(t,e)}},I18nAPI:X,API:class extends j{get methods(){return{blocks:this.Editor.BlocksAPI.methods,caret:this.Editor.CaretAPI.methods,events:this.Editor.EventsAPI.methods,listeners:this.Editor.ListenersAPI.methods,notifier:this.Editor.NotifierAPI.methods,sanitizer:this.Editor.SanitizerAPI.methods,saver:this.Editor.SaverAPI.methods,selection:this.Editor.SelectionAPI.methods,styles:this.Editor.StylesAPI.classes,toolbar:this.Editor.ToolbarAPI.methods,inlineToolbar:this.Editor.InlineToolbarAPI.methods,tooltip:this.Editor.TooltipAPI.methods,i18n:this.Editor.I18nAPI.methods,readOnly:this.Editor.ReadOnlyAPI.methods,ui:this.Editor.UiAPI.methods}}getMethodsForTool(t){return Object.assign(this.methods,{i18n:this.Editor.I18nAPI.getMethodsForTool(t)})}},InlineToolbarAPI:class extends j{get methods(){return{close:()=>this.close(),open:()=>this.open()}}open(){this.Editor.InlineToolbar.tryToShow()}close(){this.Editor.InlineToolbar.close()}},ListenersAPI:class extends j{get methods(){return{on:(t,e,i,n)=>this.on(t,e,i,n),off:(t,e,i,n)=>this.off(t,e,i,n),offById:t=>this.offById(t)}}on(t,e,i,n){return this.listeners.on(t,e,i,n)}off(t,e,i,n){this.listeners.off(t,e,i,n)}offById(t){this.listeners.offById(t)}},NotifierAPI:class extends j{constructor({config:t,eventsDispatcher:e}){super({config:t,eventsDispatcher:e}),this.notifier=new Z}get methods(){return{show:t=>this.show(t)}}show(t){return this.notifier.show(t)}},ReadOnlyAPI:class extends j{get methods(){const t=()=>this.isEnabled;return{toggle:t=>this.toggle(t),get isEnabled(){return t()}}}toggle(t){return this.Editor.ReadOnly.toggle(t)}get isEnabled(){return this.Editor.ReadOnly.isEnabled}},SanitizerAPI:class extends j{get methods(){return{clean:(t,e)=>this.clean(t,e)}}clean(t,e){return st(t,e)}},SaverAPI:class extends j{get methods(){return{save:()=>this.save()}}save(){const t="Editor's content can not be saved in read-only mode";return this.Editor.ReadOnly.isEnabled?(h(t,"warn"),Promise.reject(new Error(t))):this.Editor.Saver.save()}},SelectionAPI:class extends j{get methods(){return{findParentTag:(t,e)=>this.findParentTag(t,e),expandToTag:t=>this.expandToTag(t)}}findParentTag(t,e){return(new U).findParentTag(t,e)}expandToTag(t){(new U).expandToTag(t)}},StylesAPI:class extends j{get classes(){return{block:"cdx-block",inlineToolButton:"ce-inline-tool",inlineToolButtonActive:"ce-inline-tool--active",input:"cdx-input",loader:"cdx-loader",button:"cdx-button",settingsButton:"cdx-settings-button",settingsButtonActive:"cdx-settings-button--active"}}},ToolbarAPI:class extends j{get methods(){return{close:()=>this.close(),open:()=>this.open(),toggleBlockSettings:t=>this.toggleBlockSettings(t),toggleToolbox:t=>this.toggleToolbox(t)}}open(){this.Editor.Toolbar.moveAndOpen()}close(){this.Editor.Toolbar.close()}toggleBlockSettings(t){-1!==this.Editor.BlockManager.currentBlockIndex?t??!this.Editor.BlockSettings.opened?(this.Editor.Toolbar.moveAndOpen(),this.Editor.BlockSettings.open()):this.Editor.BlockSettings.close():h("Could't toggle the Toolbar because there is no block selected ","warn")}toggleToolbox(t){-1!==this.Editor.BlockManager.currentBlockIndex?t??!this.Editor.Toolbar.toolbox.opened?(this.Editor.Toolbar.moveAndOpen(),this.Editor.Toolbar.toolbox.open()):this.Editor.Toolbar.toolbox.close():h("Could't toggle the Toolbox because there is no block selected ","warn")}},TooltipAPI:class extends j{constructor({config:t,eventsDispatcher:e}){super({config:t,eventsDispatcher:e})}get methods(){return{show:(t,e,i)=>this.show(t,e,i),hide:()=>this.hide(),onHover:(t,e,i)=>this.onHover(t,e,i)}}show(t,e,i){!function(t,e,i){ht(),null==dt||dt.show(t,e,i)}(t,e,i)}hide(){ut()}onHover(t,e,i){pt(t,e,i)}},UiAPI:class extends j{get methods(){return{nodes:this.editorNodes}}get editorNodes(){return{wrapper:this.Editor.UI.nodes.wrapper,redactor:this.Editor.UI.nodes.redactor}}},BlockSettings:class extends j{constructor(){super(...arguments),this.opened=!1,this.selection=new U,this.onPopoverClose=()=>{this.close()}}get events(){return{opened:"block-settings-opened",closed:"block-settings-closed"}}get CSS(){return{settings:"ce-settings"}}get flipper(){var t;return null==(t=this.popover)?void 0:t.flipper}make(){this.nodes.wrapper=B.make("div",[this.CSS.settings])}destroy(){this.removeAllNodes()}open(t=this.Editor.BlockManager.currentBlock){this.opened=!0,this.selection.save(),this.Editor.BlockSelection.selectBlock(t),this.Editor.BlockSelection.clearCache();const[e,i]=t.getTunes();this.eventsDispatcher.emit(this.events.opened),this.popover=new Tt({searchable:!0,items:e.map((t=>this.resolveTuneAliases(t))),customContent:i,customContentFlippableItems:this.getControls(i),scopeElement:this.Editor.API.methods.ui.nodes.redactor,messages:{nothingFound:D.ui(gt.ui.popover,"Nothing found"),search:D.ui(gt.ui.popover,"Filter")}}),this.popover.on(St.Close,this.onPopoverClose),this.nodes.wrapper.append(this.popover.getElement()),this.popover.show()}getElement(){return this.nodes.wrapper}close(){this.opened&&(this.opened=!1,U.isAtEditor||this.selection.restore(),this.selection.clearSaved(),!this.Editor.CrossBlockSelection.isCrossBlockSelectionStarted&&this.Editor.BlockManager.currentBlock&&this.Editor.BlockSelection.unselectBlock(this.Editor.BlockManager.currentBlock),this.eventsDispatcher.emit(this.events.closed),this.popover&&(this.popover.off(St.Close,this.onPopoverClose),this.popover.destroy(),this.popover.getElement().remove(),this.popover=null))}getControls(t){const{StylesAPI:e}=this.Editor,i=t.querySelectorAll(`.${e.classes.settingsButton}, ${B.allInputsSelector}`);return Array.from(i)}resolveTuneAliases(t){const e=function(t,e){const i={};return Object.keys(t).forEach((n=>{const s=e[n];void 0!==s?i[s]=t[n]:i[n]=t[n]})),i}(t,{label:"title"});return t.confirmation&&(e.confirmation=this.resolveTuneAliases(t.confirmation)),e}},ConversionToolbar:Mt,Toolbar:class extends j{constructor({config:t,eventsDispatcher:e}){super({config:t,eventsDispatcher:e}),this.toolboxInstance=null}get CSS(){return{toolbar:"ce-toolbar",content:"ce-toolbar__content",actions:"ce-toolbar__actions",actionsOpened:"ce-toolbar__actions--opened",toolbarOpened:"ce-toolbar--opened",openedToolboxHolderModifier:"codex-editor--toolbox-opened",plusButton:"ce-toolbar__plus",plusButtonShortcut:"ce-toolbar__plus-shortcut",settingsToggler:"ce-toolbar__settings-btn",settingsTogglerHidden:"ce-toolbar__settings-btn--hidden"}}get opened(){return this.nodes.wrapper.classList.contains(this.CSS.toolbarOpened)}get toolbox(){var t;return{opened:null==(t=this.toolboxInstance)?void 0:t.opened,close:()=>{var t;null==(t=this.toolboxInstance)||t.close()},open:()=>{null!==this.toolboxInstance?(this.Editor.BlockManager.currentBlock=this.hoveredBlock,this.toolboxInstance.open()):d("toolbox.open() called before initialization is finished","warn")},toggle:()=>{null!==this.toolboxInstance?this.toolboxInstance.toggle():d("toolbox.toggle() called before initialization is finished","warn")},hasFocus:()=>{var t;return null==(t=this.toolboxInstance)?void 0:t.hasFocus()}}}get blockActions(){return{hide:()=>{this.nodes.actions.classList.remove(this.CSS.actionsOpened)},show:()=>{this.nodes.actions.classList.add(this.CSS.actionsOpened)}}}get blockTunesToggler(){return{hide:()=>this.nodes.settingsToggler.classList.add(this.CSS.settingsTogglerHidden),show:()=>this.nodes.settingsToggler.classList.remove(this.CSS.settingsTogglerHidden)}}toggleReadOnly(t){t?(this.destroy(),this.Editor.BlockSettings.destroy(),this.disableModuleBindings()):window.requestIdleCallback((()=>{this.drawUI(),this.enableModuleBindings()}),{timeout:2e3})}moveAndOpen(t=this.Editor.BlockManager.currentBlock){if(null===this.toolboxInstance)return void d("Can't open Toolbar since Editor initialization is not finished yet","warn");if(this.toolboxInstance.opened&&this.toolboxInstance.close(),this.Editor.BlockSettings.opened&&this.Editor.BlockSettings.close(),!t)return;this.hoveredBlock=t;const e=t.holder,{isMobile:i}=this.Editor.UI,n=t.pluginsContent,s=window.getComputedStyle(n),o=parseInt(s.paddingTop,10),r=e.offsetHeight;let a;a=i?e.offsetTop+r:e.offsetTop+o,this.nodes.wrapper.style.top=`${Math.floor(a)}px`,1===this.Editor.BlockManager.blocks.length&&t.isEmpty?this.blockTunesToggler.hide():this.blockTunesToggler.show(),this.open()}close(){var t,e;this.Editor.ReadOnly.isEnabled||(null==(t=this.nodes.wrapper)||t.classList.remove(this.CSS.toolbarOpened),this.blockActions.hide(),null==(e=this.toolboxInstance)||e.close(),this.Editor.BlockSettings.close(),this.reset())}reset(){this.nodes.wrapper.style.top="unset"}open(t=!0){this.nodes.wrapper.classList.add(this.CSS.toolbarOpened),t?this.blockActions.show():this.blockActions.hide()}make(){this.nodes.wrapper=B.make("div",this.CSS.toolbar),["content","actions"].forEach((t=>{this.nodes[t]=B.make("div",this.CSS[t])})),B.append(this.nodes.wrapper,this.nodes.content),B.append(this.nodes.content,this.nodes.actions),this.nodes.plusButton=B.make("div",this.CSS.plusButton,{innerHTML:'<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M12 7V12M12 17V12M17 12H12M12 12H7"/></svg>'}),B.append(this.nodes.actions,this.nodes.plusButton),this.readOnlyMutableListeners.on(this.nodes.plusButton,"click",(()=>{ut(!0),this.plusButtonClicked()}),!1);const t=B.make("div");t.appendChild(document.createTextNode(D.ui(gt.ui.toolbar.toolbox,"Add"))),t.appendChild(B.make("div",this.CSS.plusButtonShortcut,{textContent:"/"})),pt(this.nodes.plusButton,t,{hidingDelay:400}),this.nodes.settingsToggler=B.make("span",this.CSS.settingsToggler,{innerHTML:'<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><path stroke="currentColor" stroke-linecap="round" stroke-width="2.6" d="M9.40999 7.29999H9.4"/><path stroke="currentColor" stroke-linecap="round" stroke-width="2.6" d="M14.6 7.29999H14.59"/><path stroke="currentColor" stroke-linecap="round" stroke-width="2.6" d="M9.30999 12H9.3"/><path stroke="currentColor" stroke-linecap="round" stroke-width="2.6" d="M14.6 12H14.59"/><path stroke="currentColor" stroke-linecap="round" stroke-width="2.6" d="M9.40999 16.7H9.4"/><path stroke="currentColor" stroke-linecap="round" stroke-width="2.6" d="M14.6 16.7H14.59"/></svg>'}),B.append(this.nodes.actions,this.nodes.settingsToggler);const e=B.make("div"),i=B.text(D.ui(gt.ui.blockTunes.toggler,"Click to tune"));e.appendChild(i),e.appendChild(B.make("div",this.CSS.plusButtonShortcut,{textContent:S("CMD + /")})),pt(this.nodes.settingsToggler,e,{hidingDelay:400}),B.append(this.nodes.actions,this.makeToolbox()),B.append(this.nodes.actions,this.Editor.BlockSettings.getElement()),B.append(this.Editor.UI.nodes.wrapper,this.nodes.wrapper)}makeToolbox(){return this.toolboxInstance=new Ht({api:this.Editor.API.methods,tools:this.Editor.Tools.blockTools,i18nLabels:{filter:D.ui(gt.ui.popover,"Filter"),nothingFound:D.ui(gt.ui.popover,"Nothing found")}}),this.toolboxInstance.on(Ft.Opened,(()=>{this.Editor.UI.nodes.wrapper.classList.add(this.CSS.openedToolboxHolderModifier)})),this.toolboxInstance.on(Ft.Closed,(()=>{this.Editor.UI.nodes.wrapper.classList.remove(this.CSS.openedToolboxHolderModifier)})),this.toolboxInstance.on(Ft.BlockAdded,(({block:t})=>{const{BlockManager:e,Caret:i}=this.Editor,n=e.getBlockById(t.id);0===n.inputs.length&&(n===e.lastBlock?(e.insertAtEnd(),i.setToBlock(e.lastBlock)):i.setToBlock(e.nextBlock))})),this.toolboxInstance.make()}plusButtonClicked(){var t;this.Editor.BlockManager.currentBlock=this.hoveredBlock,null==(t=this.toolboxInstance)||t.toggle()}enableModuleBindings(){this.readOnlyMutableListeners.on(this.nodes.settingsToggler,"mousedown",(t=>{var e;t.stopPropagation(),this.settingsTogglerClicked(),null!=(e=this.toolboxInstance)&&e.opened&&this.toolboxInstance.close(),ut(!0)}),!0),I()||this.eventsDispatcher.on(jt,(t=>{var e;this.Editor.BlockSettings.opened||null!=(e=this.toolboxInstance)&&e.opened||this.moveAndOpen(t.block)}))}disableModuleBindings(){this.readOnlyMutableListeners.clearAll()}settingsTogglerClicked(){this.Editor.BlockManager.currentBlock=this.hoveredBlock,this.Editor.BlockSettings.opened?this.Editor.BlockSettings.close():this.Editor.BlockSettings.open(this.hoveredBlock)}drawUI(){this.Editor.BlockSettings.make(),this.make()}destroy(){this.removeAllNodes(),this.toolboxInstance&&this.toolboxInstance.destroy()}},InlineToolbar:class extends j{constructor({config:t,eventsDispatcher:e}){super({config:t,eventsDispatcher:e}),this.CSS={inlineToolbar:"ce-inline-toolbar",inlineToolbarShowed:"ce-inline-toolbar--showed",inlineToolbarLeftOriented:"ce-inline-toolbar--left-oriented",inlineToolbarRightOriented:"ce-inline-toolbar--right-oriented",inlineToolbarShortcut:"ce-inline-toolbar__shortcut",buttonsWrapper:"ce-inline-toolbar__buttons",actionsWrapper:"ce-inline-toolbar__actions",inlineToolButton:"ce-inline-tool",inputField:"cdx-input",focusedButton:"ce-inline-tool--focused",conversionToggler:"ce-inline-toolbar__dropdown",conversionTogglerArrow:"ce-inline-toolbar__dropdown-arrow",conversionTogglerHidden:"ce-inline-toolbar__dropdown--hidden",conversionTogglerContent:"ce-inline-toolbar__dropdown-content",togglerAndButtonsWrapper:"ce-inline-toolbar__toggler-and-button-wrapper"},this.opened=!1,this.toolbarVerticalMargin=I()?20:6,this.buttonsList=null,this.width=0,this.flipper=null}toggleReadOnly(t){t?(this.destroy(),this.Editor.ConversionToolbar.destroy()):window.requestIdleCallback((()=>{this.make()}),{timeout:2e3})}async tryToShow(t=!1,e=!0){t&&this.close(),this.allowedToShow()&&(await this.addToolsFiltered(e),this.move(),this.open(e),this.Editor.Toolbar.close())}close(){this.opened&&(this.Editor.ReadOnly.isEnabled||(this.nodes.wrapper.classList.remove(this.CSS.inlineToolbarShowed),Array.from(this.toolsInstances.entries()).forEach((([t,e])=>{const i=this.getToolShortcut(t);i&&Pt.remove(this.Editor.UI.nodes.redactor,i),p(e.clear)&&e.clear()})),this.reset(),this.opened=!1,this.flipper.deactivate(),this.Editor.ConversionToolbar.close()))}containsNode(t){return void 0!==this.nodes.wrapper&&this.nodes.wrapper.contains(t)}destroy(){this.flipper&&(this.flipper.deactivate(),this.flipper=null),this.removeAllNodes()}make(){this.nodes.wrapper=B.make("div",[this.CSS.inlineToolbar,...this.isRtl?[this.Editor.UI.CSS.editorRtlFix]:[]]),this.nodes.togglerAndButtonsWrapper=B.make("div",this.CSS.togglerAndButtonsWrapper),this.nodes.buttons=B.make("div",this.CSS.buttonsWrapper),this.nodes.actions=B.make("div",this.CSS.actionsWrapper),this.listeners.on(this.nodes.wrapper,"mousedown",(t=>{t.target.closest(`.${this.CSS.actionsWrapper}`)||t.preventDefault()})),B.append(this.nodes.wrapper,[this.nodes.togglerAndButtonsWrapper,this.nodes.actions]),B.append(this.Editor.UI.nodes.wrapper,this.nodes.wrapper),this.addConversionToggler(),B.append(this.nodes.togglerAndButtonsWrapper,this.nodes.buttons),this.prepareConversionToolbar(),window.requestAnimationFrame((()=>{this.recalculateWidth()})),this.enableFlipper()}open(){if(this.opened)return;this.nodes.wrapper.classList.add(this.CSS.inlineToolbarShowed),this.buttonsList=this.nodes.buttons.querySelectorAll(`.${this.CSS.inlineToolButton}`),this.opened=!0;let t=Array.from(this.buttonsList);t.unshift(this.nodes.conversionToggler),t=t.filter((t=>!t.hidden)),this.flipper.activate(t)}move(){const t=U.rect,e=this.Editor.UI.nodes.wrapper.getBoundingClientRect(),i={x:t.x-e.x,y:t.y+t.height-e.top+this.toolbarVerticalMargin};i.x+this.width+e.x>this.Editor.UI.contentRect.right&&(i.x=this.Editor.UI.contentRect.right-this.width-e.x),this.nodes.wrapper.style.left=Math.floor(i.x)+"px",this.nodes.wrapper.style.top=Math.floor(i.y)+"px"}reset(){this.nodes.wrapper.classList.remove(this.CSS.inlineToolbarLeftOriented,this.CSS.inlineToolbarRightOriented),this.nodes.wrapper.style.left="0",this.nodes.wrapper.style.top="0"}allowedToShow(){const t=U.get(),e=U.text;if(!t||!t.anchorNode||t.isCollapsed||e.length<1)return!1;const i=B.isElement(t.anchorNode)?t.anchorNode:t.anchorNode.parentElement;if(t&&["IMG","INPUT"].includes(i.tagName)||null===i.closest('[contenteditable="true"]'))return!1;const n=this.Editor.BlockManager.getBlock(t.anchorNode);return!!n&&0!==n.tool.inlineTools.size}recalculateWidth(){this.width=this.nodes.wrapper.offsetWidth}addConversionToggler(){this.nodes.conversionToggler=B.make("div",this.CSS.conversionToggler),this.nodes.conversionTogglerContent=B.make("div",this.CSS.conversionTogglerContent);const t=B.make("div",this.CSS.conversionTogglerArrow,{innerHTML:ft});this.nodes.conversionToggler.appendChild(this.nodes.conversionTogglerContent),this.nodes.conversionToggler.appendChild(t),this.nodes.togglerAndButtonsWrapper.appendChild(this.nodes.conversionToggler),this.listeners.on(this.nodes.conversionToggler,"click",(()=>{this.Editor.ConversionToolbar.toggle((t=>{!t&&this.opened?this.flipper.activate():this.opened&&this.flipper.deactivate()}))})),!1===I()&&pt(this.nodes.conversionToggler,D.ui(gt.ui.inlineToolbar.converter,"Convert to"),{placement:"top",hidingDelay:100})}async setConversionTogglerContent(){const{BlockManager:t}=this.Editor,{currentBlock:e}=t,i=e.name,n=e.tool.conversionConfig,s=n&&n.export;this.nodes.conversionToggler.hidden=!s,this.nodes.conversionToggler.classList.toggle(this.CSS.conversionTogglerHidden,!s);const o=await e.getActiveToolboxEntry()||{};this.nodes.conversionTogglerContent.innerHTML=o.icon||o.title||C(i)}prepareConversionToolbar(){const t=this.Editor.ConversionToolbar.make();B.append(this.nodes.wrapper,t)}async addToolsFiltered(t=!0){const e=U.get(),i=this.Editor.BlockManager.getBlock(e.anchorNode);this.nodes.buttons.innerHTML="",this.nodes.actions.innerHTML="",this.toolsInstances=new Map,Array.from(i.tool.inlineTools.values()).forEach((t=>{this.addTool(t)})),t&&this.Editor.ConversionToolbar.hasTools()?await this.setConversionTogglerContent():this.nodes.conversionToggler.hidden=!0,this.recalculateWidth()}addTool(t){const e=t.create(),i=e.render();if(!i)return void d("Render method must return an instance of Node","warn",t.name);if(i.dataset.tool=t.name,this.nodes.buttons.appendChild(i),this.toolsInstances.set(t.name,e),p(e.renderActions)){const t=e.renderActions();this.nodes.actions.appendChild(t)}this.listeners.on(i,"click",(t=>{this.toolClicked(e),t.preventDefault()}));const n=this.getToolShortcut(t.name);if(n)try{this.enableShortcuts(e,n)}catch{}const s=B.make("div"),o=D.t(gt.toolNames,t.title||C(t.name));s.appendChild(B.text(o)),n&&s.appendChild(B.make("div",this.CSS.inlineToolbarShortcut,{textContent:S(n)})),!1===I()&&pt(i,s,{placement:"top",hidingDelay:100}),e.checkState(U.get())}getToolShortcut(t){const{Tools:e}=this.Editor,i=e.inlineTools.get(t),n=e.internal.inlineTools;return Array.from(n.keys()).includes(t)?this.inlineTools[t][qt.Shortcut]:i.shortcut}enableShortcuts(t,e){Pt.add({name:e,handler:e=>{const{currentBlock:i}=this.Editor.BlockManager;i&&i.tool.enabledInlineTools&&(e.preventDefault(),this.toolClicked(t))},on:this.Editor.UI.nodes.redactor})}toolClicked(t){const e=U.range;t.surround(e),this.checkToolsState(),void 0!==t.renderActions&&this.flipper.deactivate()}checkToolsState(){this.toolsInstances.forEach((t=>{t.checkState(U.get())}))}get inlineTools(){const t={};return Array.from(this.Editor.Tools.inlineTools.entries()).forEach((([e,i])=>{t[e]=i.create()})),t}enableFlipper(){this.flipper=new wt({focusedItemClass:this.CSS.focusedButton,allowedKeys:[r,9]})}},BlockEvents:class extends j{keydown(t){switch(this.beforeKeydownProcessing(t),t.keyCode){case 8:this.backspace(t);break;case 46:this.delete(t);break;case r:this.enter(t);break;case l:case 39:this.arrowRightAndDown(t);break;case a:case 37:this.arrowLeftAndUp(t);break;case 9:this.tabPressed(t);break;case 191:t.ctrlKey||t.metaKey?this.commandSlashPressed():this.slashPressed()}}beforeKeydownProcessing(t){this.needToolbarClosing(t)&&y(t.keyCode)&&(this.Editor.Toolbar.close(),this.Editor.ConversionToolbar.close(),t.ctrlKey||t.metaKey||t.altKey||t.shiftKey||this.Editor.BlockSelection.clearSelection(t))}keyup(t){t.shiftKey||this.Editor.UI.checkEmptiness()}dragOver(t){this.Editor.BlockManager.getBlockByChildNode(t.target).dropTarget=!0}dragLeave(t){this.Editor.BlockManager.getBlockByChildNode(t.target).dropTarget=!1}handleCommandC(t){const{BlockSelection:e}=this.Editor;e.anyBlockSelected&&e.copySelectedBlocks(t)}handleCommandX(t){const{BlockSelection:e,BlockManager:i,Caret:n}=this.Editor;e.anyBlockSelected&&e.copySelectedBlocks(t).then((()=>{const s=i.removeSelectedBlocks(),o=i.insertDefaultBlockAtIndex(s,!0);n.setToBlock(o,n.positions.START),e.clearSelection(t)}))}tabPressed(t){const{InlineToolbar:e,ConversionToolbar:i,Caret:n}=this.Editor;i.opened||e.opened||(t.shiftKey?n.navigatePrevious(!0):n.navigateNext(!0))&&t.preventDefault()}commandSlashPressed(){this.Editor.BlockSelection.selectedBlocks.length>1||this.activateBlockSettings()}slashPressed(){this.Editor.BlockManager.currentBlock.isEmpty&&this.activateToolbox()}enter(t){const{BlockManager:e,UI:i}=this.Editor;if(e.currentBlock.tool.isLineBreaksEnabled||i.someToolbarOpened&&i.someFlipperButtonFocused||t.shiftKey)return;let n=this.Editor.BlockManager.currentBlock;this.Editor.Caret.isAtStart&&!this.Editor.BlockManager.currentBlock.hasMedia?this.Editor.BlockManager.insertDefaultBlockAtIndex(this.Editor.BlockManager.currentBlockIndex):n=this.Editor.Caret.isAtEnd?this.Editor.BlockManager.insertDefaultBlockAtIndex(this.Editor.BlockManager.currentBlockIndex+1):this.Editor.BlockManager.split(),this.Editor.Caret.setToBlock(n),this.Editor.Toolbar.moveAndOpen(n),t.preventDefault()}backspace(t){const{BlockManager:e,Caret:i}=this.Editor,{currentBlock:n,previousBlock:s}=e;if(U.isCollapsed&&i.isAtStart)if(t.preventDefault(),this.Editor.Toolbar.close(),n.currentInput===n.firstInput){if(null!==s)if(s.isEmpty)e.removeBlock(s);else if(n.isEmpty){e.removeBlock(n);const t=e.currentBlock;i.setToBlock(t,i.positions.END)}else W(n,s)?this.mergeBlocks(s,n):i.setToBlock(s,i.positions.END)}else i.navigatePrevious()}delete(t){const{BlockManager:e,Caret:i}=this.Editor,{currentBlock:n,nextBlock:s}=e;if(U.isCollapsed&&i.isAtEnd)if(t.preventDefault(),this.Editor.Toolbar.close(),n.currentInput===n.lastInput){if(null!==s){if(!s.isEmpty)return n.isEmpty?(e.removeBlock(n),void i.setToBlock(s,i.positions.START)):void(W(n,s)?this.mergeBlocks(n,s):i.setToBlock(s,i.positions.START));e.removeBlock(s)}}else i.navigateNext()}mergeBlocks(t,e){const{BlockManager:i,Caret:n,Toolbar:s}=this.Editor;n.createShadow(t.pluginsContent),i.mergeBlocks(t,e).then((()=>{window.requestAnimationFrame((()=>{n.restoreCaret(t.pluginsContent),t.pluginsContent.normalize(),s.close()}))}))}arrowRightAndDown(t){const e=wt.usedKeys.includes(t.keyCode)&&(!t.shiftKey||9===t.keyCode);if(this.Editor.UI.someToolbarOpened&&e)return;this.Editor.Toolbar.close();const i=this.Editor.Caret.isAtEnd||this.Editor.BlockSelection.anyBlockSelected;t.shiftKey&&t.keyCode===l&&i?this.Editor.CrossBlockSelection.toggleBlockSelectedState():(t.keyCode===l||39===t.keyCode&&!this.isRtl?this.Editor.Caret.navigateNext():this.Editor.Caret.navigatePrevious())?t.preventDefault():(k((()=>{this.Editor.BlockManager.currentBlock&&this.Editor.BlockManager.currentBlock.updateCurrentInput()}),20)(),this.Editor.BlockSelection.clearSelection(t))}arrowLeftAndUp(t){if(this.Editor.UI.someToolbarOpened){if(wt.usedKeys.includes(t.keyCode)&&(!t.shiftKey||9===t.keyCode))return;this.Editor.UI.closeAllToolbars()}this.Editor.Toolbar.close();const e=this.Editor.Caret.isAtStart||this.Editor.BlockSelection.anyBlockSelected;t.shiftKey&&t.keyCode===a&&e?this.Editor.CrossBlockSelection.toggleBlockSelectedState(!1):(t.keyCode===a||37===t.keyCode&&!this.isRtl?this.Editor.Caret.navigatePrevious():this.Editor.Caret.navigateNext())?t.preventDefault():(k((()=>{this.Editor.BlockManager.currentBlock&&this.Editor.BlockManager.currentBlock.updateCurrentInput()}),20)(),this.Editor.BlockSelection.clearSelection(t))}needToolbarClosing(t){const e=t.keyCode===r&&this.Editor.Toolbar.toolbox.opened,i=t.keyCode===r&&this.Editor.BlockSettings.opened,n=t.keyCode===r&&this.Editor.InlineToolbar.opened,s=t.keyCode===r&&this.Editor.ConversionToolbar.opened,o=9===t.keyCode;return!(t.shiftKey||o||e||i||n||s)}activateToolbox(){this.Editor.Toolbar.opened||this.Editor.Toolbar.moveAndOpen(),this.Editor.Toolbar.toolbox.open()}activateBlockSettings(){this.Editor.Toolbar.opened||this.Editor.Toolbar.moveAndOpen(),this.Editor.BlockSettings.opened||this.Editor.BlockSettings.open()}},BlockManager:class extends j{constructor(){super(...arguments),this._currentBlockIndex=-1,this._blocks=null}get currentBlockIndex(){return this._currentBlockIndex}set currentBlockIndex(t){this._currentBlockIndex=t}get firstBlock(){return this._blocks[0]}get lastBlock(){return this._blocks[this._blocks.length-1]}get currentBlock(){return this._blocks[this.currentBlockIndex]}set currentBlock(t){this.currentBlockIndex=this.getBlockIndex(t)}get nextBlock(){return this.currentBlockIndex===this._blocks.length-1?null:this._blocks[this.currentBlockIndex+1]}get nextContentfulBlock(){return this.blocks.slice(this.currentBlockIndex+1).find((t=>!!t.inputs.length))}get previousContentfulBlock(){return this.blocks.slice(0,this.currentBlockIndex).reverse().find((t=>!!t.inputs.length))}get previousBlock(){return 0===this.currentBlockIndex?null:this._blocks[this.currentBlockIndex-1]}get blocks(){return this._blocks.array}get isEditorEmpty(){return this.blocks.every((t=>t.isEmpty))}prepare(){const t=new Kt(this.Editor.UI.nodes.redactor);this._blocks=new Proxy(t,{set:Kt.set,get:Kt.get}),this.listeners.on(document,"copy",(t=>this.Editor.BlockEvents.handleCommandC(t)))}toggleReadOnly(t){t?this.disableModuleBindings():this.enableModuleBindings()}composeBlock({tool:t,data:e={},id:i,tunes:n={}}){const s=this.Editor.ReadOnly.isEnabled,o=this.Editor.Tools.blockTools.get(t),r=new K({id:i,data:e,tool:o,api:this.Editor.API,readOnly:s,tunesData:n},this.eventsDispatcher);return s||window.requestIdleCallback((()=>{this.bindBlockEvents(r)}),{timeout:2e3}),r}insert({id:t,tool:e=this.config.defaultBlock,data:i={},index:n,needToFocus:s=!0,replace:o=!1,tunes:r={}}={}){let a=n;void 0===a&&(a=this.currentBlockIndex+(o?0:1));const l=this.composeBlock({id:t,tool:e,data:i,tunes:r});return o&&this.blockDidMutated(Xt,this.getBlockByIndex(a),{index:a}),this._blocks.insert(a,l,o),this.blockDidMutated(Yt,l,{index:a}),s?this.currentBlockIndex=a:a<=this.currentBlockIndex&&this.currentBlockIndex++,l}insertMany(t,e=0){this._blocks.insertMany(t,e)}async update(t,e){const i=await t.data,n=this.composeBlock({id:t.id,tool:t.name,data:Object.assign({},i,e),tunes:t.tunes}),s=this.getBlockIndex(t);return this._blocks.replace(s,n),this.blockDidMutated(Jt,n,{index:s}),n}replace(t,e,i){const n=this.getBlockIndex(t);this.insert({tool:e,data:i,index:n,replace:!0})}paste(t,e,i=!1){const n=this.insert({tool:t,replace:i});try{window.requestIdleCallback((()=>{n.call(G.ON_PASTE,e)}))}catch(e){d(`${t}: onPaste callback call is failed`,"error",e)}return n}insertDefaultBlockAtIndex(t,e=!1){const i=this.composeBlock({tool:this.config.defaultBlock});return this._blocks[t]=i,this.blockDidMutated(Yt,i,{index:t}),e?this.currentBlockIndex=t:t<=this.currentBlockIndex&&this.currentBlockIndex++,i}insertAtEnd(){return this.currentBlockIndex=this.blocks.length-1,this.insert()}async mergeBlocks(t,e){const i=await e.data;v(i)||await t.mergeWith(i),this.removeBlock(e),this.currentBlockIndex=this._blocks.indexOf(t)}removeBlock(t,e=!0){return new Promise((i=>{const n=this._blocks.indexOf(t);if(!this.validateIndex(n))throw new Error("Can't find a Block to remove");t.destroy(),this._blocks.remove(n),this.blockDidMutated(Xt,t,{index:n}),this.currentBlockIndex>=n&&this.currentBlockIndex--,this.blocks.length?0===n&&(this.currentBlockIndex=0):(this.currentBlockIndex=-1,e&&this.insert()),i()}))}removeSelectedBlocks(){let t;for(let e=this.blocks.length-1;e>=0;e--)this.blocks[e].selected&&(this.removeBlock(this.blocks[e]),t=e);return t}removeAllBlocks(){for(let t=this.blocks.length-1;t>=0;t--)this._blocks.remove(t);this.currentBlockIndex=-1,this.insert(),this.currentBlock.firstInput.focus()}split(){const t=this.Editor.Caret.extractFragmentFromCaretPosition(),e=B.make("div");e.appendChild(t);const i={text:B.isEmpty(e)?"":e.innerHTML};return this.insert({data:i})}getBlockByIndex(t){return-1===t&&(t=this._blocks.length-1),this._blocks[t]}getBlockIndex(t){return this._blocks.indexOf(t)}getBlockById(t){return this._blocks.array.find((e=>e.id===t))}getBlock(t){B.isElement(t)||(t=t.parentNode);const e=this._blocks.nodes,i=t.closest(`.${K.CSS.wrapper}`),n=e.indexOf(i);if(n>=0)return this._blocks[n]}setCurrentBlockByChildNode(t){B.isElement(t)||(t=t.parentNode);const e=t.closest(`.${K.CSS.wrapper}`);if(!e)return;const i=e.closest(`.${this.Editor.UI.CSS.editorWrapper}`);return null!=i&&i.isEqualNode(this.Editor.UI.nodes.wrapper)?(this.currentBlockIndex=this._blocks.nodes.indexOf(e),this.currentBlock.updateCurrentInput(),this.currentBlock):void 0}getBlockByChildNode(t){if(!(t&&t instanceof Node))return;B.isElement(t)||(t=t.parentNode);const e=t.closest(`.${K.CSS.wrapper}`);return this.blocks.find((t=>t.holder===e))}swap(t,e){this._blocks.swap(t,e),this.currentBlockIndex=e}move(t,e=this.currentBlockIndex){isNaN(t)||isNaN(e)?d("Warning during 'move' call: incorrect indices provided.","warn"):this.validateIndex(t)&&this.validateIndex(e)?(this._blocks.move(t,e),this.currentBlockIndex=t,this.blockDidMutated("block-moved",this.currentBlock,{fromIndex:e,toIndex:t})):d("Warning during 'move' call: indices cannot be lower than 0 or greater than the amount of blocks.","warn")}async convert(t,e,i){if(!await t.save())throw new Error("Could not convert Block. Failed to extract original Block data.");const n=this.Editor.Tools.blockTools.get(e);if(!n)throw new Error(`Could not convert Block. Tool «${e}» not found.`);let s=function(t,e){const i=null==e?void 0:e.import;return p(i)?i(t):f(i)?{[i]:t}:(void 0!==i&&d("Conversion «import» property must be a string or function. String means key of tool data to import. Function accepts a imported string and return composed tool data."),{})}(st(await t.exportDataAsString(),n.sanitizeConfig),n.conversionConfig);i&&(s=Object.assign(s,i)),this.replace(t,n.name,s)}dropPointer(){this.currentBlockIndex=-1}async clear(t=!1){const e=new Qt;this.blocks.forEach((t=>{e.add((async()=>{await this.removeBlock(t,!1)}))})),await e.completed,this.dropPointer(),t&&this.insert(),this.Editor.UI.checkEmptiness()}async destroy(){await Promise.all(this.blocks.map((t=>t.destroy())))}bindBlockEvents(t){const{BlockEvents:e}=this.Editor;this.readOnlyMutableListeners.on(t.holder,"keydown",(t=>{e.keydown(t)})),this.readOnlyMutableListeners.on(t.holder,"keyup",(t=>{e.keyup(t)})),this.readOnlyMutableListeners.on(t.holder,"dragover",(t=>{e.dragOver(t)})),this.readOnlyMutableListeners.on(t.holder,"dragleave",(t=>{e.dragLeave(t)})),t.on("didMutated",(t=>this.blockDidMutated(Jt,t,{index:this.getBlockIndex(t)})))}disableModuleBindings(){this.readOnlyMutableListeners.clearAll()}enableModuleBindings(){this.readOnlyMutableListeners.on(document,"cut",(t=>this.Editor.BlockEvents.handleCommandX(t))),this.blocks.forEach((t=>{this.bindBlockEvents(t)}))}validateIndex(t){return!(t<0||t>=this._blocks.length)}blockDidMutated(t,e,i){const n=new CustomEvent(t,{detail:{target:new N(e),...i}});return this.eventsDispatcher.emit(q,{event:n}),e}},BlockSelection:class extends j{constructor(){super(...arguments),this.anyBlockSelectedCache=null,this.needToSelectAll=!1,this.nativeInputSelected=!1,this.readyToBlockSelection=!1}get sanitizerConfig(){return{p:{},h1:{},h2:{},h3:{},h4:{},h5:{},h6:{},ol:{},ul:{},li:{},br:!0,img:{src:!0,width:!0,height:!0},a:{href:!0},b:{},i:{},u:{}}}get allBlocksSelected(){const{BlockManager:t}=this.Editor;return t.blocks.every((t=>!0===t.selected))}set allBlocksSelected(t){const{BlockManager:e}=this.Editor;e.blocks.forEach((e=>{e.selected=t})),this.clearCache()}get anyBlockSelected(){const{BlockManager:t}=this.Editor;return null===this.anyBlockSelectedCache&&(this.anyBlockSelectedCache=t.blocks.some((t=>!0===t.selected))),this.anyBlockSelectedCache}get selectedBlocks(){return this.Editor.BlockManager.blocks.filter((t=>t.selected))}prepare(){this.selection=new U,Pt.add({name:"CMD+A",handler:t=>{const{BlockManager:e,ReadOnly:i}=this.Editor;if(i.isEnabled)return t.preventDefault(),void this.selectAllBlocks();e.currentBlock&&this.handleCommandA(t)},on:this.Editor.UI.nodes.redactor})}toggleReadOnly(){U.get().removeAllRanges(),this.allBlocksSelected=!1}unSelectBlockByIndex(t){const{BlockManager:e}=this.Editor;let i;i=isNaN(t)?e.currentBlock:e.getBlockByIndex(t),i.selected=!1,this.clearCache()}clearSelection(t,e=!1){const{BlockManager:i,Caret:n,RectangleSelection:s}=this.Editor;this.needToSelectAll=!1,this.nativeInputSelected=!1,this.readyToBlockSelection=!1;const o=t&&t instanceof KeyboardEvent,r=o&&y(t.keyCode);if(this.anyBlockSelected&&o&&r&&!U.isSelectionExists){const e=i.removeSelectedBlocks();i.insertDefaultBlockAtIndex(e,!0),n.setToBlock(i.currentBlock),k((()=>{const e=t.key;n.insertContentAtCaretPosition(e.length>1?"":e)}),20)()}this.Editor.CrossBlockSelection.clear(t),this.anyBlockSelected&&!s.isRectActivated()?(e&&this.selection.restore(),this.allBlocksSelected=!1):this.Editor.RectangleSelection.clearSelection()}copySelectedBlocks(t){t.preventDefault();const e=B.make("div");this.selectedBlocks.forEach((t=>{const i=st(t.holder.innerHTML,this.sanitizerConfig),n=B.make("p");n.innerHTML=i,e.appendChild(n)}));const i=Array.from(e.childNodes).map((t=>t.textContent)).join("\n\n"),n=e.innerHTML;return t.clipboardData.setData("text/plain",i),t.clipboardData.setData("text/html",n),Promise.all(this.selectedBlocks.map((t=>t.save()))).then((e=>{try{t.clipboardData.setData(this.Editor.Paste.MIME_TYPE,JSON.stringify(e))}catch{}}))}selectBlockByIndex(t){const{BlockManager:e}=this.Editor,i=e.getBlockByIndex(t);void 0!==i&&this.selectBlock(i)}selectBlock(t){this.selection.save(),U.get().removeAllRanges(),t.selected=!0,this.clearCache(),this.Editor.InlineToolbar.close()}unselectBlock(t){t.selected=!1,this.clearCache()}clearCache(){this.anyBlockSelectedCache=null}destroy(){Pt.remove(this.Editor.UI.nodes.redactor,"CMD+A")}handleCommandA(t){if(this.Editor.RectangleSelection.clearSelection(),B.isNativeInput(t.target)&&!this.readyToBlockSelection)return void(this.readyToBlockSelection=!0);const e=this.Editor.BlockManager.getBlock(t.target),i=e.inputs;i.length>1&&!this.readyToBlockSelection?this.readyToBlockSelection=!0:1!==i.length||this.needToSelectAll?this.needToSelectAll?(t.preventDefault(),this.selectAllBlocks(),this.needToSelectAll=!1,this.readyToBlockSelection=!1,this.Editor.ConversionToolbar.close()):this.readyToBlockSelection&&(t.preventDefault(),this.selectBlock(e),this.needToSelectAll=!0):this.needToSelectAll=!0}selectAllBlocks(){this.selection.save(),U.get().removeAllRanges(),this.allBlocksSelected=!0,this.Editor.InlineToolbar.close()}},Caret:Zt,CrossBlockSelection:class extends j{constructor(){super(...arguments),this.onMouseUp=()=>{this.listeners.off(document,"mouseover",this.onMouseOver),this.listeners.off(document,"mouseup",this.onMouseUp)},this.onMouseOver=t=>{const{BlockManager:e,BlockSelection:i}=this.Editor;if(null===t.relatedTarget&&null===t.target)return;const n=e.getBlockByChildNode(t.relatedTarget)||this.lastSelectedBlock,s=e.getBlockByChildNode(t.target);if(n&&s&&s!==n){if(n===this.firstSelectedBlock)return U.get().removeAllRanges(),n.selected=!0,s.selected=!0,void i.clearCache();if(s===this.firstSelectedBlock)return n.selected=!1,s.selected=!1,void i.clearCache();this.Editor.InlineToolbar.close(),this.toggleBlocksSelectedState(n,s),this.lastSelectedBlock=s}}}async prepare(){this.listeners.on(document,"mousedown",(t=>{this.enableCrossBlockSelection(t)}))}watchSelection(t){if(0!==t.button)return;const{BlockManager:e}=this.Editor;this.firstSelectedBlock=e.getBlock(t.target),this.lastSelectedBlock=this.firstSelectedBlock,this.listeners.on(document,"mouseover",this.onMouseOver),this.listeners.on(document,"mouseup",this.onMouseUp)}get isCrossBlockSelectionStarted(){return!!this.firstSelectedBlock&&!!this.lastSelectedBlock}toggleBlockSelectedState(t=!0){const{BlockManager:e,BlockSelection:i}=this.Editor;this.lastSelectedBlock||(this.lastSelectedBlock=this.firstSelectedBlock=e.currentBlock),this.firstSelectedBlock===this.lastSelectedBlock&&(this.firstSelectedBlock.selected=!0,i.clearCache(),U.get().removeAllRanges());const n=e.blocks.indexOf(this.lastSelectedBlock)+(t?1:-1),s=e.blocks[n];s&&(this.lastSelectedBlock.selected!==s.selected?(s.selected=!0,i.clearCache()):(this.lastSelectedBlock.selected=!1,i.clearCache()),this.lastSelectedBlock=s,this.Editor.InlineToolbar.close(),s.holder.scrollIntoView({block:"nearest"}))}clear(t){const{BlockManager:e,BlockSelection:i,Caret:n}=this.Editor,s=e.blocks.indexOf(this.firstSelectedBlock),o=e.blocks.indexOf(this.lastSelectedBlock);if(i.anyBlockSelected&&s>-1&&o>-1&&t&&t instanceof KeyboardEvent)switch(t.keyCode){case l:case 39:n.setToBlock(e.blocks[Math.max(s,o)],n.positions.END);break;case a:case 37:n.setToBlock(e.blocks[Math.min(s,o)],n.positions.START);break;default:n.setToBlock(e.blocks[Math.max(s,o)],n.positions.END)}this.firstSelectedBlock=this.lastSelectedBlock=null}enableCrossBlockSelection(t){const{UI:e}=this.Editor;U.isCollapsed||this.Editor.BlockSelection.clearSelection(t),e.nodes.redactor.contains(t.target)?this.watchSelection(t):this.Editor.BlockSelection.clearSelection(t)}toggleBlocksSelectedState(t,e){const{BlockManager:i,BlockSelection:n}=this.Editor,s=i.blocks.indexOf(t),o=i.blocks.indexOf(e),r=t.selected!==e.selected;for(let a=Math.min(s,o);a<=Math.max(s,o);a++){const s=i.blocks[a];s!==this.firstSelectedBlock&&s!==(r?t:e)&&(i.blocks[a].selected=!i.blocks[a].selected,n.clearCache())}}},DragNDrop:class extends j{constructor(){super(...arguments),this.isStartedAtEditor=!1}toggleReadOnly(t){t?this.disableModuleBindings():this.enableModuleBindings()}enableModuleBindings(){const{UI:t}=this.Editor;this.readOnlyMutableListeners.on(t.nodes.holder,"drop",(async t=>{await this.processDrop(t)}),!0),this.readOnlyMutableListeners.on(t.nodes.holder,"dragstart",(()=>{this.processDragStart()})),this.readOnlyMutableListeners.on(t.nodes.holder,"dragover",(t=>{this.processDragOver(t)}),!0)}disableModuleBindings(){this.readOnlyMutableListeners.clearAll()}async processDrop(t){const{BlockManager:e,Caret:i,Paste:n}=this.Editor;t.preventDefault(),e.blocks.forEach((t=>{t.dropTarget=!1})),U.isAtEditor&&!U.isCollapsed&&this.isStartedAtEditor&&document.execCommand("delete"),this.isStartedAtEditor=!1;const s=e.setCurrentBlockByChildNode(t.target);if(s)this.Editor.Caret.setToBlock(s,i.positions.END);else{const t=e.setCurrentBlockByChildNode(e.lastBlock.holder);this.Editor.Caret.setToBlock(t,i.positions.END)}await n.processDataTransfer(t.dataTransfer,!0)}processDragStart(){U.isAtEditor&&!U.isCollapsed&&(this.isStartedAtEditor=!0),this.Editor.InlineToolbar.close()}processDragOver(t){t.preventDefault()}},ModificationsObserver:class extends j{constructor({config:t,eventsDispatcher:e}){super({config:t,eventsDispatcher:e}),this.disabled=!1,this.batchingTimeout=null,this.batchingOnChangeQueue=new Map,this.batchTime=400,this.mutationObserver=new MutationObserver((t=>{this.redactorChanged(t)})),this.eventsDispatcher.on(q,(t=>{this.particularBlockChanged(t.event)})),this.eventsDispatcher.on($,(()=>{this.disable()})),this.eventsDispatcher.on(V,(()=>{this.enable()}))}enable(){this.mutationObserver.observe(this.Editor.UI.nodes.redactor,{childList:!0,subtree:!0,characterData:!0,attributes:!0}),this.disabled=!1}disable(){this.mutationObserver.disconnect(),this.disabled=!0}particularBlockChanged(t){this.disabled||!p(this.config.onChange)||(this.batchingOnChangeQueue.set(`block:${t.detail.target.id}:event:${t.type}`,t),this.batchingTimeout&&clearTimeout(this.batchingTimeout),this.batchingTimeout=setTimeout((()=>{let t;t=1===this.batchingOnChangeQueue.size?this.batchingOnChangeQueue.values().next().value:Array.from(this.batchingOnChangeQueue.values()),this.config.onChange&&this.config.onChange(this.Editor.API.methods,t),this.batchingOnChangeQueue.clear()}),this.batchTime))}redactorChanged(t){this.eventsDispatcher.emit(z,{mutations:t})}},Paste:ee,ReadOnly:class extends j{constructor(){super(...arguments),this.toolsDontSupportReadOnly=[],this.readOnlyEnabled=!1}get isEnabled(){return this.readOnlyEnabled}async prepare(){const{Tools:t}=this.Editor,{blockTools:e}=t,i=[];Array.from(e.entries()).forEach((([t,e])=>{e.isReadOnlySupported||i.push(t)})),this.toolsDontSupportReadOnly=i,this.config.readOnly&&i.length>0&&this.throwCriticalError(),this.toggle(this.config.readOnly)}async toggle(t=!this.readOnlyEnabled){t&&this.toolsDontSupportReadOnly.length>0&&this.throwCriticalError();const e=this.readOnlyEnabled;this.readOnlyEnabled=t;for(const e in this.Editor)this.Editor[e].toggleReadOnly&&this.Editor[e].toggleReadOnly(t);if(e===t)return this.readOnlyEnabled;const i=await this.Editor.Saver.save();return await this.Editor.BlockManager.clear(),await this.Editor.Renderer.render(i.blocks),this.readOnlyEnabled}throwCriticalError(){throw new O(`To enable read-only mode all connected tools should support it. Tools ${this.toolsDontSupportReadOnly.join(", ")} don't support read-only mode.`)}},RectangleSelection:ie,Renderer:class extends j{async render(t){return new Promise((e=>{const{Tools:i,BlockManager:n}=this.Editor;if(0===t.length)n.insert();else{const e=t.map((({type:t,data:e,tunes:s,id:o})=>{let r;!1===i.available.has(t)&&(h(`Tool «${t}» is not found. Check 'tools' property at the Editor.js config.`,"warn"),e=this.composeStubDataForTool(t,e,o),t=i.stubTool);try{r=n.composeBlock({id:o,tool:t,data:e,tunes:s})}catch(a){d(`Block «${t}» skipped because of plugins error`,"error",{data:e,error:a}),e=this.composeStubDataForTool(t,e,o),t=i.stubTool,r=n.composeBlock({id:o,tool:t,data:e,tunes:s})}return r}));n.insertMany(e)}window.requestIdleCallback((()=>{e()}),{timeout:2e3})}))}composeStubDataForTool(t,e,i){const{Tools:n}=this.Editor;let s=t;if(n.unavailable.has(t)){const e=n.unavailable.get(t).toolbox;void 0!==e&&void 0!==e[0].title&&(s=e[0].title)}return{savedData:{id:i,type:t,data:e},title:s}}},Saver:class extends j{async save(){const{BlockManager:t,Tools:e}=this.Editor,i=t.blocks,n=[];try{i.forEach((t=>{n.push(this.getSavedData(t))}));const t=await Promise.all(n),s=await nt(t,(t=>e.blockTools.get(t).sanitizeConfig));return this.makeOutput(s)}catch(t){h("Saving failed due to the Error %o","error",t)}}async getSavedData(t){const e=await t.save(),i=e&&await t.validate(e.data);return{...e,isValid:i}}makeOutput(t){const e=[];return t.forEach((({id:t,tool:i,data:n,tunes:s,isValid:o})=>{if(!o)return void d(`Block «${i}» skipped because saved data is invalid`);if(i===this.Editor.Tools.stubTool)return void e.push(n);const r={id:t,type:i,data:n,...!v(s)&&{tunes:s}};e.push(r)})),{time:+new Date,blocks:e,version:"2.29.0"}}},Tools:ke,UI:class extends j{constructor(){super(...arguments),this.isMobile=!1,this.contentRectCache=void 0,this.resizeDebouncer=x((()=>{this.windowResize()}),200)}get CSS(){return{editorWrapper:"codex-editor",editorWrapperNarrow:"codex-editor--narrow",editorZone:"codex-editor__redactor",editorZoneHidden:"codex-editor__redactor--hidden",editorEmpty:"codex-editor--empty",editorRtlFix:"codex-editor--rtl"}}get contentRect(){if(this.contentRectCache)return this.contentRectCache;const t=this.nodes.wrapper.querySelector(`.${K.CSS.content}`);return t?(this.contentRectCache=t.getBoundingClientRect(),this.contentRectCache):{width:650,left:0,right:0}}async prepare(){this.checkIsMobile(),this.make(),this.loadStyles()}toggleReadOnly(t){t?this.disableModuleBindings():window.requestIdleCallback((()=>{this.enableModuleBindings()}),{timeout:2e3})}checkEmptiness(){const{BlockManager:t}=this.Editor;this.nodes.wrapper.classList.toggle(this.CSS.editorEmpty,t.isEditorEmpty)}get someToolbarOpened(){const{Toolbar:t,BlockSettings:e,InlineToolbar:i,ConversionToolbar:n}=this.Editor;return e.opened||i.opened||n.opened||t.toolbox.opened}get someFlipperButtonFocused(){return!!this.Editor.Toolbar.toolbox.hasFocus()||Object.entries(this.Editor).filter((([t,e])=>e.flipper instanceof wt)).some((([t,e])=>e.flipper.hasFocus()))}destroy(){this.nodes.holder.innerHTML=""}closeAllToolbars(){const{Toolbar:t,BlockSettings:e,InlineToolbar:i,ConversionToolbar:n}=this.Editor;e.close(),i.close(),n.close(),t.toolbox.close()}checkIsMobile(){this.isMobile=window.innerWidth<650}make(){this.nodes.holder=B.getHolder(this.config.holder),this.nodes.wrapper=B.make("div",[this.CSS.editorWrapper,...this.isRtl?[this.CSS.editorRtlFix]:[]]),this.nodes.redactor=B.make("div",this.CSS.editorZone),this.nodes.holder.offsetWidth<this.contentRect.width&&this.nodes.wrapper.classList.add(this.CSS.editorWrapperNarrow),this.nodes.redactor.style.paddingBottom=this.config.minHeight+"px",this.nodes.wrapper.appendChild(this.nodes.redactor),this.nodes.holder.appendChild(this.nodes.wrapper)}loadStyles(){const t="editor-js-styles";if(B.get(t))return;const e=B.make("style",null,{id:t,textContent:':root{--selectionColor: #e1f2ff;--inlineSelectionColor: #d4ecff;--bg-light: #eff2f5;--grayText: #707684;--color-dark: #1D202B;--color-active-icon: #388AE5;--color-gray-border: rgba(201, 201, 204, .48);--content-width: 650px;--narrow-mode-right-padding: 50px;--toolbox-buttons-size: 26px;--toolbox-buttons-size--mobile: 36px;--icon-size: 20px;--icon-size--mobile: 28px;--block-padding-vertical: .4em;--color-line-gray: #EFF0F1 }.codex-editor{position:relative;-webkit-box-sizing:border-box;box-sizing:border-box;z-index:1}.codex-editor .hide{display:none}.codex-editor__redactor [contenteditable]:empty:after{content:"\\feff"}@media (min-width: 651px){.codex-editor--narrow .codex-editor__redactor{margin-right:50px}}@media (min-width: 651px){.codex-editor--narrow.codex-editor--rtl .codex-editor__redactor{margin-left:50px;margin-right:0}}@media (min-width: 651px){.codex-editor--narrow .ce-toolbar__actions{right:-5px}}.codex-editor-copyable{position:absolute;height:1px;width:1px;top:-400%;opacity:.001}.codex-editor-overlay{position:fixed;top:0px;left:0px;right:0px;bottom:0px;z-index:999;pointer-events:none;overflow:hidden}.codex-editor-overlay__container{position:relative;pointer-events:auto;z-index:0}.codex-editor-overlay__rectangle{position:absolute;pointer-events:none;background-color:#2eaadc33;border:1px solid transparent}.codex-editor svg{max-height:100%}.codex-editor path{stroke:currentColor}.codex-editor ::-moz-selection{background-color:#d4ecff}.codex-editor ::selection{background-color:#d4ecff}.codex-editor--toolbox-opened [contentEditable=true][data-placeholder]:focus:before{opacity:0!important}.ce-scroll-locked{overflow:hidden}.ce-scroll-locked--hard{overflow:hidden;top:calc(-1 * var(--window-scroll-offset));position:fixed;width:100%}.ce-toolbar{position:absolute;left:0;right:0;top:0;-webkit-transition:opacity .1s ease;transition:opacity .1s ease;will-change:opacity,top;display:none}.ce-toolbar--opened{display:block}.ce-toolbar__content{max-width:650px;margin:0 auto;position:relative}.ce-toolbar__plus{color:#1d202b;cursor:pointer;width:26px;height:26px;border-radius:7px;display:-webkit-inline-box;display:-ms-inline-flexbox;display:inline-flex;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-ms-flex-negative:0;flex-shrink:0}@media (max-width: 650px){.ce-toolbar__plus{width:36px;height:36px}}@media (hover: hover){.ce-toolbar__plus:hover{background-color:#eff2f5}}.ce-toolbar__plus--active{background-color:#eff2f5;-webkit-animation:bounceIn .75s 1;animation:bounceIn .75s 1;-webkit-animation-fill-mode:forwards;animation-fill-mode:forwards}.ce-toolbar__plus-shortcut{opacity:.6;word-spacing:-2px;margin-top:5px}@media (max-width: 650px){.ce-toolbar__plus{position:absolute;background-color:#fff;border:1px solid #E8E8EB;-webkit-box-shadow:0 3px 15px -3px rgba(13,20,33,.13);box-shadow:0 3px 15px -3px #0d142121;border-radius:6px;z-index:2;position:static}.ce-toolbar__plus--left-oriented:before{left:15px;margin-left:0}.ce-toolbar__plus--right-oriented:before{left:auto;right:15px;margin-left:0}}.ce-toolbar__actions{position:absolute;right:100%;opacity:0;display:-webkit-box;display:-ms-flexbox;display:flex;padding-right:5px}.ce-toolbar__actions--opened{opacity:1}@media (max-width: 650px){.ce-toolbar__actions{right:auto}}.ce-toolbar__settings-btn{color:#1d202b;width:26px;height:26px;border-radius:7px;display:-webkit-inline-box;display:-ms-inline-flexbox;display:inline-flex;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;margin-left:3px;cursor:pointer;user-select:none}@media (max-width: 650px){.ce-toolbar__settings-btn{width:36px;height:36px}}@media (hover: hover){.ce-toolbar__settings-btn:hover{background-color:#eff2f5}}.ce-toolbar__settings-btn--active{background-color:#eff2f5;-webkit-animation:bounceIn .75s 1;animation:bounceIn .75s 1;-webkit-animation-fill-mode:forwards;animation-fill-mode:forwards}@media (min-width: 651px){.ce-toolbar__settings-btn{width:24px}}.ce-toolbar__settings-btn--hidden{display:none}@media (max-width: 650px){.ce-toolbar__settings-btn{position:absolute;background-color:#fff;border:1px solid #E8E8EB;-webkit-box-shadow:0 3px 15px -3px rgba(13,20,33,.13);box-shadow:0 3px 15px -3px #0d142121;border-radius:6px;z-index:2;position:static}.ce-toolbar__settings-btn--left-oriented:before{left:15px;margin-left:0}.ce-toolbar__settings-btn--right-oriented:before{left:auto;right:15px;margin-left:0}}.ce-toolbar__plus svg,.ce-toolbar__settings-btn svg{width:24px;height:24px}@media (min-width: 651px){.codex-editor--narrow .ce-toolbar__plus{left:5px}}@media (min-width: 651px){.codex-editor--narrow .ce-toolbox .ce-popover{right:0;left:auto;left:initial}}.ce-inline-toolbar{--y-offset: 8px;position:absolute;background-color:#fff;border:1px solid #E8E8EB;-webkit-box-shadow:0 3px 15px -3px rgba(13,20,33,.13);box-shadow:0 3px 15px -3px #0d142121;border-radius:6px;z-index:2;opacity:0;visibility:hidden;-webkit-transition:opacity .25s ease;transition:opacity .25s ease;will-change:opacity,left,top;top:0;left:0;z-index:3}.ce-inline-toolbar--left-oriented:before{left:15px;margin-left:0}.ce-inline-toolbar--right-oriented:before{left:auto;right:15px;margin-left:0}.ce-inline-toolbar--showed{opacity:1;visibility:visible}.ce-inline-toolbar [hidden]{display:none!important}.ce-inline-toolbar__toggler-and-button-wrapper{display:-webkit-box;display:-ms-flexbox;display:flex;width:100%;padding:0 6px}.ce-inline-toolbar__buttons{display:-webkit-box;display:-ms-flexbox;display:flex}.ce-inline-toolbar__dropdown{display:-webkit-box;display:-ms-flexbox;display:flex;padding:6px;margin:0 6px 0 -6px;-webkit-box-align:center;-ms-flex-align:center;align-items:center;cursor:pointer;border-right:1px solid rgba(201,201,204,.48);-webkit-box-sizing:border-box;box-sizing:border-box}@media (hover: hover){.ce-inline-toolbar__dropdown:hover{background:#eff2f5}}.ce-inline-toolbar__dropdown--hidden{display:none}.ce-inline-toolbar__dropdown-content,.ce-inline-toolbar__dropdown-arrow{display:-webkit-box;display:-ms-flexbox;display:flex}.ce-inline-toolbar__dropdown-content svg,.ce-inline-toolbar__dropdown-arrow svg{width:20px;height:20px}.ce-inline-toolbar__shortcut{opacity:.6;word-spacing:-3px;margin-top:3px}.ce-inline-tool{display:-webkit-inline-box;display:-ms-inline-flexbox;display:inline-flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;padding:6px 1px;cursor:pointer;border:0;outline:none;background-color:transparent;vertical-align:bottom;color:inherit;margin:0;border-radius:0;line-height:normal}.ce-inline-tool svg{width:20px;height:20px}@media (max-width: 650px){.ce-inline-tool svg{width:28px;height:28px}}@media (hover: hover){.ce-inline-tool:hover{background-color:#eff2f5}}.ce-inline-tool--active{color:#388ae5}.ce-inline-tool--focused{background:rgba(34,186,255,.08)!important}.ce-inline-tool--focused{-webkit-box-shadow:inset 0 0 0px 1px rgba(7,161,227,.08);box-shadow:inset 0 0 0 1px #07a1e314}.ce-inline-tool--focused-animated{-webkit-animation-name:buttonClicked;animation-name:buttonClicked;-webkit-animation-duration:.25s;animation-duration:.25s}.ce-inline-tool--link .icon--unlink,.ce-inline-tool--unlink .icon--link{display:none}.ce-inline-tool--unlink .icon--unlink{display:inline-block;margin-bottom:-1px}.ce-inline-tool-input{outline:none;border:0;border-radius:0 0 4px 4px;margin:0;font-size:13px;padding:10px;width:100%;-webkit-box-sizing:border-box;box-sizing:border-box;display:none;font-weight:500;border-top:1px solid rgba(201,201,204,.48);-webkit-appearance:none;font-family:inherit}@media (max-width: 650px){.ce-inline-tool-input{font-size:15px;font-weight:500}}.ce-inline-tool-input::-webkit-input-placeholder{color:#707684}.ce-inline-tool-input::-moz-placeholder{color:#707684}.ce-inline-tool-input:-ms-input-placeholder{color:#707684}.ce-inline-tool-input::-ms-input-placeholder{color:#707684}.ce-inline-tool-input::placeholder{color:#707684}.ce-inline-tool-input--showed{display:block}.ce-conversion-toolbar{position:absolute;background-color:#fff;border:1px solid #E8E8EB;-webkit-box-shadow:0 3px 15px -3px rgba(13,20,33,.13);box-shadow:0 3px 15px -3px #0d142121;border-radius:6px;z-index:2;opacity:0;visibility:hidden;will-change:transform,opacity;-webkit-transition:opacity .1s ease,-webkit-transform .1s ease;transition:opacity .1s ease,-webkit-transform .1s ease;transition:transform .1s ease,opacity .1s ease;transition:transform .1s ease,opacity .1s ease,-webkit-transform .1s ease;-webkit-transform:translateY(-8px);transform:translateY(-8px);left:-1px;width:190px;margin-top:5px;-webkit-box-sizing:content-box;box-sizing:content-box}.ce-conversion-toolbar--left-oriented:before{left:15px;margin-left:0}.ce-conversion-toolbar--right-oriented:before{left:auto;right:15px;margin-left:0}.ce-conversion-toolbar--showed{opacity:1;visibility:visible;-webkit-transform:none;transform:none}.ce-conversion-toolbar [hidden]{display:none!important}.ce-conversion-toolbar__buttons{display:-webkit-box;display:-ms-flexbox;display:flex}.ce-conversion-toolbar__label{color:#707684;font-size:11px;font-weight:500;letter-spacing:.33px;padding:10px 10px 5px;text-transform:uppercase}.ce-conversion-tool{display:-webkit-box;display:-ms-flexbox;display:flex;padding:5px 10px;font-size:14px;line-height:20px;font-weight:500;cursor:pointer;-webkit-box-align:center;-ms-flex-align:center;align-items:center}.ce-conversion-tool--hidden{display:none}.ce-conversion-tool--focused{background:rgba(34,186,255,.08)!important}.ce-conversion-tool--focused{-webkit-box-shadow:inset 0 0 0px 1px rgba(7,161,227,.08);box-shadow:inset 0 0 0 1px #07a1e314}.ce-conversion-tool--focused-animated{-webkit-animation-name:buttonClicked;animation-name:buttonClicked;-webkit-animation-duration:.25s;animation-duration:.25s}.ce-conversion-tool:hover{background:#eff2f5}.ce-conversion-tool__icon{display:-webkit-inline-box;display:-ms-inline-flexbox;display:inline-flex;width:26px;height:26px;-webkit-box-shadow:0 0 0 1px rgba(201,201,204,.48);box-shadow:0 0 0 1px #c9c9cc7a;border-radius:5px;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;background:#fff;-webkit-box-sizing:content-box;box-sizing:content-box;-ms-flex-negative:0;flex-shrink:0;margin-right:10px}.ce-conversion-tool__icon svg{width:20px;height:20px}@media (max-width: 650px){.ce-conversion-tool__icon{width:36px;height:36px;border-radius:8px}.ce-conversion-tool__icon svg{width:28px;height:28px}}.ce-conversion-tool--last{margin-right:0!important}.ce-conversion-tool--active{color:#388ae5!important}.ce-conversion-tool--active{-webkit-animation:bounceIn .75s 1;animation:bounceIn .75s 1;-webkit-animation-fill-mode:forwards;animation-fill-mode:forwards}.ce-conversion-tool__secondary-label{color:#707684;font-size:12px;margin-left:auto;white-space:nowrap;letter-spacing:-.1em;padding-right:5px;margin-bottom:-2px;opacity:.6}@media (max-width: 650px){.ce-conversion-tool__secondary-label{display:none}}.ce-settings__button{display:-webkit-inline-box;display:-ms-inline-flexbox;display:inline-flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;padding:6px 1px;border-radius:3px;cursor:pointer;border:0;outline:none;background-color:transparent;vertical-align:bottom;color:inherit;margin:0;line-height:32px}.ce-settings__button svg{width:20px;height:20px}@media (max-width: 650px){.ce-settings__button svg{width:28px;height:28px}}@media (hover: hover){.ce-settings__button:hover{background-color:#eff2f5}}.ce-settings__button--active{color:#388ae5}.ce-settings__button--focused{background:rgba(34,186,255,.08)!important}.ce-settings__button--focused{-webkit-box-shadow:inset 0 0 0px 1px rgba(7,161,227,.08);box-shadow:inset 0 0 0 1px #07a1e314}.ce-settings__button--focused-animated{-webkit-animation-name:buttonClicked;animation-name:buttonClicked;-webkit-animation-duration:.25s;animation-duration:.25s}.ce-settings__button:not(:nth-child(3n+3)){margin-right:3px}.ce-settings__button:nth-child(n+4){margin-top:3px}.ce-settings__button--disabled{cursor:not-allowed!important}.ce-settings__button--disabled{opacity:.3}.ce-settings__button--selected{color:#388ae5}@media (min-width: 651px){.codex-editor--narrow .ce-settings .ce-popover{right:0;left:auto;left:initial}}@-webkit-keyframes fade-in{0%{opacity:0}to{opacity:1}}@keyframes fade-in{0%{opacity:0}to{opacity:1}}.ce-block{-webkit-animation:fade-in .3s ease;animation:fade-in .3s ease;-webkit-animation-fill-mode:none;animation-fill-mode:none;-webkit-animation-fill-mode:initial;animation-fill-mode:initial}.ce-block:first-of-type{margin-top:0}.ce-block--selected .ce-block__content{background:#e1f2ff}.ce-block--selected .ce-block__content [contenteditable]{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.ce-block--selected .ce-block__content img,.ce-block--selected .ce-block__content .ce-stub{opacity:.55}.ce-block--stretched .ce-block__content{max-width:none}.ce-block__content{position:relative;max-width:650px;margin:0 auto;-webkit-transition:background-color .15s ease;transition:background-color .15s ease}.ce-block--drop-target .ce-block__content:before{content:"";position:absolute;top:100%;left:-20px;margin-top:-1px;height:8px;width:8px;border:solid #388AE5;border-width:1px 1px 0 0;-webkit-transform-origin:right;transform-origin:right;-webkit-transform:rotate(45deg);transform:rotate(45deg)}.ce-block--drop-target .ce-block__content:after{content:"";position:absolute;top:100%;height:1px;width:100%;color:#388ae5;background:repeating-linear-gradient(90deg,#388AE5,#388AE5 1px,#fff 1px,#fff 6px)}.ce-block a{cursor:pointer;-webkit-text-decoration:underline;text-decoration:underline}.ce-block b{font-weight:700}.ce-block i{font-style:italic}@-webkit-keyframes bounceIn{0%,20%,40%,60%,80%,to{-webkit-animation-timing-function:cubic-bezier(.215,.61,.355,1);animation-timing-function:cubic-bezier(.215,.61,.355,1)}0%{-webkit-transform:scale3d(.9,.9,.9);transform:scale3d(.9,.9,.9)}20%{-webkit-transform:scale3d(1.03,1.03,1.03);transform:scale3d(1.03,1.03,1.03)}60%{-webkit-transform:scale3d(1,1,1);transform:scaleZ(1)}}@keyframes bounceIn{0%,20%,40%,60%,80%,to{-webkit-animation-timing-function:cubic-bezier(.215,.61,.355,1);animation-timing-function:cubic-bezier(.215,.61,.355,1)}0%{-webkit-transform:scale3d(.9,.9,.9);transform:scale3d(.9,.9,.9)}20%{-webkit-transform:scale3d(1.03,1.03,1.03);transform:scale3d(1.03,1.03,1.03)}60%{-webkit-transform:scale3d(1,1,1);transform:scaleZ(1)}}@-webkit-keyframes selectionBounce{0%,20%,40%,60%,80%,to{-webkit-animation-timing-function:cubic-bezier(.215,.61,.355,1);animation-timing-function:cubic-bezier(.215,.61,.355,1)}50%{-webkit-transform:scale3d(1.01,1.01,1.01);transform:scale3d(1.01,1.01,1.01)}70%{-webkit-transform:scale3d(1,1,1);transform:scaleZ(1)}}@keyframes selectionBounce{0%,20%,40%,60%,80%,to{-webkit-animation-timing-function:cubic-bezier(.215,.61,.355,1);animation-timing-function:cubic-bezier(.215,.61,.355,1)}50%{-webkit-transform:scale3d(1.01,1.01,1.01);transform:scale3d(1.01,1.01,1.01)}70%{-webkit-transform:scale3d(1,1,1);transform:scaleZ(1)}}@-webkit-keyframes buttonClicked{0%,20%,40%,60%,80%,to{-webkit-animation-timing-function:cubic-bezier(.215,.61,.355,1);animation-timing-function:cubic-bezier(.215,.61,.355,1)}0%{-webkit-transform:scale3d(.95,.95,.95);transform:scale3d(.95,.95,.95)}60%{-webkit-transform:scale3d(1.02,1.02,1.02);transform:scale3d(1.02,1.02,1.02)}80%{-webkit-transform:scale3d(1,1,1);transform:scaleZ(1)}}@keyframes buttonClicked{0%,20%,40%,60%,80%,to{-webkit-animation-timing-function:cubic-bezier(.215,.61,.355,1);animation-timing-function:cubic-bezier(.215,.61,.355,1)}0%{-webkit-transform:scale3d(.95,.95,.95);transform:scale3d(.95,.95,.95)}60%{-webkit-transform:scale3d(1.02,1.02,1.02);transform:scale3d(1.02,1.02,1.02)}80%{-webkit-transform:scale3d(1,1,1);transform:scaleZ(1)}}.cdx-block{padding:.4em 0}.cdx-block::-webkit-input-placeholder{line-height:normal!important}.cdx-input{border:1px solid rgba(201,201,204,.48);-webkit-box-shadow:inset 0 1px 2px 0 rgba(35,44,72,.06);box-shadow:inset 0 1px 2px #232c480f;border-radius:3px;padding:10px 12px;outline:none;width:100%;-webkit-box-sizing:border-box;box-sizing:border-box}.cdx-input[data-placeholder]:before{position:static!important}.cdx-input[data-placeholder]:before{display:inline-block;width:0;white-space:nowrap;pointer-events:none}.cdx-settings-button{display:-webkit-inline-box;display:-ms-inline-flexbox;display:inline-flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;padding:6px 1px;border-radius:3px;cursor:pointer;border:0;outline:none;background-color:transparent;vertical-align:bottom;color:inherit;margin:0;min-width:26px;min-height:26px}.cdx-settings-button svg{width:20px;height:20px}@media (max-width: 650px){.cdx-settings-button svg{width:28px;height:28px}}@media (hover: hover){.cdx-settings-button:hover{background-color:#eff2f5}}.cdx-settings-button--focused{background:rgba(34,186,255,.08)!important}.cdx-settings-button--focused{-webkit-box-shadow:inset 0 0 0px 1px rgba(7,161,227,.08);box-shadow:inset 0 0 0 1px #07a1e314}.cdx-settings-button--focused-animated{-webkit-animation-name:buttonClicked;animation-name:buttonClicked;-webkit-animation-duration:.25s;animation-duration:.25s}.cdx-settings-button--active{color:#388ae5}.cdx-settings-button svg{width:auto;height:auto}@media (max-width: 650px){.cdx-settings-button{width:36px;height:36px;border-radius:8px}}.cdx-loader{position:relative;border:1px solid rgba(201,201,204,.48)}.cdx-loader:before{content:"";position:absolute;left:50%;top:50%;width:18px;height:18px;margin:-11px 0 0 -11px;border:2px solid rgba(201,201,204,.48);border-left-color:#388ae5;border-radius:50%;-webkit-animation:cdxRotation 1.2s infinite linear;animation:cdxRotation 1.2s infinite linear}@-webkit-keyframes cdxRotation{0%{-webkit-transform:rotate(0deg);transform:rotate(0)}to{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}@keyframes cdxRotation{0%{-webkit-transform:rotate(0deg);transform:rotate(0)}to{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}.cdx-button{padding:13px;border-radius:3px;border:1px solid rgba(201,201,204,.48);font-size:14.9px;background:#fff;-webkit-box-shadow:0 2px 2px 0 rgba(18,30,57,.04);box-shadow:0 2px 2px #121e390a;color:#707684;text-align:center;cursor:pointer}@media (hover: hover){.cdx-button:hover{background:#FBFCFE;-webkit-box-shadow:0 1px 3px 0 rgba(18,30,57,.08);box-shadow:0 1px 3px #121e3914}}.cdx-button svg{height:20px;margin-right:.2em;margin-top:-2px}.ce-stub{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:12px 18px;margin:10px 0;border-radius:10px;background:#eff2f5;border:1px solid #EFF0F1;color:#707684;font-size:14px}.ce-stub svg{width:20px;height:20px}.ce-stub__info{margin-left:14px}.ce-stub__title{font-weight:500;text-transform:capitalize}.codex-editor.codex-editor--rtl{direction:rtl}.codex-editor.codex-editor--rtl .cdx-list{padding-left:0;padding-right:40px}.codex-editor.codex-editor--rtl .ce-toolbar__plus{right:-26px;left:auto}.codex-editor.codex-editor--rtl .ce-toolbar__actions{right:auto;left:-26px}@media (max-width: 650px){.codex-editor.codex-editor--rtl .ce-toolbar__actions{margin-left:0;margin-right:auto;padding-right:0;padding-left:10px}}.codex-editor.codex-editor--rtl .ce-settings{left:5px;right:auto}.codex-editor.codex-editor--rtl .ce-settings:before{right:auto;left:25px}.codex-editor.codex-editor--rtl .ce-settings__button:not(:nth-child(3n+3)){margin-left:3px;margin-right:0}.codex-editor.codex-editor--rtl .ce-conversion-tool__icon{margin-right:0;margin-left:10px}.codex-editor.codex-editor--rtl .ce-inline-toolbar__dropdown{border-right:0px solid transparent;border-left:1px solid rgba(201,201,204,.48);margin:0 -6px 0 6px}.codex-editor.codex-editor--rtl .ce-inline-toolbar__dropdown .icon--toggler-down{margin-left:0;margin-right:4px}@media (min-width: 651px){.codex-editor--narrow.codex-editor--rtl .ce-toolbar__plus{left:0px;right:5px}}@media (min-width: 651px){.codex-editor--narrow.codex-editor--rtl .ce-toolbar__actions{left:-5px}}.cdx-search-field{--icon-margin-right: 10px;background:rgba(232,232,235,.49);border:1px solid rgba(226,226,229,.2);border-radius:6px;padding:2px;display:grid;grid-template-columns:auto auto 1fr;grid-template-rows:auto}.cdx-search-field__icon{width:26px;height:26px;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;margin-right:var(--icon-margin-right)}.cdx-search-field__icon svg{width:20px;height:20px;color:#707684}.cdx-search-field__input{font-size:14px;outline:none;font-weight:500;font-family:inherit;border:0;background:transparent;margin:0;padding:0;line-height:22px;min-width:calc(100% - 26px - var(--icon-margin-right))}.cdx-search-field__input::-webkit-input-placeholder{color:#707684;font-weight:500}.cdx-search-field__input::-moz-placeholder{color:#707684;font-weight:500}.cdx-search-field__input:-ms-input-placeholder{color:#707684;font-weight:500}.cdx-search-field__input::-ms-input-placeholder{color:#707684;font-weight:500}.cdx-search-field__input::placeholder{color:#707684;font-weight:500}.ce-popover{--border-radius: 6px;--width: 200px;--max-height: 270px;--padding: 6px;--offset-from-target: 8px;--color-border: #e8e8eb;--color-shadow: rgba(13,20,33,.13);--color-background: white;--color-text-primary: black;--color-text-secondary: #707684;--color-border-icon: rgba(201, 201, 204, .48);--color-border-icon-disabled: #EFF0F1;--color-text-icon-active: #388AE5;--color-background-icon-active: rgba(56, 138, 229, .1);--color-background-item-focus: rgba(34, 186, 255, .08);--color-shadow-item-focus: rgba(7, 161, 227, .08);--color-background-item-hover: #eff2f5;--color-background-item-confirm: #E24A4A;--color-background-item-confirm-hover: #CE4343;min-width:var(--width);width:var(--width);max-height:var(--max-height);border-radius:var(--border-radius);overflow:hidden;-webkit-box-sizing:border-box;box-sizing:border-box;-webkit-box-shadow:0 3px 15px -3px var(--color-shadow);box-shadow:0 3px 15px -3px var(--color-shadow);position:absolute;left:0;top:calc(100% + var(--offset-from-target));background:var(--color-background);display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;z-index:4;opacity:0;max-height:0;pointer-events:none;padding:0;border:none}.ce-popover--opened{opacity:1;padding:var(--padding);max-height:var(--max-height);pointer-events:auto;-webkit-animation:panelShowing .1s ease;animation:panelShowing .1s ease;border:1px solid var(--color-border)}@media (max-width: 650px){.ce-popover--opened{-webkit-animation:panelShowingMobile .25s ease;animation:panelShowingMobile .25s ease}}.ce-popover__items{overflow-y:auto;-ms-scroll-chaining:none;overscroll-behavior:contain}@media (max-width: 650px){.ce-popover__overlay{position:fixed;top:0;bottom:0;left:0;right:0;background:#1D202B;z-index:3;opacity:.5;-webkit-transition:opacity .12s ease-in;transition:opacity .12s ease-in;will-change:opacity;visibility:visible}}.ce-popover__overlay--hidden{display:none}.ce-popover--open-top{top:calc(-1 * (var(--offset-from-target) + var(--popover-height)))}@media (max-width: 650px){.ce-popover{--offset: 5px;position:fixed;max-width:none;min-width:calc(100% - var(--offset) * 2);left:var(--offset);right:var(--offset);bottom:calc(var(--offset) + env(safe-area-inset-bottom));top:auto;border-radius:10px}.ce-popover .ce-popover__search{display:none}}.ce-popover__search,.ce-popover__custom-content:not(:empty){margin-bottom:5px}.ce-popover__nothing-found-message{color:#707684;display:none;cursor:default;padding:3px;font-size:14px;line-height:20px;font-weight:500;white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.ce-popover__nothing-found-message--displayed{display:block}.ce-popover__custom-content:not(:empty){padding:4px}@media (min-width: 651px){.ce-popover__custom-content:not(:empty){padding:0}}.ce-popover__custom-content--hidden{display:none}.ce-popover-item{--border-radius: 6px;--icon-size: 20px;--icon-size-mobile: 28px;border-radius:var(--border-radius);display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;padding:3px;color:var(--color-text-primary);-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}@media (max-width: 650px){.ce-popover-item{padding:4px}}.ce-popover-item:not(:last-of-type){margin-bottom:1px}.ce-popover-item__icon{border-radius:5px;width:26px;height:26px;-webkit-box-shadow:0 0 0 1px var(--color-border-icon);box-shadow:0 0 0 1px var(--color-border-icon);background:#fff;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;margin-right:10px}.ce-popover-item__icon svg{width:20px;height:20px}@media (max-width: 650px){.ce-popover-item__icon{width:36px;height:36px;border-radius:8px}.ce-popover-item__icon svg{width:var(--icon-size-mobile);height:var(--icon-size-mobile)}}.ce-popover-item__title{font-size:14px;line-height:20px;font-weight:500;overflow:hidden;white-space:nowrap;text-overflow:ellipsis}@media (max-width: 650px){.ce-popover-item__title{font-size:16px}}.ce-popover-item__secondary-title{color:var(--color-text-secondary);font-size:12px;margin-left:auto;white-space:nowrap;letter-spacing:-.1em;padding-right:5px;margin-bottom:-2px;opacity:.6}@media (max-width: 650px){.ce-popover-item__secondary-title{display:none}}.ce-popover-item--active{background:var(--color-background-icon-active);color:var(--color-text-icon-active)}.ce-popover-item--active .ce-popover-item__icon{-webkit-box-shadow:none;box-shadow:none}.ce-popover-item--disabled{color:var(--color-text-secondary);cursor:default;pointer-events:none}.ce-popover-item--disabled .ce-popover-item__icon{-webkit-box-shadow:0 0 0 1px var(--color-border-icon-disabled);box-shadow:0 0 0 1px var(--color-border-icon-disabled)}.ce-popover-item--focused:not(.ce-popover-item--no-focus){background:var(--color-background-item-focus)!important}.ce-popover-item--focused:not(.ce-popover-item--no-focus){-webkit-box-shadow:inset 0 0 0px 1px var(--color-shadow-item-focus);box-shadow:inset 0 0 0 1px var(--color-shadow-item-focus)}.ce-popover-item--hidden{display:none}@media (hover: hover){.ce-popover-item:hover{cursor:pointer}.ce-popover-item:hover:not(.ce-popover-item--no-hover){background-color:var(--color-background-item-hover)}.ce-popover-item:hover .ce-popover-item__icon{-webkit-box-shadow:none;box-shadow:none}}.ce-popover-item--confirmation{background:var(--color-background-item-confirm)}.ce-popover-item--confirmation .ce-popover-item__icon{color:var(--color-background-item-confirm)}.ce-popover-item--confirmation .ce-popover-item__title{color:#fff}@media (hover: hover){.ce-popover-item--confirmation:not(.ce-popover-item--no-hover):hover{background:var(--color-background-item-confirm-hover)}}.ce-popover-item--confirmation:not(.ce-popover-item--no-focus).ce-popover-item--focused{background:var(--color-background-item-confirm-hover)!important}.ce-popover-item--confirmation .ce-popover-item__icon,.ce-popover-item--active .ce-popover-item__icon,.ce-popover-item--focused .ce-popover-item__icon{-webkit-box-shadow:none;box-shadow:none}@-webkit-keyframes panelShowing{0%{opacity:0;-webkit-transform:translateY(-8px) scale(.9);transform:translateY(-8px) scale(.9)}70%{opacity:1;-webkit-transform:translateY(2px);transform:translateY(2px)}to{-webkit-transform:translateY(0);transform:translateY(0)}}@keyframes panelShowing{0%{opacity:0;-webkit-transform:translateY(-8px) scale(.9);transform:translateY(-8px) scale(.9)}70%{opacity:1;-webkit-transform:translateY(2px);transform:translateY(2px)}to{-webkit-transform:translateY(0);transform:translateY(0)}}@-webkit-keyframes panelShowingMobile{0%{opacity:0;-webkit-transform:translateY(14px) scale(.98);transform:translateY(14px) scale(.98)}70%{opacity:1;-webkit-transform:translateY(-4px);transform:translateY(-4px)}to{-webkit-transform:translateY(0);transform:translateY(0)}}@keyframes panelShowingMobile{0%{opacity:0;-webkit-transform:translateY(14px) scale(.98);transform:translateY(14px) scale(.98)}70%{opacity:1;-webkit-transform:translateY(-4px);transform:translateY(-4px)}to{-webkit-transform:translateY(0);transform:translateY(0)}}.wobble{-webkit-animation-name:wobble;animation-name:wobble;-webkit-animation-duration:.4s;animation-duration:.4s}@-webkit-keyframes wobble{0%{-webkit-transform:translate3d(0,0,0);transform:translateZ(0)}15%{-webkit-transform:translate3d(-9%,0,0);transform:translate3d(-9%,0,0)}30%{-webkit-transform:translate3d(9%,0,0);transform:translate3d(9%,0,0)}45%{-webkit-transform:translate3d(-4%,0,0);transform:translate3d(-4%,0,0)}60%{-webkit-transform:translate3d(4%,0,0);transform:translate3d(4%,0,0)}75%{-webkit-transform:translate3d(-1%,0,0);transform:translate3d(-1%,0,0)}to{-webkit-transform:translate3d(0,0,0);transform:translateZ(0)}}@keyframes wobble{0%{-webkit-transform:translate3d(0,0,0);transform:translateZ(0)}15%{-webkit-transform:translate3d(-9%,0,0);transform:translate3d(-9%,0,0)}30%{-webkit-transform:translate3d(9%,0,0);transform:translate3d(9%,0,0)}45%{-webkit-transform:translate3d(-4%,0,0);transform:translate3d(-4%,0,0)}60%{-webkit-transform:translate3d(4%,0,0);transform:translate3d(4%,0,0)}75%{-webkit-transform:translate3d(-1%,0,0);transform:translate3d(-1%,0,0)}to{-webkit-transform:translate3d(0,0,0);transform:translateZ(0)}}\n'.toString()});this.config.style&&!v(this.config.style)&&this.config.style.nonce&&e.setAttribute("nonce",this.config.style.nonce),B.prepend(document.head,e)}enableModuleBindings(){this.readOnlyMutableListeners.on(this.nodes.redactor,"click",(t=>{this.redactorClicked(t)}),!1),this.readOnlyMutableListeners.on(this.nodes.redactor,"mousedown",(t=>{this.documentTouched(t)}),{capture:!0,passive:!0}),this.readOnlyMutableListeners.on(this.nodes.redactor,"touchstart",(t=>{this.documentTouched(t)}),{capture:!0,passive:!0}),this.readOnlyMutableListeners.on(document,"keydown",(t=>{this.documentKeydown(t)}),!0),this.readOnlyMutableListeners.on(document,"mousedown",(t=>{this.documentClicked(t)}),!0);const t=x((()=>{this.selectionChanged()}),180);this.readOnlyMutableListeners.on(document,"selectionchange",t,!0),this.readOnlyMutableListeners.on(window,"resize",(()=>{this.resizeDebouncer()}),{passive:!0}),this.watchBlockHoveredEvents()}watchBlockHoveredEvents(){let t;this.readOnlyMutableListeners.on(this.nodes.redactor,"mousemove",E((e=>{const i=e.target.closest(".ce-block");this.Editor.BlockSelection.anyBlockSelected||i&&t!==i&&(t=i,this.eventsDispatcher.emit(jt,{block:this.Editor.BlockManager.getBlockByChildNode(i)}))}),20),{passive:!0})}disableModuleBindings(){this.readOnlyMutableListeners.clearAll()}windowResize(){this.contentRectCache=null,this.checkIsMobile()}documentKeydown(t){switch(t.keyCode){case r:this.enterPressed(t);break;case 8:case 46:this.backspacePressed(t);break;case 27:this.escapePressed(t);break;default:this.defaultBehaviour(t)}}defaultBehaviour(t){const{currentBlock:e}=this.Editor.BlockManager,i=t.target.closest(`.${this.CSS.editorWrapper}`),n=t.altKey||t.ctrlKey||t.metaKey||t.shiftKey;void 0===e||null!==i?i||e&&n||(this.Editor.BlockManager.dropPointer(),this.Editor.Toolbar.close()):this.Editor.BlockEvents.keydown(t)}backspacePressed(t){const{BlockManager:e,BlockSelection:i,Caret:n}=this.Editor;if(i.anyBlockSelected&&!U.isSelectionExists){const s=e.removeSelectedBlocks(),o=e.insertDefaultBlockAtIndex(s,!0);n.setToBlock(o,n.positions.START),i.clearSelection(t),t.preventDefault(),t.stopPropagation(),t.stopImmediatePropagation()}}escapePressed(t){this.Editor.BlockSelection.clearSelection(t),this.Editor.Toolbar.toolbox.opened?(this.Editor.Toolbar.toolbox.close(),this.Editor.Caret.setToBlock(this.Editor.BlockManager.currentBlock,this.Editor.Caret.positions.END)):this.Editor.BlockSettings.opened?this.Editor.BlockSettings.close():this.Editor.ConversionToolbar.opened?this.Editor.ConversionToolbar.close():this.Editor.InlineToolbar.opened?this.Editor.InlineToolbar.close():this.Editor.Toolbar.close()}enterPressed(t){const{BlockManager:e,BlockSelection:i}=this.Editor,n=e.currentBlockIndex>=0;if(i.anyBlockSelected&&!U.isSelectionExists)return i.clearSelection(t),t.preventDefault(),t.stopImmediatePropagation(),void t.stopPropagation();if(!this.someToolbarOpened&&n&&"BODY"===t.target.tagName){const t=this.Editor.BlockManager.insert();this.Editor.Caret.setToBlock(t),this.Editor.Toolbar.moveAndOpen(t)}this.Editor.BlockSelection.clearSelection(t)}documentClicked(t){var e,i;if(!t.isTrusted)return;const n=t.target;this.nodes.holder.contains(n)||U.isAtEditor||(this.Editor.BlockManager.dropPointer(),this.Editor.Toolbar.close());const s=null==(e=this.Editor.BlockSettings.nodes.wrapper)?void 0:e.contains(n),o=null==(i=this.Editor.Toolbar.nodes.settingsToggler)?void 0:i.contains(n),r=s||o;if(this.Editor.BlockSettings.opened&&!r){this.Editor.BlockSettings.close();const t=this.Editor.BlockManager.getBlockByChildNode(n);this.Editor.Toolbar.moveAndOpen(t)}this.Editor.BlockSelection.clearSelection(t)}documentTouched(t){let e=t.target;if(e===this.nodes.redactor){const i=t instanceof MouseEvent?t.clientX:t.touches[0].clientX,n=t instanceof MouseEvent?t.clientY:t.touches[0].clientY;e=document.elementFromPoint(i,n)}try{this.Editor.BlockManager.setCurrentBlockByChildNode(e)}catch{this.Editor.RectangleSelection.isRectActivated()||this.Editor.Caret.setToTheLastBlock()}this.Editor.Toolbar.moveAndOpen()}redactorClicked(t){if(!U.isCollapsed)return;const e=t.target,i=t.metaKey||t.ctrlKey;if(B.isAnchor(e)&&i){t.stopImmediatePropagation(),t.stopPropagation();const i=function(t){try{return new URL(t).href}catch{}return"//"===t.substring(0,2)?window.location.protocol+t:window.location.origin+t}(e.getAttribute("href"));!function(t){window.open(t,"_blank")}(i)}else this.processBottomZoneClick(t)}processBottomZoneClick(t){const e=this.Editor.BlockManager.getBlockByIndex(-1),i=B.offset(e.holder).bottom,n=t.pageY,{BlockSelection:s}=this.Editor;if(t.target instanceof Element&&t.target.isEqualNode(this.nodes.redactor)&&!s.anyBlockSelected&&i<n){t.stopImmediatePropagation(),t.stopPropagation();const{BlockManager:e,Caret:i,Toolbar:n}=this.Editor;(!e.lastBlock.tool.isDefault||!e.lastBlock.isEmpty)&&e.insertAtEnd(),i.setToTheLastBlock(),n.moveAndOpen(e.lastBlock)}}selectionChanged(){const{CrossBlockSelection:t,BlockSelection:e}=this.Editor,i=U.anchorElement;if(t.isCrossBlockSelectionStarted&&e.anyBlockSelected&&U.get().removeAllRanges(),!i)return void(U.range||this.Editor.InlineToolbar.close());const n=null===i.closest(`.${K.CSS.content}`);if(n&&(this.Editor.InlineToolbar.containsNode(i)||this.Editor.InlineToolbar.close(),"true"!==i.dataset.inlineToolbar))return;this.Editor.BlockManager.currentBlock||this.Editor.BlockManager.setCurrentBlockByChildNode(i);const s=!0!==n;this.Editor.InlineToolbar.tryToShow(!0,s)}}};class Ee{constructor(t){let e,i;this.moduleInstances={},this.eventsDispatcher=new F,this.isReady=new Promise(((t,n)=>{e=t,i=n})),Promise.resolve().then((async()=>{this.configuration=t,this.validate(),this.init(),await this.start(),await this.render();const{BlockManager:i,Caret:n,UI:s,ModificationsObserver:o}=this.moduleInstances;s.checkEmptiness(),o.enable(),this.configuration.autofocus&&n.setToBlock(i.blocks[0],n.positions.START),e()})).catch((t=>{d(`Editor.js is not ready because of ${t}`,"error"),i(t)}))}set configuration(t){var e,i;g(t)?this.config={...t}:this.config={holder:t},T(!!this.config.holderId,"config.holderId","config.holder"),this.config.holderId&&!this.config.holder&&(this.config.holder=this.config.holderId,this.config.holderId=null),null==this.config.holder&&(this.config.holder="editorjs"),this.config.logLevel||(this.config.logLevel=o.VERBOSE),function(t){c.logLevel=t}(this.config.logLevel),T(!!this.config.initialBlock,"config.initialBlock","config.defaultBlock"),this.config.defaultBlock=this.config.defaultBlock||this.config.initialBlock||"paragraph",this.config.minHeight=void 0!==this.config.minHeight?this.config.minHeight:300;const n={type:this.config.defaultBlock,data:{}};this.config.placeholder=this.config.placeholder||!1,this.config.sanitizer=this.config.sanitizer||{p:!0,b:!0,a:!0},this.config.hideToolbar=!!this.config.hideToolbar&&this.config.hideToolbar,this.config.tools=this.config.tools||{},this.config.i18n=this.config.i18n||{},this.config.data=this.config.data||{blocks:[]},this.config.onReady=this.config.onReady||(()=>{}),this.config.onChange=this.config.onChange||(()=>{}),this.config.inlineToolbar=void 0===this.config.inlineToolbar||this.config.inlineToolbar,(v(this.config.data)||!this.config.data.blocks||0===this.config.data.blocks.length)&&(this.config.data={blocks:[n]}),this.config.readOnly=this.config.readOnly||!1,null!=(e=this.config.i18n)&&e.messages&&D.setDictionary(this.config.i18n.messages),this.config.i18n.direction=(null==(i=this.config.i18n)?void 0:i.direction)||"ltr"}get configuration(){return this.config}validate(){const{holderId:t,holder:e}=this.config;if(t&&e)throw Error("«holderId» and «holder» param can't assign at the same time.");if(f(e)&&!B.get(e))throw Error(`element with ID «${e}» is missing. Pass correct holder's ID.`);if(e&&g(e)&&!B.isElement(e))throw Error("«holder» value must be an Element node")}init(){this.constructModules(),this.configureModules()}async start(){await["Tools","UI","BlockManager","Paste","BlockSelection","RectangleSelection","CrossBlockSelection","ReadOnly"].reduce(((t,e)=>t.then((async()=>{try{await this.moduleInstances[e].prepare()}catch(t){if(t instanceof O)throw new Error(t.message);d(`Module ${e} was skipped because of %o`,"warn",t)}}))),Promise.resolve())}render(){return this.moduleInstances.Renderer.render(this.config.data.blocks)}constructModules(){Object.entries(xe).forEach((([t,e])=>{try{this.moduleInstances[t]=new e({config:this.configuration,eventsDispatcher:this.eventsDispatcher})}catch(e){d("[constructModules]",`Module ${t} skipped because`,"error",e)}}))}configureModules(){for(const t in this.moduleInstances)Object.prototype.hasOwnProperty.call(this.moduleInstances,t)&&(this.moduleInstances[t].state=this.getModulesDiff(t))}getModulesDiff(t){const e={};for(const i in this.moduleInstances)i!==t&&(e[i]=this.moduleInstances[i]);return e}}class Ce{static get version(){return"2.29.0"}constructor(t){let e=()=>{};g(t)&&p(t.onReady)&&(e=t.onReady);const i=new Ee(t);this.isReady=i.isReady.then((()=>{this.exportAPI(i),e()}))}exportAPI(t){["configuration"].forEach((e=>{this[e]=t[e]})),this.destroy=()=>{Object.values(t.moduleInstances).forEach((t=>{p(t.destroy)&&t.destroy(),t.listeners.removeAll()})),null==dt||dt.destroy(),dt=null,t=null;for(const t in this)Object.prototype.hasOwnProperty.call(this,t)&&delete this[t];Object.setPrototypeOf(this,null)},Object.setPrototypeOf(this,t.moduleInstances.API.methods),delete this.exportAPI,Object.entries({blocks:{clear:"clear",render:"render"},caret:{focus:"focus"},events:{on:"on",off:"off",emit:"emit"},saver:{save:"save"}}).forEach((([e,i])=>{Object.entries(i).forEach((([i,n])=>{this[n]=t.moduleInstances.API.methods[e][i]}))}))}}},776:(t,e,i)=>{"use strict";i.d(e,{c:()=>n}),function(){try{if(typeof document<"u"){var t=document.createElement("style");t.appendChild(document.createTextNode(".ce-header{padding:.6em 0 3px;margin:0;line-height:1.25em;outline:none}.ce-header p,.ce-header div{padding:0!important;margin:0!important}.ce-header[contentEditable=true][data-placeholder]:before{position:absolute;content:attr(data-placeholder);color:#707684;font-weight:400;display:none;cursor:text}.ce-header[contentEditable=true][data-placeholder]:empty:before{display:block}.ce-header[contentEditable=true][data-placeholder]:empty:focus:before{display:none}")),document.head.appendChild(t)}}catch(t){console.error("vite-plugin-css-injected-by-js",t)}}();class n{constructor({data:t,config:e,api:i,readOnly:n}){this.api=i,this.readOnly=n,this._CSS={block:this.api.styles.block,wrapper:"ce-header"},this._settings=e,this._data=this.normalizeData(t),this._element=this.getTag()}normalizeData(t){const e={};return"object"!=typeof t&&(t={}),e.text=t.text||"",e.level=parseInt(t.level)||this.defaultLevel.number,e}render(){return this._element}renderSettings(){return this.levels.map((t=>({icon:t.svg,label:this.api.i18n.t(`Heading ${t.number}`),onActivate:()=>this.setLevel(t.number),closeOnActivate:!0,isActive:this.currentLevel.number===t.number})))}setLevel(t){this.data={level:t,text:this.data.text}}merge(t){const e={text:this.data.text+t.text,level:this.data.level};this.data=e}validate(t){return""!==t.text.trim()}save(t){return{text:t.innerHTML,level:this.currentLevel.number}}static get conversionConfig(){return{export:"text",import:"text"}}static get sanitize(){return{level:!1,text:{}}}static get isReadOnlySupported(){return!0}get data(){return this._data.text=this._element.innerHTML,this._data.level=this.currentLevel.number,this._data}set data(t){if(this._data=this.normalizeData(t),void 0!==t.level&&this._element.parentNode){const t=this.getTag();t.innerHTML=this._element.innerHTML,this._element.parentNode.replaceChild(t,this._element),this._element=t}void 0!==t.text&&(this._element.innerHTML=this._data.text||"")}getTag(){const t=document.createElement(this.currentLevel.tag);return t.innerHTML=this._data.text||"",t.classList.add(this._CSS.wrapper),t.contentEditable=this.readOnly?"false":"true",t.dataset.placeholder=this.api.i18n.t(this._settings.placeholder||""),t}get currentLevel(){let t=this.levels.find((t=>t.number===this._data.level));return t||(t=this.defaultLevel),t}get defaultLevel(){if(this._settings.defaultLevel){const t=this.levels.find((t=>t.number===this._settings.defaultLevel));if(t)return t;console.warn("(ง'̀-'́)ง Heading Tool: the default level specified was not found in available levels")}return this.levels[1]}get levels(){const t=[{number:1,tag:"H1",svg:'<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M6 7L6 12M6 17L6 12M6 12L12 12M12 7V12M12 17L12 12"/><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M19 17V10.2135C19 10.1287 18.9011 10.0824 18.836 10.1367L16 12.5"/></svg>'},{number:2,tag:"H2",svg:'<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M6 7L6 12M6 17L6 12M6 12L12 12M12 7V12M12 17L12 12"/><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M16 11C16 10 19 9.5 19 12C19 13.9771 16.0684 13.9997 16.0012 16.8981C15.9999 16.9533 16.0448 17 16.1 17L19.3 17"/></svg>'},{number:3,tag:"H3",svg:'<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M6 7L6 12M6 17L6 12M6 12L12 12M12 7V12M12 17L12 12"/><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M16 11C16 10.5 16.8323 10 17.6 10C18.3677 10 19.5 10.311 19.5 11.5C19.5 12.5315 18.7474 12.9022 18.548 12.9823C18.5378 12.9864 18.5395 13.0047 18.5503 13.0063C18.8115 13.0456 20 13.3065 20 14.8C20 16 19.5 17 17.8 17C17.8 17 16 17 16 16.3"/></svg>'},{number:4,tag:"H4",svg:'<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M6 7L6 12M6 17L6 12M6 12L12 12M12 7V12M12 17L12 12"/><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M18 10L15.2834 14.8511C15.246 14.9178 15.294 15 15.3704 15C16.8489 15 18.7561 15 20.2 15M19 17C19 15.7187 19 14.8813 19 13.6"/></svg>'},{number:5,tag:"H5",svg:'<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M6 7L6 12M6 17L6 12M6 12L12 12M12 7V12M12 17L12 12"/><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M16 15.9C16 15.9 16.3768 17 17.8 17C19.5 17 20 15.6199 20 14.7C20 12.7323 17.6745 12.0486 16.1635 12.9894C16.094 13.0327 16 12.9846 16 12.9027V10.1C16 10.0448 16.0448 10 16.1 10H19.8"/></svg>'},{number:6,tag:"H6",svg:'<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M6 7L6 12M6 17L6 12M6 12L12 12M12 7V12M12 17L12 12"/><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M19.5 10C16.5 10.5 16 13.3285 16 15M16 15V15C16 16.1046 16.8954 17 18 17H18.3246C19.3251 17 20.3191 16.3492 20.2522 15.3509C20.0612 12.4958 16 12.6611 16 15Z"/></svg>'}];return this._settings.levels?t.filter((t=>this._settings.levels.includes(t.number))):t}onPaste(t){const e=t.detail.data;let i=this.defaultLevel.number;switch(e.tagName){case"H1":i=1;break;case"H2":i=2;break;case"H3":i=3;break;case"H4":i=4;break;case"H5":i=5;break;case"H6":i=6}this._settings.levels&&(i=this._settings.levels.reduce(((t,e)=>Math.abs(e-i)<Math.abs(t-i)?e:t))),this.data={level:i,text:e.innerHTML}}static get pasteConfig(){return{tags:["H1","H2","H3","H4","H5","H6"]}}static get toolbox(){return{icon:'<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><path stroke="currentColor" stroke-linecap="round" stroke-width="2" d="M9 7L9 12M9 17V12M9 12L15 12M15 7V12M15 17L15 12"/></svg>',title:"Heading"}}}},676:(t,e,i)=>{"use strict";i.d(e,{c:()=>n}),function(){try{if(typeof document<"u"){var t=document.createElement("style");t.appendChild(document.createTextNode(".ce-rawtool__textarea{min-height:200px;resize:vertical;border-radius:8px;border:0;background-color:#1e2128;font-family:Menlo,Monaco,Consolas,Courier New,monospace;font-size:12px;line-height:1.6;letter-spacing:-.2px;color:#a1a7b6;overscroll-behavior:contain}")),document.head.appendChild(t)}}catch(t){console.error("vite-plugin-css-injected-by-js",t)}}();class n{static get isReadOnlySupported(){return!0}static get displayInToolbox(){return!0}static get enableLineBreaks(){return!0}static get toolbox(){return{icon:'<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24"><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16.6954 5C17.912 5 18.8468 6.07716 18.6755 7.28165L17.426 16.0659C17.3183 16.8229 16.7885 17.4522 16.061 17.6873L12.6151 18.8012C12.2152 18.9304 11.7848 18.9304 11.3849 18.8012L7.93898 17.6873C7.21148 17.4522 6.6817 16.8229 6.57403 16.0659L5.32454 7.28165C5.15322 6.07716 6.088 5 7.30461 5H16.6954Z"/><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 8.4H9L9.42857 11.7939H14.5714L14.3571 13.2788L14.1429 14.7636L12 15.4L9.85714 14.7636L9.77143 14.3394"/></svg>',title:"Raw HTML"}}constructor({data:t,config:e,api:i,readOnly:s}){this.api=i,this.readOnly=s,this.placeholder=e.placeholder||n.DEFAULT_PLACEHOLDER,this.CSS={baseClass:this.api.styles.block,input:this.api.styles.input,wrapper:"ce-rawtool",textarea:"ce-rawtool__textarea"},this.data={html:t.html||""},this.textarea=null,this.resizeDebounce=null}render(){const t=document.createElement("div");return this.textarea=document.createElement("textarea"),t.classList.add(this.CSS.baseClass,this.CSS.wrapper),this.textarea.classList.add(this.CSS.textarea,this.CSS.input),this.textarea.textContent=this.data.html,this.textarea.placeholder=this.placeholder,this.readOnly?this.textarea.disabled=!0:this.textarea.addEventListener("input",(()=>{this.onInput()})),t.appendChild(this.textarea),setTimeout((()=>{this.resize()}),100),t}save(t){return{html:t.querySelector("textarea").value}}static get DEFAULT_PLACEHOLDER(){return"Enter HTML code"}static get sanitize(){return{html:!0}}onInput(){this.resizeDebounce&&clearTimeout(this.resizeDebounce),this.resizeDebounce=setTimeout((()=>{this.resize()}),200)}resize(){this.textarea.style.height="auto",this.textarea.style.height=this.textarea.scrollHeight+"px"}}},624:(t,e,i)=>{"use strict";i.a(t,(async(t,n)=>{try{i.d(e,{eE:()=>a,gb:()=>l});var s={640:(t,e,i)=>{i.d(e,{AnnotationLayer:()=>j,FreeTextAnnotationElement:()=>S,InkAnnotationElement:()=>P,StampAnnotationElement:()=>N});var n=i(266),s=i(473),o=i(780);function r(t){return Math.floor(255*Math.max(0,Math.min(1,t))).toString(16).padStart(2,"0")}function a(t){return Math.max(0,Math.min(255,255*t))}class l{static CMYK_G([t,e,i,n]){return["G",1-Math.min(1,.3*t+.59*i+.11*e+n)]}static G_CMYK([t]){return["CMYK",0,0,0,1-t]}static G_RGB([t]){return["RGB",t,t,t]}static G_rgb([t]){return[t=a(t),t,t]}static G_HTML([t]){const e=r(t);return`#${e}${e}${e}`}static RGB_G([t,e,i]){return["G",.3*t+.59*e+.11*i]}static RGB_rgb(t){return t.map(a)}static RGB_HTML(t){return`#${t.map(r).join("")}`}static T_HTML(){return"#00000000"}static T_rgb(){return[null]}static CMYK_RGB([t,e,i,n]){return["RGB",1-Math.min(1,t+n),1-Math.min(1,i+n),1-Math.min(1,e+n)]}static CMYK_rgb([t,e,i,n]){return[a(1-Math.min(1,t+n)),a(1-Math.min(1,i+n)),a(1-Math.min(1,e+n))]}static CMYK_HTML(t){const e=this.CMYK_RGB(t).slice(1);return this.RGB_HTML(e)}static RGB_CMYK([t,e,i]){const n=1-t,s=1-e,o=1-i;return["CMYK",n,s,o,Math.min(n,s,o)]}}var c=i(160);const d=1e3,h=new WeakSet;function u(t){return{width:t[2]-t[0],height:t[3]-t[1]}}class p{static create(t){switch(t.data.annotationType){case n.AnnotationType.LINK:return new f(t);case n.AnnotationType.TEXT:return new m(t);case n.AnnotationType.WIDGET:switch(t.data.fieldType){case"Tx":return new v(t);case"Btn":return t.data.radioButton?new k(t):t.data.checkBox?new w(t):new x(t);case"Ch":return new E(t);case"Sig":return new y(t)}return new b(t);case n.AnnotationType.POPUP:return new C(t);case n.AnnotationType.FREETEXT:return new S(t);case n.AnnotationType.LINE:return new _(t);case n.AnnotationType.SQUARE:return new T(t);case n.AnnotationType.CIRCLE:return new M(t);case n.AnnotationType.POLYLINE:return new I(t);case n.AnnotationType.CARET:return new B(t);case n.AnnotationType.INK:return new P(t);case n.AnnotationType.POLYGON:return new L(t);case n.AnnotationType.HIGHLIGHT:return new R(t);case n.AnnotationType.UNDERLINE:return new D(t);case n.AnnotationType.SQUIGGLY:return new O(t);case n.AnnotationType.STRIKEOUT:return new F(t);case n.AnnotationType.STAMP:return new N(t);case n.AnnotationType.FILEATTACHMENT:return new H(t);default:return new g(t)}}}class g{#t=!1;constructor(t,{isRenderable:e=!1,ignoreBorder:i=!1,createQuadrilaterals:n=!1}={}){this.isRenderable=e,this.data=t.data,this.layer=t.layer,this.linkService=t.linkService,this.downloadManager=t.downloadManager,this.imageResourcesPath=t.imageResourcesPath,this.renderForms=t.renderForms,this.svgFactory=t.svgFactory,this.annotationStorage=t.annotationStorage,this.enableScripting=t.enableScripting,this.hasJSActions=t.hasJSActions,this._fieldObjects=t.fieldObjects,this.parent=t.parent,e&&(this.container=this._createContainer(i)),n&&this._createQuadrilaterals()}static _hasPopupData({titleObj:t,contentsObj:e,richText:i}){return!!(t?.str||e?.str||i?.str)}get hasPopupData(){return g._hasPopupData(this.data)}_createContainer(t){const{data:e,parent:{page:i,viewport:s}}=this,o=document.createElement("section");o.setAttribute("data-annotation-id",e.id),this instanceof b||(o.tabIndex=d),o.style.zIndex=this.parent.zIndex++,this.data.popupRef&&o.setAttribute("aria-haspopup","dialog"),e.noRotate&&o.classList.add("norotate");const{pageWidth:r,pageHeight:a,pageX:l,pageY:c}=s.rawDims;if(!e.rect||this instanceof C){const{rotation:t}=e;return e.hasOwnCanvas||0===t||this.setRotation(t,o),o}const{width:h,height:p}=u(e.rect),g=n.Util.normalizeRect([e.rect[0],i.view[3]-e.rect[1]+i.view[1],e.rect[2],i.view[3]-e.rect[3]+i.view[1]]);if(!t&&e.borderStyle.width>0){o.style.borderWidth=`${e.borderStyle.width}px`;const t=e.borderStyle.horizontalCornerRadius,i=e.borderStyle.verticalCornerRadius;if(t>0||i>0){const e=`calc(${t}px * var(--scale-factor)) / calc(${i}px * var(--scale-factor))`;o.style.borderRadius=e}else if(this instanceof k){const t=`calc(${h}px * var(--scale-factor)) / calc(${p}px * var(--scale-factor))`;o.style.borderRadius=t}switch(e.borderStyle.style){case n.AnnotationBorderStyleType.SOLID:o.style.borderStyle="solid";break;case n.AnnotationBorderStyleType.DASHED:o.style.borderStyle="dashed";break;case n.AnnotationBorderStyleType.BEVELED:(0,n.warn)("Unimplemented border style: beveled");break;case n.AnnotationBorderStyleType.INSET:(0,n.warn)("Unimplemented border style: inset");break;case n.AnnotationBorderStyleType.UNDERLINE:o.style.borderBottomStyle="solid"}const s=e.borderColor||null;s?(this.#t=!0,o.style.borderColor=n.Util.makeHexColor(0|s[0],0|s[1],0|s[2])):o.style.borderWidth=0}o.style.left=100*(g[0]-l)/r+"%",o.style.top=100*(g[1]-c)/a+"%";const{rotation:f}=e;return e.hasOwnCanvas||0===f?(o.style.width=100*h/r+"%",o.style.height=100*p/a+"%"):this.setRotation(f,o),o}setRotation(t,e=this.container){if(!this.data.rect)return;const{pageWidth:i,pageHeight:n}=this.parent.viewport.rawDims,{width:s,height:o}=u(this.data.rect);let r,a;t%180==0?(r=100*s/i,a=100*o/n):(r=100*o/i,a=100*s/n),e.style.width=`${r}%`,e.style.height=`${a}%`,e.setAttribute("data-main-rotation",(360-t)%360)}get _commonActions(){const t=(t,e,i)=>{const n=i.detail[t],s=n[0],o=n.slice(1);i.target.style[e]=l[`${s}_HTML`](o),this.annotationStorage.setValue(this.data.id,{[e]:l[`${s}_rgb`](o)})};return(0,n.shadow)(this,"_commonActions",{display:t=>{const{display:e}=t.detail,i=e%2==1;this.container.style.visibility=i?"hidden":"visible",this.annotationStorage.setValue(this.data.id,{noView:i,noPrint:1===e||2===e})},print:t=>{this.annotationStorage.setValue(this.data.id,{noPrint:!t.detail.print})},hidden:t=>{const{hidden:e}=t.detail;this.container.style.visibility=e?"hidden":"visible",this.annotationStorage.setValue(this.data.id,{noPrint:e,noView:e})},focus:t=>{setTimeout((()=>t.target.focus({preventScroll:!1})),0)},userName:t=>{t.target.title=t.detail.userName},readonly:t=>{t.target.disabled=t.detail.readonly},required:t=>{this._setRequired(t.target,t.detail.required)},bgColor:e=>{t("bgColor","backgroundColor",e)},fillColor:e=>{t("fillColor","backgroundColor",e)},fgColor:e=>{t("fgColor","color",e)},textColor:e=>{t("textColor","color",e)},borderColor:e=>{t("borderColor","borderColor",e)},strokeColor:e=>{t("strokeColor","borderColor",e)},rotation:t=>{const e=t.detail.rotation;this.setRotation(e),this.annotationStorage.setValue(this.data.id,{rotation:e})}})}_dispatchEventFromSandbox(t,e){const i=this._commonActions;for(const n of Object.keys(e.detail)){const s=t[n]||i[n];s?.(e)}}_setDefaultPropertiesFromJS(t){if(!this.enableScripting)return;const e=this.annotationStorage.getRawValue(this.data.id);if(!e)return;const i=this._commonActions;for(const[n,s]of Object.entries(e)){const o=i[n];o&&(o({detail:{[n]:s},target:t}),delete e[n])}}_createQuadrilaterals(){if(!this.container)return;const{quadPoints:t}=this.data;if(!t)return;const[e,i,n,s]=this.data.rect;if(1===t.length){const[,{x:o,y:r},{x:a,y:l}]=t[0];if(n===o&&s===r&&e===a&&i===l)return}const{style:o}=this.container;let r;if(this.#t){const{borderColor:t,borderWidth:e}=o;o.borderWidth=0,r=["url('data:image/svg+xml;utf8,",'<svg xmlns="http://www.w3.org/2000/svg"',' preserveAspectRatio="none" viewBox="0 0 1 1">',`<g fill="transparent" stroke="${t}" stroke-width="${e}">`],this.container.classList.add("hasBorder")}const a=n-e,l=s-i,{svgFactory:c}=this,d=c.createElement("svg");d.classList.add("quadrilateralsContainer"),d.setAttribute("width",0),d.setAttribute("height",0);const h=c.createElement("defs");d.append(h);const u=c.createElement("clipPath"),p=`clippath_${this.data.id}`;u.setAttribute("id",p),u.setAttribute("clipPathUnits","objectBoundingBox"),h.append(u);for(const[,{x:i,y:n},{x:o,y:d}]of t){const t=c.createElement("rect"),h=(o-e)/a,p=(s-n)/l,g=(i-o)/a,f=(n-d)/l;t.setAttribute("x",h),t.setAttribute("y",p),t.setAttribute("width",g),t.setAttribute("height",f),u.append(t),r?.push(`<rect vector-effect="non-scaling-stroke" x="${h}" y="${p}" width="${g}" height="${f}"/>`)}this.#t&&(r.push("</g></svg>')"),o.backgroundImage=r.join("")),this.container.append(d),this.container.style.clipPath=`url(#${p})`}_createPopup(){const{container:t,data:e}=this;t.setAttribute("aria-haspopup","dialog");const i=new C({data:{color:e.color,titleObj:e.titleObj,modificationDate:e.modificationDate,contentsObj:e.contentsObj,richText:e.richText,parentRect:e.rect,borderStyle:0,id:`popup_${e.id}`,rotation:e.rotation},parent:this.parent,elements:[this]});this.parent.div.append(i.render())}render(){(0,n.unreachable)("Abstract method `AnnotationElement.render` called")}_getElementsByName(t,e=null){const i=[];if(this._fieldObjects){const s=this._fieldObjects[t];if(s)for(const{page:t,id:o,exportValues:r}of s){if(-1===t)continue;if(o===e)continue;const s="string"==typeof r?r:null,a=document.querySelector(`[data-element-id="${o}"]`);!a||h.has(a)?i.push({id:o,exportValue:s,domElement:a}):(0,n.warn)(`_getElementsByName - element not allowed: ${o}`)}return i}for(const n of document.getElementsByName(t)){const{exportValue:t}=n,s=n.getAttribute("data-element-id");s!==e&&h.has(n)&&i.push({id:s,exportValue:t,domElement:n})}return i}show(){this.container&&(this.container.hidden=!1),this.popup?.maybeShow()}hide(){this.container&&(this.container.hidden=!0),this.popup?.forceHide()}getElementsToTriggerPopup(){return this.container}addHighlightArea(){const t=this.getElementsToTriggerPopup();if(Array.isArray(t))for(const e of t)e.classList.add("highlightArea");else t.classList.add("highlightArea")}get _isEditable(){return!1}_editOnDoubleClick(){if(!this._isEditable)return;const{annotationEditorType:t,data:{id:e}}=this;this.container.addEventListener("dblclick",(()=>{this.linkService.eventBus?.dispatch("switchannotationeditormode",{source:this,mode:t,editId:e})}))}}class f extends g{constructor(t,e=null){super(t,{isRenderable:!0,ignoreBorder:!!e?.ignoreBorder,createQuadrilaterals:!0}),this.isTooltipOnly=t.data.isTooltipOnly}render(){const{data:t,linkService:e}=this,i=document.createElement("a");i.setAttribute("data-element-id",t.id);let n=!1;return t.url?(e.addLinkAttributes(i,t.url,t.newWindow),n=!0):t.action?(this._bindNamedAction(i,t.action),n=!0):t.attachment?(this.#e(i,t.attachment,t.attachmentDest),n=!0):t.setOCGState?(this.#i(i,t.setOCGState),n=!0):t.dest?(this._bindLink(i,t.dest),n=!0):(t.actions&&(t.actions.Action||t.actions["Mouse Up"]||t.actions["Mouse Down"])&&this.enableScripting&&this.hasJSActions&&(this._bindJSAction(i,t),n=!0),t.resetForm?(this._bindResetFormAction(i,t.resetForm),n=!0):this.isTooltipOnly&&!n&&(this._bindLink(i,""),n=!0)),this.container.classList.add("linkAnnotation"),n&&this.container.append(i),this.container}#n(){this.container.setAttribute("data-internal-link","")}_bindLink(t,e){t.href=this.linkService.getDestinationHash(e),t.onclick=()=>(e&&this.linkService.goToDestination(e),!1),(e||""===e)&&this.#n()}_bindNamedAction(t,e){t.href=this.linkService.getAnchorUrl(""),t.onclick=()=>(this.linkService.executeNamedAction(e),!1),this.#n()}#e(t,e,i=null){t.href=this.linkService.getAnchorUrl(""),t.onclick=()=>(this.downloadManager?.openOrDownloadData(e.content,e.filename,i),!1),this.#n()}#i(t,e){t.href=this.linkService.getAnchorUrl(""),t.onclick=()=>(this.linkService.executeSetOCGState(e),!1),this.#n()}_bindJSAction(t,e){t.href=this.linkService.getAnchorUrl("");const i=new Map([["Action","onclick"],["Mouse Up","onmouseup"],["Mouse Down","onmousedown"]]);for(const n of Object.keys(e.actions)){const s=i.get(n);s&&(t[s]=()=>(this.linkService.eventBus?.dispatch("dispatcheventinsandbox",{source:this,detail:{id:e.id,name:n}}),!1))}t.onclick||(t.onclick=()=>!1),this.#n()}_bindResetFormAction(t,e){const i=t.onclick;if(i||(t.href=this.linkService.getAnchorUrl("")),this.#n(),!this._fieldObjects)return(0,n.warn)('_bindResetFormAction - "resetForm" action not supported, ensure that the `fieldObjects` parameter is provided.'),void(i||(t.onclick=()=>!1));t.onclick=()=>{i?.();const{fields:t,refs:s,include:o}=e,r=[];if(0!==t.length||0!==s.length){const e=new Set(s);for(const i of t){const t=this._fieldObjects[i]||[];for(const{id:i}of t)e.add(i)}for(const t of Object.values(this._fieldObjects))for(const i of t)e.has(i.id)===o&&r.push(i)}else for(const t of Object.values(this._fieldObjects))r.push(...t);const a=this.annotationStorage,l=[];for(const t of r){const{id:e}=t;switch(l.push(e),t.type){case"text":{const i=t.defaultValue||"";a.setValue(e,{value:i});break}case"checkbox":case"radiobutton":{const i=t.defaultValue===t.exportValues;a.setValue(e,{value:i});break}case"combobox":case"listbox":{const i=t.defaultValue||"";a.setValue(e,{value:i});break}default:continue}const i=document.querySelector(`[data-element-id="${e}"]`);i&&(h.has(i)?i.dispatchEvent(new Event("resetform")):(0,n.warn)(`_bindResetFormAction - element not allowed: ${e}`))}return this.enableScripting&&this.linkService.eventBus?.dispatch("dispatcheventinsandbox",{source:this,detail:{id:"app",ids:l,name:"ResetForm"}}),!1}}}class m extends g{constructor(t){super(t,{isRenderable:!0})}render(){this.container.classList.add("textAnnotation");const t=document.createElement("img");return t.src=this.imageResourcesPath+"annotation-"+this.data.name.toLowerCase()+".svg",t.setAttribute("data-l10n-id","pdfjs-text-annotation-type"),t.setAttribute("data-l10n-args",JSON.stringify({type:this.data.name})),!this.data.popupRef&&this.hasPopupData&&this._createPopup(),this.container.append(t),this.container}}class b extends g{render(){return this.data.alternativeText&&(this.container.title=this.data.alternativeText),this.container}showElementAndHideCanvas(t){this.data.hasOwnCanvas&&("CANVAS"===t.previousSibling?.nodeName&&(t.previousSibling.hidden=!0),t.hidden=!1)}_getKeyModifier(t){return n.FeatureTest.platform.isMac?t.metaKey:t.ctrlKey}_setEventListener(t,e,i,n,s){i.includes("mouse")?t.addEventListener(i,(t=>{this.linkService.eventBus?.dispatch("dispatcheventinsandbox",{source:this,detail:{id:this.data.id,name:n,value:s(t),shift:t.shiftKey,modifier:this._getKeyModifier(t)}})})):t.addEventListener(i,(t=>{if("blur"===i){if(!e.focused||!t.relatedTarget)return;e.focused=!1}else if("focus"===i){if(e.focused)return;e.focused=!0}s&&this.linkService.eventBus?.dispatch("dispatcheventinsandbox",{source:this,detail:{id:this.data.id,name:n,value:s(t)}})}))}_setEventListeners(t,e,i,n){for(const[s,o]of i)("Action"===o||this.data.actions?.[o])&&("Focus"!==o&&"Blur"!==o||(e||={focused:!1}),this._setEventListener(t,e,s,o,n),"Focus"!==o||this.data.actions?.Blur?"Blur"!==o||this.data.actions?.Focus||this._setEventListener(t,e,"focus","Focus",null):this._setEventListener(t,e,"blur","Blur",null))}_setBackgroundColor(t){const e=this.data.backgroundColor||null;t.style.backgroundColor=null===e?"transparent":n.Util.makeHexColor(e[0],e[1],e[2])}_setTextStyle(t){const{fontColor:e}=this.data.defaultAppearanceData,i=this.data.defaultAppearanceData.fontSize||9,s=t.style;let o;const r=t=>Math.round(10*t)/10;if(this.data.multiLine){const t=Math.abs(this.data.rect[3]-this.data.rect[1]-2),e=t/(Math.round(t/(n.LINE_FACTOR*i))||1);o=Math.min(i,r(e/n.LINE_FACTOR))}else{const t=Math.abs(this.data.rect[3]-this.data.rect[1]-2);o=Math.min(i,r(t/n.LINE_FACTOR))}s.fontSize=`calc(${o}px * var(--scale-factor))`,s.color=n.Util.makeHexColor(e[0],e[1],e[2]),null!==this.data.textAlignment&&(s.textAlign=["left","center","right"][this.data.textAlignment])}_setRequired(t,e){e?t.setAttribute("required",!0):t.removeAttribute("required"),t.setAttribute("aria-required",e)}}class v extends b{constructor(t){super(t,{isRenderable:t.renderForms||t.data.hasOwnCanvas||!t.data.hasAppearance&&!!t.data.fieldValue})}setPropertyOnSiblings(t,e,i,n){const s=this.annotationStorage;for(const o of this._getElementsByName(t.name,t.id))o.domElement&&(o.domElement[e]=i),s.setValue(o.id,{[n]:i})}render(){const t=this.annotationStorage,e=this.data.id;this.container.classList.add("textWidgetAnnotation");let i=null;if(this.renderForms){const n=t.getValue(e,{value:this.data.fieldValue});let s=n.value||"";const o=t.getValue(e,{charLimit:this.data.maxLen}).charLimit;o&&s.length>o&&(s=s.slice(0,o));let r=n.formattedValue||this.data.textContent?.join("\n")||null;r&&this.data.comb&&(r=r.replaceAll(/\s+/g,""));const a={userValue:s,formattedValue:r,lastCommittedValue:null,commitKey:1,focused:!1};this.data.multiLine?(i=document.createElement("textarea"),i.textContent=r??s,this.data.doNotScroll&&(i.style.overflowY="hidden")):(i=document.createElement("input"),i.type="text",i.setAttribute("value",r??s),this.data.doNotScroll&&(i.style.overflowX="hidden")),this.data.hasOwnCanvas&&(i.hidden=!0),h.add(i),i.setAttribute("data-element-id",e),i.disabled=this.data.readOnly,i.name=this.data.fieldName,i.tabIndex=d,this._setRequired(i,this.data.required),o&&(i.maxLength=o),i.addEventListener("input",(n=>{t.setValue(e,{value:n.target.value}),this.setPropertyOnSiblings(i,"value",n.target.value,"value"),a.formattedValue=null})),i.addEventListener("resetform",(t=>{const e=this.data.defaultFieldValue??"";i.value=a.userValue=e,a.formattedValue=null}));let l=t=>{const{formattedValue:e}=a;null!=e&&(t.target.value=e),t.target.scrollLeft=0};if(this.enableScripting&&this.hasJSActions){i.addEventListener("focus",(t=>{if(a.focused)return;const{target:e}=t;a.userValue&&(e.value=a.userValue),a.lastCommittedValue=e.value,a.commitKey=1,this.data.actions?.Focus||(a.focused=!0)})),i.addEventListener("updatefromsandbox",(i=>{this.showElementAndHideCanvas(i.target);const n={value(i){a.userValue=i.detail.value??"",t.setValue(e,{value:a.userValue.toString()}),i.target.value=a.userValue},formattedValue(i){const{formattedValue:n}=i.detail;a.formattedValue=n,null!=n&&i.target!==document.activeElement&&(i.target.value=n),t.setValue(e,{formattedValue:n})},selRange(t){t.target.setSelectionRange(...t.detail.selRange)},charLimit:i=>{const{charLimit:n}=i.detail,{target:s}=i;if(0===n)return void s.removeAttribute("maxLength");s.setAttribute("maxLength",n);let o=a.userValue;!o||o.length<=n||(o=o.slice(0,n),s.value=a.userValue=o,t.setValue(e,{value:o}),this.linkService.eventBus?.dispatch("dispatcheventinsandbox",{source:this,detail:{id:e,name:"Keystroke",value:o,willCommit:!0,commitKey:1,selStart:s.selectionStart,selEnd:s.selectionEnd}}))}};this._dispatchEventFromSandbox(n,i)})),i.addEventListener("keydown",(t=>{a.commitKey=1;let i=-1;if("Escape"===t.key?i=0:"Enter"!==t.key||this.data.multiLine?"Tab"===t.key&&(a.commitKey=3):i=2,-1===i)return;const{value:n}=t.target;a.lastCommittedValue!==n&&(a.lastCommittedValue=n,a.userValue=n,this.linkService.eventBus?.dispatch("dispatcheventinsandbox",{source:this,detail:{id:e,name:"Keystroke",value:n,willCommit:!0,commitKey:i,selStart:t.target.selectionStart,selEnd:t.target.selectionEnd}}))}));const n=l;l=null,i.addEventListener("blur",(t=>{if(!a.focused||!t.relatedTarget)return;this.data.actions?.Blur||(a.focused=!1);const{value:i}=t.target;a.userValue=i,a.lastCommittedValue!==i&&this.linkService.eventBus?.dispatch("dispatcheventinsandbox",{source:this,detail:{id:e,name:"Keystroke",value:i,willCommit:!0,commitKey:a.commitKey,selStart:t.target.selectionStart,selEnd:t.target.selectionEnd}}),n(t)})),this.data.actions?.Keystroke&&i.addEventListener("beforeinput",(t=>{a.lastCommittedValue=null;const{data:i,target:n}=t,{value:s,selectionStart:o,selectionEnd:r}=n;let l=o,c=r;switch(t.inputType){case"deleteWordBackward":{const t=s.substring(0,o).match(/\w*[^\w]*$/);t&&(l-=t[0].length);break}case"deleteWordForward":{const t=s.substring(o).match(/^[^\w]*\w*/);t&&(c+=t[0].length);break}case"deleteContentBackward":o===r&&(l-=1);break;case"deleteContentForward":o===r&&(c+=1)}t.preventDefault(),this.linkService.eventBus?.dispatch("dispatcheventinsandbox",{source:this,detail:{id:e,name:"Keystroke",value:s,change:i||"",willCommit:!1,selStart:l,selEnd:c}})})),this._setEventListeners(i,a,[["focus","Focus"],["blur","Blur"],["mousedown","Mouse Down"],["mouseenter","Mouse Enter"],["mouseleave","Mouse Exit"],["mouseup","Mouse Up"]],(t=>t.target.value))}if(l&&i.addEventListener("blur",l),this.data.comb){const t=(this.data.rect[2]-this.data.rect[0])/o;i.classList.add("comb"),i.style.letterSpacing=`calc(${t}px * var(--scale-factor) - 1ch)`}}else i=document.createElement("div"),i.textContent=this.data.fieldValue,i.style.verticalAlign="middle",i.style.display="table-cell",this.data.hasOwnCanvas&&(i.hidden=!0);return this._setTextStyle(i),this._setBackgroundColor(i),this._setDefaultPropertiesFromJS(i),this.container.append(i),this.container}}class y extends b{constructor(t){super(t,{isRenderable:!!t.data.hasOwnCanvas})}}class w extends b{constructor(t){super(t,{isRenderable:t.renderForms})}render(){const t=this.annotationStorage,e=this.data,i=e.id;let n=t.getValue(i,{value:e.exportValue===e.fieldValue}).value;"string"==typeof n&&(n="Off"!==n,t.setValue(i,{value:n})),this.container.classList.add("buttonWidgetAnnotation","checkBox");const s=document.createElement("input");return h.add(s),s.setAttribute("data-element-id",i),s.disabled=e.readOnly,this._setRequired(s,this.data.required),s.type="checkbox",s.name=e.fieldName,n&&s.setAttribute("checked",!0),s.setAttribute("exportValue",e.exportValue),s.tabIndex=d,s.addEventListener("change",(n=>{const{name:s,checked:o}=n.target;for(const n of this._getElementsByName(s,i)){const i=o&&n.exportValue===e.exportValue;n.domElement&&(n.domElement.checked=i),t.setValue(n.id,{value:i})}t.setValue(i,{value:o})})),s.addEventListener("resetform",(t=>{const i=e.defaultFieldValue||"Off";t.target.checked=i===e.exportValue})),this.enableScripting&&this.hasJSActions&&(s.addEventListener("updatefromsandbox",(e=>{const n={value(e){e.target.checked="Off"!==e.detail.value,t.setValue(i,{value:e.target.checked})}};this._dispatchEventFromSandbox(n,e)})),this._setEventListeners(s,null,[["change","Validate"],["change","Action"],["focus","Focus"],["blur","Blur"],["mousedown","Mouse Down"],["mouseenter","Mouse Enter"],["mouseleave","Mouse Exit"],["mouseup","Mouse Up"]],(t=>t.target.checked))),this._setBackgroundColor(s),this._setDefaultPropertiesFromJS(s),this.container.append(s),this.container}}class k extends b{constructor(t){super(t,{isRenderable:t.renderForms})}render(){this.container.classList.add("buttonWidgetAnnotation","radioButton");const t=this.annotationStorage,e=this.data,i=e.id;let n=t.getValue(i,{value:e.fieldValue===e.buttonValue}).value;if("string"==typeof n&&(n=n!==e.buttonValue,t.setValue(i,{value:n})),n)for(const n of this._getElementsByName(e.fieldName,i))t.setValue(n.id,{value:!1});const s=document.createElement("input");if(h.add(s),s.setAttribute("data-element-id",i),s.disabled=e.readOnly,this._setRequired(s,this.data.required),s.type="radio",s.name=e.fieldName,n&&s.setAttribute("checked",!0),s.tabIndex=d,s.addEventListener("change",(e=>{const{name:n,checked:s}=e.target;for(const e of this._getElementsByName(n,i))t.setValue(e.id,{value:!1});t.setValue(i,{value:s})})),s.addEventListener("resetform",(t=>{const i=e.defaultFieldValue;t.target.checked=null!=i&&i===e.buttonValue})),this.enableScripting&&this.hasJSActions){const n=e.buttonValue;s.addEventListener("updatefromsandbox",(e=>{const s={value:e=>{const s=n===e.detail.value;for(const n of this._getElementsByName(e.target.name)){const e=s&&n.id===i;n.domElement&&(n.domElement.checked=e),t.setValue(n.id,{value:e})}}};this._dispatchEventFromSandbox(s,e)})),this._setEventListeners(s,null,[["change","Validate"],["change","Action"],["focus","Focus"],["blur","Blur"],["mousedown","Mouse Down"],["mouseenter","Mouse Enter"],["mouseleave","Mouse Exit"],["mouseup","Mouse Up"]],(t=>t.target.checked))}return this._setBackgroundColor(s),this._setDefaultPropertiesFromJS(s),this.container.append(s),this.container}}class x extends f{constructor(t){super(t,{ignoreBorder:t.data.hasAppearance})}render(){const t=super.render();t.classList.add("buttonWidgetAnnotation","pushButton"),this.data.alternativeText&&(t.title=this.data.alternativeText);const e=t.lastChild;return this.enableScripting&&this.hasJSActions&&e&&(this._setDefaultPropertiesFromJS(e),e.addEventListener("updatefromsandbox",(t=>{this._dispatchEventFromSandbox({},t)}))),t}}class E extends b{constructor(t){super(t,{isRenderable:t.renderForms})}render(){this.container.classList.add("choiceWidgetAnnotation");const t=this.annotationStorage,e=this.data.id,i=t.getValue(e,{value:this.data.fieldValue}),n=document.createElement("select");h.add(n),n.setAttribute("data-element-id",e),n.disabled=this.data.readOnly,this._setRequired(n,this.data.required),n.name=this.data.fieldName,n.tabIndex=d;let s=this.data.combo&&this.data.options.length>0;this.data.combo||(n.size=this.data.options.length,this.data.multiSelect&&(n.multiple=!0)),n.addEventListener("resetform",(t=>{const e=this.data.defaultFieldValue;for(const t of n.options)t.selected=t.value===e}));for(const t of this.data.options){const e=document.createElement("option");e.textContent=t.displayValue,e.value=t.exportValue,i.value.includes(t.exportValue)&&(e.setAttribute("selected",!0),s=!1),n.append(e)}let o=null;if(s){const t=document.createElement("option");t.value=" ",t.setAttribute("hidden",!0),t.setAttribute("selected",!0),n.prepend(t),o=()=>{t.remove(),n.removeEventListener("input",o),o=null},n.addEventListener("input",o)}const r=t=>{const e=t?"value":"textContent",{options:i,multiple:s}=n;return s?Array.prototype.filter.call(i,(t=>t.selected)).map((t=>t[e])):-1===i.selectedIndex?null:i[i.selectedIndex][e]};let a=r(!1);const l=t=>{const e=t.target.options;return Array.prototype.map.call(e,(t=>({displayValue:t.textContent,exportValue:t.value})))};return this.enableScripting&&this.hasJSActions?(n.addEventListener("updatefromsandbox",(i=>{const s={value(i){o?.();const s=i.detail.value,l=new Set(Array.isArray(s)?s:[s]);for(const t of n.options)t.selected=l.has(t.value);t.setValue(e,{value:r(!0)}),a=r(!1)},multipleSelection(t){n.multiple=!0},remove(i){const s=n.options,o=i.detail.remove;s[o].selected=!1,n.remove(o),s.length>0&&-1===Array.prototype.findIndex.call(s,(t=>t.selected))&&(s[0].selected=!0),t.setValue(e,{value:r(!0),items:l(i)}),a=r(!1)},clear(i){for(;0!==n.length;)n.remove(0);t.setValue(e,{value:null,items:[]}),a=r(!1)},insert(i){const{index:s,displayValue:o,exportValue:c}=i.detail.insert,d=n.children[s],h=document.createElement("option");h.textContent=o,h.value=c,d?d.before(h):n.append(h),t.setValue(e,{value:r(!0),items:l(i)}),a=r(!1)},items(i){const{items:s}=i.detail;for(;0!==n.length;)n.remove(0);for(const t of s){const{displayValue:e,exportValue:i}=t,s=document.createElement("option");s.textContent=e,s.value=i,n.append(s)}n.options.length>0&&(n.options[0].selected=!0),t.setValue(e,{value:r(!0),items:l(i)}),a=r(!1)},indices(i){const n=new Set(i.detail.indices);for(const t of i.target.options)t.selected=n.has(t.index);t.setValue(e,{value:r(!0)}),a=r(!1)},editable(t){t.target.disabled=!t.detail.editable}};this._dispatchEventFromSandbox(s,i)})),n.addEventListener("input",(i=>{const n=r(!0);t.setValue(e,{value:n}),i.preventDefault(),this.linkService.eventBus?.dispatch("dispatcheventinsandbox",{source:this,detail:{id:e,name:"Keystroke",value:a,changeEx:n,willCommit:!1,commitKey:1,keyDown:!1}})})),this._setEventListeners(n,null,[["focus","Focus"],["blur","Blur"],["mousedown","Mouse Down"],["mouseenter","Mouse Enter"],["mouseleave","Mouse Exit"],["mouseup","Mouse Up"],["input","Action"],["input","Validate"]],(t=>t.target.value))):n.addEventListener("input",(function(i){t.setValue(e,{value:r(!0)})})),this.data.combo&&this._setTextStyle(n),this._setBackgroundColor(n),this._setDefaultPropertiesFromJS(n),this.container.append(n),this.container}}class C extends g{constructor(t){const{data:e,elements:i}=t;super(t,{isRenderable:g._hasPopupData(e)}),this.elements=i}render(){this.container.classList.add("popupAnnotation");const t=new A({container:this.container,color:this.data.color,titleObj:this.data.titleObj,modificationDate:this.data.modificationDate,contentsObj:this.data.contentsObj,richText:this.data.richText,rect:this.data.rect,parentRect:this.data.parentRect||null,parent:this.parent,elements:this.elements,open:this.data.open}),e=[];for(const i of this.elements)i.popup=t,e.push(i.data.id),i.addHighlightArea();return this.container.setAttribute("aria-controls",e.map((t=>`${n.AnnotationPrefix}${t}`)).join(",")),this.container}}class A{#s=this.#o.bind(this);#r=this.#a.bind(this);#l=this.#c.bind(this);#d=this.#h.bind(this);#u=null;#p=null;#g=null;#f=null;#m=null;#b=null;#v=null;#y=!1;#w=null;#k=null;#x=null;#E=null;#C=!1;constructor({container:t,color:e,elements:i,titleObj:n,modificationDate:o,contentsObj:r,richText:a,parent:l,rect:c,parentRect:d,open:h}){this.#p=t,this.#E=n,this.#g=r,this.#x=a,this.#b=l,this.#u=e,this.#k=c,this.#v=d,this.#m=i,this.#f=s.PDFDateString.toDateObject(o),this.trigger=i.flatMap((t=>t.getElementsToTriggerPopup()));for(const t of this.trigger)t.addEventListener("click",this.#d),t.addEventListener("mouseenter",this.#l),t.addEventListener("mouseleave",this.#r),t.classList.add("popupTriggerArea");for(const t of i)t.container?.addEventListener("keydown",this.#s);this.#p.hidden=!0,h&&this.#h()}render(){if(this.#w)return;const{page:{view:t},viewport:{rawDims:{pageWidth:e,pageHeight:i,pageX:s,pageY:o}}}=this.#b,r=this.#w=document.createElement("div");if(r.className="popup",this.#u){const t=r.style.outlineColor=n.Util.makeHexColor(...this.#u);if(CSS.supports("background-color","color-mix(in srgb, red 30%, white)"))r.style.backgroundColor=`color-mix(in srgb, ${t} 30%, white)`;else{const t=.7;r.style.backgroundColor=n.Util.makeHexColor(...this.#u.map((e=>Math.floor(t*(255-e)+e))))}}const a=document.createElement("span");a.className="header";const l=document.createElement("h1");if(a.append(l),({dir:l.dir,str:l.textContent}=this.#E),r.append(a),this.#f){const t=document.createElement("span");t.classList.add("popupDate"),t.setAttribute("data-l10n-id","pdfjs-annotation-date-string"),t.setAttribute("data-l10n-args",JSON.stringify({date:this.#f.toLocaleDateString(),time:this.#f.toLocaleTimeString()})),a.append(t)}const d=this.#g,h=this.#x;if(!h?.str||d?.str&&d.str!==h.str){const t=this._formatContents(d);r.append(t)}else c.XfaLayer.render({xfaHtml:h.html,intent:"richText",div:r}),r.lastChild.classList.add("richText","popupContent");let u=!!this.#v,p=u?this.#v:this.#k;for(const t of this.#m)if(!p||null!==n.Util.intersect(t.data.rect,p)){p=t.data.rect,u=!0;break}const g=n.Util.normalizeRect([p[0],t[3]-p[1]+t[1],p[2],t[3]-p[3]+t[1]]),f=u?p[2]-p[0]+5:0,m=g[0]+f,b=g[1],{style:v}=this.#p;v.left=100*(m-s)/e+"%",v.top=100*(b-o)/i+"%",this.#p.append(r)}_formatContents({str:t,dir:e}){const i=document.createElement("p");i.classList.add("popupContent"),i.dir=e;const n=t.split(/(?:\r\n?|\n)/);for(let t=0,e=n.length;t<e;++t){const s=n[t];i.append(document.createTextNode(s)),t<e-1&&i.append(document.createElement("br"))}return i}#o(t){t.altKey||t.shiftKey||t.ctrlKey||t.metaKey||("Enter"===t.key||"Escape"===t.key&&this.#y)&&this.#h()}#h(){this.#y=!this.#y,this.#y?(this.#c(),this.#p.addEventListener("click",this.#d),this.#p.addEventListener("keydown",this.#s)):(this.#a(),this.#p.removeEventListener("click",this.#d),this.#p.removeEventListener("keydown",this.#s))}#c(){this.#w||this.render(),this.isVisible?this.#y&&this.#p.classList.add("focused"):(this.#p.hidden=!1,this.#p.style.zIndex=parseInt(this.#p.style.zIndex)+1e3)}#a(){this.#p.classList.remove("focused"),!this.#y&&this.isVisible&&(this.#p.hidden=!0,this.#p.style.zIndex=parseInt(this.#p.style.zIndex)-1e3)}forceHide(){this.#C=this.isVisible,this.#C&&(this.#p.hidden=!0)}maybeShow(){this.#C&&(this.#C=!1,this.#p.hidden=!1)}get isVisible(){return!1===this.#p.hidden}}class S extends g{constructor(t){super(t,{isRenderable:!0,ignoreBorder:!0}),this.textContent=t.data.textContent,this.textPosition=t.data.textPosition,this.annotationEditorType=n.AnnotationEditorType.FREETEXT}render(){if(this.container.classList.add("freeTextAnnotation"),this.textContent){const t=document.createElement("div");t.classList.add("annotationTextContent"),t.setAttribute("role","comment");for(const e of this.textContent){const i=document.createElement("span");i.textContent=e,t.append(i)}this.container.append(t)}return!this.data.popupRef&&this.hasPopupData&&this._createPopup(),this._editOnDoubleClick(),this.container}get _isEditable(){return this.data.hasOwnCanvas}}class _ extends g{#A=null;constructor(t){super(t,{isRenderable:!0,ignoreBorder:!0})}render(){this.container.classList.add("lineAnnotation");const t=this.data,{width:e,height:i}=u(t.rect),n=this.svgFactory.create(e,i,!0),s=this.#A=this.svgFactory.createElement("svg:line");return s.setAttribute("x1",t.rect[2]-t.lineCoordinates[0]),s.setAttribute("y1",t.rect[3]-t.lineCoordinates[1]),s.setAttribute("x2",t.rect[2]-t.lineCoordinates[2]),s.setAttribute("y2",t.rect[3]-t.lineCoordinates[3]),s.setAttribute("stroke-width",t.borderStyle.width||1),s.setAttribute("stroke","transparent"),s.setAttribute("fill","transparent"),n.append(s),this.container.append(n),!t.popupRef&&this.hasPopupData&&this._createPopup(),this.container}getElementsToTriggerPopup(){return this.#A}addHighlightArea(){this.container.classList.add("highlightArea")}}class T extends g{#S=null;constructor(t){super(t,{isRenderable:!0,ignoreBorder:!0})}render(){this.container.classList.add("squareAnnotation");const t=this.data,{width:e,height:i}=u(t.rect),n=this.svgFactory.create(e,i,!0),s=t.borderStyle.width,o=this.#S=this.svgFactory.createElement("svg:rect");return o.setAttribute("x",s/2),o.setAttribute("y",s/2),o.setAttribute("width",e-s),o.setAttribute("height",i-s),o.setAttribute("stroke-width",s||1),o.setAttribute("stroke","transparent"),o.setAttribute("fill","transparent"),n.append(o),this.container.append(n),!t.popupRef&&this.hasPopupData&&this._createPopup(),this.container}getElementsToTriggerPopup(){return this.#S}addHighlightArea(){this.container.classList.add("highlightArea")}}class M extends g{#_=null;constructor(t){super(t,{isRenderable:!0,ignoreBorder:!0})}render(){this.container.classList.add("circleAnnotation");const t=this.data,{width:e,height:i}=u(t.rect),n=this.svgFactory.create(e,i,!0),s=t.borderStyle.width,o=this.#_=this.svgFactory.createElement("svg:ellipse");return o.setAttribute("cx",e/2),o.setAttribute("cy",i/2),o.setAttribute("rx",e/2-s/2),o.setAttribute("ry",i/2-s/2),o.setAttribute("stroke-width",s||1),o.setAttribute("stroke","transparent"),o.setAttribute("fill","transparent"),n.append(o),this.container.append(n),!t.popupRef&&this.hasPopupData&&this._createPopup(),this.container}getElementsToTriggerPopup(){return this.#_}addHighlightArea(){this.container.classList.add("highlightArea")}}class I extends g{#T=null;constructor(t){super(t,{isRenderable:!0,ignoreBorder:!0}),this.containerClassName="polylineAnnotation",this.svgElementName="svg:polyline"}render(){this.container.classList.add(this.containerClassName);const t=this.data,{width:e,height:i}=u(t.rect),n=this.svgFactory.create(e,i,!0);let s=[];for(const e of t.vertices){const i=e.x-t.rect[0],n=t.rect[3]-e.y;s.push(i+","+n)}s=s.join(" ");const o=this.#T=this.svgFactory.createElement(this.svgElementName);return o.setAttribute("points",s),o.setAttribute("stroke-width",t.borderStyle.width||1),o.setAttribute("stroke","transparent"),o.setAttribute("fill","transparent"),n.append(o),this.container.append(n),!t.popupRef&&this.hasPopupData&&this._createPopup(),this.container}getElementsToTriggerPopup(){return this.#T}addHighlightArea(){this.container.classList.add("highlightArea")}}class L extends I{constructor(t){super(t),this.containerClassName="polygonAnnotation",this.svgElementName="svg:polygon"}}class B extends g{constructor(t){super(t,{isRenderable:!0,ignoreBorder:!0})}render(){return this.container.classList.add("caretAnnotation"),!this.data.popupRef&&this.hasPopupData&&this._createPopup(),this.container}}class P extends g{#M=[];constructor(t){super(t,{isRenderable:!0,ignoreBorder:!0}),this.containerClassName="inkAnnotation",this.svgElementName="svg:polyline",this.annotationEditorType=n.AnnotationEditorType.INK}render(){this.container.classList.add(this.containerClassName);const t=this.data,{width:e,height:i}=u(t.rect),n=this.svgFactory.create(e,i,!0);for(const e of t.inkLists){let i=[];for(const n of e){const e=n.x-t.rect[0],s=t.rect[3]-n.y;i.push(`${e},${s}`)}i=i.join(" ");const s=this.svgFactory.createElement(this.svgElementName);this.#M.push(s),s.setAttribute("points",i),s.setAttribute("stroke-width",t.borderStyle.width||1),s.setAttribute("stroke","transparent"),s.setAttribute("fill","transparent"),!t.popupRef&&this.hasPopupData&&this._createPopup(),n.append(s)}return this.container.append(n),this.container}getElementsToTriggerPopup(){return this.#M}addHighlightArea(){this.container.classList.add("highlightArea")}}class R extends g{constructor(t){super(t,{isRenderable:!0,ignoreBorder:!0,createQuadrilaterals:!0})}render(){return!this.data.popupRef&&this.hasPopupData&&this._createPopup(),this.container.classList.add("highlightAnnotation"),this.container}}class D extends g{constructor(t){super(t,{isRenderable:!0,ignoreBorder:!0,createQuadrilaterals:!0})}render(){return!this.data.popupRef&&this.hasPopupData&&this._createPopup(),this.container.classList.add("underlineAnnotation"),this.container}}class O extends g{constructor(t){super(t,{isRenderable:!0,ignoreBorder:!0,createQuadrilaterals:!0})}render(){return!this.data.popupRef&&this.hasPopupData&&this._createPopup(),this.container.classList.add("squigglyAnnotation"),this.container}}class F extends g{constructor(t){super(t,{isRenderable:!0,ignoreBorder:!0,createQuadrilaterals:!0})}render(){return!this.data.popupRef&&this.hasPopupData&&this._createPopup(),this.container.classList.add("strikeoutAnnotation"),this.container}}class N extends g{constructor(t){super(t,{isRenderable:!0,ignoreBorder:!0})}render(){return this.container.classList.add("stampAnnotation"),!this.data.popupRef&&this.hasPopupData&&this._createPopup(),this.container}}class H extends g{#I=null;constructor(t){super(t,{isRenderable:!0});const{filename:e,content:i}=this.data.file;this.filename=(0,s.getFilenameFromUrl)(e,!0),this.content=i,this.linkService.eventBus?.dispatch("fileattachmentannotation",{source:this,filename:e,content:i})}render(){this.container.classList.add("fileAttachmentAnnotation");const{container:t,data:e}=this;let i;e.hasAppearance||0===e.fillAlpha?i=document.createElement("div"):(i=document.createElement("img"),i.src=`${this.imageResourcesPath}annotation-${/paperclip/i.test(e.name)?"paperclip":"pushpin"}.svg`,e.fillAlpha&&e.fillAlpha<1&&(i.style=`filter: opacity(${Math.round(100*e.fillAlpha)}%);`)),i.addEventListener("dblclick",this.#L.bind(this)),this.#I=i;const{isMac:s}=n.FeatureTest.platform;return t.addEventListener("keydown",(t=>{"Enter"===t.key&&(s?t.metaKey:t.ctrlKey)&&this.#L()})),!e.popupRef&&this.hasPopupData?this._createPopup():i.classList.add("popupTriggerArea"),t.append(i),t}getElementsToTriggerPopup(){return this.#I}addHighlightArea(){this.container.classList.add("highlightArea")}#L(){this.downloadManager?.openOrDownloadData(this.content,this.filename)}}class j{#B=null;#P=null;#R=new Map;constructor({div:t,accessibilityManager:e,annotationCanvasMap:i,page:n,viewport:s}){this.div=t,this.#B=e,this.#P=i,this.page=n,this.viewport=s,this.zIndex=0}#D(t,e){const i=t.firstChild||t;i.id=`${n.AnnotationPrefix}${e}`,this.div.append(t),this.#B?.moveElementInDOM(this.div,t,i,!1)}async render(t){const{annotations:e}=t,i=this.div;(0,s.setLayerDimensions)(i,this.viewport);const r=new Map,a={data:null,layer:i,linkService:t.linkService,downloadManager:t.downloadManager,imageResourcesPath:t.imageResourcesPath||"",renderForms:!1!==t.renderForms,svgFactory:new s.DOMSVGFactory,annotationStorage:t.annotationStorage||new o.AnnotationStorage,enableScripting:!0===t.enableScripting,hasJSActions:t.hasJSActions,fieldObjects:t.fieldObjects,parent:this,elements:null};for(const t of e){if(t.noHTML)continue;const e=t.annotationType===n.AnnotationType.POPUP;if(e){const e=r.get(t.id);if(!e)continue;a.elements=e}else{const{width:e,height:i}=u(t.rect);if(e<=0||i<=0)continue}a.data=t;const i=p.create(a);if(!i.isRenderable)continue;if(!e&&t.popupRef){const e=r.get(t.popupRef);e?e.push(i):r.set(t.popupRef,[i])}i.annotationEditorType>0&&this.#R.set(i.data.id,i);const s=i.render();t.hidden&&(s.style.visibility="hidden"),this.#D(s,t.id)}this.#O()}update({viewport:t}){const e=this.div;this.viewport=t,(0,s.setLayerDimensions)(e,{rotation:t.rotation}),this.#O(),e.hidden=!1}#O(){if(!this.#P)return;const t=this.div;for(const[e,i]of this.#P){const n=t.querySelector(`[data-annotation-id="${e}"]`);if(!n)continue;const{firstChild:s}=n;s?"CANVAS"===s.nodeName?s.replaceWith(i):s.before(i):n.append(i)}this.#P.clear()}getEditableAnnotations(){return Array.from(this.#R.values())}getEditableAnnotation(t){return this.#R.get(t)}}},780:(t,e,i)=>{i.d(e,{AnnotationStorage:()=>a,PrintAnnotationStorage:()=>l,SerializableEmpty:()=>r});var n=i(266),s=i(115),o=i(825);const r=Object.freeze({map:null,hash:"",transfer:void 0});class a{#F=!1;#N=new Map;constructor(){this.onSetModified=null,this.onResetModified=null,this.onAnnotationEditor=null}getValue(t,e){const i=this.#N.get(t);return void 0===i?e:Object.assign(e,i)}getRawValue(t){return this.#N.get(t)}remove(t){if(this.#N.delete(t),0===this.#N.size&&this.resetModified(),"function"==typeof this.onAnnotationEditor){for(const t of this.#N.values())if(t instanceof s.AnnotationEditor)return;this.onAnnotationEditor(null)}}setValue(t,e){const i=this.#N.get(t);let n=!1;if(void 0!==i)for(const[t,s]of Object.entries(e))i[t]!==s&&(n=!0,i[t]=s);else n=!0,this.#N.set(t,e);n&&this.#H(),e instanceof s.AnnotationEditor&&"function"==typeof this.onAnnotationEditor&&this.onAnnotationEditor(e.constructor._type)}has(t){return this.#N.has(t)}getAll(){return this.#N.size>0?(0,n.objectFromMap)(this.#N):null}setAll(t){for(const[e,i]of Object.entries(t))this.setValue(e,i)}get size(){return this.#N.size}#H(){this.#F||(this.#F=!0,"function"==typeof this.onSetModified&&this.onSetModified())}resetModified(){this.#F&&(this.#F=!1,"function"==typeof this.onResetModified&&this.onResetModified())}get print(){return new l(this)}get serializable(){if(0===this.#N.size)return r;const t=new Map,e=new o.MurmurHash3_64,i=[],n=Object.create(null);let a=!1;for(const[i,o]of this.#N){const r=o instanceof s.AnnotationEditor?o.serialize(!1,n):o;r&&(t.set(i,r),e.update(`${i}:${JSON.stringify(r)}`),a||=!!r.bitmap)}if(a)for(const e of t.values())e.bitmap&&i.push(e.bitmap);return t.size>0?{map:t,hash:e.hexdigest(),transfer:i}:r}}class l extends a{#j;constructor(t){super();const{map:e,hash:i,transfer:n}=t.serializable,s=structuredClone(e,n?{transfer:n}:null);this.#j={map:s,hash:i,transfer:n}}get print(){(0,n.unreachable)("Should not call PrintAnnotationStorage.print")}get serializable(){return this.#j}}},406:(t,e,i)=>{i.a(t,(async(t,n)=>{try{i.d(e,{PDFDataRangeTransport:()=>B,PDFWorker:()=>F,build:()=>q,getDocument:()=>_,version:()=>z});var s=i(266),o=i(780),r=i(473),a=i(742),l=i(738),c=i(250),d=i(368),h=i(694),u=i(472),p=i(890),g=i(92),f=i(171),m=i(474),b=i(498),v=i(521),y=t([l,b]);[l,b]=y.then?(await y)():y;const w=65536,k=100,x=5e3,E=s.isNodeJS?l.NodeCanvasFactory:r.DOMCanvasFactory,C=s.isNodeJS?l.NodeCMapReaderFactory:r.DOMCMapReaderFactory,A=s.isNodeJS?l.NodeFilterFactory:r.DOMFilterFactory,S=s.isNodeJS?l.NodeStandardFontDataFactory:r.DOMStandardFontDataFactory;function _(t){if("string"==typeof t||t instanceof URL?t={url:t}:(0,s.isArrayBuffer)(t)&&(t={data:t}),"object"!=typeof t)throw new Error("Invalid parameter in getDocument, need parameter object.");if(!t.url&&!t.data&&!t.range)throw new Error("Invalid parameter object: need either .data, .range or .url");const e=new L,{docId:i}=e,n=t.url?M(t.url):null,o=t.data?I(t.data):null,a=t.httpHeaders||null,l=!0===t.withCredentials,c=t.password??null,u=t.range instanceof B?t.range:null,p=Number.isInteger(t.rangeChunkSize)&&t.rangeChunkSize>0?t.rangeChunkSize:w;let v=t.worker instanceof F?t.worker:null;const y=t.verbosity,k="string"!=typeof t.docBaseUrl||(0,r.isDataScheme)(t.docBaseUrl)?null:t.docBaseUrl,x="string"==typeof t.cMapUrl?t.cMapUrl:null,_=!1!==t.cMapPacked,P=t.CMapReaderFactory||C,R="string"==typeof t.standardFontDataUrl?t.standardFontDataUrl:null,D=t.StandardFontDataFactory||S,O=!0!==t.stopAtErrors,H=Number.isInteger(t.maxImageSize)&&t.maxImageSize>-1?t.maxImageSize:-1,j=!1!==t.isEvalSupported,U="boolean"==typeof t.isOffscreenCanvasSupported?t.isOffscreenCanvasSupported:!s.isNodeJS,z=Number.isInteger(t.canvasMaxAreaInBytes)?t.canvasMaxAreaInBytes:-1,q="boolean"==typeof t.disableFontFace?t.disableFontFace:s.isNodeJS,$=!0===t.fontExtraProperties,V=!0===t.enableXfa,W=t.ownerDocument||globalThis.document,G=!0===t.disableRange,K=!0===t.disableStream,X=!0===t.disableAutoFetch,Y=!0===t.pdfBug,J=u?u.length:t.length??NaN,Q="boolean"==typeof t.useSystemFonts?t.useSystemFonts:!s.isNodeJS&&!q,Z="boolean"==typeof t.useWorkerFetch?t.useWorkerFetch:P===r.DOMCMapReaderFactory&&D===r.DOMStandardFontDataFactory&&x&&R&&(0,r.isValidFetchUrl)(x,document.baseURI)&&(0,r.isValidFetchUrl)(R,document.baseURI),tt=t.canvasFactory||new E({ownerDocument:W}),et=t.filterFactory||new A({docId:i,ownerDocument:W});(0,s.setVerbosityLevel)(y);const it={canvasFactory:tt,filterFactory:et};if(Z||(it.cMapReaderFactory=new P({baseUrl:x,isCompressed:_}),it.standardFontDataFactory=new D({baseUrl:R})),!v){const t={verbosity:y,port:d.GlobalWorkerOptions.workerPort};v=t.port?F.fromPort(t):new F(t),e._worker=v}const nt={docId:i,apiVersion:"4.0.379",data:o,password:c,disableAutoFetch:X,rangeChunkSize:p,length:J,docBaseUrl:k,enableXfa:V,evaluatorOptions:{maxImageSize:H,disableFontFace:q,ignoreErrors:O,isEvalSupported:j,isOffscreenCanvasSupported:U,canvasMaxAreaInBytes:z,fontExtraProperties:$,useSystemFonts:Q,cMapUrl:Z?x:null,standardFontDataUrl:Z?R:null}},st={ignoreErrors:O,isEvalSupported:j,disableFontFace:q,fontExtraProperties:$,enableXfa:V,ownerDocument:W,disableAutoFetch:X,pdfBug:Y,styleElement:null};return v.promise.then((function(){if(e.destroyed)throw new Error("Loading aborted");const t=T(v,nt),c=new Promise((function(t){let e;var i;u?e=new g.PDFDataTransportStream({length:J,initialData:u.initialData,progressiveDone:u.progressiveDone,contentDispositionFilename:u.contentDispositionFilename,disableRange:G,disableStream:K},u):o||(i={url:n,length:J,httpHeaders:a,withCredentials:l,rangeChunkSize:p,disableRange:G,disableStream:K},e=s.isNodeJS?new b.PDFNodeStream(i):(0,r.isValidFetchUrl)(i.url)?new f.PDFFetchStream(i):new m.PDFNetworkStream(i)),t(e)}));return Promise.all([t,c]).then((function([t,n]){if(e.destroyed)throw new Error("Loading aborted");const s=new h.MessageHandler(i,t,v.port),o=new N(s,e,n,st,it);e._transport=o,s.send("Ready",null)}))})).catch(e._capability.reject),e}async function T(t,e){if(t.destroyed)throw new Error("Worker was destroyed");const i=await t.messageHandler.sendWithPromise("GetDocRequest",e,e.data?[e.data.buffer]:null);if(t.destroyed)throw new Error("Worker was destroyed");return i}function M(t){if(t instanceof URL)return t.href;try{return new URL(t,window.location).href}catch{if(s.isNodeJS&&"string"==typeof t)return t}throw new Error("Invalid PDF url data: either string or URL-object is expected in the url property.")}function I(t){if(s.isNodeJS&&"undefined"!=typeof Buffer&&t instanceof Buffer)throw new Error("Please provide binary data as `Uint8Array`, rather than `Buffer`.");if(t instanceof Uint8Array&&t.byteLength===t.buffer.byteLength)return t;if("string"==typeof t)return(0,s.stringToBytes)(t);if("object"==typeof t&&!isNaN(t?.length)||(0,s.isArrayBuffer)(t))return new Uint8Array(t);throw new Error("Invalid PDF binary data: either TypedArray, string, or array-like object is expected in the data property.")}class L{static#U=0;constructor(){this._capability=new s.PromiseCapability,this._transport=null,this._worker=null,this.docId="d"+L.#U++,this.destroyed=!1,this.onPassword=null,this.onProgress=null}get promise(){return this._capability.promise}async destroy(){this.destroyed=!0;try{this._worker?.port&&(this._worker._pendingDestroy=!0),await(this._transport?.destroy())}catch(t){throw this._worker?.port&&delete this._worker._pendingDestroy,t}this._transport=null,this._worker&&(this._worker.destroy(),this._worker=null)}}class B{constructor(t,e,i=!1,n=null){this.length=t,this.initialData=e,this.progressiveDone=i,this.contentDispositionFilename=n,this._rangeListeners=[],this._progressListeners=[],this._progressiveReadListeners=[],this._progressiveDoneListeners=[],this._readyCapability=new s.PromiseCapability}addRangeListener(t){this._rangeListeners.push(t)}addProgressListener(t){this._progressListeners.push(t)}addProgressiveReadListener(t){this._progressiveReadListeners.push(t)}addProgressiveDoneListener(t){this._progressiveDoneListeners.push(t)}onDataRange(t,e){for(const i of this._rangeListeners)i(t,e)}onDataProgress(t,e){this._readyCapability.promise.then((()=>{for(const i of this._progressListeners)i(t,e)}))}onDataProgressiveRead(t){this._readyCapability.promise.then((()=>{for(const e of this._progressiveReadListeners)e(t)}))}onDataProgressiveDone(){this._readyCapability.promise.then((()=>{for(const t of this._progressiveDoneListeners)t()}))}transportReady(){this._readyCapability.resolve()}requestDataRange(t,e){(0,s.unreachable)("Abstract method PDFDataRangeTransport.requestDataRange")}abort(){}}class P{constructor(t,e){this._pdfInfo=t,this._transport=e}get annotationStorage(){return this._transport.annotationStorage}get filterFactory(){return this._transport.filterFactory}get numPages(){return this._pdfInfo.numPages}get fingerprints(){return this._pdfInfo.fingerprints}get isPureXfa(){return(0,s.shadow)(this,"isPureXfa",!!this._transport._htmlForXfa)}get allXfaHtml(){return this._transport._htmlForXfa}getPage(t){return this._transport.getPage(t)}getPageIndex(t){return this._transport.getPageIndex(t)}getDestinations(){return this._transport.getDestinations()}getDestination(t){return this._transport.getDestination(t)}getPageLabels(){return this._transport.getPageLabels()}getPageLayout(){return this._transport.getPageLayout()}getPageMode(){return this._transport.getPageMode()}getViewerPreferences(){return this._transport.getViewerPreferences()}getOpenAction(){return this._transport.getOpenAction()}getAttachments(){return this._transport.getAttachments()}getJSActions(){return this._transport.getDocJSActions()}getOutline(){return this._transport.getOutline()}getOptionalContentConfig(){return this._transport.getOptionalContentConfig()}getPermissions(){return this._transport.getPermissions()}getMetadata(){return this._transport.getMetadata()}getMarkInfo(){return this._transport.getMarkInfo()}getData(){return this._transport.getData()}saveDocument(){return this._transport.saveDocument()}getDownloadInfo(){return this._transport.downloadInfoCapability.promise}cleanup(t=!1){return this._transport.startCleanup(t||this.isPureXfa)}destroy(){return this.loadingTask.destroy()}get loadingParams(){return this._transport.loadingParams}get loadingTask(){return this._transport.loadingTask}getFieldObjects(){return this._transport.getFieldObjects()}hasJSActions(){return this._transport.hasJSActions()}getCalculationOrderIds(){return this._transport.getCalculationOrderIds()}}class R{#z=null;#q=!1;constructor(t,e,i,n=!1){this._pageIndex=t,this._pageInfo=e,this._transport=i,this._stats=n?new r.StatTimer:null,this._pdfBug=n,this.commonObjs=i.commonObjs,this.objs=new H,this._maybeCleanupAfterRender=!1,this._intentStates=new Map,this.destroyed=!1}get pageNumber(){return this._pageIndex+1}get rotate(){return this._pageInfo.rotate}get ref(){return this._pageInfo.ref}get userUnit(){return this._pageInfo.userUnit}get view(){return this._pageInfo.view}getViewport({scale:t,rotation:e=this.rotate,offsetX:i=0,offsetY:n=0,dontFlip:s=!1}={}){return new r.PageViewport({viewBox:this.view,scale:t,rotation:e,offsetX:i,offsetY:n,dontFlip:s})}getAnnotations({intent:t="display"}={}){const e=this._transport.getRenderingIntent(t);return this._transport.getAnnotations(this._pageIndex,e.renderingIntent)}getJSActions(){return this._transport.getPageJSActions(this._pageIndex)}get filterFactory(){return this._transport.filterFactory}get isPureXfa(){return(0,s.shadow)(this,"isPureXfa",!!this._transport._htmlForXfa)}async getXfa(){return this._transport._htmlForXfa?.children[this._pageIndex]||null}render({canvasContext:t,viewport:e,intent:i="display",annotationMode:n=s.AnnotationMode.ENABLE,transform:o=null,background:r=null,optionalContentConfigPromise:a=null,annotationCanvasMap:l=null,pageColors:c=null,printAnnotationStorage:d=null}){this._stats?.time("Overall");const h=this._transport.getRenderingIntent(i,n,d);this.#q=!1,this.#$(),a||(a=this._transport.getOptionalContentConfig());let u=this._intentStates.get(h.cacheKey);u||(u=Object.create(null),this._intentStates.set(h.cacheKey,u)),u.streamReaderCancelTimeout&&(clearTimeout(u.streamReaderCancelTimeout),u.streamReaderCancelTimeout=null);const p=!!(h.renderingIntent&s.RenderingIntentFlag.PRINT);u.displayReadyCapability||(u.displayReadyCapability=new s.PromiseCapability,u.operatorList={fnArray:[],argsArray:[],lastChunk:!1,separateAnnots:null},this._stats?.time("Page Request"),this._pumpOperatorList(h));const g=t=>{u.renderTasks.delete(f),(this._maybeCleanupAfterRender||p)&&(this.#q=!0),this.#V(!p),t?(f.capability.reject(t),this._abortOperatorList({intentState:u,reason:t instanceof Error?t:new Error(t)})):f.capability.resolve(),this._stats?.timeEnd("Rendering"),this._stats?.timeEnd("Overall")},f=new U({callback:g,params:{canvasContext:t,viewport:e,transform:o,background:r},objs:this.objs,commonObjs:this.commonObjs,annotationCanvasMap:l,operatorList:u.operatorList,pageIndex:this._pageIndex,canvasFactory:this._transport.canvasFactory,filterFactory:this._transport.filterFactory,useRequestAnimationFrame:!p,pdfBug:this._pdfBug,pageColors:c});(u.renderTasks||=new Set).add(f);const m=f.task;return Promise.all([u.displayReadyCapability.promise,a]).then((([t,e])=>{this.destroyed?g():(this._stats?.time("Rendering"),f.initializeGraphics({transparency:t,optionalContentConfig:e}),f.operatorListChanged())})).catch(g),m}getOperatorList({intent:t="display",annotationMode:e=s.AnnotationMode.ENABLE,printAnnotationStorage:i=null}={}){const n=this._transport.getRenderingIntent(t,e,i,!0);let o,r=this._intentStates.get(n.cacheKey);return r||(r=Object.create(null),this._intentStates.set(n.cacheKey,r)),r.opListReadCapability||(o=Object.create(null),o.operatorListChanged=function(){r.operatorList.lastChunk&&(r.opListReadCapability.resolve(r.operatorList),r.renderTasks.delete(o))},r.opListReadCapability=new s.PromiseCapability,(r.renderTasks||=new Set).add(o),r.operatorList={fnArray:[],argsArray:[],lastChunk:!1,separateAnnots:null},this._stats?.time("Page Request"),this._pumpOperatorList(n)),r.opListReadCapability.promise}streamTextContent({includeMarkedContent:t=!1,disableNormalization:e=!1}={}){return this._transport.messageHandler.sendWithStream("GetTextContent",{pageIndex:this._pageIndex,includeMarkedContent:!0===t,disableNormalization:!0===e},{highWaterMark:100,size:t=>t.items.length})}getTextContent(t={}){if(this._transport._htmlForXfa)return this.getXfa().then((t=>v.XfaText.textContent(t)));const e=this.streamTextContent(t);return new Promise((function(t,i){const n=e.getReader(),s={items:[],styles:Object.create(null)};!function e(){n.read().then((function({value:i,done:n}){n?t(s):(Object.assign(s.styles,i.styles),s.items.push(...i.items),e())}),i)}()}))}getStructTree(){return this._transport.getStructTree(this._pageIndex)}_destroy(){this.destroyed=!0;const t=[];for(const e of this._intentStates.values())if(this._abortOperatorList({intentState:e,reason:new Error("Page was destroyed."),force:!0}),!e.opListReadCapability)for(const i of e.renderTasks)t.push(i.completed),i.cancel();return this.objs.clear(),this.#q=!1,this.#$(),Promise.all(t)}cleanup(t=!1){this.#q=!0;const e=this.#V(!1);return t&&e&&(this._stats&&=new r.StatTimer),e}#V(t=!1){if(this.#$(),!this.#q||this.destroyed)return!1;if(t)return this.#z=setTimeout((()=>{this.#z=null,this.#V(!1)}),x),!1;for(const{renderTasks:t,operatorList:e}of this._intentStates.values())if(t.size>0||!e.lastChunk)return!1;return this._intentStates.clear(),this.objs.clear(),this.#q=!1,!0}#$(){this.#z&&(clearTimeout(this.#z),this.#z=null)}_startRenderPage(t,e){const i=this._intentStates.get(e);i&&(this._stats?.timeEnd("Page Request"),i.displayReadyCapability?.resolve(t))}_renderPageChunk(t,e){for(let i=0,n=t.length;i<n;i++)e.operatorList.fnArray.push(t.fnArray[i]),e.operatorList.argsArray.push(t.argsArray[i]);e.operatorList.lastChunk=t.lastChunk,e.operatorList.separateAnnots=t.separateAnnots;for(const t of e.renderTasks)t.operatorListChanged();t.lastChunk&&this.#V(!0)}_pumpOperatorList({renderingIntent:t,cacheKey:e,annotationStorageSerializable:i}){const{map:n,transfer:s}=i,o=this._transport.messageHandler.sendWithStream("GetOperatorList",{pageIndex:this._pageIndex,intent:t,cacheKey:e,annotationStorage:n},s).getReader(),r=this._intentStates.get(e);r.streamReader=o;const a=()=>{o.read().then((({value:t,done:e})=>{e?r.streamReader=null:this._transport.destroyed||(this._renderPageChunk(t,r),a())}),(t=>{if(r.streamReader=null,!this._transport.destroyed){if(r.operatorList){r.operatorList.lastChunk=!0;for(const t of r.renderTasks)t.operatorListChanged();this.#V(!0)}if(r.displayReadyCapability)r.displayReadyCapability.reject(t);else{if(!r.opListReadCapability)throw t;r.opListReadCapability.reject(t)}}}))};a()}_abortOperatorList({intentState:t,reason:e,force:i=!1}){if(t.streamReader){if(t.streamReaderCancelTimeout&&(clearTimeout(t.streamReaderCancelTimeout),t.streamReaderCancelTimeout=null),!i){if(t.renderTasks.size>0)return;if(e instanceof r.RenderingCancelledException){let i=k;return e.extraDelay>0&&e.extraDelay<1e3&&(i+=e.extraDelay),void(t.streamReaderCancelTimeout=setTimeout((()=>{t.streamReaderCancelTimeout=null,this._abortOperatorList({intentState:t,reason:e,force:!0})}),i))}}if(t.streamReader.cancel(new s.AbortException(e.message)).catch((()=>{})),t.streamReader=null,!this._transport.destroyed){for(const[e,i]of this._intentStates)if(i===t){this._intentStates.delete(e);break}this.cleanup()}}}get stats(){return this._stats}}class D{#W=new Set;#G=Promise.resolve();postMessage(t,e){const i={data:structuredClone(t,e?{transfer:e}:null)};this.#G.then((()=>{for(const t of this.#W)t.call(this,i)}))}addEventListener(t,e){this.#W.add(e)}removeEventListener(t,e){this.#W.delete(e)}terminate(){this.#W.clear()}}const O={isWorkerDisabled:!1,fakeWorkerId:0};s.isNodeJS&&(O.isWorkerDisabled=!0,d.GlobalWorkerOptions.workerSrc||="./pdf.worker.mjs"),O.isSameOrigin=function(t,e){let i;try{if(i=new URL(t),!i.origin||"null"===i.origin)return!1}catch{return!1}const n=new URL(e,i);return i.origin===n.origin},O.createCDNWrapper=function(t){const e=`await import("${t}");`;return URL.createObjectURL(new Blob([e],{type:"text/javascript"}))};class F{static#K;constructor({name:t=null,port:e=null,verbosity:i=(0,s.getVerbosityLevel)()}={}){if(this.name=t,this.destroyed=!1,this.verbosity=i,this._readyCapability=new s.PromiseCapability,this._port=null,this._webWorker=null,this._messageHandler=null,e){if(F.#K?.has(e))throw new Error("Cannot use more than one PDFWorker per port.");return(F.#K||=new WeakMap).set(e,this),void this._initializeFromPort(e)}this._initialize()}get promise(){return this._readyCapability.promise}get port(){return this._port}get messageHandler(){return this._messageHandler}_initializeFromPort(t){this._port=t,this._messageHandler=new h.MessageHandler("main","worker",t),this._messageHandler.on("ready",(function(){})),this._readyCapability.resolve(),this._messageHandler.send("configure",{verbosity:this.verbosity})}_initialize(){if(!O.isWorkerDisabled&&!F.#X){let{workerSrc:t}=F;try{O.isSameOrigin(window.location.href,t)||(t=O.createCDNWrapper(new URL(t,window.location).href));const e=new Worker(t,{type:"module"}),i=new h.MessageHandler("main","worker",e),n=()=>{e.removeEventListener("error",s),i.destroy(),e.terminate(),this.destroyed?this._readyCapability.reject(new Error("Worker was destroyed")):this._setupFakeWorker()},s=()=>{this._webWorker||n()};e.addEventListener("error",s),i.on("test",(t=>{e.removeEventListener("error",s),this.destroyed?n():t?(this._messageHandler=i,this._port=e,this._webWorker=e,this._readyCapability.resolve(),i.send("configure",{verbosity:this.verbosity})):(this._setupFakeWorker(),i.destroy(),e.terminate())})),i.on("ready",(t=>{if(e.removeEventListener("error",s),this.destroyed)n();else try{o()}catch{this._setupFakeWorker()}}));const o=()=>{const t=new Uint8Array;i.send("test",t,[t.buffer])};return void o()}catch{(0,s.info)("The worker has been disabled.")}}this._setupFakeWorker()}_setupFakeWorker(){O.isWorkerDisabled||((0,s.warn)("Setting up fake worker."),O.isWorkerDisabled=!0),F._setupFakeWorkerGlobal.then((t=>{if(this.destroyed)return void this._readyCapability.reject(new Error("Worker was destroyed"));const e=new D;this._port=e;const i="fake"+O.fakeWorkerId++,n=new h.MessageHandler(i+"_worker",i,e);t.setup(n,e);const s=new h.MessageHandler(i,i+"_worker",e);this._messageHandler=s,this._readyCapability.resolve(),s.send("configure",{verbosity:this.verbosity})})).catch((t=>{this._readyCapability.reject(new Error(`Setting up fake worker failed: "${t.message}".`))}))}destroy(){this.destroyed=!0,this._webWorker&&(this._webWorker.terminate(),this._webWorker=null),F.#K?.delete(this._port),this._port=null,this._messageHandler&&(this._messageHandler.destroy(),this._messageHandler=null)}static fromPort(t){if(!t?.port)throw new Error("PDFWorker.fromPort - invalid method signature.");const e=this.#K?.get(t.port);if(e){if(e._pendingDestroy)throw new Error("PDFWorker.fromPort - the worker is being destroyed.\nPlease remember to await `PDFDocumentLoadingTask.destroy()`-calls.");return e}return new F(t)}static get workerSrc(){if(d.GlobalWorkerOptions.workerSrc)return d.GlobalWorkerOptions.workerSrc;throw new Error('No "GlobalWorkerOptions.workerSrc" specified.')}static get#X(){try{return globalThis.pdfjsWorker?.WorkerMessageHandler||null}catch{return null}}static get _setupFakeWorkerGlobal(){return(0,s.shadow)(this,"_setupFakeWorkerGlobal",(async()=>this.#X?this.#X:(await import(this.workerSrc)).WorkerMessageHandler)())}}class N{#Y=new Map;#J=new Map;#Q=new Map;#Z=null;constructor(t,e,i,n,o){this.messageHandler=t,this.loadingTask=e,this.commonObjs=new H,this.fontLoader=new a.FontLoader({ownerDocument:n.ownerDocument,styleElement:n.styleElement}),this._params=n,this.canvasFactory=o.canvasFactory,this.filterFactory=o.filterFactory,this.cMapReaderFactory=o.cMapReaderFactory,this.standardFontDataFactory=o.standardFontDataFactory,this.destroyed=!1,this.destroyCapability=null,this._networkStream=i,this._fullReader=null,this._lastProgress=null,this.downloadInfoCapability=new s.PromiseCapability,this.setupMessageHandler()}#tt(t,e=null){const i=this.#Y.get(t);if(i)return i;const n=this.messageHandler.sendWithPromise(t,e);return this.#Y.set(t,n),n}get annotationStorage(){return(0,s.shadow)(this,"annotationStorage",new o.AnnotationStorage)}getRenderingIntent(t,e=s.AnnotationMode.ENABLE,i=null,n=!1){let r=s.RenderingIntentFlag.DISPLAY,a=o.SerializableEmpty;switch(t){case"any":r=s.RenderingIntentFlag.ANY;break;case"display":break;case"print":r=s.RenderingIntentFlag.PRINT;break;default:(0,s.warn)(`getRenderingIntent - invalid intent: ${t}`)}switch(e){case s.AnnotationMode.DISABLE:r+=s.RenderingIntentFlag.ANNOTATIONS_DISABLE;break;case s.AnnotationMode.ENABLE:break;case s.AnnotationMode.ENABLE_FORMS:r+=s.RenderingIntentFlag.ANNOTATIONS_FORMS;break;case s.AnnotationMode.ENABLE_STORAGE:r+=s.RenderingIntentFlag.ANNOTATIONS_STORAGE,a=(r&s.RenderingIntentFlag.PRINT&&i instanceof o.PrintAnnotationStorage?i:this.annotationStorage).serializable;break;default:(0,s.warn)(`getRenderingIntent - invalid annotationMode: ${e}`)}return n&&(r+=s.RenderingIntentFlag.OPLIST),{renderingIntent:r,cacheKey:`${r}_${a.hash}`,annotationStorageSerializable:a}}destroy(){if(this.destroyCapability)return this.destroyCapability.promise;this.destroyed=!0,this.destroyCapability=new s.PromiseCapability,this.#Z?.reject(new Error("Worker was destroyed during onPassword callback"));const t=[];for(const e of this.#J.values())t.push(e._destroy());this.#J.clear(),this.#Q.clear(),this.hasOwnProperty("annotationStorage")&&this.annotationStorage.resetModified();const e=this.messageHandler.sendWithPromise("Terminate",null);return t.push(e),Promise.all(t).then((()=>{this.commonObjs.clear(),this.fontLoader.clear(),this.#Y.clear(),this.filterFactory.destroy(),this._networkStream?.cancelAllRequests(new s.AbortException("Worker was terminated.")),this.messageHandler&&(this.messageHandler.destroy(),this.messageHandler=null),this.destroyCapability.resolve()}),this.destroyCapability.reject),this.destroyCapability.promise}setupMessageHandler(){const{messageHandler:t,loadingTask:e}=this;t.on("GetReader",((t,e)=>{(0,s.assert)(this._networkStream,"GetReader - no `IPDFStream` instance available."),this._fullReader=this._networkStream.getFullReader(),this._fullReader.onProgress=t=>{this._lastProgress={loaded:t.loaded,total:t.total}},e.onPull=()=>{this._fullReader.read().then((function({value:t,done:i}){i?e.close():((0,s.assert)(t instanceof ArrayBuffer,"GetReader - expected an ArrayBuffer."),e.enqueue(new Uint8Array(t),1,[t]))})).catch((t=>{e.error(t)}))},e.onCancel=t=>{this._fullReader.cancel(t),e.ready.catch((t=>{if(!this.destroyed)throw t}))}})),t.on("ReaderHeadersReady",(t=>{const i=new s.PromiseCapability,n=this._fullReader;return n.headersReady.then((()=>{n.isStreamingSupported&&n.isRangeSupported||(this._lastProgress&&e.onProgress?.(this._lastProgress),n.onProgress=t=>{e.onProgress?.({loaded:t.loaded,total:t.total})}),i.resolve({isStreamingSupported:n.isStreamingSupported,isRangeSupported:n.isRangeSupported,contentLength:n.contentLength})}),i.reject),i.promise})),t.on("GetRangeReader",((t,e)=>{(0,s.assert)(this._networkStream,"GetRangeReader - no `IPDFStream` instance available.");const i=this._networkStream.getRangeReader(t.begin,t.end);i?(e.onPull=()=>{i.read().then((function({value:t,done:i}){i?e.close():((0,s.assert)(t instanceof ArrayBuffer,"GetRangeReader - expected an ArrayBuffer."),e.enqueue(new Uint8Array(t),1,[t]))})).catch((t=>{e.error(t)}))},e.onCancel=t=>{i.cancel(t),e.ready.catch((t=>{if(!this.destroyed)throw t}))}):e.close()})),t.on("GetDoc",(({pdfInfo:t})=>{this._numPages=t.numPages,this._htmlForXfa=t.htmlForXfa,delete t.htmlForXfa,e._capability.resolve(new P(t,this))})),t.on("DocException",(function(t){let i;switch(t.name){case"PasswordException":i=new s.PasswordException(t.message,t.code);break;case"InvalidPDFException":i=new s.InvalidPDFException(t.message);break;case"MissingPDFException":i=new s.MissingPDFException(t.message);break;case"UnexpectedResponseException":i=new s.UnexpectedResponseException(t.message,t.status);break;case"UnknownErrorException":i=new s.UnknownErrorException(t.message,t.details);break;default:(0,s.unreachable)("DocException - expected a valid Error.")}e._capability.reject(i)})),t.on("PasswordRequest",(t=>{if(this.#Z=new s.PromiseCapability,e.onPassword){const i=t=>{t instanceof Error?this.#Z.reject(t):this.#Z.resolve({password:t})};try{e.onPassword(i,t.code)}catch(t){this.#Z.reject(t)}}else this.#Z.reject(new s.PasswordException(t.message,t.code));return this.#Z.promise})),t.on("DataLoaded",(t=>{e.onProgress?.({loaded:t.length,total:t.length}),this.downloadInfoCapability.resolve(t)})),t.on("StartRenderPage",(t=>{this.destroyed||this.#J.get(t.pageIndex)._startRenderPage(t.transparency,t.cacheKey)})),t.on("commonobj",(([e,i,n])=>{if(this.destroyed)return null;if(this.commonObjs.has(e))return null;switch(i){case"Font":const o=this._params;if("error"in n){const t=n.error;(0,s.warn)(`Error during font loading: ${t}`),this.commonObjs.resolve(e,t);break}const r=o.pdfBug&&globalThis.FontInspector?.enabled?(t,e)=>globalThis.FontInspector.fontAdded(t,e):null,l=new a.FontFaceObject(n,{isEvalSupported:o.isEvalSupported,disableFontFace:o.disableFontFace,ignoreErrors:o.ignoreErrors,inspectFont:r});this.fontLoader.bind(l).catch((i=>t.sendWithPromise("FontFallback",{id:e}))).finally((()=>{!o.fontExtraProperties&&l.data&&(l.data=null),this.commonObjs.resolve(e,l)}));break;case"CopyLocalImage":const{imageRef:c}=n;(0,s.assert)(c,"The imageRef must be defined.");for(const t of this.#J.values())for(const[,i]of t.objs)if(i.ref===c)return i.dataLen?(this.commonObjs.resolve(e,structuredClone(i)),i.dataLen):null;break;case"FontPath":case"Image":case"Pattern":this.commonObjs.resolve(e,n);break;default:throw new Error(`Got unknown common object type ${i}`)}return null})),t.on("obj",(([t,e,i,n])=>{if(this.destroyed)return;const o=this.#J.get(e);if(!o.objs.has(t))if(0!==o._intentStates.size)switch(i){case"Image":o.objs.resolve(t,n),n?.dataLen>s.MAX_IMAGE_SIZE_TO_CACHE&&(o._maybeCleanupAfterRender=!0);break;case"Pattern":o.objs.resolve(t,n);break;default:throw new Error(`Got unknown object type ${i}`)}else n?.bitmap?.close()})),t.on("DocProgress",(t=>{this.destroyed||e.onProgress?.({loaded:t.loaded,total:t.total})})),t.on("FetchBuiltInCMap",(t=>this.destroyed?Promise.reject(new Error("Worker was destroyed.")):this.cMapReaderFactory?this.cMapReaderFactory.fetch(t):Promise.reject(new Error("CMapReaderFactory not initialized, see the `useWorkerFetch` parameter.")))),t.on("FetchStandardFontData",(t=>this.destroyed?Promise.reject(new Error("Worker was destroyed.")):this.standardFontDataFactory?this.standardFontDataFactory.fetch(t):Promise.reject(new Error("StandardFontDataFactory not initialized, see the `useWorkerFetch` parameter."))))}getData(){return this.messageHandler.sendWithPromise("GetData",null)}saveDocument(){this.annotationStorage.size<=0&&(0,s.warn)("saveDocument called while `annotationStorage` is empty, please use the getData-method instead.");const{map:t,transfer:e}=this.annotationStorage.serializable;return this.messageHandler.sendWithPromise("SaveDocument",{isPureXfa:!!this._htmlForXfa,numPages:this._numPages,annotationStorage:t,filename:this._fullReader?.filename??null},e).finally((()=>{this.annotationStorage.resetModified()}))}getPage(t){if(!Number.isInteger(t)||t<=0||t>this._numPages)return Promise.reject(new Error("Invalid page request."));const e=t-1,i=this.#Q.get(e);if(i)return i;const n=this.messageHandler.sendWithPromise("GetPage",{pageIndex:e}).then((t=>{if(this.destroyed)throw new Error("Transport destroyed");const i=new R(e,t,this,this._params.pdfBug);return this.#J.set(e,i),i}));return this.#Q.set(e,n),n}getPageIndex(t){return"object"!=typeof t||null===t||!Number.isInteger(t.num)||t.num<0||!Number.isInteger(t.gen)||t.gen<0?Promise.reject(new Error("Invalid pageIndex request.")):this.messageHandler.sendWithPromise("GetPageIndex",{num:t.num,gen:t.gen})}getAnnotations(t,e){return this.messageHandler.sendWithPromise("GetAnnotations",{pageIndex:t,intent:e})}getFieldObjects(){return this.#tt("GetFieldObjects")}hasJSActions(){return this.#tt("HasJSActions")}getCalculationOrderIds(){return this.messageHandler.sendWithPromise("GetCalculationOrderIds",null)}getDestinations(){return this.messageHandler.sendWithPromise("GetDestinations",null)}getDestination(t){return"string"!=typeof t?Promise.reject(new Error("Invalid destination request.")):this.messageHandler.sendWithPromise("GetDestination",{id:t})}getPageLabels(){return this.messageHandler.sendWithPromise("GetPageLabels",null)}getPageLayout(){return this.messageHandler.sendWithPromise("GetPageLayout",null)}getPageMode(){return this.messageHandler.sendWithPromise("GetPageMode",null)}getViewerPreferences(){return this.messageHandler.sendWithPromise("GetViewerPreferences",null)}getOpenAction(){return this.messageHandler.sendWithPromise("GetOpenAction",null)}getAttachments(){return this.messageHandler.sendWithPromise("GetAttachments",null)}getDocJSActions(){return this.#tt("GetDocJSActions")}getPageJSActions(t){return this.messageHandler.sendWithPromise("GetPageJSActions",{pageIndex:t})}getStructTree(t){return this.messageHandler.sendWithPromise("GetStructTree",{pageIndex:t})}getOutline(){return this.messageHandler.sendWithPromise("GetOutline",null)}getOptionalContentConfig(){return this.messageHandler.sendWithPromise("GetOptionalContentConfig",null).then((t=>new p.OptionalContentConfig(t)))}getPermissions(){return this.messageHandler.sendWithPromise("GetPermissions",null)}getMetadata(){const t="GetMetadata",e=this.#Y.get(t);if(e)return e;const i=this.messageHandler.sendWithPromise(t,null).then((t=>({info:t[0],metadata:t[1]?new u.Metadata(t[1]):null,contentDispositionFilename:this._fullReader?.filename??null,contentLength:this._fullReader?.contentLength??null})));return this.#Y.set(t,i),i}getMarkInfo(){return this.messageHandler.sendWithPromise("GetMarkInfo",null)}async startCleanup(t=!1){if(!this.destroyed){await this.messageHandler.sendWithPromise("Cleanup",null);for(const t of this.#J.values())if(!t.cleanup())throw new Error(`startCleanup: Page ${t.pageNumber} is currently rendering.`);this.commonObjs.clear(),t||this.fontLoader.clear(),this.#Y.clear(),this.filterFactory.destroy(!0)}}get loadingParams(){const{disableAutoFetch:t,enableXfa:e}=this._params;return(0,s.shadow)(this,"loadingParams",{disableAutoFetch:t,enableXfa:e})}}class H{#et=Object.create(null);#it(t){return this.#et[t]||={capability:new s.PromiseCapability,data:null}}get(t,e=null){if(e){const i=this.#it(t);return i.capability.promise.then((()=>e(i.data))),null}const i=this.#et[t];if(!i?.capability.settled)throw new Error(`Requesting object that isn't resolved yet ${t}.`);return i.data}has(t){const e=this.#et[t];return e?.capability.settled??!1}resolve(t,e=null){const i=this.#it(t);i.data=e,i.capability.resolve()}clear(){for(const t in this.#et){const{data:e}=this.#et[t];e?.bitmap?.close()}this.#et=Object.create(null)}*[Symbol.iterator](){for(const t in this.#et){const{capability:e,data:i}=this.#et[t];e.settled&&(yield[t,i])}}}class j{#nt=null;constructor(t){this.#nt=t,this.onContinue=null}get promise(){return this.#nt.capability.promise}cancel(t=0){this.#nt.cancel(null,t)}get separateAnnots(){const{separateAnnots:t}=this.#nt.operatorList;if(!t)return!1;const{annotationCanvasMap:e}=this.#nt;return t.form||t.canvas&&e?.size>0}}class U{static#st=new WeakSet;constructor({callback:t,params:e,objs:i,commonObjs:n,annotationCanvasMap:o,operatorList:r,pageIndex:a,canvasFactory:l,filterFactory:c,useRequestAnimationFrame:d=!1,pdfBug:h=!1,pageColors:u=null}){this.callback=t,this.params=e,this.objs=i,this.commonObjs=n,this.annotationCanvasMap=o,this.operatorListIdx=null,this.operatorList=r,this._pageIndex=a,this.canvasFactory=l,this.filterFactory=c,this._pdfBug=h,this.pageColors=u,this.running=!1,this.graphicsReadyCallback=null,this.graphicsReady=!1,this._useRequestAnimationFrame=!0===d&&"undefined"!=typeof window,this.cancelled=!1,this.capability=new s.PromiseCapability,this.task=new j(this),this._cancelBound=this.cancel.bind(this),this._continueBound=this._continue.bind(this),this._scheduleNextBound=this._scheduleNext.bind(this),this._nextBound=this._next.bind(this),this._canvas=e.canvasContext.canvas}get completed(){return this.capability.promise.catch((function(){}))}initializeGraphics({transparency:t=!1,optionalContentConfig:e}){if(this.cancelled)return;if(this._canvas){if(U.#st.has(this._canvas))throw new Error("Cannot use the same canvas during multiple render() operations. Use different canvas or ensure previous operations were cancelled or completed.");U.#st.add(this._canvas)}this._pdfBug&&globalThis.StepperManager?.enabled&&(this.stepper=globalThis.StepperManager.create(this._pageIndex),this.stepper.init(this.operatorList),this.stepper.nextBreakPoint=this.stepper.getNextBreakPoint());const{canvasContext:i,viewport:n,transform:s,background:o}=this.params;this.gfx=new c.CanvasGraphics(i,this.commonObjs,this.objs,this.canvasFactory,this.filterFactory,{optionalContentConfig:e},this.annotationCanvasMap,this.pageColors),this.gfx.beginDrawing({transform:s,viewport:n,transparency:t,background:o}),this.operatorListIdx=0,this.graphicsReady=!0,this.graphicsReadyCallback?.()}cancel(t=null,e=0){this.running=!1,this.cancelled=!0,this.gfx?.endDrawing(),U.#st.delete(this._canvas),this.callback(t||new r.RenderingCancelledException(`Rendering cancelled, page ${this._pageIndex+1}`,e))}operatorListChanged(){this.graphicsReady?(this.stepper?.updateOperatorList(this.operatorList),this.running||this._continue()):this.graphicsReadyCallback||=this._continueBound}_continue(){this.running=!0,this.cancelled||(this.task.onContinue?this.task.onContinue(this._scheduleNextBound):this._scheduleNext())}_scheduleNext(){this._useRequestAnimationFrame?window.requestAnimationFrame((()=>{this._nextBound().catch(this._cancelBound)})):Promise.resolve().then(this._nextBound).catch(this._cancelBound)}async _next(){this.cancelled||(this.operatorListIdx=this.gfx.executeOperatorList(this.operatorList,this.operatorListIdx,this._continueBound,this.stepper),this.operatorListIdx===this.operatorList.argsArray.length&&(this.running=!1,this.operatorList.lastChunk&&(this.gfx.endDrawing(),U.#st.delete(this._canvas),this.callback())))}}const z="4.0.379",q="9e14d04fd";n()}catch($){n($)}}))},822:(t,e,i)=>{i.d(e,{BaseCMapReaderFactory:()=>r,BaseCanvasFactory:()=>o,BaseFilterFactory:()=>s,BaseSVGFactory:()=>l,BaseStandardFontDataFactory:()=>a});var n=i(266);class s{constructor(){this.constructor===s&&(0,n.unreachable)("Cannot initialize BaseFilterFactory.")}addFilter(t){return"none"}addHCMFilter(t,e){return"none"}addHighlightHCMFilter(t,e,i,n){return"none"}destroy(t=!1){}}class o{constructor(){this.constructor===o&&(0,n.unreachable)("Cannot initialize BaseCanvasFactory.")}create(t,e){if(t<=0||e<=0)throw new Error("Invalid canvas size");const i=this._createCanvas(t,e);return{canvas:i,context:i.getContext("2d")}}reset(t,e,i){if(!t.canvas)throw new Error("Canvas is not specified");if(e<=0||i<=0)throw new Error("Invalid canvas size");t.canvas.width=e,t.canvas.height=i}destroy(t){if(!t.canvas)throw new Error("Canvas is not specified");t.canvas.width=0,t.canvas.height=0,t.canvas=null,t.context=null}_createCanvas(t,e){(0,n.unreachable)("Abstract method `_createCanvas` called.")}}class r{constructor({baseUrl:t=null,isCompressed:e=!0}){this.constructor===r&&(0,n.unreachable)("Cannot initialize BaseCMapReaderFactory."),this.baseUrl=t,this.isCompressed=e}async fetch({name:t}){if(!this.baseUrl)throw new Error('The CMap "baseUrl" parameter must be specified, ensure that the "cMapUrl" and "cMapPacked" API parameters are provided.');if(!t)throw new Error("CMap name must be specified.");const e=this.baseUrl+t+(this.isCompressed?".bcmap":""),i=this.isCompressed?n.CMapCompressionType.BINARY:n.CMapCompressionType.NONE;return this._fetchData(e,i).catch((t=>{throw new Error(`Unable to load ${this.isCompressed?"binary ":""}CMap at: ${e}`)}))}_fetchData(t,e){(0,n.unreachable)("Abstract method `_fetchData` called.")}}class a{constructor({baseUrl:t=null}){this.constructor===a&&(0,n.unreachable)("Cannot initialize BaseStandardFontDataFactory."),this.baseUrl=t}async fetch({filename:t}){if(!this.baseUrl)throw new Error('The standard font "baseUrl" parameter must be specified, ensure that the "standardFontDataUrl" API parameter is provided.');if(!t)throw new Error("Font filename must be specified.");const e=`${this.baseUrl}${t}`;return this._fetchData(e).catch((t=>{throw new Error(`Unable to load font data at: ${e}`)}))}_fetchData(t){(0,n.unreachable)("Abstract method `_fetchData` called.")}}class l{constructor(){this.constructor===l&&(0,n.unreachable)("Cannot initialize BaseSVGFactory.")}create(t,e,i=!1){if(t<=0||e<=0)throw new Error("Invalid SVG dimensions");const n=this._createSVG("svg:svg");return n.setAttribute("version","1.1"),i||(n.setAttribute("width",`${t}px`),n.setAttribute("height",`${e}px`)),n.setAttribute("preserveAspectRatio","none"),n.setAttribute("viewBox",`0 0 ${t} ${e}`),n}createElement(t){if("string"!=typeof t)throw new Error("Invalid SVG element type");return this._createSVG(t)}_createSVG(t){(0,n.unreachable)("Abstract method `_createSVG` called.")}}},250:(t,e,i)=>{i.d(e,{CanvasGraphics:()=>R});var n=i(266),s=i(473);const o="Fill",r="Stroke",a="Shading";function l(t,e){if(!e)return;const i=e[2]-e[0],n=e[3]-e[1],s=new Path2D;s.rect(e[0],e[1],i,n),t.clip(s)}class c{constructor(){this.constructor===c&&(0,n.unreachable)("Cannot initialize BaseShadingPattern.")}getPattern(){(0,n.unreachable)("Abstract method `getPattern` called.")}}class d extends c{constructor(t){super(),this._type=t[1],this._bbox=t[2],this._colorStops=t[3],this._p0=t[4],this._p1=t[5],this._r0=t[6],this._r1=t[7],this.matrix=null}_createGradient(t){let e;"axial"===this._type?e=t.createLinearGradient(this._p0[0],this._p0[1],this._p1[0],this._p1[1]):"radial"===this._type&&(e=t.createRadialGradient(this._p0[0],this._p0[1],this._r0,this._p1[0],this._p1[1],this._r1));for(const t of this._colorStops)e.addColorStop(t[0],t[1]);return e}getPattern(t,e,i,a){let c;if(a===r||a===o){const o=e.current.getClippedPathBoundingBox(a,(0,s.getCurrentTransform)(t))||[0,0,0,0],r=Math.ceil(o[2]-o[0])||1,d=Math.ceil(o[3]-o[1])||1,h=e.cachedCanvases.getCanvas("pattern",r,d,!0),u=h.context;u.clearRect(0,0,u.canvas.width,u.canvas.height),u.beginPath(),u.rect(0,0,u.canvas.width,u.canvas.height),u.translate(-o[0],-o[1]),i=n.Util.transform(i,[1,0,0,1,o[0],o[1]]),u.transform(...e.baseTransform),this.matrix&&u.transform(...this.matrix),l(u,this._bbox),u.fillStyle=this._createGradient(u),u.fill(),c=t.createPattern(h.canvas,"no-repeat");const p=new DOMMatrix(i);c.setTransform(p)}else l(t,this._bbox),c=this._createGradient(t);return c}}function h(t,e,i,n,s,o,r,a){const l=e.coords,c=e.colors,d=t.data,h=4*t.width;let u;l[i+1]>l[n+1]&&(u=i,i=n,n=u,u=o,o=r,r=u),l[n+1]>l[s+1]&&(u=n,n=s,s=u,u=r,r=a,a=u),l[i+1]>l[n+1]&&(u=i,i=n,n=u,u=o,o=r,r=u);const p=(l[i]+e.offsetX)*e.scaleX,g=(l[i+1]+e.offsetY)*e.scaleY,f=(l[n]+e.offsetX)*e.scaleX,m=(l[n+1]+e.offsetY)*e.scaleY,b=(l[s]+e.offsetX)*e.scaleX,v=(l[s+1]+e.offsetY)*e.scaleY;if(g>=v)return;const y=c[o],w=c[o+1],k=c[o+2],x=c[r],E=c[r+1],C=c[r+2],A=c[a],S=c[a+1],_=c[a+2],T=Math.round(g),M=Math.round(v);let I,L,B,P,R,D,O,F;for(let t=T;t<=M;t++){if(t<m){const e=t<g?0:(g-t)/(g-m);I=p-(p-f)*e,L=y-(y-x)*e,B=w-(w-E)*e,P=k-(k-C)*e}else{let e;e=t>v?1:m===v?0:(m-t)/(m-v),I=f-(f-b)*e,L=x-(x-A)*e,B=E-(E-S)*e,P=C-(C-_)*e}let e;e=t<g?0:t>v?1:(g-t)/(g-v),R=p-(p-b)*e,D=y-(y-A)*e,O=w-(w-S)*e,F=k-(k-_)*e;const i=Math.round(Math.min(I,R)),n=Math.round(Math.max(I,R));let s=h*t+4*i;for(let t=i;t<=n;t++)e=(I-t)/(I-R),e<0?e=0:e>1&&(e=1),d[s++]=L-(L-D)*e|0,d[s++]=B-(B-O)*e|0,d[s++]=P-(P-F)*e|0,d[s++]=255}}function u(t,e,i){const n=e.coords,s=e.colors;let o,r;switch(e.type){case"lattice":const a=e.verticesPerRow,l=Math.floor(n.length/a)-1,c=a-1;for(o=0;o<l;o++){let e=o*a;for(let o=0;o<c;o++,e++)h(t,i,n[e],n[e+1],n[e+a],s[e],s[e+1],s[e+a]),h(t,i,n[e+a+1],n[e+1],n[e+a],s[e+a+1],s[e+1],s[e+a])}break;case"triangles":for(o=0,r=n.length;o<r;o+=3)h(t,i,n[o],n[o+1],n[o+2],s[o],s[o+1],s[o+2]);break;default:throw new Error("illegal figure")}}class p extends c{constructor(t){super(),this._coords=t[2],this._colors=t[3],this._figures=t[4],this._bounds=t[5],this._bbox=t[7],this._background=t[8],this.matrix=null}_createMeshCanvas(t,e,i){const n=Math.floor(this._bounds[0]),s=Math.floor(this._bounds[1]),o=Math.ceil(this._bounds[2])-n,r=Math.ceil(this._bounds[3])-s,a=Math.min(Math.ceil(Math.abs(o*t[0]*1.1)),3e3),l=Math.min(Math.ceil(Math.abs(r*t[1]*1.1)),3e3),c=o/a,d=r/l,h={coords:this._coords,colors:this._colors,offsetX:-n,offsetY:-s,scaleX:1/c,scaleY:1/d},p=a+4,g=l+4,f=i.getCanvas("mesh",p,g,!1),m=f.context,b=m.createImageData(a,l);if(e){const t=b.data;for(let i=0,n=t.length;i<n;i+=4)t[i]=e[0],t[i+1]=e[1],t[i+2]=e[2],t[i+3]=255}for(const t of this._figures)u(b,t,h);return m.putImageData(b,2,2),{canvas:f.canvas,offsetX:n-2*c,offsetY:s-2*d,scaleX:c,scaleY:d}}getPattern(t,e,i,o){let r;if(l(t,this._bbox),o===a)r=n.Util.singularValueDecompose2dScale((0,s.getCurrentTransform)(t));else if(r=n.Util.singularValueDecompose2dScale(e.baseTransform),this.matrix){const t=n.Util.singularValueDecompose2dScale(this.matrix);r=[r[0]*t[0],r[1]*t[1]]}const c=this._createMeshCanvas(r,o===a?null:this._background,e.cachedCanvases);return o!==a&&(t.setTransform(...e.baseTransform),this.matrix&&t.transform(...this.matrix)),t.translate(c.offsetX,c.offsetY),t.scale(c.scaleX,c.scaleY),t.createPattern(c.canvas,"no-repeat")}}class g extends c{getPattern(){return"hotpink"}}class f{static MAX_PATTERN_SIZE=3e3;constructor(t,e,i,n,s){this.operatorList=t[2],this.matrix=t[3]||[1,0,0,1,0,0],this.bbox=t[4],this.xstep=t[5],this.ystep=t[6],this.paintType=t[7],this.tilingType=t[8],this.color=e,this.ctx=i,this.canvasGraphicsFactory=n,this.baseTransform=s}createPatternCanvas(t){const e=this.operatorList,i=this.bbox,o=this.xstep,r=this.ystep,a=this.paintType,l=this.tilingType,c=this.color,d=this.canvasGraphicsFactory;(0,n.info)("TilingType: "+l);const h=i[0],u=i[1],p=i[2],g=i[3],f=n.Util.singularValueDecompose2dScale(this.matrix),m=n.Util.singularValueDecompose2dScale(this.baseTransform),b=[f[0]*m[0],f[1]*m[1]],v=this.getSizeAndScale(o,this.ctx.canvas.width,b[0]),y=this.getSizeAndScale(r,this.ctx.canvas.height,b[1]),w=t.cachedCanvases.getCanvas("pattern",v.size,y.size,!0),k=w.context,x=d.createCanvasGraphics(k);x.groupLevel=t.groupLevel,this.setFillAndStrokeStyleToContext(x,a,c);let E=h,C=u,A=p,S=g;return h<0&&(E=0,A+=Math.abs(h)),u<0&&(C=0,S+=Math.abs(u)),k.translate(-v.scale*E,-y.scale*C),x.transform(v.scale,0,0,y.scale,0,0),k.save(),this.clipBbox(x,E,C,A,S),x.baseTransform=(0,s.getCurrentTransform)(x.ctx),x.executeOperatorList(e),x.endDrawing(),{canvas:w.canvas,scaleX:v.scale,scaleY:y.scale,offsetX:E,offsetY:C}}getSizeAndScale(t,e,i){t=Math.abs(t);const n=Math.max(f.MAX_PATTERN_SIZE,e);let s=Math.ceil(t*i);return s>=n?s=n:i=s/t,{scale:i,size:s}}clipBbox(t,e,i,n,o){const r=n-e,a=o-i;t.ctx.rect(e,i,r,a),t.current.updateRectMinMax((0,s.getCurrentTransform)(t.ctx),[e,i,n,o]),t.clip(),t.endPath()}setFillAndStrokeStyleToContext(t,e,i){const s=t.ctx,o=t.current;switch(e){case 1:const t=this.ctx;s.fillStyle=t.fillStyle,s.strokeStyle=t.strokeStyle,o.fillColor=t.fillStyle,o.strokeColor=t.strokeStyle;break;case 2:const r=n.Util.makeHexColor(i[0],i[1],i[2]);s.fillStyle=r,s.strokeStyle=r,o.fillColor=r,o.strokeColor=r;break;default:throw new n.FormatError(`Unsupported paint type: ${e}`)}}getPattern(t,e,i,s){let o=i;s!==a&&(o=n.Util.transform(o,e.baseTransform),this.matrix&&(o=n.Util.transform(o,this.matrix)));const r=this.createPatternCanvas(e);let l=new DOMMatrix(o);l=l.translate(r.offsetX,r.offsetY),l=l.scale(1/r.scaleX,1/r.scaleY);const c=t.createPattern(r.canvas,"repeat");return c.setTransform(l),c}}function m({src:t,srcPos:e=0,dest:i,width:s,height:o,nonBlackColor:r=4294967295,inverseDecode:a=!1}){const l=n.FeatureTest.isLittleEndian?4278190080:255,[c,d]=a?[r,l]:[l,r],h=s>>3,u=7&s,p=t.length;i=new Uint32Array(i.buffer);let g=0;for(let n=0;n<o;n++){for(const n=e+h;e<n;e++){const n=e<p?t[e]:255;i[g++]=128&n?d:c,i[g++]=64&n?d:c,i[g++]=32&n?d:c,i[g++]=16&n?d:c,i[g++]=8&n?d:c,i[g++]=4&n?d:c,i[g++]=2&n?d:c,i[g++]=1&n?d:c}if(0===u)continue;const n=e<p?t[e++]:255;for(let t=0;t<u;t++)i[g++]=n&1<<7-t?d:c}return{srcPos:e,destPos:g}}const b=4096,v=16;class y{constructor(t){this.canvasFactory=t,this.cache=Object.create(null)}getCanvas(t,e,i){let n;return void 0!==this.cache[t]?(n=this.cache[t],this.canvasFactory.reset(n,e,i)):(n=this.canvasFactory.create(e,i),this.cache[t]=n),n}delete(t){delete this.cache[t]}clear(){for(const t in this.cache){const e=this.cache[t];this.canvasFactory.destroy(e),delete this.cache[t]}}}function w(t,e,i,n,o,r,a,l,c,d){const[h,u,p,g,f,m]=(0,s.getCurrentTransform)(t);if(0===u&&0===p){const s=a*h+f,b=Math.round(s),v=l*g+m,y=Math.round(v),w=(a+c)*h+f,k=Math.abs(Math.round(w)-b)||1,x=(l+d)*g+m,E=Math.abs(Math.round(x)-y)||1;return t.setTransform(Math.sign(h),0,0,Math.sign(g),b,y),t.drawImage(e,i,n,o,r,0,0,k,E),t.setTransform(h,u,p,g,f,m),[k,E]}if(0===h&&0===g){const s=l*p+f,b=Math.round(s),v=a*u+m,y=Math.round(v),w=(l+d)*p+f,k=Math.abs(Math.round(w)-b)||1,x=(a+c)*u+m,E=Math.abs(Math.round(x)-y)||1;return t.setTransform(0,Math.sign(u),Math.sign(p),0,b,y),t.drawImage(e,i,n,o,r,0,0,E,k),t.setTransform(h,u,p,g,f,m),[E,k]}return t.drawImage(e,i,n,o,r,a,l,c,d),[Math.hypot(h,u)*c,Math.hypot(p,g)*d]}class k{constructor(t,e){this.alphaIsShape=!1,this.fontSize=0,this.fontSizeScale=1,this.textMatrix=n.IDENTITY_MATRIX,this.textMatrixScale=1,this.fontMatrix=n.FONT_IDENTITY_MATRIX,this.leading=0,this.x=0,this.y=0,this.lineX=0,this.lineY=0,this.charSpacing=0,this.wordSpacing=0,this.textHScale=1,this.textRenderingMode=n.TextRenderingMode.FILL,this.textRise=0,this.fillColor="#000000",this.strokeColor="#000000",this.patternFill=!1,this.fillAlpha=1,this.strokeAlpha=1,this.lineWidth=1,this.activeSMask=null,this.transferMaps="none",this.startNewPathAndClipBox([0,0,t,e])}clone(){const t=Object.create(this);return t.clipBox=this.clipBox.slice(),t}setCurrentPoint(t,e){this.x=t,this.y=e}updatePathMinMax(t,e,i){[e,i]=n.Util.applyTransform([e,i],t),this.minX=Math.min(this.minX,e),this.minY=Math.min(this.minY,i),this.maxX=Math.max(this.maxX,e),this.maxY=Math.max(this.maxY,i)}updateRectMinMax(t,e){const i=n.Util.applyTransform(e,t),s=n.Util.applyTransform(e.slice(2),t),o=n.Util.applyTransform([e[0],e[3]],t),r=n.Util.applyTransform([e[2],e[1]],t);this.minX=Math.min(this.minX,i[0],s[0],o[0],r[0]),this.minY=Math.min(this.minY,i[1],s[1],o[1],r[1]),this.maxX=Math.max(this.maxX,i[0],s[0],o[0],r[0]),this.maxY=Math.max(this.maxY,i[1],s[1],o[1],r[1])}updateScalingPathMinMax(t,e){n.Util.scaleMinMax(t,e),this.minX=Math.min(this.minX,e[0]),this.maxX=Math.max(this.maxX,e[1]),this.minY=Math.min(this.minY,e[2]),this.maxY=Math.max(this.maxY,e[3])}updateCurvePathMinMax(t,e,i,s,o,r,a,l,c,d){const h=n.Util.bezierBoundingBox(e,i,s,o,r,a,l,c);if(d)return d[0]=Math.min(d[0],h[0],h[2]),d[1]=Math.max(d[1],h[0],h[2]),d[2]=Math.min(d[2],h[1],h[3]),void(d[3]=Math.max(d[3],h[1],h[3]));this.updateRectMinMax(t,h)}getPathBoundingBox(t=o,e=null){const i=[this.minX,this.minY,this.maxX,this.maxY];if(t===r){e||(0,n.unreachable)("Stroke bounding box must include transform.");const t=n.Util.singularValueDecompose2dScale(e),s=t[0]*this.lineWidth/2,o=t[1]*this.lineWidth/2;i[0]-=s,i[1]-=o,i[2]+=s,i[3]+=o}return i}updateClipFromPath(){const t=n.Util.intersect(this.clipBox,this.getPathBoundingBox());this.startNewPathAndClipBox(t||[0,0,0,0])}isEmptyClip(){return this.minX===1/0}startNewPathAndClipBox(t){this.clipBox=t,this.minX=1/0,this.minY=1/0,this.maxX=0,this.maxY=0}getClippedPathBoundingBox(t=o,e=null){return n.Util.intersect(this.clipBox,this.getPathBoundingBox(t,e))}}function x(t,e){if("undefined"!=typeof ImageData&&e instanceof ImageData)return void t.putImageData(e,0,0);const i=e.height,s=e.width,o=i%v,r=(i-o)/v,a=0===o?r:r+1,l=t.createImageData(s,v);let c,d=0;const h=e.data,u=l.data;let p,g,f,m;if(e.kind===n.ImageKind.GRAYSCALE_1BPP){const e=h.byteLength,i=new Uint32Array(u.buffer,0,u.byteLength>>2),m=i.length,b=s+7>>3,y=4294967295,w=n.FeatureTest.isLittleEndian?4278190080:255;for(p=0;p<a;p++){for(f=p<r?v:o,c=0,g=0;g<f;g++){const t=e-d;let n=0;const o=t>b?s:8*t-7,r=-8&o;let a=0,l=0;for(;n<r;n+=8)l=h[d++],i[c++]=128&l?y:w,i[c++]=64&l?y:w,i[c++]=32&l?y:w,i[c++]=16&l?y:w,i[c++]=8&l?y:w,i[c++]=4&l?y:w,i[c++]=2&l?y:w,i[c++]=1&l?y:w;for(;n<o;n++)0===a&&(l=h[d++],a=128),i[c++]=l&a?y:w,a>>=1}for(;c<m;)i[c++]=0;t.putImageData(l,0,p*v)}}else if(e.kind===n.ImageKind.RGBA_32BPP){for(g=0,m=s*v*4,p=0;p<r;p++)u.set(h.subarray(d,d+m)),d+=m,t.putImageData(l,0,g),g+=v;p<a&&(m=s*o*4,u.set(h.subarray(d,d+m)),t.putImageData(l,0,g))}else{if(e.kind!==n.ImageKind.RGB_24BPP)throw new Error(`bad image kind: ${e.kind}`);for(f=v,m=s*f,p=0;p<a;p++){for(p>=r&&(f=o,m=s*f),c=0,g=m;g--;)u[c++]=h[d++],u[c++]=h[d++],u[c++]=h[d++],u[c++]=255;t.putImageData(l,0,p*v)}}}function E(t,e){if(e.bitmap)return void t.drawImage(e.bitmap,0,0);const i=e.height,n=e.width,s=i%v,o=(i-s)/v,r=0===s?o:o+1,a=t.createImageData(n,v);let l=0;const c=e.data,d=a.data;for(let e=0;e<r;e++){const i=e<o?v:s;({srcPos:l}=m({src:c,srcPos:l,dest:d,width:n,height:i,nonBlackColor:0})),t.putImageData(a,0,e*v)}}function C(t,e){const i=["strokeStyle","fillStyle","fillRule","globalAlpha","lineWidth","lineCap","lineJoin","miterLimit","globalCompositeOperation","font","filter"];for(const n of i)void 0!==t[n]&&(e[n]=t[n]);void 0!==t.setLineDash&&(e.setLineDash(t.getLineDash()),e.lineDashOffset=t.lineDashOffset)}function A(t){if(t.strokeStyle=t.fillStyle="#000000",t.fillRule="nonzero",t.globalAlpha=1,t.lineWidth=1,t.lineCap="butt",t.lineJoin="miter",t.miterLimit=10,t.globalCompositeOperation="source-over",t.font="10px sans-serif",void 0!==t.setLineDash&&(t.setLineDash([]),t.lineDashOffset=0),!n.isNodeJS){const{filter:e}=t;"none"!==e&&""!==e&&(t.filter="none")}}function S(t,e,i,n){const s=t.length;for(let o=3;o<s;o+=4){const s=t[o];if(0===s)t[o-3]=e,t[o-2]=i,t[o-1]=n;else if(s<255){const r=255-s;t[o-3]=t[o-3]*s+e*r>>8,t[o-2]=t[o-2]*s+i*r>>8,t[o-1]=t[o-1]*s+n*r>>8}}}function _(t,e,i){const n=t.length;for(let s=3;s<n;s+=4){const n=i?i[t[s]]:t[s];e[s]=e[s]*n*.00392156862745098|0}}function T(t,e,i){const n=t.length;for(let s=3;s<n;s+=4){const n=77*t[s-3]+152*t[s-2]+28*t[s-1];e[s]=i?e[s]*i[n>>8]>>8:e[s]*n>>16}}function M(t,e){const i=n.Util.singularValueDecompose2dScale(t);i[0]=Math.fround(i[0]),i[1]=Math.fround(i[1]);const o=Math.fround((globalThis.devicePixelRatio||1)*s.PixelsPerInch.PDF_TO_CSS_UNITS);return void 0!==e?e:i[0]<=o||i[1]<=o}const I=["butt","round","square"],L=["miter","round","bevel"],B={},P={};class R{constructor(t,e,i,n,s,{optionalContentConfig:o,markedContentStack:r=null},a,l){this.ctx=t,this.current=new k(this.ctx.canvas.width,this.ctx.canvas.height),this.stateStack=[],this.pendingClip=null,this.pendingEOFill=!1,this.res=null,this.xobjs=null,this.commonObjs=e,this.objs=i,this.canvasFactory=n,this.filterFactory=s,this.groupStack=[],this.processingType3=null,this.baseTransform=null,this.baseTransformStack=[],this.groupLevel=0,this.smaskStack=[],this.smaskCounter=0,this.tempSMask=null,this.suspendedCtx=null,this.contentVisible=!0,this.markedContentStack=r||[],this.optionalContentConfig=o,this.cachedCanvases=new y(this.canvasFactory),this.cachedPatterns=new Map,this.annotationCanvasMap=a,this.viewportScale=1,this.outputScaleX=1,this.outputScaleY=1,this.pageColors=l,this._cachedScaleForStroking=[-1,0],this._cachedGetSinglePixelWidth=null,this._cachedBitmapsMap=new Map}getObject(t,e=null){return"string"==typeof t?t.startsWith("g_")?this.commonObjs.get(t):this.objs.get(t):e}beginDrawing({transform:t,viewport:e,transparency:i=!1,background:n=null}){const o=this.ctx.canvas.width,r=this.ctx.canvas.height,a=this.ctx.fillStyle;if(this.ctx.fillStyle=n||"#ffffff",this.ctx.fillRect(0,0,o,r),this.ctx.fillStyle=a,i){const t=this.cachedCanvases.getCanvas("transparent",o,r);this.compositeCtx=this.ctx,this.transparentCanvas=t.canvas,this.ctx=t.context,this.ctx.save(),this.ctx.transform(...(0,s.getCurrentTransform)(this.compositeCtx))}this.ctx.save(),A(this.ctx),t&&(this.ctx.transform(...t),this.outputScaleX=t[0],this.outputScaleY=t[0]),this.ctx.transform(...e.transform),this.viewportScale=e.scale,this.baseTransform=(0,s.getCurrentTransform)(this.ctx)}executeOperatorList(t,e,i,s){const o=t.argsArray,r=t.fnArray;let a=e||0;const l=o.length;if(l===a)return a;const c=l-a>10&&"function"==typeof i,d=c?Date.now()+15:0;let h=0;const u=this.commonObjs,p=this.objs;let g;for(;;){if(void 0!==s&&a===s.nextBreakPoint)return s.breakIt(a,i),a;if(g=r[a],g!==n.OPS.dependency)this[g].apply(this,o[a]);else for(const t of o[a]){const e=t.startsWith("g_")?u:p;if(!e.has(t))return e.get(t,i),a}if(a++,a===l)return a;if(c&&++h>10){if(Date.now()>d)return i(),a;h=0}}}#ot(){for(;this.stateStack.length||this.inSMaskMode;)this.restore();this.ctx.restore(),this.transparentCanvas&&(this.ctx=this.compositeCtx,this.ctx.save(),this.ctx.setTransform(1,0,0,1,0,0),this.ctx.drawImage(this.transparentCanvas,0,0),this.ctx.restore(),this.transparentCanvas=null)}endDrawing(){this.#ot(),this.cachedCanvases.clear(),this.cachedPatterns.clear();for(const t of this._cachedBitmapsMap.values()){for(const e of t.values())"undefined"!=typeof HTMLCanvasElement&&e instanceof HTMLCanvasElement&&(e.width=e.height=0);t.clear()}this._cachedBitmapsMap.clear(),this.#rt()}#rt(){if(this.pageColors){const t=this.filterFactory.addHCMFilter(this.pageColors.foreground,this.pageColors.background);if("none"!==t){const e=this.ctx.filter;this.ctx.filter=t,this.ctx.drawImage(this.ctx.canvas,0,0),this.ctx.filter=e}}}_scaleImage(t,e){const i=t.width,n=t.height;let s,o,r=Math.max(Math.hypot(e[0],e[1]),1),a=Math.max(Math.hypot(e[2],e[3]),1),l=i,c=n,d="prescale1";for(;r>2&&l>1||a>2&&c>1;){let e=l,i=c;r>2&&l>1&&(e=l>=16384?Math.floor(l/2)-1||1:Math.ceil(l/2),r/=l/e),a>2&&c>1&&(i=c>=16384?Math.floor(c/2)-1||1:Math.ceil(c)/2,a/=c/i),s=this.cachedCanvases.getCanvas(d,e,i),o=s.context,o.clearRect(0,0,e,i),o.drawImage(t,0,0,l,c,0,0,e,i),t=s.canvas,l=e,c=i,d="prescale1"===d?"prescale2":"prescale1"}return{img:t,paintWidth:l,paintHeight:c}}_createMaskCanvas(t){const e=this.ctx,{width:i,height:r}=t,a=this.current.fillColor,l=this.current.patternFill,c=(0,s.getCurrentTransform)(e);let d,h,u,p;if((t.bitmap||t.data)&&t.count>1){const e=t.bitmap||t.data.buffer;h=JSON.stringify(l?c:[c.slice(0,4),a]),d=this._cachedBitmapsMap.get(e),d||(d=new Map,this._cachedBitmapsMap.set(e,d));const i=d.get(h);if(i&&!l)return{canvas:i,offsetX:Math.round(Math.min(c[0],c[2])+c[4]),offsetY:Math.round(Math.min(c[1],c[3])+c[5])};u=i}u||(p=this.cachedCanvases.getCanvas("maskCanvas",i,r),E(p.context,t));let g=n.Util.transform(c,[1/i,0,0,-1/r,0,0]);g=n.Util.transform(g,[1,0,0,1,0,-r]);const[f,m,b,v]=n.Util.getAxialAlignedBoundingBox([0,0,i,r],g),y=Math.round(b-f)||1,k=Math.round(v-m)||1,x=this.cachedCanvases.getCanvas("fillCanvas",y,k),C=x.context,A=f,S=m;C.translate(-A,-S),C.transform(...g),u||(u=this._scaleImage(p.canvas,(0,s.getCurrentTransformInverse)(C)),u=u.img,d&&l&&d.set(h,u)),C.imageSmoothingEnabled=M((0,s.getCurrentTransform)(C),t.interpolate),w(C,u,0,0,u.width,u.height,0,0,i,r),C.globalCompositeOperation="source-in";const _=n.Util.transform((0,s.getCurrentTransformInverse)(C),[1,0,0,1,-A,-S]);return C.fillStyle=l?a.getPattern(e,this,_,o):a,C.fillRect(0,0,i,r),d&&!l&&(this.cachedCanvases.delete("fillCanvas"),d.set(h,x.canvas)),{canvas:x.canvas,offsetX:Math.round(A),offsetY:Math.round(S)}}setLineWidth(t){t!==this.current.lineWidth&&(this._cachedScaleForStroking[0]=-1),this.current.lineWidth=t,this.ctx.lineWidth=t}setLineCap(t){this.ctx.lineCap=I[t]}setLineJoin(t){this.ctx.lineJoin=L[t]}setMiterLimit(t){this.ctx.miterLimit=t}setDash(t,e){const i=this.ctx;void 0!==i.setLineDash&&(i.setLineDash(t),i.lineDashOffset=e)}setRenderingIntent(t){}setFlatness(t){}setGState(t){for(const[e,i]of t)switch(e){case"LW":this.setLineWidth(i);break;case"LC":this.setLineCap(i);break;case"LJ":this.setLineJoin(i);break;case"ML":this.setMiterLimit(i);break;case"D":this.setDash(i[0],i[1]);break;case"RI":this.setRenderingIntent(i);break;case"FL":this.setFlatness(i);break;case"Font":this.setFont(i[0],i[1]);break;case"CA":this.current.strokeAlpha=i;break;case"ca":this.current.fillAlpha=i,this.ctx.globalAlpha=i;break;case"BM":this.ctx.globalCompositeOperation=i;break;case"SMask":this.current.activeSMask=i?this.tempSMask:null,this.tempSMask=null,this.checkSMaskState();break;case"TR":this.ctx.filter=this.current.transferMaps=this.filterFactory.addFilter(i)}}get inSMaskMode(){return!!this.suspendedCtx}checkSMaskState(){const t=this.inSMaskMode;this.current.activeSMask&&!t?this.beginSMaskMode():!this.current.activeSMask&&t&&this.endSMaskMode()}beginSMaskMode(){if(this.inSMaskMode)throw new Error("beginSMaskMode called while already in smask mode");const t=this.ctx.canvas.width,e=this.ctx.canvas.height,i="smaskGroupAt"+this.groupLevel,n=this.cachedCanvases.getCanvas(i,t,e);this.suspendedCtx=this.ctx,this.ctx=n.context;const o=this.ctx;o.setTransform(...(0,s.getCurrentTransform)(this.suspendedCtx)),C(this.suspendedCtx,o),function(t,e){if(t._removeMirroring)throw new Error("Context is already forwarding operations.");t.__originalSave=t.save,t.__originalRestore=t.restore,t.__originalRotate=t.rotate,t.__originalScale=t.scale,t.__originalTranslate=t.translate,t.__originalTransform=t.transform,t.__originalSetTransform=t.setTransform,t.__originalResetTransform=t.resetTransform,t.__originalClip=t.clip,t.__originalMoveTo=t.moveTo,t.__originalLineTo=t.lineTo,t.__originalBezierCurveTo=t.bezierCurveTo,t.__originalRect=t.rect,t.__originalClosePath=t.closePath,t.__originalBeginPath=t.beginPath,t._removeMirroring=()=>{t.save=t.__originalSave,t.restore=t.__originalRestore,t.rotate=t.__originalRotate,t.scale=t.__originalScale,t.translate=t.__originalTranslate,t.transform=t.__originalTransform,t.setTransform=t.__originalSetTransform,t.resetTransform=t.__originalResetTransform,t.clip=t.__originalClip,t.moveTo=t.__originalMoveTo,t.lineTo=t.__originalLineTo,t.bezierCurveTo=t.__originalBezierCurveTo,t.rect=t.__originalRect,t.closePath=t.__originalClosePath,t.beginPath=t.__originalBeginPath,delete t._removeMirroring},t.save=function(){e.save(),this.__originalSave()},t.restore=function(){e.restore(),this.__originalRestore()},t.translate=function(t,i){e.translate(t,i),this.__originalTranslate(t,i)},t.scale=function(t,i){e.scale(t,i),this.__originalScale(t,i)},t.transform=function(t,i,n,s,o,r){e.transform(t,i,n,s,o,r),this.__originalTransform(t,i,n,s,o,r)},t.setTransform=function(t,i,n,s,o,r){e.setTransform(t,i,n,s,o,r),this.__originalSetTransform(t,i,n,s,o,r)},t.resetTransform=function(){e.resetTransform(),this.__originalResetTransform()},t.rotate=function(t){e.rotate(t),this.__originalRotate(t)},t.clip=function(t){e.clip(t),this.__originalClip(t)},t.moveTo=function(t,i){e.moveTo(t,i),this.__originalMoveTo(t,i)},t.lineTo=function(t,i){e.lineTo(t,i),this.__originalLineTo(t,i)},t.bezierCurveTo=function(t,i,n,s,o,r){e.bezierCurveTo(t,i,n,s,o,r),this.__originalBezierCurveTo(t,i,n,s,o,r)},t.rect=function(t,i,n,s){e.rect(t,i,n,s),this.__originalRect(t,i,n,s)},t.closePath=function(){e.closePath(),this.__originalClosePath()},t.beginPath=function(){e.beginPath(),this.__originalBeginPath()}}(o,this.suspendedCtx),this.setGState([["BM","source-over"],["ca",1],["CA",1]])}endSMaskMode(){if(!this.inSMaskMode)throw new Error("endSMaskMode called while not in smask mode");this.ctx._removeMirroring(),C(this.ctx,this.suspendedCtx),this.ctx=this.suspendedCtx,this.suspendedCtx=null}compose(t){if(!this.current.activeSMask)return;t?(t[0]=Math.floor(t[0]),t[1]=Math.floor(t[1]),t[2]=Math.ceil(t[2]),t[3]=Math.ceil(t[3])):t=[0,0,this.ctx.canvas.width,this.ctx.canvas.height];const e=this.current.activeSMask;(function(t,e,i,n){const s=n[0],o=n[1],r=n[2]-s,a=n[3]-o;0!==r&&0!==a&&(function(t,e,i,n,s,o,r,a,l,c,d){const h=!!o,u=h?o[0]:0,p=h?o[1]:0,g=h?o[2]:0,f="Luminosity"===s?T:_,m=Math.min(n,Math.ceil(1048576/i));for(let s=0;s<n;s+=m){const o=Math.min(m,n-s),b=t.getImageData(a-c,s+(l-d),i,o),v=e.getImageData(a,s+l,i,o);h&&S(b.data,u,p,g),f(b.data,v.data,r),e.putImageData(v,a,s+l)}}(e.context,i,r,a,e.subtype,e.backdrop,e.transferMap,s,o,e.offsetX,e.offsetY),t.save(),t.globalAlpha=1,t.globalCompositeOperation="source-over",t.setTransform(1,0,0,1,0,0),t.drawImage(i.canvas,0,0),t.restore())})(this.suspendedCtx,e,this.ctx,t),this.ctx.save(),this.ctx.setTransform(1,0,0,1,0,0),this.ctx.clearRect(0,0,this.ctx.canvas.width,this.ctx.canvas.height),this.ctx.restore()}save(){this.inSMaskMode?(C(this.ctx,this.suspendedCtx),this.suspendedCtx.save()):this.ctx.save();const t=this.current;this.stateStack.push(t),this.current=t.clone()}restore(){0===this.stateStack.length&&this.inSMaskMode&&this.endSMaskMode(),0!==this.stateStack.length&&(this.current=this.stateStack.pop(),this.inSMaskMode?(this.suspendedCtx.restore(),C(this.suspendedCtx,this.ctx)):this.ctx.restore(),this.checkSMaskState(),this.pendingClip=null,this._cachedScaleForStroking[0]=-1,this._cachedGetSinglePixelWidth=null)}transform(t,e,i,n,s,o){this.ctx.transform(t,e,i,n,s,o),this._cachedScaleForStroking[0]=-1,this._cachedGetSinglePixelWidth=null}constructPath(t,e,i){const o=this.ctx,r=this.current;let a,l,c=r.x,d=r.y;const h=(0,s.getCurrentTransform)(o),u=0===h[0]&&0===h[3]||0===h[1]&&0===h[2],p=u?i.slice(0):null;for(let i=0,s=0,g=t.length;i<g;i++)switch(0|t[i]){case n.OPS.rectangle:c=e[s++],d=e[s++];const t=e[s++],i=e[s++],g=c+t,f=d+i;o.moveTo(c,d),0===t||0===i?o.lineTo(g,f):(o.lineTo(g,d),o.lineTo(g,f),o.lineTo(c,f)),u||r.updateRectMinMax(h,[c,d,g,f]),o.closePath();break;case n.OPS.moveTo:c=e[s++],d=e[s++],o.moveTo(c,d),u||r.updatePathMinMax(h,c,d);break;case n.OPS.lineTo:c=e[s++],d=e[s++],o.lineTo(c,d),u||r.updatePathMinMax(h,c,d);break;case n.OPS.curveTo:a=c,l=d,c=e[s+4],d=e[s+5],o.bezierCurveTo(e[s],e[s+1],e[s+2],e[s+3],c,d),r.updateCurvePathMinMax(h,a,l,e[s],e[s+1],e[s+2],e[s+3],c,d,p),s+=6;break;case n.OPS.curveTo2:a=c,l=d,o.bezierCurveTo(c,d,e[s],e[s+1],e[s+2],e[s+3]),r.updateCurvePathMinMax(h,a,l,c,d,e[s],e[s+1],e[s+2],e[s+3],p),c=e[s+2],d=e[s+3],s+=4;break;case n.OPS.curveTo3:a=c,l=d,c=e[s+2],d=e[s+3],o.bezierCurveTo(e[s],e[s+1],c,d,c,d),r.updateCurvePathMinMax(h,a,l,e[s],e[s+1],c,d,c,d,p),s+=4;break;case n.OPS.closePath:o.closePath()}u&&r.updateScalingPathMinMax(h,p),r.setCurrentPoint(c,d)}closePath(){this.ctx.closePath()}stroke(t=!0){const e=this.ctx,i=this.current.strokeColor;e.globalAlpha=this.current.strokeAlpha,this.contentVisible&&("object"==typeof i&&i?.getPattern?(e.save(),e.strokeStyle=i.getPattern(e,this,(0,s.getCurrentTransformInverse)(e),r),this.rescaleAndStroke(!1),e.restore()):this.rescaleAndStroke(!0)),t&&this.consumePath(this.current.getClippedPathBoundingBox()),e.globalAlpha=this.current.fillAlpha}closeStroke(){this.closePath(),this.stroke()}fill(t=!0){const e=this.ctx,i=this.current.fillColor;let n=!1;this.current.patternFill&&(e.save(),e.fillStyle=i.getPattern(e,this,(0,s.getCurrentTransformInverse)(e),o),n=!0);const r=this.current.getClippedPathBoundingBox();this.contentVisible&&null!==r&&(this.pendingEOFill?(e.fill("evenodd"),this.pendingEOFill=!1):e.fill()),n&&e.restore(),t&&this.consumePath(r)}eoFill(){this.pendingEOFill=!0,this.fill()}fillStroke(){this.fill(!1),this.stroke(!1),this.consumePath()}eoFillStroke(){this.pendingEOFill=!0,this.fillStroke()}closeFillStroke(){this.closePath(),this.fillStroke()}closeEOFillStroke(){this.pendingEOFill=!0,this.closePath(),this.fillStroke()}endPath(){this.consumePath()}clip(){this.pendingClip=B}eoClip(){this.pendingClip=P}beginText(){this.current.textMatrix=n.IDENTITY_MATRIX,this.current.textMatrixScale=1,this.current.x=this.current.lineX=0,this.current.y=this.current.lineY=0}endText(){const t=this.pendingTextPaths,e=this.ctx;if(void 0!==t){e.save(),e.beginPath();for(const i of t)e.setTransform(...i.transform),e.translate(i.x,i.y),i.addToPath(e,i.fontSize);e.restore(),e.clip(),e.beginPath(),delete this.pendingTextPaths}else e.beginPath()}setCharSpacing(t){this.current.charSpacing=t}setWordSpacing(t){this.current.wordSpacing=t}setHScale(t){this.current.textHScale=t/100}setLeading(t){this.current.leading=-t}setFont(t,e){const i=this.commonObjs.get(t),s=this.current;if(!i)throw new Error(`Can't find font for ${t}`);if(s.fontMatrix=i.fontMatrix||n.FONT_IDENTITY_MATRIX,0!==s.fontMatrix[0]&&0!==s.fontMatrix[3]||(0,n.warn)("Invalid font matrix for font "+t),e<0?(e=-e,s.fontDirection=-1):s.fontDirection=1,this.current.font=i,this.current.fontSize=e,i.isType3Font)return;const o=i.loadedName||"sans-serif",r=i.systemFontInfo?.css||`"${o}", ${i.fallbackName}`;let a="normal";i.black?a="900":i.bold&&(a="bold");const l=i.italic?"italic":"normal";let c=e;e<16?c=16:e>100&&(c=100),this.current.fontSizeScale=e/c,this.ctx.font=`${l} ${a} ${c}px ${r}`}setTextRenderingMode(t){this.current.textRenderingMode=t}setTextRise(t){this.current.textRise=t}moveText(t,e){this.current.x=this.current.lineX+=t,this.current.y=this.current.lineY+=e}setLeadingMoveText(t,e){this.setLeading(-e),this.moveText(t,e)}setTextMatrix(t,e,i,n,s,o){this.current.textMatrix=[t,e,i,n,s,o],this.current.textMatrixScale=Math.hypot(t,e),this.current.x=this.current.lineX=0,this.current.y=this.current.lineY=0}nextLine(){this.moveText(0,this.current.leading)}paintChar(t,e,i,o){const r=this.ctx,a=this.current,l=a.font,c=a.textRenderingMode,d=a.fontSize/a.fontSizeScale,h=c&n.TextRenderingMode.FILL_STROKE_MASK,u=!!(c&n.TextRenderingMode.ADD_TO_PATH_FLAG),p=a.patternFill&&!l.missingFile;let g;(l.disableFontFace||u||p)&&(g=l.getPathGenerator(this.commonObjs,t)),l.disableFontFace||p?(r.save(),r.translate(e,i),r.beginPath(),g(r,d),o&&r.setTransform(...o),h!==n.TextRenderingMode.FILL&&h!==n.TextRenderingMode.FILL_STROKE||r.fill(),h!==n.TextRenderingMode.STROKE&&h!==n.TextRenderingMode.FILL_STROKE||r.stroke(),r.restore()):(h!==n.TextRenderingMode.FILL&&h!==n.TextRenderingMode.FILL_STROKE||r.fillText(t,e,i),h!==n.TextRenderingMode.STROKE&&h!==n.TextRenderingMode.FILL_STROKE||r.strokeText(t,e,i)),u&&(this.pendingTextPaths||=[]).push({transform:(0,s.getCurrentTransform)(r),x:e,y:i,fontSize:d,addToPath:g})}get isFontSubpixelAAEnabled(){const{context:t}=this.cachedCanvases.getCanvas("isFontSubpixelAAEnabled",10,10);t.scale(1.5,1),t.fillText("I",0,10);const e=t.getImageData(0,0,10,10).data;let i=!1;for(let t=3;t<e.length;t+=4)if(e[t]>0&&e[t]<255){i=!0;break}return(0,n.shadow)(this,"isFontSubpixelAAEnabled",i)}showText(t){const e=this.current,i=e.font;if(i.isType3Font)return this.showType3Text(t);const r=e.fontSize;if(0===r)return;const a=this.ctx,l=e.fontSizeScale,c=e.charSpacing,d=e.wordSpacing,h=e.fontDirection,u=e.textHScale*h,p=t.length,g=i.vertical,f=g?1:-1,m=i.defaultVMetrics,b=r*e.fontMatrix[0],v=e.textRenderingMode===n.TextRenderingMode.FILL&&!i.disableFontFace&&!e.patternFill;let y;if(a.save(),a.transform(...e.textMatrix),a.translate(e.x,e.y+e.textRise),h>0?a.scale(u,-1):a.scale(u,1),e.patternFill){a.save();const t=e.fillColor.getPattern(a,this,(0,s.getCurrentTransformInverse)(a),o);y=(0,s.getCurrentTransform)(a),a.restore(),a.fillStyle=t}let w=e.lineWidth;const k=e.textMatrixScale;if(0===k||0===w){const t=e.textRenderingMode&n.TextRenderingMode.FILL_STROKE_MASK;t!==n.TextRenderingMode.STROKE&&t!==n.TextRenderingMode.FILL_STROKE||(w=this.getSinglePixelWidth())}else w/=k;if(1!==l&&(a.scale(l,l),w/=l),a.lineWidth=w,i.isInvalidPDFjsFont){const i=[];let n=0;for(const e of t)i.push(e.unicode),n+=e.width;return a.fillText(i.join(""),0,0),e.x+=n*b*u,a.restore(),void this.compose()}let x,E=0;for(x=0;x<p;++x){const e=t[x];if("number"==typeof e){E+=f*e*r/1e3;continue}let n=!1;const s=(e.isSpace?d:0)+c,o=e.fontChar,u=e.accent;let p,w,k=e.width;if(g){const t=e.vmetric||m,i=-(e.vmetric?t[1]:.5*k)*b,n=t[2]*b;k=t?-t[0]:k,p=i/l,w=(E+n)/l}else p=E/l,w=0;if(i.remeasure&&k>0){const t=1e3*a.measureText(o).width/r*l;if(k<t&&this.isFontSubpixelAAEnabled){const e=k/t;n=!0,a.save(),a.scale(e,1),p/=e}else k!==t&&(p+=(k-t)/2e3*r/l)}if(this.contentVisible&&(e.isInFont||i.missingFile))if(v&&!u)a.fillText(o,p,w);else if(this.paintChar(o,p,w,y),u){const t=p+r*u.offset.x/l,e=w-r*u.offset.y/l;this.paintChar(u.fontChar,t,e,y)}E+=g?k*b-s*h:k*b+s*h,n&&a.restore()}g?e.y-=E:e.x+=E*u,a.restore(),this.compose()}showType3Text(t){const e=this.ctx,i=this.current,s=i.font,o=i.fontSize,r=i.fontDirection,a=s.vertical?1:-1,l=i.charSpacing,c=i.wordSpacing,d=i.textHScale*r,h=i.fontMatrix||n.FONT_IDENTITY_MATRIX,u=t.length;let p,g,f,m;if(i.textRenderingMode!==n.TextRenderingMode.INVISIBLE&&0!==o){for(this._cachedScaleForStroking[0]=-1,this._cachedGetSinglePixelWidth=null,e.save(),e.transform(...i.textMatrix),e.translate(i.x,i.y),e.scale(d,r),p=0;p<u;++p){if(g=t[p],"number"==typeof g){m=a*g*o/1e3,this.ctx.translate(m,0),i.x+=m*d;continue}const r=(g.isSpace?c:0)+l,u=s.charProcOperatorList[g.operatorListId];u?(this.contentVisible&&(this.processingType3=g,this.save(),e.scale(o,o),e.transform(...h),this.executeOperatorList(u),this.restore()),f=n.Util.applyTransform([g.width,0],h)[0]*o+r,e.translate(f,0),i.x+=f*d):(0,n.warn)(`Type3 character "${g.operatorListId}" is not available.`)}e.restore(),this.processingType3=null}}setCharWidth(t,e){}setCharWidthAndBounds(t,e,i,n,s,o){this.ctx.rect(i,n,s-i,o-n),this.ctx.clip(),this.endPath()}getColorN_Pattern(t){let e;if("TilingPattern"===t[0]){const i=t[1],n=this.baseTransform||(0,s.getCurrentTransform)(this.ctx),o={createCanvasGraphics:t=>new R(t,this.commonObjs,this.objs,this.canvasFactory,this.filterFactory,{optionalContentConfig:this.optionalContentConfig,markedContentStack:this.markedContentStack})};e=new f(t,i,this.ctx,o,n)}else e=this._getPattern(t[1],t[2]);return e}setStrokeColorN(){this.current.strokeColor=this.getColorN_Pattern(arguments)}setFillColorN(){this.current.fillColor=this.getColorN_Pattern(arguments),this.current.patternFill=!0}setStrokeRGBColor(t,e,i){const s=n.Util.makeHexColor(t,e,i);this.ctx.strokeStyle=s,this.current.strokeColor=s}setFillRGBColor(t,e,i){const s=n.Util.makeHexColor(t,e,i);this.ctx.fillStyle=s,this.current.fillColor=s,this.current.patternFill=!1}_getPattern(t,e=null){let i;return this.cachedPatterns.has(t)?i=this.cachedPatterns.get(t):(i=function(t){switch(t[0]){case"RadialAxial":return new d(t);case"Mesh":return new p(t);case"Dummy":return new g}throw new Error(`Unknown IR type: ${t[0]}`)}(this.getObject(t)),this.cachedPatterns.set(t,i)),e&&(i.matrix=e),i}shadingFill(t){if(!this.contentVisible)return;const e=this.ctx;this.save();const i=this._getPattern(t);e.fillStyle=i.getPattern(e,this,(0,s.getCurrentTransformInverse)(e),a);const o=(0,s.getCurrentTransformInverse)(e);if(o){const{width:t,height:i}=e.canvas,[s,r,a,l]=n.Util.getAxialAlignedBoundingBox([0,0,t,i],o);this.ctx.fillRect(s,r,a-s,l-r)}else this.ctx.fillRect(-1e10,-1e10,2e10,2e10);this.compose(this.current.getClippedPathBoundingBox()),this.restore()}beginInlineImage(){(0,n.unreachable)("Should not call beginInlineImage")}beginImageData(){(0,n.unreachable)("Should not call beginImageData")}paintFormXObjectBegin(t,e){if(this.contentVisible&&(this.save(),this.baseTransformStack.push(this.baseTransform),Array.isArray(t)&&6===t.length&&this.transform(...t),this.baseTransform=(0,s.getCurrentTransform)(this.ctx),e)){const t=e[2]-e[0],i=e[3]-e[1];this.ctx.rect(e[0],e[1],t,i),this.current.updateRectMinMax((0,s.getCurrentTransform)(this.ctx),e),this.clip(),this.endPath()}}paintFormXObjectEnd(){this.contentVisible&&(this.restore(),this.baseTransform=this.baseTransformStack.pop())}beginGroup(t){if(!this.contentVisible)return;this.save(),this.inSMaskMode&&(this.endSMaskMode(),this.current.activeSMask=null);const e=this.ctx;t.isolated||(0,n.info)("TODO: Support non-isolated groups."),t.knockout&&(0,n.warn)("Knockout groups not supported.");const i=(0,s.getCurrentTransform)(e);if(t.matrix&&e.transform(...t.matrix),!t.bbox)throw new Error("Bounding box is required.");let o=n.Util.getAxialAlignedBoundingBox(t.bbox,(0,s.getCurrentTransform)(e));const r=[0,0,e.canvas.width,e.canvas.height];o=n.Util.intersect(o,r)||[0,0,0,0];const a=Math.floor(o[0]),l=Math.floor(o[1]);let c=Math.max(Math.ceil(o[2])-a,1),d=Math.max(Math.ceil(o[3])-l,1),h=1,u=1;c>b&&(h=c/b,c=b),d>b&&(u=d/b,d=b),this.current.startNewPathAndClipBox([0,0,c,d]);let p="groupAt"+this.groupLevel;t.smask&&(p+="_smask_"+this.smaskCounter++%2);const g=this.cachedCanvases.getCanvas(p,c,d),f=g.context;f.scale(1/h,1/u),f.translate(-a,-l),f.transform(...i),t.smask?this.smaskStack.push({canvas:g.canvas,context:f,offsetX:a,offsetY:l,scaleX:h,scaleY:u,subtype:t.smask.subtype,backdrop:t.smask.backdrop,transferMap:t.smask.transferMap||null,startTransformInverse:null}):(e.setTransform(1,0,0,1,0,0),e.translate(a,l),e.scale(h,u),e.save()),C(e,f),this.ctx=f,this.setGState([["BM","source-over"],["ca",1],["CA",1]]),this.groupStack.push(e),this.groupLevel++}endGroup(t){if(!this.contentVisible)return;this.groupLevel--;const e=this.ctx,i=this.groupStack.pop();if(this.ctx=i,this.ctx.imageSmoothingEnabled=!1,t.smask)this.tempSMask=this.smaskStack.pop(),this.restore();else{this.ctx.restore();const t=(0,s.getCurrentTransform)(this.ctx);this.restore(),this.ctx.save(),this.ctx.setTransform(...t);const i=n.Util.getAxialAlignedBoundingBox([0,0,e.canvas.width,e.canvas.height],t);this.ctx.drawImage(e.canvas,0,0),this.ctx.restore(),this.compose(i)}}beginAnnotation(t,e,i,o,r){if(this.#ot(),A(this.ctx),this.ctx.save(),this.save(),this.baseTransform&&this.ctx.setTransform(...this.baseTransform),Array.isArray(e)&&4===e.length){const o=e[2]-e[0],a=e[3]-e[1];if(r&&this.annotationCanvasMap){(i=i.slice())[4]-=e[0],i[5]-=e[1],(e=e.slice())[0]=e[1]=0,e[2]=o,e[3]=a;const[r,l]=n.Util.singularValueDecompose2dScale((0,s.getCurrentTransform)(this.ctx)),{viewportScale:c}=this,d=Math.ceil(o*this.outputScaleX*c),h=Math.ceil(a*this.outputScaleY*c);this.annotationCanvas=this.canvasFactory.create(d,h);const{canvas:u,context:p}=this.annotationCanvas;this.annotationCanvasMap.set(t,u),this.annotationCanvas.savedCtx=this.ctx,this.ctx=p,this.ctx.save(),this.ctx.setTransform(r,0,0,-l,0,a*l),A(this.ctx)}else A(this.ctx),this.ctx.rect(e[0],e[1],o,a),this.ctx.clip(),this.endPath()}this.current=new k(this.ctx.canvas.width,this.ctx.canvas.height),this.transform(...i),this.transform(...o)}endAnnotation(){this.annotationCanvas&&(this.ctx.restore(),this.#rt(),this.ctx=this.annotationCanvas.savedCtx,delete this.annotationCanvas.savedCtx,delete this.annotationCanvas)}paintImageMaskXObject(t){if(!this.contentVisible)return;const e=t.count;(t=this.getObject(t.data,t)).count=e;const i=this.ctx,n=this.processingType3;if(n&&(void 0===n.compiled&&(n.compiled=function(t){const{width:e,height:i}=t;if(e>1e3||i>1e3)return null;const n=new Uint8Array([0,2,4,0,1,0,5,4,8,10,0,8,0,2,1,0]),s=e+1;let o,r,a,l=new Uint8Array(s*(i+1));const c=e+7&-8;let d=new Uint8Array(c*i),h=0;for(const e of t.data){let t=128;for(;t>0;)d[h++]=e&t?0:255,t>>=1}let u=0;for(h=0,0!==d[h]&&(l[0]=1,++u),r=1;r<e;r++)d[h]!==d[h+1]&&(l[r]=d[h]?2:1,++u),h++;for(0!==d[h]&&(l[r]=2,++u),o=1;o<i;o++){h=o*c,a=o*s,d[h-c]!==d[h]&&(l[a]=d[h]?1:8,++u);let t=(d[h]?4:0)+(d[h-c]?8:0);for(r=1;r<e;r++)t=(t>>2)+(d[h+1]?4:0)+(d[h-c+1]?8:0),n[t]&&(l[a+r]=n[t],++u),h++;if(d[h-c]!==d[h]&&(l[a+r]=d[h]?2:4,++u),u>1e3)return null}for(h=c*(i-1),a=o*s,0!==d[h]&&(l[a]=8,++u),r=1;r<e;r++)d[h]!==d[h+1]&&(l[a+r]=d[h]?4:8,++u),h++;if(0!==d[h]&&(l[a+r]=4,++u),u>1e3)return null;const p=new Int32Array([0,s,-1,0,-s,0,0,0,1]),g=new Path2D;for(o=0;u&&o<=i;o++){let t=o*s;const i=t+e;for(;t<i&&!l[t];)t++;if(t===i)continue;g.moveTo(t%s,o);const n=t;let r=l[t];do{const e=p[r];do{t+=e}while(!l[t]);const i=l[t];5!==i&&10!==i?(r=i,l[t]=0):(r=i&51*r>>4,l[t]&=r>>2|r<<2),g.lineTo(t%s,t/s|0),l[t]||--u}while(n!==t);--o}return d=null,l=null,function(t){t.save(),t.scale(1/e,-1/i),t.translate(0,-i),t.fill(g),t.beginPath(),t.restore()}}(t)),n.compiled))return void n.compiled(i);const s=this._createMaskCanvas(t),o=s.canvas;i.save(),i.setTransform(1,0,0,1,0,0),i.drawImage(o,s.offsetX,s.offsetY),i.restore(),this.compose()}paintImageMaskXObjectRepeat(t,e,i=0,o=0,r,a){if(!this.contentVisible)return;t=this.getObject(t.data,t);const l=this.ctx;l.save();const c=(0,s.getCurrentTransform)(l);l.transform(e,i,o,r,0,0);const d=this._createMaskCanvas(t);l.setTransform(1,0,0,1,d.offsetX-c[4],d.offsetY-c[5]);for(let t=0,s=a.length;t<s;t+=2){const s=n.Util.transform(c,[e,i,o,r,a[t],a[t+1]]),[h,u]=n.Util.applyTransform([0,0],s);l.drawImage(d.canvas,h,u)}l.restore(),this.compose()}paintImageMaskXObjectGroup(t){if(!this.contentVisible)return;const e=this.ctx,i=this.current.fillColor,n=this.current.patternFill;for(const r of t){const{data:t,width:a,height:l,transform:c}=r,d=this.cachedCanvases.getCanvas("maskCanvas",a,l),h=d.context;h.save(),E(h,this.getObject(t,r)),h.globalCompositeOperation="source-in",h.fillStyle=n?i.getPattern(h,this,(0,s.getCurrentTransformInverse)(e),o):i,h.fillRect(0,0,a,l),h.restore(),e.save(),e.transform(...c),e.scale(1,-1),w(e,d.canvas,0,0,a,l,0,-1,1,1),e.restore()}this.compose()}paintImageXObject(t){if(!this.contentVisible)return;const e=this.getObject(t);e?this.paintInlineImageXObject(e):(0,n.warn)("Dependent image isn't ready yet")}paintImageXObjectRepeat(t,e,i,s){if(!this.contentVisible)return;const o=this.getObject(t);if(!o)return void(0,n.warn)("Dependent image isn't ready yet");const r=o.width,a=o.height,l=[];for(let t=0,n=s.length;t<n;t+=2)l.push({transform:[e,0,0,i,s[t],s[t+1]],x:0,y:0,w:r,h:a});this.paintInlineImageXObjectGroup(o,l)}applyTransferMapsToCanvas(t){return"none"!==this.current.transferMaps&&(t.filter=this.current.transferMaps,t.drawImage(t.canvas,0,0),t.filter="none"),t.canvas}applyTransferMapsToBitmap(t){if("none"===this.current.transferMaps)return t.bitmap;const{bitmap:e,width:i,height:n}=t,s=this.cachedCanvases.getCanvas("inlineImage",i,n),o=s.context;return o.filter=this.current.transferMaps,o.drawImage(e,0,0),o.filter="none",s.canvas}paintInlineImageXObject(t){if(!this.contentVisible)return;const e=t.width,i=t.height,o=this.ctx;if(this.save(),!n.isNodeJS){const{filter:t}=o;"none"!==t&&""!==t&&(o.filter="none")}let r;if(o.scale(1/e,-1/i),t.bitmap)r=this.applyTransferMapsToBitmap(t);else if("function"==typeof HTMLElement&&t instanceof HTMLElement||!t.data)r=t;else{const n=this.cachedCanvases.getCanvas("inlineImage",e,i).context;x(n,t),r=this.applyTransferMapsToCanvas(n)}const a=this._scaleImage(r,(0,s.getCurrentTransformInverse)(o));o.imageSmoothingEnabled=M((0,s.getCurrentTransform)(o),t.interpolate),w(o,a.img,0,0,a.paintWidth,a.paintHeight,0,-i,e,i),this.compose(),this.restore()}paintInlineImageXObjectGroup(t,e){if(!this.contentVisible)return;const i=this.ctx;let n;if(t.bitmap)n=t.bitmap;else{const e=t.width,i=t.height,s=this.cachedCanvases.getCanvas("inlineImage",e,i).context;x(s,t),n=this.applyTransferMapsToCanvas(s)}for(const t of e)i.save(),i.transform(...t.transform),i.scale(1,-1),w(i,n,t.x,t.y,t.w,t.h,0,-1,1,1),i.restore();this.compose()}paintSolidColorImageMask(){this.contentVisible&&(this.ctx.fillRect(0,0,1,1),this.compose())}markPoint(t){}markPointProps(t,e){}beginMarkedContent(t){this.markedContentStack.push({visible:!0})}beginMarkedContentProps(t,e){"OC"===t?this.markedContentStack.push({visible:this.optionalContentConfig.isVisible(e)}):this.markedContentStack.push({visible:!0}),this.contentVisible=this.isContentVisible()}endMarkedContent(){this.markedContentStack.pop(),this.contentVisible=this.isContentVisible()}beginCompat(){}endCompat(){}consumePath(t){const e=this.current.isEmptyClip();this.pendingClip&&this.current.updateClipFromPath(),this.pendingClip||this.compose(t);const i=this.ctx;this.pendingClip&&(e||(this.pendingClip===P?i.clip("evenodd"):i.clip()),this.pendingClip=null),this.current.startNewPathAndClipBox(this.current.clipBox),i.beginPath()}getSinglePixelWidth(){if(!this._cachedGetSinglePixelWidth){const t=(0,s.getCurrentTransform)(this.ctx);if(0===t[1]&&0===t[2])this._cachedGetSinglePixelWidth=1/Math.min(Math.abs(t[0]),Math.abs(t[3]));else{const e=Math.abs(t[0]*t[3]-t[2]*t[1]),i=Math.hypot(t[0],t[2]),n=Math.hypot(t[1],t[3]);this._cachedGetSinglePixelWidth=Math.max(i,n)/e}}return this._cachedGetSinglePixelWidth}getScaleForStroking(){if(-1===this._cachedScaleForStroking[0]){const{lineWidth:t}=this.current,{a:e,b:i,c:n,d:s}=this.ctx.getTransform();let o,r;if(0===i&&0===n){const i=Math.abs(e),n=Math.abs(s);if(i===n)if(0===t)o=r=1/i;else{const e=i*t;o=r=e<1?1/e:1}else if(0===t)o=1/i,r=1/n;else{const e=i*t,s=n*t;o=e<1?1/e:1,r=s<1?1/s:1}}else{const a=Math.abs(e*s-i*n),l=Math.hypot(e,i),c=Math.hypot(n,s);if(0===t)o=c/a,r=l/a;else{const e=t*a;o=c>e?c/e:1,r=l>e?l/e:1}}this._cachedScaleForStroking[0]=o,this._cachedScaleForStroking[1]=r}return this._cachedScaleForStroking}rescaleAndStroke(t){const{ctx:e}=this,{lineWidth:i}=this.current,[n,s]=this.getScaleForStroking();if(e.lineWidth=i||1,1===n&&1===s)return void e.stroke();const o=e.getLineDash();if(t&&e.save(),e.scale(n,s),o.length>0){const t=Math.max(n,s);e.setLineDash(o.map((e=>e/t))),e.lineDashOffset/=t}e.stroke(),t&&e.restore()}isContentVisible(){for(let t=this.markedContentStack.length-1;t>=0;t--)if(!this.markedContentStack[t].visible)return!1;return!0}}for(const t in n.OPS)void 0!==R.prototype[t]&&(R.prototype[n.OPS[t]]=R.prototype[t])},473:(t,e,i)=>{i.d(e,{DOMCMapReaderFactory:()=>d,DOMCanvasFactory:()=>l,DOMFilterFactory:()=>a,DOMSVGFactory:()=>u,DOMStandardFontDataFactory:()=>h,PDFDateString:()=>E,PageViewport:()=>p,PixelsPerInch:()=>r,RenderingCancelledException:()=>g,StatTimer:()=>y,fetchData:()=>c,getColorValues:()=>S,getCurrentTransform:()=>_,getCurrentTransformInverse:()=>T,getFilenameFromUrl:()=>b,getPdfFilenameFromUrl:()=>v,getRGB:()=>A,getXfaPageViewport:()=>C,isDataScheme:()=>f,isPdfFile:()=>m,isValidFetchUrl:()=>w,noContextMenu:()=>k,setLayerDimensions:()=>M});var n=i(822),s=i(266);const o="http://www.w3.org/2000/svg";class r{static CSS=96;static PDF=72;static PDF_TO_CSS_UNITS=this.CSS/this.PDF}class a extends n.BaseFilterFactory{#at;#lt;#U;#ct;#dt;#ht;#ut;#pt;#gt;#ft;#mt=0;constructor({docId:t,ownerDocument:e=globalThis.document}={}){super(),this.#U=t,this.#ct=e}get#bt(){return this.#at||=new Map}get#vt(){if(!this.#lt){const t=this.#ct.createElement("div"),{style:e}=t;e.visibility="hidden",e.contain="strict",e.width=e.height=0,e.position="absolute",e.top=e.left=0,e.zIndex=-1;const i=this.#ct.createElementNS(o,"svg");i.setAttribute("width",0),i.setAttribute("height",0),this.#lt=this.#ct.createElementNS(o,"defs"),t.append(i),i.append(this.#lt),this.#ct.body.append(t)}return this.#lt}addFilter(t){if(!t)return"none";let e,i,n,s,o=this.#bt.get(t);if(o)return o;if(1===t.length){const o=t[0],r=new Array(256);for(let t=0;t<256;t++)r[t]=o[t]/255;s=e=i=n=r.join(",")}else{const[o,r,a]=t,l=new Array(256),c=new Array(256),d=new Array(256);for(let t=0;t<256;t++)l[t]=o[t]/255,c[t]=r[t]/255,d[t]=a[t]/255;e=l.join(","),i=c.join(","),n=d.join(","),s=`${e}${i}${n}`}if(o=this.#bt.get(s),o)return this.#bt.set(t,o),o;const r=`g_${this.#U}_transfer_map_${this.#mt++}`,a=`url(#${r})`;this.#bt.set(t,a),this.#bt.set(s,a);const l=this.#yt(r);return this.#wt(e,i,n,l),a}addHCMFilter(t,e){const i=`${t}-${e}`;if(this.#ht===i)return this.#ut;if(this.#ht=i,this.#ut="none",this.#dt?.remove(),!t||!e)return this.#ut;const n=this.#kt(t);t=s.Util.makeHexColor(...n);const o=this.#kt(e);if(e=s.Util.makeHexColor(...o),this.#vt.style.color="","#000000"===t&&"#ffffff"===e||t===e)return this.#ut;const r=new Array(256);for(let t=0;t<=255;t++){const e=t/255;r[t]=e<=.03928?e/12.92:((e+.055)/1.055)**2.4}const a=r.join(","),l=`g_${this.#U}_hcm_filter`,c=this.#pt=this.#yt(l);this.#wt(a,a,a,c),this.#xt(c);const d=(t,e)=>{const i=n[t]/255,s=o[t]/255,r=new Array(e+1);for(let t=0;t<=e;t++)r[t]=i+t/e*(s-i);return r.join(",")};return this.#wt(d(0,5),d(1,5),d(2,5),c),this.#ut=`url(#${l})`,this.#ut}addHighlightHCMFilter(t,e,i,n){const s=`${t}-${e}-${i}-${n}`;if(this.#gt===s)return this.#ft;if(this.#gt=s,this.#ft="none",this.#pt?.remove(),!t||!e)return this.#ft;const[o,r]=[t,e].map(this.#kt.bind(this));let a=Math.round(.2126*o[0]+.7152*o[1]+.0722*o[2]),l=Math.round(.2126*r[0]+.7152*r[1]+.0722*r[2]),[c,d]=[i,n].map(this.#kt.bind(this));l<a&&([a,l,c,d]=[l,a,d,c]),this.#vt.style.color="";const h=(t,e,i)=>{const n=new Array(256),s=(l-a)/i,o=t/255,r=(e-t)/(255*i);let c=0;for(let t=0;t<=i;t++){const e=Math.round(a+t*s),i=o+t*r;for(let t=c;t<=e;t++)n[t]=i;c=e+1}for(let t=c;t<256;t++)n[t]=n[c-1];return n.join(",")},u=`g_${this.#U}_hcm_highlight_filter`,p=this.#pt=this.#yt(u);return this.#xt(p),this.#wt(h(c[0],d[0],5),h(c[1],d[1],5),h(c[2],d[2],5),p),this.#ft=`url(#${u})`,this.#ft}destroy(t=!1){t&&(this.#ut||this.#ft)||(this.#lt&&(this.#lt.parentNode.parentNode.remove(),this.#lt=null),this.#at&&(this.#at.clear(),this.#at=null),this.#mt=0)}#xt(t){const e=this.#ct.createElementNS(o,"feColorMatrix");e.setAttribute("type","matrix"),e.setAttribute("values","0.2126 0.7152 0.0722 0 0 0.2126 0.7152 0.0722 0 0 0.2126 0.7152 0.0722 0 0 0 0 0 1 0"),t.append(e)}#yt(t){const e=this.#ct.createElementNS(o,"filter");return e.setAttribute("color-interpolation-filters","sRGB"),e.setAttribute("id",t),this.#vt.append(e),e}#Et(t,e,i){const n=this.#ct.createElementNS(o,e);n.setAttribute("type","discrete"),n.setAttribute("tableValues",i),t.append(n)}#wt(t,e,i,n){const s=this.#ct.createElementNS(o,"feComponentTransfer");n.append(s),this.#Et(s,"feFuncR",t),this.#Et(s,"feFuncG",e),this.#Et(s,"feFuncB",i)}#kt(t){return this.#vt.style.color=t,A(getComputedStyle(this.#vt).getPropertyValue("color"))}}class l extends n.BaseCanvasFactory{constructor({ownerDocument:t=globalThis.document}={}){super(),this._document=t}_createCanvas(t,e){const i=this._document.createElement("canvas");return i.width=t,i.height=e,i}}async function c(t,e="text"){if(w(t,document.baseURI)){const i=await fetch(t);if(!i.ok)throw new Error(i.statusText);switch(e){case"arraybuffer":return i.arrayBuffer();case"blob":return i.blob();case"json":return i.json()}return i.text()}return new Promise(((i,n)=>{const s=new XMLHttpRequest;s.open("GET",t,!0),s.responseType=e,s.onreadystatechange=()=>{if(s.readyState===XMLHttpRequest.DONE){if(200===s.status||0===s.status){let t;switch(e){case"arraybuffer":case"blob":case"json":t=s.response;break;default:t=s.responseText}if(t)return void i(t)}n(new Error(s.statusText))}},s.send(null)}))}class d extends n.BaseCMapReaderFactory{_fetchData(t,e){return c(t,this.isCompressed?"arraybuffer":"text").then((t=>({cMapData:t instanceof ArrayBuffer?new Uint8Array(t):(0,s.stringToBytes)(t),compressionType:e})))}}class h extends n.BaseStandardFontDataFactory{_fetchData(t){return c(t,"arraybuffer").then((t=>new Uint8Array(t)))}}class u extends n.BaseSVGFactory{_createSVG(t){return document.createElementNS(o,t)}}class p{constructor({viewBox:t,scale:e,rotation:i,offsetX:n=0,offsetY:s=0,dontFlip:o=!1}){this.viewBox=t,this.scale=e,this.rotation=i,this.offsetX=n,this.offsetY=s;const r=(t[2]+t[0])/2,a=(t[3]+t[1])/2;let l,c,d,h,u,p,g,f;switch((i%=360)<0&&(i+=360),i){case 180:l=-1,c=0,d=0,h=1;break;case 90:l=0,c=1,d=1,h=0;break;case 270:l=0,c=-1,d=-1,h=0;break;case 0:l=1,c=0,d=0,h=-1;break;default:throw new Error("PageViewport: Invalid rotation, must be a multiple of 90 degrees.")}o&&(d=-d,h=-h),0===l?(u=Math.abs(a-t[1])*e+n,p=Math.abs(r-t[0])*e+s,g=(t[3]-t[1])*e,f=(t[2]-t[0])*e):(u=Math.abs(r-t[0])*e+n,p=Math.abs(a-t[1])*e+s,g=(t[2]-t[0])*e,f=(t[3]-t[1])*e),this.transform=[l*e,c*e,d*e,h*e,u-l*e*r-d*e*a,p-c*e*r-h*e*a],this.width=g,this.height=f}get rawDims(){const{viewBox:t}=this;return(0,s.shadow)(this,"rawDims",{pageWidth:t[2]-t[0],pageHeight:t[3]-t[1],pageX:t[0],pageY:t[1]})}clone({scale:t=this.scale,rotation:e=this.rotation,offsetX:i=this.offsetX,offsetY:n=this.offsetY,dontFlip:s=!1}={}){return new p({viewBox:this.viewBox.slice(),scale:t,rotation:e,offsetX:i,offsetY:n,dontFlip:s})}convertToViewportPoint(t,e){return s.Util.applyTransform([t,e],this.transform)}convertToViewportRectangle(t){const e=s.Util.applyTransform([t[0],t[1]],this.transform),i=s.Util.applyTransform([t[2],t[3]],this.transform);return[e[0],e[1],i[0],i[1]]}convertToPdfPoint(t,e){return s.Util.applyInverseTransform([t,e],this.transform)}}class g extends s.BaseException{constructor(t,e=0){super(t,"RenderingCancelledException"),this.extraDelay=e}}function f(t){const e=t.length;let i=0;for(;i<e&&""===t[i].trim();)i++;return"data:"===t.substring(i,i+5).toLowerCase()}function m(t){return"string"==typeof t&&/\.pdf$/i.test(t)}function b(t,e=!1){return e||([t]=t.split(/[#?]/,1)),t.substring(t.lastIndexOf("/")+1)}function v(t,e="document.pdf"){if("string"!=typeof t)return e;if(f(t))return(0,s.warn)('getPdfFilenameFromUrl: ignore "data:"-URL for performance reasons.'),e;const i=/[^/?#=]+\.pdf\b(?!.*\.pdf\b)/i,n=/^(?:(?:[^:]+:)?\/\/[^/]+)?([^?#]*)(\?[^#]*)?(#.*)?$/.exec(t);let o=i.exec(n[1])||i.exec(n[2])||i.exec(n[3]);if(o&&(o=o[0],o.includes("%")))try{o=i.exec(decodeURIComponent(o))[0]}catch{}return o||e}class y{started=Object.create(null);times=[];time(t){t in this.started&&(0,s.warn)(`Timer is already running for ${t}`),this.started[t]=Date.now()}timeEnd(t){t in this.started||(0,s.warn)(`Timer has not been started for ${t}`),this.times.push({name:t,start:this.started[t],end:Date.now()}),delete this.started[t]}toString(){const t=[];let e=0;for(const{name:t}of this.times)e=Math.max(t.length,e);for(const{name:i,start:n,end:s}of this.times)t.push(`${i.padEnd(e)} ${s-n}ms\n`);return t.join("")}}function w(t,e){try{const{protocol:i}=e?new URL(t,e):new URL(t);return"http:"===i||"https:"===i}catch{return!1}}function k(t){t.preventDefault()}let x;class E{static toDateObject(t){if(!t||"string"!=typeof t)return null;x||=new RegExp("^D:(\\d{4})(\\d{2})?(\\d{2})?(\\d{2})?(\\d{2})?(\\d{2})?([Z|+|-])?(\\d{2})?'?(\\d{2})?'?");const e=x.exec(t);if(!e)return null;const i=parseInt(e[1],10);let n=parseInt(e[2],10);n=n>=1&&n<=12?n-1:0;let s=parseInt(e[3],10);s=s>=1&&s<=31?s:1;let o=parseInt(e[4],10);o=o>=0&&o<=23?o:0;let r=parseInt(e[5],10);r=r>=0&&r<=59?r:0;let a=parseInt(e[6],10);a=a>=0&&a<=59?a:0;const l=e[7]||"Z";let c=parseInt(e[8],10);c=c>=0&&c<=23?c:0;let d=parseInt(e[9],10)||0;return d=d>=0&&d<=59?d:0,"-"===l?(o+=c,r+=d):"+"===l&&(o-=c,r-=d),new Date(Date.UTC(i,n,s,o,r,a))}}function C(t,{scale:e=1,rotation:i=0}){const{width:n,height:s}=t.attributes.style,o=[0,0,parseInt(n),parseInt(s)];return new p({viewBox:o,scale:e,rotation:i})}function A(t){if(t.startsWith("#")){const e=parseInt(t.slice(1),16);return[(16711680&e)>>16,(65280&e)>>8,255&e]}return t.startsWith("rgb(")?t.slice(4,-1).split(",").map((t=>parseInt(t))):t.startsWith("rgba(")?t.slice(5,-1).split(",").map((t=>parseInt(t))).slice(0,3):((0,s.warn)(`Not a valid color format: "${t}"`),[0,0,0])}function S(t){const e=document.createElement("span");e.style.visibility="hidden",document.body.append(e);for(const i of t.keys()){e.style.color=i;const n=window.getComputedStyle(e).color;t.set(i,A(n))}e.remove()}function _(t){const{a:e,b:i,c:n,d:s,e:o,f:r}=t.getTransform();return[e,i,n,s,o,r]}function T(t){const{a:e,b:i,c:n,d:s,e:o,f:r}=t.getTransform().invertSelf();return[e,i,n,s,o,r]}function M(t,e,i=!1,n=!0){if(e instanceof p){const{pageWidth:n,pageHeight:o}=e.rawDims,{style:r}=t,a=s.FeatureTest.isCSSRoundSupported,l=`var(--scale-factor) * ${n}px`,c=`var(--scale-factor) * ${o}px`,d=a?`round(${l}, 1px)`:`calc(${l})`,h=a?`round(${c}, 1px)`:`calc(${c})`;i&&e.rotation%180!=0?(r.width=h,r.height=d):(r.width=d,r.height=h)}n&&t.setAttribute("data-main-rotation",e.rotation)}},423:(t,e,i)=>{i.d(e,{DrawLayer:()=>o});var n=i(473),s=i(266);class o{#b=null;#mt=0;#Ct=new Map;constructor({pageIndex:t}){this.pageIndex=t}setParent(t){if(this.#b){if(this.#b!==t){if(this.#Ct.size>0)for(const e of this.#Ct.values())e.remove(),t.append(e);this.#b=t}}else this.#b=t}static get _svgFactory(){return(0,s.shadow)(this,"_svgFactory",new n.DOMSVGFactory)}static#At(t,{x:e,y:i,width:n,height:s}){const{style:o}=t;o.top=100*i+"%",o.left=100*e+"%",o.width=100*n+"%",o.height=100*s+"%"}#St(t){const e=o._svgFactory.create(1,1,!0);return this.#b.append(e),o.#At(e,t),e}highlight({outlines:t,box:e},i,n){const s=this.#mt++,r=this.#St(e);r.classList.add("highlight");const a=o._svgFactory.createElement("defs");r.append(a);const l=o._svgFactory.createElement("path");a.append(l);const c=`path_p${this.pageIndex}_${s}`;l.setAttribute("id",c),l.setAttribute("d",o.#_t(t));const d=o._svgFactory.createElement("clipPath");a.append(d);const h=`clip_${c}`;d.setAttribute("id",h),d.setAttribute("clipPathUnits","objectBoundingBox");const u=o._svgFactory.createElement("use");d.append(u),u.setAttribute("href",`#${c}`),u.classList.add("clip");const p=o._svgFactory.createElement("use");return r.append(p),r.setAttribute("fill",i),r.setAttribute("fill-opacity",n),p.setAttribute("href",`#${c}`),this.#Ct.set(s,r),{id:s,clipPathId:`url(#${h})`}}highlightOutline({outlines:t,box:e}){const i=this.#mt++,n=this.#St(e);n.classList.add("highlightOutline");const s=o._svgFactory.createElement("defs");n.append(s);const r=o._svgFactory.createElement("path");s.append(r);const a=`path_p${this.pageIndex}_${i}`;r.setAttribute("id",a),r.setAttribute("d",o.#_t(t)),r.setAttribute("vector-effect","non-scaling-stroke");const l=o._svgFactory.createElement("use");n.append(l),l.setAttribute("href",`#${a}`);const c=l.cloneNode();return n.append(c),l.classList.add("mainOutline"),c.classList.add("secondaryOutline"),this.#Ct.set(i,n),i}static#_t(t){const e=[];for(const i of t){let[t,n]=i;e.push(`M${t} ${n}`);for(let s=2;s<i.length;s+=2){const o=i[s],r=i[s+1];o===t?(e.push(`V${r}`),n=r):r===n&&(e.push(`H${o}`),t=o)}e.push("Z")}return e.join(" ")}updateBox(t,e){o.#At(this.#Ct.get(t),e)}rotate(t,e){this.#Ct.get(t).setAttribute("data-main-rotation",e)}changeColor(t,e){this.#Ct.get(t).setAttribute("fill",e)}changeOpacity(t,e){this.#Ct.get(t).setAttribute("fill-opacity",e)}addClass(t,e){this.#Ct.get(t).classList.add(e)}removeClass(t,e){this.#Ct.get(t).classList.remove(e)}remove(t){null!==this.#b&&(this.#Ct.get(t).remove(),this.#Ct.delete(t))}destroy(){this.#b=null;for(const t of this.#Ct.values())t.remove();this.#Ct.clear()}}},629:(t,e,i)=>{i.d(e,{AnnotationEditorLayer:()=>g});var n=i(266),s=i(115),o=i(812),r=i(640);class a extends s.AnnotationEditor{#Tt=this.editorDivBlur.bind(this);#Mt=this.editorDivFocus.bind(this);#It=this.editorDivInput.bind(this);#Lt=this.editorDivKeydown.bind(this);#u;#Bt="";#Pt=`${this.id}-editor`;#Rt;#Dt=null;static _freeTextDefaultContent="";static _internalPadding=0;static _defaultColor=null;static _defaultFontSize=10;static get _keyboardManager(){const t=a.prototype,e=t=>t.isEmpty(),i=o.AnnotationEditorUIManager.TRANSLATE_SMALL,s=o.AnnotationEditorUIManager.TRANSLATE_BIG;return(0,n.shadow)(this,"_keyboardManager",new o.KeyboardManager([[["ctrl+s","mac+meta+s","ctrl+p","mac+meta+p"],t.commitOrRemove,{bubbles:!0}],[["ctrl+Enter","mac+meta+Enter","Escape","mac+Escape"],t.commitOrRemove],[["ArrowLeft","mac+ArrowLeft"],t._translateEmpty,{args:[-i,0],checker:e}],[["ctrl+ArrowLeft","mac+shift+ArrowLeft"],t._translateEmpty,{args:[-s,0],checker:e}],[["ArrowRight","mac+ArrowRight"],t._translateEmpty,{args:[i,0],checker:e}],[["ctrl+ArrowRight","mac+shift+ArrowRight"],t._translateEmpty,{args:[s,0],checker:e}],[["ArrowUp","mac+ArrowUp"],t._translateEmpty,{args:[0,-i],checker:e}],[["ctrl+ArrowUp","mac+shift+ArrowUp"],t._translateEmpty,{args:[0,-s],checker:e}],[["ArrowDown","mac+ArrowDown"],t._translateEmpty,{args:[0,i],checker:e}],[["ctrl+ArrowDown","mac+shift+ArrowDown"],t._translateEmpty,{args:[0,s],checker:e}]]))}static _type="freetext";static _editorType=n.AnnotationEditorType.FREETEXT;constructor(t){super({...t,name:"freeTextEditor"}),this.#u=t.color||a._defaultColor||s.AnnotationEditor._defaultLineColor,this.#Rt=t.fontSize||a._defaultFontSize}static initialize(t){s.AnnotationEditor.initialize(t,{strings:["pdfjs-free-text-default-content"]});const e=getComputedStyle(document.documentElement);this._internalPadding=parseFloat(e.getPropertyValue("--freetext-padding"))}static updateDefaultParams(t,e){switch(t){case n.AnnotationEditorParamsType.FREETEXT_SIZE:a._defaultFontSize=e;break;case n.AnnotationEditorParamsType.FREETEXT_COLOR:a._defaultColor=e}}updateParams(t,e){switch(t){case n.AnnotationEditorParamsType.FREETEXT_SIZE:this.#Ot(e);break;case n.AnnotationEditorParamsType.FREETEXT_COLOR:this.#Ft(e)}}static get defaultPropertiesToUpdate(){return[[n.AnnotationEditorParamsType.FREETEXT_SIZE,a._defaultFontSize],[n.AnnotationEditorParamsType.FREETEXT_COLOR,a._defaultColor||s.AnnotationEditor._defaultLineColor]]}get propertiesToUpdate(){return[[n.AnnotationEditorParamsType.FREETEXT_SIZE,this.#Rt],[n.AnnotationEditorParamsType.FREETEXT_COLOR,this.#u]]}#Ot(t){const e=t=>{this.editorDiv.style.fontSize=`calc(${t}px * var(--scale-factor))`,this.translate(0,-(t-this.#Rt)*this.parentScale),this.#Rt=t,this.#Nt()},i=this.#Rt;this.addCommands({cmd:()=>{e(t)},undo:()=>{e(i)},mustExec:!0,type:n.AnnotationEditorParamsType.FREETEXT_SIZE,overwriteIfSameType:!0,keepUndo:!0})}#Ft(t){const e=this.#u;this.addCommands({cmd:()=>{this.#u=this.editorDiv.style.color=t},undo:()=>{this.#u=this.editorDiv.style.color=e},mustExec:!0,type:n.AnnotationEditorParamsType.FREETEXT_COLOR,overwriteIfSameType:!0,keepUndo:!0})}_translateEmpty(t,e){this._uiManager.translateSelectedEditors(t,e,!0)}getInitialTranslation(){const t=this.parentScale;return[-a._internalPadding*t,-(a._internalPadding+this.#Rt)*t]}rebuild(){this.parent&&(super.rebuild(),null!==this.div&&(this.isAttachedToDOM||this.parent.add(this)))}enableEditMode(){this.isInEditMode()||(this.parent.setEditingState(!1),this.parent.updateToolbar(n.AnnotationEditorType.FREETEXT),super.enableEditMode(),this.overlayDiv.classList.remove("enabled"),this.editorDiv.contentEditable=!0,this._isDraggable=!1,this.div.removeAttribute("aria-activedescendant"),this.editorDiv.addEventListener("keydown",this.#Lt),this.editorDiv.addEventListener("focus",this.#Mt),this.editorDiv.addEventListener("blur",this.#Tt),this.editorDiv.addEventListener("input",this.#It))}disableEditMode(){this.isInEditMode()&&(this.parent.setEditingState(!0),super.disableEditMode(),this.overlayDiv.classList.add("enabled"),this.editorDiv.contentEditable=!1,this.div.setAttribute("aria-activedescendant",this.#Pt),this._isDraggable=!0,this.editorDiv.removeEventListener("keydown",this.#Lt),this.editorDiv.removeEventListener("focus",this.#Mt),this.editorDiv.removeEventListener("blur",this.#Tt),this.editorDiv.removeEventListener("input",this.#It),this.div.focus({preventScroll:!0}),this.isEditing=!1,this.parent.div.classList.add("freetextEditing"))}focusin(t){this._focusEventsAllowed&&(super.focusin(t),t.target!==this.editorDiv&&this.editorDiv.focus())}onceAdded(){this.width?this.#Ht():(this.enableEditMode(),this.editorDiv.focus(),this._initialOptions?.isCentered&&this.center(),this._initialOptions=null)}isEmpty(){return!this.editorDiv||""===this.editorDiv.innerText.trim()}remove(){this.isEditing=!1,this.parent&&(this.parent.setEditingState(!0),this.parent.div.classList.add("freetextEditing")),super.remove()}#jt(){const t=this.editorDiv.getElementsByTagName("div");if(0===t.length)return this.editorDiv.innerText;const e=[];for(const i of t)e.push(i.innerText.replace(/\r\n?|\n/,""));return e.join("\n")}#Nt(){const[t,e]=this.parentDimensions;let i;if(this.isAttachedToDOM)i=this.div.getBoundingClientRect();else{const{currentLayer:t,div:e}=this,n=e.style.display;e.style.display="hidden",t.div.append(this.div),i=e.getBoundingClientRect(),e.remove(),e.style.display=n}this.rotation%180==this.parentRotation%180?(this.width=i.width/t,this.height=i.height/e):(this.width=i.height/t,this.height=i.width/e),this.fixAndSetPosition()}commit(){if(!this.isInEditMode())return;super.commit(),this.disableEditMode();const t=this.#Bt,e=this.#Bt=this.#jt().trimEnd();if(t===e)return;const i=t=>{this.#Bt=t,t?(this.#Ut(),this._uiManager.rebuild(this),this.#Nt()):this.remove()};this.addCommands({cmd:()=>{i(e)},undo:()=>{i(t)},mustExec:!1}),this.#Nt()}shouldGetKeyboardEvents(){return this.isInEditMode()}enterInEditMode(){this.enableEditMode(),this.editorDiv.focus()}dblclick(t){this.enterInEditMode()}keydown(t){t.target===this.div&&"Enter"===t.key&&(this.enterInEditMode(),t.preventDefault())}editorDivKeydown(t){a._keyboardManager.exec(this,t)}editorDivFocus(t){this.isEditing=!0}editorDivBlur(t){this.isEditing=!1}editorDivInput(t){this.parent.div.classList.toggle("freetextEditing",this.isEmpty())}disableEditing(){this.editorDiv.setAttribute("role","comment"),this.editorDiv.removeAttribute("aria-multiline")}enableEditing(){this.editorDiv.setAttribute("role","textbox"),this.editorDiv.setAttribute("aria-multiline",!0)}render(){if(this.div)return this.div;let t,e;this.width&&(t=this.x,e=this.y),super.render(),this.editorDiv=document.createElement("div"),this.editorDiv.className="internal",this.editorDiv.setAttribute("id",this.#Pt),this.editorDiv.setAttribute("data-l10n-id","pdfjs-free-text"),this.enableEditing(),s.AnnotationEditor._l10nPromise.get("pdfjs-free-text-default-content").then((t=>this.editorDiv?.setAttribute("default-content",t))),this.editorDiv.contentEditable=!0;const{style:i}=this.editorDiv;if(i.fontSize=`calc(${this.#Rt}px * var(--scale-factor))`,i.color=this.#u,this.div.append(this.editorDiv),this.overlayDiv=document.createElement("div"),this.overlayDiv.classList.add("overlay","enabled"),this.div.append(this.overlayDiv),(0,o.bindEvents)(this,this.div,["dblclick","keydown"]),this.width){const[i,n]=this.parentDimensions;if(this.annotationElementId){const{position:s}=this.#Dt;let[o,r]=this.getInitialTranslation();[o,r]=this.pageTranslationToScreen(o,r);const[a,l]=this.pageDimensions,[c,d]=this.pageTranslation;let h,u;switch(this.rotation){case 0:h=t+(s[0]-c)/a,u=e+this.height-(s[1]-d)/l;break;case 90:h=t+(s[0]-c)/a,u=e-(s[1]-d)/l,[o,r]=[r,-o];break;case 180:h=t-this.width+(s[0]-c)/a,u=e-(s[1]-d)/l,[o,r]=[-o,-r];break;case 270:h=t+(s[0]-c-this.height*l)/a,u=e+(s[1]-d-this.width*a)/l,[o,r]=[-r,o]}this.setAt(h*i,u*n,o,r)}else this.setAt(t*i,e*n,this.width*i,this.height*n);this.#Ut(),this._isDraggable=!0,this.editorDiv.contentEditable=!1}else this._isDraggable=!1,this.editorDiv.contentEditable=!0;return this.div}#Ut(){if(this.editorDiv.replaceChildren(),this.#Bt)for(const t of this.#Bt.split("\n")){const e=document.createElement("div");e.append(t?document.createTextNode(t):document.createElement("br")),this.editorDiv.append(e)}}get contentDiv(){return this.editorDiv}static deserialize(t,e,i){let s=null;if(t instanceof r.FreeTextAnnotationElement){const{data:{defaultAppearanceData:{fontSize:e,fontColor:i},rect:o,rotation:r,id:a},textContent:l,textPosition:c,parent:{page:{pageNumber:d}}}=t;if(!l||0===l.length)return null;s=t={annotationType:n.AnnotationEditorType.FREETEXT,color:Array.from(i),fontSize:e,value:l.join("\n"),position:c,pageIndex:d-1,rect:o,rotation:r,id:a,deleted:!1}}const o=super.deserialize(t,e,i);return o.#Rt=t.fontSize,o.#u=n.Util.makeHexColor(...t.color),o.#Bt=t.value,o.annotationElementId=t.id||null,o.#Dt=s,o}serialize(t=!1){if(this.isEmpty())return null;if(this.deleted)return{pageIndex:this.pageIndex,id:this.annotationElementId,deleted:!0};const e=a._internalPadding*this.parentScale,i=this.getRect(e,e),o=s.AnnotationEditor._colorManager.convert(this.isAttachedToDOM?getComputedStyle(this.editorDiv).color:this.#u),r={annotationType:n.AnnotationEditorType.FREETEXT,color:o,fontSize:this.#Rt,value:this.#Bt,pageIndex:this.pageIndex,rect:i,rotation:this.rotation,structTreeParentId:this._structTreeParentId};return t?r:this.annotationElementId&&!this.#zt(r)?null:(r.id=this.annotationElementId,r)}#zt(t){const{value:e,fontSize:i,color:n,rect:s,pageIndex:o}=this.#Dt;return t.value!==e||t.fontSize!==i||t.rect.some(((t,e)=>Math.abs(t-s[e])>=1))||t.color.some(((t,e)=>t!==n[e]))||t.pageIndex!==o}#Ht(t=!1){if(!this.annotationElementId)return;if(this.#Nt(),!t&&(0===this.width||0===this.height))return void setTimeout((()=>this.#Ht(!0)),0);const e=a._internalPadding*this.parentScale;this.#Dt.rect=this.getRect(e,e)}}var l=i(97),c=i(405);class d extends s.AnnotationEditor{#qt;#$t=null;#Vt=null;#Wt=null;#Gt=null;#Kt=null;#mt=null;#Xt=null;#Yt;#Jt=null;static _defaultColor=null;static _defaultOpacity=1;static _l10nPromise;static _type="highlight";static _editorType=n.AnnotationEditorType.HIGHLIGHT;constructor(t){super({...t,name:"highlightEditor"}),d._defaultColor||=this._uiManager.highlightColors?.values().next().value||"#fff066",this.color=t.color||d._defaultColor,this.#Yt=t.opacity||d._defaultOpacity,this.#qt=t.boxes||null,this._isDraggable=!1,this.#Qt(),this.#Zt(),this.rotate(this.rotation)}#Qt(){const t=new c.Outliner(this.#qt,.001);this.#Kt=t.getOutlines(),({x:this.x,y:this.y,width:this.width,height:this.height}=this.#Kt.box);const e=new c.Outliner(this.#qt,.0025,.001,"ltr"===this._uiManager.direction);this.#Wt=e.getOutlines();const{lastPoint:i}=this.#Wt.box;this.#Xt=[(i[0]-this.x)/this.width,(i[1]-this.y)/this.height]}static initialize(t){s.AnnotationEditor.initialize(t)}static updateDefaultParams(t,e){t===n.AnnotationEditorParamsType.HIGHLIGHT_DEFAULT_COLOR&&(d._defaultColor=e)}get toolbarPosition(){return this.#Xt}updateParams(t,e){t===n.AnnotationEditorParamsType.HIGHLIGHT_COLOR&&this.#Ft(e)}static get defaultPropertiesToUpdate(){return[[n.AnnotationEditorParamsType.HIGHLIGHT_DEFAULT_COLOR,d._defaultColor]]}get propertiesToUpdate(){return[[n.AnnotationEditorParamsType.HIGHLIGHT_COLOR,this.color||d._defaultColor]]}#Ft(t){const e=this.color;this.addCommands({cmd:()=>{this.color=t,this.parent.drawLayer.changeColor(this.#mt,t),this.#Vt?.updateColor(t)},undo:()=>{this.color=e,this.parent.drawLayer.changeColor(this.#mt,e),this.#Vt?.updateColor(e)},mustExec:!0,type:n.AnnotationEditorParamsType.HIGHLIGHT_COLOR,overwriteIfSameType:!0,keepUndo:!0})}async addEditToolbar(){const t=await super.addEditToolbar();return t?(this._uiManager.highlightColors&&(this.#Vt=new l.ColorPicker({editor:this}),t.addColorPicker(this.#Vt)),t):null}disableEditing(){super.disableEditing(),this.div.classList.toggle("disabled",!0)}enableEditing(){super.enableEditing(),this.div.classList.toggle("disabled",!1)}fixAndSetPosition(){return super.fixAndSetPosition(0)}getRect(t,e){return super.getRect(t,e,0)}onceAdded(){this.parent.addUndoableEditor(this),this.div.focus()}remove(){super.remove(),this.#te()}rebuild(){this.parent&&(super.rebuild(),null!==this.div&&(this.#Zt(),this.isAttachedToDOM||this.parent.add(this)))}setParent(t){let e=!1;this.parent&&!t?this.#te():t&&(this.#Zt(t),e=!this.parent&&this.div?.classList.contains("selectedEditor")),super.setParent(t),e&&this.select()}#te(){null!==this.#mt&&this.parent&&(this.parent.drawLayer.remove(this.#mt),this.#mt=null,this.parent.drawLayer.remove(this.#Jt),this.#Jt=null)}#Zt(t=this.parent){null===this.#mt&&(({id:this.#mt,clipPathId:this.#$t}=t.drawLayer.highlight(this.#Kt,this.color,this.#Yt)),this.#Gt&&(this.#Gt.style.clipPath=this.#$t),this.#Jt=t.drawLayer.highlightOutline(this.#Wt))}static#ee({x:t,y:e,width:i,height:n},s){switch(s){case 90:return{x:1-e-n,y:t,width:n,height:i};case 180:return{x:1-t-i,y:1-e-n,width:i,height:n};case 270:return{x:e,y:1-t-i,width:n,height:i}}return{x:t,y:e,width:i,height:n}}rotate(t){const{drawLayer:e}=this.parent;e.rotate(this.#mt,t),e.rotate(this.#Jt,t),e.updateBox(this.#mt,d.#ee(this,t)),e.updateBox(this.#Jt,d.#ee(this.#Wt.box,t))}render(){if(this.div)return this.div;const t=super.render(),e=this.#Gt=document.createElement("div");t.append(e),e.className="internal",e.style.clipPath=this.#$t;const[i,n]=this.parentDimensions;return this.setDims(this.width*i,this.height*n),(0,o.bindEvents)(this,this.#Gt,["pointerover","pointerleave"]),this.enableEditing(),t}pointerover(){this.parent.drawLayer.addClass(this.#Jt,"hovered")}pointerleave(){this.parent.drawLayer.removeClass(this.#Jt,"hovered")}select(){super.select(),this.parent?.drawLayer.removeClass(this.#Jt,"hovered"),this.parent?.drawLayer.addClass(this.#Jt,"selected")}unselect(){super.unselect(),this.parent?.drawLayer.removeClass(this.#Jt,"selected")}#ie(){const[t,e]=this.pageDimensions,i=this.#qt,n=new Array(8*i.length);let s=0;for(const{x:o,y:r,width:a,height:l}of i){const i=o*t,c=(1-r-l)*e;n[s]=n[s+4]=i,n[s+1]=n[s+3]=c,n[s+2]=n[s+6]=i+a*t,n[s+5]=n[s+7]=c+l*e,s+=8}return n}#ne(){const[t,e]=this.pageDimensions,i=this.width*t,n=this.height*e,s=this.x*t,o=(1-this.y-this.height)*e,r=[];for(const t of this.#Kt.outlines){const e=new Array(t.length);for(let r=0;r<t.length;r+=2)e[r]=s+t[r]*i,e[r+1]=o+(1-t[r+1])*n;r.push(e)}return r}static deserialize(t,e,i){const s=super.deserialize(t,e,i),{rect:o,color:r,quadPoints:a}=t;s.color=n.Util.makeHexColor(...r),s.#Yt=t.opacity;const[l,c]=s.pageDimensions;s.width=(o[2]-o[0])/l,s.height=(o[3]-o[1])/c;const d=s.#qt=[];for(let t=0;t<a.length;t+=8)d.push({x:a[4]/l,y:1-a[t+5]/c,width:(a[t+2]-a[t])/l,height:(a[t+5]-a[t+1])/c});return s.#Qt(),s}serialize(t=!1){if(this.isEmpty()||t)return null;const e=this.getRect(0,0),i=s.AnnotationEditor._colorManager.convert(this.color);return{annotationType:n.AnnotationEditorType.HIGHLIGHT,color:i,opacity:this.#Yt,quadPoints:this.#ie(),outlines:this.#ne(),pageIndex:this.pageIndex,rect:e,rotation:0,structTreeParentId:this._structTreeParentId}}static canCreateNewEmptyEditor(){return!1}}var h=i(473);class u extends s.AnnotationEditor{#se=0;#oe=0;#re=this.canvasPointermove.bind(this);#ae=this.canvasPointerleave.bind(this);#le=this.canvasPointerup.bind(this);#ce=this.canvasPointerdown.bind(this);#de=null;#he=new Path2D;#ue=!1;#pe=!1;#ge=!1;#fe=null;#me=0;#be=0;#ve=null;static _defaultColor=null;static _defaultOpacity=1;static _defaultThickness=1;static _type="ink";static _editorType=n.AnnotationEditorType.INK;constructor(t){super({...t,name:"inkEditor"}),this.color=t.color||null,this.thickness=t.thickness||null,this.opacity=t.opacity||null,this.paths=[],this.bezierPath2D=[],this.allRawPaths=[],this.currentPath=[],this.scaleFactor=1,this.translationX=this.translationY=0,this.x=0,this.y=0,this._willKeepAspectRatio=!0}static initialize(t){s.AnnotationEditor.initialize(t)}static updateDefaultParams(t,e){switch(t){case n.AnnotationEditorParamsType.INK_THICKNESS:u._defaultThickness=e;break;case n.AnnotationEditorParamsType.INK_COLOR:u._defaultColor=e;break;case n.AnnotationEditorParamsType.INK_OPACITY:u._defaultOpacity=e/100}}updateParams(t,e){switch(t){case n.AnnotationEditorParamsType.INK_THICKNESS:this.#ye(e);break;case n.AnnotationEditorParamsType.INK_COLOR:this.#Ft(e);break;case n.AnnotationEditorParamsType.INK_OPACITY:this.#we(e)}}static get defaultPropertiesToUpdate(){return[[n.AnnotationEditorParamsType.INK_THICKNESS,u._defaultThickness],[n.AnnotationEditorParamsType.INK_COLOR,u._defaultColor||s.AnnotationEditor._defaultLineColor],[n.AnnotationEditorParamsType.INK_OPACITY,Math.round(100*u._defaultOpacity)]]}get propertiesToUpdate(){return[[n.AnnotationEditorParamsType.INK_THICKNESS,this.thickness||u._defaultThickness],[n.AnnotationEditorParamsType.INK_COLOR,this.color||u._defaultColor||s.AnnotationEditor._defaultLineColor],[n.AnnotationEditorParamsType.INK_OPACITY,Math.round(100*(this.opacity??u._defaultOpacity))]]}#ye(t){const e=this.thickness;this.addCommands({cmd:()=>{this.thickness=t,this.#ke()},undo:()=>{this.thickness=e,this.#ke()},mustExec:!0,type:n.AnnotationEditorParamsType.INK_THICKNESS,overwriteIfSameType:!0,keepUndo:!0})}#Ft(t){const e=this.color;this.addCommands({cmd:()=>{this.color=t,this.#xe()},undo:()=>{this.color=e,this.#xe()},mustExec:!0,type:n.AnnotationEditorParamsType.INK_COLOR,overwriteIfSameType:!0,keepUndo:!0})}#we(t){t/=100;const e=this.opacity;this.addCommands({cmd:()=>{this.opacity=t,this.#xe()},undo:()=>{this.opacity=e,this.#xe()},mustExec:!0,type:n.AnnotationEditorParamsType.INK_OPACITY,overwriteIfSameType:!0,keepUndo:!0})}rebuild(){this.parent&&(super.rebuild(),null!==this.div&&(this.canvas||(this.#Ee(),this.#Ce()),this.isAttachedToDOM||(this.parent.add(this),this.#Ae()),this.#ke()))}remove(){null!==this.canvas&&(this.isEmpty()||this.commit(),this.canvas.width=this.canvas.height=0,this.canvas.remove(),this.canvas=null,this.#de&&(clearTimeout(this.#de),this.#de=null),this.#fe.disconnect(),this.#fe=null,super.remove())}setParent(t){!this.parent&&t?this._uiManager.removeShouldRescale(this):this.parent&&null===t&&this._uiManager.addShouldRescale(this),super.setParent(t)}onScaleChanging(){const[t,e]=this.parentDimensions,i=this.width*t,n=this.height*e;this.setDimensions(i,n)}enableEditMode(){this.#ue||null===this.canvas||(super.enableEditMode(),this._isDraggable=!1,this.canvas.addEventListener("pointerdown",this.#ce))}disableEditMode(){this.isInEditMode()&&null!==this.canvas&&(super.disableEditMode(),this._isDraggable=!this.isEmpty(),this.div.classList.remove("editing"),this.canvas.removeEventListener("pointerdown",this.#ce))}onceAdded(){this._isDraggable=!this.isEmpty()}isEmpty(){return 0===this.paths.length||1===this.paths.length&&0===this.paths[0].length}#Se(){const{parentRotation:t,parentDimensions:[e,i]}=this;switch(t){case 90:return[0,i,i,e];case 180:return[e,i,e,i];case 270:return[e,0,i,e];default:return[0,0,e,i]}}#_e(){const{ctx:t,color:e,opacity:i,thickness:n,parentScale:s,scaleFactor:r}=this;t.lineWidth=n*s/r,t.lineCap="round",t.lineJoin="round",t.miterLimit=10,t.strokeStyle=`${e}${(0,o.opacityToHex)(i)}`}#Te(t,e){this.canvas.addEventListener("contextmenu",h.noContextMenu),this.canvas.addEventListener("pointerleave",this.#ae),this.canvas.addEventListener("pointermove",this.#re),this.canvas.addEventListener("pointerup",this.#le),this.canvas.removeEventListener("pointerdown",this.#ce),this.isEditing=!0,this.#ge||(this.#ge=!0,this.#Ae(),this.thickness||=u._defaultThickness,this.color||=u._defaultColor||s.AnnotationEditor._defaultLineColor,this.opacity??=u._defaultOpacity),this.currentPath.push([t,e]),this.#pe=!1,this.#_e(),this.#ve=()=>{this.#Me(),this.#ve&&window.requestAnimationFrame(this.#ve)},window.requestAnimationFrame(this.#ve)}#Ie(t,e){const[i,n]=this.currentPath.at(-1);if(this.currentPath.length>1&&t===i&&e===n)return;const s=this.currentPath;let o=this.#he;if(s.push([t,e]),this.#pe=!0,s.length<=2)return o.moveTo(...s[0]),void o.lineTo(t,e);3===s.length&&(this.#he=o=new Path2D,o.moveTo(...s[0])),this.#Le(o,...s.at(-3),...s.at(-2),t,e)}#Be(){if(0===this.currentPath.length)return;const t=this.currentPath.at(-1);this.#he.lineTo(...t)}#Pe(t,e){let i;if(this.#ve=null,t=Math.min(Math.max(t,0),this.canvas.width),e=Math.min(Math.max(e,0),this.canvas.height),this.#Ie(t,e),this.#Be(),1!==this.currentPath.length)i=this.#Re();else{const n=[t,e];i=[[n,n.slice(),n.slice(),n]]}const n=this.#he,s=this.currentPath;this.currentPath=[],this.#he=new Path2D,this.addCommands({cmd:()=>{this.allRawPaths.push(s),this.paths.push(i),this.bezierPath2D.push(n),this.rebuild()},undo:()=>{this.allRawPaths.pop(),this.paths.pop(),this.bezierPath2D.pop(),0===this.paths.length?this.remove():(this.canvas||(this.#Ee(),this.#Ce()),this.#ke())},mustExec:!0})}#Me(){if(!this.#pe)return;this.#pe=!1;Math.ceil(this.thickness*this.parentScale);const t=this.currentPath.slice(-3),e=t.map((t=>t[0])),i=t.map((t=>t[1])),{ctx:n}=(Math.min(...e),Math.max(...e),Math.min(...i),Math.max(...i),this);n.save(),n.clearRect(0,0,this.canvas.width,this.canvas.height);for(const t of this.bezierPath2D)n.stroke(t);n.stroke(this.#he),n.restore()}#Le(t,e,i,n,s,o,r){const a=(e+n)/2,l=(i+s)/2,c=(n+o)/2,d=(s+r)/2;t.bezierCurveTo(a+2*(n-a)/3,l+2*(s-l)/3,c+2*(n-c)/3,d+2*(s-d)/3,c,d)}#Re(){const t=this.currentPath;if(t.length<=2)return[[t[0],t[0],t.at(-1),t.at(-1)]];const e=[];let i,[n,s]=t[0];for(i=1;i<t.length-2;i++){const[o,r]=t[i],[a,l]=t[i+1],c=(o+a)/2,d=(r+l)/2,h=[n+2*(o-n)/3,s+2*(r-s)/3],u=[c+2*(o-c)/3,d+2*(r-d)/3];e.push([[n,s],h,u,[c,d]]),[n,s]=[c,d]}const[o,r]=t[i],[a,l]=t[i+1],c=[n+2*(o-n)/3,s+2*(r-s)/3],d=[a+2*(o-a)/3,l+2*(r-l)/3];return e.push([[n,s],c,d,[a,l]]),e}#xe(){if(this.isEmpty())return void this.#De();this.#_e();const{canvas:t,ctx:e}=this;e.setTransform(1,0,0,1,0,0),e.clearRect(0,0,t.width,t.height),this.#De();for(const t of this.bezierPath2D)e.stroke(t)}commit(){this.#ue||(super.commit(),this.isEditing=!1,this.disableEditMode(),this.setInForeground(),this.#ue=!0,this.div.classList.add("disabled"),this.#ke(!0),this.select(),this.parent.addInkEditorIfNeeded(!0),this.moveInDOM(),this.div.focus({preventScroll:!0}))}focusin(t){this._focusEventsAllowed&&(super.focusin(t),this.enableEditMode())}canvasPointerdown(t){0===t.button&&this.isInEditMode()&&!this.#ue&&(this.setInForeground(),t.preventDefault(),this.div.contains(document.activeElement)||this.div.focus({preventScroll:!0}),this.#Te(t.offsetX,t.offsetY))}canvasPointermove(t){t.preventDefault(),this.#Ie(t.offsetX,t.offsetY)}canvasPointerup(t){t.preventDefault(),this.#Oe(t)}canvasPointerleave(t){this.#Oe(t)}#Oe(t){this.canvas.removeEventListener("pointerleave",this.#ae),this.canvas.removeEventListener("pointermove",this.#re),this.canvas.removeEventListener("pointerup",this.#le),this.canvas.addEventListener("pointerdown",this.#ce),this.#de&&clearTimeout(this.#de),this.#de=setTimeout((()=>{this.#de=null,this.canvas.removeEventListener("contextmenu",h.noContextMenu)}),10),this.#Pe(t.offsetX,t.offsetY),this.addToAnnotationStorage(),this.setInBackground()}#Ee(){this.canvas=document.createElement("canvas"),this.canvas.width=this.canvas.height=0,this.canvas.className="inkEditorCanvas",this.canvas.setAttribute("data-l10n-id","pdfjs-ink-canvas"),this.div.append(this.canvas),this.ctx=this.canvas.getContext("2d")}#Ce(){this.#fe=new ResizeObserver((t=>{const e=t[0].contentRect;e.width&&e.height&&this.setDimensions(e.width,e.height)})),this.#fe.observe(this.div)}get isResizable(){return!this.isEmpty()&&this.#ue}render(){if(this.div)return this.div;let t,e;this.width&&(t=this.x,e=this.y),super.render(),this.div.setAttribute("data-l10n-id","pdfjs-ink");const[i,n,s,o]=this.#Se();if(this.setAt(i,n,0,0),this.setDims(s,o),this.#Ee(),this.width){const[i,n]=this.parentDimensions;this.setAspectRatio(this.width*i,this.height*n),this.setAt(t*i,e*n,this.width*i,this.height*n),this.#ge=!0,this.#Ae(),this.setDims(this.width*i,this.height*n),this.#xe(),this.div.classList.add("disabled")}else this.div.classList.add("editing"),this.enableEditMode();return this.#Ce(),this.div}#Ae(){if(!this.#ge)return;const[t,e]=this.parentDimensions;this.canvas.width=Math.ceil(this.width*t),this.canvas.height=Math.ceil(this.height*e),this.#De()}setDimensions(t,e){const i=Math.round(t),n=Math.round(e);if(this.#me===i&&this.#be===n)return;this.#me=i,this.#be=n,this.canvas.style.visibility="hidden";const[s,o]=this.parentDimensions;this.width=t/s,this.height=e/o,this.fixAndSetPosition(),this.#ue&&this.#Fe(t,e),this.#Ae(),this.#xe(),this.canvas.style.visibility="visible",this.fixDims()}#Fe(t,e){const i=this.#Ne(),n=(t-i)/this.#oe,s=(e-i)/this.#se;this.scaleFactor=Math.min(n,s)}#De(){const t=this.#Ne()/2;this.ctx.setTransform(this.scaleFactor,0,0,this.scaleFactor,this.translationX*this.scaleFactor+t,this.translationY*this.scaleFactor+t)}static#He(t){const e=new Path2D;for(let i=0,n=t.length;i<n;i++){const[n,s,o,r]=t[i];0===i&&e.moveTo(...n),e.bezierCurveTo(s[0],s[1],o[0],o[1],r[0],r[1])}return e}static#je(t,e,i){const[n,s,o,r]=e;switch(i){case 0:for(let e=0,i=t.length;e<i;e+=2)t[e]+=n,t[e+1]=r-t[e+1];break;case 90:for(let e=0,i=t.length;e<i;e+=2){const i=t[e];t[e]=t[e+1]+n,t[e+1]=i+s}break;case 180:for(let e=0,i=t.length;e<i;e+=2)t[e]=o-t[e],t[e+1]+=s;break;case 270:for(let e=0,i=t.length;e<i;e+=2){const i=t[e];t[e]=o-t[e+1],t[e+1]=r-i}break;default:throw new Error("Invalid rotation")}return t}static#Ue(t,e,i){const[n,s,o,r]=e;switch(i){case 0:for(let e=0,i=t.length;e<i;e+=2)t[e]-=n,t[e+1]=r-t[e+1];break;case 90:for(let e=0,i=t.length;e<i;e+=2){const i=t[e];t[e]=t[e+1]-s,t[e+1]=i-n}break;case 180:for(let e=0,i=t.length;e<i;e+=2)t[e]=o-t[e],t[e+1]-=s;break;case 270:for(let e=0,i=t.length;e<i;e+=2){const i=t[e];t[e]=r-t[e+1],t[e+1]=o-i}break;default:throw new Error("Invalid rotation")}return t}#ze(t,e,i,n){const s=[],o=this.thickness/2,r=t*e+o,a=t*i+o;for(const e of this.paths){const i=[],o=[];for(let n=0,s=e.length;n<s;n++){const[l,c,d,h]=e[n],u=t*l[0]+r,p=t*l[1]+a,g=t*c[0]+r,f=t*c[1]+a,m=t*d[0]+r,b=t*d[1]+a,v=t*h[0]+r,y=t*h[1]+a;0===n&&(i.push(u,p),o.push(u,p)),i.push(g,f,m,b,v,y),o.push(g,f),n===s-1&&o.push(v,y)}s.push({bezier:u.#je(i,n,this.rotation),points:u.#je(o,n,this.rotation)})}return s}#qe(){let t=1/0,e=-1/0,i=1/0,s=-1/0;for(const o of this.paths)for(const[r,a,l,c]of o){const o=n.Util.bezierBoundingBox(...r,...a,...l,...c);t=Math.min(t,o[0]),i=Math.min(i,o[1]),e=Math.max(e,o[2]),s=Math.max(s,o[3])}return[t,i,e,s]}#Ne(){return this.#ue?Math.ceil(this.thickness*this.parentScale):0}#ke(t=!1){if(this.isEmpty())return;if(!this.#ue)return void this.#xe();const e=this.#qe(),i=this.#Ne();this.#oe=Math.max(s.AnnotationEditor.MIN_SIZE,e[2]-e[0]),this.#se=Math.max(s.AnnotationEditor.MIN_SIZE,e[3]-e[1]);const n=Math.ceil(i+this.#oe*this.scaleFactor),o=Math.ceil(i+this.#se*this.scaleFactor),[r,a]=this.parentDimensions;this.width=n/r,this.height=o/a,this.setAspectRatio(n,o);const l=this.translationX,c=this.translationY;this.translationX=-e[0],this.translationY=-e[1],this.#Ae(),this.#xe(),this.#me=n,this.#be=o,this.setDims(n,o);const d=t?i/this.scaleFactor/2:0;this.translate(l-this.translationX-d,c-this.translationY-d)}static deserialize(t,e,i){if(t instanceof r.InkAnnotationElement)return null;const o=super.deserialize(t,e,i);o.thickness=t.thickness,o.color=n.Util.makeHexColor(...t.color),o.opacity=t.opacity;const[a,l]=o.pageDimensions,c=o.width*a,d=o.height*l,h=o.parentScale,p=t.thickness/2;o.#ue=!0,o.#me=Math.round(c),o.#be=Math.round(d);const{paths:g,rect:f,rotation:m}=t;for(let{bezier:t}of g){t=u.#Ue(t,f,m);const e=[];o.paths.push(e);let i=h*(t[0]-p),n=h*(t[1]-p);for(let s=2,o=t.length;s<o;s+=6){const o=h*(t[s]-p),r=h*(t[s+1]-p),a=h*(t[s+2]-p),l=h*(t[s+3]-p),c=h*(t[s+4]-p),d=h*(t[s+5]-p);e.push([[i,n],[o,r],[a,l],[c,d]]),i=c,n=d}const s=this.#He(e);o.bezierPath2D.push(s)}const b=o.#qe();return o.#oe=Math.max(s.AnnotationEditor.MIN_SIZE,b[2]-b[0]),o.#se=Math.max(s.AnnotationEditor.MIN_SIZE,b[3]-b[1]),o.#Fe(c,d),o}serialize(){if(this.isEmpty())return null;const t=this.getRect(0,0),e=s.AnnotationEditor._colorManager.convert(this.ctx.strokeStyle);return{annotationType:n.AnnotationEditorType.INK,color:e,thickness:this.thickness,opacity:this.opacity,paths:this.#ze(this.scaleFactor/this.parentScale,this.translationX,this.translationY,t),pageIndex:this.pageIndex,rect:t,rotation:this.rotation,structTreeParentId:this._structTreeParentId}}}class p extends s.AnnotationEditor{#$e=null;#Ve=null;#We=null;#Ge=null;#Ke=null;#Xe="";#Ye=null;#fe=null;#Je=null;#Qe=!1;#Ze=!1;static _type="stamp";static _editorType=n.AnnotationEditorType.STAMP;constructor(t){super({...t,name:"stampEditor"}),this.#Ge=t.bitmapUrl,this.#Ke=t.bitmapFile}static initialize(t){s.AnnotationEditor.initialize(t)}static get supportedTypes(){return(0,n.shadow)(this,"supportedTypes",["apng","avif","bmp","gif","jpeg","png","svg+xml","webp","x-icon"].map((t=>`image/${t}`)))}static get supportedTypesStr(){return(0,n.shadow)(this,"supportedTypesStr",this.supportedTypes.join(","))}static isHandlingMimeForPasting(t){return this.supportedTypes.includes(t)}static paste(t,e){e.pasteEditor(n.AnnotationEditorType.STAMP,{bitmapFile:t.getAsFile()})}#ti(t,e=!1){t?(this.#$e=t.bitmap,e||(this.#Ve=t.id,this.#Qe=t.isSvg),t.file&&(this.#Xe=t.file.name),this.#Ee()):this.remove()}#ei(){this.#We=null,this._uiManager.enableWaiting(!1),this.#Ye&&this.div.focus()}#ii(){if(this.#Ve)return this._uiManager.enableWaiting(!0),void this._uiManager.imageManager.getFromId(this.#Ve).then((t=>this.#ti(t,!0))).finally((()=>this.#ei()));if(this.#Ge){const t=this.#Ge;return this.#Ge=null,this._uiManager.enableWaiting(!0),void(this.#We=this._uiManager.imageManager.getFromUrl(t).then((t=>this.#ti(t))).finally((()=>this.#ei())))}if(this.#Ke){const t=this.#Ke;return this.#Ke=null,this._uiManager.enableWaiting(!0),void(this.#We=this._uiManager.imageManager.getFromFile(t).then((t=>this.#ti(t))).finally((()=>this.#ei())))}const t=document.createElement("input");t.type="file",t.accept=p.supportedTypesStr,this.#We=new Promise((e=>{t.addEventListener("change",(async()=>{if(t.files&&0!==t.files.length){this._uiManager.enableWaiting(!0);const e=await this._uiManager.imageManager.getFromFile(t.files[0]);this.#ti(e)}else this.remove();e()})),t.addEventListener("cancel",(()=>{this.remove(),e()}))})).finally((()=>this.#ei())),t.click()}remove(){this.#Ve&&(this.#$e=null,this._uiManager.imageManager.deleteId(this.#Ve),this.#Ye?.remove(),this.#Ye=null,this.#fe?.disconnect(),this.#fe=null,this.#Je&&(clearTimeout(this.#Je),this.#Je=null)),super.remove()}rebuild(){this.parent?(super.rebuild(),null!==this.div&&(this.#Ve&&this.#ii(),this.isAttachedToDOM||this.parent.add(this))):this.#Ve&&this.#ii()}onceAdded(){this._isDraggable=!0,this.div.focus()}isEmpty(){return!(this.#We||this.#$e||this.#Ge||this.#Ke)}get isResizable(){return!0}render(){if(this.div)return this.div;let t,e;if(this.width&&(t=this.x,e=this.y),super.render(),this.div.hidden=!0,this.#$e?this.#Ee():this.#ii(),this.width){const[i,n]=this.parentDimensions;this.setAt(t*i,e*n,this.width*i,this.height*n)}return this.div}#Ee(){const{div:t}=this;let{width:e,height:i}=this.#$e;const[n,s]=this.pageDimensions,o=.75;if(this.width)e=this.width*n,i=this.height*s;else if(e>o*n||i>o*s){const t=Math.min(o*n/e,o*s/i);e*=t,i*=t}const[r,a]=this.parentDimensions;this.setDims(e*r/n,i*a/s),this._uiManager.enableWaiting(!1);const l=this.#Ye=document.createElement("canvas");t.append(l),t.hidden=!1,this.#ni(e,i),this.#Ce(),this.#Ze||(this.parent.addUndoableEditor(this),this.#Ze=!0),this._uiManager._eventBus.dispatch("reporttelemetry",{source:this,details:{type:"editing",subtype:this.editorType,data:{action:"inserted_image"}}}),this.addAltTextButton(),this.#Xe&&l.setAttribute("aria-label",this.#Xe)}#si(t,e){const[i,n]=this.parentDimensions;this.width=t/i,this.height=e/n,this.setDims(t,e),this._initialOptions?.isCentered?this.center():this.fixAndSetPosition(),this._initialOptions=null,null!==this.#Je&&clearTimeout(this.#Je),this.#Je=setTimeout((()=>{this.#Je=null,this.#ni(t,e)}),200)}#oi(t,e){const{width:i,height:n}=this.#$e;let s=i,o=n,r=this.#$e;for(;s>2*t||o>2*e;){const i=s,n=o;s>2*t&&(s=s>=16384?Math.floor(s/2)-1:Math.ceil(s/2)),o>2*e&&(o=o>=16384?Math.floor(o/2)-1:Math.ceil(o/2));const a=new OffscreenCanvas(s,o);a.getContext("2d").drawImage(r,0,0,i,n,0,0,s,o),r=a.transferToImageBitmap()}return r}#ni(t,e){t=Math.ceil(t),e=Math.ceil(e);const i=this.#Ye;if(!i||i.width===t&&i.height===e)return;i.width=t,i.height=e;const n=this.#Qe?this.#$e:this.#oi(t,e),s=i.getContext("2d");s.filter=this._uiManager.hcmFilter,s.drawImage(n,0,0,n.width,n.height,0,0,t,e)}getImageForAltText(){return this.#Ye}#ri(t){if(t){if(this.#Qe){const t=this._uiManager.imageManager.getSvgUrl(this.#Ve);if(t)return t}const t=document.createElement("canvas");return({width:t.width,height:t.height}=this.#$e),t.getContext("2d").drawImage(this.#$e,0,0),t.toDataURL()}if(this.#Qe){const[t,e]=this.pageDimensions,i=Math.round(this.width*t*h.PixelsPerInch.PDF_TO_CSS_UNITS),n=Math.round(this.height*e*h.PixelsPerInch.PDF_TO_CSS_UNITS),s=new OffscreenCanvas(i,n);return s.getContext("2d").drawImage(this.#$e,0,0,this.#$e.width,this.#$e.height,0,0,i,n),s.transferToImageBitmap()}return structuredClone(this.#$e)}#Ce(){this.#fe=new ResizeObserver((t=>{const e=t[0].contentRect;e.width&&e.height&&this.#si(e.width,e.height)})),this.#fe.observe(this.div)}static deserialize(t,e,i){if(t instanceof r.StampAnnotationElement)return null;const n=super.deserialize(t,e,i),{rect:s,bitmapUrl:o,bitmapId:a,isSvg:l,accessibilityData:c}=t;a&&i.imageManager.isValidId(a)?n.#Ve=a:n.#Ge=o,n.#Qe=l;const[d,h]=n.pageDimensions;return n.width=(s[2]-s[0])/d,n.height=(s[3]-s[1])/h,c&&(n.altTextData=c),n}serialize(t=!1,e=null){if(this.isEmpty())return null;const i={annotationType:n.AnnotationEditorType.STAMP,bitmapId:this.#Ve,pageIndex:this.pageIndex,rect:this.getRect(0,0),rotation:this.rotation,isSvg:this.#Qe,structTreeParentId:this._structTreeParentId};if(t)return i.bitmapUrl=this.#ri(!0),i.accessibilityData=this.altTextData,i;const{decorative:s,altText:o}=this.altTextData;if(!s&&o&&(i.accessibilityData={type:"Figure",alt:o}),null===e)return i;e.stamps||=new Map;const r=this.#Qe?(i.rect[2]-i.rect[0])*(i.rect[3]-i.rect[1]):null;if(e.stamps.has(this.#Ve)){if(this.#Qe){const t=e.stamps.get(this.#Ve);r>t.area&&(t.area=r,t.serialized.bitmap.close(),t.serialized.bitmap=this.#ri(!1))}}else e.stamps.set(this.#Ve,{area:r,serialized:i}),i.bitmap=this.#ri(!1);return i}}class g{#B;#ai=!1;#li=null;#ci=this.pointerup.bind(this);#di=this.pointerUpAfterSelection.bind(this);#hi=this.pointerdown.bind(this);#ui=null;#pi=this.selectionStart.bind(this);#gi=new Map;#fi=!1;#mi=!1;#bi=!1;#vi=null;#yi;static _initialized=!1;static#wi=new Map([a,u,p,d].map((t=>[t._editorType,t])));constructor({uiManager:t,pageIndex:e,div:i,accessibilityManager:n,annotationLayer:s,drawLayer:o,textLayer:r,viewport:a,l10n:l}){const c=[...g.#wi.values()];if(!g._initialized){g._initialized=!0;for(const t of c)t.initialize(l)}t.registerEditorTypes(c),this.#yi=t,this.pageIndex=e,this.div=i,this.#B=n,this.#li=s,this.viewport=a,this.#vi=r,this.drawLayer=o,this.#yi.addLayer(this)}get isEmpty(){return 0===this.#gi.size}updateToolbar(t){this.#yi.updateToolbar(t)}updateMode(t=this.#yi.getMode()){switch(this.#ki(),t){case n.AnnotationEditorType.NONE:this.disableTextSelection(),this.togglePointerEvents(!1),this.disableClick();break;case n.AnnotationEditorType.INK:this.addInkEditorIfNeeded(!1),this.disableTextSelection(),this.togglePointerEvents(!0),this.disableClick();break;case n.AnnotationEditorType.HIGHLIGHT:this.enableTextSelection(),this.togglePointerEvents(!1),this.disableClick();break;default:this.disableTextSelection(),this.togglePointerEvents(!0),this.enableClick()}if(t!==n.AnnotationEditorType.NONE){const{classList:e}=this.div;for(const i of g.#wi.values())e.toggle(`${i._type}Editing`,t===i._editorType);this.div.hidden=!1}}addInkEditorIfNeeded(t){if(this.#yi.getMode()===n.AnnotationEditorType.INK){if(!t)for(const t of this.#gi.values())if(t.isEmpty())return void t.setInBackground();this.#xi({offsetX:0,offsetY:0},!1).setInBackground()}}setEditingState(t){this.#yi.setEditingState(t)}addCommands(t){this.#yi.addCommands(t)}togglePointerEvents(t=!1){this.div.classList.toggle("disabled",!t)}enable(){this.togglePointerEvents(!0);const t=new Set;for(const e of this.#gi.values())e.enableEditing(),e.annotationElementId&&t.add(e.annotationElementId);if(!this.#li)return;const e=this.#li.getEditableAnnotations();for(const i of e){if(i.hide(),this.#yi.isDeletedAnnotationElement(i.data.id))continue;if(t.has(i.data.id))continue;const e=this.deserialize(i);e&&(this.addOrRebuild(e),e.enableEditing())}}disable(){this.#bi=!0,this.togglePointerEvents(!1);const t=new Set;for(const e of this.#gi.values())e.disableEditing(),e.annotationElementId&&null===e.serialize()?(this.getEditableAnnotation(e.annotationElementId)?.show(),e.remove()):t.add(e.annotationElementId);if(this.#li){const e=this.#li.getEditableAnnotations();for(const i of e){const{id:e}=i.data;t.has(e)||this.#yi.isDeletedAnnotationElement(e)||i.show()}}this.#ki(),this.isEmpty&&(this.div.hidden=!0);const{classList:e}=this.div;for(const t of g.#wi.values())e.remove(`${t._type}Editing`);this.disableTextSelection(),this.#bi=!1}getEditableAnnotation(t){return this.#li?.getEditableAnnotation(t)||null}setActiveEditor(t){this.#yi.getActive()!==t&&this.#yi.setActiveEditor(t)}enableTextSelection(){this.#vi?.div&&document.addEventListener("selectstart",this.#pi)}disableTextSelection(){this.#vi?.div&&document.removeEventListener("selectstart",this.#pi)}enableClick(){this.div.addEventListener("pointerdown",this.#hi),this.div.addEventListener("pointerup",this.#ci)}disableClick(){this.div.removeEventListener("pointerdown",this.#hi),this.div.removeEventListener("pointerup",this.#ci)}attach(t){this.#gi.set(t.id,t);const{annotationElementId:e}=t;e&&this.#yi.isDeletedAnnotationElement(e)&&this.#yi.removeDeletedAnnotationElement(t)}detach(t){this.#gi.delete(t.id),this.#B?.removePointerInTextLayer(t.contentDiv),!this.#bi&&t.annotationElementId&&this.#yi.addDeletedAnnotationElement(t)}remove(t){this.detach(t),this.#yi.removeEditor(t),t.div.remove(),t.isAttachedToDOM=!1,this.#mi||this.addInkEditorIfNeeded(!1)}changeParent(t){t.parent!==this&&(t.annotationElementId&&(this.#yi.addDeletedAnnotationElement(t.annotationElementId),s.AnnotationEditor.deleteAnnotationElement(t),t.annotationElementId=null),this.attach(t),t.parent?.detach(t),t.setParent(this),t.div&&t.isAttachedToDOM&&(t.div.remove(),this.div.append(t.div)))}add(t){if(this.changeParent(t),this.#yi.addEditor(t),this.attach(t),!t.isAttachedToDOM){const e=t.render();this.div.append(e),t.isAttachedToDOM=!0}t.fixAndSetPosition(),t.onceAdded(),this.#yi.addToAnnotationStorage(t)}moveEditorInDOM(t){if(!t.isAttachedToDOM)return;const{activeElement:e}=document;t.div.contains(e)&&!this.#ui&&(t._focusEventsAllowed=!1,this.#ui=setTimeout((()=>{this.#ui=null,t.div.contains(document.activeElement)?t._focusEventsAllowed=!0:(t.div.addEventListener("focusin",(()=>{t._focusEventsAllowed=!0}),{once:!0}),e.focus())}),0)),t._structTreeParentId=this.#B?.moveElementInDOM(this.div,t.div,t.contentDiv,!0)}addOrRebuild(t){t.needsToBeRebuilt()?(t.parent||=this,t.rebuild()):this.add(t)}addUndoableEditor(t){this.addCommands({cmd:()=>t._uiManager.rebuild(t),undo:()=>{t.remove()},mustExec:!1})}getNextId(){return this.#yi.getId()}get#Ei(){return g.#wi.get(this.#yi.getMode())}#Ci(t){const e=this.#Ei;return e?new e.prototype.constructor(t):null}canCreateNewEmptyEditor(){return this.#Ei?.canCreateNewEmptyEditor()}pasteEditor(t,e){this.#yi.updateToolbar(t),this.#yi.updateMode(t);const{offsetX:i,offsetY:n}=this.#Ai(),s=this.getNextId(),o=this.#Ci({parent:this,id:s,x:i,y:n,uiManager:this.#yi,isCentered:!0,...e});o&&this.add(o)}deserialize(t){return g.#wi.get(t.annotationType??t.annotationEditorType)?.deserialize(t,this,this.#yi)||null}#xi(t,e,i={}){const n=this.getNextId(),s=this.#Ci({parent:this,id:n,x:t.offsetX,y:t.offsetY,uiManager:this.#yi,isCentered:e,...i});return s&&this.add(s),s}#Ai(){const{x:t,y:e,width:i,height:n}=this.div.getBoundingClientRect(),s=Math.max(0,t),o=Math.max(0,e),r=(s+Math.min(window.innerWidth,t+i))/2-t,a=(o+Math.min(window.innerHeight,e+n))/2-e,[l,c]=this.viewport.rotation%180==0?[r,a]:[a,r];return{offsetX:l,offsetY:c}}addNewEditor(){this.#xi(this.#Ai(),!0)}setSelected(t){this.#yi.setSelected(t)}toggleSelected(t){this.#yi.toggleSelected(t)}isSelected(t){return this.#yi.isSelected(t)}unselect(t){this.#yi.unselect(t)}selectionStart(t){this.#vi?.div.addEventListener("pointerup",this.#di,{once:!0})}pointerUpAfterSelection(t){const e=document.getSelection();if(0===e.rangeCount)return;const i=e.getRangeAt(0);if(i.collapsed)return;if(!this.#vi?.div.contains(i.commonAncestorContainer))return;const{x:n,y:s,width:o,height:r}=this.#vi.div.getBoundingClientRect(),a=i.getClientRects();let l;switch(this.viewport.rotation){case 90:l=(t,e,i,a)=>({x:(e-s)/r,y:1-(t+i-n)/o,width:a/r,height:i/o});break;case 180:l=(t,e,i,a)=>({x:1-(t+i-n)/o,y:1-(e+a-s)/r,width:i/o,height:a/r});break;case 270:l=(t,e,i,a)=>({x:1-(e+a-s)/r,y:(t-n)/o,width:a/r,height:i/o});break;default:l=(t,e,i,a)=>({x:(t-n)/o,y:(e-s)/r,width:i/o,height:a/r})}const c=[];for(const{x:t,y:e,width:i,height:n}of a)0!==i&&0!==n&&c.push(l(t,e,i,n));0!==c.length&&this.#xi(t,!1,{boxes:c}),e.empty()}pointerup(t){const{isMac:e}=n.FeatureTest.platform;0!==t.button||t.ctrlKey&&e||t.target===this.div&&this.#fi&&(this.#fi=!1,this.#ai?this.#yi.getMode()!==n.AnnotationEditorType.STAMP?this.#xi(t,!1):this.#yi.unselectAll():this.#ai=!0)}pointerdown(t){if(this.#yi.getMode()===n.AnnotationEditorType.HIGHLIGHT&&this.enableTextSelection(),this.#fi)return void(this.#fi=!1);const{isMac:e}=n.FeatureTest.platform;if(0!==t.button||t.ctrlKey&&e)return;if(t.target!==this.div)return;this.#fi=!0;const i=this.#yi.getActive();this.#ai=!i||i.isEmpty()}findNewParent(t,e,i){const n=this.#yi.findParent(e,i);return null!==n&&n!==this&&(n.changeParent(t),!0)}destroy(){this.#yi.getActive()?.parent===this&&(this.#yi.commitOrRemove(),this.#yi.setActiveEditor(null)),this.#ui&&(clearTimeout(this.#ui),this.#ui=null);for(const t of this.#gi.values())this.#B?.removePointerInTextLayer(t.contentDiv),t.setParent(null),t.isAttachedToDOM=!1,t.div.remove();this.div=null,this.#gi.clear(),this.#yi.removeLayer(this)}#ki(){this.#mi=!0;for(const t of this.#gi.values())t.isEmpty()&&t.remove();this.#mi=!1}render({viewport:t}){this.viewport=t,(0,h.setLayerDimensions)(this.div,t);for(const t of this.#yi.getEditors(this.pageIndex))this.add(t);this.updateMode()}update({viewport:t}){this.#yi.commitOrRemove();const e=this.viewport.rotation,i=t.rotation;if(this.viewport=t,(0,h.setLayerDimensions)(this.div,{rotation:i}),e!==i)for(const t of this.#gi.values())t.rotate(i);this.updateMode()}get pageDimensions(){const{pageWidth:t,pageHeight:e}=this.viewport.rawDims;return[t,e]}}},97:(t,e,i)=>{i.d(e,{ColorPicker:()=>r});var n=i(266),s=i(812),o=i(473);class r{#s=this.#o.bind(this);#Si=null;#_i=null;#Ti;#Mi=null;#Ii=!1;#Li=!1;#Bi;#yi=null;static get _keyboardManager(){return(0,n.shadow)(this,"_keyboardManager",new s.KeyboardManager([[["Escape","mac+Escape"],r.prototype._hideDropdownFromKeyboard],[[" ","mac+ "],r.prototype._colorSelectFromKeyboard],[["ArrowDown","ArrowRight","mac+ArrowDown","mac+ArrowRight"],r.prototype._moveToNext],[["ArrowUp","ArrowLeft","mac+ArrowUp","mac+ArrowLeft"],r.prototype._moveToPrevious],[["Home","mac+Home"],r.prototype._moveToBeginning],[["End","mac+End"],r.prototype._moveToEnd]]))}constructor({editor:t=null,uiManager:e=null}){this.#Li=!t,this.#yi=t?._uiManager||e,this.#Bi=this.#yi._eventBus,this.#Ti=t?.color||this.#yi?.highlightColors.values().next().value||"#FFFF98"}renderButton(){const t=this.#Si=document.createElement("button");t.className="colorPicker",t.tabIndex="0",t.setAttribute("data-l10n-id","pdfjs-editor-colorpicker-button"),t.setAttribute("aria-haspopup",!0),t.addEventListener("click",this.#Pi.bind(this));const e=this.#_i=document.createElement("span");return e.className="swatch",e.style.backgroundColor=this.#Ti,t.append(e),t}renderMainDropdown(){const t=this.#Mi=this.#Ri(n.AnnotationEditorParamsType.HIGHLIGHT_DEFAULT_COLOR);return t.setAttribute("aria-orientation","horizontal"),t.setAttribute("aria-labelledby","highlightColorPickerLabel"),t}#Ri(t){const e=document.createElement("div");e.addEventListener("contextmenu",o.noContextMenu),e.className="dropdown",e.role="listbox",e.setAttribute("aria-multiselectable",!1),e.setAttribute("aria-orientation","vertical"),e.setAttribute("data-l10n-id","pdfjs-editor-colorpicker-dropdown");for(const[i,n]of this.#yi.highlightColors){const s=document.createElement("button");s.tabIndex="0",s.role="option",s.setAttribute("data-color",n),s.title=i,s.setAttribute("data-l10n-id",`pdfjs-editor-colorpicker-${i}`);const o=document.createElement("span");s.append(o),o.className="swatch",o.style.backgroundColor=n,s.setAttribute("aria-selected",n===this.#Ti),s.addEventListener("click",this.#Di.bind(this,t,n)),e.append(s)}return e.addEventListener("keydown",this.#s),e}#Di(t,e,i){i.stopPropagation(),this.#Bi.dispatch("switchannotationeditorparams",{source:this,type:t,value:e})}_colorSelectFromKeyboard(t){const e=t.target.getAttribute("data-color");e&&this.#Di(e,t)}_moveToNext(t){t.target!==this.#Si?t.target.nextSibling?.focus():this.#Mi.firstChild?.focus()}_moveToPrevious(t){t.target.previousSibling?.focus()}_moveToBeginning(){this.#Mi.firstChild?.focus()}_moveToEnd(){this.#Mi.lastChild?.focus()}#o(t){r._keyboardManager.exec(this,t)}#Pi(t){if(this.#Mi&&!this.#Mi.classList.contains("hidden"))return void this.hideDropdown();if(this.#Si.addEventListener("keydown",this.#s),this.#Ii=0===t.detail,this.#Mi)return void this.#Mi.classList.remove("hidden");const e=this.#Mi=this.#Ri(n.AnnotationEditorParamsType.HIGHLIGHT_COLOR);this.#Si.append(e)}hideDropdown(){this.#Mi?.classList.add("hidden")}_hideDropdownFromKeyboard(){this.#Li||!this.#Mi||this.#Mi.classList.contains("hidden")||(this.hideDropdown(),this.#Si.removeEventListener("keydown",this.#s),this.#Si.focus({preventScroll:!0,focusVisible:this.#Ii}))}updateColor(t){if(this.#_i&&(this.#_i.style.backgroundColor=t),!this.#Mi)return;const e=this.#yi.highlightColors.values();for(const i of this.#Mi.children)i.setAttribute("aria-selected",e.next().value===t)}destroy(){this.#Si?.remove(),this.#Si=null,this.#_i=null,this.#Mi?.remove(),this.#Mi=null}}},115:(t,e,i)=>{i.d(e,{AnnotationEditor:()=>l});var n=i(812),s=i(266),o=i(473);class r{#Oi="";#Fi=!1;#Ni=null;#Hi=null;#ji=null;#Ui=!1;#zi=null;static _l10nPromise=null;constructor(t){this.#zi=t}static initialize(t){r._l10nPromise||=t}async render(){const t=this.#Ni=document.createElement("button");t.className="altText";const e=await r._l10nPromise.get("pdfjs-editor-alt-text-button-label");t.textContent=e,t.setAttribute("aria-label",e),t.tabIndex="0",t.addEventListener("contextmenu",o.noContextMenu),t.addEventListener("pointerdown",(t=>t.stopPropagation()));const i=t=>{t.preventDefault(),this.#zi._uiManager.editAltText(this.#zi)};return t.addEventListener("click",i,{capture:!0}),t.addEventListener("keydown",(e=>{e.target===t&&"Enter"===e.key&&(this.#Ui=!0,i(e))})),await this.#qi(),t}finish(){this.#Ni&&(this.#Ni.focus({focusVisible:this.#Ui}),this.#Ui=!1)}get data(){return{altText:this.#Oi,decorative:this.#Fi}}set data({altText:t,decorative:e}){this.#Oi===t&&this.#Fi===e||(this.#Oi=t,this.#Fi=e,this.#qi())}toggle(t=!1){this.#Ni&&(!t&&this.#ji&&(clearTimeout(this.#ji),this.#ji=null),this.#Ni.disabled=!t)}destroy(){this.#Ni?.remove(),this.#Ni=null,this.#Hi=null}async#qi(){const t=this.#Ni;if(!t)return;if(!this.#Oi&&!this.#Fi)return t.classList.remove("done"),void this.#Hi?.remove();t.classList.add("done"),r._l10nPromise.get("pdfjs-editor-alt-text-edit-button-label").then((e=>{t.setAttribute("aria-label",e)}));let e=this.#Hi;if(!e){this.#Hi=e=document.createElement("span"),e.className="tooltip",e.setAttribute("role","tooltip");const i=e.id=`alt-text-tooltip-${this.#zi.id}`;t.setAttribute("aria-describedby",i);const n=100;t.addEventListener("mouseenter",(()=>{this.#ji=setTimeout((()=>{this.#ji=null,this.#Hi.classList.add("show"),this.#zi._uiManager._eventBus.dispatch("reporttelemetry",{source:this,details:{type:"editing",subtype:this.#zi.editorType,data:{action:"alt_text_tooltip"}}})}),n)})),t.addEventListener("mouseleave",(()=>{this.#ji&&(clearTimeout(this.#ji),this.#ji=null),this.#Hi?.classList.remove("show")}))}e.innerText=this.#Fi?await r._l10nPromise.get("pdfjs-editor-alt-text-decorative-tooltip"):this.#Oi,e.parentNode||t.append(e);const i=this.#zi.getImageForAltText();i?.setAttribute("aria-describedby",e.id)}}class a{#$i=null;#Vt=null;#zi;#Vi=null;constructor(t){this.#zi=t}render(){const t=this.#$i=document.createElement("div");t.className="editToolbar",t.addEventListener("contextmenu",o.noContextMenu),t.addEventListener("pointerdown",a.#Wi);const e=this.#Vi=document.createElement("div");e.className="buttons",t.append(e);const i=this.#zi.toolbarPosition;if(i){const{style:e}=t,n="ltr"===this.#zi._uiManager.direction?1-i[0]:i[0];e.insetInlineEnd=100*n+"%",e.top=`calc(${100*i[1]}% + var(--editor-toolbar-vert-offset))`}return this.#Gi(),t}static#Wi(t){t.stopPropagation()}#Ki(t){this.#zi._focusEventsAllowed=!1,t.preventDefault(),t.stopPropagation()}#Xi(t){this.#zi._focusEventsAllowed=!0,t.preventDefault(),t.stopPropagation()}#Yi(t){t.addEventListener("focusin",this.#Ki.bind(this),{capture:!0}),t.addEventListener("focusout",this.#Xi.bind(this),{capture:!0}),t.addEventListener("contextmenu",o.noContextMenu)}hide(){this.#$i.classList.add("hidden"),this.#Vt?.hideDropdown()}show(){this.#$i.classList.remove("hidden")}#Gi(){const t=document.createElement("button");t.className="delete",t.tabIndex=0,t.setAttribute("data-l10n-id",`pdfjs-editor-remove-${this.#zi.editorType}-button`),this.#Yi(t),t.addEventListener("click",(t=>{this.#zi._uiManager.delete()})),this.#Vi.append(t)}get#Ji(){const t=document.createElement("div");return t.className="divider",t}addAltTextButton(t){this.#Yi(t),this.#Vi.prepend(t,this.#Ji)}addColorPicker(t){this.#Vt=t;const e=t.renderButton();this.#Yi(e),this.#Vi.prepend(e,this.#Ji)}remove(){this.#$i.remove(),this.#Vt?.destroy(),this.#Vt=null}}class l{#Qi=null;#Oi=null;#Zi=!1;#tn=null;#en=null;#in=this.focusin.bind(this);#nn=this.focusout.bind(this);#sn=null;#on="";#rn=!1;#an=!1;#ln=!1;#cn=!1;#dn=null;_initialOptions=Object.create(null);_uiManager=null;_focusEventsAllowed=!0;_l10nPromise=null;#hn=!1;#un=l._zIndex++;static _borderLineWidth=-1;static _colorManager=new n.ColorManager;static _zIndex=1;static get _resizerKeyboardManager(){const t=l.prototype._resizeWithKeyboard,e=n.AnnotationEditorUIManager.TRANSLATE_SMALL,i=n.AnnotationEditorUIManager.TRANSLATE_BIG;return(0,s.shadow)(this,"_resizerKeyboardManager",new n.KeyboardManager([[["ArrowLeft","mac+ArrowLeft"],t,{args:[-e,0]}],[["ctrl+ArrowLeft","mac+shift+ArrowLeft"],t,{args:[-i,0]}],[["ArrowRight","mac+ArrowRight"],t,{args:[e,0]}],[["ctrl+ArrowRight","mac+shift+ArrowRight"],t,{args:[i,0]}],[["ArrowUp","mac+ArrowUp"],t,{args:[0,-e]}],[["ctrl+ArrowUp","mac+shift+ArrowUp"],t,{args:[0,-i]}],[["ArrowDown","mac+ArrowDown"],t,{args:[0,e]}],[["ctrl+ArrowDown","mac+shift+ArrowDown"],t,{args:[0,i]}],[["Escape","mac+Escape"],l.prototype._stopResizingWithKeyboard]]))}constructor(t){this.constructor===l&&(0,s.unreachable)("Cannot initialize AnnotationEditor."),this.parent=t.parent,this.id=t.id,this.width=this.height=null,this.pageIndex=t.parent.pageIndex,this.name=t.name,this.div=null,this._uiManager=t.uiManager,this.annotationElementId=null,this._willKeepAspectRatio=!1,this._initialOptions.isCentered=t.isCentered,this._structTreeParentId=null;const{rotation:e,rawDims:{pageWidth:i,pageHeight:n,pageX:o,pageY:r}}=this.parent.viewport;this.rotation=e,this.pageRotation=(360+e-this._uiManager.viewParameters.rotation)%360,this.pageDimensions=[i,n],this.pageTranslation=[o,r];const[a,c]=this.parentDimensions;this.x=t.x/a,this.y=t.y/c,this.isAttachedToDOM=!1,this.deleted=!1}get editorType(){return Object.getPrototypeOf(this).constructor._type}static get _defaultLineColor(){return(0,s.shadow)(this,"_defaultLineColor",this._colorManager.getHexCode("CanvasText"))}static deleteAnnotationElement(t){const e=new c({id:t.parent.getNextId(),parent:t.parent,uiManager:t._uiManager});e.annotationElementId=t.annotationElementId,e.deleted=!0,e._uiManager.addToAnnotationStorage(e)}static initialize(t,e=null){if(l._l10nPromise||=new Map(["pdfjs-editor-alt-text-button-label","pdfjs-editor-alt-text-edit-button-label","pdfjs-editor-alt-text-decorative-tooltip","pdfjs-editor-resizer-label-topLeft","pdfjs-editor-resizer-label-topMiddle","pdfjs-editor-resizer-label-topRight","pdfjs-editor-resizer-label-middleRight","pdfjs-editor-resizer-label-bottomRight","pdfjs-editor-resizer-label-bottomMiddle","pdfjs-editor-resizer-label-bottomLeft","pdfjs-editor-resizer-label-middleLeft"].map((e=>[e,t.get(e.replaceAll(/([A-Z])/g,(t=>`-${t.toLowerCase()}`)))]))),e?.strings)for(const i of e.strings)l._l10nPromise.set(i,t.get(i));if(-1!==l._borderLineWidth)return;const i=getComputedStyle(document.documentElement);l._borderLineWidth=parseFloat(i.getPropertyValue("--outline-width"))||0}static updateDefaultParams(t,e){}static get defaultPropertiesToUpdate(){return[]}static isHandlingMimeForPasting(t){return!1}static paste(t,e){(0,s.unreachable)("Not implemented")}get propertiesToUpdate(){return[]}get _isDraggable(){return this.#hn}set _isDraggable(t){this.#hn=t,this.div?.classList.toggle("draggable",t)}get isEnterHandled(){return!0}center(){const[t,e]=this.pageDimensions;switch(this.parentRotation){case 90:this.x-=this.height*e/(2*t),this.y+=this.width*t/(2*e);break;case 180:this.x+=this.width/2,this.y+=this.height/2;break;case 270:this.x+=this.height*e/(2*t),this.y-=this.width*t/(2*e);break;default:this.x-=this.width/2,this.y-=this.height/2}this.fixAndSetPosition()}addCommands(t){this._uiManager.addCommands(t)}get currentLayer(){return this._uiManager.currentLayer}setInBackground(){this.div.style.zIndex=0}setInForeground(){this.div.style.zIndex=this.#un}setParent(t){null!==t?(this.pageIndex=t.pageIndex,this.pageDimensions=t.pageDimensions):this.#pn(),this.parent=t}focusin(t){this._focusEventsAllowed&&(this.#rn?this.#rn=!1:this.parent.setSelected(this))}focusout(t){if(!this._focusEventsAllowed)return;if(!this.isAttachedToDOM)return;const e=t.relatedTarget;e?.closest(`#${this.id}`)||(t.preventDefault(),this.parent?.isMultipleSelection||this.commitOrRemove())}commitOrRemove(){this.isEmpty()?this.remove():this.commit()}commit(){this.addToAnnotationStorage()}addToAnnotationStorage(){this._uiManager.addToAnnotationStorage(this)}setAt(t,e,i,n){const[s,o]=this.parentDimensions;[i,n]=this.screenToPageTranslation(i,n),this.x=(t+i)/s,this.y=(e+n)/o,this.fixAndSetPosition()}#gn([t,e],i,n){[i,n]=this.screenToPageTranslation(i,n),this.x+=i/t,this.y+=n/e,this.fixAndSetPosition()}translate(t,e){this.#gn(this.parentDimensions,t,e)}translateInPage(t,e){this.#gn(this.pageDimensions,t,e),this.div.scrollIntoView({block:"nearest"})}drag(t,e){const[i,n]=this.parentDimensions;if(this.x+=t/i,this.y+=e/n,this.parent&&(this.x<0||this.x>1||this.y<0||this.y>1)){const{x:t,y:e}=this.div.getBoundingClientRect();this.parent.findNewParent(this,t,e)&&(this.x-=Math.floor(this.x),this.y-=Math.floor(this.y))}let{x:s,y:o}=this;const[r,a]=this.#fn();s+=r,o+=a,this.div.style.left=`${(100*s).toFixed(2)}%`,this.div.style.top=`${(100*o).toFixed(2)}%`,this.div.scrollIntoView({block:"nearest"})}#fn(){const[t,e]=this.parentDimensions,{_borderLineWidth:i}=l,n=i/t,s=i/e;switch(this.rotation){case 90:return[-n,s];case 180:return[n,s];case 270:return[n,-s];default:return[-n,-s]}}fixAndSetPosition(t=this.rotation){const[e,i]=this.pageDimensions;let{x:n,y:s,width:o,height:r}=this;switch(o*=e,r*=i,n*=e,s*=i,t){case 0:n=Math.max(0,Math.min(e-o,n)),s=Math.max(0,Math.min(i-r,s));break;case 90:n=Math.max(0,Math.min(e-r,n)),s=Math.min(i,Math.max(o,s));break;case 180:n=Math.min(e,Math.max(o,n)),s=Math.min(i,Math.max(r,s));break;case 270:n=Math.min(e,Math.max(r,n)),s=Math.max(0,Math.min(i-o,s))}this.x=n/=e,this.y=s/=i;const[a,l]=this.#fn();n+=a,s+=l;const{style:c}=this.div;c.left=`${(100*n).toFixed(2)}%`,c.top=`${(100*s).toFixed(2)}%`,this.moveInDOM()}static#mn(t,e,i){switch(i){case 90:return[e,-t];case 180:return[-t,-e];case 270:return[-e,t];default:return[t,e]}}screenToPageTranslation(t,e){return l.#mn(t,e,this.parentRotation)}pageTranslationToScreen(t,e){return l.#mn(t,e,360-this.parentRotation)}#bn(t){switch(t){case 90:{const[t,e]=this.pageDimensions;return[0,-t/e,e/t,0]}case 180:return[-1,0,0,-1];case 270:{const[t,e]=this.pageDimensions;return[0,t/e,-e/t,0]}default:return[1,0,0,1]}}get parentScale(){return this._uiManager.viewParameters.realScale}get parentRotation(){return(this._uiManager.viewParameters.rotation+this.pageRotation)%360}get parentDimensions(){const{parentScale:t,pageDimensions:[e,i]}=this,n=e*t,o=i*t;return s.FeatureTest.isCSSRoundSupported?[Math.round(n),Math.round(o)]:[n,o]}setDims(t,e){const[i,n]=this.parentDimensions;this.div.style.width=`${(100*t/i).toFixed(2)}%`,this.#Zi||(this.div.style.height=`${(100*e/n).toFixed(2)}%`)}fixDims(){const{style:t}=this.div,{height:e,width:i}=t,n=i.endsWith("%"),s=!this.#Zi&&e.endsWith("%");if(n&&s)return;const[o,r]=this.parentDimensions;n||(t.width=`${(100*parseFloat(i)/o).toFixed(2)}%`),this.#Zi||s||(t.height=`${(100*parseFloat(e)/r).toFixed(2)}%`)}getInitialTranslation(){return[0,0]}#vn(){if(this.#tn)return;this.#tn=document.createElement("div"),this.#tn.classList.add("resizers");const t=this._willKeepAspectRatio?["topLeft","topRight","bottomRight","bottomLeft"]:["topLeft","topMiddle","topRight","middleRight","bottomRight","bottomMiddle","bottomLeft","middleLeft"];for(const e of t){const t=document.createElement("div");this.#tn.append(t),t.classList.add("resizer",e),t.setAttribute("data-resizer-name",e),t.addEventListener("pointerdown",this.#yn.bind(this,e)),t.addEventListener("contextmenu",o.noContextMenu),t.tabIndex=-1}this.div.prepend(this.#tn)}#yn(t,e){e.preventDefault();const{isMac:i}=s.FeatureTest.platform;if(0!==e.button||e.ctrlKey&&i)return;this.#Oi?.toggle(!1);const n=this.#wn.bind(this,t),o=this._isDraggable;this._isDraggable=!1;const r={passive:!0,capture:!0};this.parent.togglePointerEvents(!1),window.addEventListener("pointermove",n,r);const a=this.x,l=this.y,c=this.width,d=this.height,h=this.parent.div.style.cursor,u=this.div.style.cursor;this.div.style.cursor=this.parent.div.style.cursor=window.getComputedStyle(e.target).cursor;const p=()=>{this.parent.togglePointerEvents(!0),this.#Oi?.toggle(!0),this._isDraggable=o,window.removeEventListener("pointerup",p),window.removeEventListener("blur",p),window.removeEventListener("pointermove",n,r),this.parent.div.style.cursor=h,this.div.style.cursor=u,this.#kn(a,l,c,d)};window.addEventListener("pointerup",p),window.addEventListener("blur",p)}#kn(t,e,i,n){const s=this.x,o=this.y,r=this.width,a=this.height;s===t&&o===e&&r===i&&a===n||this.addCommands({cmd:()=>{this.width=r,this.height=a,this.x=s,this.y=o;const[t,e]=this.parentDimensions;this.setDims(t*r,e*a),this.fixAndSetPosition()},undo:()=>{this.width=i,this.height=n,this.x=t,this.y=e;const[s,o]=this.parentDimensions;this.setDims(s*i,o*n),this.fixAndSetPosition()},mustExec:!0})}#wn(t,e){const[i,n]=this.parentDimensions,s=this.x,o=this.y,r=this.width,a=this.height,c=l.MIN_SIZE/i,d=l.MIN_SIZE/n,h=t=>Math.round(1e4*t)/1e4,u=this.#bn(this.rotation),p=(t,e)=>[u[0]*t+u[2]*e,u[1]*t+u[3]*e],g=this.#bn(360-this.rotation);let f,m,b=!1,v=!1;switch(t){case"topLeft":b=!0,f=(t,e)=>[0,0],m=(t,e)=>[t,e];break;case"topMiddle":f=(t,e)=>[t/2,0],m=(t,e)=>[t/2,e];break;case"topRight":b=!0,f=(t,e)=>[t,0],m=(t,e)=>[0,e];break;case"middleRight":v=!0,f=(t,e)=>[t,e/2],m=(t,e)=>[0,e/2];break;case"bottomRight":b=!0,f=(t,e)=>[t,e],m=(t,e)=>[0,0];break;case"bottomMiddle":f=(t,e)=>[t/2,e],m=(t,e)=>[t/2,0];break;case"bottomLeft":b=!0,f=(t,e)=>[0,e],m=(t,e)=>[t,0];break;case"middleLeft":v=!0,f=(t,e)=>[0,e/2],m=(t,e)=>[t,e/2]}const y=f(r,a),w=m(r,a);let k=p(...w);const x=h(s+k[0]),E=h(o+k[1]);let C=1,A=1,[S,_]=this.screenToPageTranslation(e.movementX,e.movementY);var T,M;if([S,_]=(T=S/i,M=_/n,[g[0]*T+g[2]*M,g[1]*T+g[3]*M]),b){const t=Math.hypot(r,a);C=A=Math.max(Math.min(Math.hypot(w[0]-y[0]-S,w[1]-y[1]-_)/t,1/r,1/a),c/r,d/a)}else v?C=Math.max(c,Math.min(1,Math.abs(w[0]-y[0]-S)))/r:A=Math.max(d,Math.min(1,Math.abs(w[1]-y[1]-_)))/a;const I=h(r*C),L=h(a*A);k=p(...m(I,L));const B=x-k[0],P=E-k[1];this.width=I,this.height=L,this.x=B,this.y=P,this.setDims(i*I,n*L),this.fixAndSetPosition()}altTextFinish(){this.#Oi?.finish()}async addEditToolbar(){return this.#sn||this.#ln||(this.#sn=new a(this),this.div.append(this.#sn.render()),this.#Oi&&this.#sn.addAltTextButton(await this.#Oi.render())),this.#sn}removeEditToolbar(){this.#sn&&(this.#sn.remove(),this.#sn=null,this.#Oi?.destroy())}getClientDimensions(){return this.div.getBoundingClientRect()}async addAltTextButton(){this.#Oi||(r.initialize(l._l10nPromise),this.#Oi=new r(this),await this.addEditToolbar())}get altTextData(){return this.#Oi?.data}set altTextData(t){this.#Oi&&(this.#Oi.data=t)}render(){this.div=document.createElement("div"),this.div.setAttribute("data-editor-rotation",(360-this.rotation)%360),this.div.className=this.name,this.div.setAttribute("id",this.id),this.div.setAttribute("tabIndex",0),this.setInForeground(),this.div.addEventListener("focusin",this.#in),this.div.addEventListener("focusout",this.#nn);const[t,e]=this.parentDimensions;this.parentRotation%180!=0&&(this.div.style.maxWidth=`${(100*e/t).toFixed(2)}%`,this.div.style.maxHeight=`${(100*t/e).toFixed(2)}%`);const[i,s]=this.getInitialTranslation();return this.translate(i,s),(0,n.bindEvents)(this,this.div,["pointerdown"]),this.div}pointerdown(t){const{isMac:e}=s.FeatureTest.platform;0!==t.button||t.ctrlKey&&e?t.preventDefault():(this.#rn=!0,this._isDraggable?this.#xn(t):this.#En(t))}#En(t){const{isMac:e}=s.FeatureTest.platform;t.ctrlKey&&!e||t.shiftKey||t.metaKey&&e?this.parent.toggleSelected(this):this.parent.setSelected(this)}#xn(t){const e=this._uiManager.isSelected(this);let i,n;this._uiManager.setUpDragSession(),e&&(i={passive:!0,capture:!0},n=t=>{const[e,i]=this.screenToPageTranslation(t.movementX,t.movementY);this._uiManager.dragSelectedEditors(e,i)},window.addEventListener("pointermove",n,i));const s=()=>{window.removeEventListener("pointerup",s),window.removeEventListener("blur",s),e&&window.removeEventListener("pointermove",n,i),this.#rn=!1,this._uiManager.endDragSession()||this.#En(t)};window.addEventListener("pointerup",s),window.addEventListener("blur",s)}moveInDOM(){this.#dn&&clearTimeout(this.#dn),this.#dn=setTimeout((()=>{this.#dn=null,this.parent?.moveEditorInDOM(this)}),0)}_setParentAndPosition(t,e,i){t.changeParent(this),this.x=e,this.y=i,this.fixAndSetPosition()}getRect(t,e,i=this.rotation){const n=this.parentScale,[s,o]=this.pageDimensions,[r,a]=this.pageTranslation,l=t/n,c=e/n,d=this.x*s,h=this.y*o,u=this.width*s,p=this.height*o;switch(i){case 0:return[d+l+r,o-h-c-p+a,d+l+u+r,o-h-c+a];case 90:return[d+c+r,o-h+l+a,d+c+p+r,o-h+l+u+a];case 180:return[d-l-u+r,o-h+c+a,d-l+r,o-h+c+p+a];case 270:return[d-c-p+r,o-h-l-u+a,d-c+r,o-h-l+a];default:throw new Error("Invalid rotation")}}getRectInCurrentCoords(t,e){const[i,n,s,o]=t,r=s-i,a=o-n;switch(this.rotation){case 0:return[i,e-o,r,a];case 90:return[i,e-n,a,r];case 180:return[s,e-n,r,a];case 270:return[s,e-o,a,r];default:throw new Error("Invalid rotation")}}onceAdded(){}isEmpty(){return!1}enableEditMode(){this.#ln=!0}disableEditMode(){this.#ln=!1}isInEditMode(){return this.#ln}shouldGetKeyboardEvents(){return this.#cn}needsToBeRebuilt(){return this.div&&!this.isAttachedToDOM}rebuild(){this.div?.addEventListener("focusin",this.#in),this.div?.addEventListener("focusout",this.#nn)}rotate(t){}serialize(t=!1,e=null){(0,s.unreachable)("An editor must be serializable")}static deserialize(t,e,i){const n=new this.prototype.constructor({parent:e,id:e.getNextId(),uiManager:i});n.rotation=t.rotation;const[s,o]=n.pageDimensions,[r,a,l,c]=n.getRectInCurrentCoords(t.rect,o);return n.x=r/s,n.y=a/o,n.width=l/s,n.height=c/o,n}remove(){this.div.removeEventListener("focusin",this.#in),this.div.removeEventListener("focusout",this.#nn),this.isEmpty()||this.commit(),this.parent?this.parent.remove(this):this._uiManager.removeEditor(this),this.#dn&&(clearTimeout(this.#dn),this.#dn=null),this.#pn(),this.removeEditToolbar()}get isResizable(){return!1}makeResizable(){this.isResizable&&(this.#vn(),this.#tn.classList.remove("hidden"),(0,n.bindEvents)(this,this.div,["keydown"]))}get toolbarPosition(){return null}keydown(t){if(!this.isResizable||t.target!==this.div||"Enter"!==t.key)return;this._uiManager.setSelected(this),this.#en={savedX:this.x,savedY:this.y,savedWidth:this.width,savedHeight:this.height};const e=this.#tn.children;if(!this.#Qi){this.#Qi=Array.from(e);const t=this.#Cn.bind(this),i=this.#An.bind(this);for(const e of this.#Qi){const n=e.getAttribute("data-resizer-name");e.setAttribute("role","spinbutton"),e.addEventListener("keydown",t),e.addEventListener("blur",i),e.addEventListener("focus",this.#Sn.bind(this,n)),l._l10nPromise.get(`pdfjs-editor-resizer-label-${n}`).then((t=>e.setAttribute("aria-label",t)))}}const i=this.#Qi[0];let n=0;for(const t of e){if(t===i)break;n++}const s=(360-this.rotation+this.parentRotation)%360/90*(this.#Qi.length/4);if(s!==n){if(s<n)for(let t=0;t<n-s;t++)this.#tn.append(this.#tn.firstChild);else if(s>n)for(let t=0;t<s-n;t++)this.#tn.firstChild.before(this.#tn.lastChild);let t=0;for(const i of e){const e=this.#Qi[t++].getAttribute("data-resizer-name");l._l10nPromise.get(`pdfjs-editor-resizer-label-${e}`).then((t=>i.setAttribute("aria-label",t)))}}this.#_n(0),this.#cn=!0,this.#tn.firstChild.focus({focusVisible:!0}),t.preventDefault(),t.stopImmediatePropagation()}#Cn(t){l._resizerKeyboardManager.exec(this,t)}#An(t){this.#cn&&t.relatedTarget?.parentNode!==this.#tn&&this.#pn()}#Sn(t){this.#on=this.#cn?t:""}#_n(t){if(this.#Qi)for(const e of this.#Qi)e.tabIndex=t}_resizeWithKeyboard(t,e){this.#cn&&this.#wn(this.#on,{movementX:t,movementY:e})}#pn(){if(this.#cn=!1,this.#_n(-1),this.#en){const{savedX:t,savedY:e,savedWidth:i,savedHeight:n}=this.#en;this.#kn(t,e,i,n),this.#en=null}}_stopResizingWithKeyboard(){this.#pn(),this.div.focus()}select(){this.makeResizable(),this.div?.classList.add("selectedEditor"),this.#sn?this.#sn?.show():this.addEditToolbar().then((()=>{this.div?.classList.contains("selectedEditor")&&this.#sn?.show()}))}unselect(){this.#tn?.classList.add("hidden"),this.div?.classList.remove("selectedEditor"),this.div?.contains(document.activeElement)&&this._uiManager.currentLayer.div.focus(),this.#sn?.hide()}updateParams(t,e){}disableEditing(){}enableEditing(){}enterInEditMode(){}getImageForAltText(){return null}get contentDiv(){return this.div}get isEditing(){return this.#an}set isEditing(t){this.#an=t,this.parent&&(t?(this.parent.setSelected(this),this.parent.setActiveEditor(this)):this.parent.setActiveEditor(null))}setAspectRatio(t,e){this.#Zi=!0;const i=t/e,{style:n}=this.div;n.aspectRatio=i,n.height="auto"}static get MIN_SIZE(){return 16}static canCreateNewEmptyEditor(){return!0}}class c extends l{constructor(t){super(t),this.annotationElementId=t.annotationElementId,this.deleted=!0}serialize(){return{id:this.annotationElementId,deleted:!0,pageIndex:this.pageIndex}}}},405:(t,e,i)=>{i.d(e,{Outliner:()=>n});class n{#Tn;#Mn=[];#In=[];constructor(t,e=0,i=0,n=!0){let s=1/0,o=-1/0,r=1/0,a=-1/0;const l=10**-4;for(const{x:i,y:n,width:c,height:d}of t){const t=Math.floor((i-e)/l)*l,h=Math.ceil((i+c+e)/l)*l,u=Math.floor((n-e)/l)*l,p=Math.ceil((n+d+e)/l)*l,g=[t,u,p,!0],f=[h,u,p,!1];this.#Mn.push(g,f),s=Math.min(s,t),o=Math.max(o,h),r=Math.min(r,u),a=Math.max(a,p)}const c=o-s+2*i,d=a-r+2*i,h=s-i,u=r-i,p=this.#Mn.at(n?-1:-2),g=[p[0],p[2]];for(const t of this.#Mn){const[e,i,n]=t;t[0]=(e-h)/c,t[1]=(i-u)/d,t[2]=(n-u)/d}this.#Tn={x:h,y:u,width:c,height:d,lastPoint:g}}getOutlines(){this.#Mn.sort(((t,e)=>t[0]-e[0]||t[1]-e[1]||t[2]-e[2]));const t=[];for(const e of this.#Mn)e[3]?(t.push(...this.#Ln(e)),this.#Bn(e)):(this.#Pn(e),t.push(...this.#Ln(e)));return this.#Rn(t)}#Rn(t){const e=[],i=new Set;for(const i of t){const[t,n,s]=i;e.push([t,n,i],[t,s,i])}e.sort(((t,e)=>t[1]-e[1]||t[0]-e[0]));for(let t=0,n=e.length;t<n;t+=2){const n=e[t][2],s=e[t+1][2];n.push(s),s.push(n),i.add(n),i.add(s)}const n=[];let s;for(;i.size>0;){const t=i.values().next().value;let[e,o,r,a,l]=t;i.delete(t);let c=e,d=o;for(s=[e,r],n.push(s);;){let t;if(i.has(a))t=a;else{if(!i.has(l))break;t=l}i.delete(t),[e,o,r,a,l]=t,c!==e&&(s.push(c,d,e,d===o?o:r),c=e),d=d===o?r:o}s.push(c,d)}return{outlines:n,box:this.#Tn}}#Dn(t){const e=this.#In;let i=0,n=e.length-1;for(;i<=n;){const s=i+n>>1,o=e[s][0];if(o===t)return s;o<t?i=s+1:n=s-1}return n+1}#Bn([,t,e]){const i=this.#Dn(t);this.#In.splice(i,0,[t,e])}#Pn([,t,e]){const i=this.#Dn(t);for(let n=i;n<this.#In.length;n++){const[i,s]=this.#In[n];if(i!==t)break;if(i===t&&s===e)return void this.#In.splice(n,1)}for(let n=i-1;n>=0;n--){const[i,s]=this.#In[n];if(i!==t)break;if(i===t&&s===e)return void this.#In.splice(n,1)}}#Ln(t){const[e,i,n]=t,s=[[e,i,n]],o=this.#Dn(n);for(let t=0;t<o;t++){const[i,n]=this.#In[t];for(let t=0,o=s.length;t<o;t++){const[,r,a]=s[t];if(!(n<=r||a<=i))if(r>=i)if(a>n)s[t][1]=n;else{if(1===o)return[];s.splice(t,1),t--,o--}else s[t][2]=i,a>n&&s.push([e,n,a])}}return s}}},812:(t,e,i)=>{i.d(e,{AnnotationEditorUIManager:()=>u,ColorManager:()=>h,KeyboardManager:()=>d,bindEvents:()=>o,opacityToHex:()=>r});var n=i(266),s=i(473);function o(t,e,i){for(const n of i)e.addEventListener(n,t[n].bind(t))}function r(t){return Math.round(Math.min(255,Math.max(1,255*t))).toString(16).padStart(2,"0")}class a{#mt=0;getId(){return`${n.AnnotationEditorPrefix}${this.#mt++}`}}class l{#On=(0,n.getUuid)();#mt=0;#bt=null;static get _isSVGFittingCanvas(){const t=new OffscreenCanvas(1,3).getContext("2d"),e=new Image;e.src='data:image/svg+xml;charset=UTF-8,<svg viewBox="0 0 1 1" width="1" height="1" xmlns="http://www.w3.org/2000/svg"><rect width="1" height="1" style="fill:red;"/></svg>';const i=e.decode().then((()=>(t.drawImage(e,0,0,1,1,0,0,1,3),0===new Uint32Array(t.getImageData(0,0,1,1).data.buffer)[0])));return(0,n.shadow)(this,"_isSVGFittingCanvas",i)}async#Fn(t,e){this.#bt||=new Map;let i=this.#bt.get(t);if(null===i)return null;if(i?.bitmap)return i.refCounter+=1,i;try{let t;if(i||={bitmap:null,id:`image_${this.#On}_${this.#mt++}`,refCounter:0,isSvg:!1},"string"==typeof e?(i.url=e,t=await(0,s.fetchData)(e,"blob")):t=i.file=e,"image/svg+xml"===t.type){const e=l._isSVGFittingCanvas,n=new FileReader,s=new Image,o=new Promise(((t,o)=>{s.onload=()=>{i.bitmap=s,i.isSvg=!0,t()},n.onload=async()=>{const t=i.svgUrl=n.result;s.src=await e?`${t}#svgView(preserveAspectRatio(none))`:t},s.onerror=n.onerror=o}));n.readAsDataURL(t),await o}else i.bitmap=await createImageBitmap(t);i.refCounter=1}catch(t){console.error(t),i=null}return this.#bt.set(t,i),i&&this.#bt.set(i.id,i),i}async getFromFile(t){const{lastModified:e,name:i,size:n,type:s}=t;return this.#Fn(`${e}_${i}_${n}_${s}`,t)}async getFromUrl(t){return this.#Fn(t,t)}async getFromId(t){this.#bt||=new Map;const e=this.#bt.get(t);return e?e.bitmap?(e.refCounter+=1,e):e.file?this.getFromFile(e.file):this.getFromUrl(e.url):null}getSvgUrl(t){const e=this.#bt.get(t);return e?.isSvg?e.svgUrl:null}deleteId(t){this.#bt||=new Map;const e=this.#bt.get(t);e&&(e.refCounter-=1,0===e.refCounter&&(e.bitmap=null))}isValidId(t){return t.startsWith(`image_${this.#On}_`)}}class c{#Nn=[];#Hn=!1;#jn;#Un=-1;constructor(t=128){this.#jn=t}add({cmd:t,undo:e,mustExec:i,type:n=NaN,overwriteIfSameType:s=!1,keepUndo:o=!1}){if(i&&t(),this.#Hn)return;const r={cmd:t,undo:e,type:n};if(-1===this.#Un)return this.#Nn.length>0&&(this.#Nn.length=0),this.#Un=0,void this.#Nn.push(r);if(s&&this.#Nn[this.#Un].type===n)return o&&(r.undo=this.#Nn[this.#Un].undo),void(this.#Nn[this.#Un]=r);const a=this.#Un+1;a===this.#jn?this.#Nn.splice(0,1):(this.#Un=a,a<this.#Nn.length&&this.#Nn.splice(a)),this.#Nn.push(r)}undo(){-1!==this.#Un&&(this.#Hn=!0,this.#Nn[this.#Un].undo(),this.#Hn=!1,this.#Un-=1)}redo(){this.#Un<this.#Nn.length-1&&(this.#Un+=1,this.#Hn=!0,this.#Nn[this.#Un].cmd(),this.#Hn=!1)}hasSomethingToUndo(){return-1!==this.#Un}hasSomethingToRedo(){return this.#Un<this.#Nn.length-1}destroy(){this.#Nn=null}}class d{constructor(t){this.buffer=[],this.callbacks=new Map,this.allKeys=new Set;const{isMac:e}=n.FeatureTest.platform;for(const[i,n,s={}]of t)for(const t of i){const i=t.startsWith("mac+");e&&i?(this.callbacks.set(t.slice(4),{callback:n,options:s}),this.allKeys.add(t.split("+").at(-1))):e||i||(this.callbacks.set(t,{callback:n,options:s}),this.allKeys.add(t.split("+").at(-1)))}}#zn(t){t.altKey&&this.buffer.push("alt"),t.ctrlKey&&this.buffer.push("ctrl"),t.metaKey&&this.buffer.push("meta"),t.shiftKey&&this.buffer.push("shift"),this.buffer.push(t.key);const e=this.buffer.join("+");return this.buffer.length=0,e}exec(t,e){if(!this.allKeys.has(e.key))return;const i=this.callbacks.get(this.#zn(e));if(!i)return;const{callback:n,options:{bubbles:s=!1,args:o=[],checker:r=null}}=i;r&&!r(t,e)||(n.bind(t,...o,e)(),s||(e.stopPropagation(),e.preventDefault()))}}class h{static _colorsMapping=new Map([["CanvasText",[0,0,0]],["Canvas",[255,255,255]]]);get _colors(){const t=new Map([["CanvasText",null],["Canvas",null]]);return(0,s.getColorValues)(t),(0,n.shadow)(this,"_colors",t)}convert(t){const e=(0,s.getRGB)(t);if(!window.matchMedia("(forced-colors: active)").matches)return e;for(const[t,i]of this._colors)if(i.every(((t,i)=>t===e[i])))return h._colorsMapping.get(t);return e}getHexCode(t){const e=this._colors.get(t);return e?n.Util.makeHexColor(...e):t}}class u{#qn=null;#$n=new Map;#Vn=new Map;#Wn=null;#Gn=null;#Kn=new c;#Xn=0;#Yn=new Set;#Jn=null;#wi=null;#Qn=new Set;#Zn=null;#ts=null;#es=null;#is=new a;#ns=!1;#ss=!1;#os=null;#rs=null;#as=n.AnnotationEditorType.NONE;#ls=new Set;#cs=null;#ds=this.blur.bind(this);#hs=this.focus.bind(this);#us=this.copy.bind(this);#ps=this.cut.bind(this);#gs=this.paste.bind(this);#fs=this.keydown.bind(this);#ms=this.onEditingAction.bind(this);#bs=this.onPageChanging.bind(this);#vs=this.onScaleChanging.bind(this);#ys=this.onRotationChanging.bind(this);#ws={isEditing:!1,isEmpty:!0,hasSomethingToUndo:!1,hasSomethingToRedo:!1,hasSelectedEditor:!1};#ks=[0,0];#xs=null;#p=null;#Es=null;static TRANSLATE_SMALL=1;static TRANSLATE_BIG=10;static get _keyboardManager(){const t=u.prototype,e=t=>t.#p.contains(document.activeElement)&&"BUTTON"!==document.activeElement.tagName&&t.hasSomethingToControl(),i=(t,{target:e})=>{if(e instanceof HTMLInputElement){const{type:t}=e;return"text"!==t&&"number"!==t}return!0},s=this.TRANSLATE_SMALL,o=this.TRANSLATE_BIG;return(0,n.shadow)(this,"_keyboardManager",new d([[["ctrl+a","mac+meta+a"],t.selectAll,{checker:i}],[["ctrl+z","mac+meta+z"],t.undo,{checker:i}],[["ctrl+y","ctrl+shift+z","mac+meta+shift+z","ctrl+shift+Z","mac+meta+shift+Z"],t.redo,{checker:i}],[["Backspace","alt+Backspace","ctrl+Backspace","shift+Backspace","mac+Backspace","mac+alt+Backspace","mac+ctrl+Backspace","Delete","ctrl+Delete","shift+Delete","mac+Delete"],t.delete,{checker:i}],[["Enter","mac+Enter"],t.addNewEditorFromKeyboard,{checker:(t,{target:e})=>!(e instanceof HTMLButtonElement)&&t.#p.contains(e)&&!t.isEnterHandled}],[[" ","mac+ "],t.addNewEditorFromKeyboard,{checker:t=>t.#p.contains(document.activeElement)}],[["Escape","mac+Escape"],t.unselectAll],[["ArrowLeft","mac+ArrowLeft"],t.translateSelectedEditors,{args:[-s,0],checker:e}],[["ctrl+ArrowLeft","mac+shift+ArrowLeft"],t.translateSelectedEditors,{args:[-o,0],checker:e}],[["ArrowRight","mac+ArrowRight"],t.translateSelectedEditors,{args:[s,0],checker:e}],[["ctrl+ArrowRight","mac+shift+ArrowRight"],t.translateSelectedEditors,{args:[o,0],checker:e}],[["ArrowUp","mac+ArrowUp"],t.translateSelectedEditors,{args:[0,-s],checker:e}],[["ctrl+ArrowUp","mac+shift+ArrowUp"],t.translateSelectedEditors,{args:[0,-o],checker:e}],[["ArrowDown","mac+ArrowDown"],t.translateSelectedEditors,{args:[0,s],checker:e}],[["ctrl+ArrowDown","mac+shift+ArrowDown"],t.translateSelectedEditors,{args:[0,o],checker:e}]]))}constructor(t,e,i,n,o,r,a){this.#p=t,this.#Es=e,this.#Wn=i,this._eventBus=n,this._eventBus._on("editingaction",this.#ms),this._eventBus._on("pagechanging",this.#bs),this._eventBus._on("scalechanging",this.#vs),this._eventBus._on("rotationchanging",this.#ys),this.#Gn=o.annotationStorage,this.#Zn=o.filterFactory,this.#cs=r,this.#es=a||null,this.viewParameters={realScale:s.PixelsPerInch.PDF_TO_CSS_UNITS,rotation:0}}destroy(){this.#Cs(),this.#As(),this._eventBus._off("editingaction",this.#ms),this._eventBus._off("pagechanging",this.#bs),this._eventBus._off("scalechanging",this.#vs),this._eventBus._off("rotationchanging",this.#ys);for(const t of this.#Vn.values())t.destroy();this.#Vn.clear(),this.#$n.clear(),this.#Qn.clear(),this.#qn=null,this.#ls.clear(),this.#Kn.destroy(),this.#Wn?.destroy(),this.#ts&&(clearTimeout(this.#ts),this.#ts=null),this.#xs&&(clearTimeout(this.#xs),this.#xs=null)}get hcmFilter(){return(0,n.shadow)(this,"hcmFilter",this.#cs?this.#Zn.addHCMFilter(this.#cs.foreground,this.#cs.background):"none")}get direction(){return(0,n.shadow)(this,"direction",getComputedStyle(this.#p).direction)}get highlightColors(){return(0,n.shadow)(this,"highlightColors",this.#es?new Map(this.#es.split(",").map((t=>t.split("=").map((t=>t.trim()))))):null)}setMainHighlightColorPicker(t){this.#rs=t}editAltText(t){this.#Wn?.editAltText(this,t)}onPageChanging({pageNumber:t}){this.#Xn=t-1}focusMainContainer(){this.#p.focus()}findParent(t,e){for(const i of this.#Vn.values()){const{x:n,y:s,width:o,height:r}=i.div.getBoundingClientRect();if(t>=n&&t<=n+o&&e>=s&&e<=s+r)return i}return null}disableUserSelect(t=!1){this.#Es.classList.toggle("noUserSelect",t)}addShouldRescale(t){this.#Qn.add(t)}removeShouldRescale(t){this.#Qn.delete(t)}onScaleChanging({scale:t}){this.commitOrRemove(),this.viewParameters.realScale=t*s.PixelsPerInch.PDF_TO_CSS_UNITS;for(const t of this.#Qn)t.onScaleChanging()}onRotationChanging({pagesRotation:t}){this.commitOrRemove(),this.viewParameters.rotation=t}addToAnnotationStorage(t){t.isEmpty()||!this.#Gn||this.#Gn.has(t.id)||this.#Gn.setValue(t.id,t)}#Ss(){window.addEventListener("focus",this.#hs),window.addEventListener("blur",this.#ds)}#As(){window.removeEventListener("focus",this.#hs),window.removeEventListener("blur",this.#ds)}blur(){if(!this.hasSelection)return;const{activeElement:t}=document;for(const e of this.#ls)if(e.div.contains(t)){this.#os=[e,t],e._focusEventsAllowed=!1;break}}focus(){if(!this.#os)return;const[t,e]=this.#os;this.#os=null,e.addEventListener("focusin",(()=>{t._focusEventsAllowed=!0}),{once:!0}),e.focus()}#_s(){window.addEventListener("keydown",this.#fs)}#Cs(){window.removeEventListener("keydown",this.#fs)}#Ts(){document.addEventListener("copy",this.#us),document.addEventListener("cut",this.#ps),document.addEventListener("paste",this.#gs)}#Ms(){document.removeEventListener("copy",this.#us),document.removeEventListener("cut",this.#ps),document.removeEventListener("paste",this.#gs)}addEditListeners(){this.#_s(),this.#Ts()}removeEditListeners(){this.#Cs(),this.#Ms()}copy(t){if(t.preventDefault(),this.#qn?.commitOrRemove(),!this.hasSelection)return;const e=[];for(const t of this.#ls){const i=t.serialize(!0);i&&e.push(i)}0!==e.length&&t.clipboardData.setData("application/pdfjs",JSON.stringify(e))}cut(t){this.copy(t),this.delete()}paste(t){t.preventDefault();const{clipboardData:e}=t;for(const t of e.items)for(const e of this.#wi)if(e.isHandlingMimeForPasting(t.type))return void e.paste(t,this.currentLayer);let i=e.getData("application/pdfjs");if(!i)return;try{i=JSON.parse(i)}catch(t){return void(0,n.warn)(`paste: "${t.message}".`)}if(!Array.isArray(i))return;this.unselectAll();const s=this.currentLayer;try{const t=[];for(const e of i){const i=s.deserialize(e);if(!i)return;t.push(i)}const e=()=>{for(const e of t)this.#Is(e);this.#Ls(t)},n=()=>{for(const e of t)e.remove()};this.addCommands({cmd:e,undo:n,mustExec:!0})}catch(t){(0,n.warn)(`paste: "${t.message}".`)}}keydown(t){this.isEditorHandlingKeyboard||u._keyboardManager.exec(this,t)}onEditingAction(t){["undo","redo","delete","selectAll"].includes(t.name)&&this[t.name]()}#Bs(t){Object.entries(t).some((([t,e])=>this.#ws[t]!==e))&&this._eventBus.dispatch("annotationeditorstateschanged",{source:this,details:Object.assign(this.#ws,t)})}#Ps(t){this._eventBus.dispatch("annotationeditorparamschanged",{source:this,details:t})}setEditingState(t){t?(this.#Ss(),this.#_s(),this.#Ts(),this.#Bs({isEditing:this.#as!==n.AnnotationEditorType.NONE,isEmpty:this.#Rs(),hasSomethingToUndo:this.#Kn.hasSomethingToUndo(),hasSomethingToRedo:this.#Kn.hasSomethingToRedo(),hasSelectedEditor:!1})):(this.#As(),this.#Cs(),this.#Ms(),this.#Bs({isEditing:!1}),this.disableUserSelect(!1))}registerEditorTypes(t){if(!this.#wi){this.#wi=t;for(const t of this.#wi)this.#Ps(t.defaultPropertiesToUpdate)}}getId(){return this.#is.getId()}get currentLayer(){return this.#Vn.get(this.#Xn)}getLayer(t){return this.#Vn.get(t)}get currentPageIndex(){return this.#Xn}addLayer(t){this.#Vn.set(t.pageIndex,t),this.#ns?t.enable():t.disable()}removeLayer(t){this.#Vn.delete(t.pageIndex)}updateMode(t,e=null,i=!1){if(this.#as!==t){if(this.#as=t,t===n.AnnotationEditorType.NONE)return this.setEditingState(!1),void this.#Ds();this.setEditingState(!0),this.#Os(),this.unselectAll();for(const e of this.#Vn.values())e.updateMode(t);if(e||!i){if(e)for(const t of this.#$n.values())if(t.annotationElementId===e){this.setSelected(t),t.enterInEditMode();break}}else this.addNewEditorFromKeyboard()}}addNewEditorFromKeyboard(){this.currentLayer.canCreateNewEmptyEditor()&&this.currentLayer.addNewEditor()}updateToolbar(t){t!==this.#as&&this._eventBus.dispatch("switchannotationeditormode",{source:this,mode:t})}updateParams(t,e){if(this.#wi){switch(t){case n.AnnotationEditorParamsType.CREATE:return void this.currentLayer.addNewEditor();case n.AnnotationEditorParamsType.HIGHLIGHT_DEFAULT_COLOR:this.#rs?.updateColor(e)}for(const i of this.#ls)i.updateParams(t,e);for(const i of this.#wi)i.updateDefaultParams(t,e)}}enableWaiting(t=!1){if(this.#ss!==t){this.#ss=t;for(const e of this.#Vn.values())t?e.disableClick():e.enableClick(),e.div.classList.toggle("waiting",t)}}#Os(){if(!this.#ns){this.#ns=!0;for(const t of this.#Vn.values())t.enable()}}#Ds(){if(this.unselectAll(),this.#ns){this.#ns=!1;for(const t of this.#Vn.values())t.disable()}}getEditors(t){const e=[];for(const i of this.#$n.values())i.pageIndex===t&&e.push(i);return e}getEditor(t){return this.#$n.get(t)}addEditor(t){this.#$n.set(t.id,t)}removeEditor(t){t.div.contains(document.activeElement)&&(this.#ts&&clearTimeout(this.#ts),this.#ts=setTimeout((()=>{this.focusMainContainer(),this.#ts=null}),0)),this.#$n.delete(t.id),this.unselect(t),t.annotationElementId&&this.#Yn.has(t.annotationElementId)||this.#Gn?.remove(t.id)}addDeletedAnnotationElement(t){this.#Yn.add(t.annotationElementId),t.deleted=!0}isDeletedAnnotationElement(t){return this.#Yn.has(t)}removeDeletedAnnotationElement(t){this.#Yn.delete(t.annotationElementId),t.deleted=!1}#Is(t){const e=this.#Vn.get(t.pageIndex);e?e.addOrRebuild(t):this.addEditor(t)}setActiveEditor(t){this.#qn!==t&&(this.#qn=t,t&&this.#Ps(t.propertiesToUpdate))}toggleSelected(t){if(this.#ls.has(t))return this.#ls.delete(t),t.unselect(),void this.#Bs({hasSelectedEditor:this.hasSelection});this.#ls.add(t),t.select(),this.#Ps(t.propertiesToUpdate),this.#Bs({hasSelectedEditor:!0})}setSelected(t){for(const e of this.#ls)e!==t&&e.unselect();this.#ls.clear(),this.#ls.add(t),t.select(),this.#Ps(t.propertiesToUpdate),this.#Bs({hasSelectedEditor:!0})}isSelected(t){return this.#ls.has(t)}get firstSelectedEditor(){return this.#ls.values().next().value}unselect(t){t.unselect(),this.#ls.delete(t),this.#Bs({hasSelectedEditor:this.hasSelection})}get hasSelection(){return 0!==this.#ls.size}get isEnterHandled(){return 1===this.#ls.size&&this.firstSelectedEditor.isEnterHandled}undo(){this.#Kn.undo(),this.#Bs({hasSomethingToUndo:this.#Kn.hasSomethingToUndo(),hasSomethingToRedo:!0,isEmpty:this.#Rs()})}redo(){this.#Kn.redo(),this.#Bs({hasSomethingToUndo:!0,hasSomethingToRedo:this.#Kn.hasSomethingToRedo(),isEmpty:this.#Rs()})}addCommands(t){this.#Kn.add(t),this.#Bs({hasSomethingToUndo:!0,hasSomethingToRedo:!1,isEmpty:this.#Rs()})}#Rs(){if(0===this.#$n.size)return!0;if(1===this.#$n.size)for(const t of this.#$n.values())return t.isEmpty();return!1}delete(){if(this.commitOrRemove(),!this.hasSelection)return;const t=[...this.#ls];this.addCommands({cmd:()=>{for(const e of t)e.remove()},undo:()=>{for(const e of t)this.#Is(e)},mustExec:!0})}commitOrRemove(){this.#qn?.commitOrRemove()}hasSomethingToControl(){return this.#qn||this.hasSelection}#Ls(t){this.#ls.clear();for(const e of t)e.isEmpty()||(this.#ls.add(e),e.select());this.#Bs({hasSelectedEditor:!0})}selectAll(){for(const t of this.#ls)t.commit();this.#Ls(this.#$n.values())}unselectAll(){if((!this.#qn||(this.#qn.commitOrRemove(),this.#as===n.AnnotationEditorType.NONE))&&this.hasSelection){for(const t of this.#ls)t.unselect();this.#ls.clear(),this.#Bs({hasSelectedEditor:!1})}}translateSelectedEditors(t,e,i=!1){if(i||this.commitOrRemove(),!this.hasSelection)return;this.#ks[0]+=t,this.#ks[1]+=e;const[n,s]=this.#ks,o=[...this.#ls];this.#xs&&clearTimeout(this.#xs),this.#xs=setTimeout((()=>{this.#xs=null,this.#ks[0]=this.#ks[1]=0,this.addCommands({cmd:()=>{for(const t of o)this.#$n.has(t.id)&&t.translateInPage(n,s)},undo:()=>{for(const t of o)this.#$n.has(t.id)&&t.translateInPage(-n,-s)},mustExec:!1})}),1e3);for(const i of o)i.translateInPage(t,e)}setUpDragSession(){if(this.hasSelection){this.disableUserSelect(!0),this.#Jn=new Map;for(const t of this.#ls)this.#Jn.set(t,{savedX:t.x,savedY:t.y,savedPageIndex:t.pageIndex,newX:0,newY:0,newPageIndex:-1})}}endDragSession(){if(!this.#Jn)return!1;this.disableUserSelect(!1);const t=this.#Jn;this.#Jn=null;let e=!1;for(const[{x:i,y:n,pageIndex:s},o]of t)o.newX=i,o.newY=n,o.newPageIndex=s,e||=i!==o.savedX||n!==o.savedY||s!==o.savedPageIndex;if(!e)return!1;const i=(t,e,i,n)=>{if(this.#$n.has(t.id)){const s=this.#Vn.get(n);s?t._setParentAndPosition(s,e,i):(t.pageIndex=n,t.x=e,t.y=i)}};return this.addCommands({cmd:()=>{for(const[e,{newX:n,newY:s,newPageIndex:o}]of t)i(e,n,s,o)},undo:()=>{for(const[e,{savedX:n,savedY:s,savedPageIndex:o}]of t)i(e,n,s,o)},mustExec:!0}),!0}dragSelectedEditors(t,e){if(this.#Jn)for(const i of this.#Jn.keys())i.drag(t,e)}rebuild(t){if(null===t.parent){const e=this.getLayer(t.pageIndex);e?(e.changeParent(t),e.addOrRebuild(t)):(this.addEditor(t),this.addToAnnotationStorage(t),t.rebuild())}else t.parent.addOrRebuild(t)}get isEditorHandlingKeyboard(){return this.getActive()?.shouldGetKeyboardEvents()||1===this.#ls.size&&this.firstSelectedEditor.shouldGetKeyboardEvents()}isActive(t){return this.#qn===t}getActive(){return this.#qn}getMode(){return this.#as}get imageManager(){return(0,n.shadow)(this,"imageManager",new l)}}},171:(t,e,i)=>{i.d(e,{PDFFetchStream:()=>l});var n=i(266),s=i(253);function o(t,e,i){return{method:"GET",headers:t,signal:i.signal,mode:"cors",credentials:e?"include":"same-origin",redirect:"follow"}}function r(t){const e=new Headers;for(const i in t){const n=t[i];void 0!==n&&e.append(i,n)}return e}function a(t){return t instanceof Uint8Array?t.buffer:t instanceof ArrayBuffer?t:((0,n.warn)(`getArrayBuffer - unexpected data format: ${t}`),new Uint8Array(t).buffer)}class l{constructor(t){this.source=t,this.isHttp=/^https?:/i.test(t.url),this.httpHeaders=this.isHttp&&t.httpHeaders||{},this._fullRequestReader=null,this._rangeRequestReaders=[]}get _progressiveDataLength(){return this._fullRequestReader?._loaded??0}getFullReader(){return(0,n.assert)(!this._fullRequestReader,"PDFFetchStream.getFullReader can only be called once."),this._fullRequestReader=new c(this),this._fullRequestReader}getRangeReader(t,e){if(e<=this._progressiveDataLength)return null;const i=new d(this,t,e);return this._rangeRequestReaders.push(i),i}cancelAllRequests(t){this._fullRequestReader?.cancel(t);for(const e of this._rangeRequestReaders.slice(0))e.cancel(t)}}class c{constructor(t){this._stream=t,this._reader=null,this._loaded=0,this._filename=null;const e=t.source;this._withCredentials=e.withCredentials||!1,this._contentLength=e.length,this._headersCapability=new n.PromiseCapability,this._disableRange=e.disableRange||!1,this._rangeChunkSize=e.rangeChunkSize,this._rangeChunkSize||this._disableRange||(this._disableRange=!0),this._abortController=new AbortController,this._isStreamingSupported=!e.disableStream,this._isRangeSupported=!e.disableRange,this._headers=r(this._stream.httpHeaders);const i=e.url;fetch(i,o(this._headers,this._withCredentials,this._abortController)).then((t=>{if(!(0,s.validateResponseStatus)(t.status))throw(0,s.createResponseStatusError)(t.status,i);this._reader=t.body.getReader(),this._headersCapability.resolve();const e=e=>t.headers.get(e),{allowRangeRequests:o,suggestedLength:r}=(0,s.validateRangeRequestCapabilities)({getResponseHeader:e,isHttp:this._stream.isHttp,rangeChunkSize:this._rangeChunkSize,disableRange:this._disableRange});this._isRangeSupported=o,this._contentLength=r||this._contentLength,this._filename=(0,s.extractFilenameFromHeader)(e),!this._isStreamingSupported&&this._isRangeSupported&&this.cancel(new n.AbortException("Streaming is disabled."))})).catch(this._headersCapability.reject),this.onProgress=null}get headersReady(){return this._headersCapability.promise}get filename(){return this._filename}get contentLength(){return this._contentLength}get isRangeSupported(){return this._isRangeSupported}get isStreamingSupported(){return this._isStreamingSupported}async read(){await this._headersCapability.promise;const{value:t,done:e}=await this._reader.read();return e?{value:t,done:e}:(this._loaded+=t.byteLength,this.onProgress?.({loaded:this._loaded,total:this._contentLength}),{value:a(t),done:!1})}cancel(t){this._reader?.cancel(t),this._abortController.abort()}}class d{constructor(t,e,i){this._stream=t,this._reader=null,this._loaded=0;const a=t.source;this._withCredentials=a.withCredentials||!1,this._readCapability=new n.PromiseCapability,this._isStreamingSupported=!a.disableStream,this._abortController=new AbortController,this._headers=r(this._stream.httpHeaders),this._headers.append("Range",`bytes=${e}-${i-1}`);const l=a.url;fetch(l,o(this._headers,this._withCredentials,this._abortController)).then((t=>{if(!(0,s.validateResponseStatus)(t.status))throw(0,s.createResponseStatusError)(t.status,l);this._readCapability.resolve(),this._reader=t.body.getReader()})).catch(this._readCapability.reject),this.onProgress=null}get isStreamingSupported(){return this._isStreamingSupported}async read(){await this._readCapability.promise;const{value:t,done:e}=await this._reader.read();return e?{value:t,done:e}:(this._loaded+=t.byteLength,this.onProgress?.({loaded:this._loaded}),{value:a(t),done:!1})}cancel(t){this._reader?.cancel(t),this._abortController.abort()}}},742:(t,e,i)=>{i.d(e,{FontFaceObject:()=>o,FontLoader:()=>s});var n=i(266);class s{#Fs=new Set;constructor({ownerDocument:t=globalThis.document,styleElement:e=null}){this._document=t,this.nativeFontFaces=new Set,this.styleElement=null,this.loadingRequests=[],this.loadTestFontId=0}addNativeFontFace(t){this.nativeFontFaces.add(t),this._document.fonts.add(t)}removeNativeFontFace(t){this.nativeFontFaces.delete(t),this._document.fonts.delete(t)}insertRule(t){this.styleElement||(this.styleElement=this._document.createElement("style"),this._document.documentElement.getElementsByTagName("head")[0].append(this.styleElement));const e=this.styleElement.sheet;e.insertRule(t,e.cssRules.length)}clear(){for(const t of this.nativeFontFaces)this._document.fonts.delete(t);this.nativeFontFaces.clear(),this.#Fs.clear(),this.styleElement&&(this.styleElement.remove(),this.styleElement=null)}async loadSystemFont({systemFontInfo:t,_inspectFont:e}){if(t&&!this.#Fs.has(t.loadedName))if((0,n.assert)(!this.disableFontFace,"loadSystemFont shouldn't be called when `disableFontFace` is set."),this.isFontLoadingAPISupported){const{loadedName:i,src:s,style:o}=t,r=new FontFace(i,s,o);this.addNativeFontFace(r);try{await r.load(),this.#Fs.add(i),e?.(t)}catch{(0,n.warn)(`Cannot load system font: ${t.baseFontName}, installing it could help to improve PDF rendering.`),this.removeNativeFontFace(r)}}else(0,n.unreachable)("Not implemented: loadSystemFont without the Font Loading API.")}async bind(t){if(t.attached||t.missingFile&&!t.systemFontInfo)return;if(t.attached=!0,t.systemFontInfo)return void await this.loadSystemFont(t);if(this.isFontLoadingAPISupported){const e=t.createNativeFontFace();if(e){this.addNativeFontFace(e);try{await e.loaded}catch(i){throw(0,n.warn)(`Failed to load font '${e.family}': '${i}'.`),t.disableFontFace=!0,i}}return}const e=t.createFontFaceRule();if(e){if(this.insertRule(e),this.isSyncFontLoadingSupported)return;await new Promise((e=>{const i=this._queueLoadingCallback(e);this._prepareFontLoadEvent(t,i)}))}}get isFontLoadingAPISupported(){const t=!!this._document?.fonts;return(0,n.shadow)(this,"isFontLoadingAPISupported",t)}get isSyncFontLoadingSupported(){let t=!1;return(n.isNodeJS||"undefined"!=typeof navigator&&"string"==typeof navigator?.userAgent&&/Mozilla\/5.0.*?rv:\d+.*? Gecko/.test(navigator.userAgent))&&(t=!0),(0,n.shadow)(this,"isSyncFontLoadingSupported",t)}_queueLoadingCallback(t){const{loadingRequests:e}=this,i={done:!1,complete:function(){for((0,n.assert)(!i.done,"completeRequest() cannot be called twice."),i.done=!0;e.length>0&&e[0].done;){const t=e.shift();setTimeout(t.callback,0)}},callback:t};return e.push(i),i}get _loadTestFont(){const t=atob("T1RUTwALAIAAAwAwQ0ZGIDHtZg4AAAOYAAAAgUZGVE1lkzZwAAAEHAAAABxHREVGABQAFQAABDgAAAAeT1MvMlYNYwkAAAEgAAAAYGNtYXABDQLUAAACNAAAAUJoZWFk/xVFDQAAALwAAAA2aGhlYQdkA+oAAAD0AAAAJGhtdHgD6AAAAAAEWAAAAAZtYXhwAAJQAAAAARgAAAAGbmFtZVjmdH4AAAGAAAAAsXBvc3T/hgAzAAADeAAAACAAAQAAAAEAALZRFsRfDzz1AAsD6AAAAADOBOTLAAAAAM4KHDwAAAAAA+gDIQAAAAgAAgAAAAAAAAABAAADIQAAAFoD6AAAAAAD6AABAAAAAAAAAAAAAAAAAAAAAQAAUAAAAgAAAAQD6AH0AAUAAAKKArwAAACMAooCvAAAAeAAMQECAAACAAYJAAAAAAAAAAAAAQAAAAAAAAAAAAAAAFBmRWQAwAAuAC4DIP84AFoDIQAAAAAAAQAAAAAAAAAAACAAIAABAAAADgCuAAEAAAAAAAAAAQAAAAEAAAAAAAEAAQAAAAEAAAAAAAIAAQAAAAEAAAAAAAMAAQAAAAEAAAAAAAQAAQAAAAEAAAAAAAUAAQAAAAEAAAAAAAYAAQAAAAMAAQQJAAAAAgABAAMAAQQJAAEAAgABAAMAAQQJAAIAAgABAAMAAQQJAAMAAgABAAMAAQQJAAQAAgABAAMAAQQJAAUAAgABAAMAAQQJAAYAAgABWABYAAAAAAAAAwAAAAMAAAAcAAEAAAAAADwAAwABAAAAHAAEACAAAAAEAAQAAQAAAC7//wAAAC7////TAAEAAAAAAAABBgAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAD/gwAyAAAAAQAAAAAAAAAAAAAAAAAAAAABAAQEAAEBAQJYAAEBASH4DwD4GwHEAvgcA/gXBIwMAYuL+nz5tQXkD5j3CBLnEQACAQEBIVhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYAAABAQAADwACAQEEE/t3Dov6fAH6fAT+fPp8+nwHDosMCvm1Cvm1DAz6fBQAAAAAAAABAAAAAMmJbzEAAAAAzgTjFQAAAADOBOQpAAEAAAAAAAAADAAUAAQAAAABAAAAAgABAAAAAAAAAAAD6AAAAAAAAA==");return(0,n.shadow)(this,"_loadTestFont",t)}_prepareFontLoadEvent(t,e){function i(t,e){return t.charCodeAt(e)<<24|t.charCodeAt(e+1)<<16|t.charCodeAt(e+2)<<8|255&t.charCodeAt(e+3)}function s(t,e,i,n){return t.substring(0,e)+n+t.substring(e+i)}let o,r;const a=this._document.createElement("canvas");a.width=1,a.height=1;const l=a.getContext("2d");let c=0;const d=`lt${Date.now()}${this.loadTestFontId++}`;let h=this._loadTestFont;h=s(h,976,d.length,d);const u=1482184792;let p=i(h,16);for(o=0,r=d.length-3;o<r;o+=4)p=p-u+i(d,o)|0;o<d.length&&(p=p-u+i(d+"XXX",o)|0),h=s(h,16,4,(0,n.string32)(p));const g=`@font-face {font-family:"${d}";src:url(data:font/opentype;base64,${btoa(h)});}`;this.insertRule(g);const f=this._document.createElement("div");f.style.visibility="hidden",f.style.width=f.style.height="10px",f.style.position="absolute",f.style.top=f.style.left="0px";for(const e of[t.loadedName,d]){const t=this._document.createElement("span");t.textContent="Hi",t.style.fontFamily=e,f.append(t)}this._document.body.append(f),function t(e,i){if(++c>30)return(0,n.warn)("Load test font never loaded."),void i();l.font="30px "+e,l.fillText(".",0,20),l.getImageData(0,0,1,1).data[3]>0?i():setTimeout(t.bind(null,e,i))}(d,(()=>{f.remove(),e.complete()}))}}class o{constructor(t,{isEvalSupported:e=!0,disableFontFace:i=!1,ignoreErrors:n=!1,inspectFont:s=null}){this.compiledGlyphs=Object.create(null);for(const e in t)this[e]=t[e];this.isEvalSupported=!1!==e,this.disableFontFace=!0===i,this.ignoreErrors=!0===n,this._inspectFont=s}createNativeFontFace(){if(!this.data||this.disableFontFace)return null;let t;if(this.cssFontInfo){const e={weight:this.cssFontInfo.fontWeight};this.cssFontInfo.italicAngle&&(e.style=`oblique ${this.cssFontInfo.italicAngle}deg`),t=new FontFace(this.cssFontInfo.fontFamily,this.data,e)}else t=new FontFace(this.loadedName,this.data,{});return this._inspectFont?.(this),t}createFontFaceRule(){if(!this.data||this.disableFontFace)return null;const t=(0,n.bytesToString)(this.data),e=`url(data:${this.mimetype};base64,${btoa(t)});`;let i;if(this.cssFontInfo){let t=`font-weight: ${this.cssFontInfo.fontWeight};`;this.cssFontInfo.italicAngle&&(t+=`font-style: oblique ${this.cssFontInfo.italicAngle}deg;`),i=`@font-face {font-family:"${this.cssFontInfo.fontFamily}";${t}src:${e}}`}else i=`@font-face {font-family:"${this.loadedName}";src:${e}}`;return this._inspectFont?.(this,e),i}getPathGenerator(t,e){if(void 0!==this.compiledGlyphs[e])return this.compiledGlyphs[e];let i;try{i=t.get(this.loadedName+"_path_"+e)}catch(t){if(!this.ignoreErrors)throw t;return(0,n.warn)(`getPathGenerator - ignoring character: "${t}".`),this.compiledGlyphs[e]=function(t,e){}}if(this.isEvalSupported&&n.FeatureTest.isEvalSupported){const t=[];for(const e of i){const i=void 0!==e.args?e.args.join(","):"";t.push("c.",e.cmd,"(",i,");\n")}return this.compiledGlyphs[e]=new Function("c","size",t.join(""))}return this.compiledGlyphs[e]=function(t,e){for(const n of i)"scale"===n.cmd&&(n.args=[e,-e]),t[n.cmd].apply(t,n.args)}}}},472:(t,e,i)=>{i.d(e,{Metadata:()=>s});var n=i(266);class s{#Ns;#Hs;constructor({parsedData:t,rawData:e}){this.#Ns=t,this.#Hs=e}getRaw(){return this.#Hs}get(t){return this.#Ns.get(t)??null}getAll(){return(0,n.objectFromMap)(this.#Ns)}has(t){return this.#Ns.has(t)}}},474:(t,e,i)=>{i.d(e,{PDFNetworkStream:()=>r});var n=i(266),s=i(253);class o{constructor(t,e={}){this.url=t,this.isHttp=/^https?:/i.test(t),this.httpHeaders=this.isHttp&&e.httpHeaders||Object.create(null),this.withCredentials=e.withCredentials||!1,this.currXhrId=0,this.pendingRequests=Object.create(null)}requestRange(t,e,i){const n={begin:t,end:e};for(const t in i)n[t]=i[t];return this.request(n)}requestFull(t){return this.request(t)}request(t){const e=new XMLHttpRequest,i=this.currXhrId++,n=this.pendingRequests[i]={xhr:e};e.open("GET",this.url),e.withCredentials=this.withCredentials;for(const t in this.httpHeaders){const i=this.httpHeaders[t];void 0!==i&&e.setRequestHeader(t,i)}return this.isHttp&&"begin"in t&&"end"in t?(e.setRequestHeader("Range",`bytes=${t.begin}-${t.end-1}`),n.expectedStatus=206):n.expectedStatus=200,e.responseType="arraybuffer",t.onError&&(e.onerror=function(i){t.onError(e.status)}),e.onreadystatechange=this.onStateChange.bind(this,i),e.onprogress=this.onProgress.bind(this,i),n.onHeadersReceived=t.onHeadersReceived,n.onDone=t.onDone,n.onError=t.onError,n.onProgress=t.onProgress,e.send(null),i}onProgress(t,e){const i=this.pendingRequests[t];i&&i.onProgress?.(e)}onStateChange(t,e){const i=this.pendingRequests[t];if(!i)return;const s=i.xhr;if(s.readyState>=2&&i.onHeadersReceived&&(i.onHeadersReceived(),delete i.onHeadersReceived),4!==s.readyState)return;if(!(t in this.pendingRequests))return;if(delete this.pendingRequests[t],0===s.status&&this.isHttp)return void i.onError?.(s.status);const o=s.status||200;if((200!==o||206!==i.expectedStatus)&&o!==i.expectedStatus)return void i.onError?.(s.status);const r=function(t){const e=t.response;return"string"!=typeof e?e:(0,n.stringToBytes)(e).buffer}(s);if(206===o){const t=s.getResponseHeader("Content-Range"),e=/bytes (\d+)-(\d+)\/(\d+)/.exec(t);i.onDone({begin:parseInt(e[1],10),chunk:r})}else r?i.onDone({begin:0,chunk:r}):i.onError?.(s.status)}getRequestXhr(t){return this.pendingRequests[t].xhr}isPendingRequest(t){return t in this.pendingRequests}abortRequest(t){const e=this.pendingRequests[t].xhr;delete this.pendingRequests[t],e.abort()}}class r{constructor(t){this._source=t,this._manager=new o(t.url,{httpHeaders:t.httpHeaders,withCredentials:t.withCredentials}),this._rangeChunkSize=t.rangeChunkSize,this._fullRequestReader=null,this._rangeRequestReaders=[]}_onRangeRequestReaderClosed(t){const e=this._rangeRequestReaders.indexOf(t);e>=0&&this._rangeRequestReaders.splice(e,1)}getFullReader(){return(0,n.assert)(!this._fullRequestReader,"PDFNetworkStream.getFullReader can only be called once."),this._fullRequestReader=new a(this._manager,this._source),this._fullRequestReader}getRangeReader(t,e){const i=new l(this._manager,t,e);return i.onClosed=this._onRangeRequestReaderClosed.bind(this),this._rangeRequestReaders.push(i),i}cancelAllRequests(t){this._fullRequestReader?.cancel(t);for(const e of this._rangeRequestReaders.slice(0))e.cancel(t)}}class a{constructor(t,e){this._manager=t;const i={onHeadersReceived:this._onHeadersReceived.bind(this),onDone:this._onDone.bind(this),onError:this._onError.bind(this),onProgress:this._onProgress.bind(this)};this._url=e.url,this._fullRequestId=t.requestFull(i),this._headersReceivedCapability=new n.PromiseCapability,this._disableRange=e.disableRange||!1,this._contentLength=e.length,this._rangeChunkSize=e.rangeChunkSize,this._rangeChunkSize||this._disableRange||(this._disableRange=!0),this._isStreamingSupported=!1,this._isRangeSupported=!1,this._cachedChunks=[],this._requests=[],this._done=!1,this._storedError=void 0,this._filename=null,this.onProgress=null}_onHeadersReceived(){const t=this._fullRequestId,e=this._manager.getRequestXhr(t),i=t=>e.getResponseHeader(t),{allowRangeRequests:n,suggestedLength:o}=(0,s.validateRangeRequestCapabilities)({getResponseHeader:i,isHttp:this._manager.isHttp,rangeChunkSize:this._rangeChunkSize,disableRange:this._disableRange});n&&(this._isRangeSupported=!0),this._contentLength=o||this._contentLength,this._filename=(0,s.extractFilenameFromHeader)(i),this._isRangeSupported&&this._manager.abortRequest(t),this._headersReceivedCapability.resolve()}_onDone(t){if(t&&(this._requests.length>0?this._requests.shift().resolve({value:t.chunk,done:!1}):this._cachedChunks.push(t.chunk)),this._done=!0,!(this._cachedChunks.length>0)){for(const t of this._requests)t.resolve({value:void 0,done:!0});this._requests.length=0}}_onError(t){this._storedError=(0,s.createResponseStatusError)(t,this._url),this._headersReceivedCapability.reject(this._storedError);for(const t of this._requests)t.reject(this._storedError);this._requests.length=0,this._cachedChunks.length=0}_onProgress(t){this.onProgress?.({loaded:t.loaded,total:t.lengthComputable?t.total:this._contentLength})}get filename(){return this._filename}get isRangeSupported(){return this._isRangeSupported}get isStreamingSupported(){return this._isStreamingSupported}get contentLength(){return this._contentLength}get headersReady(){return this._headersReceivedCapability.promise}async read(){if(this._storedError)throw this._storedError;if(this._cachedChunks.length>0)return{value:this._cachedChunks.shift(),done:!1};if(this._done)return{value:void 0,done:!0};const t=new n.PromiseCapability;return this._requests.push(t),t.promise}cancel(t){this._done=!0,this._headersReceivedCapability.reject(t);for(const t of this._requests)t.resolve({value:void 0,done:!0});this._requests.length=0,this._manager.isPendingRequest(this._fullRequestId)&&this._manager.abortRequest(this._fullRequestId),this._fullRequestReader=null}}class l{constructor(t,e,i){this._manager=t;const n={onDone:this._onDone.bind(this),onError:this._onError.bind(this),onProgress:this._onProgress.bind(this)};this._url=t.url,this._requestId=t.requestRange(e,i,n),this._requests=[],this._queuedChunk=null,this._done=!1,this._storedError=void 0,this.onProgress=null,this.onClosed=null}_close(){this.onClosed?.(this)}_onDone(t){const e=t.chunk;this._requests.length>0?this._requests.shift().resolve({value:e,done:!1}):this._queuedChunk=e,this._done=!0;for(const t of this._requests)t.resolve({value:void 0,done:!0});this._requests.length=0,this._close()}_onError(t){this._storedError=(0,s.createResponseStatusError)(t,this._url);for(const t of this._requests)t.reject(this._storedError);this._requests.length=0,this._queuedChunk=null}_onProgress(t){this.isStreamingSupported||this.onProgress?.({loaded:t.loaded})}get isStreamingSupported(){return!1}async read(){if(this._storedError)throw this._storedError;if(null!==this._queuedChunk){const t=this._queuedChunk;return this._queuedChunk=null,{value:t,done:!1}}if(this._done)return{value:void 0,done:!0};const t=new n.PromiseCapability;return this._requests.push(t),t.promise}cancel(t){this._done=!0;for(const t of this._requests)t.resolve({value:void 0,done:!0});this._requests.length=0,this._manager.isPendingRequest(this._requestId)&&this._manager.abortRequest(this._requestId),this._close()}}},253:(t,e,i)=>{i.d(e,{createResponseStatusError:()=>a,extractFilenameFromHeader:()=>r,validateRangeRequestCapabilities:()=>o,validateResponseStatus:()=>l});var n=i(266),s=i(473);function o({getResponseHeader:t,isHttp:e,rangeChunkSize:i,disableRange:n}){const s={allowRangeRequests:!1,suggestedLength:void 0},o=parseInt(t("Content-Length"),10);return Number.isInteger(o)?(s.suggestedLength=o,o<=2*i||n||!e||"bytes"!==t("Accept-Ranges")||"identity"!==(t("Content-Encoding")||"identity")||(s.allowRangeRequests=!0),s):s}function r(t){const e=t("Content-Disposition");if(e){let t=function(t){let e=!0,i=s("filename\\*","i").exec(t);if(i){i=i[1];let t=a(i);return t=unescape(t),t=l(t),t=c(t),r(t)}if(i=function(t){const e=[];let i;const n=s("filename\\*((?!0\\d)\\d+)(\\*?)","ig");for(;null!==(i=n.exec(t));){let[,t,n,s]=i;if(t=parseInt(t,10),t in e){if(0===t)break}else e[t]=[n,s]}const o=[];for(let t=0;t<e.length&&t in e;++t){let[i,n]=e[t];n=a(n),i&&(n=unescape(n),0===t&&(n=l(n))),o.push(n)}return o.join("")}(t),i)return r(c(i));if(i=s("filename","i").exec(t),i){i=i[1];let t=a(i);return t=c(t),r(t)}function s(t,e){return new RegExp("(?:^|;)\\s*"+t+'\\s*=\\s*([^";\\s][^;\\s]*|"(?:[^"\\\\]|\\\\"?)+"?)',e)}function o(t,i){if(t){if(!/^[\x00-\xFF]+$/.test(i))return i;try{const s=new TextDecoder(t,{fatal:!0}),o=(0,n.stringToBytes)(i);i=s.decode(o),e=!1}catch{}}return i}function r(t){return e&&/[\x80-\xff]/.test(t)&&(t=o("utf-8",t),e&&(t=o("iso-8859-1",t))),t}function a(t){if(t.startsWith('"')){const e=t.slice(1).split('\\"');for(let t=0;t<e.length;++t){const i=e[t].indexOf('"');-1!==i&&(e[t]=e[t].slice(0,i),e.length=t+1),e[t]=e[t].replaceAll(/\\(.)/g,"$1")}t=e.join('"')}return t}function l(t){const e=t.indexOf("'");return-1===e?t:o(t.slice(0,e),t.slice(e+1).replace(/^[^']*'/,""))}function c(t){return!t.startsWith("=?")||/[\x00-\x19\x80-\xff]/.test(t)?t:t.replaceAll(/=\?([\w-]*)\?([QqBb])\?((?:[^?]|\?(?!=))*)\?=/g,(function(t,e,i,n){if("q"===i||"Q"===i)return o(e,n=(n=n.replaceAll("_"," ")).replaceAll(/=([0-9a-fA-F]{2})/g,(function(t,e){return String.fromCharCode(parseInt(e,16))})));try{n=atob(n)}catch{}return o(e,n)}))}return""}(e);if(t.includes("%"))try{t=decodeURIComponent(t)}catch{}if((0,s.isPdfFile)(t))return t}return null}function a(t,e){return 404===t||0===t&&e.startsWith("file:")?new n.MissingPDFException('Missing PDF "'+e+'".'):new n.UnexpectedResponseException(`Unexpected server response (${t}) while retrieving PDF "${e}".`,t)}function l(t){return 200===t||206===t}},498:(t,e,i)=>{i.a(t,(async(t,n)=>{try{i.d(e,{PDFNodeStream:()=>u});var s=i(266),o=i(253);let r,a,l,c;s.isNodeJS&&(r=await import("fs"),a=await import("http"),l=await import("https"),c=await import("url"));const d=/^file:\/\/\/[a-zA-Z]:\//;function h(t){const e=c.parse(t);return"file:"===e.protocol||e.host?e:/^[a-z]:[/\\]/i.test(t)?c.parse(`file:///${t}`):(e.host||(e.protocol="file:"),e)}class u{constructor(t){this.source=t,this.url=h(t.url),this.isHttp="http:"===this.url.protocol||"https:"===this.url.protocol,this.isFsUrl="file:"===this.url.protocol,this.httpHeaders=this.isHttp&&t.httpHeaders||{},this._fullRequestReader=null,this._rangeRequestReaders=[]}get _progressiveDataLength(){return this._fullRequestReader?._loaded??0}getFullReader(){return(0,s.assert)(!this._fullRequestReader,"PDFNodeStream.getFullReader can only be called once."),this._fullRequestReader=this.isFsUrl?new v(this):new m(this),this._fullRequestReader}getRangeReader(t,e){if(e<=this._progressiveDataLength)return null;const i=this.isFsUrl?new y(this,t,e):new b(this,t,e);return this._rangeRequestReaders.push(i),i}cancelAllRequests(t){this._fullRequestReader?.cancel(t);for(const e of this._rangeRequestReaders.slice(0))e.cancel(t)}}class p{constructor(t){this._url=t.url,this._done=!1,this._storedError=null,this.onProgress=null;const e=t.source;this._contentLength=e.length,this._loaded=0,this._filename=null,this._disableRange=e.disableRange||!1,this._rangeChunkSize=e.rangeChunkSize,this._rangeChunkSize||this._disableRange||(this._disableRange=!0),this._isStreamingSupported=!e.disableStream,this._isRangeSupported=!e.disableRange,this._readableStream=null,this._readCapability=new s.PromiseCapability,this._headersCapability=new s.PromiseCapability}get headersReady(){return this._headersCapability.promise}get filename(){return this._filename}get contentLength(){return this._contentLength}get isRangeSupported(){return this._isRangeSupported}get isStreamingSupported(){return this._isStreamingSupported}async read(){if(await this._readCapability.promise,this._done)return{value:void 0,done:!0};if(this._storedError)throw this._storedError;const t=this._readableStream.read();return null===t?(this._readCapability=new s.PromiseCapability,this.read()):(this._loaded+=t.length,this.onProgress?.({loaded:this._loaded,total:this._contentLength}),{value:new Uint8Array(t).buffer,done:!1})}cancel(t){this._readableStream?this._readableStream.destroy(t):this._error(t)}_error(t){this._storedError=t,this._readCapability.resolve()}_setReadableStream(t){this._readableStream=t,t.on("readable",(()=>{this._readCapability.resolve()})),t.on("end",(()=>{t.destroy(),this._done=!0,this._readCapability.resolve()})),t.on("error",(t=>{this._error(t)})),!this._isStreamingSupported&&this._isRangeSupported&&this._error(new s.AbortException("streaming is disabled")),this._storedError&&this._readableStream.destroy(this._storedError)}}class g{constructor(t){this._url=t.url,this._done=!1,this._storedError=null,this.onProgress=null,this._loaded=0,this._readableStream=null,this._readCapability=new s.PromiseCapability;const e=t.source;this._isStreamingSupported=!e.disableStream}get isStreamingSupported(){return this._isStreamingSupported}async read(){if(await this._readCapability.promise,this._done)return{value:void 0,done:!0};if(this._storedError)throw this._storedError;const t=this._readableStream.read();return null===t?(this._readCapability=new s.PromiseCapability,this.read()):(this._loaded+=t.length,this.onProgress?.({loaded:this._loaded}),{value:new Uint8Array(t).buffer,done:!1})}cancel(t){this._readableStream?this._readableStream.destroy(t):this._error(t)}_error(t){this._storedError=t,this._readCapability.resolve()}_setReadableStream(t){this._readableStream=t,t.on("readable",(()=>{this._readCapability.resolve()})),t.on("end",(()=>{t.destroy(),this._done=!0,this._readCapability.resolve()})),t.on("error",(t=>{this._error(t)})),this._storedError&&this._readableStream.destroy(this._storedError)}}function f(t,e){return{protocol:t.protocol,auth:t.auth,host:t.hostname,port:t.port,path:t.path,method:"GET",headers:e}}class m extends p{constructor(t){super(t);const e=e=>{if(404===e.statusCode){const t=new s.MissingPDFException(`Missing PDF "${this._url}".`);return this._storedError=t,void this._headersCapability.reject(t)}this._headersCapability.resolve(),this._setReadableStream(e);const i=t=>this._readableStream.headers[t.toLowerCase()],{allowRangeRequests:n,suggestedLength:r}=(0,o.validateRangeRequestCapabilities)({getResponseHeader:i,isHttp:t.isHttp,rangeChunkSize:this._rangeChunkSize,disableRange:this._disableRange});this._isRangeSupported=n,this._contentLength=r||this._contentLength,this._filename=(0,o.extractFilenameFromHeader)(i)};this._request=null,"http:"===this._url.protocol?this._request=a.request(f(this._url,t.httpHeaders),e):this._request=l.request(f(this._url,t.httpHeaders),e),this._request.on("error",(t=>{this._storedError=t,this._headersCapability.reject(t)})),this._request.end()}}class b extends g{constructor(t,e,i){super(t),this._httpHeaders={};for(const e in t.httpHeaders){const i=t.httpHeaders[e];void 0!==i&&(this._httpHeaders[e]=i)}this._httpHeaders.Range=`bytes=${e}-${i-1}`;const n=t=>{if(404!==t.statusCode)this._setReadableStream(t);else{const t=new s.MissingPDFException(`Missing PDF "${this._url}".`);this._storedError=t}};this._request=null,"http:"===this._url.protocol?this._request=a.request(f(this._url,this._httpHeaders),n):this._request=l.request(f(this._url,this._httpHeaders),n),this._request.on("error",(t=>{this._storedError=t})),this._request.end()}}class v extends p{constructor(t){super(t);let e=decodeURIComponent(this._url.path);d.test(this._url.href)&&(e=e.replace(/^\//,"")),r.lstat(e,((t,i)=>{if(t)return"ENOENT"===t.code&&(t=new s.MissingPDFException(`Missing PDF "${e}".`)),this._storedError=t,void this._headersCapability.reject(t);this._contentLength=i.size,this._setReadableStream(r.createReadStream(e)),this._headersCapability.resolve()}))}}class y extends g{constructor(t,e,i){super(t);let n=decodeURIComponent(this._url.path);d.test(this._url.href)&&(n=n.replace(/^\//,"")),this._setReadableStream(r.createReadStream(n,{start:e,end:i-1}))}}n()}catch(w){n(w)}}),1)},738:(t,e,i)=>{i.a(t,(async(t,n)=>{try{i.d(e,{NodeCMapReaderFactory:()=>d,NodeCanvasFactory:()=>c,NodeFilterFactory:()=>l,NodeStandardFontDataFactory:()=>h});var s=i(822);let t,o,r;if(i(266).isNodeJS){t=await import("fs");try{o=await import("canvas")}catch{}try{r=await import("path2d-polyfill")}catch{}}const a=function(e){return new Promise(((i,n)=>{t.readFile(e,((t,e)=>{!t&&e?i(new Uint8Array(e)):n(new Error(t))}))}))};class l extends s.BaseFilterFactory{}class c extends s.BaseCanvasFactory{_createCanvas(t,e){return o.createCanvas(t,e)}}class d extends s.BaseCMapReaderFactory{_fetchData(t,e){return a(t).then((t=>({cMapData:t,compressionType:e})))}}class h extends s.BaseStandardFontDataFactory{_fetchData(t){return a(t)}}n()}catch(t){n(t)}}),1)},890:(t,e,i)=>{i.d(e,{OptionalContentConfig:()=>a});var n=i(266),s=i(825);const o=Symbol("INTERNAL");class r{#js=!0;constructor(t,e){this.name=t,this.intent=e}get visible(){return this.#js}_setVisible(t,e){t!==o&&(0,n.unreachable)("Internal method `_setVisible` called."),this.#js=e}}class a{#Us=null;#zs=new Map;#qs=null;#$s=null;constructor(t){if(this.name=null,this.creator=null,null!==t){this.name=t.name,this.creator=t.creator,this.#$s=t.order;for(const e of t.groups)this.#zs.set(e.id,new r(e.name,e.intent));if("OFF"===t.baseState)for(const t of this.#zs.values())t._setVisible(o,!1);for(const e of t.on)this.#zs.get(e)._setVisible(o,!0);for(const e of t.off)this.#zs.get(e)._setVisible(o,!1);this.#qs=this.getHash()}}#Vs(t){const e=t.length;if(e<2)return!0;const i=t[0];for(let s=1;s<e;s++){const e=t[s];let o;if(Array.isArray(e))o=this.#Vs(e);else{if(!this.#zs.has(e))return(0,n.warn)(`Optional content group not found: ${e}`),!0;o=this.#zs.get(e).visible}switch(i){case"And":if(!o)return!1;break;case"Or":if(o)return!0;break;case"Not":return!o;default:return!0}}return"And"===i}isVisible(t){if(0===this.#zs.size)return!0;if(!t)return(0,n.warn)("Optional content group not defined."),!0;if("OCG"===t.type)return this.#zs.has(t.id)?this.#zs.get(t.id).visible:((0,n.warn)(`Optional content group not found: ${t.id}`),!0);if("OCMD"===t.type){if(t.expression)return this.#Vs(t.expression);if(!t.policy||"AnyOn"===t.policy){for(const e of t.ids){if(!this.#zs.has(e))return(0,n.warn)(`Optional content group not found: ${e}`),!0;if(this.#zs.get(e).visible)return!0}return!1}if("AllOn"===t.policy){for(const e of t.ids){if(!this.#zs.has(e))return(0,n.warn)(`Optional content group not found: ${e}`),!0;if(!this.#zs.get(e).visible)return!1}return!0}if("AnyOff"===t.policy){for(const e of t.ids){if(!this.#zs.has(e))return(0,n.warn)(`Optional content group not found: ${e}`),!0;if(!this.#zs.get(e).visible)return!0}return!1}if("AllOff"===t.policy){for(const e of t.ids){if(!this.#zs.has(e))return(0,n.warn)(`Optional content group not found: ${e}`),!0;if(this.#zs.get(e).visible)return!1}return!0}return(0,n.warn)(`Unknown optional content policy ${t.policy}.`),!0}return(0,n.warn)(`Unknown group type ${t.type}.`),!0}setVisibility(t,e=!0){this.#zs.has(t)?(this.#zs.get(t)._setVisible(o,!!e),this.#Us=null):(0,n.warn)(`Optional content group not found: ${t}`)}get hasInitialVisibility(){return null===this.#qs||this.getHash()===this.#qs}getOrder(){return this.#zs.size?this.#$s?this.#$s.slice():[...this.#zs.keys()]:null}getGroups(){return this.#zs.size>0?(0,n.objectFromMap)(this.#zs):null}getGroup(t){return this.#zs.get(t)||null}getHash(){if(null!==this.#Us)return this.#Us;const t=new s.MurmurHash3_64;for(const[e,i]of this.#zs)t.update(`${e}:${i.visible}`);return this.#Us=t.hexdigest()}}},739:(t,e,i)=>{i.d(e,{renderTextLayer:()=>h,updateTextLayer:()=>u});var n=i(266),s=i(473);const o=30,r=new Map;function a(t,e){let i;if(e&&n.FeatureTest.isOffscreenCanvasSupported)i=new OffscreenCanvas(t,t).getContext("2d",{alpha:!1});else{const e=document.createElement("canvas");e.width=e.height=t,i=e.getContext("2d",{alpha:!1})}return i}function l(t,e,i){const s=document.createElement("span"),l={angle:0,canvasWidth:0,hasText:""!==e.str,hasEOL:e.hasEOL,fontSize:0};t._textDivs.push(s);const c=n.Util.transform(t._transform,e.transform);let d=Math.atan2(c[1],c[0]);const h=i[e.fontName];h.vertical&&(d+=Math.PI/2);const u=t._fontInspectorEnabled&&h.fontSubstitution||h.fontFamily,p=Math.hypot(c[2],c[3]),g=p*function(t,e){const i=r.get(t);if(i)return i;const n=a(o,e);n.font=`30px ${t}`;const s=n.measureText("");let l=s.fontBoundingBoxAscent,c=Math.abs(s.fontBoundingBoxDescent);if(l){const e=l/(l+c);return r.set(t,e),n.canvas.width=n.canvas.height=0,e}n.strokeStyle="red",n.clearRect(0,0,o,o),n.strokeText("g",0,0);let d=n.getImageData(0,0,o,o).data;c=0;for(let t=d.length-1-3;t>=0;t-=4)if(d[t]>0){c=Math.ceil(t/4/o);break}n.clearRect(0,0,o,o),n.strokeText("A",0,o),d=n.getImageData(0,0,o,o).data,l=0;for(let t=0,e=d.length;t<e;t+=4)if(d[t]>0){l=o-Math.floor(t/4/o);break}if(n.canvas.width=n.canvas.height=0,l){const e=l/(l+c);return r.set(t,e),e}return r.set(t,.8),.8}(u,t._isOffscreenCanvasSupported);let f,m;0===d?(f=c[4],m=c[5]-g):(f=c[4]+g*Math.sin(d),m=c[5]-g*Math.cos(d));const b="calc(var(--scale-factor)*",v=s.style;t._container===t._rootContainer?(v.left=`${(100*f/t._pageWidth).toFixed(2)}%`,v.top=`${(100*m/t._pageHeight).toFixed(2)}%`):(v.left=`${b}${f.toFixed(2)}px)`,v.top=`${b}${m.toFixed(2)}px)`),v.fontSize=`${b}${p.toFixed(2)}px)`,v.fontFamily=u,l.fontSize=p,s.setAttribute("role","presentation"),s.textContent=e.str,s.dir=e.dir,t._fontInspectorEnabled&&(s.dataset.fontName=h.fontSubstitutionLoadedName||e.fontName),0!==d&&(l.angle=d*(180/Math.PI));let y=!1;if(e.str.length>1)y=!0;else if(" "!==e.str&&e.transform[0]!==e.transform[3]){const t=Math.abs(e.transform[0]),i=Math.abs(e.transform[3]);t!==i&&Math.max(t,i)/Math.min(t,i)>1.5&&(y=!0)}y&&(l.canvasWidth=h.vertical?e.height:e.width),t._textDivProperties.set(s,l),t._isReadableStream&&t._layoutText(s)}function c(t){const{div:e,scale:i,properties:n,ctx:s,prevFontSize:o,prevFontFamily:r}=t,{style:a}=e;let l="";if(0!==n.canvasWidth&&n.hasText){const{fontFamily:c}=a,{canvasWidth:d,fontSize:h}=n;o===h&&r===c||(s.font=`${h*i}px ${c}`,t.prevFontSize=h,t.prevFontFamily=c);const{width:u}=s.measureText(e.textContent);u>0&&(l=`scaleX(${d*i/u})`)}0!==n.angle&&(l=`rotate(${n.angle}deg) ${l}`),l.length>0&&(a.transform=l)}class d{constructor({textContentSource:t,container:e,viewport:i,textDivs:o,textDivProperties:r,textContentItemsStr:l,isOffscreenCanvasSupported:c}){this._textContentSource=t,this._isReadableStream=t instanceof ReadableStream,this._container=this._rootContainer=e,this._textDivs=o||[],this._textContentItemsStr=l||[],this._isOffscreenCanvasSupported=c,this._fontInspectorEnabled=!!globalThis.FontInspector?.enabled,this._reader=null,this._textDivProperties=r||new WeakMap,this._canceled=!1,this._capability=new n.PromiseCapability,this._layoutTextParams={prevFontSize:null,prevFontFamily:null,div:null,scale:i.scale*(globalThis.devicePixelRatio||1),properties:null,ctx:a(0,c)};const{pageWidth:d,pageHeight:h,pageX:u,pageY:p}=i.rawDims;this._transform=[1,0,0,-1,-u,p+h],this._pageWidth=d,this._pageHeight=h,(0,s.setLayerDimensions)(e,i),this._capability.promise.finally((()=>{this._layoutTextParams=null})).catch((()=>{}))}get promise(){return this._capability.promise}cancel(){this._canceled=!0,this._reader&&(this._reader.cancel(new n.AbortException("TextLayer task cancelled.")).catch((()=>{})),this._reader=null),this._capability.reject(new n.AbortException("TextLayer task cancelled."))}_processItems(t,e){for(const i of t)if(void 0!==i.str)this._textContentItemsStr.push(i.str),l(this,i,e);else if("beginMarkedContentProps"===i.type||"beginMarkedContent"===i.type){const t=this._container;this._container=document.createElement("span"),this._container.classList.add("markedContent"),null!==i.id&&this._container.setAttribute("id",`${i.id}`),t.append(this._container)}else"endMarkedContent"===i.type&&(this._container=this._container.parentNode)}_layoutText(t){const e=this._layoutTextParams.properties=this._textDivProperties.get(t);if(this._layoutTextParams.div=t,c(this._layoutTextParams),e.hasText&&this._container.append(t),e.hasEOL){const t=document.createElement("br");t.setAttribute("role","presentation"),this._container.append(t)}}_render(){const t=new n.PromiseCapability;let e=Object.create(null);if(this._isReadableStream){const i=()=>{this._reader.read().then((({value:n,done:s})=>{s?t.resolve():(Object.assign(e,n.styles),this._processItems(n.items,e),i())}),t.reject)};this._reader=this._textContentSource.getReader(),i()}else{if(!this._textContentSource)throw new Error('No "textContentSource" parameter specified.');{const{items:e,styles:i}=this._textContentSource;this._processItems(e,i),t.resolve()}}t.promise.then((()=>{e=null,function(t){if(t._canceled)return;const e=t._textDivs,i=t._capability;if(e.length>1e5)i.resolve();else{if(!t._isReadableStream)for(const i of e)t._layoutText(i);i.resolve()}}(this)}),this._capability.reject)}}function h(t){const e=new d(t);return e._render(),e}function u({container:t,viewport:e,textDivs:i,textDivProperties:n,isOffscreenCanvasSupported:o,mustRotate:r=!0,mustRescale:l=!0}){if(r&&(0,s.setLayerDimensions)(t,{rotation:e.rotation}),l){const t=a(0,o),s={prevFontSize:null,prevFontFamily:null,div:null,scale:e.scale*(globalThis.devicePixelRatio||1),properties:null,ctx:t};for(const t of i)s.properties=n.get(t),s.div=t,c(s)}}},92:(t,e,i)=>{i.d(e,{PDFDataTransportStream:()=>o});var n=i(266),s=i(473);class o{constructor({length:t,initialData:e,progressiveDone:i=!1,contentDispositionFilename:s=null,disableRange:o=!1,disableStream:r=!1},a){if((0,n.assert)(a,'PDFDataTransportStream - missing required "pdfDataRangeTransport" argument.'),this._queuedChunks=[],this._progressiveDone=i,this._contentDispositionFilename=s,e?.length>0){const t=e instanceof Uint8Array&&e.byteLength===e.buffer.byteLength?e.buffer:new Uint8Array(e).buffer;this._queuedChunks.push(t)}this._pdfDataRangeTransport=a,this._isStreamingSupported=!r,this._isRangeSupported=!o,this._contentLength=t,this._fullRequestReader=null,this._rangeReaders=[],this._pdfDataRangeTransport.addRangeListener(((t,e)=>{this._onReceiveData({begin:t,chunk:e})})),this._pdfDataRangeTransport.addProgressListener(((t,e)=>{this._onProgress({loaded:t,total:e})})),this._pdfDataRangeTransport.addProgressiveReadListener((t=>{this._onReceiveData({chunk:t})})),this._pdfDataRangeTransport.addProgressiveDoneListener((()=>{this._onProgressiveDone()})),this._pdfDataRangeTransport.transportReady()}_onReceiveData({begin:t,chunk:e}){const i=e instanceof Uint8Array&&e.byteLength===e.buffer.byteLength?e.buffer:new Uint8Array(e).buffer;if(void 0===t)this._fullRequestReader?this._fullRequestReader._enqueue(i):this._queuedChunks.push(i);else{const e=this._rangeReaders.some((function(e){return e._begin===t&&(e._enqueue(i),!0)}));(0,n.assert)(e,"_onReceiveData - no `PDFDataTransportStreamRangeReader` instance found.")}}get _progressiveDataLength(){return this._fullRequestReader?._loaded??0}_onProgress(t){void 0===t.total?this._rangeReaders[0]?.onProgress?.({loaded:t.loaded}):this._fullRequestReader?.onProgress?.({loaded:t.loaded,total:t.total})}_onProgressiveDone(){this._fullRequestReader?.progressiveDone(),this._progressiveDone=!0}_removeRangeReader(t){const e=this._rangeReaders.indexOf(t);e>=0&&this._rangeReaders.splice(e,1)}getFullReader(){(0,n.assert)(!this._fullRequestReader,"PDFDataTransportStream.getFullReader can only be called once.");const t=this._queuedChunks;return this._queuedChunks=null,new r(this,t,this._progressiveDone,this._contentDispositionFilename)}getRangeReader(t,e){if(e<=this._progressiveDataLength)return null;const i=new a(this,t,e);return this._pdfDataRangeTransport.requestDataRange(t,e),this._rangeReaders.push(i),i}cancelAllRequests(t){this._fullRequestReader?.cancel(t);for(const e of this._rangeReaders.slice(0))e.cancel(t);this._pdfDataRangeTransport.abort()}}class r{constructor(t,e,i=!1,n=null){this._stream=t,this._done=i||!1,this._filename=(0,s.isPdfFile)(n)?n:null,this._queuedChunks=e||[],this._loaded=0;for(const t of this._queuedChunks)this._loaded+=t.byteLength;this._requests=[],this._headersReady=Promise.resolve(),t._fullRequestReader=this,this.onProgress=null}_enqueue(t){this._done||(this._requests.length>0?this._requests.shift().resolve({value:t,done:!1}):this._queuedChunks.push(t),this._loaded+=t.byteLength)}get headersReady(){return this._headersReady}get filename(){return this._filename}get isRangeSupported(){return this._stream._isRangeSupported}get isStreamingSupported(){return this._stream._isStreamingSupported}get contentLength(){return this._stream._contentLength}async read(){if(this._queuedChunks.length>0)return{value:this._queuedChunks.shift(),done:!1};if(this._done)return{value:void 0,done:!0};const t=new n.PromiseCapability;return this._requests.push(t),t.promise}cancel(t){this._done=!0;for(const t of this._requests)t.resolve({value:void 0,done:!0});this._requests.length=0}progressiveDone(){this._done||(this._done=!0)}}class a{constructor(t,e,i){this._stream=t,this._begin=e,this._end=i,this._queuedChunk=null,this._requests=[],this._done=!1,this.onProgress=null}_enqueue(t){if(!this._done){if(0===this._requests.length)this._queuedChunk=t;else{this._requests.shift().resolve({value:t,done:!1});for(const t of this._requests)t.resolve({value:void 0,done:!0});this._requests.length=0}this._done=!0,this._stream._removeRangeReader(this)}}get isStreamingSupported(){return!1}async read(){if(this._queuedChunk){const t=this._queuedChunk;return this._queuedChunk=null,{value:t,done:!1}}if(this._done)return{value:void 0,done:!0};const t=new n.PromiseCapability;return this._requests.push(t),t.promise}cancel(t){this._done=!0;for(const t of this._requests)t.resolve({value:void 0,done:!0});this._requests.length=0,this._stream._removeRangeReader(this)}}},368:(t,e,i)=>{i.d(e,{GlobalWorkerOptions:()=>n});const n=Object.create(null);n.workerPort=null,n.workerSrc=""},160:(t,e,i)=>{i.d(e,{XfaLayer:()=>s});var n=i(521);class s{static setupStorage(t,e,i,n,s){const o=n.getValue(e,{value:null});switch(i.name){case"textarea":if(null!==o.value&&(t.textContent=o.value),"print"===s)break;t.addEventListener("input",(t=>{n.setValue(e,{value:t.target.value})}));break;case"input":if("radio"===i.attributes.type||"checkbox"===i.attributes.type){if(o.value===i.attributes.xfaOn?t.setAttribute("checked",!0):o.value===i.attributes.xfaOff&&t.removeAttribute("checked"),"print"===s)break;t.addEventListener("change",(t=>{n.setValue(e,{value:t.target.checked?t.target.getAttribute("xfaOn"):t.target.getAttribute("xfaOff")})}))}else{if(null!==o.value&&t.setAttribute("value",o.value),"print"===s)break;t.addEventListener("input",(t=>{n.setValue(e,{value:t.target.value})}))}break;case"select":if(null!==o.value){t.setAttribute("value",o.value);for(const t of i.children)t.attributes.value===o.value?t.attributes.selected=!0:t.attributes.hasOwnProperty("selected")&&delete t.attributes.selected}t.addEventListener("input",(t=>{const i=t.target.options,s=-1===i.selectedIndex?"":i[i.selectedIndex].value;n.setValue(e,{value:s})}))}}static setAttributes({html:t,element:e,storage:i=null,intent:n,linkService:s}){const{attributes:o}=e,r=t instanceof HTMLAnchorElement;"radio"===o.type&&(o.name=`${o.name}-${n}`);for(const[e,i]of Object.entries(o))if(null!=i)switch(e){case"class":i.length&&t.setAttribute(e,i.join(" "));break;case"dataId":break;case"id":t.setAttribute("data-element-id",i);break;case"style":Object.assign(t.style,i);break;case"textContent":t.textContent=i;break;default:(!r||"href"!==e&&"newWindow"!==e)&&t.setAttribute(e,i)}r&&s.addLinkAttributes(t,o.href,o.newWindow),i&&o.dataId&&this.setupStorage(t,o.dataId,e,i)}static render(t){const e=t.annotationStorage,i=t.linkService,s=t.xfaHtml,o=t.intent||"display",r=document.createElement(s.name);s.attributes&&this.setAttributes({html:r,element:s,intent:o,linkService:i});const a="richText"!==o,l=t.div;if(l.append(r),t.viewport){const e=`matrix(${t.viewport.transform.join(",")})`;l.style.transform=e}a&&l.setAttribute("class","xfaLayer xfaFont");const c=[];if(0===s.children.length){if(s.value){const t=document.createTextNode(s.value);r.append(t),a&&n.XfaText.shouldBuildText(s.name)&&c.push(t)}return{textDivs:c}}const d=[[s,-1,r]];for(;d.length>0;){const[t,s,r]=d.at(-1);if(s+1===t.children.length){d.pop();continue}const l=t.children[++d.at(-1)[1]];if(null===l)continue;const{name:h}=l;if("#text"===h){const t=document.createTextNode(l.value);c.push(t),r.append(t);continue}const u=l?.attributes?.xmlns?document.createElementNS(l.attributes.xmlns,h):document.createElement(h);if(r.append(u),l.attributes&&this.setAttributes({html:u,element:l,storage:e,intent:o,linkService:i}),l.children?.length>0)d.push([l,-1,u]);else if(l.value){const t=document.createTextNode(l.value);a&&n.XfaText.shouldBuildText(h)&&c.push(t),u.append(t)}}for(const t of l.querySelectorAll(".xfaNonInteractive input, .xfaNonInteractive textarea"))t.setAttribute("readOnly",!0);return{textDivs:c}}static update(t){const e=`matrix(${t.viewport.transform.join(",")})`;t.div.style.transform=e,t.div.hidden=!1}}},521:(t,e,i)=>{i.d(e,{XfaText:()=>n});class n{static textContent(t){const e=[],i={items:e,styles:Object.create(null)};return function t(i){if(!i)return;let s=null;const o=i.name;if("#text"===o)s=i.value;else{if(!n.shouldBuildText(o))return;i?.attributes?.textContent?s=i.attributes.textContent:i.value&&(s=i.value)}if(null!==s&&e.push({str:s}),i.children)for(const e of i.children)t(e)}(t),i}static shouldBuildText(t){return!("textarea"===t||"input"===t||"option"===t||"select"===t)}}},907:(t,e,i)=>{i.a(t,(async(t,n)=>{try{i.d(e,{AbortException:()=>s.AbortException,AnnotationEditorLayer:()=>l.AnnotationEditorLayer,AnnotationEditorParamsType:()=>s.AnnotationEditorParamsType,AnnotationEditorType:()=>s.AnnotationEditorType,AnnotationEditorUIManager:()=>c.AnnotationEditorUIManager,AnnotationLayer:()=>d.AnnotationLayer,AnnotationMode:()=>s.AnnotationMode,CMapCompressionType:()=>s.CMapCompressionType,ColorPicker:()=>h.ColorPicker,DOMSVGFactory:()=>r.DOMSVGFactory,DrawLayer:()=>u.DrawLayer,FeatureTest:()=>s.FeatureTest,GlobalWorkerOptions:()=>p.GlobalWorkerOptions,ImageKind:()=>s.ImageKind,InvalidPDFException:()=>s.InvalidPDFException,MissingPDFException:()=>s.MissingPDFException,OPS:()=>s.OPS,Outliner:()=>g.Outliner,PDFDataRangeTransport:()=>o.PDFDataRangeTransport,PDFDateString:()=>r.PDFDateString,PDFWorker:()=>o.PDFWorker,PasswordResponses:()=>s.PasswordResponses,PermissionFlag:()=>s.PermissionFlag,PixelsPerInch:()=>r.PixelsPerInch,PromiseCapability:()=>s.PromiseCapability,RenderingCancelledException:()=>r.RenderingCancelledException,UnexpectedResponseException:()=>s.UnexpectedResponseException,Util:()=>s.Util,VerbosityLevel:()=>s.VerbosityLevel,XfaLayer:()=>f.XfaLayer,build:()=>o.build,createValidAbsoluteUrl:()=>s.createValidAbsoluteUrl,fetchData:()=>r.fetchData,getDocument:()=>o.getDocument,getFilenameFromUrl:()=>r.getFilenameFromUrl,getPdfFilenameFromUrl:()=>r.getPdfFilenameFromUrl,getXfaPageViewport:()=>r.getXfaPageViewport,isDataScheme:()=>r.isDataScheme,isPdfFile:()=>r.isPdfFile,noContextMenu:()=>r.noContextMenu,normalizeUnicode:()=>s.normalizeUnicode,renderTextLayer:()=>a.renderTextLayer,setLayerDimensions:()=>r.setLayerDimensions,shadow:()=>s.shadow,updateTextLayer:()=>a.updateTextLayer,version:()=>o.version});var s=i(266),o=i(406),r=i(473),a=i(739),l=i(629),c=i(812),d=i(640),h=i(97),u=i(423),p=i(368),g=i(405),f=i(160),m=t([o]);o=(m.then?(await m)():m)[0],n()}catch(t){n(t)}}))},694:(t,e,i)=>{i.d(e,{MessageHandler:()=>o});var n=i(266);function s(t){switch(t instanceof Error||"object"==typeof t&&null!==t||(0,n.unreachable)('wrapReason: Expected "reason" to be a (possibly cloned) Error.'),t.name){case"AbortException":return new n.AbortException(t.message);case"MissingPDFException":return new n.MissingPDFException(t.message);case"PasswordException":return new n.PasswordException(t.message,t.code);case"UnexpectedResponseException":return new n.UnexpectedResponseException(t.message,t.status);case"UnknownErrorException":return new n.UnknownErrorException(t.message,t.details);default:return new n.UnknownErrorException(t.message,t.toString())}}class o{constructor(t,e,i){this.sourceName=t,this.targetName=e,this.comObj=i,this.callbackId=1,this.streamId=1,this.streamSinks=Object.create(null),this.streamControllers=Object.create(null),this.callbackCapabilities=Object.create(null),this.actionHandler=Object.create(null),this._onComObjOnMessage=t=>{const e=t.data;if(e.targetName!==this.sourceName)return;if(e.stream)return void this.#Ws(e);if(e.callback){const t=e.callbackId,i=this.callbackCapabilities[t];if(!i)throw new Error(`Cannot resolve callback ${t}`);if(delete this.callbackCapabilities[t],1===e.callback)i.resolve(e.data);else{if(2!==e.callback)throw new Error("Unexpected callback case");i.reject(s(e.reason))}return}const n=this.actionHandler[e.action];if(!n)throw new Error(`Unknown action from worker: ${e.action}`);if(e.callbackId){const t=this.sourceName,o=e.sourceName;new Promise((function(t){t(n(e.data))})).then((function(n){i.postMessage({sourceName:t,targetName:o,callback:1,callbackId:e.callbackId,data:n})}),(function(n){i.postMessage({sourceName:t,targetName:o,callback:2,callbackId:e.callbackId,reason:s(n)})}))}else e.streamId?this.#Gs(e):n(e.data)},i.addEventListener("message",this._onComObjOnMessage)}on(t,e){const i=this.actionHandler;if(i[t])throw new Error(`There is already an actionName called "${t}"`);i[t]=e}send(t,e,i){this.comObj.postMessage({sourceName:this.sourceName,targetName:this.targetName,action:t,data:e},i)}sendWithPromise(t,e,i){const s=this.callbackId++,o=new n.PromiseCapability;this.callbackCapabilities[s]=o;try{this.comObj.postMessage({sourceName:this.sourceName,targetName:this.targetName,action:t,callbackId:s,data:e},i)}catch(t){o.reject(t)}return o.promise}sendWithStream(t,e,i,o){const r=this.streamId++,a=this.sourceName,l=this.targetName,c=this.comObj;return new ReadableStream({start:i=>{const s=new n.PromiseCapability;return this.streamControllers[r]={controller:i,startCall:s,pullCall:null,cancelCall:null,isClosed:!1},c.postMessage({sourceName:a,targetName:l,action:t,streamId:r,data:e,desiredSize:i.desiredSize},o),s.promise},pull:t=>{const e=new n.PromiseCapability;return this.streamControllers[r].pullCall=e,c.postMessage({sourceName:a,targetName:l,stream:6,streamId:r,desiredSize:t.desiredSize}),e.promise},cancel:t=>{(0,n.assert)(t instanceof Error,"cancel must have a valid reason");const e=new n.PromiseCapability;return this.streamControllers[r].cancelCall=e,this.streamControllers[r].isClosed=!0,c.postMessage({sourceName:a,targetName:l,stream:1,streamId:r,reason:s(t)}),e.promise}},i)}#Gs(t){const e=t.streamId,i=this.sourceName,o=t.sourceName,r=this.comObj,a=this,l=this.actionHandler[t.action],c={enqueue(t,s=1,a){if(this.isCancelled)return;const l=this.desiredSize;this.desiredSize-=s,l>0&&this.desiredSize<=0&&(this.sinkCapability=new n.PromiseCapability,this.ready=this.sinkCapability.promise),r.postMessage({sourceName:i,targetName:o,stream:4,streamId:e,chunk:t},a)},close(){this.isCancelled||(this.isCancelled=!0,r.postMessage({sourceName:i,targetName:o,stream:3,streamId:e}),delete a.streamSinks[e])},error(t){(0,n.assert)(t instanceof Error,"error must have a valid reason"),this.isCancelled||(this.isCancelled=!0,r.postMessage({sourceName:i,targetName:o,stream:5,streamId:e,reason:s(t)}))},sinkCapability:new n.PromiseCapability,onPull:null,onCancel:null,isCancelled:!1,desiredSize:t.desiredSize,ready:null};c.sinkCapability.resolve(),c.ready=c.sinkCapability.promise,this.streamSinks[e]=c,new Promise((function(e){e(l(t.data,c))})).then((function(){r.postMessage({sourceName:i,targetName:o,stream:8,streamId:e,success:!0})}),(function(t){r.postMessage({sourceName:i,targetName:o,stream:8,streamId:e,reason:s(t)})}))}#Ws(t){const e=t.streamId,i=this.sourceName,o=t.sourceName,r=this.comObj,a=this.streamControllers[e],l=this.streamSinks[e];switch(t.stream){case 8:t.success?a.startCall.resolve():a.startCall.reject(s(t.reason));break;case 7:t.success?a.pullCall.resolve():a.pullCall.reject(s(t.reason));break;case 6:if(!l){r.postMessage({sourceName:i,targetName:o,stream:7,streamId:e,success:!0});break}l.desiredSize<=0&&t.desiredSize>0&&l.sinkCapability.resolve(),l.desiredSize=t.desiredSize,new Promise((function(t){t(l.onPull?.())})).then((function(){r.postMessage({sourceName:i,targetName:o,stream:7,streamId:e,success:!0})}),(function(t){r.postMessage({sourceName:i,targetName:o,stream:7,streamId:e,reason:s(t)})}));break;case 4:if((0,n.assert)(a,"enqueue should have stream controller"),a.isClosed)break;a.controller.enqueue(t.chunk);break;case 3:if((0,n.assert)(a,"close should have stream controller"),a.isClosed)break;a.isClosed=!0,a.controller.close(),this.#Ks(a,e);break;case 5:(0,n.assert)(a,"error should have stream controller"),a.controller.error(s(t.reason)),this.#Ks(a,e);break;case 2:t.success?a.cancelCall.resolve():a.cancelCall.reject(s(t.reason)),this.#Ks(a,e);break;case 1:if(!l)break;new Promise((function(e){e(l.onCancel?.(s(t.reason)))})).then((function(){r.postMessage({sourceName:i,targetName:o,stream:2,streamId:e,success:!0})}),(function(t){r.postMessage({sourceName:i,targetName:o,stream:2,streamId:e,reason:s(t)})})),l.sinkCapability.reject(s(t.reason)),l.isCancelled=!0,delete this.streamSinks[e];break;default:throw new Error("Unexpected stream case")}}async#Ks(t,e){await Promise.allSettled([t.startCall?.promise,t.pullCall?.promise,t.cancelCall?.promise]),delete this.streamControllers[e]}destroy(){this.comObj.removeEventListener("message",this._onComObjOnMessage)}}},825:(t,e,i)=>{i.d(e,{MurmurHash3_64:()=>a});var n=i(266);const s=3285377520,o=4294901760,r=65535;class a{constructor(t){this.h1=t?4294967295&t:s,this.h2=t?4294967295&t:s}update(t){let e,i;if("string"==typeof t){e=new Uint8Array(2*t.length),i=0;for(let n=0,s=t.length;n<s;n++){const s=t.charCodeAt(n);s<=255?e[i++]=s:(e[i++]=s>>>8,e[i++]=255&s)}}else{if(!(0,n.isArrayBuffer)(t))throw new Error("Wrong data format in MurmurHash3_64_update. Input must be a string or array.");e=t.slice(),i=e.byteLength}const s=i>>2,a=i-4*s,l=new Uint32Array(e.buffer,0,s);let c=0,d=0,h=this.h1,u=this.h2;const p=3432918353,g=461845907,f=11601,m=13715;for(let t=0;t<s;t++)1&t?(c=l[t],c=c*p&o|c*f&r,c=c<<15|c>>>17,c=c*g&o|c*m&r,h^=c,h=h<<13|h>>>19,h=5*h+3864292196):(d=l[t],d=d*p&o|d*f&r,d=d<<15|d>>>17,d=d*g&o|d*m&r,u^=d,u=u<<13|u>>>19,u=5*u+3864292196);switch(c=0,a){case 3:c^=e[4*s+2]<<16;case 2:c^=e[4*s+1]<<8;case 1:c^=e[4*s],c=c*p&o|c*f&r,c=c<<15|c>>>17,c=c*g&o|c*m&r,1&s?h^=c:u^=c}this.h1=h,this.h2=u}hexdigest(){let t=this.h1,e=this.h2;return t^=e>>>1,t=3981806797*t&o|36045*t&r,e=4283543511*e&o|(2950163797*(e<<16|t>>>16)&o)>>>16,t^=e>>>1,t=444984403*t&o|60499*t&r,e=3301882366*e&o|(3120437893*(e<<16|t>>>16)&o)>>>16,t^=e>>>1,(t>>>0).toString(16).padStart(8,"0")+(e>>>0).toString(16).padStart(8,"0")}}},266:(t,e,i)=>{i.d(e,{AbortException:()=>N,AnnotationBorderStyleType:()=>b,AnnotationEditorParamsType:()=>u,AnnotationEditorPrefix:()=>d,AnnotationEditorType:()=>h,AnnotationMode:()=>c,AnnotationPrefix:()=>Q,AnnotationType:()=>m,BaseException:()=>L,CMapCompressionType:()=>y,FONT_IDENTITY_MATRIX:()=>o,FeatureTest:()=>q,FormatError:()=>F,IDENTITY_MATRIX:()=>s,ImageKind:()=>f,InvalidPDFException:()=>R,LINE_FACTOR:()=>a,MAX_IMAGE_SIZE_TO_CACHE:()=>r,MissingPDFException:()=>D,OPS:()=>w,PasswordException:()=>B,PasswordResponses:()=>k,PermissionFlag:()=>p,PromiseCapability:()=>G,RenderingIntentFlag:()=>l,TextRenderingMode:()=>g,UnexpectedResponseException:()=>O,UnknownErrorException:()=>P,Util:()=>V,VerbosityLevel:()=>v,assert:()=>T,bytesToString:()=>H,createValidAbsoluteUrl:()=>M,getUuid:()=>J,getVerbosityLevel:()=>C,info:()=>A,isArrayBuffer:()=>W,isNodeJS:()=>n,normalizeUnicode:()=>Y,objectFromMap:()=>z,setVerbosityLevel:()=>E,shadow:()=>I,string32:()=>U,stringToBytes:()=>j,unreachable:()=>_,warn:()=>S});const n=!("object"!=typeof process||process+""!="[object process]"||process.versions.nw||process.versions.electron&&process.type&&"browser"!==process.type),s=[1,0,0,1,0,0],o=[.001,0,0,.001,0,0],r=1e7,a=1.35,l={ANY:1,DISPLAY:2,PRINT:4,SAVE:8,ANNOTATIONS_FORMS:16,ANNOTATIONS_STORAGE:32,ANNOTATIONS_DISABLE:64,OPLIST:256},c={DISABLE:0,ENABLE:1,ENABLE_FORMS:2,ENABLE_STORAGE:3},d="pdfjs_internal_editor_",h={DISABLE:-1,NONE:0,FREETEXT:3,HIGHLIGHT:9,STAMP:13,INK:15},u={RESIZE:1,CREATE:2,FREETEXT_SIZE:11,FREETEXT_COLOR:12,FREETEXT_OPACITY:13,INK_COLOR:21,INK_THICKNESS:22,INK_OPACITY:23,HIGHLIGHT_COLOR:31,HIGHLIGHT_DEFAULT_COLOR:32},p={PRINT:4,MODIFY_CONTENTS:8,COPY:16,MODIFY_ANNOTATIONS:32,FILL_INTERACTIVE_FORMS:256,COPY_FOR_ACCESSIBILITY:512,ASSEMBLE:1024,PRINT_HIGH_QUALITY:2048},g={FILL:0,STROKE:1,FILL_STROKE:2,INVISIBLE:3,FILL_ADD_TO_PATH:4,STROKE_ADD_TO_PATH:5,FILL_STROKE_ADD_TO_PATH:6,ADD_TO_PATH:7,FILL_STROKE_MASK:3,ADD_TO_PATH_FLAG:4},f={GRAYSCALE_1BPP:1,RGB_24BPP:2,RGBA_32BPP:3},m={TEXT:1,LINK:2,FREETEXT:3,LINE:4,SQUARE:5,CIRCLE:6,POLYGON:7,POLYLINE:8,HIGHLIGHT:9,UNDERLINE:10,SQUIGGLY:11,STRIKEOUT:12,STAMP:13,CARET:14,INK:15,POPUP:16,FILEATTACHMENT:17,SOUND:18,MOVIE:19,WIDGET:20,SCREEN:21,PRINTERMARK:22,TRAPNET:23,WATERMARK:24,THREED:25,REDACT:26},b={SOLID:1,DASHED:2,BEVELED:3,INSET:4,UNDERLINE:5},v={ERRORS:0,WARNINGS:1,INFOS:5},y={NONE:0,BINARY:1},w={dependency:1,setLineWidth:2,setLineCap:3,setLineJoin:4,setMiterLimit:5,setDash:6,setRenderingIntent:7,setFlatness:8,setGState:9,save:10,restore:11,transform:12,moveTo:13,lineTo:14,curveTo:15,curveTo2:16,curveTo3:17,closePath:18,rectangle:19,stroke:20,closeStroke:21,fill:22,eoFill:23,fillStroke:24,eoFillStroke:25,closeFillStroke:26,closeEOFillStroke:27,endPath:28,clip:29,eoClip:30,beginText:31,endText:32,setCharSpacing:33,setWordSpacing:34,setHScale:35,setLeading:36,setFont:37,setTextRenderingMode:38,setTextRise:39,moveText:40,setLeadingMoveText:41,setTextMatrix:42,nextLine:43,showText:44,showSpacedText:45,nextLineShowText:46,nextLineSetSpacingShowText:47,setCharWidth:48,setCharWidthAndBounds:49,setStrokeColorSpace:50,setFillColorSpace:51,setStrokeColor:52,setStrokeColorN:53,setFillColor:54,setFillColorN:55,setStrokeGray:56,setFillGray:57,setStrokeRGBColor:58,setFillRGBColor:59,setStrokeCMYKColor:60,setFillCMYKColor:61,shadingFill:62,beginInlineImage:63,beginImageData:64,endInlineImage:65,paintXObject:66,markPoint:67,markPointProps:68,beginMarkedContent:69,beginMarkedContentProps:70,endMarkedContent:71,beginCompat:72,endCompat:73,paintFormXObjectBegin:74,paintFormXObjectEnd:75,beginGroup:76,endGroup:77,beginAnnotation:80,endAnnotation:81,paintImageMaskXObject:83,paintImageMaskXObjectGroup:84,paintImageXObject:85,paintInlineImageXObject:86,paintInlineImageXObjectGroup:87,paintImageXObjectRepeat:88,paintImageMaskXObjectRepeat:89,paintSolidColorImageMask:90,constructPath:91},k={NEED_PASSWORD:1,INCORRECT_PASSWORD:2};let x=v.WARNINGS;function E(t){Number.isInteger(t)&&(x=t)}function C(){return x}function A(t){x>=v.INFOS&&console.log(`Info: ${t}`)}function S(t){x>=v.WARNINGS&&console.log(`Warning: ${t}`)}function _(t){throw new Error(t)}function T(t,e){t||_(e)}function M(t,e=null,i=null){if(!t)return null;try{if(i&&"string"==typeof t){if(i.addDefaultProtocol&&t.startsWith("www.")){const e=t.match(/\./g);e?.length>=2&&(t=`http://${t}`)}if(i.tryConvertEncoding)try{t=decodeURIComponent(escape(t))}catch{}}const n=e?new URL(t,e):new URL(t);if(function(t){switch(t?.protocol){case"http:":case"https:":case"ftp:":case"mailto:":case"tel:":return!0;default:return!1}}(n))return n}catch{}return null}function I(t,e,i,n=!1){return Object.defineProperty(t,e,{value:i,enumerable:!n,configurable:!0,writable:!1}),i}const L=function(){function t(e,i){this.constructor===t&&_("Cannot initialize BaseException."),this.message=e,this.name=i}return t.prototype=new Error,t.constructor=t,t}();class B extends L{constructor(t,e){super(t,"PasswordException"),this.code=e}}class P extends L{constructor(t,e){super(t,"UnknownErrorException"),this.details=e}}class R extends L{constructor(t){super(t,"InvalidPDFException")}}class D extends L{constructor(t){super(t,"MissingPDFException")}}class O extends L{constructor(t,e){super(t,"UnexpectedResponseException"),this.status=e}}class F extends L{constructor(t){super(t,"FormatError")}}class N extends L{constructor(t){super(t,"AbortException")}}function H(t){"object"==typeof t&&void 0!==t?.length||_("Invalid argument for bytesToString");const e=t.length,i=8192;if(e<i)return String.fromCharCode.apply(null,t);const n=[];for(let s=0;s<e;s+=i){const o=Math.min(s+i,e),r=t.subarray(s,o);n.push(String.fromCharCode.apply(null,r))}return n.join("")}function j(t){"string"!=typeof t&&_("Invalid argument for stringToBytes");const e=t.length,i=new Uint8Array(e);for(let n=0;n<e;++n)i[n]=255&t.charCodeAt(n);return i}function U(t){return String.fromCharCode(t>>24&255,t>>16&255,t>>8&255,255&t)}function z(t){const e=Object.create(null);for(const[i,n]of t)e[i]=n;return e}class q{static get isLittleEndian(){return I(this,"isLittleEndian",function(){const t=new Uint8Array(4);return t[0]=1,1===new Uint32Array(t.buffer,0,1)[0]}())}static get isEvalSupported(){return I(this,"isEvalSupported",function(){try{return new Function(""),!0}catch{return!1}}())}static get isOffscreenCanvasSupported(){return I(this,"isOffscreenCanvasSupported","undefined"!=typeof OffscreenCanvas)}static get platform(){return"undefined"!=typeof navigator&&"string"==typeof navigator?.platform?I(this,"platform",{isMac:navigator.platform.includes("Mac")}):I(this,"platform",{isMac:!1})}static get isCSSRoundSupported(){return I(this,"isCSSRoundSupported",globalThis.CSS?.supports?.("width: round(1.5px, 1px)"))}}const $=[...Array(256).keys()].map((t=>t.toString(16).padStart(2,"0")));class V{static makeHexColor(t,e,i){return`#${$[t]}${$[e]}${$[i]}`}static scaleMinMax(t,e){let i;t[0]?(t[0]<0&&(i=e[0],e[0]=e[1],e[1]=i),e[0]*=t[0],e[1]*=t[0],t[3]<0&&(i=e[2],e[2]=e[3],e[3]=i),e[2]*=t[3],e[3]*=t[3]):(i=e[0],e[0]=e[2],e[2]=i,i=e[1],e[1]=e[3],e[3]=i,t[1]<0&&(i=e[2],e[2]=e[3],e[3]=i),e[2]*=t[1],e[3]*=t[1],t[2]<0&&(i=e[0],e[0]=e[1],e[1]=i),e[0]*=t[2],e[1]*=t[2]),e[0]+=t[4],e[1]+=t[4],e[2]+=t[5],e[3]+=t[5]}static transform(t,e){return[t[0]*e[0]+t[2]*e[1],t[1]*e[0]+t[3]*e[1],t[0]*e[2]+t[2]*e[3],t[1]*e[2]+t[3]*e[3],t[0]*e[4]+t[2]*e[5]+t[4],t[1]*e[4]+t[3]*e[5]+t[5]]}static applyTransform(t,e){return[t[0]*e[0]+t[1]*e[2]+e[4],t[0]*e[1]+t[1]*e[3]+e[5]]}static applyInverseTransform(t,e){const i=e[0]*e[3]-e[1]*e[2];return[(t[0]*e[3]-t[1]*e[2]+e[2]*e[5]-e[4]*e[3])/i,(-t[0]*e[1]+t[1]*e[0]+e[4]*e[1]-e[5]*e[0])/i]}static getAxialAlignedBoundingBox(t,e){const i=this.applyTransform(t,e),n=this.applyTransform(t.slice(2,4),e),s=this.applyTransform([t[0],t[3]],e),o=this.applyTransform([t[2],t[1]],e);return[Math.min(i[0],n[0],s[0],o[0]),Math.min(i[1],n[1],s[1],o[1]),Math.max(i[0],n[0],s[0],o[0]),Math.max(i[1],n[1],s[1],o[1])]}static inverseTransform(t){const e=t[0]*t[3]-t[1]*t[2];return[t[3]/e,-t[1]/e,-t[2]/e,t[0]/e,(t[2]*t[5]-t[4]*t[3])/e,(t[4]*t[1]-t[5]*t[0])/e]}static singularValueDecompose2dScale(t){const e=[t[0],t[2],t[1],t[3]],i=t[0]*e[0]+t[1]*e[2],n=t[0]*e[1]+t[1]*e[3],s=t[2]*e[0]+t[3]*e[2],o=t[2]*e[1]+t[3]*e[3],r=(i+o)/2,a=Math.sqrt((i+o)**2-4*(i*o-s*n))/2,l=r+a||1,c=r-a||1;return[Math.sqrt(l),Math.sqrt(c)]}static normalizeRect(t){const e=t.slice(0);return t[0]>t[2]&&(e[0]=t[2],e[2]=t[0]),t[1]>t[3]&&(e[1]=t[3],e[3]=t[1]),e}static intersect(t,e){const i=Math.max(Math.min(t[0],t[2]),Math.min(e[0],e[2])),n=Math.min(Math.max(t[0],t[2]),Math.max(e[0],e[2]));if(i>n)return null;const s=Math.max(Math.min(t[1],t[3]),Math.min(e[1],e[3])),o=Math.min(Math.max(t[1],t[3]),Math.max(e[1],e[3]));return s>o?null:[i,s,n,o]}static bezierBoundingBox(t,e,i,n,s,o,r,a){const l=[],c=[[],[]];let d,h,u,p,g,f,m,b;for(let c=0;c<2;++c)if(0===c?(h=6*t-12*i+6*s,d=-3*t+9*i-9*s+3*r,u=3*i-3*t):(h=6*e-12*n+6*o,d=-3*e+9*n-9*o+3*a,u=3*n-3*e),Math.abs(d)<1e-12){if(Math.abs(h)<1e-12)continue;p=-u/h,0<p&&p<1&&l.push(p)}else m=h*h-4*u*d,b=Math.sqrt(m),m<0||(g=(-h+b)/(2*d),0<g&&g<1&&l.push(g),f=(-h-b)/(2*d),0<f&&f<1&&l.push(f));let v,y=l.length;const w=y;for(;y--;)p=l[y],v=1-p,c[0][y]=v*v*v*t+3*v*v*p*i+3*v*p*p*s+p*p*p*r,c[1][y]=v*v*v*e+3*v*v*p*n+3*v*p*p*o+p*p*p*a;return c[0][w]=t,c[1][w]=e,c[0][w+1]=r,c[1][w+1]=a,c[0].length=c[1].length=w+2,[Math.min(...c[0]),Math.min(...c[1]),Math.max(...c[0]),Math.max(...c[1])]}}function W(t){return"object"==typeof t&&void 0!==t?.byteLength}class G{#Xs=!1;constructor(){this.promise=new Promise(((t,e)=>{this.resolve=e=>{this.#Xs=!0,t(e)},this.reject=t=>{this.#Xs=!0,e(t)}}))}get settled(){return this.#Xs}}let K=null,X=null;function Y(t){return K||(K=/([\u00a0\u00b5\u037e\u0eb3\u2000-\u200a\u202f\u2126\ufb00-\ufb04\ufb06\ufb20-\ufb36\ufb38-\ufb3c\ufb3e\ufb40-\ufb41\ufb43-\ufb44\ufb46-\ufba1\ufba4-\ufba9\ufbae-\ufbb1\ufbd3-\ufbdc\ufbde-\ufbe7\ufbea-\ufbf8\ufbfc-\ufbfd\ufc00-\ufc5d\ufc64-\ufcf1\ufcf5-\ufd3d\ufd88\ufdf4\ufdfa-\ufdfb\ufe71\ufe77\ufe79\ufe7b\ufe7d]+)|(\ufb05+)/gu,X=new Map([["ﬅ","ſt"]])),t.replaceAll(K,((t,e,i)=>e?e.normalize("NFKC"):X.get(i)))}function J(){if("undefined"!=typeof crypto&&"function"==typeof crypto?.randomUUID)return crypto.randomUUID();const t=new Uint8Array(32);if("undefined"!=typeof crypto&&"function"==typeof crypto?.getRandomValues)crypto.getRandomValues(t);else for(let e=0;e<32;e++)t[e]=Math.floor(255*Math.random());return H(t)}const Q="pdfjs_internal_id_"}},o={};function p(t){var e=o[t];if(void 0!==e)return e.exports;var i=o[t]={exports:{}};return s[t](i,i.exports,p),i.exports}c="function"==typeof Symbol?Symbol("webpack queues"):"__webpack_queues__",d="function"==typeof Symbol?Symbol("webpack exports"):"__webpack_exports__",h="function"==typeof Symbol?Symbol("webpack error"):"__webpack_error__",u=t=>{t&&t.d<1&&(t.d=1,t.forEach((t=>t.r--)),t.forEach((t=>t.r--?t.r++:t())))},p.a=(t,e,i)=>{var n;i&&((n=[]).d=-1);var s,o,r,a=new Set,l=t.exports,p=new Promise(((t,e)=>{r=e,o=t}));p[d]=l,p[c]=t=>(n&&t(n),a.forEach(t),p.catch((t=>{}))),t.exports=p,e((t=>{var e;s=(t=>t.map((t=>{if(null!==t&&"object"==typeof t){if(t[c])return t;if(t.then){var e=[];e.d=0,t.then((t=>{i[d]=t,u(e)}),(t=>{i[h]=t,u(e)}));var i={};return i[c]=t=>t(e),i}}var n={};return n[c]=t=>{},n[d]=t,n})))(t);var i=()=>s.map((t=>{if(t[h])throw t[h];return t[d]})),o=new Promise((t=>{(e=()=>t(i)).r=0;var o=t=>t!==n&&!a.has(t)&&(a.add(t),t&&!t.d&&(e.r++,t.push(e)));s.map((t=>t[c](o)))}));return e.r?o:i()}),(t=>(t?r(p[h]=t):o(l),u(n)))),n&&n.d<0&&(n.d=0)},p.d=(t,e)=>{for(var i in e)p.o(e,i)&&!p.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:e[i]})},p.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e);var r=p(907),a=((r=globalThis.pdfjsLib=await(globalThis.pdfjsLibPromise=r)).AbortException,r.AnnotationEditorLayer,r.AnnotationEditorParamsType,r.AnnotationEditorType,r.AnnotationEditorUIManager,r.AnnotationLayer,r.AnnotationMode,r.CMapCompressionType,r.ColorPicker,r.DOMSVGFactory,r.DrawLayer,r.FeatureTest,r.GlobalWorkerOptions),l=(r.ImageKind,r.InvalidPDFException,r.MissingPDFException,r.OPS,r.Outliner,r.PDFDataRangeTransport,r.PDFDateString,r.PDFWorker,r.PasswordResponses,r.PermissionFlag,r.PixelsPerInch,r.PromiseCapability,r.RenderingCancelledException,r.UnexpectedResponseException,r.Util,r.VerbosityLevel,r.XfaLayer,r.build,r.createValidAbsoluteUrl,r.fetchData,r.getDocument);r.getFilenameFromUrl,r.getPdfFilenameFromUrl,r.getXfaPageViewport,r.isDataScheme,r.isPdfFile,r.noContextMenu,r.normalizeUnicode,r.renderTextLayer,r.setLayerDimensions,r.shadow,r.updateTextLayer,r.version,n()}catch(g){n(g)}var c,d,h,u}),1)}},o={};function r(t){var e=o[t];if(void 0!==e)return e.exports;var i=o[t]={exports:{}};return s[t].call(i.exports,i,i.exports,r),i.exports}t="function"==typeof Symbol?Symbol("webpack queues"):"__webpack_queues__",e="function"==typeof Symbol?Symbol("webpack exports"):"__webpack_exports__",i="function"==typeof Symbol?Symbol("webpack error"):"__webpack_error__",n=t=>{t&&t.d<1&&(t.d=1,t.forEach((t=>t.r--)),t.forEach((t=>t.r--?t.r++:t())))},r.a=(s,o,r)=>{var a;r&&((a=[]).d=-1);var l,c,d,h=new Set,u=s.exports,p=new Promise(((t,e)=>{d=e,c=t}));p[e]=u,p[t]=t=>(a&&t(a),h.forEach(t),p.catch((t=>{}))),s.exports=p,o((s=>{var o;l=(s=>s.map((s=>{if(null!==s&&"object"==typeof s){if(s[t])return s;if(s.then){var o=[];o.d=0,s.then((t=>{r[e]=t,n(o)}),(t=>{r[i]=t,n(o)}));var r={};return r[t]=t=>t(o),r}}var a={};return a[t]=t=>{},a[e]=s,a})))(s);var r=()=>l.map((t=>{if(t[i])throw t[i];return t[e]})),c=new Promise((e=>{(o=()=>e(r)).r=0;var i=t=>t!==a&&!h.has(t)&&(h.add(t),t&&!t.d&&(o.r++,t.push(o)));l.map((e=>e[t](i)))}));return o.r?c:r()}),(t=>(t?d(p[i]=t):c(u),n(a)))),a&&a.d<0&&(a.d=0)},r.d=(t,e)=>{for(var i in e)r.o(e,i)&&!r.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:e[i]})},r.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r(316)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,